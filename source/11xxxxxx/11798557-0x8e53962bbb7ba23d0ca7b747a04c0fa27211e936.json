{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/futures/platforms/yearn/yTokenFuture.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"contracts/protocol/futures/RateFuture.sol\\\";\\nimport \\\"contracts/interfaces/platforms/yearn/IyToken.sol\\\";\\n\\n/**\\n * @title Contract for yToken Future\\n * @author Gaspard Peduzzi\\n * @notice Handles the future mechanisms for the Aave platform\\n * @dev Implement directly the stream future abstraction as it fits the aToken IBT\\n */\\ncontract yTokenFuture is RateFuture {\\n    /**\\n     * @notice Getter for the rate of the IBT\\n     * @return the uint256 rate, IBT x rate must be equal to the quantity of underlying tokens\\n     */\\n    function getIBTRate() public view override returns (uint256) {\\n        return yToken(address(ibt)).getPricePerFullShare();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/futures/RateFuture.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"contracts/protocol/futures/Future.sol\\\";\\n\\n/**\\n * @title Main future abstraction contract for the rate futures\\n * @author Gaspard Peduzzi\\n * @notice Handles the rates future mecanisms\\n * @dev Basis of all mecanisms for futures (registrations, period switch)\\n */\\nabstract contract RateFuture is Future {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256[] private IBTRates;\\n\\n    /**\\n     * @notice Intializer\\n     * @param _controller the address of the controller\\n     * @param _ibt the address of the corresponding IBT\\n     * @param _periodDuration the length of the period (in days)\\n     * @param _platformName the name of the platform and tools\\n     * @param _admin the address of the ACR admin\\n     */\\n    function initialize(\\n        address _controller,\\n        address _ibt,\\n        uint256 _periodDuration,\\n        string memory _platformName,\\n        address _deployerAddress,\\n        address _admin\\n    ) public virtual override initializer {\\n        super.initialize(_controller, _ibt, _periodDuration, _platformName, _deployerAddress, _admin);\\n        IBTRates.push();\\n        IBTRates.push();\\n    }\\n\\n    /**\\n     * @notice Sender registers an amount of IBT for the next period\\n     * @param _user address to register to the future\\n     * @param _amount amount of IBT to be registered\\n     * @dev called by the controller only\\n     */\\n    function register(address _user, uint256 _amount) public virtual override periodsActive nonReentrant {\\n        super.register(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Sender unregisters an amount of IBT for the next period\\n     * @param _user user addresss\\n     * @param _amount amount of IBT to be unregistered\\n     * @dev 0 unregisters all\\n     */\\n    function unregister(address _user, uint256 _amount) public virtual override nonReentrant {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"Caller is not allowed to unregister\\\");\\n\\n        uint256 nextIndex = getNextPeriodIndex();\\n        require(registrations[_user].startIndex == nextIndex, \\\"The is not ongoing registration for the next period\\\");\\n\\n        uint256 currentRegistered = registrations[_user].scaledBalance;\\n        uint256 toRefund;\\n\\n        if (_amount == 0) {\\n            delete registrations[_user];\\n            toRefund = currentRegistered;\\n        } else {\\n            require(currentRegistered >= _amount, \\\"Invalid amount to unregister\\\");\\n            registrations[_user].scaledBalance = registrations[_user].scaledBalance.sub(currentRegistered);\\n            toRefund = _amount;\\n        }\\n\\n        ibt.transfer(_user, toRefund);\\n    }\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() public virtual override nextPeriodAvailable periodsActive nonReentrant {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"Caller is not allowed to start the next period\\\");\\n\\n        uint256 nextPeriodID = getNextPeriodIndex();\\n        uint256 currentRate = getIBTRate();\\n\\n        IBTRates[nextPeriodID] = currentRate;\\n        registrationsTotals[nextPeriodID] = ibt.balanceOf(address(this));\\n\\n        /* Yield */\\n        uint256 yield =\\n            (ibt.balanceOf(address(futureVault)).mul(currentRate.sub(IBTRates[nextPeriodID - 1]))).div(currentRate);\\n        if (yield > 0) assert(ibt.transferFrom(address(futureVault), address(futureWallet), yield));\\n        futureWallet.registerExpiredFuture(yield); // Yield deposit in the futureWallet contract\\n\\n        /* Period Switch*/\\n        if (registrationsTotals[nextPeriodID] > 0) {\\n            apwibt.mint(address(this), registrationsTotals[nextPeriodID].mul(IBTRates[nextPeriodID])); // Mint new apwIBTs\\n            ibt.transfer(address(futureVault), registrationsTotals[nextPeriodID]); // Send IBT to future for the new period\\n        }\\n\\n        registrationsTotals.push();\\n        IBTRates.push();\\n\\n        /* Future Yield Token */\\n        address fytAddress = deployFutureYieldToken(nextPeriodID);\\n        emit NewPeriodStarted(nextPeriodID, fytAddress);\\n    }\\n\\n    /**\\n     * @notice Getter for user registered amount\\n     * @param _user user to return the registered funds of\\n     * @return the registered amount, 0 if no registrations\\n     * @dev the registration can be older than the next period\\n     */\\n    function getRegisteredAmount(address _user) public view override returns (uint256) {\\n        uint256 periodID = registrations[_user].startIndex;\\n        if (periodID == getNextPeriodIndex()) {\\n            return registrations[_user].scaledBalance;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function scaleIBTAmount(\\n        uint256 _initialAmount,\\n        uint256 _initialRate,\\n        uint256 _newRate\\n    ) public pure returns (uint256) {\\n        return (_initialAmount.mul(_initialRate)).div(_newRate);\\n    }\\n\\n    /**\\n     * @notice Getter for the amount of apwIBT that the user can claim\\n     * @param _user user to check the check the claimable apwIBT of\\n     * @return the amount of apwIBT claimable by the user\\n     */\\n    function getClaimableAPWIBT(address _user) public view override returns (uint256) {\\n        if (!hasClaimableAPWIBT(_user)) return 0;\\n        return\\n            scaleIBTAmount(\\n                registrations[_user].scaledBalance,\\n                IBTRates[registrations[_user].startIndex],\\n                IBTRates[getNextPeriodIndex() - 1]\\n            );\\n    }\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) public view override returns (uint256) {\\n        return scaleIBTAmount(super.getUnlockableFunds(_user), IBTRates[getNextPeriodIndex() - 1], getIBTRate());\\n    }\\n\\n    /**\\n     * @notice Getter for yield that is generated by the user funds during the current period\\n     * @param _user user to check the unrealised yield of\\n     * @return the yield (amount of IBT) currently generated by the locked funds of the user\\n     */\\n    function getUnrealisedYield(address _user) public view override returns (uint256) {\\n        return\\n            apwibt.balanceOf(_user).sub(\\n                scaleIBTAmount(apwibt.balanceOf(_user), IBTRates[getNextPeriodIndex() - 1], getIBTRate())\\n            );\\n    }\\n\\n    /**\\n     * @notice Getter for the rate of the IBT\\n     * @return the uint256 rate, IBT x rate must be equal to the quantity of underlying tokens\\n     */\\n    function getIBTRate() public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/platforms/yearn/IyToken.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/ERC20.sol\\\";\\n\\ninterface yToken is ERC20 {\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/futures/Future.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"contracts/interfaces/IProxyFactory.sol\\\";\\nimport \\\"contracts/interfaces/apwine/tokens/IFutureYieldToken.sol\\\";\\nimport \\\"contracts/interfaces/apwine/utils/IAPWineMath.sol\\\";\\n\\nimport \\\"contracts/interfaces/apwine/tokens/IAPWineIBT.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFutureWallet.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFuture.sol\\\";\\n\\nimport \\\"contracts/interfaces/apwine/IController.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IFutureVault.sol\\\";\\nimport \\\"contracts/interfaces/apwine/ILiquidityGauge.sol\\\";\\nimport \\\"contracts/interfaces/apwine/IRegistry.sol\\\";\\n\\n/**\\n * @title Main future abstraction contract\\n * @author Gaspard Peduzzi\\n * @notice Handles the future mechanisms\\n * @dev Basis of all mecanisms for futures (registrations, period switch)\\n */\\nabstract contract Future is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /* Structs */\\n    struct Registration {\\n        uint256 startIndex;\\n        uint256 scaledBalance;\\n    }\\n\\n    uint256[] internal registrationsTotals;\\n\\n    /* ACR */\\n    bytes32 public constant CONTROLLER_ROLE = keccak256(\\\"CONTROLLER_ROLE\\\");\\n    bytes32 public constant FUTURE_PAUSER = keccak256(\\\"FUTURE_PAUSER\\\");\\n    bytes32 public constant FUTURE_DEPLOYER = keccak256(\\\"FUTURE_DEPLOYER\\\");\\n\\n    /* State variables */\\n    mapping(address => uint256) internal lastPeriodClaimed;\\n    mapping(address => Registration) internal registrations;\\n    IFutureYieldToken[] public fyts;\\n\\n    /* External contracts */\\n    IFutureVault internal futureVault;\\n    IFutureWallet internal futureWallet;\\n    ILiquidityGauge internal liquidityGauge;\\n    ERC20 internal ibt;\\n    IAPWineIBT internal apwibt;\\n    IController internal controller;\\n\\n    /* Settings */\\n    uint256 public PERIOD_DURATION;\\n    string public PLATFORM_NAME;\\n    bool public PAUSED;\\n\\n    /* Events */\\n    event UserRegistered(address _userAddress, uint256 _amount, uint256 _periodIndex);\\n    event NewPeriodStarted(uint256 _newPeriodIndex, address _fytAddress);\\n    event FutureVaultSet(address _futureVault);\\n    event FutureWalletSet(address _futureWallet);\\n    event LiquidityGaugeSet(address _liquidityGauge);\\n    event FundsWithdrawn(address _user, uint256 _amount);\\n    event PeriodsPaused();\\n    event PeriodsResumed();\\n\\n    /* Modifiers */\\n    modifier nextPeriodAvailable() {\\n        uint256 controllerDelay = controller.STARTING_DELAY();\\n        require(\\n            controller.getNextPeriodStart(PERIOD_DURATION) < block.timestamp.add(controllerDelay),\\n            \\\"Next period start range not reached yet\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier periodsActive() {\\n        require(!PAUSED, \\\"New periods are currently paused\\\");\\n        _;\\n    }\\n\\n    /* Initializer */\\n    /**\\n     * @notice Intializer\\n     * @param _controller the address of the controller\\n     * @param _ibt the address of the corresponding IBT\\n     * @param _periodDuration the length of the period (in days)\\n     * @param _platformName the name of the platform and tools\\n     * @param _admin the address of the ACR admin\\n     */\\n    function initialize(\\n        address _controller,\\n        address _ibt,\\n        uint256 _periodDuration,\\n        string memory _platformName,\\n        address _deployerAddress,\\n        address _admin\\n    ) public virtual initializer {\\n        controller = IController(_controller);\\n        ibt = ERC20(_ibt);\\n        PERIOD_DURATION = _periodDuration * (1 days);\\n        PLATFORM_NAME = _platformName;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(CONTROLLER_ROLE, _controller);\\n        _setupRole(FUTURE_PAUSER, _controller);\\n        _setupRole(FUTURE_DEPLOYER, _deployerAddress);\\n\\n        registrationsTotals.push();\\n        registrationsTotals.push();\\n        fyts.push();\\n\\n        IRegistry registry = IRegistry(controller.getRegistryAddress());\\n\\n        string memory ibtSymbol = controller.getFutureIBTSymbol(ibt.symbol(), _platformName, _periodDuration);\\n        bytes memory payload =\\n            abi.encodeWithSignature(\\\"initialize(string,string,address)\\\", ibtSymbol, ibtSymbol, address(this));\\n        apwibt = IAPWineIBT(\\n            IProxyFactory(registry.getProxyFactoryAddress()).deployMinimal(registry.getAPWineIBTLogicAddress(), payload)\\n        );\\n    }\\n\\n    /* Period functions */\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() public virtual;\\n\\n    /**\\n     * @notice Sender registers an amount of IBT for the next period\\n     * @param _user address to register to the future\\n     * @param _amount amount of IBT to be registered\\n     * @dev called by the controller only\\n     */\\n    function register(address _user, uint256 _amount) public virtual periodsActive {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"Caller is not allowed to register\\\");\\n        uint256 nextIndex = getNextPeriodIndex();\\n        if (registrations[_user].scaledBalance == 0) {\\n            // User has no record\\n            _register(_user, _amount);\\n        } else {\\n            if (registrations[_user].startIndex == nextIndex) {\\n                // User has already an existing registration for the next period\\n                registrations[_user].scaledBalance = registrations[_user].scaledBalance.add(_amount);\\n            } else {\\n                // User had an unclaimed registation from a previous period\\n                _claimAPWIBT(_user);\\n                _register(_user, _amount);\\n            }\\n        }\\n        emit UserRegistered(_user, _amount, nextIndex);\\n    }\\n\\n    function _register(address _user, uint256 _initialScaledBalance) internal virtual {\\n        registrations[_user] = Registration({startIndex: getNextPeriodIndex(), scaledBalance: _initialScaledBalance});\\n    }\\n\\n    /**\\n     * @notice Sender unregisters an amount of IBT for the next period\\n     * @param _user user address\\n     * @param _amount amount of IBT to be unregistered\\n     */\\n    function unregister(address _user, uint256 _amount) public virtual;\\n\\n    /* Claim functions */\\n\\n    /**\\n     * @notice Send the user their owed FYT (and apwIBT if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user) public virtual nonReentrant {\\n        require(hasClaimableFYT(_user), \\\"No FYT claimable for this address\\\");\\n        if (hasClaimableAPWIBT(_user)) _claimAPWIBT(_user);\\n        else _claimFYT(_user);\\n    }\\n\\n    function _claimFYT(address _user) internal virtual {\\n        uint256 nextIndex = getNextPeriodIndex();\\n        for (uint256 i = lastPeriodClaimed[_user] + 1; i < nextIndex; i++) {\\n            claimFYTforPeriod(_user, i);\\n        }\\n    }\\n\\n    function claimFYTforPeriod(address _user, uint256 _periodIndex) internal virtual {\\n        assert((lastPeriodClaimed[_user] + 1) == _periodIndex);\\n        assert(_periodIndex < getNextPeriodIndex());\\n        assert(_periodIndex != 0);\\n        lastPeriodClaimed[_user] = _periodIndex;\\n        fyts[_periodIndex].transfer(_user, apwibt.balanceOf(_user));\\n    }\\n\\n    function _claimAPWIBT(address _user) internal virtual {\\n        uint256 nextIndex = getNextPeriodIndex();\\n        uint256 claimableAPWIBT = getClaimableAPWIBT(_user);\\n\\n        if (_hasOnlyClaimableFYT(_user)) _claimFYT(_user);\\n        apwibt.transfer(_user, claimableAPWIBT);\\n\\n        for (uint256 i = registrations[_user].startIndex; i < nextIndex; i++) {\\n            // get unclaimed fyt\\n            fyts[i].transfer(_user, claimableAPWIBT);\\n        }\\n\\n        lastPeriodClaimed[_user] = nextIndex - 1;\\n        delete registrations[_user];\\n    }\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their apwIBT holding\\n     * @param _user user adress\\n     * @param _amount amount of funds to unlock\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdrawLockFunds(address _user, uint256 _amount) public virtual nonReentrant {\\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \\\"Caller is not allowed to withdraw locked funds\\\");\\n        require((_amount > 0) && (_amount <= apwibt.balanceOf(_user)), \\\"Invalid amount\\\");\\n        if (hasClaimableAPWIBT(_user)) {\\n            _claimAPWIBT(_user);\\n        } else if (hasClaimableFYT(_user)) {\\n            _claimFYT(_user);\\n        }\\n\\n        uint256 unlockableFunds = getUnlockableFunds(_user);\\n        uint256 unrealisedYield = getUnrealisedYield(_user);\\n\\n        uint256 fundsToBeUnlocked = _amount.mul(unlockableFunds).div(apwibt.balanceOf(_user));\\n        uint256 yieldToBeUnlocked = _amount.mul(unrealisedYield).div(apwibt.balanceOf(_user));\\n\\n        uint256 yieldToBeRedeemed = yieldToBeUnlocked.mul(controller.getUnlockYieldFactor(PERIOD_DURATION));\\n\\n        ibt.transferFrom(address(futureVault), _user, fundsToBeUnlocked.add(yieldToBeRedeemed));\\n\\n        ibt.transferFrom(\\n            address(futureVault),\\n            IRegistry(controller.getRegistryAddress()).getTreasuryAddress(),\\n            unrealisedYield.sub(yieldToBeRedeemed)\\n        );\\n        apwibt.burnFrom(_user, _amount);\\n        fyts[getNextPeriodIndex() - 1].burnFrom(_user, _amount);\\n        emit FundsWithdrawn(_user, _amount);\\n    }\\n\\n    /* Utilitary functions */\\n\\n    function deployFutureYieldToken(uint256 _internalPeriodID) internal returns (address) {\\n        IRegistry registry = IRegistry(controller.getRegistryAddress());\\n        string memory tokenDenomination = controller.getFYTSymbol(apwibt.symbol(), PERIOD_DURATION);\\n        bytes memory payload =\\n            abi.encodeWithSignature(\\n                \\\"initialize(string,string,uint256,address)\\\",\\n                tokenDenomination,\\n                tokenDenomination,\\n                _internalPeriodID,\\n                address(this)\\n            );\\n        IFutureYieldToken newToken =\\n            IFutureYieldToken(\\n                IProxyFactory(registry.getProxyFactoryAddress()).deployMinimal(registry.getFYTLogicAddress(), payload)\\n            );\\n        fyts.push(newToken);\\n        newToken.mint(address(this), apwibt.totalSupply().mul(10**(uint256(18 - ibt.decimals()))));\\n        return address(newToken);\\n    }\\n\\n    /* Getters */\\n\\n    /**\\n     * @notice Check if a user has unclaimed FYT\\n     * @param _user the user to check\\n     * @return true if the user can claim some FYT, false otherwise\\n     */\\n    function hasClaimableFYT(address _user) public view returns (bool) {\\n        return hasClaimableAPWIBT(_user) || _hasOnlyClaimableFYT(_user);\\n    }\\n\\n    function _hasOnlyClaimableFYT(address _user) internal view returns (bool) {\\n        return lastPeriodClaimed[_user] != 0 && lastPeriodClaimed[_user] < getNextPeriodIndex() - 1;\\n    }\\n\\n    /**\\n     * @notice Check if a user has IBT not claimed\\n     * @param _user the user to check\\n     * @return true if the user can claim some IBT, false otherwise\\n     */\\n    function hasClaimableAPWIBT(address _user) public view returns (bool) {\\n        return (registrations[_user].startIndex < getNextPeriodIndex()) && (registrations[_user].scaledBalance > 0);\\n    }\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() public view virtual returns (uint256) {\\n        return registrationsTotals.length - 1;\\n    }\\n\\n    /**\\n     * @notice Getter for the amount of apwIBT that the user can claim\\n     * @param _user user to check the check the claimable apwIBT of\\n     * @return the amount of apwIBT claimable by the user\\n     */\\n    function getClaimableAPWIBT(address _user) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user the user to check the claimable FYT of\\n     * @param _periodID period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodID) public view virtual returns (uint256) {\\n        if (\\n            _periodID >= getNextPeriodIndex() ||\\n            registrations[_user].startIndex == 0 ||\\n            registrations[_user].scaledBalance == 0 ||\\n            registrations[_user].startIndex > _periodID\\n        ) {\\n            return 0;\\n        } else {\\n            return getClaimableAPWIBT(_user);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user the user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) public view virtual returns (uint256) {\\n        return apwibt.balanceOf(_user);\\n    }\\n\\n    /**\\n     * @notice Getter for user registered amount\\n     * @param _user the user to return the registered funds of\\n     * @return the registered amount, 0 if no registrations\\n     * @dev the registration can be older than the next period\\n     */\\n    function getRegisteredAmount(address _user) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Getter for yield that is generated by the user funds during the current period\\n     * @param _user the user to check the unrealized yield of\\n     * @return the yield (amount of IBT) currently generated by the locked funds of the user\\n     */\\n    function getUnrealisedYield(address _user) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() public view returns (address) {\\n        return address(controller);\\n    }\\n\\n    /**\\n     * @notice Getter for future wallet address\\n     * @return future wallet address\\n     */\\n    function getFutureVaultAddress() public view returns (address) {\\n        return address(futureVault);\\n    }\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() public view returns (address) {\\n        return address(futureWallet);\\n    }\\n\\n    /**\\n     * @notice Getter for liquidity gauge address\\n     * @return liquidity gauge address\\n     */\\n    function getLiquidityGaugeAddress() public view returns (address) {\\n        return address(liquidityGauge);\\n    }\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() public view returns (address) {\\n        return address(ibt);\\n    }\\n\\n    /**\\n     * @notice Getter for future apwIBT address\\n     * @return apwIBT address\\n     */\\n    function getAPWIBTAddress() public view returns (address) {\\n        return address(apwibt);\\n    }\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex) public view returns (address) {\\n        require(_periodIndex < getNextPeriodIndex(), \\\"No FYT for this period yet\\\");\\n        return address(fyts[_periodIndex]);\\n    }\\n\\n    /* Admin function */\\n\\n    /**\\n     * @notice Pause registrations and the creation of new periods\\n     */\\n    function pausePeriods() public {\\n        require(hasRole(FUTURE_PAUSER, msg.sender), \\\"Caller is not allowed to pause future\\\");\\n        PAUSED = true;\\n        emit PeriodsPaused();\\n    }\\n\\n    /**\\n     * @notice Resume registrations and the creation of new periods\\n     */\\n    function resumePeriods() public {\\n        require(hasRole(FUTURE_PAUSER, msg.sender), \\\"Caller is not allowed to resume future\\\");\\n        PAUSED = false;\\n        emit PeriodsResumed();\\n    }\\n\\n    /**\\n     * @notice Set future wallet address\\n     * @param _futureVault the address of the new future wallet\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setFutureVault(address _futureVault) public {\\n        require(hasRole(FUTURE_DEPLOYER, msg.sender), \\\"Caller is not allowed to set the future vault address\\\");\\n        futureVault = IFutureVault(_futureVault);\\n        emit FutureVaultSet(_futureVault);\\n    }\\n\\n    /**\\n     * @notice Set futureWallet address\\n     * @param _futureWallet the address of the new futureWallet\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setFutureWallet(address _futureWallet) public {\\n        require(hasRole(FUTURE_DEPLOYER, msg.sender), \\\"Caller is not allowed to set the future wallet address\\\");\\n        futureWallet = IFutureWallet(_futureWallet);\\n        emit FutureWalletSet(_futureWallet);\\n    }\\n\\n    /**\\n     * @notice Set liquidity gauge address\\n     * @param _liquidityGauge the address of the new liquidity gauge\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setLiquidityGauge(address _liquidityGauge) public {\\n        require(hasRole(FUTURE_DEPLOYER, msg.sender), \\\"Caller is not allowed to set the liquidity gauge address\\\");\\n        liquidityGauge = ILiquidityGauge(_liquidityGauge);\\n        emit LiquidityGaugeSet(_liquidityGauge);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IProxyFactory {\\n    function deployMinimal(address _logic, bytes memory _data) external returns (address proxy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/tokens/IFutureYieldToken.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/ERC20.sol\\\";\\n\\ninterface IFutureYieldToken is ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/utils/IAPWineMath.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IAPWineMaths {\\n    /**\\n     * @notice scale an input\\n     * @param _actualValue the original value of the input\\n     * @param _initialSum the scaled value of the sum of the inputs\\n     * @param _actualSum the current value of the sum of the inputs\\n     */\\n    function getScaledInput(\\n        uint256 _actualValue,\\n        uint256 _initialSum,\\n        uint256 _actualSum\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice scale back a value to the output\\n     * @param _scaledOutput the current scaled output\\n     * @param _initialSum the scaled value of the sum of the inputs\\n     * @param _actualSum the current value of the sum of the inputs\\n     */\\n    function getActualOutput(\\n        uint256 _scaledOutput,\\n        uint256 _initialSum,\\n        uint256 _actualSum\\n    ) external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/tokens/IAPWineIBT.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\nimport \\\"contracts/interfaces/ERC20.sol\\\";\\n\\ninterface IAPWineIBT is ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IFutureWallet.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IFutureWallet {\\n    /**\\n     * @notice Intializer\\n     * @param _futureAddress the address of the corresponding future\\n     * @param _adminAddress the address of the ACR admin\\n     */\\n    function initialize(address _futureAddress, address _adminAddress) external;\\n\\n    /**\\n     * @notice register the yield of an expired period\\n     * @param _amount the amount of yield to be registered\\n     */\\n    function registerExpiredFuture(uint256 _amount) external;\\n\\n    /**\\n     * @notice redeem the yield of the underlying yield of the FYT held by the sender\\n     * @param _periodIndex the index of the period to redeem the yield from\\n     */\\n    function redeemYield(uint256 _periodIndex) external;\\n\\n    /**\\n     * @notice return the yield that could be redeemed by an address for a particular period\\n     * @param _periodIndex the index of the corresponding period\\n     * @param _tokenHolder the FYT holder\\n     * @return the yield that could be redeemed by the token holder for this period\\n     */\\n    function getRedeemableYield(uint256 _periodIndex, address _tokenHolder) external view returns (uint256);\\n\\n    /**\\n     * @notice getter for the address of the future corresponding to this future wallet\\n     * @return the address of the future\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice getter for the address of the IBT corresponding to this future wallet\\n     * @return the address of the IBT\\n     */\\n    function getIBTAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IFuture.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IFuture {\\n    struct Registration {\\n        uint256 startIndex;\\n        uint256 scaledBalance;\\n    }\\n\\n    /**\\n     * @notice Getter for the PAUSE future parameter\\n     * @return true if new periods are paused, false otherwise\\n     */\\n    function PAUSED() external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the PERIOD future parameter\\n     * @return returns the period duration of the future\\n     */\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the PLATFORM_NAME future parameter\\n     * @return returns the platform of the future\\n     */\\n    function PLATFORM_NAME() external view returns (uint256);\\n\\n    /**\\n     * @notice Initializer\\n     * @param _controller the address of the controller\\n     * @param _ibt the address of the corresponding IBT\\n     * @param _periodDuration the length of the period (in days)\\n     * @param _platformName the name of the platform and tools\\n     * @param _deployerAddress the future deployer address\\n     * @param _admin the address of the ACR admin\\n     */\\n    function initialize(\\n        address _controller,\\n        address _ibt,\\n        uint256 _periodDuration,\\n        string memory _platformName,\\n        address _deployerAddress,\\n        address _admin\\n    ) external;\\n\\n    /**\\n     * @notice Set future wallet address\\n     * @param _futureVault the address of the new future wallet\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setFutureVault(address _futureVault) external;\\n\\n    /**\\n     * @notice Set futureWallet address\\n     * @param _futureWallet the address of the new futureWallet\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setFutureWallet(address _futureWallet) external;\\n\\n    /**\\n     * @notice Set liquidity gauge address\\n     * @param _liquidityGauge the address of the new liquidity gauge\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function setLiquidityGauge(address _liquidityGauge) external;\\n\\n    /**\\n     * @notice Sender registers an amount of IBT for the next period\\n     * @param _user address to register to the future\\n     * @param _amount amount of IBT to be registered\\n     * @dev called by the controller only\\n     */\\n    function register(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unregisters an amount of IBT for the next period\\n     * @param _user user addresss\\n     * @param _amount amount of IBT to be unregistered\\n     */\\n    function unregister(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sender unlocks the locked funds corresponding to their apwIBT holding\\n     * @param _user the user address\\n     * @param _amount amount of funds to unlocked\\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\\n     */\\n    function withdrawLockFunds(address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Send the user their owed FYT (and apwIBT if there are some claimable)\\n     * @param _user address of the user to send the FYT to\\n     */\\n    function claimFYT(address _user) external;\\n\\n    /**\\n     * @notice Start a new period\\n     * @dev needs corresponding permissions for sender\\n     */\\n    function startNewPeriod() external;\\n\\n    /**\\n     * @notice Check if a user has unclaimed FYT\\n     * @param _user the user to check\\n     * @return true if the user can claim some FYT, false otherwise\\n     */\\n    function hasClaimableFYT(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Check if a user has unclaimed apwIBT\\n     * @param _user the user to check\\n     * @return true if the user can claim some apwIBT, false otherwise\\n     */\\n    function hasClaimableAPWIBT(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for user registered amount\\n     * @param _user user to return the registered funds of\\n     * @return the registered amount, 0 if no registrations\\n     * @dev the registration can be older than the next period\\n     */\\n    function getRegisteredAmount(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for user IBT amount that is unlockable\\n     * @param _user user to unlock the IBT from\\n     * @return the amount of IBT the user can unlock\\n     */\\n    function getUnlockableFunds(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for yield that is generated by the user funds during the current period\\n     * @param _user user to check the unrealized yield of\\n     * @return the yield (amount of IBT) currently generated by the locked funds of the user\\n     */\\n    function getUnrealisedYield(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of apwIBT that the user can claim\\n     * @param _user the user to check the claimable apwIBT of\\n     * @return the amount of apwIBT claimable by the user\\n     */\\n    function getClaimableAPWIBT(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\\n     * @param _user user to check the check the claimable FYT of\\n     * @param _periodID period ID to check the claimable FYT of\\n     * @return the amount of FYT claimable by the user for this period ID\\n     */\\n    function getClaimableFYTForPeriod(address _user, uint256 _periodID) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for next period index\\n     * @return next period index\\n     * @dev index starts at 1\\n     */\\n    function getNextPeriodIndex() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for controller address\\n     * @return the controller address\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future wallet address\\n     * @return future wallet address\\n     */\\n    function getFutureVaultAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for futureWallet address\\n     * @return futureWallet address\\n     */\\n    function getFutureWalletAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for liquidity gauge address\\n     * @return liquidity gauge address\\n     */\\n    function getLiquidityGaugeAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the IBT address\\n     * @return IBT address\\n     */\\n    function getIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for future apwIBT address\\n     * @return apwIBT address\\n     */\\n    function getAPWIBTAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for FYT address of a particular period\\n     * @param _periodIndex period index\\n     * @return FYT address\\n     */\\n    function getFYTofPeriod(uint256 _periodIndex) external view returns (address);\\n\\n    /* Admin functions*/\\n\\n    /**\\n     * @notice Pause registrations and the creation of new periods\\n     */\\n    function pausePeriods() external;\\n\\n    /**\\n     * @notice Resume registrations and the creation of new periods\\n     */\\n    function resumePeriods() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IController {\\n    /* Getters */\\n\\n    function STARTING_DELAY() external view returns (uint256);\\n\\n    /* Initializer */\\n\\n    /**\\n     * @notice Initializer of the Controller contract\\n     * @param _admin the address of the admin\\n     */\\n    function initialize(address _admin) external;\\n\\n    /* Future Settings Setters */\\n\\n    /**\\n     * @notice Change the delay for starting a new period\\n     * @param _startingDelay the new delay (+-) to start the next period\\n     */\\n    function setPeriodStartingDelay(uint256 _startingDelay) external;\\n\\n    /**\\n     * @notice Set the next period switch timestamp for the future with corresponding duration\\n     * @param _periodDuration the duration of a period\\n     * @param _nextPeriodTimestamp the next period switch timestamp\\n     */\\n    function setNextPeriodSwitchTimestamp(uint256 _periodDuration, uint256 _nextPeriodTimestamp) external;\\n\\n    /**\\n     * @notice Set a new factor for the portion of the yield that is claimable when withdrawing funds during an ongoing period\\n     * @param _periodDuration the duration of the periods\\n     * @param _claimableYieldFactor the portion of the yield that is claimable\\n     */\\n    function setUnlockClaimableFactor(uint256 _periodDuration, uint256 _claimableYieldFactor) external;\\n\\n    /* User Methods */\\n\\n    /**\\n     * @notice Register an amount of IBT from the sender to the corresponding future\\n     * @param _future the address of the future to be registered to\\n     * @param _amount the amount to register\\n     */\\n    function register(address _future, uint256 _amount) external;\\n\\n    /**\\n     * @notice Unregister an amount of IBT from the sender to the corresponding future\\n     * @param _future the address of the future to be unregistered from\\n     * @param _amount the amount to unregister\\n     */\\n    function unregister(address _future, uint256 _amount) external;\\n\\n    /**\\n     * @notice Withdraw deposited funds from APWine\\n     * @param _future the address of the future to withdraw the IBT from\\n     * @param _amount the amount to withdraw\\n     */\\n    function withdrawLockFunds(address _future, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claim FYT of the msg.sender\\n     * @param _future the future from which to claim the FYT\\n     */\\n    function claimFYT(address _future) external;\\n\\n    /**\\n     * @notice Get the list of futures from which a user can claim FYT\\n     * @param _user the user to check\\n     */\\n    function getFuturesWithClaimableFYT(address _user) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Getter for the registry address of the protocol\\n     * @return the address of the protocol registry\\n     */\\n    function getRegistryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the symbol of the apwIBT of one future\\n     * @param _ibtSymbol the IBT of the external protocol\\n     * @param _platform the external protocol name\\n     * @param _periodDuration the duration of the periods for the future\\n     * @return the generated symbol of the apwIBT\\n     */\\n    function getFutureIBTSymbol(\\n        string memory _ibtSymbol,\\n        string memory _platform,\\n        uint256 _periodDuration\\n    ) external pure returns (string memory);\\n\\n    /**\\n     * @notice Getter for the symbol of the FYT of one future\\n     * @param _apwibtSymbol the apwIBT symbol for this future\\n     * @param _periodDuration the duration of the periods for this future\\n     * @return the generated symbol of the FYT\\n     */\\n    function getFYTSymbol(string memory _apwibtSymbol, uint256 _periodDuration) external view returns (string memory);\\n\\n    /**\\n     * @notice Getter for the period index depending on the period duration of the future\\n     * @param _periodDuration the periods duration\\n     * @return the period index\\n     */\\n    function getPeriodIndex(uint256 _periodDuration) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for beginning timestamp of the next period for the futures with a defined periods duration\\n     * @param _periodDuration the periods duration\\n     * @return the timestamp of the beginning of the next period\\n     */\\n    function getNextPeriodStart(uint256 _periodDuration) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the factor of claimable yield when unlocking\\n     * @param _periodDuration the periods duration\\n     * @return the factor of claimable yield of the last period\\n     */\\n    function getUnlockYieldFactor(uint256 _periodDuration) external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for the list of future durations registered in the contract\\n     * @return the list of futures duration\\n     */\\n    function getDurations() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Register a newly created future in the registry\\n     * @param _newFuture the address of the new future\\n     */\\n    function registerNewFuture(address _newFuture) external;\\n\\n    /**\\n     * @notice Unregister a future from the registry\\n     * @param _future the address of the future to unregister\\n     */\\n    function unregisterFuture(address _future) external;\\n\\n    /**\\n     * @notice Start all the futures that have a defined periods duration to synchronize them\\n     * @param _periodDuration the periods duration of the futures to start\\n     */\\n    function startFuturesByPeriodDuration(uint256 _periodDuration) external;\\n\\n    /**\\n     * @notice Getter for the futures by periods duration\\n     * @param _periodDuration the periods duration of the futures to return\\n     */\\n    function getFuturesWithDuration(uint256 _periodDuration) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Register the sender to the corresponding future\\n     * @param _user the address of the user\\n     * @param _futureAddress the addresses of the futures to claim the fyts from\\n     */\\n    function claimSelectedYield(address _user, address[] memory _futureAddress) external;\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address); // OZ ACL getter\\n\\n    /**\\n     * @notice Interrupt a future avoiding news registrations\\n     * @param _future the address of the future to pause\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function pauseFuture(address _future) external;\\n\\n    /**\\n     * @notice Resume a future that has been paused\\n     * @param _future the address of the future to resume\\n     * @dev should only be called in extraordinary situations by the admin of the contract\\n     */\\n    function resumeFuture(address _future) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IFutureVault.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface IFutureVault {\\n    /**\\n     * @notice Intializer\\n     * @param _futureAddress the address of the corresponding future\\n     * @param _adminAddress the address of the corresponding admin\\n     */\\n    function initialize(address _futureAddress, address _adminAddress) external;\\n\\n    /**\\n     * @notice Getter for the future address\\n     * @return the future address linked to this vault\\n     */\\n    function getFutureAddress() external view returns (address);\\n\\n    /**\\n     * @notice Approve another token to be transfered from this contract by the future\\n     */\\n    function approveAdditionalToken(address _tokenAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/ILiquidityGauge.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\n\\ninterface ILiquidityGauge {\\n    /**\\n     * @notice Contract Initializer\\n     * @param _gaugeController the address of the gauge controller\\n     * @param _future the address of the corresponding future\\n     */\\n    function initialize(address _gaugeController, address _future) external;\\n\\n    /**\\n     * @notice Register new liquidity added to the future\\n     * @param _amount the liquidity amount added\\n     * @dev must be called from the future contract\\n     */\\n    function registerNewFutureLiquidity(uint256 _amount) external;\\n\\n    /**\\n     * @notice Unregister liquidity withdrawn from to the future\\n     * @param _amount the liquidity amount withdrawn\\n     * @dev must be called from the future contract\\n     */\\n    function unregisterFutureLiquidity(uint256 _amount) external;\\n\\n    /**\\n     * @notice update gauge and user liquidity state then return the new redeemable\\n     * @param _user the user to update and return the redeemable of\\n     */\\n    function updateAndGetRedeemable(address _user) external returns (uint256);\\n\\n    /**\\n     * @notice Log an update of the inflated volume\\n     */\\n    function updateInflatedVolume() external;\\n\\n    /**\\n     * @notice Getter for the last inflated amount\\n     * @return the last inflated amount\\n     */\\n    function getLastInflatedAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for redeemable APWs of one user\\n     * @param _user the user to check the redeemable APW of\\n     * @return the amount of redeemable APW\\n     */\\n    function getUserRedeemable(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Register new user liquidity\\n     * @param _user the user to register the liquidity of\\n     */\\n    function registerUserLiquidity(address _user) external;\\n\\n    /**\\n     * @notice Delete a user liquidity registration\\n     * @param _user the user to delete the liquidity registration of\\n     */\\n    function deleteUserLiquidityRegistration(address _user) external;\\n\\n    /**\\n     * @notice Register new user liquidity\\n     * @param _sender the user to transfer the liquidity from\\n     * @param _receiver the user to transfer the liquidity to\\n     * @param _amount the amount of liquidity to transfer\\n     */\\n    function transferUserLiquidty(\\n        address _sender,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @notice Update the current stored liquidity of one user\\n     * @param _user the user to update the liquidity of\\n     */\\n    function updateUserLiquidity(address _user) external;\\n\\n    /**\\n     * @notice Remove liquidity from on user address\\n     * @param _user the user to remove the liquidity from\\n     * @param _amount the amount of liquidity to remove\\n     */\\n    function removeUserLiquidity(address _user, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/apwine/IRegistry.sol\": {\r\n      \"content\": \"pragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRegistry {\\n    /**\\n     * @notice Initializer of the contract\\n     * @param _admin the address of the admin of the contract\\n     */\\n    function initialize(address _admin) external;\\n\\n    /* Setters */\\n\\n    /**\\n     * @notice Setter for the treasury address\\n     * @param _newTreasury the address of the new treasury\\n     */\\n    function setTreasury(address _newTreasury) external;\\n\\n    /**\\n     * @notice Setter for the gauge controller address\\n     * @param _newGaugeController the address of the new gauge controller\\n     */\\n    function setGaugeController(address _newGaugeController) external;\\n\\n    /**\\n     * @notice Setter for the controller address\\n     * @param _newController the address of the new controller\\n     */\\n    function setController(address _newController) external;\\n\\n    /**\\n     * @notice Setter for the APW token address\\n     * @param _newAPW the address of the APW token\\n     */\\n    function setAPW(address _newAPW) external;\\n\\n    /**\\n     * @notice Setter for the proxy factory address\\n     * @param _proxyFactory the address of the new proxy factory\\n     */\\n    function setProxyFactory(address _proxyFactory) external;\\n\\n    /**\\n     * @notice Setter for the liquidity gauge address\\n     * @param _liquidityGaugeLogic the address of the new liquidity gauge logic\\n     */\\n    function setLiquidityGaugeLogic(address _liquidityGaugeLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine IBT logic address\\n     * @param _APWineIBTLogic the address of the new APWine IBT logic\\n     */\\n    function setAPWineIBTLogic(address _APWineIBTLogic) external;\\n\\n    /**\\n     * @notice Setter for the APWine FYT logic address\\n     * @param _FYTLogic the address of the new APWine FYT logic\\n     */\\n    function setFYTLogic(address _FYTLogic) external;\\n\\n    /**\\n     * @notice Setter for the maths utils address\\n     * @param _mathsUtils the address of the new math utils\\n     */\\n    function setMathsUtils(address _mathsUtils) external;\\n\\n    /**\\n     * @notice Setter for the naming utils address\\n     * @param _namingUtils the address of the new naming utils\\n     */\\n    function setNamingUtils(address _namingUtils) external;\\n\\n    /**\\n     * @notice Getter for the controller address\\n     * @return the address of the controller\\n     */\\n    function getControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the treasury address\\n     * @return the address of the treasury\\n     */\\n    function getTreasuryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the gauge controller address\\n     * @return the address of the gauge controller\\n     */\\n    function getGaugeControllerAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the DAO address\\n     * @return the address of the DAO that has admin rights on the APW token\\n     */\\n    function getDAOAddress() external returns (address);\\n\\n    /**\\n     * @notice Getter for the APW token address\\n     * @return the address the APW token\\n     */\\n    function getAPWAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the vesting contract address\\n     * @return the vesting contract address\\n     */\\n    function getVestingAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for the proxy factory address\\n     * @return the proxy factory address\\n     */\\n    function getProxyFactoryAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for liquidity gauge logic address\\n     * @return the liquidity gauge logic address\\n     */\\n    function getLiquidityGaugeLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine IBT logic address\\n     * @return the APWine IBT logic address\\n     */\\n    function getAPWineIBTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for APWine FYT logic address\\n     * @return the APWine FYT logic address\\n     */\\n    function getFYTLogicAddress() external view returns (address);\\n\\n    /**\\n     * @notice Getter for math utils address\\n     * @return the math utils address\\n     */\\n    function getMathsUtils() external view returns (address);\\n\\n    /**\\n     * @notice Getter for naming utils address\\n     * @return the naming utils address\\n     */\\n    function getNamingUtils() external view returns (address);\\n\\n    /* Future factory */\\n\\n    /**\\n     * @notice Register a new future factory in the registry\\n     * @param _futureFactory the address of the future factory contract\\n     * @param _futureFactoryName the name of the future factory\\n     */\\n    function addFutureFactory(address _futureFactory, string memory _futureFactoryName) external;\\n\\n    /**\\n     * @notice Getter to check if a future factory is registered\\n     * @param _futureFactory the address of the future factory contract to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFutureFactory(address _futureFactory) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future factory registered at an index\\n     * @param _index the index of the future factory to return\\n     * @return the address of the corresponding future factory\\n     */\\n    function getFutureFactoryAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future factories registered\\n     * @return the number of future factory registered\\n     */\\n    function futureFactoryCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter for name of a future factory contract\\n     * @param _futureFactory the address of a future factory\\n     * @return the name of the corresponding future factory contract\\n     */\\n    function getFutureFactoryName(address _futureFactory) external view returns (string memory);\\n\\n    /* Future platform */\\n    /**\\n     * @notice Register a new future platform in the registry\\n     * @param _futureFactory the address of the future factory\\n     * @param _futurePlatformName the name of the future platform\\n     * @param _future the address of the future contract logic\\n     * @param _futureWallet the address of the future wallet contract logic\\n     * @param _futureVault the name of the future vault contract logic\\n     */\\n    function addFuturePlatform(\\n        address _futureFactory,\\n        string memory _futurePlatformName,\\n        address _future,\\n        address _futureWallet,\\n        address _futureVault\\n    ) external;\\n\\n    /**\\n     * @notice Getter to check if a future platform is registered\\n     * @param _futurePlatformName the name of the future platform to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFuturePlatform(string memory _futurePlatformName) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future platform contracts\\n     * @param _futurePlatformName the name of the future platform\\n     * @return the addresses of 0) the future logic 1) the future wallet logic 2) the future vault logic\\n     */\\n    function getFuturePlatform(string memory _futurePlatformName) external view returns (address[3] memory);\\n\\n    /**\\n     * @notice Getter the total count of future platftroms registered\\n     * @return the number of future platforms registered\\n     */\\n    function futurePlatformsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Getter the list of platforms names registered\\n     * @return the list of platform names registered\\n     */\\n    function getFuturePlatformNames() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Remove a future platform from the registry\\n     * @param _futurePlatformName the name of the future platform to remove from the registry\\n     */\\n    function removeFuturePlatform(string memory _futurePlatformName) external;\\n\\n    /* Futures */\\n    /**\\n     * @notice Add a future to the registry\\n     * @param _future the address of the future to add to the registry\\n     */\\n    function addFuture(address _future) external;\\n\\n    /**\\n     * @notice Remove a future from the registry\\n     * @param _future the address of the future to remove from the registry\\n     */\\n    function removeFuture(address _future) external;\\n\\n    /**\\n     * @notice Getter to check if a future is registered\\n     * @param _future the address of the future to check the registration of\\n     * @return true if it is, false otherwise\\n     */\\n    function isRegisteredFuture(address _future) external view returns (bool);\\n\\n    /**\\n     * @notice Getter for the future registered at an index\\n     * @param _index the index of the future to return\\n     * @return the address of the corresponding future\\n     */\\n    function getFutureAt(uint256 _index) external view returns (address);\\n\\n    /**\\n     * @notice Getter for number of future registered\\n     * @return the number of future registered\\n     */\\n    function futureCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ERC20 is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external returns (uint8);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"FutureVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_futureWallet\",\"type\":\"address\"}],\"name\":\"FutureWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_liquidityGauge\",\"type\":\"address\"}],\"name\":\"LiquidityGaugeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPeriodIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fytAddress\",\"type\":\"address\"}],\"name\":\"NewPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PeriodsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PeriodsResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUTURE_DEPLOYER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUTURE_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimFYT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fyts\",\"outputs\":[{\"internalType\":\"contract IFutureYieldToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPWIBTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableAPWIBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodID\",\"type\":\"uint256\"}],\"name\":\"getClaimableFYTForPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodIndex\",\"type\":\"uint256\"}],\"name\":\"getFYTofPeriod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFutureVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFutureWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIBTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIBTRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityGaugeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPeriodIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRegisteredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnlockableFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnrealisedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasClaimableAPWIBT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasClaimableFYT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ibt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_platformName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_deployerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausePeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumePeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"scaleIBTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureVault\",\"type\":\"address\"}],\"name\":\"setFutureVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_futureWallet\",\"type\":\"address\"}],\"name\":\"setFutureWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLockFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"yTokenFuture","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}