{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n// File: contracts/lib/EIP712.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\nlibrary EIP712\r\n{\r\n    struct Domain {\r\n        string  name;\r\n        string  version;\r\n        address verifyingContract;\r\n    }\r\n\r\n    bytes32 constant internal EIP712_DOMAIN_TYPEHASH = keccak256(\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n    );\r\n\r\n    string constant internal EIP191_HEADER = \"\\x19\\x01\";\r\n\r\n    function hash(Domain memory domain)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        uint _chainid;\r\n        assembly { _chainid := chainid() }\r\n\r\n        return keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(bytes(domain.name)),\r\n                keccak256(bytes(domain.version)),\r\n                _chainid,\r\n                domain.verifyingContract\r\n            )\r\n        );\r\n    }\r\n\r\n    function hashPacked(\r\n        bytes32 domainSeperator,\r\n        bytes   memory encodedData\r\n        )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(EIP191_HEADER, domainSeperator, keccak256(encodedData))\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/thirdparty/BytesUtil.sol\r\n\r\n//Mainly taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n\r\nlibrary BytesUtil {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint _start,\r\n        uint _length\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        require(_bytes.length >= (_start + _length));\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\r\n        require(_bytes.length >= (_start + 20));\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint _start) internal  pure returns (uint8) {\r\n        require(_bytes.length >= (_start + 1));\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint _start) internal  pure returns (uint16) {\r\n        require(_bytes.length >= (_start + 2));\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint24(bytes memory _bytes, uint _start) internal  pure returns (uint24) {\r\n        require(_bytes.length >= (_start + 3));\r\n        uint24 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint _start) internal  pure returns (uint32) {\r\n        require(_bytes.length >= (_start + 4));\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint _start) internal  pure returns (uint64) {\r\n        require(_bytes.length >= (_start + 8));\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint _start) internal  pure returns (uint96) {\r\n        require(_bytes.length >= (_start + 12));\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint _start) internal  pure returns (uint128) {\r\n        require(_bytes.length >= (_start + 16));\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\r\n        require(_bytes.length >= (_start + 32));\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes4(bytes memory _bytes, uint _start) internal  pure returns (bytes4) {\r\n        require(_bytes.length >= (_start + 4));\r\n        bytes4 tempBytes4;\r\n\r\n        assembly {\r\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes4;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint _start) internal  pure returns (bytes32) {\r\n        require(_bytes.length >= (_start + 32));\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function fastSHA256(\r\n        bytes memory data\r\n        )\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        bytes32[] memory result = new bytes32[](1);\r\n        bool success;\r\n        assembly {\r\n             let ptr := add(data, 32)\r\n             success := staticcall(sub(gas(), 2000), 2, ptr, mload(data), add(result, 32), 32)\r\n        }\r\n        require(success, \"SHA256_FAILED\");\r\n        return result[0];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/AddressUtil.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Utility Functions for addresses\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary AddressUtil\r\n{\r\n    using AddressUtil for *;\r\n\r\n    function isContract(\r\n        address addr\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(addr) }\r\n        return (codehash != 0x0 &&\r\n                codehash != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);\r\n    }\r\n\r\n    function toPayable(\r\n        address addr\r\n        )\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return payable(addr);\r\n    }\r\n\r\n    // Works like address.send but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETH(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n        address payable recipient = to.toPayable();\r\n        /* solium-disable-next-line */\r\n        (success,) = recipient.call{value: amount, gas: gasLimit}(\"\");\r\n    }\r\n\r\n    // Works like address.transfer but with a customizable gas limit\r\n    // Make sure your code is safe for reentrancy when using this function!\r\n    function sendETHAndVerify(\r\n        address to,\r\n        uint    amount,\r\n        uint    gasLimit\r\n        )\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        success = to.sendETH(amount, gasLimit);\r\n        require(success, \"TRANSFER_FAILURE\");\r\n    }\r\n\r\n    // Works like call but is slightly more efficient when data\r\n    // needs to be copied from memory to do the call.\r\n    function fastCall(\r\n        address to,\r\n        uint    gasLimit,\r\n        uint    value,\r\n        bytes   memory data\r\n        )\r\n        internal\r\n        returns (bool success, bytes memory returnData)\r\n    {\r\n        if (to != address(0)) {\r\n            assembly {\r\n                // Do the call\r\n                success := call(gasLimit, to, value, add(data, 32), mload(data), 0, 0)\r\n                // Copy the return data\r\n                let size := returndatasize()\r\n                returnData := mload(0x40)\r\n                mstore(returnData, size)\r\n                returndatacopy(add(returnData, 32), 0, size)\r\n                // Update free memory pointer\r\n                mstore(0x40, add(returnData, add(32, size)))\r\n            }\r\n        }\r\n    }\r\n\r\n    // Like fastCall, but throws when the call is unsuccessful.\r\n    function fastCallAndVerify(\r\n        address to,\r\n        uint    gasLimit,\r\n        uint    value,\r\n        bytes   memory data\r\n        )\r\n        internal\r\n        returns (bytes memory returnData)\r\n    {\r\n        bool success;\r\n        (success, returnData) = fastCall(to, gasLimit, value, data);\r\n        if (!success) {\r\n            assembly {\r\n                revert(add(returnData, 32), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ERC1271.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\nabstract contract ERC1271 {\r\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n    bytes4 constant internal ERC1271_MAGICVALUE = 0x1626ba7e;\r\n\r\n    function isValidSignature(\r\n        bytes32      _hash,\r\n        bytes memory _signature)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bytes4 magicValueB32);\r\n}\r\n\r\n// File: contracts/lib/MathUint.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SignatureUtil.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title SignatureUtil\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\n/// @dev This method supports multihash standard. Each signature's last byte indicates\r\n///      the signature's type.\r\nlibrary SignatureUtil\r\n{\r\n    using BytesUtil     for bytes;\r\n    using MathUint      for uint;\r\n    using AddressUtil   for address;\r\n\r\n    enum SignatureType {\r\n        ILLEGAL,\r\n        INVALID,\r\n        EIP_712,\r\n        ETH_SIGN,\r\n        WALLET   // deprecated\r\n    }\r\n\r\n    bytes4 constant internal ERC1271_MAGICVALUE = 0x1626ba7e;\r\n\r\n    function verifySignatures(\r\n        bytes32          signHash,\r\n        address[] memory signers,\r\n        bytes[]   memory signatures\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(signers.length == signatures.length, \"BAD_SIGNATURE_DATA\");\r\n        address lastSigner;\r\n        for (uint i = 0; i < signers.length; i++) {\r\n            require(signers[i] > lastSigner, \"INVALID_SIGNERS_ORDER\");\r\n            lastSigner = signers[i];\r\n            if (!verifySignature(signHash, signers[i], signatures[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function verifySignature(\r\n        bytes32        signHash,\r\n        address        signer,\r\n        bytes   memory signature\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (signer == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        return signer.isContract()?\r\n            verifyERC1271Signature(signHash, signer, signature):\r\n            verifyEOASignature(signHash, signer, signature);\r\n    }\r\n\r\n    function recoverECDSASigner(\r\n        bytes32      signHash,\r\n        bytes memory signature\r\n        )\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        if (signature.length != 65) {\r\n            return address(0);\r\n        }\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8   v;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := and(mload(add(signature, 0x41)), 0xff)\r\n        }\r\n        // See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n        if (v == 27 || v == 28) {\r\n            return ecrecover(signHash, v, r, s);\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function verifyEOASignature(\r\n        bytes32        signHash,\r\n        address        signer,\r\n        bytes   memory signature\r\n        )\r\n        private\r\n        pure\r\n        returns (bool success)\r\n    {\r\n        if (signer == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint signatureTypeOffset = signature.length.sub(1);\r\n        SignatureType signatureType = SignatureType(signature.toUint8(signatureTypeOffset));\r\n\r\n        // Strip off the last byte of the signature by updating the length\r\n        assembly {\r\n            mstore(signature, signatureTypeOffset)\r\n        }\r\n\r\n        if (signatureType == SignatureType.EIP_712) {\r\n            success = (signer == recoverECDSASigner(signHash, signature));\r\n        } else if (signatureType == SignatureType.ETH_SIGN) {\r\n            bytes32 hash = keccak256(\r\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", signHash)\r\n            );\r\n            success = (signer == recoverECDSASigner(hash, signature));\r\n        } else {\r\n            success = false;\r\n        }\r\n\r\n        // Restore the signature length\r\n        assembly {\r\n            mstore(signature, add(signatureTypeOffset, 1))\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function verifyERC1271Signature(\r\n        bytes32 signHash,\r\n        address signer,\r\n        bytes   memory signature\r\n        )\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes memory callData = abi.encodeWithSelector(\r\n            ERC1271.isValidSignature.selector,\r\n            signHash,\r\n            signature\r\n        );\r\n        (bool success, bytes memory result) = signer.staticcall(callData);\r\n        return (\r\n            success &&\r\n            result.length == 32 &&\r\n            result.toBytes4(0) == ERC1271_MAGICVALUE\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/iface/Wallet.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title Wallet\r\n/// @dev Base contract for smart wallets.\r\n///      Sub-contracts must NOT use non-default constructor to initialize\r\n///      wallet states, instead, `init` shall be used. This is to enable\r\n///      proxies to be deployed in front of the real wallet contract for\r\n///      saving gas.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ninterface Wallet\r\n{\r\n    function version() external pure returns (string memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    /// @dev Set a new owner.\r\n    function setOwner(address newOwner) external;\r\n\r\n    /// @dev Adds a new module. The `init` method of the module\r\n    ///      will be called with `address(this)` as the parameter.\r\n    ///      This method must throw if the module has already been added.\r\n    /// @param _module The module's address.\r\n    function addModule(address _module) external;\r\n\r\n    /// @dev Removes an existing module. This method must throw if the module\r\n    ///      has NOT been added or the module is the wallet's only module.\r\n    /// @param _module The module's address.\r\n    function removeModule(address _module) external;\r\n\r\n    /// @dev Checks if a module has been added to this wallet.\r\n    /// @param _module The module to check.\r\n    /// @return True if the module exists; False otherwise.\r\n    function hasModule(address _module) external view returns (bool);\r\n\r\n    /// @dev Binds a method from the given module to this\r\n    ///      wallet so the method can be invoked using this wallet's default\r\n    ///      function.\r\n    ///      Note that this method must throw when the given module has\r\n    ///      not been added to this wallet.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @param _module The module's address. Use address(0) to unbind the method.\r\n    function bindMethod(bytes4 _method, address _module) external;\r\n\r\n    /// @dev Returns the module the given method has been bound to.\r\n    /// @param _method The method's 4-byte selector.\r\n    /// @return _module The address of the bound module. If no binding exists,\r\n    ///                 returns address(0) instead.\r\n    function boundMethodModule(bytes4 _method) external view returns (address _module);\r\n\r\n    /// @dev Performs generic transactions. Any module that has been added to this\r\n    ///      wallet can use this method to transact on any third-party contract with\r\n    ///      msg.sender as this wallet itself.\r\n    ///\r\n    ///      Note: 1) this method must ONLY allow invocations from a module that has\r\n    ///      been added to this wallet. The wallet owner shall NOT be permitted\r\n    ///      to call this method directly. 2) Reentrancy inside this function should\r\n    ///      NOT cause any problems.\r\n    ///\r\n    /// @param mode The transaction mode, 1 for CALL, 2 for DELEGATECALL.\r\n    /// @param to The desitination address.\r\n    /// @param value The amount of Ether to transfer.\r\n    /// @param data The data to send over using `to.call{value: value}(data)`\r\n    /// @return returnData The transaction's return value.\r\n    function transact(\r\n        uint8    mode,\r\n        address  to,\r\n        uint     value,\r\n        bytes    calldata data\r\n        )\r\n        external\r\n        returns (bytes memory returnData);\r\n}\r\n\r\n// File: contracts/base/DataStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n/// @title DataStore\r\n/// @dev Modules share states by accessing the same storage instance.\r\n///      Using ModuleStorage will achieve better module decoupling.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract DataStore\r\n{\r\n    modifier onlyWalletModule(address wallet)\r\n    {\r\n        requireWalletModule(wallet);\r\n        _;\r\n    }\r\n\r\n    function requireWalletModule(address wallet) view internal\r\n    {\r\n        require(Wallet(wallet).hasModule(msg.sender), \"UNAUTHORIZED\");\r\n    }\r\n}\r\n\r\n// File: contracts/stores/HashStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n/// @title HashStore\r\n/// @dev This store maintains all hashes for SignedRequest.\r\ncontract HashStore is DataStore\r\n{\r\n    // wallet => hash => consumed\r\n    mapping(address => mapping(bytes32 => bool)) public hashes;\r\n\r\n    constructor() {}\r\n\r\n    function verifyAndUpdate(address wallet, bytes32 hash)\r\n        external\r\n    {\r\n        require(!hashes[wallet][hash], \"HASH_EXIST\");\r\n        requireWalletModule(wallet);\r\n        hashes[wallet][hash] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/stores/Data.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\nlibrary Data\r\n{\r\n    enum GuardianStatus {\r\n        REMOVE,    // Being removed or removed after validUntil timestamp\r\n        ADD        // Being added or added after validSince timestamp.\r\n    }\r\n\r\n    // Optimized to fit into 32 bytes (1 slot)\r\n    struct Guardian\r\n    {\r\n        address addr;\r\n        uint8   status;\r\n        uint64  timestamp; // validSince if status = ADD; validUntil if adding = REMOVE;\r\n    }\r\n}\r\n\r\n// File: contracts/thirdparty/SafeCast.sol\r\n\r\n// Taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value < 2**96, \"SafeCast: value doesn\\'t fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value < 2**40, \"SafeCast: value doesn\\'t fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/stores/GuardianStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title GuardianStore\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract GuardianStore is DataStore\r\n{\r\n    using MathUint      for uint;\r\n    using SafeCast      for uint;\r\n\r\n    struct Wallet\r\n    {\r\n        address    inheritor;\r\n        uint32     inheritWaitingPeriod;\r\n        uint64     lastActive; // the latest timestamp the owner is considered to be active\r\n        bool       locked;\r\n\r\n        Data.Guardian[]            guardians;\r\n        mapping (address => uint)  guardianIdx;\r\n    }\r\n\r\n    mapping (address => Wallet) public wallets;\r\n\r\n    constructor() DataStore() {}\r\n\r\n    function isGuardian(\r\n        address wallet,\r\n        address addr,\r\n        bool    includePendingAddition\r\n        )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        Data.Guardian memory g = _getGuardian(wallet, addr);\r\n        return _isActiveOrPendingAddition(g, includePendingAddition);\r\n    }\r\n\r\n    function guardians(\r\n        address wallet,\r\n        bool    includePendingAddition\r\n        )\r\n        public\r\n        view\r\n        returns (Data.Guardian[] memory _guardians)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        _guardians = new Data.Guardian[](w.guardians.length);\r\n        uint index = 0;\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (_isActiveOrPendingAddition(g, includePendingAddition)) {\r\n                _guardians[index] = g;\r\n                index++;\r\n            }\r\n        }\r\n        assembly { mstore(_guardians, index) }\r\n    }\r\n\r\n    function numGuardians(\r\n        address wallet,\r\n        bool    includePendingAddition\r\n        )\r\n        public\r\n        view\r\n        returns (uint count)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (_isActiveOrPendingAddition(g, includePendingAddition)) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeAllGuardians(address wallet)\r\n        external\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        uint size = w.guardians.length;\r\n        if (size == 0) return;\r\n\r\n        requireWalletModule(wallet);\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            delete w.guardianIdx[w.guardians[i].addr];\r\n        }\r\n        delete w.guardians;\r\n    }\r\n\r\n    function cancelPendingGuardians(address wallet)\r\n        external\r\n    {\r\n        bool cancelled = false;\r\n        Wallet storage w = wallets[wallet];\r\n        for (uint i = 0; i < w.guardians.length; i++) {\r\n            Data.Guardian memory g = w.guardians[i];\r\n            if (_isPendingAddition(g)) {\r\n                w.guardians[i].status = uint8(Data.GuardianStatus.REMOVE);\r\n                w.guardians[i].timestamp = 0;\r\n                cancelled = true;\r\n            }\r\n            if (_isPendingRemoval(g)) {\r\n                w.guardians[i].status = uint8(Data.GuardianStatus.ADD);\r\n                w.guardians[i].timestamp = 0;\r\n                cancelled = true;\r\n            }\r\n        }\r\n        if (cancelled) {\r\n            requireWalletModule(wallet);\r\n        }\r\n        _cleanRemovedGuardians(wallet, true);\r\n    }\r\n\r\n    function cleanRemovedGuardians(address wallet)\r\n        external\r\n    {\r\n        _cleanRemovedGuardians(wallet, true);\r\n    }\r\n\r\n    function addGuardian(\r\n        address wallet,\r\n        address addr,\r\n        uint    validSince,\r\n        bool    alwaysOverride\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n        returns (uint)\r\n    {\r\n        require(validSince >= block.timestamp, \"INVALID_VALID_SINCE\");\r\n        require(addr != address(0), \"ZERO_ADDRESS\");\r\n\r\n        Wallet storage w = wallets[wallet];\r\n        uint pos = w.guardianIdx[addr];\r\n\r\n        if(pos == 0) {\r\n            // Add the new guardian\r\n            Data.Guardian memory g = Data.Guardian(\r\n                addr,\r\n                uint8(Data.GuardianStatus.ADD),\r\n                validSince.toUint64()\r\n            );\r\n            w.guardians.push(g);\r\n            w.guardianIdx[addr] = w.guardians.length;\r\n\r\n            _cleanRemovedGuardians(wallet, false);\r\n            return validSince;\r\n        }\r\n\r\n        Data.Guardian memory g = w.guardians[pos - 1];\r\n\r\n        if (_isRemoved(g)) {\r\n            w.guardians[pos - 1].status = uint8(Data.GuardianStatus.ADD);\r\n            w.guardians[pos - 1].timestamp = validSince.toUint64();\r\n            return validSince;\r\n        }\r\n\r\n        if (_isPendingRemoval(g)) {\r\n            w.guardians[pos - 1].status = uint8(Data.GuardianStatus.ADD);\r\n            w.guardians[pos - 1].timestamp = 0;\r\n            return 0;\r\n        }\r\n\r\n        if (_isPendingAddition(g)) {\r\n            if (!alwaysOverride) return g.timestamp;\r\n\r\n            w.guardians[pos - 1].timestamp = validSince.toUint64();\r\n            return validSince;\r\n        }\r\n\r\n        require(_isAdded(g), \"UNEXPECTED_RESULT\");\r\n        return 0;\r\n    }\r\n\r\n    function removeGuardian(\r\n        address wallet,\r\n        address addr,\r\n        uint    validUntil,\r\n        bool    alwaysOverride\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n        returns (uint)\r\n    {\r\n        require(validUntil >= block.timestamp, \"INVALID_VALID_UNTIL\");\r\n        require(addr != address(0), \"ZERO_ADDRESS\");\r\n\r\n        Wallet storage w = wallets[wallet];\r\n        uint pos = w.guardianIdx[addr];\r\n        require(pos > 0, \"GUARDIAN_NOT_EXISTS\");\r\n\r\n        Data.Guardian memory g = w.guardians[pos - 1];\r\n\r\n        if (_isAdded(g)) {\r\n            w.guardians[pos - 1].status = uint8(Data.GuardianStatus.REMOVE);\r\n            w.guardians[pos - 1].timestamp = validUntil.toUint64();\r\n            return validUntil;\r\n        }\r\n\r\n        if (_isPendingAddition(g)) {\r\n            w.guardians[pos - 1].status = uint8(Data.GuardianStatus.REMOVE);\r\n            w.guardians[pos - 1].timestamp = 0;\r\n            return 0;\r\n        }\r\n\r\n        if (_isPendingRemoval(g)) {\r\n            if (!alwaysOverride) return g.timestamp;\r\n\r\n            w.guardians[pos - 1].timestamp = validUntil.toUint64();\r\n            return validUntil;\r\n        }\r\n\r\n        require(_isRemoved(g), \"UNEXPECTED_RESULT\");\r\n        return 0;\r\n    }\r\n\r\n    // ---- internal functions ---\r\n\r\n    function _getGuardian(\r\n        address wallet,\r\n        address addr\r\n        )\r\n        private\r\n        view\r\n        returns (Data.Guardian memory)\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        uint pos = w.guardianIdx[addr];\r\n        if (pos > 0) {\r\n            return w.guardians[pos - 1];\r\n        }\r\n    }\r\n\r\n    function _isAdded(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.status == uint8(Data.GuardianStatus.ADD) &&\r\n            guardian.timestamp <= block.timestamp;\r\n    }\r\n\r\n    function _isPendingAddition(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.status == uint8(Data.GuardianStatus.ADD) &&\r\n            guardian.timestamp > block.timestamp;\r\n    }\r\n\r\n    function _isRemoved(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return guardian.status == uint8(Data.GuardianStatus.REMOVE) &&\r\n            guardian.timestamp <= block.timestamp;\r\n    }\r\n\r\n    function _isPendingRemoval(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n         return guardian.status == uint8(Data.GuardianStatus.REMOVE) &&\r\n            guardian.timestamp > block.timestamp;\r\n    }\r\n\r\n    function _isActive(Data.Guardian memory guardian)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isAdded(guardian) || _isPendingRemoval(guardian);\r\n    }\r\n\r\n    function _isActiveOrPendingAddition(\r\n        Data.Guardian memory guardian,\r\n        bool includePendingAddition\r\n        )\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isActive(guardian) || includePendingAddition && _isPendingAddition(guardian);\r\n    }\r\n\r\n    function _cleanRemovedGuardians(\r\n        address wallet,\r\n        bool    force\r\n        )\r\n        private\r\n    {\r\n        Wallet storage w = wallets[wallet];\r\n        uint count = w.guardians.length;\r\n        if (!force && count < 10) return;\r\n\r\n        for (int i = int(count) - 1; i >= 0; i--) {\r\n            Data.Guardian memory g = w.guardians[uint(i)];\r\n            if (_isRemoved(g)) {\r\n                Data.Guardian memory lastGuardian = w.guardians[w.guardians.length - 1];\r\n\r\n                if (g.addr != lastGuardian.addr) {\r\n                    w.guardians[uint(i)] = lastGuardian;\r\n                    w.guardianIdx[lastGuardian.addr] = uint(i) + 1;\r\n                }\r\n                w.guardians.pop();\r\n                delete w.guardianIdx[g.addr];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/stores/SecurityStore.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n/// @title SecurityStore\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\ncontract SecurityStore is GuardianStore\r\n{\r\n    using MathUint for uint;\r\n    using SafeCast for uint;\r\n\r\n    constructor() GuardianStore() {}\r\n\r\n    function setLock(\r\n        address wallet,\r\n        bool    locked\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n    {\r\n        wallets[wallet].locked = locked;\r\n    }\r\n\r\n    function touchLastActive(address wallet)\r\n        external\r\n        onlyWalletModule(wallet)\r\n    {\r\n        wallets[wallet].lastActive = uint64(block.timestamp);\r\n    }\r\n\r\n    function touchLastActiveWhenRequired(\r\n        address wallet,\r\n        uint    minInternval\r\n        )\r\n        external\r\n    {\r\n        if (wallets[wallet].inheritor != address(0) &&\r\n            block.timestamp > lastActive(wallet) + minInternval) {\r\n            requireWalletModule(wallet);\r\n            wallets[wallet].lastActive = uint64(block.timestamp);\r\n        }\r\n    }\r\n\r\n    function setInheritor(\r\n        address wallet,\r\n        address who,\r\n        uint32 _inheritWaitingPeriod\r\n        )\r\n        external\r\n        onlyWalletModule(wallet)\r\n    {\r\n        wallets[wallet].inheritor = who;\r\n        wallets[wallet].inheritWaitingPeriod = _inheritWaitingPeriod;\r\n        wallets[wallet].lastActive = uint64(block.timestamp);\r\n    }\r\n\r\n    function isLocked(address wallet)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return wallets[wallet].locked;\r\n    }\r\n\r\n    function lastActive(address wallet)\r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return wallets[wallet].lastActive;\r\n    }\r\n\r\n    function inheritor(address wallet)\r\n        public\r\n        view\r\n        returns (\r\n            address _who,\r\n            uint    _effectiveTimestamp\r\n        )\r\n    {\r\n        address _inheritor = wallets[wallet].inheritor;\r\n        if (_inheritor == address(0)) {\r\n             return (address(0), 0);\r\n        }\r\n\r\n        uint32 _inheritWaitingPeriod = wallets[wallet].inheritWaitingPeriod;\r\n        if (_inheritWaitingPeriod == 0) {\r\n            return (address(0), 0);\r\n        }\r\n\r\n        uint64 _lastActive = wallets[wallet].lastActive;\r\n\r\n        if (_lastActive == 0) {\r\n            _lastActive = uint64(block.timestamp);\r\n        }\r\n\r\n        _who = _inheritor;\r\n        _effectiveTimestamp = _lastActive + _inheritWaitingPeriod;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/security/GuardianUtils.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n/// @title GuardianUtils\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\nlibrary GuardianUtils\r\n{\r\n    enum SigRequirement\r\n    {\r\n        MAJORITY_OWNER_NOT_ALLOWED,\r\n        MAJORITY_OWNER_ALLOWED,\r\n        MAJORITY_OWNER_REQUIRED,\r\n        OWNER_OR_ANY_GUARDIAN,\r\n        ANY_GUARDIAN\r\n    }\r\n\r\n    function requireMajority(\r\n        SecurityStore   securityStore,\r\n        address         wallet,\r\n        address[]       memory signers,\r\n        SigRequirement  requirement\r\n        )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // We always need at least one signer\r\n        if (signers.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        // Calculate total group sizes\r\n        Data.Guardian[] memory allGuardians = securityStore.guardians(wallet, false);\r\n        require(allGuardians.length > 0, \"NO_GUARDIANS\");\r\n\r\n        address lastSigner;\r\n        bool walletOwnerSigned = false;\r\n        address owner = Wallet(wallet).owner();\r\n        for (uint i = 0; i < signers.length; i++) {\r\n            // Check for duplicates\r\n            require(signers[i] > lastSigner, \"INVALID_SIGNERS_ORDER\");\r\n            lastSigner = signers[i];\r\n\r\n            if (signers[i] == owner) {\r\n                walletOwnerSigned = true;\r\n            } else {\r\n                require(_isWalletGuardian(allGuardians, signers[i]), \"SIGNER_NOT_GUARDIAN\");\r\n            }\r\n        }\r\n\r\n        if (requirement == SigRequirement.OWNER_OR_ANY_GUARDIAN) {\r\n            return signers.length == 1;\r\n        } else if (requirement == SigRequirement.ANY_GUARDIAN) {\r\n            require(!walletOwnerSigned, \"WALLET_OWNER_SIGNATURE_NOT_ALLOWED\");\r\n            return signers.length == 1;\r\n        }\r\n\r\n        // Check owner requirements\r\n        if (requirement == SigRequirement.MAJORITY_OWNER_REQUIRED) {\r\n            require(walletOwnerSigned, \"WALLET_OWNER_SIGNATURE_REQUIRED\");\r\n        } else if (requirement == SigRequirement.MAJORITY_OWNER_NOT_ALLOWED) {\r\n            require(!walletOwnerSigned, \"WALLET_OWNER_SIGNATURE_NOT_ALLOWED\");\r\n        }\r\n\r\n        uint numExtendedSigners = allGuardians.length;\r\n        if (walletOwnerSigned) {\r\n            numExtendedSigners += 1;\r\n            require(signers.length > 1, \"NO_GUARDIAN_SIGNED_BESIDES_OWNER\");\r\n        }\r\n\r\n        return _hasMajority(signers.length, numExtendedSigners);\r\n    }\r\n\r\n    function _isWalletGuardian(\r\n        Data.Guardian[] memory allGuardians,\r\n        address signer\r\n        )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        for (uint i = 0; i < allGuardians.length; i++) {\r\n            if (allGuardians[i].addr == signer) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _hasMajority(\r\n        uint signed,\r\n        uint total\r\n        )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return total > 0 && signed >= (total >> 1) + 1;\r\n    }\r\n}\r\n\r\n// File: contracts/modules/security/SignedRequest.sol\r\n\r\n// Copyright 2017 Loopring Technology Limited.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title SignedRequest\r\n/// @dev Utility library for better handling of signed wallet requests.\r\n///      This library must be deployed and linked to other modules.\r\n///\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary SignedRequest {\r\n    using SignatureUtil for bytes32;\r\n\r\n    struct Request {\r\n        address[] signers;\r\n        bytes[]   signatures;\r\n        uint      validUntil;\r\n        address   wallet;\r\n    }\r\n\r\n    function verifyRequest(\r\n        HashStore                    hashStore,\r\n        SecurityStore                securityStore,\r\n        bytes32                      domainSeperator,\r\n        bytes32                      txAwareHash,\r\n        GuardianUtils.SigRequirement sigRequirement,\r\n        Request memory               request,\r\n        bytes   memory               encodedRequest\r\n        )\r\n        public\r\n    {\r\n        require(block.timestamp <= request.validUntil, \"EXPIRED_SIGNED_REQUEST\");\r\n\r\n        bytes32 _txAwareHash = EIP712.hashPacked(domainSeperator, encodedRequest);\r\n\r\n        // If txAwareHash from the meta-transaction is non-zero,\r\n        // we must verify it matches the hash signed by the respective signers.\r\n        require(\r\n            txAwareHash == 0 || txAwareHash == _txAwareHash,\r\n            \"TX_INNER_HASH_MISMATCH\"\r\n        );\r\n\r\n        // Save hash to prevent replay attacks\r\n        hashStore.verifyAndUpdate(request.wallet, _txAwareHash);\r\n\r\n        require(\r\n            _txAwareHash.verifySignatures(request.signers, request.signatures),\r\n            \"INVALID_SIGNATURES\"\r\n        );\r\n\r\n        require(\r\n            GuardianUtils.requireMajority(\r\n                securityStore,\r\n                request.wallet,\r\n                request.signers,\r\n                sigRequirement\r\n            ),\r\n            \"PERMISSION_DENIED\"\r\n        );\r\n    }\r\n}","ABI":"[]","ContractName":"SignedRequest","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1847cf85a10e55ce885dbe7426933e6024aea951f34cb5b5c4f3ea1b87cd9d96"}]}