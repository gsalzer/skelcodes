{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ninterface ERC20Interface {\r\n  function transfer(address to, uint value) external returns(bool success);\r\n  function transferFrom(address _from, address _to, uint256 value)  external returns(bool success);\r\n  function Exchange_Price() external view returns(uint256 actual_Price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract WealthBuilder_M1 {\r\n  struct User {\r\n    bool isExist;\r\n    uint ID;\r\n    uint ReferrerID;\r\n    uint SponsorID;\r\n    uint SubscriptionTime;\r\n    uint64 ReferralCount;\r\n    uint64 LvL1Count;\r\n    uint64 LvL2Count;\r\n    uint64 LvL3Count;\r\n    uint64 LvL4Count;\r\n    address[] Referrals;\r\n    address[] Line1Referrals;\r\n    address[] Line2Referrals;\r\n    address[] Line3Referrals;\r\n    address[] Line4Referrals;\r\n    mapping (uint8 => uint) LevelExpiresAt;\r\n  }\r\n  struct Token_Reward {\r\n    uint Total;\r\n    uint8[]   Rewardtype;\r\n    address[] ReferralAddr;\r\n    uint256[] Amount;\r\n    uint256[] RewardedAt;\r\n  }\r\n  struct ETH_Reward {\r\n    uint Total;\r\n    uint8[]   Rewardtype;\r\n    address[] ReferralAddr;\r\n    uint256[] Amount;\r\n    uint256[] RewardedAt;\r\n  }\r\n  struct Purchased_Upgrade {\r\n    uint Total;\r\n    uint[]    pDate;\r\n    uint8[]   LvL;\r\n    uint32[]  EduPkg;\r\n  }\r\n\r\n  address public WBC_Wallet;\r\n  uint256 public adminCount;\r\n  uint  public MAX_LEVEL = 9;\r\n  uint public REFERRALS_LIMIT = 2;\r\n  uint public LEVEL_EXPIRE_TIME = 30 days;\r\n  uint256 public TOKEN_PRICE = 0.001 ether;\r\n  uint64 public currUserID = 0;\r\n  uint8 public Loyalty_TokenReward;\r\n  address public TOKEN_SC;\r\n  address public TOKEN_ATM;\r\n  address public TOKEN_EXCHNG;\r\n  address[] public adminListed;\r\n  mapping(address => User) public USERS;\r\n  mapping(uint256 => address) public USER_ADDRESS;\r\n  mapping(uint8 => uint256) public UPGRADE_PRICE;\r\n  mapping(uint8 => uint8) public SPONSOR_REWARD;\r\n  mapping(address => Purchased_Upgrade) public UPGRADE_PURCHASED;\r\n  mapping(address => Token_Reward) public LOYALTY_BONUS;\r\n  mapping(address => ETH_Reward) public SPONSOR_BONUS;\r\n  mapping(address => uint256) public TOKEN_DEPOSITS;\r\n\r\n  modifier validLevelAmount(uint8 _level) {\r\n    require(msg.value == UPGRADE_PRICE[_level], 'Invalid level amount sent');\r\n    _;\r\n  }\r\n\r\n  modifier userRegistered() {\r\n    require(USERS[msg.sender].ID != 0, 'User does not exist');\r\n    require(USERS[msg.sender].isExist, 'User does not exist');\r\n    _;\r\n  }\r\n  modifier validReferrerID(uint _referrerID) {\r\n    require(_referrerID > 0 && _referrerID <= currUserID, 'Invalid referrer ID');\r\n    _;\r\n  }\r\n\r\n  modifier userNotRegistered() {\r\n    require(USERS[msg.sender].ID == 0, 'User is already registered');\r\n    require(!USERS[msg.sender].isExist, 'User does not exist');\r\n    _;\r\n  }\r\n\r\n  modifier validLevel(uint _level) {\r\n    require(_level > 0 && _level <= MAX_LEVEL, 'Invalid level entered');\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    TOKEN_SC = 0x79C90021A36250BcE01f11CFd847Ba30E05488B1;\r\n    TOKEN_ATM = 0x12e26F7eEfF0602232b03a086343e9eF20825ec3;\r\n    TOKEN_EXCHNG = 0x12e26F7eEfF0602232b03a086343e9eF20825ec3;\r\n    WBC_Wallet = msg.sender;\r\n    adminListed.push(msg.sender);\r\n    adminCount = 1;\r\n    UPGRADE_PRICE[1] = 0.05 ether;\r\n    UPGRADE_PRICE[2] = 0.1 ether;\r\n    UPGRADE_PRICE[3] = 0.5 ether;\r\n    UPGRADE_PRICE[4] = 1 ether;\r\n    UPGRADE_PRICE[5] = 1.5 ether;\r\n    UPGRADE_PRICE[6] = 3 ether;\r\n    UPGRADE_PRICE[7] = 7 ether;\r\n    UPGRADE_PRICE[8] = 16 ether;\r\n    UPGRADE_PRICE[9] = 34 ether;\r\n\r\n    Loyalty_TokenReward = 23;\r\n\r\n    SPONSOR_REWARD[1] = 20;\r\n    SPONSOR_REWARD[2] = 10;\r\n    SPONSOR_REWARD[3] = 5;\r\n    SPONSOR_REWARD[4] = 2;\r\n\r\n    addUser(msg.sender,1,1);\r\n    for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n    USERS[msg.sender].LevelExpiresAt[i] = 88888888888;\r\n    }\r\n   }\r\n\r\n  function () external payable {\r\n    uint8 level;\r\n    if(msg.value == UPGRADE_PRICE[1]) level = 1;\r\n    else if(msg.value == UPGRADE_PRICE[2]) level = 2;\r\n    else if(msg.value == UPGRADE_PRICE[3]) level = 3;\r\n    else if(msg.value == UPGRADE_PRICE[4]) level = 4;\r\n    else if(msg.value == UPGRADE_PRICE[5]) level = 5;\r\n    else if(msg.value == UPGRADE_PRICE[6]) level = 6;\r\n    else if(msg.value == UPGRADE_PRICE[7]) level = 7;\r\n    else if(msg.value == UPGRADE_PRICE[8]) level = 8;\r\n    else if(msg.value == UPGRADE_PRICE[9]) level = 9;\r\n    else revert('Incorrect Value send');\r\n    if(USERS[msg.sender].isExist) buyLevel(level,level);\r\n      else if(level == 1) {\r\n        uint refId = 1;\r\n        address referrer = bytesToAddress(msg.data);\r\n        if(USERS[referrer].isExist) refId = USERS[referrer].ID;\r\n            else revert('Incorrect referrer');\r\n        regUser(refId,1);\r\n        }\r\n        else revert('Please buy first level for 0.05 ETH');\r\n  }\r\n\r\n  function regUser(uint _referrerID, uint32 EduPkg) public payable userNotRegistered() validReferrerID(_referrerID) validLevelAmount(1){\r\n    uint sponsorUP1_ID = _referrerID;\r\n    address sponsorUP1 = USER_ADDRESS[sponsorUP1_ID];\r\n    address sponsorUP2 = USER_ADDRESS[USERS[sponsorUP1].SponsorID];\r\n    address sponsorUP3 = USER_ADDRESS[USERS[sponsorUP2].SponsorID];\r\n    address sponsorUP4 = USER_ADDRESS[USERS[sponsorUP3].SponsorID];\r\n\r\n    if(USERS[sponsorUP1].Referrals.length >= REFERRALS_LIMIT) {\r\n        _referrerID = USERS[findFreeReferrer(sponsorUP1)].ID;\r\n    }\r\n    addUser(msg.sender, sponsorUP1_ID, _referrerID);\r\n    USERS[msg.sender].LevelExpiresAt[1] = block.timestamp+LEVEL_EXPIRE_TIME;\r\n    USERS[USER_ADDRESS[_referrerID]].Referrals.push(msg.sender);\r\n\r\n    USERS[sponsorUP1].Line1Referrals.push(msg.sender);\r\n    USERS[sponsorUP2].Line2Referrals.push(msg.sender);\r\n    USERS[sponsorUP3].Line3Referrals.push(msg.sender);\r\n    USERS[sponsorUP4].Line4Referrals.push(msg.sender);\r\n\r\n    USERS[sponsorUP1].LvL1Count = USERS[sponsorUP1].LvL1Count+1;\r\n    USERS[sponsorUP2].LvL2Count = USERS[sponsorUP2].LvL2Count+1;\r\n    USERS[sponsorUP3].LvL3Count = USERS[sponsorUP3].LvL3Count+1;\r\n    USERS[sponsorUP4].LvL4Count = USERS[sponsorUP4].LvL4Count+1;\r\n\r\n    payMembers(msg.sender,sponsorUP1,sponsorUP2,sponsorUP3,sponsorUP4,1,EduPkg);\r\n    addReferrerCount(USER_ADDRESS[_referrerID]);\r\n  }\r\n\r\n  function addUser(address New_Member, uint256 SponsorID, uint256 ReferrerID ) internal {\r\n    currUserID++;\r\n    USERS[New_Member] = User({\r\n      isExist: true,\r\n      ID: currUserID,\r\n      ReferrerID: ReferrerID,\r\n      SponsorID: SponsorID,\r\n      ReferralCount: 0,\r\n      LvL1Count:0,\r\n      LvL2Count:0,\r\n      LvL3Count:0,\r\n      LvL4Count:0,\r\n      SubscriptionTime: block.timestamp,\r\n      Referrals: new address[](0),\r\n      Line1Referrals: new address[](0),\r\n      Line2Referrals: new address[](0),\r\n      Line3Referrals: new address[](0),\r\n      Line4Referrals: new address[](0)\r\n    });\r\n    USER_ADDRESS[currUserID] = New_Member;\r\n  }\r\n\r\n  function addReferrerCount(address Referrer) internal {\r\n    bool isFinished = false;\r\n    uint ID;\r\n    for(uint8 i = 1;i<=13;i++){\r\n        if(!isFinished){\r\n            USERS[Referrer].ReferralCount = USERS[Referrer].ReferralCount+1;\r\n            ID = USERS[Referrer].ID;\r\n            if(ID==1) {isFinished = true;}\r\n                else {Referrer = USER_ADDRESS[USERS[Referrer].ReferrerID];}\r\n            }\r\n        }\r\n    }\r\n\r\n  function buyLevel(uint8 _level, uint32 EduPkg) public payable validLevelAmount(_level) {\r\n    require(USERS[msg.sender].isExist, 'User not exist');\r\n    require(_level > 0 && _level <= 10, 'Incorrect level');\r\n    for(uint8 l = 1; l < _level ; l++) require(USERS[msg.sender].LevelExpiresAt[l] >= block.timestamp,'Buy the previous level');\r\n\r\n    address sponsorUP1 = USER_ADDRESS[USERS[msg.sender].SponsorID];\r\n    address sponsorUP2 = USER_ADDRESS[USERS[sponsorUP1].SponsorID];\r\n    address sponsorUP3 = USER_ADDRESS[USERS[sponsorUP2].SponsorID];\r\n    address sponsorUP4 = USER_ADDRESS[USERS[sponsorUP3].SponsorID];\r\n\r\n    USERS[msg.sender].LevelExpiresAt[_level] = block.timestamp+LEVEL_EXPIRE_TIME;\r\n    payMembers(msg.sender,sponsorUP1,sponsorUP2,sponsorUP3,sponsorUP4,_level,EduPkg);\r\n  }\r\n\r\n  function findFreeReferrer(address _user) public view returns (address) {\r\n    require(USERS[_user].isExist, 'User not exist');\r\n    if (USERS[_user].Referrals.length < REFERRALS_LIMIT) {\r\n      return _user;\r\n    }\r\n    address[16382] memory referrals;\r\n    referrals[0] = USERS[_user].Referrals[0];\r\n    referrals[1] = USERS[_user].Referrals[1];\r\n    address referrer;\r\n    for (uint16 i = 0; i < 16382; i++) {\r\n      if (USERS[referrals[i]].Referrals.length < REFERRALS_LIMIT) {\r\n        referrer = referrals[i];\r\n        break;\r\n      }\r\n      if (i >= 8190) {continue;}\r\n      referrals[(i+1)*2] = USERS[referrals[i]].Referrals[0];\r\n      referrals[(i+1)*2+1] = USERS[referrals[i]].Referrals[1];\r\n    }\r\n    require(referrer != address(0), 'Referrer not found');\r\n    return referrer;\r\n  }\r\n\r\n  function Reward_Loyality_Bonus(uint8 _level, address _user) internal returns(uint256 RewardedLoyalityBonus){\r\n    require(USERS[_user].isExist, 'User not exist');\r\n    uint _referrerID;\r\n    address _referrerAddr;\r\n    uint8 _referrerLevel;\r\n    address user = _user;\r\n    uint _uplines = _level+4;\r\n    uint _LevelReward = (UPGRADE_PRICE[_level]*Loyalty_TokenReward/100)/_uplines;\r\n    uint256 _amountToken = _LevelReward*(10**18)/TOKEN_PRICE;\r\n    uint256 rewardedUplines = 0;\r\n    for (uint8 i = 1; i <= _uplines; i++) {\r\n      _referrerID = USERS[user].ReferrerID;\r\n      _referrerAddr = USER_ADDRESS[_referrerID];\r\n      _referrerLevel = getUserLevel(_referrerAddr);\r\n      if( _referrerLevel < _level ) {\r\n        Write_Loyalty_Bonus(0, _referrerAddr, _user, _amountToken);\r\n      } else {\r\n        TOKEN_DEPOSITS[TOKEN_SC] = TOKEN_DEPOSITS[TOKEN_SC] - (_amountToken);\r\n        ERC20Interface ERC20Token = ERC20Interface(TOKEN_SC);\r\n        ERC20Token.transfer(_referrerAddr, _amountToken);\r\n        Write_Loyalty_Bonus(i, _referrerAddr, _user, _amountToken);\r\n        rewardedUplines += 1;\r\n      }\r\n    user = _referrerAddr;\r\n    }\r\n    RewardedLoyalityBonus = _LevelReward*rewardedUplines;\r\n    if (rewardedUplines>0){\r\n      bool send = false;\r\n      (send, ) = address(uint160(TOKEN_ATM)).call.value(RewardedLoyalityBonus)(\"\");\r\n    }\r\n    return RewardedLoyalityBonus;\r\n  }\r\n\r\n  function Write_Loyalty_Bonus(uint8 _type, address _user, address _referralAddr, uint256 _reward ) internal {\r\n\t  LOYALTY_BONUS[_user].Rewardtype.push(_type);\r\n\t  LOYALTY_BONUS[_user].ReferralAddr.push(_referralAddr);\r\n\t  LOYALTY_BONUS[_user].Amount.push(_reward);\r\n\t  LOYALTY_BONUS[_user].RewardedAt.push(block.timestamp);\r\n  }\r\n\r\n  function Write_Sponsor_Bonus(uint8 _type, address _user, address _referralAddr, uint256 _reward ) internal {\r\n\t  SPONSOR_BONUS[_user].Rewardtype.push(_type);\r\n\t  SPONSOR_BONUS[_user].ReferralAddr.push(_referralAddr);\r\n\t  SPONSOR_BONUS[_user].Amount.push(_reward);\r\n\t  SPONSOR_BONUS[_user].RewardedAt.push(block.timestamp);\r\n  }\r\n\r\n  function paySponsor(address _user, address Sponsor,uint8 _level, uint8 _line, uint256 _remValue) internal returns(uint256 RemValue) {\r\n    uint256 _Price = UPGRADE_PRICE[_level];\r\n    uint256 _UPLevelReward = _Price*SPONSOR_REWARD[_line]/100;\r\n    bool send = false;\r\n    RemValue = _remValue;\r\n    if ( getUserLevel(Sponsor) >= _level ){\r\n      (send, ) = address(uint160(Sponsor)).call.value(_UPLevelReward)(\"\");\r\n      Write_Sponsor_Bonus(_line,Sponsor,_user,_UPLevelReward);\r\n      RemValue = _remValue-_UPLevelReward;\r\n    } else {\r\n      Write_Sponsor_Bonus(0, Sponsor,_user,_UPLevelReward);\r\n\t  }\r\n  }\r\n\r\n  function payMembers(address _user,address spUP1,address spUP2,address spUP3,address spUP4,uint8 _level,uint32 EduPkg) internal {\r\n    uint256 _remValue = UPGRADE_PRICE[_level];\r\n    _remValue = paySponsor(_user,spUP1,_level,1,_remValue);\r\n    _remValue = paySponsor(_user,spUP2,_level,2,_remValue);\r\n    _remValue = paySponsor(_user,spUP3,_level,3,_remValue);\r\n    _remValue = paySponsor(_user,spUP4,_level,4,_remValue);\r\n    _remValue = _remValue - Reward_Loyality_Bonus(_level, _user);\r\n    UPGRADE_PURCHASED[_user].pDate.push(block.timestamp);\r\n    UPGRADE_PURCHASED[_user].LvL.push(_level);\r\n    UPGRADE_PURCHASED[_user].EduPkg.push(EduPkg);\r\n    bool send = false;\r\n    (send, ) = address(uint160(WBC_Wallet)).call.value(_remValue)(\"\");\r\n  }\r\n\r\n    function isAdminListed(address _maker) public view returns (bool) {\r\n        require(_maker != address(0));\r\n        bool status = false;\r\n        for(uint256 i=0;i<adminCount;i++){\r\n            if(adminListed[i] == _maker) { status = true; }\r\n        }\r\n        return status;\r\n    }\r\n\r\n  function listAdmins() public view returns (address[] memory) {\r\n    require(isAdminListed(msg.sender),'Only Admins');\r\n    address[] memory _adminList = new address[](adminCount);\r\n    for(uint i = 0; i<adminCount ; i++){\r\n      _adminList[i] = adminListed[i];\r\n    }\r\n    return _adminList;\r\n  }\r\n\r\n      function addAdminList (address _adminUser) public {\r\n        require(_adminUser != address(0));\r\n        require(!isAdminListed(_adminUser));\r\n        adminListed.push(_adminUser);\r\n        adminCount++;\r\n    }\r\n\r\n    function removeAdminList (address _clearedAdmin) public {\r\n        require(isAdminListed(msg.sender),'Only Admins');\r\n        require(isAdminListed(_clearedAdmin) && _clearedAdmin != msg.sender);\r\n        for(uint256 i = 0 ;i<adminCount;i++){\r\n            if(adminListed[i] == _clearedAdmin) {\r\n                adminListed[i] = adminListed[adminListed.length-1];\r\n                delete adminListed[adminListed.length-1];\r\n                adminCount--;\r\n            }\r\n        }\r\n    }\r\n\r\n  function getUserReferrals(address _User,uint _Pos) public view returns (address referral)\r\n    { return(USERS[_User].Referrals[_Pos]); }\r\n\r\n  function getLine1Ref(address _User, uint _Pos) public view returns (address referral)\r\n    { return USERS[_User].Line1Referrals[_Pos]; }\r\n\r\n  function getLine2Ref(address _User, uint _Pos) public view returns (address referral)\r\n    { return USERS[_User].Line2Referrals[_Pos]; }\r\n\r\n  function getLine3Ref(address _User, uint _Pos) public view returns (address referral)\r\n    { return USERS[_User].Line3Referrals[_Pos]; }\r\n\r\n  function getLine4Ref(address _User, uint _Pos) public view returns (address referral)\r\n    { return USERS[_User].Line4Referrals[_Pos]; }\r\n\r\n  function getUserLevelExpiresAt(address _user, uint8 _level) public view returns (uint)\r\n    { return USERS[_user].LevelExpiresAt[_level];}\r\n\r\n  function getUserLevel (address _user) public view returns (uint8) {\r\n    if (getUserLevelExpiresAt(_user, 1) < block.timestamp) {return (0);}\r\n    else if (getUserLevelExpiresAt(_user, 2) < block.timestamp) {return (1);}\r\n    else if (getUserLevelExpiresAt(_user, 3) < block.timestamp) {return (2);}\r\n    else if (getUserLevelExpiresAt(_user, 4) < block.timestamp) {return (3);}\r\n    else if (getUserLevelExpiresAt(_user, 5) < block.timestamp) {return (4);}\r\n    else if (getUserLevelExpiresAt(_user, 6) < block.timestamp) {return (5);}\r\n    else if (getUserLevelExpiresAt(_user, 7) < block.timestamp) {return (6);}\r\n    else if (getUserLevelExpiresAt(_user, 8) < block.timestamp) {return (7);}\r\n    else if (getUserLevelExpiresAt(_user, 9) < block.timestamp) {return (8);}\r\n    else  {return (9);}\r\n    }\r\n\r\n  function getPkgPurchased(address _User, uint _Pos)\r\n    public view returns (uint8 LvL,uint pDate,uint32 EduPkg) {\r\n    return (\r\n      UPGRADE_PURCHASED[_User].LvL[_Pos],\r\n      UPGRADE_PURCHASED[_User].pDate[_Pos],\r\n      UPGRADE_PURCHASED[_User].EduPkg[_Pos]\r\n  );}\r\n\r\n  function getLOYALTY_BONUS(address _User, uint _Pos)\r\n  public view returns(uint8 Rewardtype,uint256 Amount,uint256 RewardedAt,address ReferralAddr){\r\n    return (\r\n      LOYALTY_BONUS[_User].Rewardtype[_Pos],\r\n      LOYALTY_BONUS[_User].Amount[_Pos],\r\n      LOYALTY_BONUS[_User].RewardedAt[_Pos],\r\n      LOYALTY_BONUS[_User].ReferralAddr[_Pos]\r\n  );}\r\n\r\n  function getSPONSOR_BONUS(address _User, uint _Pos)\r\n  public view returns(uint8 Rewardtype,uint256 Amount,uint256 RewardedAt,address ReferralAddr){\r\n    return (\r\n      SPONSOR_BONUS[_User].Rewardtype[_Pos],\r\n      SPONSOR_BONUS[_User].Amount[_Pos],\r\n      SPONSOR_BONUS[_User].RewardedAt[_Pos],\r\n      SPONSOR_BONUS[_User].ReferralAddr[_Pos]\r\n  );}\r\n\r\n  function set_TOKEN_SC_Address (address _tokenSCAddress) public {\r\n      require(isAdminListed(msg.sender),'Only Admins');\r\n      TOKEN_SC = _tokenSCAddress;}\r\n\r\n  function set_TOKEN_ATM_Address (address _tokenATM_Address) public {\r\n      require(isAdminListed(msg.sender),'Only Admins');\r\n      TOKEN_ATM = _tokenATM_Address;}\r\n      \r\n  function set_TOKEN_EXCHNG_Address (address _exchngSCAddress) public { \r\n      require(isAdminListed(msg.sender),'Only Admins');\r\n      TOKEN_EXCHNG  = _exchngSCAddress;}\r\n\r\n  function set_Owner_Address (address _WBC_Address) public {\r\n      require(isAdminListed(msg.sender),'Only Admins');\r\n      WBC_Wallet = _WBC_Address;}\r\n\r\n  function bytesToAddress(bytes memory bys) private pure returns (address addr) {assembly {addr := mload(add(bys,20))}}\r\n\r\n  function set_Exchange_Price() public {\r\n    ERC20Interface ERC20Exchng = ERC20Interface(TOKEN_EXCHNG);\r\n    TOKEN_PRICE = ERC20Exchng.Exchange_Price();}\r\n\r\n  function depositToken(uint256 _amount) public {\r\n    ERC20Interface ERC20Token = ERC20Interface(TOKEN_SC);\r\n    require(ERC20Token.transferFrom(msg.sender, address(this),_amount),'Token Transfer failed !');\r\n    TOKEN_DEPOSITS[TOKEN_SC] = TOKEN_DEPOSITS[TOKEN_SC]+_amount;}\r\n\r\n  function getUserID(address _user) public view returns(uint256 userID) {return userID = USERS[_user].ID;}\r\n  function viewUserReferral(address _user) public view returns(address[] memory) {return USERS[_user].Referrals;}\r\n  function getETHBalance() public view returns (uint256 _ETHBalance) {\r\n      require(isAdminListed(msg.sender),'Only Admins');\r\n      return address(this).balance;}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LEVEL_EXPIRE_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LOYALTY_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Loyalty_TokenReward\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRALS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SPONSOR_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"SPONSOR_REWARD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ATM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TOKEN_DEPOSITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_EXCHNG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"UPGRADE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UPGRADE_PURCHASED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"USERS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReferrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SponsorID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SubscriptionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"ReferralCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"LvL1Count\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"LvL2Count\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"LvL3Count\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"LvL4Count\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"USER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WBC_Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminUser\",\"type\":\"address\"}],\"name\":\"addAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminListed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"EduPkg\",\"type\":\"uint32\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currUserID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ETHBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getLOYALTY_BONUS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"Rewardtype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardedAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ReferralAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getLine1Ref\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getLine2Ref\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getLine3Ref\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getLine4Ref\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getPkgPurchased\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"LvL\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pDate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"EduPkg\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getSPONSOR_BONUS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"Rewardtype\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardedAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ReferralAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getUserLevelExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_User\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Pos\",\"type\":\"uint256\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isAdminListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"EduPkg\",\"type\":\"uint32\"}],\"name\":\"regUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedAdmin\",\"type\":\"address\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"set_Exchange_Price\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WBC_Address\",\"type\":\"address\"}],\"name\":\"set_Owner_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenATM_Address\",\"type\":\"address\"}],\"name\":\"set_TOKEN_ATM_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchngSCAddress\",\"type\":\"address\"}],\"name\":\"set_TOKEN_EXCHNG_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenSCAddress\",\"type\":\"address\"}],\"name\":\"set_TOKEN_SC_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserReferral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WealthBuilder_M1","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8baa02303054fc9b24d4f336d4c2254a1e8a057ceac73980b66077920da0c73a"}]}