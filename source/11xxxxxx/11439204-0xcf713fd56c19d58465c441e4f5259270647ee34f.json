{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2018 requestnetwork\r\nCopyright (c) 2018 Fragments, Inc.\r\nCopyright (c) 2020 Base Protocol, Inc.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a)\r\n        internal\r\n        pure\r\n        returns (int256)\r\n    {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\nabstract contract ERC677 {\r\n    function transfer(address to, uint256 value) public virtual returns (bool);\r\n    function transferAndCall(address to, uint value, bytes memory data) public virtual returns (bool success);\r\n\r\n    // event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\nabstract contract ERC677Receiver {\r\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) virtual public;\r\n}\r\n\r\nabstract contract ERC677Token is ERC677 {\r\n    /**\r\n    * @dev transfer token to a contract address with additional data if the recipient is a contact.\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _data The extra data to be passed to the receiving contract.\r\n    */\r\n    function transferAndCall(address _to, uint _value, bytes memory _data)\r\n        public\r\n        override\r\n        returns (bool success)\r\n    {\r\n        transfer(_to, _value);\r\n        // emit Transfer(msg.sender, _to, _value, _data);\r\n        if (isContract(_to)) {\r\n            contractFallback(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function contractFallback(address _to, uint _value, bytes memory _data)\r\n        private\r\n    {\r\n        ERC677Receiver receiver = ERC677Receiver(_to);\r\n        receiver.onTokenTransfer(msg.sender, _value, _data);\r\n    }\r\n\r\n    function isContract(address _addr)\r\n        private\r\n        view\r\n        returns (bool hasCode)\r\n    {\r\n        uint length;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { length := extcodesize(_addr) }\r\n        return length > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ACX ERC20 token\r\n * @dev This is part of an implementation of the ACX Index Fund protocol.\r\n *      ACX is a normal ERC20 token, but its supply can be adjusted by splitting and\r\n *      combining tokens proportionally across all wallets.\r\n *\r\n *      ACX balances are internally represented with a hidden denomination, 'shares'.\r\n *      We support splitting the currency in expansion and combining the currency on contraction by\r\n *      changing the exchange rate between the hidden 'shares' and the public 'ACX'.\r\n */\r\ncontract BaseToken is ERC20UpgradeSafe, ERC677Token, OwnableUpgradeSafe {\r\n    // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\r\n    // Anytime there is division, there is a risk of numerical instability from rounding errors. In\r\n    // order to minimize this risk, we adhere to the following guidelines:\r\n    // 1) The conversion rate adopted is the number of shares that equals 1 ACX.\r\n    //    The inverse rate must not be used--totalShares is always the numerator and _totalSupply is\r\n    //    always the denominator. (i.e. If you want to convert shares to ACX instead of\r\n    //    multiplying by the inverse rate, you should divide by the normal rate)\r\n    // 2) Share balances converted into BaseToken are always rounded down (truncated).\r\n    //\r\n    // We make the following guarantees:\r\n    // - If address 'A' transfers x BaseToken to address 'B'. A's resulting external balance will\r\n    //   be decreased by precisely x BaseToken, and B's external balance will be precisely\r\n    //   increased by x BaseToken.\r\n    //\r\n    // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\r\n    // This is because, for any conversion function 'f()' that has non-zero rounding error,\r\n    // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event LogMonetaryPolicyUpdated(address monetaryPolicy);\r\n    event LogUserBanStatusUpdated(address user, bool banned);\r\n\r\n    // Used for authentication\r\n    address public monetaryPolicy;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    // uint256 private constant INITIAL_SUPPLY = 50 * 10**6 * 10**DECIMALS;\r\n    uint256 private constant INITIAL_SUPPLY = 10_000_000 * 10**DECIMALS;\r\n    uint256 private constant INITIAL_SHARES = (MAX_UINT256 / (10**36)) -\r\n        ((MAX_UINT256 / (10**36)) % INITIAL_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalSupply;\r\n    uint256 private _sharesPerACX;\r\n    mapping(address => uint256) private _shareBalances;\r\n\r\n    mapping(address => bool) public bannedUsers;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowedACX;\r\n\r\n    bool public transfersPaused;\r\n    bool public rebasesPaused;\r\n\r\n    mapping(address => bool) public transferPauseExemptList;\r\n\r\n    function setTransfersPaused(bool _transfersPaused) public onlyOwner {\r\n        transfersPaused = _transfersPaused;\r\n    }\r\n\r\n    function setTransferPauseExempt(address user, bool exempt)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (exempt) {\r\n            transferPauseExemptList[user] = true;\r\n        } else {\r\n            delete transferPauseExemptList[user];\r\n        }\r\n    }\r\n\r\n    function setRebasesPaused(bool _rebasesPaused) public onlyOwner {\r\n        rebasesPaused = _rebasesPaused;\r\n    }\r\n\r\n    function setMonetaryPolicy(address monetaryPolicy_) external onlyOwner {\r\n        monetaryPolicy = monetaryPolicy_;\r\n        emit LogMonetaryPolicyUpdated(monetaryPolicy_);\r\n    }\r\n\r\n    function rebase(uint256 epoch, int256 supplyDelta)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        require(msg.sender == monetaryPolicy, \"only monetary policy\");\r\n        require(!rebasesPaused, \"rebases paused\");\r\n\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        if (supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        }\r\n\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _sharesPerACX = _totalShares.div(_totalSupply);\r\n\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    function sharesOf(address user) public view returns (uint256) {\r\n        return _shareBalances[user];\r\n    }\r\n\r\n    function mintShares(address recipient, uint256 amount) public {\r\n        require(msg.sender == monetaryPolicy, \"forbidden\");\r\n        _shareBalances[recipient] = _shareBalances[recipient].add(amount);\r\n        _totalShares = _totalShares.add(amount);\r\n    }\r\n\r\n    function burnShares(address recipient, uint256 amount) public {\r\n        require(msg.sender == monetaryPolicy, \"forbidden\");\r\n        require(_shareBalances[recipient] >= amount, \"amount\");\r\n        _shareBalances[recipient] = _shareBalances[recipient].sub(amount);\r\n        _totalShares = _totalShares.sub(amount);\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        __ERC20_init(\"Andre Cronje Index\", \"ACX\");\r\n        _setupDecimals(uint8(DECIMALS));\r\n        __Ownable_init();\r\n\r\n        _totalShares = INITIAL_SHARES;\r\n        _totalSupply = INITIAL_SUPPLY;\r\n        _shareBalances[owner()] = _totalShares;\r\n        _sharesPerACX = _totalShares.div(_totalSupply);\r\n\r\n        bannedUsers[0xeB31973E0FeBF3e3D7058234a5eBbAe1aB4B8c23] = true;\r\n\r\n        emit Transfer(address(0x0), owner(), _totalSupply);\r\n    }\r\n\r\n    function setUserBanStatus(address user, bool banned) public onlyOwner {\r\n        if (banned) {\r\n            bannedUsers[user] = true;\r\n        } else {\r\n            delete bannedUsers[user];\r\n        }\r\n        emit LogUserBanStatusUpdated(user, banned);\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public override view returns (uint256) {\r\n        return _shareBalances[who].div(_sharesPerACX);\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        override(ERC20UpgradeSafe, ERC677)\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        require(bannedUsers[msg.sender] == false, \"you are banned\");\r\n        require(\r\n            !transfersPaused || transferPauseExemptList[msg.sender],\r\n            \"paused\"\r\n        );\r\n\r\n        uint256 shareValue = value.mul(_sharesPerACX);\r\n        _shareBalances[msg.sender] = _shareBalances[msg.sender].sub(shareValue);\r\n        _shareBalances[to] = _shareBalances[to].add(shareValue);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowedACX[owner_][spender];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public override validRecipient(to) returns (bool) {\r\n        require(bannedUsers[msg.sender] == false, \"you are banned\");\r\n        require(\r\n            !transfersPaused || transferPauseExemptList[msg.sender],\r\n            \"paused\"\r\n        );\r\n\r\n        _allowedACX[from][msg.sender] = _allowedACX[from][msg.sender].sub(\r\n            value\r\n        );\r\n\r\n        uint256 shareValue = value.mul(_sharesPerACX);\r\n        _shareBalances[from] = _shareBalances[from].sub(shareValue);\r\n        _shareBalances[to] = _shareBalances[to].add(shareValue);\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            !transfersPaused || transferPauseExemptList[msg.sender],\r\n            \"paused\"\r\n        );\r\n\r\n        _allowedACX[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            !transfersPaused || transferPauseExemptList[msg.sender],\r\n            \"paused\"\r\n        );\r\n\r\n        _allowedACX[msg.sender][spender] = _allowedACX[msg.sender][spender]\r\n            .add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedACX[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            !transfersPaused || transferPauseExemptList[msg.sender],\r\n            \"paused\"\r\n        );\r\n\r\n        uint256 oldValue = _allowedACX[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedACX[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedACX[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedACX[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Cascade is OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    mapping(address => uint256) internal deposits_lpTokensDeposited; // 用户总的LP stake 数\r\n    mapping(address => uint256) internal deposits_depositTimestamp; // 用户上一次deposit LP 时间\r\n    mapping(address => uint8) internal deposits_multiplierLevel; // 用户的等级乘数\r\n    mapping(address => uint256) internal deposits_mostRecentACXWithdrawal;\r\n\r\n    uint256 public totalDepositedLevel1; // 每次deposit LP累加\r\n    uint256 public totalDepositedLevel2;\r\n    uint256 public totalDepositedLevel3;\r\n    uint256 public totalDepositSecondsLevel1;\r\n    uint256 public totalDepositSecondsLevel2;\r\n    uint256 public totalDepositSecondsLevel3;\r\n    uint256 public lastAccountingUpdateTimestamp; // 最后一个用户操作的时间\r\n    IERC20 public lpToken;\r\n    BaseToken public ACX;\r\n    uint256 public minTimeBetweenWithdrawals;\r\n\r\n    function initialize() public initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**\r\n     * Admin\r\n     */\r\n\r\n    function setLPToken(address _lpToken) public onlyOwner {\r\n        lpToken = IERC20(_lpToken);\r\n    }\r\n\r\n    function setACXToken(address _baseToken) public onlyOwner {\r\n        ACX = BaseToken(_baseToken);\r\n    }\r\n\r\n    function setMinTimeBetweenWithdrawals(uint256 _minTimeBetweenWithdrawals)\r\n        public\r\n        onlyOwner\r\n    {\r\n        minTimeBetweenWithdrawals = _minTimeBetweenWithdrawals;\r\n    }\r\n\r\n    function adminWithdrawACX(address recipient, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(recipient != address(0x0), \"bad recipient\");\r\n        require(amount > 0, \"bad amount\");\r\n\r\n        bool ok = ACX.transfer(recipient, amount);\r\n        require(ok, \"transfer\");\r\n    }\r\n\r\n    function rescueMistakenlySentTokens(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        require(recipient != address(0x0), \"bad recipient\");\r\n        require(amount > 0, \"bad amount\");\r\n\r\n        bool ok = IERC20(token).transfer(recipient, amount);\r\n        require(ok, \"transfer\");\r\n    }\r\n\r\n    /**\r\n     * Public methods\r\n     */\r\n\r\n    function deposit(uint256 amount) public {\r\n        updateDepositSeconds();\r\n\r\n        uint256 allowance = lpToken.allowance(msg.sender, address(this));\r\n        require(amount <= allowance, \"allowance\");\r\n\r\n        if (deposits_multiplierLevel[msg.sender] > 0) {\r\n            burnDepositSeconds(msg.sender);\r\n        }\r\n\r\n        totalDepositedLevel1 = totalDepositedLevel1.add(amount);\r\n\r\n        deposits_lpTokensDeposited[msg.sender] = deposits_lpTokensDeposited[msg\r\n            .sender]\r\n            .add(amount);\r\n        deposits_depositTimestamp[msg.sender] = now;\r\n        deposits_multiplierLevel[msg.sender] = 1;\r\n\r\n        bool ok = lpToken.transferFrom(msg.sender, address(this), amount);\r\n        require(ok, \"transferFrom\");\r\n    }\r\n\r\n    /* 根据stake的时间来升级用户等级，并更新相关等级的总stake量 */\r\n    function upgradeMultiplierLevel() public {\r\n        require(deposits_multiplierLevel[msg.sender] > 0, \"no deposit\");\r\n        require(deposits_multiplierLevel[msg.sender] < 3, \"fully upgraded\");\r\n\r\n        burnDepositSeconds(msg.sender);\r\n\r\n        uint256 duration = now.sub(deposits_depositTimestamp[msg.sender]);\r\n\r\n        if (deposits_multiplierLevel[msg.sender] == 1 && duration >= 60 days) {\r\n            deposits_multiplierLevel[msg.sender] = 3;\r\n            totalDepositedLevel3 = totalDepositedLevel3.add(\r\n                deposits_lpTokensDeposited[msg.sender]\r\n            );\r\n        } else if (\r\n            deposits_multiplierLevel[msg.sender] == 1 && duration >= 30 days\r\n        ) {\r\n            deposits_multiplierLevel[msg.sender] = 2;\r\n            totalDepositedLevel2 = totalDepositedLevel2.add(\r\n                deposits_lpTokensDeposited[msg.sender]\r\n            );\r\n        } else if (\r\n            deposits_multiplierLevel[msg.sender] == 2 && duration >= 60 days\r\n        ) {\r\n            deposits_multiplierLevel[msg.sender] = 3;\r\n            totalDepositedLevel3 = totalDepositedLevel3.add(\r\n                deposits_lpTokensDeposited[msg.sender]\r\n            );\r\n        } else {\r\n            revert(\"ineligible\");\r\n        }\r\n    }\r\n\r\n    function claimACX() public {\r\n        updateDepositSeconds();\r\n\r\n        require(deposits_multiplierLevel[msg.sender] > 0, \"doesn't exist\");\r\n        require(allowedToWithdraw(msg.sender), \"too soon\");\r\n\r\n        uint256 owed = owedTo(msg.sender);\r\n        require(ACX.balanceOf(address(this)) >= owed, \"available tokens\");\r\n\r\n        deposits_mostRecentACXWithdrawal[msg.sender] = now;\r\n\r\n        bool ok = ACX.transfer(msg.sender, owed);\r\n        require(ok, \"transfer\");\r\n    }\r\n\r\n    function withdrawLPTokens() public {\r\n        updateDepositSeconds();\r\n        claimACX();\r\n\r\n        require(deposits_multiplierLevel[msg.sender] > 0, \"doesn't exist\");\r\n        require(deposits_lpTokensDeposited[msg.sender] > 0, \"no stake\");\r\n        require(allowedToWithdraw(msg.sender), \"too soon\");\r\n\r\n        burnDepositSeconds(msg.sender);\r\n\r\n        uint256 deposited = deposits_lpTokensDeposited[msg.sender];\r\n\r\n        delete deposits_lpTokensDeposited[msg.sender];\r\n        delete deposits_depositTimestamp[msg.sender];\r\n        delete deposits_multiplierLevel[msg.sender];\r\n        delete deposits_mostRecentACXWithdrawal[msg.sender];\r\n\r\n        bool ok = lpToken.transfer(msg.sender, deposited);\r\n        require(ok, \"transfer\");\r\n    }\r\n\r\n    /**\r\n     * Accounting utilities\r\n     */\r\n\r\n    function updateDepositSeconds() private {\r\n        // 计算出与上次最后一个用户操作的时间差\r\n        uint256 delta = now.sub(lastAccountingUpdateTimestamp);\r\n        totalDepositSecondsLevel1 = totalDepositSecondsLevel1.add(\r\n            totalDepositedLevel1.mul(delta)\r\n        );\r\n        totalDepositSecondsLevel2 = totalDepositSecondsLevel2.add(\r\n            totalDepositedLevel2.mul(delta)\r\n        );\r\n        totalDepositSecondsLevel3 = totalDepositSecondsLevel3.add(\r\n            totalDepositedLevel3.mul(delta)\r\n        );\r\n\r\n        lastAccountingUpdateTimestamp = now;\r\n    }\r\n\r\n    function burnDepositSeconds(address user) private {\r\n        // (当前时间 - 上次stake时间) / stake金额\r\n        uint256 depositSecondsToBurn = now\r\n            .sub(deposits_depositTimestamp[user])\r\n            .mul(deposits_lpTokensDeposited[user]);\r\n        if (deposits_multiplierLevel[user] == 1) {\r\n            totalDepositedLevel1 = totalDepositedLevel1.sub(\r\n                deposits_lpTokensDeposited[user]\r\n            );\r\n            totalDepositSecondsLevel1 = totalDepositSecondsLevel1.sub(\r\n                depositSecondsToBurn\r\n            );\r\n        } else if (deposits_multiplierLevel[user] == 2) {\r\n            totalDepositedLevel2 = totalDepositedLevel2.sub(\r\n                deposits_lpTokensDeposited[user]\r\n            );\r\n            totalDepositSecondsLevel2 = totalDepositSecondsLevel2.sub(\r\n                depositSecondsToBurn\r\n            );\r\n        } else if (deposits_multiplierLevel[user] == 3) {\r\n            totalDepositedLevel3 = totalDepositedLevel3.sub(\r\n                deposits_lpTokensDeposited[user]\r\n            );\r\n            totalDepositSecondsLevel3 = totalDepositSecondsLevel3.sub(\r\n                depositSecondsToBurn\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Getters\r\n     */\r\n\r\n    function depositInfo(address user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _lpTokensDeposited,\r\n            uint256 _depositTimestamp,\r\n            uint8 _multiplierLevel,\r\n            uint256 _mostRecentACXWithdrawal,\r\n            uint256 _userDepositSeconds,\r\n            uint256 _totalDepositSeconds\r\n        )\r\n    {\r\n        uint256 delta = now.sub(lastAccountingUpdateTimestamp);\r\n        _totalDepositSeconds = totalDepositSecondsLevel1\r\n            .add(totalDepositedLevel1.mul(delta))\r\n            .add(\r\n            totalDepositSecondsLevel2.add(totalDepositedLevel2.mul(delta)).mul(\r\n                2\r\n            )\r\n        )\r\n            .add(\r\n            totalDepositSecondsLevel3.add(totalDepositedLevel3.mul(delta)).mul(\r\n                3\r\n            )\r\n        );\r\n\r\n        return (\r\n            deposits_lpTokensDeposited[user],\r\n            deposits_depositTimestamp[user],\r\n            deposits_multiplierLevel[user],\r\n            deposits_mostRecentACXWithdrawal[user],\r\n            userDepositSeconds(user),\r\n            _totalDepositSeconds\r\n        );\r\n    }\r\n\r\n    function allowedToWithdraw(address user) public view returns (bool) {\r\n        return\r\n            deposits_mostRecentACXWithdrawal[user] == 0\r\n                ? now >=\r\n                    deposits_depositTimestamp[user].add(\r\n                        minTimeBetweenWithdrawals\r\n                    )\r\n                : now >=\r\n                    deposits_mostRecentACXWithdrawal[user].add(\r\n                        minTimeBetweenWithdrawals\r\n                    );\r\n    }\r\n\r\n    function userDepositSeconds(address user) public view returns (uint256) {\r\n        return\r\n            deposits_lpTokensDeposited[user]\r\n                .mul(now.sub(deposits_depositTimestamp[user]))\r\n                .mul(deposits_multiplierLevel[user]);\r\n    }\r\n\r\n    function totalDepositSeconds() public view returns (uint256) {\r\n        return\r\n            totalDepositSecondsLevel1.add(totalDepositSecondsLevel2.mul(2)).add(\r\n                totalDepositSecondsLevel3.mul(3)\r\n            );\r\n    }\r\n\r\n    function rewardsPool() public view returns (uint256) {\r\n        return ACX.balanceOf(address(this));\r\n    }\r\n\r\n    function owedTo(address user) public view returns (uint256 amount) {\r\n        return\r\n            rewardsPool().mul(userDepositSeconds(user)).div(\r\n                totalDepositSeconds()\r\n            );\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACX\",\"outputs\":[{\"internalType\":\"contract BaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawACX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowedToWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimACX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"depositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_multiplierLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_mostRecentACXWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDepositSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDepositSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccountingUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeBetweenWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"owedTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueMistakenlySentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"setACXToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTimeBetweenWithdrawals\",\"type\":\"uint256\"}],\"name\":\"setMinTimeBetweenWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositSecondsLevel1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositSecondsLevel2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositSecondsLevel3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedLevel1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedLevel2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedLevel3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeMultiplierLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDepositSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Cascade","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e191324db4b54685645d51a1628fa4a6d2fc2caab7364c4fb63aeb1203382e1a"}]}