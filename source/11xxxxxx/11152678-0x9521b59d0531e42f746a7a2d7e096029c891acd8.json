{"status":"1","message":"OK","result":[{"SourceCode":"/* Keep4r â€“ kp4r.network - 2020 */\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Keep4rPresale {\r\n    using SafeMath for uint256;\r\n\r\n    // cannot purchase until started\r\n    bool public started;\r\n\r\n    IERC20 KP4R;\r\n    address kp4rAddress;\r\n\r\n    address public manager;\r\n    address public managerPending;\r\n    uint256 constant managerS = 80;\r\n    uint256 public managerWithdrawn;\r\n    address public overseer;\r\n    address public overseerPending;\r\n    uint256 constant overseerS = 20;\r\n    uint256 public overseerWithdrawn;\r\n\r\n    uint256 public unitPrice = 1e18/2;\r\n    uint256 public minimumOrder = 100000;\r\n\r\n    /** @notice the date when purchased KP4R can be claimed */\r\n    uint256 public unlocksOn;\r\n\r\n    /** @notice the date when KP4R can no longer be purchased from the contract */\r\n    uint256 public endsOn;\r\n\r\n    /** @notice percentage bonus actived upon purchasing more than the trigger\r\n    * value. */\r\n    uint256 public bonusTrigger;\r\n    uint256 public bonusPercentage;\r\n\r\n    // Stats:\r\n    uint256 public totalForSale;\r\n    uint256 public totalSold;\r\n    uint256 public totalSettled;\r\n    uint256 public weiRaised;\r\n\r\n    mapping(address => uint256) public balance;\r\n\r\n    event Purchase (address indexed buyer, uint256 amount, uint256 price);\r\n\r\n    constructor(address _kp4r) public {\r\n        manager = msg.sender;\r\n        overseer = msg.sender;\r\n        KP4R = IERC20(_kp4r);\r\n        kp4rAddress = _kp4r;\r\n    }\r\n\r\n    modifier onlyManager {\r\n        require( msg.sender == manager, \"Only the manager can call this function.\" );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOverseer {\r\n        require( msg.sender == overseer, \"Only the overseer can call this function.\");\r\n        _;\r\n    }\r\n\r\n    function transferRole(address _new) public {\r\n        require(msg.sender == manager || msg.sender == overseer, \"!manager or overseer\");\r\n        if (msg.sender == manager) { managerPending = _new; return; }\r\n        if (msg.sender == overseer) { overseerPending = _new; return; }\r\n    }\r\n\r\n    function acceptRole() public {\r\n        require(msg.sender == managerPending || msg.sender == overseerPending, \"!managerPending or overseerPending\");\r\n        if (msg.sender == managerPending) { manager = managerPending; managerPending = address(0); return; }\r\n        if (msg.sender == overseerPending) { overseer = overseerPending; managerPending = address(0); return; }\r\n    }\r\n\r\n    function managerSetPrice(uint256 _price) public onlyManager {\r\n        unitPrice = _price;\r\n    }\r\n\r\n    function managerSetMinimum(uint256 _minimum) public onlyManager {\r\n        minimumOrder = _minimum;\r\n    }\r\n\r\n    function managerSetBonus(uint256 _trigger, uint256 _percentage) public onlyManager {\r\n        bonusTrigger = _trigger;\r\n        bonusPercentage = _percentage;\r\n    }\r\n\r\n    function managerDeposit(uint256 _amount) public onlyManager {\r\n        KP4R.transferFrom(msg.sender, address(this), _amount);\r\n        totalForSale = totalForSale.add(_amount);\r\n    }\r\n\r\n    /** @notice manager can reclaim unsold tokens */\r\n    function managerReclaim(uint256 _amount) public onlyManager {\r\n        // calculate the amount of tokens that haven not been sold\r\n        // and settled and are thus reclaimable:\r\n        uint256 unreclaimable = totalSold.sub(totalSettled);\r\n        uint256 reclaimable = KP4R.balanceOf(address(this)).sub(unreclaimable);\r\n        require(_amount <= reclaimable, \"cannot withdraw already sold tokens\");\r\n\r\n        // transfer the tokens to the manager\r\n        KP4R.transfer(msg.sender, _amount);\r\n        totalForSale = totalForSale.sub(_amount);\r\n    }\r\n\r\n    function managerWithdraw(uint256 _amount) public onlyManager {\r\n        require(managerWithdrawn.add(_amount) <= weiRaised.mul(managerS).div(100), \"cannot withdraw more than the managers share\");\r\n        managerWithdrawn = managerWithdrawn.add(_amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    function overseerWithdraw(uint _amount) public onlyOverseer {\r\n        require(overseerWithdrawn.add(_amount) <= weiRaised.mul(overseerS).div(100), \"cannot withdraw more than overseerS\");\r\n        overseerWithdrawn = overseerWithdrawn.add(_amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    function managerClose(uint256 amount) public onlyManager {\r\n        require(block.timestamp > endsOn.add(31536000).mul(2), \"must wait until 6 months past end date\");\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function managerForceUnlock() public onlyManager {\r\n        unlocksOn = block.timestamp-1;\r\n    }\r\n\r\n    function start(uint256 _unlocksOn, uint256 _endsOn, uint256 _price, uint256 _minimumOrder) public onlyManager {\r\n        require(!started, \"already started\");\r\n        unlocksOn = _unlocksOn;\r\n        endsOn = _endsOn;\r\n        unitPrice = _price;\r\n        minimumOrder = _minimumOrder;\r\n        started = true;\r\n    }\r\n\r\n    /** @notice The amount of KP4R remaining */\r\n    function remaining() public view returns (uint256) {\r\n        return KP4R.balanceOf(address(this));\r\n    }\r\n\r\n    /** @notice purchase KP4R at the current unit price */\r\n    function purchase() public payable {\r\n        require(started, \"token sale has not yet started\");\r\n        require(msg.value > minimumOrder, \"amount purchased is too small\");\r\n        require(block.timestamp < endsOn, \"presale has ended\");\r\n\r\n        // calculate the amount of KP4R purchasable\r\n        uint256 _kp4r = calculateAmountPurchased(msg.value);\r\n        require(_kp4r <= KP4R.balanceOf(address(this)), \"not enough KP4R left\");\r\n\r\n        // update the users balance\r\n        balance[msg.sender] = balance[msg.sender].add(_kp4r);\r\n        totalSold = totalSold.add(_kp4r);\r\n        weiRaised = weiRaised.add(msg.value);\r\n\r\n        emit Purchase(msg.sender, _kp4r, msg.value);\r\n    }\r\n\r\n    /** @notice calculates the amount purchasedfor a given amount of eth */\r\n    function calculateAmountPurchased(uint256 _value) public view returns (uint256) {\r\n        uint256 _kp4r = _value.div(unitPrice).mul(1e18);\r\n        if (_value > bonusTrigger) {\r\n            uint256 _bonus = _kp4r.mul(bonusPercentage).div(1000);\r\n            if (_kp4r.add(_bonus) <= KP4R.balanceOf(address(this))) {\r\n                _kp4r = _kp4r.add(_bonus);\r\n            }\r\n        }\r\n        return _kp4r;\r\n    }\r\n\r\n    /** @notice claim you eth */\r\n    function claim() public {\r\n        require(block.timestamp > unlocksOn, \"presale has not unlocked yet\");\r\n        require(balance[msg.sender] > 0, \"nothing to withdraw\");\r\n        KP4R.transfer(msg.sender, balance[msg.sender]);\r\n        totalSettled = totalSettled.add(balance[msg.sender]);\r\n    }\r\n\r\n    // fallbacks to allow users to send to the contract to purchase KP4R\r\n    receive() external payable { purchase(); }\r\n    fallback() external payable { purchase(); }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kp4r\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateAmountPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endsOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"managerClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"managerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerForceUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"managerReclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trigger\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"managerSetBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"managerSetMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"managerSetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"managerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overseer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overseerPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"overseerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overseerWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlocksOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endsOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOrder\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSettled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"transferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocksOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Keep4rPresale","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a89ac6e529acf391cfbbd377f3ac9d93eae9664e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e52871aaa81bf49dbeab3b6217b34e69c3716ec5faf8604ae0c61ce4f2dcd43d"}]}