{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WorldFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./WorldToken.sol\\\";\\n\\ncontract WorldFarm is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of WORLD tokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accWorldPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accWorldPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. WORLD tokens to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that WORLD tokens distribution occurs.\\n        uint256 accWorldPerShare; // Accumulated WORLD tokens per share, times 1e12. See below.\\n    }\\n\\n    WorldToken public immutable world; // The WORLD ERC-20 Token.\\n    uint256 private worldPerBlock; // WORLD tokens distributed per block. Use getWorldPerBlock() to get the updated reward.\\n\\n    PoolInfo[] public poolInfo; // Info of each pool.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes LP tokens.\\n    uint256 public totalAllocPoint; // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public startBlock; // The block number when WORLD token mining starts.\\n\\n    uint256 public blockRewardUpdateCycle = 1 days; // The cycle in which the worldPerBlock gets updated.\\n    uint256 public blockRewardLastUpdateTime = block.timestamp; // The timestamp when the block worldPerBlock was last updated.\\n    uint256 public blocksPerDay = 6525; // The estimated number of mined blocks per day.\\n    uint256 public blockRewardPercentage = 1; // The percentage used for worldPerBlock calculation.\\n\\n    mapping(address => bool) public addedLpTokens; // Used for preventing LP tokens from being added twice in add().\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        WorldToken _world,\\n        uint256 _startBlock\\n    ) {\\n        require(address(_world) != address(0), \\\"WORLD address is invalid\\\");\\n        require(_startBlock >= block.number, \\\"startBlock is before current block\\\");\\n\\n        world = _world;\\n        startBlock = _startBlock;\\n    }\\n\\n    modifier updateWorldPerBlock() {\\n        (uint256 blockReward, bool update) = getWorldPerBlock();\\n        if (update) {\\n            worldPerBlock = blockReward;\\n            blockRewardLastUpdateTime = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    function getWorldPerBlock() public view returns (uint256, bool) {\\n        if (block.number < startBlock) {\\n            return (0, false);\\n        }\\n\\n        uint256 poolReward = world.balanceOf(address(this));\\n        if (poolReward == 0) {\\n            return (0, worldPerBlock != 0);\\n        }\\n\\n        if (block.timestamp >= getWorldPerBlockUpdateTime() || worldPerBlock == 0) {\\n            return (poolReward.mul(blockRewardPercentage).div(100).div(blocksPerDay), true);\\n        }\\n\\n        return (worldPerBlock, false);\\n    }\\n\\n    function getWorldPerBlockUpdateTime() public view returns (uint256) {\\n        // if blockRewardUpdateCycle = 1 day then roundedUpdateTime = today's UTC midnight\\n        uint256 roundedUpdateTime = blockRewardLastUpdateTime - (blockRewardLastUpdateTime % blockRewardUpdateCycle);\\n        // if blockRewardUpdateCycle = 1 day then calculateRewardTime = tomorrow's UTC midnight\\n        uint256 calculateRewardTime = roundedUpdateTime + blockRewardUpdateCycle;\\n        return calculateRewardTime;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(address(_lpToken) != address(0), \\\"LP token is invalid\\\");\\n        require(!addedLpTokens[address(_lpToken)], \\\"LP token is already added\\\");\\n\\n        require(_allocPoint >= 5 && _allocPoint <= 10, \\\"_allocPoint is outside of range 5-10\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(PoolInfo({\\n            lpToken : _lpToken,\\n            allocPoint : _allocPoint,\\n            lastRewardBlock : lastRewardBlock,\\n            accWorldPerShare : 0\\n        }));\\n\\n        addedLpTokens[address(_lpToken)] = true;\\n    }\\n\\n    // Update the given pool's WORLD token allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(_allocPoint >= 5 && _allocPoint <= 10, \\\"_allocPoint is outside of range 5-10\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // View function to see pending WORLD tokens on frontend.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accWorldPerShare = pool.accWorldPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n            (uint256 blockReward, ) = getWorldPerBlock();\\n            uint256 worldReward = multiplier.mul(blockReward).mul(pool.allocPoint).div(totalAllocPoint);\\n            accWorldPerShare = accWorldPerShare.add(worldReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accWorldPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date when lpSupply changes\\n    // For every deposit/withdraw pool recalculates accumulated token value\\n    function updatePool(uint256 _pid) public updateWorldPerBlock {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n        uint256 worldReward = multiplier.mul(worldPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n\\n        // no minting is required, the contract should have WORLD token balance pre-allocated\\n        // accumulated WORLD per share is stored multiplied by 10^12 to allow small 'fractional' values\\n        pool.accWorldPerShare = pool.accWorldPerShare.add(worldReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to WorldFarming for WORLD token allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accWorldPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accWorldPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from WorldFarming\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"Withdraw amount is greater than user amount\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 pending = user.amount.mul(pool.accWorldPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            safeTokenTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accWorldPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    // Safe WORLD token transfer function, just in case if\\n    // rounding error causes pool to not have enough WORLD tokens\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = world.balanceOf(address(this));\\n        uint256 amount = _amount > balance ? balance : _amount;\\n        world.transfer(_to, amount);\\n    }\\n\\n    function setBlockRewardUpdateCycle(uint256 _blockRewardUpdateCycle) external onlyOwner {\\n        require(_blockRewardUpdateCycle > 0, \\\"Value is zero\\\");\\n        blockRewardUpdateCycle = _blockRewardUpdateCycle;\\n    }\\n\\n    // Just in case an adjustment is needed since mined blocks per day\\n    // changes constantly depending on the network\\n    function setBlocksPerDay(uint256 _blocksPerDay) external onlyOwner {\\n        require(_blocksPerDay >= 6200 && _blocksPerDay <= 7000, \\\"Value is outside of range 6200-7000\\\");\\n        blocksPerDay = _blocksPerDay;\\n    }\\n\\n    function setBlockRewardPercentage(uint256 _blockRewardPercentage) external onlyOwner {\\n        require(_blockRewardPercentage >= 1 && _blockRewardPercentage <= 5, \\\"Value is outside of range 1-5\\\");\\n        blockRewardPercentage = _blockRewardPercentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WorldToken.sol\": {\r\n      \"content\": \"/*\\n                                              ░░░░░░░░░░\\n                                        ░░░░░░████░░░░░░░░░░░░\\n                                    ░░░░░░░░██████░░░░░░░░░░░░░░░░\\n                                  ████░░░░░░░░████░░░░░░░░░░░░░░░░██\\n                                ████████░░░░██░░██░░░░░░░░░░░░░░██████\\n                                ██████████░░░░░░░░░░░░░░░░░░██████████\\n                              ████████████████████░░░░░░░░██████████████\\n                              ████████████░░██████░░░░░░░░██████████████\\n                              ██████████░░████████░░░░░░██████████░░░░██\\n                            ████████████████████░░░░░░░░████████░░░░░░░░██\\n                            ████████████████████░░░░░░░░░░████░░░░████████\\n                            ██████████████████░░░░░░░░░░░░░░░░████████████\\n                            ██████████████████░░░░░░░░░░░░░░██████████████\\n                            ░░░░░░░░░░██████░░░░░░░░░░░░░░░░██████████████\\n                              ░░░░░░░░░░░░██░░░░░░░░░░░░░░██████████████\\n                              ░░░░░░██░░░░██░░░░░░░░░░░░░░██████████████\\n                              ░░░░██░░░░░░░░░░░░░░░░░░░░░░██████████████\\n                                ░░░░░░░░░░░░░░░░░░░░░░░░░░████████████\\n                                ░░░░░░░░░░░░░░░░░░░░░░░░░░░░██████████\\n                                  ░░░░██░░░░░░░░░░░░░░░░░░░░████████\\n                                    ████░░░░░░░░░░░░░░░░░░░░██████\\n                                        ░░████░░░░░░░░░░░░░░░░\\n                                              ░░░░░░░░░░\\n\\n    ██╗    ██╗ ██████╗ ██████╗ ██╗     ██████╗     ████████╗ ██████╗ ██╗  ██╗███████╗███╗   ██╗\\n    ██║    ██║██╔═══██╗██╔══██╗██║     ██╔══██╗    ╚══██╔══╝██╔═══██╗██║ ██╔╝██╔════╝████╗  ██║\\n    ██║ █╗ ██║██║   ██║██████╔╝██║     ██║  ██║       ██║   ██║   ██║█████╔╝ █████╗  ██╔██╗ ██║\\n    ██║███╗██║██║   ██║██╔══██╗██║     ██║  ██║       ██║   ██║   ██║██╔═██╗ ██╔══╝  ██║╚██╗██║\\n    ╚███╔███╔╝╚██████╔╝██║  ██║███████╗██████╔╝       ██║   ╚██████╔╝██║  ██╗███████╗██║ ╚████║\\n     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝        ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WorldToken is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    string private constant NAME = \\\"World Token\\\";\\n    string private constant SYMBOL = \\\"WORLD\\\";\\n    uint8 private constant DECIMALS = 18;\\n\\n    mapping(address => uint256) private rewards;\\n    mapping(address => uint256) private actual;\\n    mapping(address => mapping(address => uint256)) private allowances;\\n\\n    mapping(address => bool) private excludedFromFees;\\n    mapping(address => bool) private excludedFromRewards;\\n    address[] private rewardExcluded;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant ACTUAL_TOTAL = 100_000_000 * 1e18;\\n    uint256 private rewardsTotal = (MAX - (MAX % ACTUAL_TOTAL));\\n    uint256 private holderFeeTotal;\\n    uint256 private marketingFeeTotal;\\n    uint256 private lpFeeTotal;\\n    uint256 private merchantFeeTotal;\\n\\n    uint256 public taxPercentage = 3;\\n    uint256 public holderTaxAlloc = 10;\\n    uint256 public marketingTaxAlloc = 10;\\n    uint256 public lpTaxAlloc = 10;\\n    uint256 public merchantTaxAlloc;\\n    uint256 public totalTaxAlloc = marketingTaxAlloc.add(holderTaxAlloc).add(lpTaxAlloc).add(merchantTaxAlloc);\\n\\n    address public marketingAddress;\\n    address public lpStakingAddress;\\n    address public merchantStakingAddress;\\n\\n    constructor(address _marketingAddress) {\\n        rewards[_marketingAddress] = rewardsTotal;\\n        emit Transfer(address(0), _marketingAddress, ACTUAL_TOTAL);\\n\\n        marketingAddress = _marketingAddress;\\n\\n        excludeFromRewards(_msgSender());\\n        excludeFromFees(_marketingAddress);\\n\\n        if (_marketingAddress != _msgSender()) {\\n            excludeFromRewards(_marketingAddress);\\n            excludeFromFees(_msgSender());\\n        }\\n\\n        excludeFromFees(address(0x000000000000000000000000000000000000dEaD));\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return NAME;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return SYMBOL;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function totalSupply() external pure override returns (uint256) {\\n        return ACTUAL_TOTAL;\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        if (excludedFromRewards[_account]) {\\n            return actual[_account];\\n        }\\n        return tokenWithRewards(rewards[_account]);\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        _transfer(_msgSender(), _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\\n        _approve(_msgSender(), _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public override returns (bool) {\\n        _transfer(_sender, _recipient, _amount);\\n\\n        _approve(\\n        _sender,\\n            _msgSender(),\\n            allowances[_sender][_msgSender()].sub(_amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), _spender, allowances[_msgSender()][_spender].add(_addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            _spender,\\n            allowances[_msgSender()][_spender].sub(_subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromRewards(address _account) external view returns (bool) {\\n        return excludedFromRewards[_account];\\n    }\\n\\n    function isExcludedFromFees(address _account) external view returns (bool) {\\n        return excludedFromFees[_account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return holderFeeTotal.add(marketingFeeTotal).add(lpFeeTotal).add(merchantFeeTotal);\\n    }\\n\\n    function totalHolderFees() external view returns (uint256) {\\n        return holderFeeTotal;\\n    }\\n\\n    function totalMarketingFees() external view returns (uint256) {\\n        return marketingFeeTotal;\\n    }\\n\\n    function totalLpFees() external view returns (uint256) {\\n        return lpFeeTotal;\\n    }\\n\\n    function totalMerchantFees() external view returns (uint256) {\\n        return merchantFeeTotal;\\n    }\\n\\n    function distribute(uint256 _actualAmount) public {\\n        address sender = _msgSender();\\n        require(!excludedFromRewards[sender], \\\"Excluded addresses cannot call this function\\\");\\n\\n        (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\\n        rewards[sender] = rewards[sender].sub(rewardAmount);\\n        rewardsTotal = rewardsTotal.sub(rewardAmount);\\n        holderFeeTotal = holderFeeTotal.add(_actualAmount);\\n    }\\n\\n    function excludeFromFees(address _account) public onlyOwner() {\\n        require(!excludedFromFees[_account], \\\"Account is already excluded from fee\\\");\\n        excludedFromFees[_account] = true;\\n    }\\n\\n    function includeInFees(address _account) public onlyOwner() {\\n        require(excludedFromFees[_account], \\\"Account is already included in fee\\\");\\n        excludedFromFees[_account] = false;\\n    }\\n\\n    function excludeFromRewards(address _account) public onlyOwner() {\\n        require(!excludedFromRewards[_account], \\\"Account is already excluded from reward\\\");\\n\\n        if (rewards[_account] > 0) {\\n            actual[_account] = tokenWithRewards(rewards[_account]);\\n        }\\n\\n        excludedFromRewards[_account] = true;\\n        rewardExcluded.push(_account);\\n    }\\n\\n    function includeInRewards(address _account) public onlyOwner() {\\n        require(excludedFromRewards[_account], \\\"Account is already included in rewards\\\");\\n\\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\\n            if (rewardExcluded[i] == _account) {\\n                rewardExcluded[i] = rewardExcluded[rewardExcluded.length - 1];\\n                actual[_account] = 0;\\n                excludedFromRewards[_account] = false;\\n                rewardExcluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) private {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(_amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        uint256 currentTaxPercentage = taxPercentage;\\n        if (excludedFromFees[_sender] || excludedFromFees[_recipient]) {\\n            taxPercentage = 0;\\n        } else {\\n            uint256 fee = _getFee(_amount);\\n            uint256 marketingFee = _getMarketingFee(fee);\\n            uint256 lpFee = _getLpFee(fee);\\n            uint256 merchantFee = _getMerchantFee(fee);\\n\\n            _updateMarketingFee(marketingFee);\\n            _updateLpFee(lpFee);\\n            _updateMerchantFee(merchantFee);\\n        }\\n\\n        if (excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\\n            _transferWithoutSenderRewards(_sender, _recipient, _amount);\\n        } else if (!excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\\n            _transferWithRecipientRewards(_sender, _recipient, _amount);\\n        } else if (!excludedFromRewards[_sender] && !excludedFromRewards[_recipient]) {\\n            _transferWithRewards(_sender, _recipient, _amount);\\n        } else if (excludedFromRewards[_sender] && excludedFromRewards[_recipient]) {\\n            _transferWithoutRewards(_sender, _recipient, _amount);\\n        } else {\\n            _transferWithRewards(_sender, _recipient, _amount);\\n        }\\n\\n        if (currentTaxPercentage != taxPercentage) {\\n            taxPercentage = currentTaxPercentage;\\n        }\\n    }\\n\\n    function _transferWithRewards(\\n        address _sender,\\n        address _recipient,\\n        uint256 _actualAmount\\n    ) private {\\n        (\\n            uint256 rewardAmount,\\n            uint256 rewardTransferAmount,\\n            uint256 rewardFee,\\n            uint256 actualTransferAmount,\\n            uint256 actualFee\\n        ) = _getValues(_actualAmount);\\n\\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\\n        _updateHolderFee(rewardFee, actualFee);\\n        emit Transfer(_sender, _recipient, actualTransferAmount);\\n    }\\n\\n    function _transferWithRecipientRewards(\\n        address _sender,\\n        address _recipient,\\n        uint256 _actualAmount\\n    ) private {\\n        (\\n            uint256 rewardAmount,\\n            uint256 rewardTransferAmount,\\n            uint256 rewardFee,\\n            uint256 actualTransferAmount,\\n            uint256 actualFee\\n        ) = _getValues(_actualAmount);\\n\\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\\n        _updateHolderFee(rewardFee, actualFee);\\n        emit Transfer(_sender, _recipient, actualTransferAmount);\\n    }\\n\\n    function _transferWithoutSenderRewards(\\n        address _sender,\\n        address _recipient,\\n        uint256 _actualAmount\\n    ) private {\\n        (\\n            uint256 rewardAmount,\\n            uint256 rewardTransferAmount,\\n            uint256 rewardFee,\\n            uint256 actualTransferAmount,\\n            uint256 actualFee\\n        ) = _getValues(_actualAmount);\\n\\n        actual[_sender] = actual[_sender].sub(_actualAmount);\\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\\n        _updateHolderFee(rewardFee, actualFee);\\n        emit Transfer(_sender, _recipient, actualTransferAmount);\\n    }\\n\\n    function _transferWithoutRewards(\\n        address _sender,\\n        address _recipient,\\n        uint256 _actualAmount\\n    ) private {\\n        (\\n            uint256 rewardAmount,\\n            uint256 rewardTransferAmount,\\n            uint256 rewardFee,\\n            uint256 actualTransferAmount,\\n            uint256 actualFee\\n        ) = _getValues(_actualAmount);\\n\\n        actual[_sender] = actual[_sender].sub(_actualAmount);\\n        rewards[_sender] = rewards[_sender].sub(rewardAmount);\\n        actual[_recipient] = actual[_recipient].add(actualTransferAmount);\\n        rewards[_recipient] = rewards[_recipient].add(rewardTransferAmount);\\n        _updateHolderFee(rewardFee, actualFee);\\n        emit Transfer(_sender, _recipient, actualTransferAmount);\\n    }\\n\\n    function _updateHolderFee(uint256 _rewardFee, uint256 _actualFee) private {\\n        rewardsTotal = rewardsTotal.sub(_rewardFee);\\n        holderFeeTotal = holderFeeTotal.add(_actualFee);\\n    }\\n\\n    function _updateMarketingFee(uint256 _marketingFee) private {\\n        if (marketingAddress == address(0)) {\\n            return;\\n        }\\n\\n        uint256 rewardsRate = _getRewardsRate();\\n        uint256 rewardMarketingFee = _marketingFee.mul(rewardsRate);\\n        marketingFeeTotal = marketingFeeTotal.add(_marketingFee);\\n\\n        rewards[marketingAddress] = rewards[marketingAddress].add(rewardMarketingFee);\\n        if (excludedFromRewards[marketingAddress]) {\\n            actual[marketingAddress] = actual[marketingAddress].add(_marketingFee);\\n        }\\n    }\\n\\n    function _updateLpFee(uint256 _lpFee) private {\\n        if (lpStakingAddress == address(0)) {\\n            return;\\n        }\\n\\n        uint256 rewardsRate = _getRewardsRate();\\n        uint256 rewardLpFee = _lpFee.mul(rewardsRate);\\n        lpFeeTotal = lpFeeTotal.add(_lpFee);\\n\\n        rewards[lpStakingAddress] = rewards[lpStakingAddress].add(rewardLpFee);\\n        if (excludedFromRewards[lpStakingAddress]) {\\n            actual[lpStakingAddress] = actual[lpStakingAddress].add(_lpFee);\\n        }\\n    }\\n\\n    function _updateMerchantFee(uint256 _merchantFee) private {\\n        if (merchantStakingAddress == address(0)) {\\n            return;\\n        }\\n\\n        uint256 rewardsRate = _getRewardsRate();\\n        uint256 rewardMerchantFee = _merchantFee.mul(rewardsRate);\\n        merchantFeeTotal = merchantFeeTotal.add(_merchantFee);\\n\\n        rewards[merchantStakingAddress] = rewards[merchantStakingAddress].add(rewardMerchantFee);\\n        if (excludedFromRewards[merchantStakingAddress]) {\\n            actual[merchantStakingAddress] = actual[merchantStakingAddress].add(_merchantFee);\\n        }\\n    }\\n\\n    function rewardsFromToken(uint256 _actualAmount, bool _deductTransferFee) public view returns (uint256) {\\n        require(_actualAmount <= ACTUAL_TOTAL, \\\"Amount must be less than supply\\\");\\n        if (!_deductTransferFee) {\\n            (uint256 rewardAmount, , , , ) = _getValues(_actualAmount);\\n            return rewardAmount;\\n        } else {\\n            (, uint256 rewardTransferAmount, , , ) = _getValues(_actualAmount);\\n            return rewardTransferAmount;\\n        }\\n    }\\n\\n    function tokenWithRewards(uint256 _rewardAmount) public view returns (uint256) {\\n        require(_rewardAmount <= rewardsTotal, \\\"Amount must be less than total rewards\\\");\\n        uint256 rewardsRate = _getRewardsRate();\\n        return _rewardAmount.div(rewardsRate);\\n    }\\n\\n    function _getValues(uint256 _actualAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint256 actualTransferAmount, uint256 actualFee) = _getActualValues(_actualAmount);\\n        uint256 rewardsRate = _getRewardsRate();\\n        (\\n            uint256 rewardAmount,\\n            uint256 rewardTransferAmount,\\n            uint256 rewardFee\\n        ) = _getRewardValues(_actualAmount, actualFee, rewardsRate);\\n\\n        return (rewardAmount, rewardTransferAmount, rewardFee, actualTransferAmount, actualFee);\\n    }\\n\\n    function _getActualValues(uint256 _actualAmount) private view returns (uint256, uint256) {\\n        uint256 actualFee = _getFee(_actualAmount);\\n        uint256 actualHolderFee = _getHolderFee(actualFee);\\n        uint256 actualTransferAmount = _actualAmount.sub(actualFee);\\n        return (actualTransferAmount, actualHolderFee);\\n    }\\n\\n    function _getRewardValues(\\n        uint256 _actualAmount,\\n        uint256 _actualHolderFee,\\n        uint256 _rewardsRate\\n    )\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 actualFee = _getFee(_actualAmount).mul(_rewardsRate);\\n        uint256 rewardAmount = _actualAmount.mul(_rewardsRate);\\n        uint256 rewardTransferAmount = rewardAmount.sub(actualFee);\\n        uint256 rewardFee = _actualHolderFee.mul(_rewardsRate);\\n        return (rewardAmount, rewardTransferAmount, rewardFee);\\n    }\\n\\n    function _getRewardsRate() private view returns (uint256) {\\n        (uint256 rewardsSupply, uint256 actualSupply) = _getCurrentSupply();\\n        return rewardsSupply.div(actualSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rewardsSupply = rewardsTotal;\\n        uint256 actualSupply = ACTUAL_TOTAL;\\n\\n        for (uint256 i = 0; i < rewardExcluded.length; i++) {\\n            if (rewards[rewardExcluded[i]] > rewardsSupply || actual[rewardExcluded[i]] > actualSupply) {\\n                return (rewardsTotal, ACTUAL_TOTAL);\\n            }\\n\\n            rewardsSupply = rewardsSupply.sub(rewards[rewardExcluded[i]]);\\n            actualSupply = actualSupply.sub(actual[rewardExcluded[i]]);\\n        }\\n\\n        if (rewardsSupply < rewardsTotal.div(ACTUAL_TOTAL)) {\\n            return (rewardsTotal, ACTUAL_TOTAL);\\n        }\\n\\n        return (rewardsSupply, actualSupply);\\n    }\\n\\n    function _getFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(taxPercentage).div(100);\\n    }\\n\\n    function _getHolderFee(uint256 _tax) private view returns (uint256) {\\n        return _tax.mul(holderTaxAlloc).div(totalTaxAlloc);\\n    }\\n\\n    function _getMarketingFee(uint256 _tax) private view returns (uint256) {\\n        return _tax.mul(marketingTaxAlloc).div(totalTaxAlloc);\\n    }\\n\\n    function _getLpFee(uint256 _tax) private view returns (uint256) {\\n        return _tax.mul(lpTaxAlloc).div(totalTaxAlloc);\\n    }\\n\\n    function _getMerchantFee(uint256 _tax) private view returns (uint256) {\\n        return _tax.mul(merchantTaxAlloc).div(totalTaxAlloc);\\n    }\\n\\n    function setTaxPercentage(uint256 _taxPercentage) external onlyOwner {\\n        require(_taxPercentage >= 1 && _taxPercentage <= 10, \\\"Value is outside of range 1-10\\\");\\n        taxPercentage = _taxPercentage;\\n    }\\n\\n    function setTaxAllocations(\\n        uint256 _holderTaxAlloc,\\n        uint256 _marketingTaxAlloc,\\n        uint256 _lpTaxAlloc,\\n        uint256 _merchantTaxAlloc\\n    ) external onlyOwner {\\n        totalTaxAlloc = _holderTaxAlloc.add(_marketingTaxAlloc).add(_lpTaxAlloc).add(_merchantTaxAlloc);\\n\\n        require(_holderTaxAlloc >= 5 && _holderTaxAlloc <= 10, \\\"_holderTaxAlloc is outside of range 5-10\\\");\\n        require(_lpTaxAlloc >= 5 && _lpTaxAlloc <= 10, \\\"_lpTaxAlloc is outside of range 5-10\\\");\\n        require(_marketingTaxAlloc <= 10, \\\"_marketingTaxAlloc is greater than 10\\\");\\n        require(_merchantTaxAlloc <= 10, \\\"_merchantTaxAlloc is greater than 10\\\");\\n\\n        holderTaxAlloc = _holderTaxAlloc;\\n        marketingTaxAlloc = _marketingTaxAlloc;\\n        lpTaxAlloc = _lpTaxAlloc;\\n        merchantTaxAlloc = _merchantTaxAlloc;\\n    }\\n\\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\\n        marketingAddress = _marketingAddress;\\n    }\\n\\n    function setLpStakingAddress(address _lpStakingAddress) external onlyOwner {\\n        lpStakingAddress = _lpStakingAddress;\\n    }\\n\\n    function setMerchantStakingAddress(address _merchantStakingAddress) external onlyOwner {\\n        merchantStakingAddress = _merchantStakingAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract WorldToken\",\"name\":\"_world\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addedLpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardUpdateCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorldPerBlockUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWorldPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setBlockRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRewardUpdateCycle\",\"type\":\"uint256\"}],\"name\":\"setBlockRewardUpdateCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerDay\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"world\",\"outputs\":[{\"internalType\":\"contract WorldToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WorldFarm","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bf494f02ee3fde1f20bee6242bce2d1ed0c15e470000000000000000000000000000000000000000000000000000000000b35390","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}