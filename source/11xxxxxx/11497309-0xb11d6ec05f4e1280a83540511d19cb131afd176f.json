{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Sikoba MVP Token Sale\r\n//\r\n// More information at https://tokens.sikoba.com/\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// SafeMath\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Owned\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    address public wallet;\r\n    address public newWallet;\r\n\r\n    mapping(address => bool) public isAdmin;\r\n\r\n    event OwnershipTransferProposed(address indexed _from, address indexed _to);\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    event WalletChangeProposed(address indexed _from, address indexed _to);\r\n    event WalletChanged(address indexed _from, address indexed _to);\r\n\r\n    event AdminChange(address indexed _admin, bool _status);\r\n\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n    modifier onlyAdmin { require(isAdmin[msg.sender]); _; }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        wallet = msg.sender;\r\n        isAdmin[owner] = true;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        require(_newOwner != address(0x0));\r\n        emit OwnershipTransferProposed(owner, _newOwner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeWallet(address _newWallet) public onlyOwner {\r\n        require(_newWallet != wallet);\r\n        require(_newWallet != address(0x0));\r\n        emit WalletChangeProposed(wallet, _newWallet);\r\n        newWallet = _newWallet;\r\n\r\n    }\r\n\r\n    function confirmWallet() public {\r\n        require(msg.sender == newWallet);\r\n        emit WalletChanged(wallet, newWallet);\r\n        wallet = newWallet;\r\n    }\r\n\r\n    function addAdmin(address _a) public onlyOwner {\r\n        require(isAdmin[_a] == false);\r\n        isAdmin[_a] = true;\r\n        emit AdminChange(_a, true);\r\n    }\r\n\r\n    function removeAdmin(address _a) public onlyOwner {\r\n        require(isAdmin[_a] == true);\r\n        isAdmin[_a] = false;\r\n        emit AdminChange(_a, false);\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC20Interface\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// ERC Token Standard #20\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Token is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint public tokensIssuedTotal;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping (address => uint)) allowed;\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return tokensIssuedTotal;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        require(_to != 0x0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        require(_to != 0x0);\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Price feed interface\r\n//\r\n// https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.4/interfaces/AggregatorV3Interface.sol\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n//\r\n// Token sale contract\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SkoSaleMVP is Owned {\r\n\r\n    using SafeMath for uint;\r\n    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n\r\n    // Utility variable\r\n\r\n    uint constant E18 = 10**18;\r\n    \r\n    // Contract address\r\n\r\n    address public CONTRACT = 0x6B40089e6CBa08696D9ae48F38e2b06fAFF81765;\r\n\r\n    // Summary  token data\r\n\r\n    uint public tokensSold = 0;\r\n    uint public etherReceived = 0;\r\n    \r\n\r\n    // Sale Open / Whitelisting\r\n\r\n    bool public isSaleOpen = false;\r\n    bool public isSalePublic = false;\r\n    mapping (address => bool) public whitelist;\r\n\r\n    // Token price\r\n\r\n    uint etherPrice;\r\n    uint public tokenPrice = 3000;  // Token price in US$ one-hundredth cents (3000 => 30 cents)\r\n    \r\n    // Minimum Contribution\r\n    \r\n    uint public minimumContribution = E18 / 20; // 0.05 ETH\r\n    \r\n    // Flash Bonus\r\n    \r\n    uint public flashBonus = 0;  // 5 corresponds to 5% (must be <= 10)\r\n    uint public flashStart = 0;\r\n    uint public flashEnd = 0;\r\n\r\n    // Event logging\r\n\r\n    event PriceFeedChange(address _a);\r\n    event Log(uint param0, uint _u);\r\n    event LogB(uint param0, bool _b);\r\n    event Whitelist(address _a, bool _b);\r\n    event Flash(uint _bonus, uint _start, uint _end);\r\n    event Buy(address _a, uint _ether, uint _tokens, uint _bonus, uint _contributed, uint _change, uint _etherPrice);\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Basic Functions\r\n\r\n    constructor() public {}\r\n\r\n    function () public payable {\r\n        buy();\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Owner Functions\r\n\r\n    // Set : priceFeed\r\n\r\n    function setPriceFeed(address _a) public onlyAdmin {\r\n        priceFeed = AggregatorV3Interface(_a);\r\n        emit PriceFeedChange(_a);\r\n    }\r\n\r\n    // Set : tokenPrice (must increase)\r\n\r\n    function setTokenPrice(uint _u) public onlyAdmin {\r\n        require(_u > tokenPrice);\r\n        tokenPrice = _u;\r\n        emit Log(1, _u);\r\n    }\r\n\r\n    // Set : minimumContribution\r\n    \r\n    function setMinimumContribution(uint _u) public onlyAdmin {\r\n        minimumContribution = _u;\r\n        emit Log(2, _u);\r\n    }\r\n\r\n    // Switch : isSaleOpen\r\n    \r\n    function setIsSaleOpen(bool _b) public onlyAdmin {\r\n        isSaleOpen = _b;\r\n        emit LogB(1, _b);\r\n    }\r\n\r\n    // Switch : isSalePublic\r\n\r\n    function setIsSalePublic(bool _b) public onlyAdmin {\r\n        isSalePublic = _b;\r\n        emit LogB(2, _b);\r\n    }\r\n\r\n    // WhiteList\r\n\r\n    function addToWhiteList(address _a) public onlyAdmin{\r\n        whitelist[_a] = true;\r\n        emit Whitelist(_a, true);\r\n    }\r\n\r\n    function removeFromWhiteList(address _a) public onlyAdmin{\r\n        whitelist[_a] = false;\r\n        emit Whitelist(_a, false);\r\n    }\r\n    \r\n    // Flash Sale\r\n    \r\n    function setFlash(uint _bonus, uint _start, uint _end) public onlyAdmin {\r\n        require(_bonus <= 10);\r\n        flashBonus = _bonus;\r\n        flashStart = _start;\r\n        flashEnd = _end;\r\n        emit Flash(_bonus, _start, _end);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Price Feed (https://docs.chain.link/docs/get-the-latest-price#config)\r\n\r\n    function updateEtherPrice() private {\r\n        (uint80 roundID, int answer, uint startedAt, uint updatedAt, uint80 answeredInRound) = priceFeed.latestRoundData();\r\n        require(answer > 0);\r\n        etherPrice = uint(answer)/1000000;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Information Functions\r\n    \r\n    function tokensForSale() public view returns(uint) {\r\n        return(ERC20Interface(CONTRACT).balanceOf(address(this)));\r\n    }\r\n    \r\n    function etherToTokens(uint _u) private view returns(uint tokens, uint bonus) {\r\n        tokens = _u.mul(100).mul(etherPrice) / tokenPrice ;\r\n        if (isFlashSale()) {\r\n            bonus = tokens.mul(flashBonus) / 100;\r\n        }\r\n    }\r\n    \r\n    function tokensToEther(uint _u) private view returns(uint) {\r\n        return(_u.mul(tokenPrice)/(etherPrice.mul(100)));\r\n    }\r\n    \r\n    function checkResult(uint _u) public view returns(uint tokens, uint bonus, uint change) {\r\n        updateEtherPrice();\r\n        (uint tokensRequested, uint bonusTokens) = etherToTokens(_u);\r\n        uint tokensAvailable = tokensForSale();\r\n        \r\n        if (_u < minimumContribution || tokensAvailable < E18) {\r\n            return(0, 0, _u);\r\n        }\r\n        else if (tokensAvailable < tokensRequested.add(bonusTokens)) {\r\n            uint adjTokensBase = tokensAvailable.mul(100)/(100+flashBonus);\r\n            uint adjTokensBonus = tokensAvailable - adjTokensBase;\r\n            uint etherNeeded = tokensToEther(adjTokensBase);\r\n            return(adjTokensBase, adjTokensBonus, _u.sub(etherNeeded));\r\n        \r\n        }\r\n        else {\r\n            return(tokensRequested, bonusTokens, 0);\r\n        }\r\n\r\n    }\r\n    \r\n    function isFlashSale() public view returns(bool) {\r\n        if (now >= flashStart && now <= flashEnd) return true;\r\n        return false;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // Buy tokens\r\n\r\n    function buy() public payable {\r\n        \r\n        require(isSaleOpen);\r\n        require(isSalePublic || whitelist[msg.sender]);\r\n        require(msg.value >= minimumContribution);\r\n        \r\n        // get amounts\r\n        (uint tokensToSend, uint bonusTokens, uint etherChange) = checkResult(msg.value);\r\n        require(tokensToSend > 0);\r\n        \r\n        // send funds to owner\r\n        uint etherContributed = msg.value.sub(etherChange);\r\n        require( owner.send(etherContributed) );\r\n        \r\n        // return change to sender, if any\r\n        if (etherChange > 0) {\r\n            require( msg.sender.send(etherChange) );\r\n        }\r\n        \r\n        // send tokens to sender\r\n        require(ERC20Interface(CONTRACT).transfer(msg.sender, tokensToSend.add(bonusTokens)));\r\n        \r\n        //\r\n        tokensSold += tokensToSend.add(bonusTokens);\r\n        etherReceived += etherContributed;\r\n        emit Buy(msg.sender, msg.value, tokensToSend, bonusTokens, etherContributed, etherChange, etherPrice);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    //\r\n    // ERC20 functions\r\n\r\n    /* Transfer out any ERC20 tokens held */\r\n\r\n    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(_token_address).transfer(owner, _amount);\r\n    }\r\n    \r\n    /* Withdraw balance (just in case) */\r\n    \r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setFlash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"setIsSaleOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSalePublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_u\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFlashSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"setIsSalePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_u\",\"type\":\"uint256\"}],\"name\":\"setMinimumContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flashStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_u\",\"type\":\"uint256\"}],\"name\":\"checkResult\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"change\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"PriceFeedChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_u\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"param0\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"LogB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_b\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_contributed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_change\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherPrice\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WalletChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_admin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AdminChange\",\"type\":\"event\"}]","ContractName":"SkoSaleMVP","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3cacc753481282d3e6bae7975913a7b7c62d1debd5459013623d024e400fc3ed"}]}