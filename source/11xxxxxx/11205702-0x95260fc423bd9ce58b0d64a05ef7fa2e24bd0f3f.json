{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ninterface IUNIv2 {\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) \r\n    external \r\n    payable \r\n    returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract BFD is IERC20, Context {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    IUNIv2 uniswap = IUNIv2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Factory uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n\r\n    string public _symbol;\r\n    string public _name;\r\n    uint8 public _decimals;\r\n    uint _totalSupply;\r\n    \r\n    // For presale\r\n    uint public tokensBought;\r\n    bool public isStopped = false;\r\n    bool public canRefund = false;\r\n    bool public devClaimed = false;\r\n    bool public moonMissionStarted = false;\r\n    uint256 public canRefundTime;\r\n    uint256 public tokensForUniswap = 3500 ether;\r\n    uint256 public tokensForAidrop = 1000 ether;\r\n    uint256 public ethSent;\r\n    uint256 public ethSentWhitelist;\r\n    address payable owner;\r\n    uint256 ethAmount = 1 ether;\r\n    uint256 tokensPerETH = 128.5 ether; \r\n    uint256 public liquidityUnlock;\r\n    uint256 public airdropUnlock;\r\n    bool public transferPaused;\r\n    \r\n    mapping(address => uint) bought;\r\n    mapping(address => bool) whitelisted;\r\n\r\n    // For burning\r\n    uint public totalBurnedFromSupply;\r\n    uint public totalBurned;\r\n    uint public lastBurnTime;\r\n    uint day = 86400; // 86400 seconds in one day\r\n    uint burnRate = 1000; // 1000% burn per 24 hours, 20.8% per hour, 0,01156 every second.\r\n    uint minimumSupply = 666 ether;\r\n    bool public isMinimumSupplyReached = false;\r\n    uint public maxBurn = 10; \r\n\r\n    struct User {\r\n        uint balance;\r\n        mapping (address => uint) allowed;\r\n        uint earned;\r\n    }\r\n\r\n    mapping (address => User) internal user;\r\n\r\n    address public pool;\r\n   \r\n\r\n    modifier onlyWhenRunning {\r\n        require(!isStopped);\r\n        _;\r\n    }\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n    function setPool(address _pool) external onlyOwner {\r\n        pool = _pool;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender; \r\n        _symbol = \"BTF\";\r\n        _name = \"BurnThe.finance\";\r\n        _decimals = 18;\r\n        _totalSupply = 10000 ether;\r\n        user[address(this)].balance = _totalSupply;\r\n        liquidityUnlock = block.timestamp.add(180 days);\r\n        airdropUnlock = block.timestamp.add(1 days);\r\n        transferPaused = true;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n    \r\n  event PoolBurn(address user, uint burned, uint newSupply, uint newPool);\r\n\r\n    \r\n    receive() external payable {\r\n        \r\n        buyTokens();\r\n    }\r\n        \r\n    function airdrop(address[] memory recipients, uint amount) external onlyOwner {\r\n        require(block.timestamp >= airdropUnlock);\r\n        for (uint i = 0; i < recipients.length; i++){\r\n            if (balanceOf(address(this)) >= amount)\r\n            user[address(this)].balance = user[address(this)].balance.sub(amount);\r\n            user[recipients[i]].balance = user[recipients[i]].balance.add(amount);\r\n            Transfer(address(this), recipients[i], amount);\r\n        }\r\n    }\r\n    \r\n    // BURN FUNCTIONS \r\n    function burnPool() public {\r\n        //Block smart contracts \r\n        require(msg.sender == tx.origin);\r\n        require(pool != address(0));\r\n        require(balanceOf(pool) > 0);\r\n        IUniswapV2Pair(pool).sync();\r\n        uint _burnAmount = getBurnAmount();\r\n        address _addr = msg.sender;\r\n        require(_burnAmount >= 10 ether, \"Burn amount too low\");\r\n        // If the burn amount is more than 10% from the pool, set the burn amount to 10%\r\n        if (_burnAmount > balanceOf(pool).mul(maxBurn).div(100))\r\n             _burnAmount = balanceOf(pool).mul(maxBurn).div(100);\r\n       \r\n        uint _userReward = _burnAmount.mul(25).div(100);\r\n        // if the minimum supply is reached the burning % from the pool -\r\n        // will be equal to the caller reward so far 1 day 250% instead of 1000% \r\n        if (isMinimumSupplyReached == true){\r\n            _burnAmount = _userReward;\r\n        }\r\n        uint _finalBurn = _burnAmount.sub(_userReward);\r\n        \r\n        // Doesn't allow the supply to go below minimumSupply\r\n        if(_totalSupply.sub(_finalBurn) < minimumSupply){\r\n            _finalBurn = _totalSupply.sub(minimumSupply);\r\n            _totalSupply = _totalSupply.sub(_finalBurn);\r\n             totalBurnedFromSupply = totalBurnedFromSupply.add(_finalBurn); \r\n             _burnAmount = _finalBurn.add(_userReward);\r\n            isMinimumSupplyReached = true;\r\n        }\r\n        // Not subtracting from the totalSupply if the minimumSupply is reached.\r\n        if (isMinimumSupplyReached == false){\r\n             _totalSupply = _totalSupply.sub(_finalBurn);\r\n             totalBurnedFromSupply = totalBurnedFromSupply.add(_finalBurn); \r\n        }\r\n        \r\n        user[pool].balance = user[pool].balance.sub(_burnAmount);\r\n        totalBurned = totalBurned.add(_burnAmount);\r\n       \r\n        user[_addr].balance = user[_addr].balance.add(_userReward);\r\n        user[_addr].earned = user[_addr].earned.add(_userReward);\r\n        \r\n        // Reset the burn amount \r\n        lastBurnTime = block.timestamp;\r\n     \r\n        IUniswapV2Pair(pool).sync();\r\n\r\n        emit PoolBurn(_addr, _burnAmount, _totalSupply, balanceOf(pool));\r\n        emit Transfer(pool, address(0), _finalBurn);\r\n        emit Transfer(pool, _addr, _userReward);\r\n    }\r\n    \r\n     function getBurnAmount() public view returns (uint) {\r\n        uint _time = block.timestamp - lastBurnTime;\r\n        uint _poolAmount = balanceOf(pool);\r\n        uint _burnAmount = (_poolAmount * burnRate * _time) / (day * 100);\r\n        return _burnAmount;\r\n    }\r\n    \r\n    function pauseUnpausePresale(bool _isStopped) external onlyOwner{\r\n        isStopped = _isStopped;\r\n    }\r\n    \r\n        \r\n    function setUniswapPool() external onlyOwner{\r\n        require(pool == address(0), \"the pool already created\");\r\n        pool = uniswapFactory.createPair(address(this), uniswap.WETH());\r\n    }\r\n    \r\n    function claimDevFee() external onlyOwner {\r\n       require(!devClaimed);\r\n       uint256 amountETH = address(this).balance.mul(20).div(100); \r\n       uint256 amountBTF = _totalSupply.mul(5).div(100); // 500 tokens \r\n       uint256 marketingBTF = _totalSupply.mul(5).div(100); // 500 tokens \r\n\r\n       owner.transfer(amountETH);\r\n       user[owner].balance = user[owner].balance.add(amountBTF.add(marketingBTF));\r\n       user[address(this)].balance = user[address(this)].balance.sub(amountBTF.add(marketingBTF));\r\n       devClaimed = true;\r\n       emit Transfer(address(this), owner, amountBTF.add(marketingBTF));\r\n    }\r\n    function enableRefundAllFucDDEGENS() external onlyOwner {\r\n        canRefund = true;\r\n        canRefundTime = block.timestamp + 2 minutes; \r\n    } \r\n    \r\n    function changeMaxBurn(uint256 n) external onlyOwner{\r\n        maxBurn = n;\r\n    }\r\n    \r\n    function refundCaller() external {\r\n        require(canRefund == true);\r\n        require(block.timestamp >= canRefundTime);\r\n        require(address(this).balance >= ethAmount);\r\n        if (bought[msg.sender] == ethAmount){\r\n            msg.sender.transfer(ethAmount);\r\n            user[msg.sender].balance = user[msg.sender].balance.sub(ethAmount);\r\n             bought[msg.sender] = 0;\r\n        }\r\n    }\r\n    \r\n\r\n    function buyTokens() onlyWhenRunning public payable {\r\n        require(msg.value == ethAmount, \"You did not sent exactly 1 ETH\");\r\n        require(ethSent < 30 ether, \"Hard cap reached\");\r\n        require(bought[msg.sender] == 0 , \"You already bought\");\r\n        require(!canRefund);\r\n        require(user[address(this)].balance >= tokensPerETH);\r\n        tokensBought = tokensBought.add(tokensPerETH);\r\n        ethSent = ethSent.add(ethAmount);\r\n        bought[msg.sender] = bought[msg.sender].add(ethAmount);\r\n        user[msg.sender].balance = user[msg.sender].balance.add(tokensPerETH);\r\n        user[address(this)].balance = user[address(this)].balance.sub(tokensPerETH);\r\n        emit Transfer(address(this), msg.sender, tokensPerETH);\r\n    }\r\n    \r\n      function buyWhitelist() onlyWhenRunning public payable {\r\n        require(whitelisted[msg.sender] == true, \"You are not whitelisted\");\r\n        require(msg.value == ethAmount, \"You did not sent exactly 1 ETH\");\r\n        require(ethSentWhitelist < 5 ether, \"Whitelist hard cap reached\");\r\n        require(bought[msg.sender] == 0 , \"You already bought\");\r\n        require(!canRefund);\r\n        require(user[address(this)].balance >= tokensPerETH);\r\n        tokensBought = tokensBought.add(tokensPerETH);\r\n        ethSentWhitelist = ethSentWhitelist.add(ethAmount);\r\n        bought[msg.sender] = bought[msg.sender].add(ethAmount);\r\n        user[msg.sender].balance = user[msg.sender].balance.add(tokensPerETH);\r\n        user[address(this)].balance = user[address(this)].balance.sub(tokensPerETH);\r\n        emit Transfer(address(this), msg.sender, tokensPerETH);\r\n    }\r\n    \r\n    function earned(address addr) public view returns(uint256){\r\n        return user[addr].earned;\r\n    }\r\n    \r\n    function addToWhitelist(address addr) external onlyOwner {\r\n        whitelisted[addr] = true;\r\n    }\r\n    \r\n    function addBatchWhitelist(address[] memory addresses) external onlyOwner {\r\n        for (uint256 i = 0; i < addresses.length; i++){\r\n            whitelisted[addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function isUserBoughtInPresale(address _user) external view returns(bool){\r\n        if (bought[_user] == ethAmount)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    \r\n      function unlockLiquidity(address tokenAddress, uint256 tokenAmount) public onlyOwner  {\r\n        require(block.timestamp >= liquidityUnlock);\r\n        IERC20(tokenAddress).transfer(owner, tokenAmount);\r\n    }\r\n    \r\n    \r\n    function burnMissionStart() external onlyOwner {\r\n        require(!moonMissionStarted);\r\n        uint256 ETH = address(this).balance;\r\n        uint tokensToBurn = balanceOf(address(this)).sub(tokensForUniswap).sub(tokensForAidrop);\r\n        this.approve(address(uniswap), tokensForUniswap);\r\n        transferPaused = false;\r\n        uniswap.addLiquidityETH\r\n        { value: ETH }\r\n        (\r\n            address(this),\r\n            tokensForUniswap,\r\n            tokensForUniswap,\r\n            ETH,\r\n            address(this),\r\n            block.timestamp + 5 minutes\r\n        );\r\n        if (tokensToBurn > 0) {\r\n         user[address(this)].balance = user[address(this)].balance.sub(tokensToBurn);\r\n          emit Transfer(address(this), address(0), tokensToBurn);\r\n        }\r\n        if(!isStopped)\r\n            isStopped = true;\r\n            \r\n        moonMissionStarted = true;\r\n        lastBurnTime = block.timestamp;\r\n   }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return user[account].balance;\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return user[_owner].allowed[spender];\r\n    }\r\n\r\n  \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), user[sender].allowed[_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, user[_msgSender()].allowed[spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, user[_msgSender()].allowed[spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        // Preventing someone to fuck up the liquidity \r\n        require(!transferPaused || msg.sender == owner, \"Transfer is paused\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        user[sender].balance = user[sender].balance.sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        user[recipient].balance = user[recipient].balance.add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        \r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) internal virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        user[_owner].allowed[spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPool\",\"type\":\"uint256\"}],\"name\":\"PoolBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"addBatchWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMissionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRefundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"changeMaxBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRefundAllFucDDEGENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethSentWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinimumSupplyReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserBoughtInPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonMissionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStopped\",\"type\":\"bool\"}],\"name\":\"pauseUnpausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUniswapPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForAidrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnedFromSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unlockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BFD","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9ffbf54e8fe25076e58b1993bd2fabd8b55a60f723f7aba0de11a416bebe694"}]}