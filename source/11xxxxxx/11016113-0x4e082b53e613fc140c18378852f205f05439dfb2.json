{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/CMRewards.sol\r\n\r\n// Expirmental! v0.6.1\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n// CMRewards is a contract for calculating rewards\r\n// based the amount a user has staked.\r\ncontract CMRewards {\r\n    using SafeMath for uint256;\r\n\r\n    // rewards rate = rewardRate / rewardMin\r\n    uint256 public rewardMin    =       1e10; // wont calculate rewards on smaller.\r\n    uint256 public rewardRate   =       5;    // 5/1e10 ~ .001 per share\r\n\r\n    mapping(address => UserStake) public users;\r\n\r\n    /** @dev\r\n     * This keeps track of a users stake for calculating payouts and\r\n     * rewards\r\n    */\r\n    struct UserStake {\r\n        uint256 staked;\r\n        uint256 lastUpdated;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    /** @dev adds pending rewards to reward debt. */\r\n    function _updateUser(address u) internal {\r\n        if (users[u].staked > rewardMin) {\r\n            users[u].rewardDebt = users[u].rewardDebt.add(_pendingRewards(u));\r\n        }\r\n        users[u].lastUpdated = block.number;\r\n    }\r\n\r\n    /** @dev calculates a users rewards that accumilated since the last update*/\r\n    function _pendingRewards(address u) internal view returns (uint256) {\r\n        uint256 _duration = block.number.sub(users[u].lastUpdated);\r\n        uint256 _rewards = rewardRate.mul(users[u].staked).div(rewardMin);\r\n        return _duration.mul(_rewards);\r\n    }\r\n\r\n    /** @dev adds staked amount to the user safely. (Updates user before) */\r\n    function _userAddStake(address _addr, uint256 _value) internal {\r\n        require(_value > 0, \"staked value must be greated than 0\");\r\n        _updateUser(_addr);\r\n        users[_addr].staked = users[_addr].staked.add(_value);\r\n    }\r\n\r\n    /** @dev safely removes from a users stake. (Updates user before) */\r\n    function _usersRemoveStake(address _addr, uint256 _value) internal {\r\n        require(users[_addr].staked >= _value, \"Cannot remove more than the user has staked\");\r\n        _updateUser(_addr);\r\n        users[_addr].staked = users[_addr].staked.sub(_value);\r\n    }\r\n}\r\n\r\n// File: contracts/DiFyDAIWallet.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\n\r\n\r\n\r\ninterface IYDAI {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function getPricePerFullShare() external view returns(uint256);\r\n}\r\n\r\ncontract DiFyDAIWallet is Ownable, CMRewards {\r\n    using SafeMath for uint256;\r\n    uint256 constant BP = 10**12;\r\n\r\n    IERC20 yfiii;\r\n    IERC20 dai;\r\n    IYDAI ydai;\r\n\r\n    uint256 public adminFee = 5;              // 0.5%\r\n    uint256 constant public adminFeeMax = 150; // 15%\r\n    uint256 constant adminFeeFull = 1000;\r\n\r\n    constructor(address daiAddress, address ydaiAddress, address yfiiiAddress) public {\r\n        dai = IERC20(daiAddress);\r\n        ydai = IYDAI(ydaiAddress);\r\n        yfiii = IERC20(yfiiiAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev deposit dai and stake the recieved ydai for rewards\r\n    */\r\n    function deposit(uint256 _amount) public {\r\n        // transfer dai\r\n        require(dai.transferFrom(msg.sender, address(this), _amount), \"deposit failed\");\r\n\r\n        // starting ydai balance:\r\n        uint256 startBal = ydai.balanceOf(address(this));\r\n        // invest with ydai\r\n        ydai.deposit(_amount);\r\n        // endind ydai balance:\r\n        uint256 endBal = ydai.balanceOf(address(this));\r\n\r\n        // update the user\r\n        _userAddStake(msg.sender, endBal.sub(startBal));\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw msg.sender's staked ydai from yearn, take admin fee and\r\n     * and send dai the dai to msg.sender\r\n    */\r\n    function withdraw(uint256 _amount) public {\r\n        require(_amount <= users[msg.sender].staked, \"Cannot withdraw more than your balance\");\r\n        require(_amount > 0, \"Cannot withdraw 0\");\r\n\r\n        // update user and subtract withdrawed amount\r\n        _usersRemoveStake(msg.sender, _amount);\r\n\r\n        // withdraw from ydai\r\n        uint256 startBal = dai.balanceOf(address(this));\r\n        ydai.withdraw(_amount);\r\n        uint256 endBal = dai.balanceOf(address(this));\r\n\r\n        // send to user\r\n        uint256 _avaliable = endBal.sub(startBal);\r\n        uint256 _fee = _avaliable.mul(adminFee).div(adminFeeFull);\r\n\r\n        require(dai.transfer(msg.sender, _avaliable.sub(_fee)), \"withdraw failed\");\r\n        //dai.transfer(owner(), _fee);\r\n    }\r\n\r\n    /**\r\n     * @dev claim reward debt\r\n    */\r\n    function claim() public {\r\n        // update the user – calculating any rewards\r\n        _updateUser(msg.sender);\r\n\r\n        // transfer the rewards\r\n        uint256 _rewards = users[msg.sender].rewardDebt;\r\n        users[msg.sender].rewardDebt = 0;\r\n\r\n        // transfer\r\n        require(yfiii.transfer(msg.sender, _rewards), \"transfer failed\");\r\n    }\r\n\r\n    // Helper methods:\r\n\r\n    /**\r\n     * @dev see a users total rewards. reward_debt + rewards_pending\r\n    */\r\n    function userRewards(address u) public view returns(uint256) {\r\n        return users[u].rewardDebt.add(_pendingRewards(u));\r\n    }\r\n\r\n    /**\r\n     * @dev see a users current amount of ydai staked. Alias for users[u].staked\r\n    */\r\n    function userStake(address u) public view returns(uint256) {\r\n        return users[u].staked;\r\n    }\r\n\r\n    /**\r\n     * @dev force update yourself to lock in rewards. (This shouldnt need to be called).\r\n    */\r\n    function updateSelf() public {\r\n        _updateUser(msg.sender);\r\n    }\r\n\r\n    /**\r\n     *  @dev total DAI balance of this contract\r\n    */\r\n    function balanceDAI() public view returns(uint256) {\r\n        return dai.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     *  @dev total YDAI balance\r\n    */\r\n    function balanceYDAI() public view returns(uint256) {\r\n        return ydai.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw ETH token to a given address.\r\n    */\r\n    function safeWithdrawETH(address payable to, uint256 amount) public onlyOwner {\r\n        to.transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev dai balance\r\n    */\r\n    function safeWithdrawDAI(address payable to, uint256 amount) public onlyOwner {\r\n        dai.transfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw an erc20 token to a given address.\r\n     * cannot withdraw yDAI\r\n    */\r\n    function safeWithdrawERC20(address token, address to, uint amount) public onlyOwner {\r\n        // This method is only for removing tokens that were accidentally sent here.\r\n        // Therefore, owner cannot remove ydai, as these are held on behalf of the users.\r\n        require(token != address(ydai), \"cannot withdraw ydai\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev set reward rate. reward rate = rate / reward_min\r\n    */\r\n    function setRewardRate(uint _newRate) public onlyOwner {\r\n        rewardRate = _newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev sets minimum stake to recieve rewards\r\n    */\r\n    function setRewardMin(uint _newMin) public onlyOwner {\r\n        rewardMin = _newMin;\r\n    }\r\n\r\n    /**\r\n     * @dev sets new admin fee. Must be smaller than adminFeeMax\r\n    */\r\n    function setAdminFee(uint256 _newFee) public onlyOwner {\r\n        require(_newFee < adminFeeMax, \"fee must be less than max fee\");\r\n        adminFee = _newFee;\r\n    }\r\n\r\n    function approve() public onlyOwner {\r\n        dai.approve(address(ydai), 2**256 - 1);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ydaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yfiiiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceYDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"setRewardMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DiFyDAIWallet","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000acd43e627e64355f1861cec6d3a6688b31a6f9520000000000000000000000004be40bc9681d0a7c24a99b4c92f85b9053fc2a45","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f8886f85276a2969233c2230d6fb50325f990898a8e81c34e48e1b4b33072328"}]}