{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CollateralFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {SafeDecimalMath} from \\\"./SafeDecimalMath.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./lib/FixedPoint.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./interfaces/IConjure.sol\\\";\\r\\n\\r\\ncontract EtherCollateral is ReentrancyGuard, Owned, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeDecimalMath for uint256;\\r\\n\\r\\n\\r\\n    // ========== CONSTANTS ==========\\r\\n    uint256 internal constant ONE_THOUSAND = 1e18 * 1000;\\r\\n    uint256 internal constant ONE_HUNDRED = 1e18 * 100;\\r\\n\\r\\n    uint256 internal constant ACCOUNT_LOAN_LIMIT_CAP = 1000;\\r\\n\\r\\n    // ========== SETTER STATE VARIABLES ==========\\r\\n\\r\\n    // The ratio of Collateral to synths issued\\r\\n    uint256 public collateralizationRatio = SafeDecimalMath.unit() * 120;\\r\\n\\r\\n    // Minting fee for issuing the synths. Default 50 bips.\\r\\n    uint256 public issueFeeRate;\\r\\n\\r\\n    // Minimum amount of ETH to create loan preventing griefing and gas consumption. Min 0.05 ETH\\r\\n    uint256 public minLoanCollateralSize = SafeDecimalMath.unit() / 20;\\r\\n\\r\\n    // Maximum number of loans an account can create\\r\\n    uint256 public accountLoanLimit = 50;\\r\\n\\r\\n    // Time when remaining loans can be liquidated\\r\\n    uint256 public liquidationDeadline;\\r\\n\\r\\n    // Liquidation ratio when loans can be liquidated\\r\\n    uint256 public liquidationRatio = (120 * SafeDecimalMath.unit()) / 100; // 1.2 ratio\\r\\n\\r\\n    // Liquidation penalty when loans are liquidated. default 10%\\r\\n    uint256 public liquidationPenalty = SafeDecimalMath.unit() / 10;\\r\\n\\r\\n    // ========== STATE VARIABLES ==========\\r\\n\\r\\n    // The total number of synths issued by the collateral in this contract\\r\\n    uint256 public totalIssuedSynths;\\r\\n\\r\\n    // Total number of loans ever created\\r\\n    uint256 public totalLoansCreated;\\r\\n\\r\\n    // Total number of open loans\\r\\n    uint256 public totalOpenLoanCount;\\r\\n\\r\\n    // Synth loan storage struct\\r\\n    struct SynthLoanStruct {\\r\\n        //  Acccount that created the loan\\r\\n        address payable account;\\r\\n        //  Amount (in collateral token ) that they deposited\\r\\n        uint256 collateralAmount;\\r\\n        //  Amount (in synths) that they issued to borrow\\r\\n        uint256 loanAmount;\\r\\n        // Minting Fee\\r\\n        uint256 mintingFee;\\r\\n        // When the loan was created\\r\\n        uint256 timeCreated;\\r\\n        // ID for the loan\\r\\n        uint256 loanID;\\r\\n        // When the loan was paidback (closed)\\r\\n        uint256 timeClosed;\\r\\n    }\\r\\n\\r\\n    // Users Loans by address\\r\\n    mapping(address => SynthLoanStruct[]) public accountsSynthLoans;\\r\\n\\r\\n    // Account Open Loan Counter\\r\\n    mapping(address => uint256) public accountOpenLoanCounter;\\r\\n\\r\\n    address payable public arbasset;\\r\\n\\r\\n    address public factoryaddress;\\r\\n\\r\\n    // ========== CONSTRUCTOR ==========\\r\\n    constructor(address payable _asset, address _owner, address _factoryaddress, uint256 _mintingfeerate ) Owned(_owner) public  {\\r\\n        arbasset = _asset;\\r\\n        factoryaddress = _factoryaddress;\\r\\n        issueFeeRate = _mintingfeerate;\\r\\n\\r\\n        // max 2.5% fee for minting\\r\\n        require(_mintingfeerate <= 250);\\r\\n    }\\r\\n\\r\\n    // ========== SETTERS ==========\\r\\n\\r\\n    function setCollateralizationRatio(uint256 ratio) external onlyOwner {\\r\\n        require(ratio <= ONE_THOUSAND, \\\"Too high\\\");\\r\\n        require(ratio >= ONE_HUNDRED, \\\"Too low\\\");\\r\\n        collateralizationRatio = ratio;\\r\\n        emit CollateralizationRatioUpdated(ratio);\\r\\n    }\\r\\n\\r\\n    function setIssueFeeRate(uint256 _issueFeeRate) external onlyOwner {\\r\\n        // max 2.5% fee for minting\\r\\n        require(_issueFeeRate <= 250);\\r\\n        issueFeeRate = _issueFeeRate;\\r\\n        emit IssueFeeRateUpdated(issueFeeRate);\\r\\n    }\\r\\n\\r\\n    function setMinLoanCollateralSize(uint256 _minLoanCollateralSize) external onlyOwner {\\r\\n        minLoanCollateralSize = _minLoanCollateralSize;\\r\\n        emit MinLoanCollateralSizeUpdated(minLoanCollateralSize);\\r\\n    }\\r\\n\\r\\n    function setAccountLoanLimit(uint256 _loanLimit) external onlyOwner {\\r\\n        require(_loanLimit < ACCOUNT_LOAN_LIMIT_CAP, \\\"Owner cannot set higher than ACCOUNT_LOAN_LIMIT_CAP\\\");\\r\\n        accountLoanLimit = _loanLimit;\\r\\n        emit AccountLoanLimitUpdated(accountLoanLimit);\\r\\n    }\\r\\n\\r\\n    function setLiquidationRatio(uint256 _liquidationRatio) external onlyOwner {\\r\\n        require(_liquidationRatio > SafeDecimalMath.unit(), \\\"Ratio less than 100%\\\");\\r\\n        liquidationRatio = _liquidationRatio;\\r\\n        emit LiquidationRatioUpdated(liquidationRatio);\\r\\n    }\\r\\n\\r\\n    function getContractInfo()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint256 _collateralizationRatio,\\r\\n        uint256 _issuanceRatio,\\r\\n        uint256 _issueFeeRate,\\r\\n        uint256 _minLoanCollateralSize,\\r\\n        uint256 _totalIssuedSynths,\\r\\n        uint256 _totalLoansCreated,\\r\\n        uint256 _totalOpenLoanCount,\\r\\n        uint256 _ethBalance,\\r\\n        uint256 _liquidationDeadline\\r\\n    )\\r\\n    {\\r\\n        _collateralizationRatio = collateralizationRatio;\\r\\n        _issuanceRatio = issuanceRatio();\\r\\n        _issueFeeRate = issueFeeRate;\\r\\n        _minLoanCollateralSize = minLoanCollateralSize;\\r\\n        _totalIssuedSynths = totalIssuedSynths;\\r\\n        _totalLoansCreated = totalLoansCreated;\\r\\n        _totalOpenLoanCount = totalOpenLoanCount;\\r\\n        _ethBalance = address(this).balance;\\r\\n        _liquidationDeadline = liquidationDeadline;\\r\\n    }\\r\\n\\r\\n    // returns value of 100 / collateralizationRatio.\\r\\n    // e.g. 100/150 = 0.6666666667\\r\\n    function issuanceRatio() public view returns (uint256) {\\r\\n        // this rounds so you get slightly more rather than slightly less\\r\\n        return ONE_HUNDRED.divideDecimalRound(collateralizationRatio);\\r\\n    }\\r\\n\\r\\n    function loanAmountFromCollateral(uint256 collateralAmount) public returns (uint256) {\\r\\n        uint currentprice = IConjure(arbasset).getPrice();\\r\\n        uint currentethusdprice = uint(IConjure(arbasset).getLatestETHUSDPrice());\\r\\n\\r\\n        return collateralAmount.multiplyDecimal(issuanceRatio()).multiplyDecimal(currentethusdprice).divideDecimal(currentprice);\\r\\n    }\\r\\n\\r\\n    function collateralAmountForLoan(uint256 loanAmount) public returns (uint256) {\\r\\n        uint currentprice = IConjure(arbasset).getPrice();\\r\\n        uint currentethusdprice = uint(IConjure(arbasset).getLatestETHUSDPrice());\\r\\n\\r\\n        return\\r\\n        loanAmount\\r\\n        .multiplyDecimal(collateralizationRatio.divideDecimalRound(currentethusdprice).multiplyDecimal(currentprice))\\r\\n        .divideDecimalRound(ONE_HUNDRED);\\r\\n    }\\r\\n\\r\\n    function getMintingFee(address _account, uint256 _loanID) external view returns (uint256) {\\r\\n        // Get the loan from storage\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\\r\\n        return synthLoan.mintingFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * r = target issuance ratio\\r\\n     * D = debt balance\\r\\n     * V = Collateral\\r\\n     * P = liquidation penalty\\r\\n     * Calculates amount of synths = (D - V * r) / (1 - (1 + P) * r)\\r\\n     */\\r\\n    function calculateAmountToLiquidate(uint debtBalance, uint collateral) public view returns (uint) {\\r\\n        uint unit = SafeDecimalMath.unit();\\r\\n        uint ratio = liquidationRatio;\\r\\n\\r\\n        uint dividend = debtBalance.sub(collateral.divideDecimal(ratio));\\r\\n        uint divisor = unit.sub(unit.add(liquidationPenalty).divideDecimal(ratio));\\r\\n\\r\\n        return dividend.divideDecimal(divisor);\\r\\n    }\\r\\n\\r\\n    function openLoanIDsByAccount(address _account) external view returns (uint256[] memory) {\\r\\n        SynthLoanStruct[] memory synthLoans = accountsSynthLoans[_account];\\r\\n\\r\\n        uint256[] memory _openLoanIDs = new uint256[](synthLoans.length);\\r\\n        uint256 _counter = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < synthLoans.length; i++) {\\r\\n            if (synthLoans[i].timeClosed == 0) {\\r\\n                _openLoanIDs[_counter] = synthLoans[i].loanID;\\r\\n                _counter++;\\r\\n            }\\r\\n        }\\r\\n        // Create the fixed size array to return\\r\\n        uint256[] memory _result = new uint256[](_counter);\\r\\n\\r\\n        // Copy loanIDs from dynamic array to fixed array\\r\\n        for (uint256 j = 0; j < _counter; j++) {\\r\\n            _result[j] = _openLoanIDs[j];\\r\\n        }\\r\\n        // Return an array with list of open Loan IDs\\r\\n        return _result;\\r\\n    }\\r\\n\\r\\n    function getLoan(address _account, uint256 _loanID)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        address account,\\r\\n        uint256 collateralAmount,\\r\\n        uint256 loanAmount,\\r\\n        uint256 timeCreated,\\r\\n        uint256 loanID,\\r\\n        uint256 timeClosed,\\r\\n        uint256 totalFees\\r\\n    )\\r\\n    {\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\\r\\n        account = synthLoan.account;\\r\\n        collateralAmount = synthLoan.collateralAmount;\\r\\n        loanAmount = synthLoan.loanAmount;\\r\\n        timeCreated = synthLoan.timeCreated;\\r\\n        loanID = synthLoan.loanID;\\r\\n        timeClosed = synthLoan.timeClosed;\\r\\n        totalFees = synthLoan.mintingFee;\\r\\n    }\\r\\n\\r\\n    function getLoanCollateralRatio(address _account, uint256 _loanID) external view returns (uint256 loanCollateralRatio) {\\r\\n        // Get the loan from storage\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_account, _loanID);\\r\\n\\r\\n        (loanCollateralRatio,  ) = _loanCollateralRatio(synthLoan);\\r\\n    }\\r\\n\\r\\n    function _loanCollateralRatio(SynthLoanStruct memory _loan)\\r\\n    internal\\r\\n    view\\r\\n    returns (\\r\\n        uint256 loanCollateralRatio,\\r\\n        uint256 collateralValue\\r\\n    )\\r\\n    {\\r\\n        uint256 loanAmountWithAccruedInterest = _loan.loanAmount.multiplyDecimal(IConjure(arbasset).getLatestPrice());\\r\\n\\r\\n        collateralValue = _loan.collateralAmount.multiplyDecimal(uint(IConjure(arbasset).getLatestETHUSDPrice()));\\r\\n        loanCollateralRatio = collateralValue.divideDecimal(loanAmountWithAccruedInterest);\\r\\n    }\\r\\n\\r\\n\\r\\n    // ========== PUBLIC FUNCTIONS ==========\\r\\n\\r\\n    function openLoan(uint256 _loanAmount)\\r\\n    external\\r\\n    payable\\r\\n    notPaused\\r\\n    nonReentrant\\r\\n    returns (uint256 loanID)\\r\\n    {\\r\\n\\r\\n        // Require ETH sent to be greater than minLoanCollateralSize\\r\\n        require(\\r\\n            msg.value >= minLoanCollateralSize,\\r\\n            \\\"Not enough ETH to create this loan. Please see the minLoanCollateralSize\\\"\\r\\n        );\\r\\n\\r\\n        // Each account is limited to creating 50 (accountLoanLimit) loans\\r\\n        require(accountsSynthLoans[msg.sender].length < accountLoanLimit, \\\"Each account is limited to 50 loans\\\");\\r\\n\\r\\n        // Calculate issuance amount based on issuance ratio\\r\\n        uint256 maxLoanAmount = loanAmountFromCollateral(msg.value);\\r\\n\\r\\n        // Require requested _loanAmount to be less than maxLoanAmount\\r\\n        // Issuance ratio caps collateral to loan value at 120%\\r\\n        require(_loanAmount <= maxLoanAmount, \\\"Loan amount exceeds max borrowing power\\\");\\r\\n\\r\\n        uint256 ethforloan = collateralAmountForLoan(_loanAmount);\\r\\n        uint256 mintingFee = _calculateMintingFee(msg.value);\\r\\n        require(msg.value >= ethforloan + mintingFee);\\r\\n\\r\\n        // Get a Loan ID\\r\\n        loanID = _incrementTotalLoansCounter();\\r\\n\\r\\n        // Create Loan storage object\\r\\n        SynthLoanStruct memory synthLoan = SynthLoanStruct({\\r\\n        account: msg.sender,\\r\\n        collateralAmount: msg.value - mintingFee,\\r\\n        loanAmount: _loanAmount,\\r\\n        mintingFee: mintingFee,\\r\\n        timeCreated: block.timestamp,\\r\\n        loanID: loanID,\\r\\n        timeClosed: 0\\r\\n        });\\r\\n\\r\\n        // Record loan in mapping to account in an array of the accounts open loans\\r\\n        accountsSynthLoans[msg.sender].push(synthLoan);\\r\\n\\r\\n        // Increment totalIssuedSynths\\r\\n        totalIssuedSynths = totalIssuedSynths.add(_loanAmount);\\r\\n\\r\\n        // Issue the synth (less fee)\\r\\n        syntharb().mint(msg.sender, _loanAmount);\\r\\n\\r\\n        // Fee distribution. Mint the fees into the FeePool and record fees paid\\r\\n        if (mintingFee > 0) {\\r\\n\\r\\n            // calculate back factory owner fee is 0.25 on top of creator fee\\r\\n            arbasset.transfer(mintingFee / 4 * 3);\\r\\n\\r\\n            address payable factoryowner = IFactoryAddress(factoryaddress).getFactoryOwner();\\r\\n            factoryowner.transfer(mintingFee / 4);\\r\\n        }\\r\\n\\r\\n        // Tell the Dapps a loan was created\\r\\n        emit LoanCreated(msg.sender, loanID, _loanAmount);\\r\\n    }\\r\\n\\r\\n    function closeLoan(uint256 loanID) external nonReentrant  {\\r\\n        _closeLoan(msg.sender, loanID, false);\\r\\n    }\\r\\n\\r\\n    // Add ETH collateral to an open loan\\r\\n    function depositCollateral(address account, uint256 loanID) external payable notPaused {\\r\\n        require(msg.value > 0, \\\"Deposit amount must be greater than 0\\\");\\r\\n\\r\\n        // Get the loan from storage\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(account, loanID);\\r\\n\\r\\n        // Check loan exists and is open\\r\\n        _checkLoanIsOpen(synthLoan);\\r\\n\\r\\n        uint256 totalCollateral = synthLoan.collateralAmount.add(msg.value);\\r\\n\\r\\n        _updateLoanCollateral(synthLoan, totalCollateral);\\r\\n\\r\\n        // Tell the Dapps collateral was added to loan\\r\\n        emit CollateralDeposited(account, loanID, msg.value, totalCollateral);\\r\\n    }\\r\\n\\r\\n    // Withdraw ETH collateral from an open loan\\r\\n    function withdrawCollateral(uint256 loanID, uint256 withdrawAmount) external notPaused nonReentrant  {\\r\\n        require(withdrawAmount > 0, \\\"Amount to withdraw must be greater than 0\\\");\\r\\n\\r\\n        // Get the loan from storage\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(msg.sender, loanID);\\r\\n\\r\\n        // Check loan exists and is open\\r\\n        _checkLoanIsOpen(synthLoan);\\r\\n\\r\\n        uint256 collateralAfter = synthLoan.collateralAmount.sub(withdrawAmount);\\r\\n\\r\\n        SynthLoanStruct memory loanAfter = _updateLoanCollateral(synthLoan, collateralAfter);\\r\\n\\r\\n        // require collateral ratio after to be above the liquidation ratio\\r\\n        (uint256 collateralRatioAfter, ) = _loanCollateralRatio(loanAfter);\\r\\n\\r\\n        require(collateralRatioAfter > liquidationRatio, \\\"Collateral ratio below liquidation after withdraw\\\");\\r\\n\\r\\n        // transfer ETH to msg.sender\\r\\n        msg.sender.transfer(withdrawAmount);\\r\\n\\r\\n        // Tell the Dapps collateral was added to loan\\r\\n        emit CollateralWithdrawn(msg.sender, loanID, withdrawAmount, loanAfter.collateralAmount);\\r\\n    }\\r\\n\\r\\n    function repayLoan(\\r\\n        address _loanCreatorsAddress,\\r\\n        uint256 _loanID,\\r\\n        uint256 _repayAmount\\r\\n    ) external  {\\r\\n\\r\\n        // check msg.sender has sufficient funds to pay\\r\\n        require(IERC20(address(syntharb())).balanceOf(msg.sender) >= _repayAmount, \\\"Not enough balance\\\");\\r\\n\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_loanCreatorsAddress, _loanID);\\r\\n\\r\\n        // Check loan exists and is open\\r\\n        _checkLoanIsOpen(synthLoan);\\r\\n\\r\\n        (\\r\\n        uint256 loanAmountPaid,\\r\\n        uint256 loanAmountAfter\\r\\n        ) = _splitInterestLoanPayment(_repayAmount, synthLoan.loanAmount);\\r\\n\\r\\n        // burn funds from msg.sender for repaid amount\\r\\n        syntharb().burn(msg.sender, _repayAmount);\\r\\n\\r\\n        // Send interest paid to fee pool and record loan amount paid\\r\\n        _processInterestAndLoanPayment(loanAmountPaid);\\r\\n\\r\\n        // update loan with new total loan amount, record accrued interests\\r\\n        _updateLoan(synthLoan, loanAmountAfter);\\r\\n\\r\\n        emit LoanRepaid(_loanCreatorsAddress, _loanID, _repayAmount, loanAmountAfter);\\r\\n    }\\r\\n\\r\\n    // Liquidate loans at or below issuance ratio\\r\\n    function liquidateLoan(\\r\\n        address _loanCreatorsAddress,\\r\\n        uint256 _loanID,\\r\\n        uint256 _debtToCover\\r\\n    ) external nonReentrant  {\\r\\n\\r\\n        // check msg.sender (liquidator's wallet) has sufficient\\r\\n        require(IERC20(address(syntharb())).balanceOf(msg.sender) >= _debtToCover, \\\"Not enough balance\\\");\\r\\n\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(_loanCreatorsAddress, _loanID);\\r\\n\\r\\n        // Check loan exists and is open\\r\\n        _checkLoanIsOpen(synthLoan);\\r\\n\\r\\n        (uint256 collateralRatio, uint256 collateralValue) = _loanCollateralRatio(synthLoan);\\r\\n\\r\\n        require(collateralRatio < liquidationRatio, \\\"Collateral ratio above liquidation ratio\\\");\\r\\n\\r\\n        // calculate amount to liquidate to fix ratio including accrued interest\\r\\n        uint256 liquidationAmount = calculateAmountToLiquidate(\\r\\n            synthLoan.loanAmount,\\r\\n            collateralValue\\r\\n        );\\r\\n\\r\\n        // cap debt to liquidate\\r\\n        uint256 amountToLiquidate = liquidationAmount < _debtToCover ? liquidationAmount : _debtToCover;\\r\\n\\r\\n        // burn funds from msg.sender for amount to liquidate\\r\\n        syntharb().burn(msg.sender, amountToLiquidate);\\r\\n\\r\\n        (uint256 loanAmountPaid,  ) = _splitInterestLoanPayment(\\r\\n            amountToLiquidate,\\r\\n            synthLoan.loanAmount\\r\\n        );\\r\\n\\r\\n        // Send interests paid to fee pool and record loan amount paid\\r\\n        _processInterestAndLoanPayment(loanAmountPaid);\\r\\n\\r\\n        // Collateral value to redeem\\r\\n        uint currentprice = IConjure(arbasset).getPrice();\\r\\n        uint currentethusdprice = uint(IConjure(arbasset).getLatestETHUSDPrice());\\r\\n\\r\\n        uint256 collateralRedeemed = amountToLiquidate.multiplyDecimal(currentprice).divideDecimal(currentethusdprice);\\r\\n\\r\\n        // Add penalty\\r\\n        uint256 totalCollateralLiquidated = collateralRedeemed.multiplyDecimal(\\r\\n            SafeDecimalMath.unit().add(liquidationPenalty)\\r\\n        );\\r\\n\\r\\n        // update remaining loanAmount less amount paid and update accrued interests less interest paid\\r\\n        _updateLoan(synthLoan, synthLoan.loanAmount.sub(loanAmountPaid));\\r\\n\\r\\n        // update remaining collateral on loan\\r\\n        _updateLoanCollateral(synthLoan, synthLoan.collateralAmount.sub(totalCollateralLiquidated));\\r\\n\\r\\n        // Send liquidated ETH collateral to msg.sender\\r\\n        msg.sender.transfer(totalCollateralLiquidated);\\r\\n\\r\\n        // emit loan liquidation event\\r\\n        emit LoanPartiallyLiquidated(\\r\\n            _loanCreatorsAddress,\\r\\n            _loanID,\\r\\n            msg.sender,\\r\\n            amountToLiquidate,\\r\\n            totalCollateralLiquidated\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _splitInterestLoanPayment(\\r\\n        uint256 _paymentAmount,\\r\\n        uint256 _loanAmount\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n        uint256 loanAmountPaid,\\r\\n        uint256 loanAmountAfter\\r\\n    )\\r\\n    {\\r\\n        uint256 remainingPayment = _paymentAmount;\\r\\n\\r\\n        // Remaining amounts - pay down loan amount\\r\\n        loanAmountAfter = _loanAmount;\\r\\n        if (remainingPayment > 0) {\\r\\n            loanAmountAfter = loanAmountAfter.sub(remainingPayment);\\r\\n            loanAmountPaid = remainingPayment;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _processInterestAndLoanPayment(uint256 loanAmountPaid) internal {\\r\\n        // Decrement totalIssuedSynths\\r\\n        if (loanAmountPaid > 0) {\\r\\n            totalIssuedSynths = totalIssuedSynths.sub(loanAmountPaid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Liquidation of an open loan available for anyone\\r\\n    function liquidateUnclosedLoan(address _loanCreatorsAddress, uint256 _loanID) external nonReentrant  {\\r\\n        // Close the creators loan and send collateral to the closer.\\r\\n        _closeLoan(_loanCreatorsAddress, _loanID, true);\\r\\n        // Tell the Dapps this loan was liquidated\\r\\n        emit LoanLiquidated(_loanCreatorsAddress, _loanID, msg.sender);\\r\\n    }\\r\\n\\r\\n    // ========== PRIVATE FUNCTIONS ==========\\r\\n\\r\\n    function _closeLoan(\\r\\n        address account,\\r\\n        uint256 loanID,\\r\\n        bool liquidation\\r\\n    ) private {\\r\\n\\r\\n        // Get the loan from storage\\r\\n        SynthLoanStruct memory synthLoan = _getLoanFromStorage(account, loanID);\\r\\n\\r\\n        // Check loan exists and is open\\r\\n        _checkLoanIsOpen(synthLoan);\\r\\n\\r\\n        uint256 repayAmount = synthLoan.loanAmount;\\r\\n\\r\\n        require(\\r\\n            IERC20(address(syntharb())).balanceOf(msg.sender) >= repayAmount,\\r\\n            \\\"You do not have the required Synth balance to close this loan.\\\"\\r\\n        );\\r\\n\\r\\n        // Record loan as closed\\r\\n        _recordLoanClosure(synthLoan);\\r\\n\\r\\n        // Decrement totalIssuedSynths\\r\\n        // subtract the accrued interest from the loanAmount\\r\\n        totalIssuedSynths = totalIssuedSynths.sub(synthLoan.loanAmount);\\r\\n\\r\\n        // get prices\\r\\n        uint currentprice = IConjure(arbasset).getPrice();\\r\\n        uint currentethusdprice = uint(IConjure(arbasset).getLatestETHUSDPrice());\\r\\n\\r\\n        // Burn all Synths issued for the loan + the fees\\r\\n        syntharb().burn(msg.sender, repayAmount);\\r\\n\\r\\n        uint256 remainingCollateral = synthLoan.collateralAmount;\\r\\n\\r\\n        if (liquidation) {\\r\\n            // Send liquidator redeemed collateral + 10% penalty\\r\\n            // Collateral value to redeem\\r\\n\\r\\n            uint256 collateralRedeemed = repayAmount.multiplyDecimal(currentprice).divideDecimal(currentethusdprice);\\r\\n\\r\\n            // add penalty\\r\\n            uint256 totalCollateralLiquidated = collateralRedeemed.multiplyDecimal(\\r\\n                SafeDecimalMath.unit().add(liquidationPenalty)\\r\\n            );\\r\\n\\r\\n            // ensure remaining ETH collateral sufficient to cover collateral liquidated\\r\\n            // will revert if the liquidated collateral + penalty is more than remaining collateral\\r\\n            remainingCollateral = remainingCollateral.sub(totalCollateralLiquidated);\\r\\n\\r\\n            // Send liquidator CollateralLiquidated\\r\\n            msg.sender.transfer(totalCollateralLiquidated);\\r\\n        }\\r\\n\\r\\n        // Send remaining collateral to loan creator\\r\\n        synthLoan.account.transfer(remainingCollateral);\\r\\n\\r\\n        // Tell the Dapps\\r\\n        emit LoanClosed(account, loanID);\\r\\n    }\\r\\n\\r\\n    function _getLoanFromStorage(address account, uint256 loanID) private view returns (SynthLoanStruct memory) {\\r\\n        SynthLoanStruct[] memory synthLoans = accountsSynthLoans[account];\\r\\n        for (uint256 i = 0; i < synthLoans.length; i++) {\\r\\n            if (synthLoans[i].loanID == loanID) {\\r\\n                return synthLoans[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateLoan(\\r\\n        SynthLoanStruct memory _synthLoan,\\r\\n        uint256 _newLoanAmount\\r\\n    ) private {\\r\\n        // Get storage pointer to the accounts array of loans\\r\\n        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[_synthLoan.account];\\r\\n        for (uint256 i = 0; i < synthLoans.length; i++) {\\r\\n            if (synthLoans[i].loanID == _synthLoan.loanID) {\\r\\n                synthLoans[i].loanAmount = _newLoanAmount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateLoanCollateral(SynthLoanStruct memory _synthLoan, uint256 _newCollateralAmount)\\r\\n    private\\r\\n    returns (SynthLoanStruct memory)\\r\\n    {\\r\\n        // Get storage pointer to the accounts array of loans\\r\\n        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[_synthLoan.account];\\r\\n        for (uint256 i = 0; i < synthLoans.length; i++) {\\r\\n            if (synthLoans[i].loanID == _synthLoan.loanID) {\\r\\n                synthLoans[i].collateralAmount = _newCollateralAmount;\\r\\n                return synthLoans[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _recordLoanClosure(SynthLoanStruct memory synthLoan) private {\\r\\n        // Get storage pointer to the accounts array of loans\\r\\n        SynthLoanStruct[] storage synthLoans = accountsSynthLoans[synthLoan.account];\\r\\n        for (uint256 i = 0; i < synthLoans.length; i++) {\\r\\n            if (synthLoans[i].loanID == synthLoan.loanID) {\\r\\n                // Record the time the loan was closed\\r\\n                synthLoans[i].timeClosed = block.timestamp;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Reduce Total Open Loans Count\\r\\n        totalOpenLoanCount = totalOpenLoanCount.sub(1);\\r\\n    }\\r\\n\\r\\n    function _incrementTotalLoansCounter() private returns (uint256) {\\r\\n        // Increase the total Open loan count\\r\\n        totalOpenLoanCount = totalOpenLoanCount.add(1);\\r\\n        // Increase the total Loans Created count\\r\\n        totalLoansCreated = totalLoansCreated.add(1);\\r\\n        // Return total count to be used as a unique ID.\\r\\n        return totalLoansCreated;\\r\\n    }\\r\\n\\r\\n    function _calculateMintingFee(uint256 _ethAmount) private view returns (uint256 mintingFee) {\\r\\n\\r\\n        if (issueFeeRate == 0)\\r\\n        {\\r\\n            mintingFee = 0;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            mintingFee = _ethAmount.divideDecimalRound(10000 + issueFeeRate).multiplyDecimal(issueFeeRate);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkLoanIsOpen(SynthLoanStruct memory _synthLoan) internal pure {\\r\\n        require(_synthLoan.loanID > 0, \\\"Loan does not exist\\\");\\r\\n        require(_synthLoan.timeClosed == 0, \\\"Loan already closed\\\");\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL VIEWS ========== */\\r\\n\\r\\n    function syntharb() internal view returns (IConjure) {\\r\\n        return IConjure(arbasset);\\r\\n    }\\r\\n\\r\\n    // ========== EVENTS ==========\\r\\n\\r\\n    event CollateralizationRatioUpdated(uint256 ratio);\\r\\n    event LiquidationRatioUpdated(uint256 ratio);\\r\\n    event InterestRateUpdated(uint256 interestRate);\\r\\n    event IssueFeeRateUpdated(uint256 issueFeeRate);\\r\\n    event MinLoanCollateralSizeUpdated(uint256 minLoanCollateralSize);\\r\\n    event AccountLoanLimitUpdated(uint256 loanLimit);\\r\\n    event LoanLiquidationOpenUpdated(bool loanLiquidationOpen);\\r\\n    event LoanCreated(address indexed account, uint256 loanID, uint256 amount);\\r\\n    event LoanClosed(address indexed account, uint256 loanID);\\r\\n    event LoanLiquidated(address indexed account, uint256 loanID, address liquidator);\\r\\n    event LoanPartiallyLiquidated(\\r\\n        address indexed account,\\r\\n        uint256 loanID,\\r\\n        address liquidator,\\r\\n        uint256 liquidatedAmount,\\r\\n        uint256 liquidatedCollateral\\r\\n    );\\r\\n    event CollateralDeposited(address indexed account, uint256 loanID, uint256 collateralAmount, uint256 collateralAfter);\\r\\n    event CollateralWithdrawn(address indexed account, uint256 loanID, uint256 amountWithdrawn, uint256 collateralAfter);\\r\\n    event LoanRepaid(address indexed account, uint256 loanID, uint256 repaidAmount, uint256 newLoanAmount);\\r\\n}\\r\\n\\r\\ncontract EtherCollateralFactory {\\r\\n    event NewEtherCollateralContract(address deployed);\\r\\n\\r\\n    constructor() public {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets anyone mint a new CONJURE contract\\r\\n     */\\r\\n    function EtherCollateralMint(\\r\\n        address payable asset_,\\r\\n        address owner_,\\r\\n        address factoryaddress_,\\r\\n        uint256 mintingfeerate_\\r\\n    ) public returns (address)  {\\r\\n        EtherCollateral newContract = new EtherCollateral(\\r\\n            asset_,\\r\\n            owner_,\\r\\n            factoryaddress_,\\r\\n            mintingfeerate_\\r\\n        );\\r\\n        emit NewEtherCollateralContract(address(newContract));\\r\\n        return address(newContract);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IFactoryAddress {\\r\\n    function getFactoryOwner() external returns (address payable);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SafeDecimalMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\n// Libraries\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\r\\nlibrary SafeDecimalMath {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    /* Number of decimal places in the representations. */\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint8 public constant highPrecisionDecimals = 27;\\r\\n\\r\\n    /* The number representing 1.0. */\\r\\n    uint public constant UNIT = 10**uint(decimals);\\r\\n\\r\\n    /* The number representing 1.0 for higher fidelity numbers. */\\r\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\r\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\r\\n\\r\\n    /**\\r\\n     * @return Provides an interface to UNIT.\\r\\n     */\\r\\n    function unit() external pure returns (uint) {\\r\\n        return UNIT;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return Provides an interface to PRECISE_UNIT.\\r\\n     */\\r\\n    function preciseUnit() external pure returns (uint) {\\r\\n        return PRECISE_UNIT;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\r\\n     * decimals.\\r\\n     *\\r\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\r\\n     * so that product must be less than 2**256. As this is an integer division,\\r\\n     * the internal division always rounds down. This helps save on gas. Rounding\\r\\n     * is more expensive on gas.\\r\\n     */\\r\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\r\\n        return x.mul(y) / UNIT;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely multiplying x and y, interpreting the operands\\r\\n     * as fixed-point decimals of the specified precision unit.\\r\\n     *\\r\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\r\\n     * divided out after the product of x and y is evaluated, so that product must be\\r\\n     * less than 2**256.\\r\\n     *\\r\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\r\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\r\\n     * (eg. small fractions or percentages).\\r\\n     */\\r\\n    function _multiplyDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\r\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely multiplying x and y, interpreting the operands\\r\\n     * as fixed-point decimals of a precise unit.\\r\\n     *\\r\\n     * @dev The operands should be in the precise unit factor which will be\\r\\n     * divided out after the product of x and y is evaluated, so that product must be\\r\\n     * less than 2**256.\\r\\n     *\\r\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\r\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\r\\n     * (eg. small fractions or percentages).\\r\\n     */\\r\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely multiplying x and y, interpreting the operands\\r\\n     * as fixed-point decimals of a standard unit.\\r\\n     *\\r\\n     * @dev The operands should be in the standard unit factor which will be\\r\\n     * divided out after the product of x and y is evaluated, so that product must be\\r\\n     * less than 2**256.\\r\\n     *\\r\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\r\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\r\\n     * (eg. small fractions or percentages).\\r\\n     */\\r\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _multiplyDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely dividing x and y. The return value is a high\\r\\n     * precision decimal.\\r\\n     *\\r\\n     * @dev y is divided after the product of x and the standard precision unit\\r\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\r\\n     * this is an integer division, the result is always rounded down.\\r\\n     * This helps save on gas. Rounding is more expensive on gas.\\r\\n     */\\r\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\r\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\r\\n        return x.mul(UNIT).div(y);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\r\\n     * decimal in the precision unit specified in the parameter.\\r\\n     *\\r\\n     * @dev y is divided after the product of x and the specified precision unit\\r\\n     * is evaluated, so the product of x and the specified precision unit must\\r\\n     * be less than 2**256. The result is rounded to the nearest increment.\\r\\n     */\\r\\n    function _divideDecimalRound(\\r\\n        uint x,\\r\\n        uint y,\\r\\n        uint precisionUnit\\r\\n    ) private pure returns (uint) {\\r\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\r\\n\\r\\n        if (resultTimesTen % 10 >= 5) {\\r\\n            resultTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return resultTimesTen / 10;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\r\\n     * standard precision decimal.\\r\\n     *\\r\\n     * @dev y is divided after the product of x and the standard precision unit\\r\\n     * is evaluated, so the product of x and the standard precision unit must\\r\\n     * be less than 2**256. The result is rounded to the nearest increment.\\r\\n     */\\r\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, UNIT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\r\\n     * high precision decimal.\\r\\n     *\\r\\n     * @dev y is divided after the product of x and the high precision unit\\r\\n     * is evaluated, so the product of x and the high precision unit must\\r\\n     * be less than 2**256. The result is rounded to the nearest increment.\\r\\n     */\\r\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\r\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Convert a standard decimal representation to a high precision one.\\r\\n     */\\r\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\r\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\r\\n     */\\r\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\r\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\r\\n\\r\\n        if (quotientTimesTen % 10 >= 5) {\\r\\n            quotientTimesTen += 10;\\r\\n        }\\r\\n\\r\\n        return quotientTimesTen / 10;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\\r\\n\\r\\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\\r\\n\\r\\nModifications:\\r\\n- Removed `sqrt` function\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\r\\n    uint private constant Q224 = Q112 << RESOLUTION;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        return uq112x112(uint224(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // encodes a uint144 as a UQ144x112\\r\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\r\\n        return uq144x112(uint256(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112(self._x / uint224(x));\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\r\\n    // reverts on overflow\\r\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\r\\n        uint z;\\r\\n        require(\\r\\n            y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\\r\\n            \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\r\\n        );\\r\\n        return uq144x112(z);\\r\\n    }\\r\\n\\r\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\r\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\r\\n        return uint144(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // take the reciprocal of a UQ112x112\\r\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\r\\n        return uq112x112(uint224(Q224 / self._x));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor(address _owner) public {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() private view {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\n// Inheritance\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\nabstract contract Pausable is Owned {\\r\\n    uint public lastPauseTime;\\r\\n    bool public paused;\\r\\n\\r\\n    constructor() internal {\\r\\n        // This contract is abstract, and thus cannot be instantiated directly\\r\\n        require(owner != address(0), \\\"Owner must be set\\\");\\r\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Change the paused state of the contract\\r\\n     * @dev Only the contract owner may call this.\\r\\n     */\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        // Ensure we're actually changing the state before we do anything\\r\\n        if (_paused == paused) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Set our paused state.\\r\\n        paused = _paused;\\r\\n\\r\\n        // If applicable, set the last pause time.\\r\\n        if (paused) {\\r\\n            lastPauseTime = now;\\r\\n        }\\r\\n\\r\\n        // Let everyone know that our pause state has changed.\\r\\n        emit PauseChanged(paused);\\r\\n    }\\r\\n\\r\\n    event PauseChanged(bool isPaused);\\r\\n\\r\\n    modifier notPaused {\\r\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IConjure.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\ninterface IConjure {\\r\\n    function burn(address account, uint amount) external;\\r\\n    function mint(address account, uint amount) external;\\r\\n    function getFee() external view returns (uint8);\\r\\n    function getLatestETHUSDPrice() external view returns (int);\\r\\n    function getPrice() external returns (uint);\\r\\n    function getLatestPrice() external view returns (uint);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/SafeDecimalMath.sol\": {\r\n        \"SafeDecimalMath\": \"0x3ac7c0a35c7f19b186e1082269caf706409e2c89\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"name\":\"NewEtherCollateralContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryaddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingfeerate_\",\"type\":\"uint256\"}],\"name\":\"EtherCollateralMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtherCollateralFactory","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}