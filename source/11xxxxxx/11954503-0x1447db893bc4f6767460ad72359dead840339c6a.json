{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IChainLinkOracle.sol\\\";\\r\\nimport \\\"./interfaces/IKeeperOracle.sol\\\";\\r\\nimport \\\"./ERC20/IERC20.sol\\\";\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IOracle.sol\\\";\\r\\n\\r\\ncontract Oracle is IOracle, Ownable {\\r\\n    mapping(address => address) public chainlinkPriceUSD;\\r\\n    mapping(address => address) public chainlinkPriceETH;\\r\\n\\r\\n    address constant public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    IKeeperOracle public uniswapKeeperOracle = IKeeperOracle(0x73353801921417F465377c8d898c6f4C0270282C);\\r\\n    IKeeperOracle public sushiswapKeeperOracle = IKeeperOracle(0xf67Ab1c914deE06Ba0F264031885Ea7B276a7cDa);\\r\\n\\r\\n    constructor () {\\r\\n        chainlinkPriceUSD[weth] = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // WETH\\r\\n        chainlinkPriceUSD[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // wBTC\\r\\n        chainlinkPriceUSD[0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D] = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c; // renBTC\\r\\n        chainlinkPriceUSD[0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713] = 0x0ad50393F11FfAc4dd0fe5F1056448ecb75226Cf; // COVER\\r\\n        chainlinkPriceUSD[0x6B175474E89094C44Da98b954EedeAC495271d0F] = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9; // DAI\\r\\n        chainlinkPriceUSD[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6; // USDC\\r\\n        chainlinkPriceUSD[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0x3E7d1eAB13ad0104d2750B8863b489D65364e32D; // USDT\\r\\n\\r\\n        chainlinkPriceETH[0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e] = 0x7c5d4F8345e66f68099581Db340cd65B078C41f4; // YFI\\r\\n        chainlinkPriceETH[0x6B3595068778DD592e39A122f4f5a5cF09C90fE2] = 0xe572CeF69f43c2E488b33924AF04BDacE19079cf; // SUSHI\\r\\n        chainlinkPriceETH[0x4E15361FD6b4BB609Fa63C81A2be19d873717870] = 0x2DE7E4a9488488e0058B95854CC2f7955B35dC9b; // FTM\\r\\n        chainlinkPriceETH[0x2ba592F78dB6436527729929AAf6c908497cB200] = 0x82597CFE6af8baad7c0d441AA82cbC3b51759607; // CREAM\\r\\n        chainlinkPriceETH[0x4688a8b1F292FDaB17E9a90c8Bc379dC1DBd8713] = 0x7B6230EF79D5E97C11049ab362c0b685faCBA0C2; // COVER\\r\\n        initializeOwner();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns price in USD multiplied by 1e8, chainlink.latestAnswer returns 1e8 for USD answers, 1e18 for ETH answers, IKeeperOracle.current returns 1e18\\r\\n    function getPriceUSD(address _asset) public override view returns (uint256 price) {\\r\\n        // If token has ChainLink USD oracle\\r\\n        if (chainlinkPriceUSD[_asset] != address(0)) {\\r\\n            price = IChainLinkOracle(chainlinkPriceUSD[_asset]).latestAnswer();\\r\\n        } else { // Fetch token price in ETH\\r\\n            uint256 wethPrice = IChainLinkOracle(chainlinkPriceUSD[weth]).latestAnswer(); // returned in 1e8\\r\\n            // If token has ChainLink ETH oracle\\r\\n            if (chainlinkPriceETH[_asset] != address(0)) {\\r\\n                uint256 _priceInETH = IChainLinkOracle(chainlinkPriceETH[_asset]).latestAnswer(); // returned in 1e18\\r\\n                // Cancel out 1e18 multiplier from ETH ChainLink answer\\r\\n                price = _priceInETH * wethPrice / 1e18;\\r\\n            } else { // Rely on UniQuote\\r\\n                uint8 decimals = IERC20(_asset).decimals();\\r\\n                // If token has SushiSwap Keeper oracle\\r\\n                address sushiPair = sushiswapKeeperOracle.pairFor(_asset, weth);\\r\\n                if (sushiswapKeeperOracle.observationLength(sushiPair) > 0) {\\r\\n                    uint256 _priceInETH = sushiswapKeeperOracle.current(_asset, 10 ** decimals, weth); // returned in 1e18\\r\\n                    // Cancel out 1e18 multiplier from Keeper oracle\\r\\n                    price = _priceInETH * wethPrice / 1e18;\\r\\n                } else { \\r\\n                    // If token has Uniswap Keeper oracle\\r\\n                    // Fetch Uniswap pair here to avoid extra call above\\r\\n                    address uniPair = uniswapKeeperOracle.pairFor(_asset, weth);\\r\\n                    if (uniswapKeeperOracle.observationLength(uniPair) > 0) {\\r\\n                        uint256 _priceInETH = uniswapKeeperOracle.current(_asset, 10 ** decimals, weth); // returned in 1e18\\r\\n                        // Cancel out 1e18 multiplier from Keeper oracle\\r\\n                        price = _priceInETH * wethPrice / 1e18;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPricesUSD(address[] calldata _assets) external override view returns (uint256[] memory prices) {\\r\\n        prices = new uint256[](_assets.length);\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            prices[i] = getPriceUSD(_assets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateFeedETH(address _asset, address _feed) external override onlyOwner {\\r\\n        chainlinkPriceETH[_asset] = _feed; // 0x0 to remove feed\\r\\n    }\\r\\n    \\r\\n    function updateFeedUSD(address _asset, address _feed) external override onlyOwner {\\r\\n        chainlinkPriceUSD[_asset] = _feed; // 0x0 to remove feed\\r\\n    }\\r\\n\\r\\n    function setSushiKeeperOracle(address _sushiOracle) external override onlyOwner {\\r\\n        require(_sushiOracle != address(0), \\\"Oracle: IKeeperOracle is 0\\\");\\r\\n        sushiswapKeeperOracle = IKeeperOracle(_sushiOracle);\\r\\n    }\\r\\n\\r\\n    function setUniKeeperOracle(address _uniOracle) external override onlyOwner {\\r\\n        require(_uniOracle != address(0), \\\"Oracle: IKeeperOracle is 0\\\");\\r\\n        uniswapKeeperOracle = IKeeperOracle(_uniOracle);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IChainLinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IChainLinkOracle {\\r\\n    function latestAnswer() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKeeperOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IKeeperOracle {\\r\\n    function current(address, uint, address) external view returns (uint256);\\r\\n    function pairFor(address, address) external view returns (address);\\r\\n    function observationLength(address) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n * @author crypto-pumpkin\\r\\n *\\r\\n * By initialization, the owner account will be the one that called initializeOwner. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Initializable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Ruler: Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function initializeOwner() internal initializer {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    function getPriceUSD(address _asset) external view returns (uint256 price);\\r\\n    function getPricesUSD(address[] calldata _assets) external view returns (uint256[] memory prices);\\r\\n    \\r\\n    // admin functions\\r\\n    function updateFeedETH(address _asset, address _feed) external;\\r\\n    function updateFeedUSD(address _asset, address _feed) external;\\r\\n    function setSushiKeeperOracle(address _sushiOracle) external;\\r\\n    function setUniKeeperOracle(address _uniOracle) external;\\r\\n}\"\r\n    },\r\n    \"contracts/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n * \\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\r\\n * \\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns true if and only if the function is running in the constructor\\r\\n    function _isConstructor() private view returns (bool) {\\r\\n        // extcodesize checks the size of the code stored in an address, and\\r\\n        // address returns the current address. Since the code is still not\\r\\n        // deployed when running a constructor, any checks on its code size will\\r\\n        // yield zero, making it an effective way to detect if a contract is\\r\\n        // under construction or not.\\r\\n        address self = address(this);\\r\\n        uint256 cs;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { cs := extcodesize(self) }\\r\\n        return cs == 0;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainlinkPriceETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainlinkPriceUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"name\":\"getPricesUSD\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sushiOracle\",\"type\":\"address\"}],\"name\":\"setSushiKeeperOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniOracle\",\"type\":\"address\"}],\"name\":\"setUniKeeperOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapKeeperOracle\",\"outputs\":[{\"internalType\":\"contract IKeeperOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapKeeperOracle\",\"outputs\":[{\"internalType\":\"contract IKeeperOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"updateFeedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"updateFeedUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}