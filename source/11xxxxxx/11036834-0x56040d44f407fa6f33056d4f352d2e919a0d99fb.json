{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Finance interface.\r\n */\r\ncontract Finance {\r\n    function deposit(address _token, uint256 _amount, string _reference) external payable;\r\n}\r\n\r\n\r\n/**\r\n * @title Utopia\r\n * @author Reza Bakhshandeh <reza[dot]bakhshandeh[at]gmail[dot]com>\r\n */\r\ncontract Utopia{\r\n    using SafeMath for uint256;\r\n\r\n    struct Land{\r\n        int256 x1;\r\n        int256 x2;\r\n        int256 y1;\r\n        int256 y2;\r\n        uint256 time;\r\n        string hash;\r\n    }\r\n\r\n    // admins\r\n    mapping(address => bool) public adminsMap;\r\n    address[] public admins;\r\n\r\n    address[] public owners;\r\n    mapping(address => Land[]) public lands;\r\n\r\n    bool public allowPublicAssign = true;\r\n\r\n    address public fundsWallet = 0x22fd697b06fee6f5c5df5cdd4283bd45cc73b056;\r\n\r\n    uint256 public unitLandPrice = 0.0001 ether;\r\n\r\n    constructor(){\r\n        admins[admins.length++] = msg.sender;\r\n        adminsMap[msg.sender] = true;\r\n    }\r\n\r\n    modifier isPublic(){\r\n        require(allowPublicAssign);\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin(){\r\n        require(adminsMap[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOwners() view public returns (address[]) {\r\n        return owners;\r\n    }\r\n\r\n    \r\n    function getLands(address owner) view public returns (Land[]) {\r\n        return lands[owner];\r\n    }\r\n\r\n    function getLand(address owner, uint256 index) \r\n    view public returns (\r\n        int256 x1,\r\n        int256 y1,\r\n        int256 x2,\r\n        int256 y2,\r\n        uint256 time, string hash) {\r\n        if(lands[owner].length <= index){\r\n            return;\r\n        }\r\n        x1 = lands[owner][index].x1;\r\n        x2 = lands[owner][index].x2;\r\n        y1 = lands[owner][index].y1;\r\n        y2 = lands[owner][index].y2;\r\n        time = lands[owner][index].time;\r\n        hash = lands[owner][index].hash;\r\n    }\r\n\r\n\r\n    function assignLand(int256 x1, \r\n        int256 y1, int256 x2, int256 y2, string hash)\r\n                isPublic public payable{\r\n\r\n        uint256 cost = abs(x2-x1) * abs(y2-y1) * unitLandPrice;\r\n        assert(msg.value >= cost);\r\n\r\n        Finance(fundsWallet).deposit.value(msg.value)(address(0), msg.value, \"Assign Land\");\r\n\r\n        if(!(lands[msg.sender].length > 0)){\r\n            owners[owners.length++] = msg.sender;\r\n        }\r\n        lands[msg.sender].push(Land(\r\n            x1,\r\n            x2,\r\n            y1,\r\n            y2,\r\n            now,\r\n            hash\r\n        ));\r\n    }\r\n\r\n    function adminAssignLand(int256 x1, \r\n        int256 y1, int256 x2, int256 y2, address addr) isAdmin{\r\n        if(!(lands[addr].length > 0)){\r\n            owners[owners.length++] = addr;\r\n        }\r\n\r\n        lands[addr].push(Land(\r\n            x1,\r\n            x2,\r\n            y1,\r\n            y2,\r\n            now,\r\n            \"\"\r\n        ));\r\n    }\r\n\r\n    function adminSetIsPublic(bool val) isAdmin{\r\n        allowPublicAssign = val;\r\n    }\r\n\r\n    function adminSetUnitLandPrice(uint256 price) isAdmin{\r\n        unitLandPrice = price;\r\n    }\r\n\r\n    function addAdmin(address addr) isAdmin{\r\n        assert(addr != address(0));\r\n        admins[admins.length++] = addr;\r\n        adminsMap[addr] = true;\r\n    }\r\n\r\n    function updateLand(string hash, uint256 index) returns (bool){\r\n        if(lands[msg.sender].length <= index){\r\n            return false;\r\n        }\r\n        lands[msg.sender][index].hash = hash;\r\n        return true;\r\n    }\r\n\r\n    function landPrice(int256 x1, \r\n        int256 y1, int256 x2, int256 y2)\r\n                view public returns(uint256){\r\n        return abs(x2-x1) * abs(y2-y1) * unitLandPrice;\r\n    }\r\n\r\n    function abs(int256 x) view public returns (uint256) {\r\n        return uint256(x > 0 ? x : -1*x);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowPublicAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"abs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLands\",\"outputs\":[{\"components\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"adminSetUnitLandPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLand\",\"outputs\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitLandPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"updateLand\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lands\",\"outputs\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"adminAssignLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"adminSetIsPublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"}],\"name\":\"landPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminsMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"x1\",\"type\":\"int256\"},{\"name\":\"y1\",\"type\":\"int256\"},{\"name\":\"x2\",\"type\":\"int256\"},{\"name\":\"y2\",\"type\":\"int256\"},{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"assignLand\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Utopia","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4358677a2ecaa4d243eaa591919e1c4ae764bd57795dfccc98ac39db59d77ec9"}]}