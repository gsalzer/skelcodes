{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @nomiclabs/buidler/console.sol\r\n\r\npragma solidity >= 0.4.22 <0.8.0;\r\n\r\nlibrary console {\r\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n\tfunction _sendLogPayload(bytes memory payload) private view {\r\n\t\tuint256 payloadLength = payload.length;\r\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\r\n\t\tassembly {\r\n\t\t\tlet payloadStart := add(payload, 32)\r\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction log() internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n\t}\r\n\r\n\tfunction logInt(int p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n\t}\r\n\r\n\tfunction logUint(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction logString(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction logBool(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction logAddress(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes(bytes memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n\t}\r\n\r\n\tfunction logByte(byte p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(byte)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes1(bytes1 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes2(bytes2 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes3(bytes3 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes4(bytes4 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes5(bytes5 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes6(bytes6 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes7(bytes7 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes8(bytes8 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes9(bytes9 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes10(bytes10 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes11(bytes11 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes12(bytes12 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes13(bytes13 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes14(bytes14 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes15(bytes15 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes16(bytes16 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes17(bytes17 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes18(bytes18 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes19(bytes19 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes20(bytes20 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes21(bytes21 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes22(bytes22 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes23(bytes23 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes24(bytes24 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes25(bytes25 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes26(bytes26 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes27(bytes27 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes28(bytes28 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes29(bytes29 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes30(bytes30 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes31(bytes31 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes32(bytes32 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction log(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction log(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction log(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/MgasQuery.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MgasQuery is Ownable {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    address public wethAddr;// = 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852;\r\n    address public usdtAddr;// = 0xdac17f958d2ee523a2206206994597c13d831ec7;\r\n    address public ethUsdtPairAddr;// = 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852;\r\n    address public manGasPairAddr;// = 0x5602B452F691143e7029a100c2889bf6d533C12A;\r\n    address public manGasAddr;// = 0x46d5FD4A711B905ea0aaA10db31801efc75dEa56;\r\n\r\n    function setWethAddr(address _addr) public onlyOwner{\r\n        wethAddr = _addr;\r\n    }\r\n    function setUsdtAddr(address _addr) public onlyOwner{\r\n        usdtAddr = _addr;\r\n    }\r\n    function setEthUsdtPairAddr(address _addr) public onlyOwner {\r\n        ethUsdtPairAddr = _addr;\r\n    }\r\n    function setManGasPairAddr(address _addr) public onlyOwner {\r\n        manGasPairAddr = _addr;\r\n    }\r\n    function setManGasAddr(address _addr) public onlyOwner {\r\n        manGasAddr = _addr;\r\n    }\r\n\r\n    function usdtFor1Eth() public view returns(uint256) {\r\n        uint256 usdt = IERC20(usdtAddr).balanceOf(ethUsdtPairAddr);\r\n        uint256 eth = IERC20(wethAddr).balanceOf(ethUsdtPairAddr);\r\n        require(eth != 0, \"eth is 0\");\r\n        return usdt.div(eth); // usdt for 1eth\r\n    }\r\n    function usdtBalance() public view returns(uint256) {\r\n        return IERC20(usdtAddr).balanceOf(ethUsdtPairAddr);\r\n    }\r\n    function mangasFor1Eth() public view returns(uint256) {\r\n\r\n        uint256 mangas = IERC20(manGasAddr).balanceOf(manGasPairAddr);\r\n        uint256 eth2 = IERC20(wethAddr).balanceOf(manGasPairAddr);\r\n        require(eth2 != 0, \"eth is 0\");\r\n        return mangas.div(eth2); // mangas for 1eth\r\n    }\r\n    function getManGasAmountWithUsdt(uint256 usdtAmount) public view returns(uint256){ \r\n        //console.log(\"start\");\r\n        require(usdtAddr != address(0), \"usdt is null\");\r\n        require(wethAddr != address(0), \"weth is null\");\r\n        require(ethUsdtPairAddr != address(0), \"eth-usdt pair is null\");\r\n        require(manGasPairAddr != address(0), \"man-eth pair is null\");\r\n        require(manGasAddr != address(0), \"mangas is null\");\r\n        \r\n        return usdtAmount.mul(mangasFor1Eth().div(usdtFor1Eth()));\r\n\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ethUsdtPairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"getManGasAmountWithUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manGasAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manGasPairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mangasFor1Eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEthUsdtPairAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setManGasAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setManGasPairAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setUsdtAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWethAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFor1Eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MgasQuery","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://19a5c80a1edff0f6c2c308d52f6ba106726534da490cbcc144288d7999d5a49f"}]}