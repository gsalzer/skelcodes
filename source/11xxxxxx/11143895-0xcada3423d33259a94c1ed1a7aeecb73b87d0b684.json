{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IGeyserFactory.sol\r\n\r\n/*\r\nGeyser factory interface\r\n\r\nThis defines the Geyser factory interface\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IGeyserFactory {\r\n    // events\r\n    event GeyserCreated(address indexed user, address geyser);\r\n\r\n    /**\r\n     * @notice create a new Geyser\r\n     * @param stakingToken the token that will be staked\r\n     * @param rewardToken the token distributed to users as they unstake\r\n     * @param bonusMin minimum time bonus\r\n     * @param bonusMax maximum time bonus\r\n     * @param bonusPeriod period (in seconds) over which time bonus grows to max\r\n     */\r\n    function create(\r\n        address stakingToken,\r\n        address rewardToken,\r\n        uint256 bonusMin,\r\n        uint256 bonusMax,\r\n        uint256 bonusPeriod\r\n    ) external returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/IStaking.sol\r\n\r\n/*\r\nStaking interface\r\n\r\nEIP-900 staking interface\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\nh/t https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IStaking {\r\n    // events\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n\r\n    /**\r\n     * @notice stakes a certain amount of tokens, transferring this amount from\r\n     the user to the contract\r\n     * @param amount number of tokens to stake\r\n     */\r\n    function stake(uint256 amount, bytes calldata) external;\r\n\r\n    /**\r\n     * @notice stakes a certain amount of tokens for an address, transfering this\r\n     amount from the caller to the contract, on behalf of the specified address\r\n     * @param user beneficiary address\r\n     * @param amount number of tokens to stake\r\n     */\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata\r\n    ) external;\r\n\r\n    /**\r\n     * @notice unstakes a certain amount of tokens, returning these tokens\r\n     to the user\r\n     * @param amount number of tokens to unstake\r\n     */\r\n    function unstake(uint256 amount, bytes calldata) external;\r\n\r\n    /**\r\n     * @param addr the address of interest\r\n     * @return the current total of tokens staked for an address\r\n     */\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n\r\n    /**\r\n     * @return the current total amount of tokens staked by all users\r\n     */\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    /**\r\n     * @return the staking token for this staking contract\r\n     */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @return true if the staking contract support history\r\n     */\r\n    function supportsHistory() external pure returns (bool);\r\n}\r\n\r\n// File: contracts/IGeyser.sol\r\n\r\n/*\r\nGeyser interface\r\n\r\nThis defines the core Geyser contract interface as an extension to the\r\nstandard IStaking interface\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Geyser interface\r\n */\r\nabstract contract IGeyser is IStaking, Ownable {\r\n    // events\r\n    event RewardsDistributed(address indexed user, uint256 amount);\r\n    event RewardsFunded(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        uint256 start,\r\n        uint256 total\r\n    );\r\n    event RewardsUnlocked(uint256 amount, uint256 total);\r\n    event RewardsExpired(uint256 amount, uint256 duration, uint256 start);\r\n    event GysrSpent(address indexed user, uint256 amount);\r\n    event GysrWithdrawn(uint256 amount);\r\n\r\n    // IStaking\r\n    /**\r\n     * @notice no support for history\r\n     * @return false\r\n     */\r\n    function supportsHistory() external override pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // IGeyser\r\n    /**\r\n     * @return staking token for this Geyser\r\n     */\r\n    function stakingToken() external virtual view returns (address);\r\n\r\n    /**\r\n     * @return reward token for this Geyser\r\n     */\r\n    function rewardToken() external virtual view returns (address);\r\n\r\n    /**\r\n     * @notice fund Geyser by locking up reward tokens for distribution\r\n     * @param amount number of reward tokens to lock up as funding\r\n     * @param duration period (seconds) over which funding will be unlocked\r\n     */\r\n    function fund(uint256 amount, uint256 duration) external virtual;\r\n\r\n    /**\r\n     * @notice fund Geyser by locking up reward tokens for future distribution\r\n     * @param amount number of reward tokens to lock up as funding\r\n     * @param duration period (seconds) over which funding will be unlocked\r\n     * @param start time (seconds) at which funding begins to unlock\r\n     */\r\n    function fund(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        uint256 start\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice withdraw GYSR tokens applied during unstaking\r\n     * @param amount number of GYSR to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external virtual;\r\n\r\n    /**\r\n     * @notice unstake while applying GYSR token for boosted rewards\r\n     * @param amount number of tokens to unstake\r\n     * @param gysr number of GYSR tokens to apply for boost\r\n     */\r\n    function unstake(\r\n        uint256 amount,\r\n        uint256 gysr,\r\n        bytes calldata\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice update accounting, unlock tokens, etc.\r\n     */\r\n    function update() external virtual;\r\n\r\n    /**\r\n     * @notice clean geyser, expire old fundings, etc.\r\n     */\r\n    function clean() external virtual;\r\n}\r\n\r\n// File: contracts/GeyserPool.sol\r\n\r\n/*\r\nGeyser token pool\r\n\r\nSimple contract to implement token pool of arbitrary ERC20 token.\r\nThis is owned and used by a parent Geyser\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\nh/t https://github.com/ampleforth/token-geyser\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\ncontract GeyserPool is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public token;\r\n\r\n    constructor(address token_) public {\r\n        token = IERC20(token_);\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner {\r\n        token.safeTransfer(to, value);\r\n    }\r\n}\r\n\r\n// File: contracts/MathUtils.sol\r\n\r\n/*\r\nMath utilities\r\n\r\nThis library implements various logarithmic math utilies which support\r\nother contracts and specifically the GYSR multiplier calculation\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\nh/t https://github.com/abdk-consulting/abdk-libraries-solidity\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary MathUtils {\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function logbase2(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n        if (xc >= 0x10000000000000000) {\r\n            xc >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (xc >= 0x100000000) {\r\n            xc >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (xc >= 0x10000) {\r\n            xc >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (xc >= 0x100) {\r\n            xc >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (xc >= 0x10) {\r\n            xc >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (xc >= 0x4) {\r\n            xc >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256(x) << (127 - msb);\r\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * @notice calculate natural logarithm of x\r\n     * @dev magic constant comes from ln(2) * 2^128 -> hex\r\n     * @param x signed 64.64-bit fixed point number, require x > 0\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return\r\n            int128(\r\n                (uint256(logbase2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >>\r\n                    128\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice calculate logarithm base 10 of x\r\n     * @dev magic constant comes from log10(2) * 2^128 -> hex\r\n     * @param x signed 64.64-bit fixed point number, require x > 0\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function logbase10(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return\r\n            int128(\r\n                (uint256(logbase2(x)) * 0x4d104d427de7fce20a6e420e02236748) >>\r\n                    128\r\n            );\r\n    }\r\n\r\n    // wrapper functions to allow testing\r\n    function testlogbase2(int128 x) public pure returns (int128) {\r\n        return logbase2(x);\r\n    }\r\n\r\n    function testlogbase10(int128 x) public pure returns (int128) {\r\n        return logbase10(x);\r\n    }\r\n}\r\n\r\n// File: contracts/Geyser.sol\r\n\r\n/*\r\nGeyser\r\n\r\nThis implements the core Geyser contract, which allows for generalized\r\nstaking, yield farming, and token distribution. This also implements\r\nthe GYSR spending mechanic for boosted reward distribution.\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\nh/t https://github.com/ampleforth/token-geyser\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Geyser\r\n */\r\ncontract Geyser is IGeyser, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using MathUtils for int128;\r\n\r\n    // single stake by user\r\n    struct Stake {\r\n        uint256 shares;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // summary of total user stake/shares\r\n    struct User {\r\n        uint256 shares;\r\n        uint256 shareSeconds;\r\n        uint256 lastUpdated;\r\n    }\r\n\r\n    // single funding/reward schedule\r\n    struct Funding {\r\n        uint256 amount;\r\n        uint256 shares;\r\n        uint256 unlocked;\r\n        uint256 lastUpdated;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 duration;\r\n    }\r\n\r\n    // constants\r\n    uint256 public constant BONUS_DECIMALS = 18;\r\n    uint256 public constant INITIAL_SHARES_PER_TOKEN = 10**6;\r\n    uint256 public constant MAX_ACTIVE_FUNDINGS = 16;\r\n\r\n    // token pool fields\r\n    GeyserPool private immutable _stakingPool;\r\n    GeyserPool private immutable _unlockedPool;\r\n    GeyserPool private immutable _lockedPool;\r\n    Funding[] public fundings;\r\n\r\n    // user staking fields\r\n    mapping(address => User) public userTotals;\r\n    mapping(address => Stake[]) public userStakes;\r\n\r\n    // time bonus fields\r\n    uint256 public immutable bonusMin;\r\n    uint256 public immutable bonusMax;\r\n    uint256 public immutable bonusPeriod;\r\n\r\n    // global state fields\r\n    uint256 public totalLockedShares;\r\n    uint256 public totalStakingShares;\r\n    uint256 public totalRewards;\r\n    uint256 public totalGysrRewards;\r\n    uint256 public totalStakingShareSeconds;\r\n    uint256 public lastUpdated;\r\n\r\n    // gysr fields\r\n    IERC20 private immutable _gysr;\r\n\r\n    /**\r\n     * @param stakingToken_ the token that will be staked\r\n     * @param rewardToken_ the token distributed to users as they unstake\r\n     * @param bonusMin_ initial time bonus\r\n     * @param bonusMax_ maximum time bonus\r\n     * @param bonusPeriod_ period (in seconds) over which time bonus grows to max\r\n     * @param gysr_ address for GYSR token\r\n     */\r\n    constructor(\r\n        address stakingToken_,\r\n        address rewardToken_,\r\n        uint256 bonusMin_,\r\n        uint256 bonusMax_,\r\n        uint256 bonusPeriod_,\r\n        address gysr_\r\n    ) public {\r\n        require(\r\n            bonusMin_ <= bonusMax_,\r\n            \"Geyser: initial time bonus greater than max\"\r\n        );\r\n\r\n        _stakingPool = new GeyserPool(stakingToken_);\r\n        _unlockedPool = new GeyserPool(rewardToken_);\r\n        _lockedPool = new GeyserPool(rewardToken_);\r\n\r\n        bonusMin = bonusMin_;\r\n        bonusMax = bonusMax_;\r\n        bonusPeriod = bonusPeriod_;\r\n\r\n        _gysr = IERC20(gysr_);\r\n\r\n        lastUpdated = block.timestamp;\r\n    }\r\n\r\n    // IStaking\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function stake(uint256 amount, bytes calldata) external override {\r\n        _stake(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount,\r\n        bytes calldata\r\n    ) external override {\r\n        _stake(msg.sender, user, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function unstake(uint256 amount, bytes calldata) external override {\r\n        _unstake(amount, 0);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function totalStakedFor(address addr)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (totalStakingShares == 0) {\r\n            return 0;\r\n        }\r\n        return\r\n            totalStaked().mul(userTotals[addr].shares).div(totalStakingShares);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function totalStaked() public override view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     * @dev redundant with stakingToken() in order to implement IStaking (EIP-900)\r\n     */\r\n    function token() external override view returns (address) {\r\n        return address(_stakingPool.token());\r\n    }\r\n\r\n    // IGeyser\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function stakingToken() public override view returns (address) {\r\n        return address(_stakingPool.token());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function rewardToken() public override view returns (address) {\r\n        return address(_unlockedPool.token());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function fund(uint256 amount, uint256 duration) public override {\r\n        fund(amount, duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function fund(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        uint256 start\r\n    ) public override onlyOwner {\r\n        // validate\r\n        require(amount > 0, \"Geyser: funding amount is zero\");\r\n        require(start >= block.timestamp, \"Geyser: funding start is past\");\r\n        require(\r\n            fundings.length < MAX_ACTIVE_FUNDINGS,\r\n            \"Geyser: exceeds max active funding schedules\"\r\n        );\r\n\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // mint shares at current rate\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares = (lockedTokens > 0)\r\n            ? totalLockedShares.mul(amount).div(lockedTokens)\r\n            : amount.mul(INITIAL_SHARES_PER_TOKEN);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        // create new funding\r\n        fundings.push(\r\n            Funding({\r\n                amount: amount,\r\n                shares: mintedLockedShares,\r\n                unlocked: 0,\r\n                lastUpdated: start,\r\n                start: start,\r\n                end: start.add(duration),\r\n                duration: duration\r\n            })\r\n        );\r\n\r\n        // do transfer of funding\r\n        _lockedPool.token().safeTransferFrom(\r\n            msg.sender,\r\n            address(_lockedPool),\r\n            amount\r\n        );\r\n        emit RewardsFunded(amount, duration, start, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function withdraw(uint256 amount) external override onlyOwner {\r\n        require(amount > 0, \"Geyser: withdraw amount is zero\");\r\n        require(\r\n            amount <= _gysr.balanceOf(address(this)),\r\n            \"Geyser: withdraw amount exceeds balance\"\r\n        );\r\n        // do transfer\r\n        _gysr.safeTransfer(msg.sender, amount);\r\n\r\n        emit GysrWithdrawn(amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function unstake(\r\n        uint256 amount,\r\n        uint256 gysr,\r\n        bytes calldata\r\n    ) external override {\r\n        _unstake(amount, gysr);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function update() external override nonReentrant {\r\n        _update(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyser\r\n     */\r\n    function clean() external override onlyOwner {\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // check for stale funding schedules to expire\r\n        uint256 removed = 0;\r\n        uint256 originalSize = fundings.length;\r\n        for (uint256 i = 0; i < originalSize; i++) {\r\n            Funding storage funding = fundings[i.sub(removed)];\r\n            uint256 idx = i.sub(removed);\r\n\r\n            if (_unlockable(idx) == 0 && block.timestamp >= funding.end) {\r\n                emit RewardsExpired(\r\n                    funding.amount,\r\n                    funding.duration,\r\n                    funding.start\r\n                );\r\n\r\n                // remove at idx by copying last element here, then popping off last\r\n                // (we don't care about order)\r\n                fundings[idx] = fundings[fundings.length.sub(1)];\r\n                fundings.pop();\r\n                removed = removed.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Geyser\r\n\r\n    /**\r\n     * @dev internal implementation of staking methods\r\n     * @param staker address to do deposit of staking tokens\r\n     * @param beneficiary address to gain credit for this stake operation\r\n     * @param amount number of staking tokens to deposit\r\n     */\r\n    function _stake(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) private nonReentrant {\r\n        // validate\r\n        require(amount > 0, \"Geyser: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"Geyser: beneficiary is zero address\"\r\n        );\r\n\r\n        // mint staking shares at current rate\r\n        uint256 mintedStakingShares = (totalStakingShares > 0)\r\n            ? totalStakingShares.mul(amount).div(totalStaked())\r\n            : amount.mul(INITIAL_SHARES_PER_TOKEN);\r\n        require(mintedStakingShares > 0, \"Geyser: stake amount too small\");\r\n\r\n        // update bookkeeping\r\n        _update(beneficiary);\r\n\r\n        // update user staking info\r\n        User storage user = userTotals[beneficiary];\r\n        user.shares = user.shares.add(mintedStakingShares);\r\n        user.lastUpdated = block.timestamp;\r\n\r\n        userStakes[beneficiary].push(\r\n            Stake(mintedStakingShares, block.timestamp)\r\n        );\r\n\r\n        // add newly minted shares to global total\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n\r\n        // transactions\r\n        _stakingPool.token().safeTransferFrom(\r\n            staker,\r\n            address(_stakingPool),\r\n            amount\r\n        );\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev internal implementation of unstaking methods\r\n     * @param amount number of tokens to unstake\r\n     * @param gysr number of GYSR tokens applied to unstaking operation\r\n     * @return number of reward tokens distributed\r\n     */\r\n    function _unstake(uint256 amount, uint256 gysr)\r\n        private\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        // validate\r\n        require(amount > 0, \"Geyser: unstake amount is zero\");\r\n        require(\r\n            totalStakedFor(msg.sender) >= amount,\r\n            \"Geyser: unstake amount exceeds balance\"\r\n        );\r\n\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // do unstaking, first-in last-out, respecting time bonus\r\n        uint256 timeWeightedShareSeconds = _unstakeFirstInLastOut(amount);\r\n\r\n        // compute and apply GYSR token bonus\r\n        uint256 gysrWeightedShareSeconds = gysrBonus(gysr)\r\n            .mul(timeWeightedShareSeconds)\r\n            .div(10**BONUS_DECIMALS);\r\n\r\n        uint256 rewardAmount = totalUnlocked()\r\n            .mul(gysrWeightedShareSeconds)\r\n            .div(totalStakingShareSeconds.add(gysrWeightedShareSeconds));\r\n\r\n        // update global stats for distributions\r\n        if (gysr > 0) {\r\n            totalGysrRewards = totalGysrRewards.add(rewardAmount);\r\n        }\r\n        totalRewards = totalRewards.add(rewardAmount);\r\n\r\n        // transactions\r\n        _stakingPool.transfer(msg.sender, amount);\r\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \"\");\r\n        if (rewardAmount > 0) {\r\n            _unlockedPool.transfer(msg.sender, rewardAmount);\r\n            emit RewardsDistributed(msg.sender, rewardAmount);\r\n        }\r\n        if (gysr > 0) {\r\n            _gysr.safeTransferFrom(msg.sender, address(this), gysr);\r\n            emit GysrSpent(msg.sender, gysr);\r\n        }\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to actually execute unstaking, first-in last-out, \r\n     while computing and applying time bonus. This function also updates\r\n     user and global totals for shares and share-seconds.\r\n     * @param amount number of staking tokens to withdraw\r\n     * @return time bonus weighted staking share seconds\r\n     */\r\n    function _unstakeFirstInLastOut(uint256 amount) private returns (uint256) {\r\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\r\n            totalStaked()\r\n        );\r\n        require(stakingSharesToBurn > 0, \"Geyser: unstake amount too small\");\r\n\r\n        // redeem from most recent stake and go backwards in time.\r\n        uint256 shareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 bonusWeightedShareSeconds = 0;\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = stakes[stakes.length - 1];\r\n            uint256 stakeTime = block.timestamp.sub(lastStake.timestamp);\r\n\r\n            uint256 bonus = timeBonus(stakeTime);\r\n\r\n            if (lastStake.shares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\r\n                    lastStake.shares.mul(stakeTime).mul(bonus).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shareSecondsToBurn = shareSecondsToBurn.add(\r\n                    lastStake.shares.mul(stakeTime)\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.shares);\r\n                stakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\r\n                    sharesLeftToBurn.mul(stakeTime).mul(bonus).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shareSecondsToBurn = shareSecondsToBurn.add(\r\n                    sharesLeftToBurn.mul(stakeTime)\r\n                );\r\n                lastStake.shares = lastStake.shares.sub(sharesLeftToBurn);\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        // update user totals\r\n        User storage user = userTotals[msg.sender];\r\n        user.shareSeconds = user.shareSeconds.sub(shareSecondsToBurn);\r\n        user.shares = user.shares.sub(stakingSharesToBurn);\r\n        user.lastUpdated = block.timestamp;\r\n\r\n        // update global totals\r\n        totalStakingShareSeconds = totalStakingShareSeconds.sub(\r\n            shareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n\r\n        return bonusWeightedShareSeconds;\r\n    }\r\n\r\n    /**\r\n     * @dev internal implementation of update method\r\n     * @param addr address for user accounting update\r\n     */\r\n    function _update(address addr) private {\r\n        _unlockTokens();\r\n\r\n        // global accounting\r\n        uint256 deltaTotalShareSeconds = (block.timestamp.sub(lastUpdated)).mul(\r\n            totalStakingShares\r\n        );\r\n        totalStakingShareSeconds = totalStakingShareSeconds.add(\r\n            deltaTotalShareSeconds\r\n        );\r\n        lastUpdated = block.timestamp;\r\n\r\n        // user accounting\r\n        User storage user = userTotals[addr];\r\n        uint256 deltaUserShareSeconds = (block.timestamp.sub(user.lastUpdated))\r\n            .mul(user.shares);\r\n        user.shareSeconds = user.shareSeconds.add(deltaUserShareSeconds);\r\n        user.lastUpdated = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev unlocks reward tokens based on funding schedules\r\n     */\r\n    function _unlockTokens() private {\r\n        uint256 tokensToUnlock = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            // handle any leftover\r\n            tokensToUnlock = lockedTokens;\r\n        } else {\r\n            // normal case: unlock some shares from each funding schedule\r\n            uint256 sharesToUnlock = 0;\r\n            for (uint256 i = 0; i < fundings.length; i++) {\r\n                uint256 shares = _unlockable(i);\r\n                Funding storage funding = fundings[i];\r\n                if (shares > 0) {\r\n                    funding.unlocked = funding.unlocked.add(shares);\r\n                    funding.lastUpdated = block.timestamp;\r\n                    sharesToUnlock = sharesToUnlock.add(shares);\r\n                }\r\n            }\r\n            tokensToUnlock = sharesToUnlock.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(sharesToUnlock);\r\n        }\r\n\r\n        if (tokensToUnlock > 0) {\r\n            _lockedPool.transfer(address(_unlockedPool), tokensToUnlock);\r\n            emit RewardsUnlocked(tokensToUnlock, totalUnlocked());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to compute updates to funding schedules\r\n     * @param idx index of the funding\r\n     * @return the number of unlockable shares\r\n     */\r\n    function _unlockable(uint256 idx) private view returns (uint256) {\r\n        Funding storage funding = fundings[idx];\r\n\r\n        // funding schedule is in future\r\n        if (block.timestamp < funding.start) {\r\n            return 0;\r\n        }\r\n        // empty\r\n        if (funding.unlocked >= funding.shares) {\r\n            return 0;\r\n        }\r\n        // handle zero-duration period or leftover dust from integer division\r\n        if (block.timestamp >= funding.end) {\r\n            return funding.shares.sub(funding.unlocked);\r\n        }\r\n\r\n        return\r\n            (block.timestamp.sub(funding.lastUpdated)).mul(funding.shares).div(\r\n                funding.duration\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice compute time bonus earned as a function of staking time\r\n     * @param time length of time for which the tokens have been staked\r\n     * @return bonus multiplier for time\r\n     */\r\n    function timeBonus(uint256 time) public view returns (uint256) {\r\n        if (time >= bonusPeriod) {\r\n            return uint256(10**BONUS_DECIMALS).add(bonusMax);\r\n        }\r\n\r\n        // linearly interpolate between bonus min and bonus max\r\n        uint256 bonus = bonusMin.add(\r\n            (bonusMax.sub(bonusMin)).mul(time).div(bonusPeriod)\r\n        );\r\n        return uint256(10**BONUS_DECIMALS).add(bonus);\r\n    }\r\n\r\n    /**\r\n     * @notice compute GYSR bonus as a function of usage ratio and GYSR spent\r\n     * @param gysr number of GYSR token applied to bonus\r\n     * @return multiplier value\r\n     */\r\n    function gysrBonus(uint256 gysr) public view returns (uint256) {\r\n        if (gysr == 0) {\r\n            return 10**BONUS_DECIMALS;\r\n        }\r\n        require(\r\n            gysr >= 10**BONUS_DECIMALS,\r\n            \"Geyser: GYSR amount is between 0 and 1\"\r\n        );\r\n\r\n        uint256 buffer = uint256(10**(BONUS_DECIMALS - 2)); // 0.01\r\n        uint256 r = ratio().add(buffer);\r\n        uint256 x = gysr.add(buffer);\r\n\r\n        return\r\n            uint256(10**BONUS_DECIMALS).add(\r\n                uint256(int128(x.mul(2**64).div(r)).logbase10())\r\n                    .mul(10**BONUS_DECIMALS)\r\n                    .div(2**64)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @return portion of rewards which have been boosted by GYSR token\r\n     */\r\n    function ratio() public view returns (uint256) {\r\n        if (totalRewards == 0) {\r\n            return 0;\r\n        }\r\n        return totalGysrRewards.mul(10**BONUS_DECIMALS).div(totalRewards);\r\n    }\r\n\r\n    // Geyser -- informational functions\r\n\r\n    /**\r\n     * @return total number of locked reward tokens\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return total number of unlocked reward tokens\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return number of active funding schedules\r\n     */\r\n    function fundingCount() public view returns (uint256) {\r\n        return fundings.length;\r\n    }\r\n\r\n    /**\r\n     * @param addr address of interest\r\n     * @return number of active stakes for user\r\n     */\r\n    function stakeCount(address addr) public view returns (uint256) {\r\n        return userStakes[addr].length;\r\n    }\r\n\r\n    /**\r\n     * @notice preview estimated reward distribution for full unstake with no GYSR applied\r\n     * @return estimated reward\r\n     * @return estimated overall multiplier\r\n     * @return estimated raw user share seconds that would be burned\r\n     * @return estimated total unlocked rewards\r\n     */\r\n    function preview()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return preview(msg.sender, totalStakedFor(msg.sender), 0);\r\n    }\r\n\r\n    /**\r\n     * @notice preview estimated reward distribution for unstaking\r\n     * @param addr address of interest for preview\r\n     * @param amount number of tokens that would be unstaked\r\n     * @param gysr number of GYSR tokens that would be applied\r\n     * @return estimated reward\r\n     * @return estimated overall multiplier\r\n     * @return estimated raw user share seconds that would be burned\r\n     * @return estimated total unlocked rewards\r\n     */\r\n    function preview(\r\n        address addr,\r\n        uint256 amount,\r\n        uint256 gysr\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // compute expected updates to global totals\r\n        uint256 deltaUnlocked = 0;\r\n        if (totalLockedShares != 0) {\r\n            uint256 sharesToUnlock = 0;\r\n            for (uint256 i = 0; i < fundings.length; i++) {\r\n                sharesToUnlock = sharesToUnlock.add(_unlockable(i));\r\n            }\r\n            deltaUnlocked = sharesToUnlock.mul(totalLocked()).div(\r\n                totalLockedShares\r\n            );\r\n        }\r\n\r\n        // no need for unstaking/rewards computation\r\n        if (amount == 0) {\r\n            return (0, 0, 0, totalUnlocked().add(deltaUnlocked));\r\n        }\r\n\r\n        // check unstake amount\r\n        require(\r\n            amount <= totalStakedFor(addr),\r\n            \"Geyser: preview amount exceeds balance\"\r\n        );\r\n\r\n        // compute unstake amount in shares\r\n        uint256 shares = totalStakingShares.mul(amount).div(totalStaked());\r\n        require(shares > 0, \"Geyser: preview amount too small\");\r\n\r\n        uint256 rawShareSeconds = 0;\r\n        uint256 timeBonusShareSeconds = 0;\r\n\r\n        // compute first-in-last-out, time bonus weighted, share seconds\r\n        uint256 i = userStakes[addr].length.sub(1);\r\n        while (shares > 0) {\r\n            Stake storage s = userStakes[addr][i];\r\n            uint256 time = block.timestamp.sub(s.timestamp);\r\n\r\n            if (s.shares < shares) {\r\n                rawShareSeconds = rawShareSeconds.add(s.shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    s.shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shares = shares.sub(s.shares);\r\n            } else {\r\n                rawShareSeconds = rawShareSeconds.add(shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                break;\r\n            }\r\n            // this will throw on underflow\r\n            i = i.sub(1);\r\n        }\r\n\r\n        // apply gysr bonus\r\n        uint256 gysrBonusShareSeconds = gysrBonus(gysr)\r\n            .mul(timeBonusShareSeconds)\r\n            .div(10**BONUS_DECIMALS);\r\n\r\n        // compute rewards based on expected updates\r\n        uint256 expectedTotalShareSeconds = totalStakingShareSeconds\r\n            .add((block.timestamp.sub(lastUpdated)).mul(totalStakingShares))\r\n            .add(gysrBonusShareSeconds)\r\n            .sub(rawShareSeconds);\r\n\r\n        uint256 reward = (totalUnlocked().add(deltaUnlocked))\r\n            .mul(gysrBonusShareSeconds)\r\n            .div(expectedTotalShareSeconds);\r\n\r\n        // compute effective bonus\r\n        uint256 bonus = uint256(10**BONUS_DECIMALS)\r\n            .mul(gysrBonusShareSeconds)\r\n            .div(rawShareSeconds);\r\n\r\n        return (\r\n            reward,\r\n            bonus,\r\n            rawShareSeconds,\r\n            totalUnlocked().add(deltaUnlocked)\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/GeyserFactory.sol\r\n\r\n/*\r\nGeyser Factory\r\n\r\nThis implements the Geyser factory contract which allows any user to\r\neasily configure and deploy their own Geyser\r\n\r\nhttps://github.com/gysr-io/core\r\n\r\n\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract GeyserFactory is IGeyserFactory {\r\n    // fields\r\n    mapping(address => bool) public map;\r\n    address[] public list;\r\n    address private _gysr;\r\n\r\n    /**\r\n     * @param gysr_ address of GYSR token\r\n     */\r\n    constructor(address gysr_) public {\r\n        _gysr = gysr_;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IGeyserFactory\r\n     */\r\n    function create(\r\n        address stakingToken,\r\n        address rewardToken,\r\n        uint256 bonusMin,\r\n        uint256 bonusMax,\r\n        uint256 bonusPeriod\r\n    ) public override returns (address) {\r\n        // create\r\n        Geyser geyser = new Geyser(\r\n            stakingToken,\r\n            rewardToken,\r\n            bonusMin,\r\n            bonusMax,\r\n            bonusPeriod,\r\n            _gysr\r\n        );\r\n        geyser.transferOwnership(msg.sender);\r\n\r\n        // bookkeeping\r\n        map[address(geyser)] = true;\r\n        list.push(address(geyser));\r\n\r\n        // output\r\n        emit GeyserCreated(msg.sender, address(geyser));\r\n        return address(geyser);\r\n    }\r\n\r\n    /**\r\n     * @return total number of Geysers created by the factory\r\n     */\r\n    function count() public view returns (uint256) {\r\n        return list.length;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gysr_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"geyser\",\"type\":\"address\"}],\"name\":\"GeyserCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriod\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"map\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GeyserFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000bea98c05eeae2f3bc8c3565db7551eb738c8ccab","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4412417dd9b4bbb305db7a065e164ee357771b09595a79c984d5ce126adaa507"}]}