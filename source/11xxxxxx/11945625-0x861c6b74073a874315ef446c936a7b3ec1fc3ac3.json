{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nabstract contract ERC20Interface {\\n    function totalSupply() public virtual view returns (uint);\\n    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\\n    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\\n    function transfer(address to, uint256 tokens) public virtual returns (bool success);\\n    function approve(address spender, uint256 tokens) public virtual returns (bool success);\\n    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\\n}\"},\"farming.sol\":{\"content\":\"//SPDX-LICENSE-IDENTIFIER: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./LittleLink.sol\\\";\\nimport \\\"./ERC20Interface.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract farming is Owned{\\n    \\n    using SafeMath for uint256;\\n    \\n    uint256 public yieldCollectionFee = 0.05 ether;\\n    uint256 public stakingPeriod = 30 days;\\n    uint256 public stakeClaimFee = 0.05 ether;\\n    uint256 public minStakeLimit = 300 * 10 **(18); // 300 LITTLE\\n    uint256 public totalYield;\\n    uint256 public totalRewards;\\n    \\n    LittleLink public little;\\n    \\n    struct Tokens{\\n        bool exists;\\n        uint256 rate;\\n    }\\n    \\n    mapping(address =\\u003e Tokens) public tokens;\\n    address[] TokensAddresses;\\n    address governance;\\n    \\n    struct DepositedToken{\\n        bool    whitelisted;\\n        uint256 activeDeposit;\\n        uint256 totalDeposits;\\n        uint256 startTime;\\n        uint256 pendingGains;\\n        uint256 lastClaimedDate;\\n        uint256 totalGained;\\n        uint    rate;\\n        uint    period;\\n    }\\n    \\n    mapping(address =\\u003e mapping(address =\\u003e DepositedToken)) users;\\n    \\n    event TokenAdded(address indexed tokenAddress, uint256 indexed APY);\\n    event TokenRemoved(address indexed tokenAddress, uint256 indexed APY);\\n    event FarmingRateChanged(address indexed tokenAddress, uint256 indexed newAPY);\\n    event YieldCollectionFeeChanged(uint256 indexed yieldCollectionFee);\\n    event FarmingStarted(address indexed _tokenAddress, uint256 indexed _amount);\\n    event YieldCollected(address indexed _tokenAddress, uint256 indexed _yield);\\n    event AddedToExistingFarm(address indexed _tokenAddress, uint256 indexed tokens);\\n    \\n    event Staked(address indexed staker, uint256 indexed tokens);\\n    event AddedToExistingStake(address indexed staker, uint256 indexed tokens);\\n    event StakingRateChanged(uint256 indexed newAPY);\\n    event TokensClaimed(address indexed claimer, uint256 indexed stakedTokens);\\n    event RewardClaimed(address indexed claimer, uint256 indexed reward);\\n    \\n    event GovernanceSet(address indexed governanceAddress);\\n    \\n    modifier validStake(uint256 stakeAmount){\\n        require(stakeAmount \\u003e= minStakeLimit, \\\"stake amount should be equal/greater than min stake limit\\\");\\n        _;\\n    }\\n    \\n    modifier OwnerOrGovernance(address _caller){\\n        require(_caller == owner || _caller == governance);\\n        _;\\n    }\\n    \\n    constructor(address _tokenAddress) public {\\n        little = LittleLink(_tokenAddress);\\n        \\n        // add little token to ecosystem\\n        _addToken(_tokenAddress, 40); // 40 apy initially\\n    }\\n    \\n    function Farm(address _tokenAddress, uint256 _amount) external{\\n        require(_tokenAddress != address(little), \\\"Use staking instead\\\"); \\n        \\n        // add to farm\\n        _newDeposit(_tokenAddress, _amount);\\n        \\n        // transfer tokens from user to the contract balance\\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender, address(this), _amount));\\n        \\n        emit FarmingStarted(_tokenAddress, _amount);\\n    }\\n    \\n    function AddToFarm(address _tokenAddress, uint256 _amount) external{\\n        require(_tokenAddress != address(little), \\\"use staking instead\\\");\\n        _addToExisting(_tokenAddress, _amount);\\n        \\n        // move the tokens from the caller to the contract address\\n        require(ERC20Interface(_tokenAddress).transferFrom(msg.sender,address(this), _amount));\\n        \\n        emit AddedToExistingFarm(_tokenAddress, _amount);\\n    }\\n    \\n    function Yield(address _tokenAddress) external payable {\\n        require(msg.value \\u003e= yieldCollectionFee, \\\"should pay exact claim fee\\\");\\n        require(PendingYield(_tokenAddress, msg.sender) \\u003e 0, \\\"No pending yield\\\");\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\n        require(_tokenAddress != address(little), \\\"use staking instead\\\");\\n    \\n        uint256 _pendingYield = PendingYield(_tokenAddress, msg.sender);\\n        \\n        // Global stats update\\n        totalYield = totalYield.add(_pendingYield);\\n        \\n        // update the record\\n        users[msg.sender][_tokenAddress].totalGained = users[msg.sender][_tokenAddress].totalGained.add(_pendingYield);\\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\\n        users[msg.sender][_tokenAddress].pendingGains = 0;\\n        \\n        // transfer fee to the owner\\n        owner.transfer(msg.value);\\n        \\n        // mint more tokens inside token contract equivalent to _pendingYield\\n        require(little.MintTokens(_pendingYield, msg.sender));\\n        \\n        emit YieldCollected(_tokenAddress, _pendingYield);\\n    }\\n    \\n    function WithdrawFarmedTokens(address _tokenAddress, uint256 _amount) external {\\n        require(users[msg.sender][_tokenAddress].activeDeposit \\u003e= _amount, \\\"insufficient amount in farming\\\");\\n        require(_tokenAddress != address(little), \\\"use withdraw of staking instead\\\");\\n        \\n        // update farming stats\\n            // check if we have any pending yield, add it to previousYield var\\n            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\n            // update amount \\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.sub(_amount);\\n            // update farming start time -- new farming will begin from this time onwards\\n            users[msg.sender][_tokenAddress].startTime = now;\\n            // reset last claimed figure as well -- new farming will begin from this time onwards\\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\\n        \\n        // withdraw the tokens and move from contract to the caller\\n        require(ERC20Interface(_tokenAddress).transfer(msg.sender, _amount));\\n        \\n        emit TokensClaimed(msg.sender, _amount);\\n    }\\n    \\n    function Stake(uint256 _amount) external validStake(_amount) {\\n        // add new stake\\n        _newDeposit(address(little), _amount);\\n        \\n        // transfer tokens from user to the contract balance\\n        require(little.transferFrom(msg.sender, address(this), _amount));\\n        \\n        emit Staked(msg.sender, _amount);\\n        \\n    }\\n    \\n    function AddToStake(uint256 _amount) external {\\n        require(now - users[msg.sender][address(little)].startTime \\u003c users[msg.sender][address(little)].period, \\\"current staking expired\\\");\\n        _addToExisting(address(little), _amount);\\n\\n        // move the tokens from the caller to the contract address\\n        require(little.transferFrom(msg.sender,address(this), _amount));\\n        \\n        emit AddedToExistingStake(msg.sender, _amount);\\n    }\\n    \\n    function ClaimStakedTokens() external {\\n        //require(users[msg.sender][address(little)].running, \\\"no running stake\\\");\\n        require(users[msg.sender][address(little)].activeDeposit \\u003e 0, \\\"no running stake\\\");\\n        require(users[msg.sender][address(little)].startTime.add(users[msg.sender][address(little)].period) \\u003c now, \\\"not claimable before staking period\\\");\\n        \\n        uint256 _currentDeposit = users[msg.sender][address(little)].activeDeposit;\\n        \\n        // check if we have any pending reward, add it to pendingGains var\\n        users[msg.sender][address(little)].pendingGains = PendingReward(msg.sender);\\n        // update amount \\n        users[msg.sender][address(little)].activeDeposit = 0;\\n        \\n        // transfer staked tokens\\n        require(little.transfer(msg.sender, _currentDeposit));\\n        \\n        emit TokensClaimed(msg.sender, _currentDeposit);\\n        \\n    }\\n    \\n    function ClaimReward() external payable {\\n        require(msg.value \\u003e= stakeClaimFee, \\\"should pay exact claim fee\\\");\\n        require(PendingReward(msg.sender) \\u003e 0, \\\"nothing pending to claim\\\");\\n    \\n        uint256 _pendingReward = PendingReward(msg.sender);\\n        \\n        // add claimed reward to global stats\\n        totalRewards = totalRewards.add(_pendingReward);\\n        // add the reward to total claimed rewards\\n        users[msg.sender][address(little)].totalGained = users[msg.sender][address(little)].totalGained.add(_pendingReward);\\n        // update lastClaim amount\\n        users[msg.sender][address(little)].lastClaimedDate = now;\\n        // reset previous rewards\\n        users[msg.sender][address(little)].pendingGains = 0;\\n        \\n        // transfer the claim fee to the owner\\n        owner.transfer(msg.value);\\n        \\n        // mint more tokens inside token contract\\n        require(little.MintTokens(_pendingReward, msg.sender));\\n         \\n        emit RewardClaimed(msg.sender, _pendingReward);\\n    }\\n    \\n    function PendingYield(address _tokenAddress, address _caller) public view returns(uint256 _pendingRewardWeis){\\n        uint256 _totalFarmingTime = now.sub(users[_caller][_tokenAddress].lastClaimedDate);\\n        \\n        uint256 _reward_token_second = ((tokens[_tokenAddress].rate).mul(10 ** 21)).div(365 days); // added extra 10^21\\n        \\n        uint256 yield = ((users[_caller][_tokenAddress].activeDeposit).mul(_totalFarmingTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // 10^2 are for 100 (%)\\n        \\n        return yield.add(users[_caller][_tokenAddress].pendingGains);\\n    }\\n    \\n    function ActiveFarmDeposit(address _tokenAddress, address _user) external view returns(uint256 _activeDeposit){\\n        return users[_user][_tokenAddress].activeDeposit;\\n    }\\n    \\n    function YourTotalFarmingTillToday(address _tokenAddress, address _user) external view returns(uint256 _totalFarming){\\n        return users[_user][_tokenAddress].totalDeposits;\\n    }\\n    \\n    function LastFarmedOn(address _tokenAddress, address _user) external view returns(uint256 _unixLastFarmedTime){\\n        return users[_user][_tokenAddress].startTime;\\n    }\\n    \\n    function TotalFarmingRewards(address _tokenAddress, address _user) external view returns(uint256 _totalEarned){\\n        return users[_user][_tokenAddress].totalGained;\\n    }\\n    \\n    function setGovernanceContract(address _govAddress) external onlyOwner {\\n        governance = _govAddress;\\n        emit GovernanceSet(_govAddress);\\n    }\\n    \\n    function AddToken(address _tokenAddress, uint256 _rate) public OwnerOrGovernance(msg.sender) {\\n        _addToken(_tokenAddress, _rate);\\n    }\\n    \\n    function RemoveToken(address _tokenAddress) public OwnerOrGovernance(msg.sender) {\\n        \\n        require(tokens[_tokenAddress].exists, \\\"token doesn\\u0027t exist\\\");\\n        \\n        tokens[_tokenAddress].exists = false;\\n        \\n        emit TokenRemoved(_tokenAddress, tokens[_tokenAddress].rate);\\n    }\\n    \\n    function ChangeFarmingRate(address _tokenAddress, uint256 _newFarmingRate) public OwnerOrGovernance(msg.sender) {\\n        \\n        require(tokens[_tokenAddress].exists, \\\"token doesn\\u0027t exist\\\");\\n        \\n        tokens[_tokenAddress].rate = _newFarmingRate;\\n        \\n        emit FarmingRateChanged(_tokenAddress, _newFarmingRate);\\n    }\\n\\n    function SetYieldCollectionFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\\n        yieldCollectionFee = _fee;\\n        emit YieldCollectionFeeChanged(_fee);\\n    }\\n    \\n    function PendingReward(address _caller) public view returns(uint256 _pendingReward){\\n        uint256 _totalStakedTime = 0;\\n        uint256 expiryDate = (users[_caller][address(little)].period).add(users[_caller][address(little)].startTime);\\n        \\n        if(now \\u003c expiryDate)\\n            _totalStakedTime = now.sub(users[_caller][address(little)].lastClaimedDate);\\n        else{\\n            if(users[_caller][address(little)].lastClaimedDate \\u003e= expiryDate) // if claimed after expirydate already\\n                _totalStakedTime = 0;\\n            else\\n                _totalStakedTime = expiryDate.sub(users[_caller][address(little)].lastClaimedDate);\\n        }\\n            \\n        uint256 _reward_token_second = ((users[_caller][address(little)].rate).mul(10 ** 21)); // added extra 10^21\\n        uint256 reward =  ((users[_caller][address(little)].activeDeposit).mul(_totalStakedTime.mul(_reward_token_second))).div(10 ** 27); // remove extra 10^21 // the two extra 10^2 is for 100 (%) // another two extra 10^4 is for decimals to be allowed\\n        reward = reward.div(365 days);\\n        return (reward.add(users[_caller][address(little)].pendingGains));\\n    }\\n    \\n    function YourActiveStake(address _user) external view returns(uint256 _activeStake){\\n        return users[_user][address(little)].activeDeposit;\\n    }\\n    \\n    function YourTotalStakesTillToday(address _user) external view returns(uint256 _totalStakes){\\n        return users[_user][address(little)].totalDeposits;\\n    }\\n    \\n    function LastStakedOn(address _user) public view returns(uint256 _unixLastStakedTime){\\n        return users[_user][address(little)].startTime;\\n    }\\n    \\n    function TotalStakeRewardsClaimedTillToday(address _user) external view returns(uint256 _totalEarned){\\n        return users[_user][address(little)].totalGained;\\n    }\\n    \\n    function LatestStakingRate() external view returns(uint256 APY){\\n        return tokens[address(little)].rate;\\n    }\\n    \\n    function YourStakingRate(address _user) external view returns(uint256 _stakingRate){\\n        return users[_user][address(little)].rate;\\n    }\\n    \\n    function YourStakingPeriod(address _user) external view returns(uint256 _stakingPeriod){\\n        return users[_user][address(little)].period;\\n    }\\n    \\n    function StakingTimeLeft(address _user) external view returns(uint256 _secsLeft){\\n        uint256 left = 0; \\n        uint256 expiryDate = (users[_user][address(little)].period).add(LastStakedOn(_user));\\n        \\n        if(now \\u003c expiryDate)\\n            left = expiryDate.sub(now);\\n            \\n        return left;\\n    }\\n    \\n    function ChangeStakingRate(uint256 _newStakingRate) public OwnerOrGovernance(msg.sender){\\n        \\n        tokens[address(little)].rate = _newStakingRate;\\n        \\n        emit StakingRateChanged(_newStakingRate);\\n    }\\n    \\n    function SetMinStakeLimit(uint256 _minStakeLimit) public OwnerOrGovernance(msg.sender){\\n       minStakeLimit = _minStakeLimit;\\n    }\\n    \\n    function SetStakingPeriod(uint256 _seconds) public OwnerOrGovernance(msg.sender){\\n       stakingPeriod = _seconds;\\n    }\\n    \\n    function SetClaimFee(uint256 _fee) public OwnerOrGovernance(msg.sender){\\n       stakeClaimFee = _fee;\\n    }\\n    \\n    function _newDeposit(address _tokenAddress, uint256 _amount) internal{\\n        require(users[msg.sender][_tokenAddress].activeDeposit ==  0, \\\"Already running\\\");\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\n        \\n        // add that token into the contract balance\\n        // check if we have any pending reward/yield, add it to pendingGains variable\\n        if(_tokenAddress == address(little)){\\n            users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\\n            users[msg.sender][_tokenAddress].period = stakingPeriod;\\n            users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate for stakers will be fixed at time of staking\\n        }\\n        else\\n            users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\n            \\n        users[msg.sender][_tokenAddress].activeDeposit = _amount;\\n        users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\\n        users[msg.sender][_tokenAddress].startTime = now;\\n        users[msg.sender][_tokenAddress].lastClaimedDate = now;\\n        \\n    }\\n\\n    function _addToExisting(address _tokenAddress, uint256 _amount) internal{\\n        require(tokens[_tokenAddress].exists, \\\"Token doesn\\u0027t exist\\\");\\n        // require(users[msg.sender][_tokenAddress].running, \\\"no running farming/stake\\\");\\n        require(users[msg.sender][_tokenAddress].activeDeposit \\u003e 0, \\\"no running farming/stake\\\");\\n        // update farming stats\\n            // check if we have any pending reward/yield, add it to pendingGains variable\\n            if(_tokenAddress == address(little)){\\n                users[msg.sender][_tokenAddress].pendingGains = PendingReward(msg.sender);\\n                users[msg.sender][_tokenAddress].period = stakingPeriod;\\n                users[msg.sender][_tokenAddress].rate = tokens[_tokenAddress].rate; // rate of only staking will be updated when more is added to stake\\n            }\\n            else\\n                users[msg.sender][_tokenAddress].pendingGains = PendingYield(_tokenAddress, msg.sender);\\n            // update current deposited amount \\n            users[msg.sender][_tokenAddress].activeDeposit = users[msg.sender][_tokenAddress].activeDeposit.add(_amount);\\n            // update total deposits till today\\n            users[msg.sender][_tokenAddress].totalDeposits = users[msg.sender][_tokenAddress].totalDeposits.add(_amount);\\n            // update new deposit start time -- new stake/farming will begin from this time onwards\\n            users[msg.sender][_tokenAddress].startTime = now;\\n            // reset last claimed figure as well -- new stake/farming will begin from this time onwards\\n            users[msg.sender][_tokenAddress].lastClaimedDate = now;\\n    }\\n\\n    function _addToken(address _tokenAddress, uint256 _rate) internal{\\n        require(!tokens[_tokenAddress].exists, \\\"token already exists\\\");\\n        \\n        tokens[_tokenAddress] = Tokens({\\n            exists: true,\\n            rate: _rate\\n        });\\n        \\n        TokensAddresses.push(_tokenAddress);\\n        emit TokenAdded(_tokenAddress, _rate);\\n    }\\n}\\n\"},\"LittleLink.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./ERC20Interface.sol\\u0027;\\nimport \\u0027./Owned.sol\\u0027;\\n\\ncontract LittleLink is ERC20Interface, Owned {\\n    using SafeMath for uint256;\\n    string public symbol = \\\"LITTLE\\\";\\n    string public  name = \\\"LITTLE LINK\\\";\\n    uint256 public decimals = 18;\\n    uint256 private maxCapSupply = 2000000 * 10**(decimals); // 1 million\\n    uint256 _totalSupply = 100000 * 10 ** (decimals); // 100,000\\n    address farming;\\n    \\n    mapping(address =\\u003e uint256) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) allowed;\\n    \\n    constructor() public {\\n        balances[owner] = balances[owner].add(_totalSupply);\\n        emit Transfer(address(0),owner, _totalSupply);\\n    }\\n    \\n    function SetFarming(address _address) external onlyOwner{\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        farming = _address;\\n    }\\n    \\n    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\\n        require(msg.sender == farming);\\n        require(_beneficiary != address(0), \\\"Invalid address\\\");\\n        require(_totalSupply.add(_amount) \\u003c= maxCapSupply, \\\"exceeds max cap supply 2 million\\\");\\n        _totalSupply = _totalSupply.add(_amount);\\n        \\n        balances[_beneficiary] = balances[_beneficiary].add(_amount);\\n        \\n        emit Transfer(address(0),_beneficiary, _amount);\\n        return true;\\n    }\\n    \\n    function BurnTokens(uint256 _amount) external {\\n        _burn(_amount, msg.sender);\\n    }\\n\\n    function _burn(uint256 _amount, address _account) internal {\\n        require(balances[_account] \\u003e= _amount, \\\"insufficient account balance\\\");\\n        _totalSupply = _totalSupply.sub(_amount);\\n        balances[_account] = balances[_account].sub(_amount);\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n    \\n    function totalSupply() public override view returns (uint256){\\n       return _totalSupply; \\n    }\\n    \\n    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\\n        return balances[tokenOwner];\\n    }\\n\\n    function transfer(address to, uint256 tokens) public override returns  (bool success) {\\n        require(address(to) != address(0));\\n        require(balances[msg.sender] \\u003e= tokens );\\n        require(balances[to].add(tokens) \\u003e= balances[to]);\\n            \\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        emit Transfer(msg.sender,to,tokens);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\\n        require(tokens \\u003c= allowed[from][msg.sender]); //check allowance\\n        require(balances[from] \\u003e= tokens);\\n        require(from != address(0), \\\"Invalid address\\\");\\n        require(to != address(0), \\\"Invalid address\\\");\\n        \\n        balances[from] = balances[from].sub(tokens);\\n        balances[to] = balances[to].add(tokens);\\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\n        emit Transfer(from,to,tokens);\\n        return true;\\n    }\\n    \\n    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\\n        return allowed[tokenOwner][spender];\\n    }\\n    \\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n    \\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\ncontract Owned {\\n    address payable public owner;\\n\\n    event OwnershipTransferred(address indexed _from, address indexed _to);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\n        owner = _newOwner;\\n        emit OwnershipTransferred(msg.sender, _newOwner);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.0;\\n\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n  \\n  function ceil(uint a, uint m) internal pure returns (uint r) {\\n    return (a + m - 1) / m * m;\\n  }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddedToExistingStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"FarmingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FarmingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"StakingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yieldCollectionFee\",\"type\":\"uint256\"}],\"name\":\"YieldCollectionFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ActiveFarmDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddToFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFarmingRate\",\"type\":\"uint256\"}],\"name\":\"ChangeFarmingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingRate\",\"type\":\"uint256\"}],\"name\":\"ChangeStakingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimStakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LastFarmedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastFarmedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"LastStakedOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unixLastStakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LatestStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"PendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingRewardWeis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeLimit\",\"type\":\"uint256\"}],\"name\":\"SetMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"SetStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetYieldCollectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"StakingTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_secsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalFarmingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"TotalStakeRewardsClaimedTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFarmedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"Yield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourStakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourStakingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalFarmingTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalFarming\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"YourTotalStakesTillToday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"little\",\"outputs\":[{\"internalType\":\"contract LittleLink\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeClaimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"farming","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d11661e777ab144cf2e7ef899d0df0af4982006f","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://addfe76a0e973aba355e125aeabdf2111bd332e46b464f996a071e21da1843db"}]}