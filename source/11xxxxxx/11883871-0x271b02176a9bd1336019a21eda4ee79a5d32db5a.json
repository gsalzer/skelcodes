{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\r\n          ...'..     .';;;;;;;;;;;;;;,,,'.\r\n                       ...............\r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/common/Initializable.sol\r\n\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/common/UpgradeableOwnable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n\r\n// import {Initializable} from \"contracts/truefi/common/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ILoanToken.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILoanToken is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function borrowerFee() external view returns (uint256);\r\n\r\n    function receivedAmount() external view returns (uint256);\r\n\r\n    function isLoanToken() external pure returns (bool);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function close() external;\r\n\r\n    function liquidate() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function reclaim() external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    function version() external pure returns (uint8);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueFiPool.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * TruePool is an ERC20 which represents a share of a pool\r\n *\r\n * This contract can be used to wrap opportunities to be compatible\r\n * with TrueFi and allow users to directly opt-in through the TUSD contract\r\n *\r\n * Each TruePool is also a staking opportunity for TRU\r\n */\r\ninterface ITrueFiPool is IERC20 {\r\n    /// @dev pool token (TUSD)\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    /// @dev stake token (TRU)\r\n    function stakeToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Mint pool tokens based on value to sender\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev exit pool\r\n     * 1. Transfer pool tokens from sender\r\n     * 2. Burn pool tokens\r\n     * 3. Transfer value of pool tokens in TUSD to sender\r\n     */\r\n    function exit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount, uint256 fee) external;\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueLender.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITrueLender {\r\n    function value() external view returns (uint256);\r\n\r\n    function distribute(\r\n        address recipient,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ITrueRatingAgency.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITrueRatingAgency {\r\n    function getResults(address id)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function submit(address id) external;\r\n\r\n    function retract(address id) external;\r\n\r\n    function yes(address id, uint256 stake) external;\r\n\r\n    function no(address id, uint256 stake) external;\r\n\r\n    function withdraw(address id, uint256 stake) external;\r\n\r\n    function claim(address id, address voter) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/IStakingPool.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IStakingPool is IERC20 {\r\n    function stakeSupply() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function payFee(uint256 amount, uint256 endTime) external;\r\n}\r\n\r\n\r\n// Root file: contracts/truefi/TrueLender.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import {Ownable} from \"contracts/truefi/common/UpgradeableOwnable.sol\";\r\n// import {ILoanToken} from \"contracts/truefi/interface/ILoanToken.sol\";\r\n// import {ITrueFiPool} from \"contracts/truefi/interface/ITrueFiPool.sol\";\r\n// import {ITrueLender} from \"contracts/truefi/interface/ITrueLender.sol\";\r\n// import {ITrueRatingAgency} from \"contracts/truefi/interface/ITrueRatingAgency.sol\";\r\n// import {IStakingPool} from \"contracts/truefi/interface/IStakingPool.sol\";\r\n\r\n/**\r\n * @title TrueLender v1.0\r\n * @dev TrueFi Lending Strategy\r\n * This contract implements the lending strategy for the TrueFi pool\r\n * The strategy takes into account several parameters and consumes\r\n * information from the prediction market in order to approve loans\r\n *\r\n * This strategy is conservative to avoid defaults.\r\n * See: https://github.com/trusttoken/truefi-spec\r\n *\r\n * 1. Only approve loans which have the following inherent properties:\r\n * - minAPY <= loanAPY <= maxAPY\r\n * - minSize <= loanSize <= maxSize\r\n * - minTerm <= loanTerm <= maxTerm\r\n *\r\n * 2. Only approve loans which have been rated in the prediction market under the conditions:\r\n * - timeInMarket >= votingPeriod\r\n * - stakedTRU > (participationFactor * loanSize)\r\n * - 1 < ( interest * P(loan_repaid) - (loanSize * riskAversion * P(loan_defaults))\r\n *\r\n * Once a loan meets these requirements, fund() can be called to transfer\r\n * funds from the pool to the LoanToken contract\r\n */\r\ncontract TrueLender is ITrueLender, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    mapping(address => bool) public allowedBorrowers;\r\n    ILoanToken[] _loans;\r\n\r\n    ITrueFiPool public pool;\r\n    IERC20 public currencyToken;\r\n    ITrueRatingAgency public ratingAgency;\r\n\r\n    uint256 private constant TOKEN_PRECISION_DIFFERENCE = 10**10;\r\n\r\n    // ===== Pool parameters =====\r\n\r\n    // bound on APY\r\n    uint256 public minApy;\r\n    uint256 public maxApy;\r\n\r\n    // How many votes in predction market\r\n    uint256 public participationFactor;\r\n\r\n    // How much worse is it to lose $1 TUSD than it is to gain $1 TUSD\r\n    uint256 public riskAversion;\r\n\r\n    // bound on min & max loan sizes\r\n    uint256 public minSize;\r\n    uint256 public maxSize;\r\n\r\n    // bound on min & max loan terms\r\n    uint256 public minTerm;\r\n    uint256 public maxTerm;\r\n\r\n    // minimum prediction market voting period\r\n    uint256 public votingPeriod;\r\n\r\n    // maximum amount of loans lender can handle at once\r\n    uint256 public maxLoans;\r\n\r\n    // implemented as an ERC20, will change after implementing stkPool\r\n    IStakingPool public stakingPool;\r\n\r\n    // ======= STORAGE DECLARATION END ============\r\n\r\n    /**\r\n     * @dev Emitted when a borrower's whitelist status changes\r\n     * @param who Address for which whitelist status has changed\r\n     * @param status New whitelist status\r\n     */\r\n    event Allowed(address indexed who, bool status);\r\n\r\n    /**\r\n     * @dev Emitted when APY bounds have changed\r\n     * @param minApy New minimum APY\r\n     * @param maxApy New maximum APY\r\n     */\r\n    event ApyLimitsChanged(uint256 minApy, uint256 maxApy);\r\n\r\n    /**\r\n     * @dev Emitted when participation factor changed\r\n     * @param participationFactor New participation factor\r\n     */\r\n    event ParticipationFactorChanged(uint256 participationFactor);\r\n\r\n    /**\r\n     * @dev Emitted when risk aversion changed\r\n     * @param riskAversion New risk aversion factor\r\n     */\r\n    event RiskAversionChanged(uint256 riskAversion);\r\n\r\n    /**\r\n     * @dev Emitted when the minimum voting period is changed\r\n     * @param votingPeriod New voting period\r\n     */\r\n    event VotingPeriodChanged(uint256 votingPeriod);\r\n\r\n    /**\r\n     * @dev Emitted when the loan size bounds are changed\r\n     * @param minSize New minimum loan size\r\n     * @param maxSize New maximum loan size\r\n     */\r\n    event SizeLimitsChanged(uint256 minSize, uint256 maxSize);\r\n\r\n    /**\r\n     * @dev Emitted when loan term bounds are changed\r\n     * @param minTerm New minimum loan term\r\n     * @param maxTerm New minimum loan term\r\n     */\r\n    event TermLimitsChanged(uint256 minTerm, uint256 maxTerm);\r\n\r\n    /**\r\n     * @dev Emitted when loans limit is changed\r\n     * @param maxLoans new maximum amount of loans\r\n     */\r\n    event LoansLimitChanged(uint256 maxLoans);\r\n\r\n    /**\r\n     * @dev Emitted when stakingPool address is changed\r\n     * @param pool new stakingPool address\r\n     */\r\n    event StakingPoolChanged(IStakingPool pool);\r\n\r\n    /**\r\n     * @dev Emitted when a loan is funded\r\n     * @param loanToken LoanToken contract which was funded\r\n     * @param amount Amount funded\r\n     */\r\n    event Funded(address indexed loanToken, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are reclaimed from the LoanToken contract\r\n     * @param loanToken LoanToken from which funds were reclaimed\r\n     * @param amount Amount repaid\r\n     */\r\n    event Reclaimed(address indexed loanToken, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when rating agency contract is changed\r\n     * @param newRatingAgency Address of new rating agency\r\n     */\r\n    event RatingAgencyChanged(address newRatingAgency);\r\n\r\n    /**\r\n     * @dev Modifier for only lending pool\r\n     */\r\n    modifier onlyPool() {\r\n        require(msg.sender == address(pool), \"TrueLender: Sender is not a pool\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initalize the contract with parameters\r\n     * @param _pool Lending pool address\r\n     * @param _ratingAgency Prediction market address\r\n     */\r\n    function initialize(\r\n        ITrueFiPool _pool,\r\n        ITrueRatingAgency _ratingAgency,\r\n        IStakingPool _stakingPool\r\n    ) public initializer {\r\n        Ownable.initialize();\r\n\r\n        pool = _pool;\r\n        currencyToken = _pool.currencyToken();\r\n        currencyToken.approve(address(_pool), uint256(-1));\r\n        ratingAgency = _ratingAgency;\r\n        stakingPool = _stakingPool;\r\n\r\n        minApy = 1000;\r\n        maxApy = 3000;\r\n        participationFactor = 10000;\r\n        riskAversion = 15000;\r\n        minSize = 1000000 ether;\r\n        maxSize = 10000000 ether;\r\n        minTerm = 182 days;\r\n        maxTerm = 3650 days;\r\n        votingPeriod = 7 days;\r\n\r\n        maxLoans = 100;\r\n    }\r\n\r\n    /**\r\n     * @dev set stake pool address\r\n     * @param newPool stake pool address to be set\r\n     */\r\n    function setStakingPool(IStakingPool newPool) public onlyOwner {\r\n        stakingPool = newPool;\r\n        emit StakingPoolChanged(newPool);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new bounds on loan size. Only owner can change parameters.\r\n     * @param min New minimum loan size\r\n     * @param max New maximum loan size\r\n     */\r\n    function setSizeLimits(uint256 min, uint256 max) external onlyOwner {\r\n        require(min > 0, \"TrueLender: Minimal loan size cannot be 0\");\r\n        require(max >= min, \"TrueLender: Maximal loan size is smaller than minimal\");\r\n        minSize = min;\r\n        maxSize = max;\r\n        emit SizeLimitsChanged(min, max);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new bounds on loan term length. Only owner can change parameters.\r\n     * @param min New minimum loan term\r\n     * @param max New maximum loan term\r\n     */\r\n    function setTermLimits(uint256 min, uint256 max) external onlyOwner {\r\n        require(max >= min, \"TrueLender: Maximal loan term is smaller than minimal\");\r\n        minTerm = min;\r\n        maxTerm = max;\r\n        emit TermLimitsChanged(min, max);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new bounds on loan APY. Only owner can change parameters.\r\n     * @param newMinApy New minimum loan APY\r\n     * @param newMaxApy New maximum loan APY\r\n     */\r\n    function setApyLimits(uint256 newMinApy, uint256 newMaxApy) external onlyOwner {\r\n        require(newMaxApy >= newMinApy, \"TrueLender: Maximal APY is smaller than minimal\");\r\n        minApy = newMinApy;\r\n        maxApy = newMaxApy;\r\n        emit ApyLimitsChanged(newMinApy, newMaxApy);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new minimum voting period in credit rating market.\r\n     * Only owner can change parameters\r\n     * @param newVotingPeriod new minimum voting period\r\n     */\r\n    function setVotingPeriod(uint256 newVotingPeriod) external onlyOwner {\r\n        votingPeriod = newVotingPeriod;\r\n        emit VotingPeriodChanged(newVotingPeriod);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new participation factor. Only owner can change parameters.\r\n     * @param newParticipationFactor New participation factor.\r\n     */\r\n    function setParticipationFactor(uint256 newParticipationFactor) external onlyOwner {\r\n        participationFactor = newParticipationFactor;\r\n        emit ParticipationFactorChanged(newParticipationFactor);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new risk aversion factor. Only owner can change parameters.\r\n     * @param newRiskAversion New risk aversion factor\r\n     */\r\n    function setRiskAversion(uint256 newRiskAversion) external onlyOwner {\r\n        riskAversion = newRiskAversion;\r\n        emit RiskAversionChanged(newRiskAversion);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new loans limit. Only owner can change parameters.\r\n     * @param newLoansLimit New loans limit\r\n     */\r\n    function setLoansLimit(uint256 newLoansLimit) external onlyOwner {\r\n        maxLoans = newLoansLimit;\r\n        emit LoansLimitChanged(maxLoans);\r\n    }\r\n\r\n    /**\r\n     * @dev Set new rating agency. Only owner can change parameters.\r\n     * @param newRatingAgency New rating agency.\r\n     */\r\n    function setRatingAgency(ITrueRatingAgency newRatingAgency) external onlyOwner {\r\n        ratingAgency = newRatingAgency;\r\n        emit RatingAgencyChanged(address(newRatingAgency));\r\n    }\r\n\r\n    /**\r\n     * @dev Get currently funded loans\r\n     * @return result Array of loans currently funded\r\n     */\r\n    function loans() public view returns (ILoanToken[] memory result) {\r\n        result = _loans;\r\n    }\r\n\r\n    /**\r\n     * @dev Fund a loan which meets the strategy requirements\r\n     * @param loanToken LoanToken to fund\r\n     */\r\n    function fund(ILoanToken loanToken) external {\r\n        require(loanToken.borrower() == msg.sender, \"TrueLender: Sender is not borrower\");\r\n        require(loanToken.isLoanToken(), \"TrueLender: Only LoanTokens can be funded\");\r\n        require(loanToken.currencyToken() == currencyToken, \"TrueLender: Only the same currency LoanTokens can be funded\");\r\n        require(_loans.length < maxLoans, \"TrueLender: Loans number has reached the limit\");\r\n\r\n        (uint256 amount, uint256 apy, uint256 term) = loanToken.getParameters();\r\n        uint256 receivedAmount = loanToken.receivedAmount();\r\n        (uint256 start, uint256 no, uint256 yes) = ratingAgency.getResults(address(loanToken));\r\n\r\n        require(loanSizeWithinBounds(amount), \"TrueLender: Loan size is out of bounds\");\r\n        require(loanTermWithinBounds(term), \"TrueLender: Loan term is out of bounds\");\r\n        require(loanIsAttractiveEnough(apy), \"TrueLender: APY is out of bounds\");\r\n        require(votingLastedLongEnough(start), \"TrueLender: Voting time is below minimum\");\r\n        require(votesThresholdReached(amount, yes), \"TrueLender: Not enough votes given for the loan\");\r\n        require(loanIsCredible(apy, term, yes, no), \"TrueLender: Loan risk is too high\");\r\n\r\n        _loans.push(loanToken);\r\n        pool.borrow(amount, amount.sub(receivedAmount));\r\n        currencyToken.approve(address(loanToken), receivedAmount);\r\n        loanToken.fund();\r\n\r\n        pool.approve(address(stakingPool), pool.balanceOf(address(this)));\r\n        stakingPool.payFee(pool.balanceOf(address(this)), block.timestamp.add(term));\r\n\r\n        emit Funded(address(loanToken), receivedAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Temporary fix for old LoanTokens with incorrect value calculation\r\n     * @param loan Loan to calculate value for\r\n     * @return value of a given loan\r\n     */\r\n    function loanValue(ILoanToken loan) public view returns (uint256) {\r\n        uint256 _balance = loan.balanceOf(address(this));\r\n        if (_balance == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 passed = block.timestamp.sub(loan.start());\r\n        if (passed > loan.term()) {\r\n            passed = loan.term();\r\n        }\r\n\r\n        uint256 helper = loan.amount().mul(loan.apy()).mul(passed).mul(_balance);\r\n        // assume year is 365 days\r\n        uint256 interest = helper.div(365 days).div(10000).div(loan.debt());\r\n\r\n        return loan.amount().mul(_balance).div(loan.debt()).add(interest);\r\n    }\r\n\r\n    /**\r\n     * @dev Loop through loan tokens and calculate theoretical value of all loans\r\n     * There should never be too many loans in the pool to run out of gas\r\n     * @return Theoretical value of all the loans funded by this strategy\r\n     */\r\n    function value() external override view returns (uint256) {\r\n        uint256 totalValue;\r\n        for (uint256 index = 0; index < _loans.length; index++) {\r\n            totalValue = totalValue.add(loanValue(_loans[index]));\r\n        }\r\n        return totalValue;\r\n    }\r\n\r\n    /**\r\n     * @dev For settled loans, redeem LoanTokens for underlying funds\r\n     * @param loanToken Loan to reclaim capital from (must be previously funded)\r\n     */\r\n    function reclaim(ILoanToken loanToken) external {\r\n        require(loanToken.isLoanToken(), \"TrueLender: Only LoanTokens can be used to reclaimed\");\r\n\r\n        ILoanToken.Status status = loanToken.status();\r\n        require(status >= ILoanToken.Status.Settled, \"TrueLender: LoanToken is not closed yet\");\r\n\r\n        if (status != ILoanToken.Status.Settled) {\r\n            require(msg.sender == owner(), \"TrueLender: Only owner can reclaim from defaulted loan\");\r\n        }\r\n\r\n        // call redeem function on LoanToken\r\n        uint256 balanceBefore = currencyToken.balanceOf(address(this));\r\n        loanToken.redeem(loanToken.balanceOf(address(this)));\r\n        uint256 balanceAfter = currencyToken.balanceOf(address(this));\r\n\r\n        // gets reclaimed amount and pays back to pool\r\n        uint256 fundsReclaimed = balanceAfter.sub(balanceBefore);\r\n        pool.repay(fundsReclaimed);\r\n\r\n        // remove loan from loan array\r\n        for (uint256 index = 0; index < _loans.length; index++) {\r\n            if (_loans[index] == loanToken) {\r\n                _loans[index] = _loans[_loans.length - 1];\r\n                _loans.pop();\r\n\r\n                emit Reclaimed(address(loanToken), fundsReclaimed);\r\n                return;\r\n            }\r\n        }\r\n        // If we reach this, it means loanToken was not present in _loans array\r\n        // This prevents invalid loans from being reclaimed\r\n        revert(\"TrueLender: This loan has not been funded by the lender\");\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a basket of tokens held by the pool\r\n     * When exiting the pool, the pool contract calls this function\r\n     * to withdraw a fraction of all the loans held by the pool\r\n     * Loop through recipient's share of LoanTokens and calculate versus total per loan.\r\n     * There should never be too many loans in the pool to run out of gas\r\n     *\r\n     * @param recipient Recipient of basket\r\n     * @param numerator Numerator of fraction to withdraw\r\n     * @param denominator Denominator of fraction to withdraw\r\n     */\r\n    function distribute(\r\n        address recipient,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) external override onlyPool {\r\n        for (uint256 index = 0; index < _loans.length; index++) {\r\n            _loans[index].transfer(recipient, numerator.mul(_loans[index].balanceOf(address(this))).div(denominator));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a loan is within APY bounds\r\n     * @param apy APY of loan\r\n     * @return Whether a loan is within APY bounds\r\n     */\r\n    function loanIsAttractiveEnough(uint256 apy) public view returns (bool) {\r\n        return apy >= minApy && apy <= maxApy;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a loan has been in the credit market long enough\r\n     * @param start Timestamp at which rating began\r\n     * @return Whether a loan has been rated for long enough\r\n     */\r\n    function votingLastedLongEnough(uint256 start) public view returns (bool) {\r\n        return start.add(votingPeriod) <= block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a loan is within size bounds\r\n     * @param amount Size of loan\r\n     * @return Whether a loan is within size bounds\r\n     */\r\n    function loanSizeWithinBounds(uint256 amount) public view returns (bool) {\r\n        return amount >= minSize && amount <= maxSize;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if loan term is within term bounds\r\n     * @param term Term of loan\r\n     * @return Whether loan term is within term bounds\r\n     */\r\n    function loanTermWithinBounds(uint256 term) public view returns (bool) {\r\n        return term >= minTerm && term <= maxTerm;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a loan is within APY bounds\r\n     * Minimum absolute value of yes votes, rather than ratio of yes to no\r\n     * @param amount Size of loan\r\n     * @param yesVotes Number of yes votes\r\n     * @return Whether a loan has reached the required voting threshold\r\n     */\r\n    function votesThresholdReached(uint256 amount, uint256 yesVotes) public view returns (bool) {\r\n        return amount.mul(participationFactor) <= yesVotes.mul(10000).mul(TOKEN_PRECISION_DIFFERENCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Use APY and term of loan to check expected value of a loan\r\n     * Expected value = profit - (default_loss * (no / yes))\r\n     * e.g. riskAversion = 10,000 => expected value of 1\r\n     * @param apy APY of loan\r\n     * @param term Term length of loan\r\n     * @param yesVotes Number of YES votes in credit market\r\n     * @param noVotes Number of NO votes in credit market\r\n     */\r\n    function loanIsCredible(\r\n        uint256 apy,\r\n        uint256 term,\r\n        uint256 yesVotes,\r\n        uint256 noVotes\r\n    ) public view returns (bool) {\r\n        return apy.mul(term).mul(yesVotes).div(365 days) >= noVotes.mul(riskAversion);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Allowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minApy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxApy\",\"type\":\"uint256\"}],\"name\":\"ApyLimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLoans\",\"type\":\"uint256\"}],\"name\":\"LoansLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participationFactor\",\"type\":\"uint256\"}],\"name\":\"ParticipationFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRatingAgency\",\"type\":\"address\"}],\"name\":\"RatingAgencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskAversion\",\"type\":\"uint256\"}],\"name\":\"RiskAversionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"}],\"name\":\"SizeLimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStakingPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"StakingPoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTerm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTerm\",\"type\":\"uint256\"}],\"name\":\"TermLimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedBorrowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken\",\"name\":\"loanToken\",\"type\":\"address\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract ITrueRatingAgency\",\"name\":\"_ratingAgency\",\"type\":\"address\"},{\"internalType\":\"contract IStakingPool\",\"name\":\"_stakingPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"loanIsAttractiveEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"}],\"name\":\"loanIsCredible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"loanSizeWithinBounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"loanTermWithinBounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"loanValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"contract ILoanToken[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participationFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ITrueFiPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratingAgency\",\"outputs\":[{\"internalType\":\"contract ITrueRatingAgency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILoanToken\",\"name\":\"loanToken\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskAversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxApy\",\"type\":\"uint256\"}],\"name\":\"setApyLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoansLimit\",\"type\":\"uint256\"}],\"name\":\"setLoansLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newParticipationFactor\",\"type\":\"uint256\"}],\"name\":\"setParticipationFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueRatingAgency\",\"name\":\"newRatingAgency\",\"type\":\"address\"}],\"name\":\"setRatingAgency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRiskAversion\",\"type\":\"uint256\"}],\"name\":\"setRiskAversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setSizeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setTermLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"}],\"name\":\"votesThresholdReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"votingLastedLongEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrueLender","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a66bd81ec1c2aef9696cf2d6060563dac9dcaf7b64c1981f562053ad9f69cef2"}]}