{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Zap.sol\": {\r\n      \"content\": \"pragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20, SafeMath} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract Zap {\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IbDUSD;\\n\\n    uint constant N_COINS = 4;\\n    string constant ERR_SLIPPAGE = \\\"ERR_SLIPPAGE\\\";\\n\\n    ICurveDeposit immutable yDeposit;\\n    ICurve immutable ySwap;\\n    IERC20 immutable yCrv;\\n    IERC20 immutable dusd;\\n    IbDUSD immutable ibdusd;\\n    IYVaultPeak immutable yVaultPeak;\\n\\n    address[N_COINS] coins;\\n    address[N_COINS] underlyingCoins;\\n    uint[N_COINS] ZEROES = [uint(0),uint(0),uint(0),uint(0)];\\n\\n    constructor(\\n        ICurveDeposit _yDeposit,\\n        ICurve _ySwap,\\n        IERC20 _yCrv,\\n        IERC20 _dusd,\\n        IbDUSD _ibdusd,\\n        IYVaultPeak _yVaultPeak,\\n        address[N_COINS] memory _underlyingCoins,\\n        address[N_COINS] memory _coins\\n    ) public {\\n        yDeposit = _yDeposit;\\n        ySwap = _ySwap;\\n        yCrv = _yCrv;\\n        dusd = _dusd;\\n        ibdusd = _ibdusd;\\n        yVaultPeak = _yVaultPeak;\\n        underlyingCoins = _underlyingCoins;\\n        coins = _coins;\\n    }\\n\\n    /**\\n    * @notice Mint DUSD\\n    * @param inAmounts Exact inAmounts in the same order as required by the curve pool\\n    * @param minDusdAmount Minimum DUSD to mint, used for capping slippage\\n    */\\n    function mint(uint[N_COINS] memory inAmounts, uint minDusdAmount)\\n        public\\n        returns (uint dusdAmount)\\n    {\\n        dusdAmount = _mint(inAmounts, minDusdAmount);\\n        dusd.safeTransfer(msg.sender, dusdAmount);\\n    }\\n\\n    function _mint(uint[N_COINS] memory inAmounts, uint minDusdAmount)\\n        internal\\n        returns (uint dusdAmount)\\n    {\\n        address[N_COINS] memory _coins = underlyingCoins;\\n        for (uint i = 0; i < N_COINS; i++) {\\n            if (inAmounts[i] > 0) {\\n                IERC20(_coins[i]).safeTransferFrom(msg.sender, address(this), inAmounts[i]);\\n                IERC20(_coins[i]).safeApprove(address(yDeposit), inAmounts[i]);\\n            }\\n        }\\n        yDeposit.add_liquidity(inAmounts, 0);\\n        uint inAmount = yCrv.balanceOf(address(this));\\n        yCrv.safeApprove(address(yVaultPeak), 0);\\n        yCrv.safeApprove(address(yVaultPeak), inAmount);\\n        dusdAmount = yVaultPeak.mintWithYcrv(inAmount);\\n        require(dusdAmount >= minDusdAmount, ERR_SLIPPAGE);\\n    }\\n\\n    function calcMint(uint[N_COINS] memory inAmounts)\\n        public\\n        view\\n        returns (uint dusdAmount)\\n    {\\n        for(uint i = 0; i < N_COINS; i++) {\\n            inAmounts[i] = inAmounts[i].mul(1e18).div(yERC20(coins[i]).getPricePerFullShare());\\n        }\\n        uint _yCrv = ySwap.calc_token_amount(inAmounts, true /* deposit */);\\n        return yVaultPeak.calcMintWithYcrv(_yCrv);\\n    }\\n\\n    /**\\n    * @dev Redeem DUSD\\n    * @param dusdAmount Exact dusdAmount to burn\\n    * @param minAmounts Min expected amounts to cap slippage\\n    */\\n    function redeem(uint dusdAmount, uint[N_COINS] memory minAmounts)\\n        public\\n    {\\n        redeemTo(dusdAmount, minAmounts, msg.sender);\\n    }\\n\\n    function redeemTo(uint dusdAmount, uint[N_COINS] memory minAmounts, address destination)\\n        public\\n    {\\n        dusd.safeTransferFrom(msg.sender, address(this), dusdAmount);\\n        _redeemTo(dusdAmount, minAmounts, destination);\\n    }\\n\\n    function _redeemTo(uint dusdAmount, uint[N_COINS] memory minAmounts, address destination)\\n        internal\\n    {\\n        uint r = yVaultPeak.redeemInYcrv(dusdAmount, 0);\\n        yCrv.safeApprove(address(yDeposit), r);\\n        yDeposit.remove_liquidity(r, ZEROES);\\n        address[N_COINS] memory _coins = underlyingCoins;\\n        uint toTransfer;\\n        for (uint i = 0; i < N_COINS; i++) {\\n            toTransfer = IERC20(_coins[i]).balanceOf(address(this));\\n            if (toTransfer > 0) {\\n                require(toTransfer >= minAmounts[i], ERR_SLIPPAGE);\\n                IERC20(_coins[i]).safeTransfer(destination, toTransfer);\\n            }\\n        }\\n    }\\n\\n    function calcRedeem(uint dusdAmount)\\n        public view\\n        returns (uint[N_COINS] memory amounts)\\n    {\\n        uint _yCrv = yVaultPeak.calcRedeemInYcrv(dusdAmount);\\n        uint totalSupply = yCrv.totalSupply();\\n        for(uint i = 0; i < N_COINS; i++) {\\n            amounts[i] = ySwap.balances(int128(i))\\n                .mul(_yCrv)\\n                .div(totalSupply)\\n                .mul(yERC20(coins[i]).getPricePerFullShare())\\n                .div(1e18);\\n        }\\n    }\\n\\n    function redeemInSingleCoin(uint dusdAmount, uint i, uint minOut)\\n        public\\n        returns (uint amount)\\n    {\\n        return redeemInSingleCoinTo(dusdAmount, i, minOut, msg.sender);\\n    }\\n\\n    function redeemInSingleCoinTo(uint dusdAmount, uint i, uint minOut, address destination)\\n        public\\n        returns (uint)\\n    {\\n        dusd.safeTransferFrom(msg.sender, address(this), dusdAmount);\\n        return _redeemInSingleCoinTo(dusdAmount, i, minOut, destination);\\n    }\\n\\n    function _redeemInSingleCoinTo(uint dusdAmount, uint i, uint minOut, address destination)\\n        internal\\n        returns (uint amount)\\n    {\\n        uint r = yVaultPeak.redeemInYcrv(dusdAmount, 0);\\n        yCrv.safeApprove(address(yDeposit), r);\\n        yDeposit.remove_liquidity_one_coin(r, int128(i), minOut); // checks for slippage\\n        IERC20 coin = IERC20(underlyingCoins[i]);\\n        amount = coin.balanceOf(address(this));\\n        coin.safeTransfer(destination, amount);\\n    }\\n\\n    function calcRedeemInSingleCoin(uint dusdAmount, uint i)\\n        public view\\n        returns(uint)\\n    {\\n        uint _yCrv = yVaultPeak.calcRedeemInYcrv(dusdAmount);\\n        return yDeposit.calc_withdraw_one_coin(_yCrv, int128(i));\\n    }\\n\\n    function deposit(uint[N_COINS] calldata inAmounts, uint minDusdAmount)\\n        external\\n        returns (uint dusdAmount)\\n    {\\n        dusdAmount = _mint(inAmounts, minDusdAmount);\\n        dusd.safeApprove(address(ibdusd), dusdAmount);\\n        ibdusd.deposit(dusdAmount);\\n        ibdusd.safeTransfer(msg.sender, ibdusd.balanceOf(address(this)));\\n    }\\n\\n    function withdraw(uint shares, uint i, uint minOut)\\n        external\\n        returns (uint)\\n    {\\n        ibdusd.safeTransferFrom(msg.sender, address(this), shares);\\n        ibdusd.withdraw(shares);\\n        return _redeemInSingleCoinTo(\\n            dusd.balanceOf(address(this)),\\n            i,\\n            minOut,\\n            msg.sender\\n        );\\n    }\\n\\n    function withdrawInAll(uint shares, uint[N_COINS] calldata minAmounts)\\n        external\\n    {\\n        ibdusd.safeTransferFrom(msg.sender, address(this), shares);\\n        ibdusd.withdraw(shares);\\n        _redeemTo(\\n            dusd.balanceOf(address(this)),\\n            minAmounts,\\n            msg.sender\\n        );\\n    }\\n}\\n\\ninterface IYVaultPeak {\\n    function mintWithYcrv(uint inAmount) external returns(uint dusdAmount);\\n    function calcMintWithYcrv(uint inAmount) external view returns (uint dusdAmount);\\n    function redeemInYcrv(uint dusdAmount, uint minOut) external returns(uint _yCrv);\\n    function calcRedeemInYcrv(uint dusdAmount) external view returns (uint _yCrv);\\n}\\n\\ninterface yERC20 {\\n    function getPricePerFullShare() external view returns(uint);\\n}\\n\\ninterface ICurveDeposit {\\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\\n    function remove_liquidity(uint amount, uint[4] calldata min_uamounts) external;\\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\\n    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_uamount) external;\\n    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns(uint);\\n}\\n\\ninterface ICurve {\\n    function add_liquidity(uint[4] calldata uamounts, uint min_mint_amount) external;\\n    function remove_liquidity_imbalance(uint[4] calldata uamounts, uint max_burn_amount) external;\\n    function remove_liquidity(uint amount, uint[4] calldata min_amounts) external;\\n    function calc_token_amount(uint[4] calldata inAmounts, bool deposit) external view returns(uint);\\n    function balances(int128 i) external view returns(uint);\\n    function get_virtual_price() external view returns(uint);\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\ninterface IbDUSD is IERC20 {\\n    function deposit(uint) external;\\n    function withdraw(uint) external;\\n    function getPricePerFullShare() external view returns (uint);\\n    function balance() external view returns (uint);\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICurveDeposit\",\"name\":\"_yDeposit\",\"type\":\"address\"},{\"internalType\":\"contract ICurve\",\"name\":\"_ySwap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_yCrv\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dusd\",\"type\":\"address\"},{\"internalType\":\"contract IbDUSD\",\"name\":\"_ibdusd\",\"type\":\"address\"},{\"internalType\":\"contract IYVaultPeak\",\"name\":\"_yVaultPeak\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_underlyingCoins\",\"type\":\"address[4]\"},{\"internalType\":\"address[4]\",\"name\":\"_coins\",\"type\":\"address[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"inAmounts\",\"type\":\"uint256[4]\"}],\"name\":\"calcMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"calcRedeem\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"amounts\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"calcRedeemInSingleCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"inAmounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minDusdAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"inAmounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minDusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"minAmounts\",\"type\":\"uint256[4]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"redeemInSingleCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"redeemInSingleCoinTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"minAmounts\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"redeemTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"minAmounts\",\"type\":\"uint256[4]\"}],\"name\":\"withdrawInAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Zap","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bbc81d23ea2c3ec7e56d39296f0cbb648873a5d300000000000000000000000045f783cce6b7ff23b2ab2d70e416cdb7d6055f51000000000000000000000000df5e0e81dff6faf3a7e52ba697820c5e32d806a80000000000000000000000005bc25f649fc4e26069ddf4cf4010f9f706c2383100000000000000000000000042600c4f6d84aa4d246a3957994da411fa8a4e1c000000000000000000000000a89bd606d5dadda60242e8dedeebc95c41ad89860000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000085d4780b73119b644ae5ecd22b37600000000000000000000000016de59092dae5ccf4a1e6439d611fd0653f0bd01000000000000000000000000d6ad7a6750a7593e092a9b218d66c0a814a3436e00000000000000000000000083f798e925bcd4017eb265844fddabb448f1707d00000000000000000000000073a052500105205d34daf004eab301916da8190f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}