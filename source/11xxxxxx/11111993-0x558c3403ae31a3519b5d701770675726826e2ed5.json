{"status":"1","message":"OK","result":[{"SourceCode":"// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n//\r\n//  _     _             _     _ _ _           \r\n// | |   (_)           (_)   | (_) |         \r\n// | |    _  __ _ _   _ _  __| |_| |_ _   _  \r\n// | |   | |/ _` | | | | |/ _` | | __| | | | \r\n// | |___| | (_| | |_| | | (_| | | |_| |_| | \r\n// \\_____/_|\\__, |\\__,_|_|\\__,_|_|\\__|\\__, |  \r\n//             | |                     __/ |                                                                               \r\n//             |_|                    |___/               \r\n//  _____                           _   _               _____                _                                                                    \r\n// |  __ \\                         | | (_)             |  ___|              | |  \r\n// | |  \\/ ___ _ __   ___ _ __ __ _| |_ _  ___  _ __   | |____   _____ _ __ | |_ \r\n// | | __ / _ \\ '_ \\ / _ \\ '__/ _` | __| |/ _ \\| '_ \\  |  __\\ \\ / / _ \\ '_ \\| __|\r\n// | |_\\ \\  __/ | | |  __/ | | (_| | |_| | (_) | | | | | |___\\ V /  __/ | | | |_ \r\n//  \\____/\\___|_| |_|\\___|_|  \\__,_|\\__|_|\\___/|_| |_| \\____/ \\_/ \\___|_| |_|\\__|\r\n//\r\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                      \r\n//    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \r\n//       \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                        \r\n//          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                          \r\n//            \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                           \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                             \r\n//                  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\                              \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\\\\\                               \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\\\                                \r\n//                    \\\\\\\\\\\\\\\\\\\\\\\\                                 \r\n//                   \\\\\\\\\\\\\\\\\\\\\\\\                                  \r\n//                  \\\\\\\\\\\\\\\\\\\\\\\\                                   \r\n//                 \\\\\\\\\\\\\\\\\\\\\\\\                                    \r\n//                \\\\\\\\\\\\\\\\\\\\\\\\                                     \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \r\n//               \\\\\\\\\\\\\\\\\\\\\\\\                                      \r\n//          `     \\\\\\\\\\\\\\\\\\\\\\\\      `    `                         \r\n//             *    \\\\\\\\\\\\\\\\\\\\\\\\  *   *                            \r\n//      `    *    *   \\\\\\\\\\\\\\\\\\\\\\\\   *  *   `                      \r\n//              *   *   \\\\\\\\\\\\\\\\\\\\  *                              \r\n//           `    *   * \\\\\\\\\\\\\\\\\\ *   *   `                        \r\n//        `    `     *  \\\\\\\\\\\\\\\\   *   `_____                      \r\n//              \\ \\ \\ * \\\\\\\\\\\\\\  * /  /\\`````\\                    \r\n//            \\ \\ \\ \\  \\\\\\\\\\\\  / / / /  \\`````\\                    \r\n//          \\ \\ \\ \\ \\ \\\\\\\\\\\\ / / / / |[] | [] |\r\n//                                  EqPtz5qN7HM\r\n//\r\n// This contract lets people kickstart pair liquidity on uniswap together\r\n// By pooling tokens together for a period of time\r\n// A bundle of sticks makes one mighty liquidity pool\r\n//\r\n\r\n// File: contracts/v612/ICOREGlobals.sol\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREGlobalsAddress() external view returns (address);\r\n    function COREDelegatorAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function COREWETHUniPair() external view returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function addDelegatorStateChangePermission(address that, bool status) external;\r\n    function isStateChangeApprovedContract(address that)  external view returns (bool);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/v612/COREv1/ICoreVault.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface ICoreVault {\r\n    function devaddr() external returns (address);\r\n    function addPendingRewards(uint _amount) external;\r\n}\r\n\r\n// File: contracts/v612/LGE.sol\r\npragma solidity 0.6.12;\r\n\r\n\r\n// import '@uniswap/v2-periphery/contracts/libraries/IUniswapV2Library.sol';\r\n\r\n// import '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import '@uniswap/v2-core/contracts/UniswapV2Pair.sol';\r\n\r\nlibrary COREIUniswapV2Library {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    // Copied from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/IUniswapV2Library.sol\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'IUniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'IUniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n        // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal  returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC95 {\r\n    function wrapAtomic(address) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function skim(address to) external;\r\n    function unpauseTransfers() external;\r\n\r\n}\r\n\r\ninterface CERC95 {\r\n    function wrapAtomic(address) external;\r\n    function transfer(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function skim(address to) external;\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n\r\ninterface ICORETransferHandler {\r\n    function sync(address) external returns(bool,bool);\r\n}\r\n\r\ncontract cLGE is Initializable, OwnableUpgradeSafe, ReentrancyGuardUpgradeSafe {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /// CORE gets deposited straight never sold - refunded if balance is off at end\r\n    // Others get sold if needed\r\n    // ETH always gets sold into XXX from CORE/XXX\r\n    \r\n    IERC20 public tokenBeingWrapped;\r\n    address public coreEthPair;\r\n    address public wrappedToken;\r\n    address public preWrapEthPair;\r\n    address public COREToken;\r\n    address public _WETH;\r\n    address public wrappedTokenUniswapPair;\r\n    address public uniswapFactory;\r\n\r\n    ///////////////////////////////////////\r\n    // Note this 3 are not supposed to be actual contributed because of the internal swaps\r\n    // But contributed by people, before internal swaps\r\n    uint256 public totalETHContributed;\r\n    uint256 public totalCOREContributed;\r\n    uint256 public totalWrapTokenContributed;\r\n    ////////////////////////////////////////\r\n\r\n\r\n\r\n    ////////////////////////////////////////\r\n    // Internal balances user to calculate canges\r\n    // Note we dont have WETH here because it all goes out\r\n    uint256 private wrappedTokenBalance;\r\n    uint256 private COREBalance;\r\n    ////////////////////////////////////////\r\n\r\n    ////////////////////////////////////////\r\n    // Variables for calculating LP gotten per each user\r\n    // Note all contributions get \"flattened\" to CORE \r\n    // This means we just calculate how much CORE it would buy with the running average\r\n    // And use that as the counter\r\n    uint256 public totalCOREToRefund; // This is in case there is too much CORE in the contract we refund people who contributed CORE proportionally\r\n                                      // Potential scenario where someone swapped too much ETH/WBTC into CORE causing too much CORE to be in the contract\r\n                                      // and subsequently being not refunded because he didn't contribute CORE but bought CORE for his ETH/WETB\r\n                                      // Was noted and decided that the impact of this is not-significant\r\n    uint256 public totalLPCreated;    \r\n    uint256 private totalUnitsContributed;\r\n    uint256 public LPPerUnitContributed; // stored as 1e18 more - this is done for change\r\n    ////////////////////////////////////////\r\n\r\n\r\n    event Contibution(uint256 COREvalue, address from);\r\n    event COREBought(uint256 COREamt, address from);\r\n\r\n    mapping (address => uint256) public COREContributed; // We take each persons core contributed to calculate units and \r\n                                                        // to calculate refund later from totalCoreRefund + CORE total contributed\r\n    mapping (address => uint256) public unitsContributed; // unit to keep track how much each person should get of LP\r\n    mapping (address => uint256) public unitsClaimed; \r\n    mapping (address => bool) public CORERefundClaimed; \r\n    mapping (address => address) public pairWithWETHAddressForToken; \r\n\r\n    mapping (address => uint256) public wrappedTokenContributed; // To calculate units\r\n                                                                 // Note eth contributed will turn into this and get counted\r\n    ICOREGlobals public coreGlobals;\r\n    bool public LGEStarted;\r\n    uint256 public contractStartTimestamp;\r\n    uint256 public LGEDurationDays;\r\n    bool public LGEFinished;\r\n\r\n    function initialize(uint256 daysLong, address _wrappedToken, address _coreGlobals, address _preWrapEthPair) public initializer {\r\n        require(msg.sender == address(0x5A16552f59ea34E44ec81E58b3817833E9fD5436));\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        ReentrancyGuardUpgradeSafe.__ReentrancyGuard_init();\r\n\r\n        contractStartTimestamp = uint256(-1); // wet set it here to max so checks fail\r\n        LGEDurationDays = daysLong.mul(1 days);\r\n        coreGlobals = ICOREGlobals(_coreGlobals);\r\n        coreEthPair = coreETHPairGetter();\r\n        (COREToken, _WETH) = (IUniswapV2Pair(coreEthPair).token0(), IUniswapV2Pair(coreEthPair).token1()); // bb\r\n        address tokenBeingWrappedAddress = IUniswapV2Pair(_preWrapEthPair).token1(); // bb\r\n        tokenBeingWrapped =  IERC20(tokenBeingWrappedAddress);\r\n\r\n        pairWithWETHAddressForToken[address(tokenBeingWrapped)] = _preWrapEthPair;\r\n        pairWithWETHAddressForToken[IUniswapV2Pair(coreEthPair).token0()] = coreEthPair;// bb \r\n\r\n\r\n        wrappedToken = _wrappedToken;\r\n        preWrapEthPair = _preWrapEthPair;\r\n        uniswapFactory = coreGlobals.UniswapFactory();\r\n    }\r\n    \r\n    function setTokenBeingWrapped(address token, address tokenPairWithWETH) public onlyOwner {\r\n        tokenBeingWrapped = IERC20(token);\r\n        pairWithWETHAddressForToken[token] = tokenPairWithWETH;\r\n    }\r\n    \r\n    /// Starts LGE by admin call\r\n    function startLGE() public onlyOwner {\r\n        require(LGEStarted == false, \"Already started\");\r\n        contractStartTimestamp = block.timestamp;\r\n        LGEStarted = true;\r\n\r\n        updateRunningAverages();\r\n    }\r\n    \r\n    function isLGEOver() public view returns (bool) {\r\n        return block.timestamp > contractStartTimestamp.add(LGEDurationDays);\r\n    }\r\n\r\n\r\n    function claimLP() nonReentrant public { \r\n        require(LGEFinished == true, \"LGE : Liquidity generation not finished\");\r\n        require(unitsContributed[msg.sender].sub(unitsClaimed[msg.sender]) > 0, \"LEG : Nothing to claim\");\r\n\r\n        IUniswapV2Pair(wrappedTokenUniswapPair)\r\n            .transfer(msg.sender, unitsContributed[msg.sender].sub(getCORERefundForPerson(msg.sender)).mul(LPPerUnitContributed).div(1e18));\r\n            // LPPerUnitContributed is stored at 1e18 multiplied\r\n\r\n        unitsClaimed[msg.sender] = unitsContributed[msg.sender];\r\n    }\r\n\r\n    function buyToken(address tokenTarget, uint256 amtToken, address tokenSwapping, uint256 amtTokenSwappingInput, address pair) internal {\r\n        (address token0, address token1) = COREIUniswapV2Library.sortTokens(tokenSwapping, tokenTarget);\r\n        IERC20(tokenSwapping).transfer(pair, amtTokenSwappingInput); \r\n        if(tokenTarget == token0) {\r\n             IUniswapV2Pair(pair).swap(amtToken, 0, address(this), \"\");\r\n        }\r\n        else {\r\n            IUniswapV2Pair(pair).swap(0, amtToken, address(this), \"\");\r\n        }\r\n\r\n        if(tokenTarget == COREToken){\r\n            emit COREBought(amtToken, msg.sender);\r\n        }\r\n        \r\n        updateRunningAverages();\r\n    }\r\n\r\n    function updateRunningAverages() internal{\r\n         if(_averagePrices[address(tokenBeingWrapped)].lastBlockOfIncrement != block.number) {\r\n            _averagePrices[address(tokenBeingWrapped)].lastBlockOfIncrement = block.number;\r\n            updateRunningAveragePrice(address(tokenBeingWrapped), false);\r\n          }\r\n         if(_averagePrices[COREToken].lastBlockOfIncrement != block.number) {\r\n            _averagePrices[COREToken].lastBlockOfIncrement = block.number;\r\n            updateRunningAveragePrice(COREToken, false);\r\n         }\r\n    }\r\n\r\n\r\n    function coreETHPairGetter() public view returns (address) {\r\n        return coreGlobals.COREWETHUniPair();\r\n    }\r\n\r\n\r\n    function getPairReserves(address pair) internal view returns (uint256 wethReserves, uint256 tokenReserves) {\r\n        address token0 = IUniswapV2Pair(pair).token0();\r\n        (uint256 reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\r\n        (wethReserves, tokenReserves) = token0 == _WETH ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    function finalizeTokenWrapAddress(address _wrappedToken) onlyOwner public {\r\n        wrappedToken = _wrappedToken;\r\n    }\r\n\r\n    // If LGE doesn't trigger in 24h after its complete its possible to withdraw tokens\r\n    // Because then we can assume something went wrong since LGE is a publically callable function\r\n    // And otherwise everything is stuck.\r\n    function safetyTokenWithdraw(address token) onlyOwner public {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\r\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    function safetyETHWithdraw() onlyOwner public {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(1 days));\r\n        msg.sender.call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n    // Added safety function to extend LGE in case multisig #2 isn't avaiable from emergency life events\r\n    // TODO x3 add your key here\r\n    function extendLGE(uint numHours) public {\r\n        require(msg.sender == 0xd5b47B80668840e7164C1D1d81aF8a9d9727B421 || msg.sender == 0xC91FE1ee441402D854B8F22F94Ddf66618169636, \"LGE: Requires admin\");\r\n        require(numHours <= 24);\r\n        LGEDurationDays = LGEDurationDays.add(numHours.mul(1 hours));\r\n    }\r\n\r\n    function addLiquidityAtomic() public {\r\n        require(LGEStarted == true, \"LGE Didn't start\");\r\n        require(LGEFinished == false, \"LGE : Liquidity generation finished\");\r\n        require(isLGEOver() == false, \"LGE is over.\");\r\n\r\n        // require(token == _WETH || token == COREToken || token == address(tokenBeingWrapped) || token == preWrapEthPair, \"Unsupported deposit token\");\r\n\r\n        if(IUniswapV2Pair(preWrapEthPair).balanceOf(address(this)) > 0) {\r\n            // Special carveout because unwrap calls this funciton\r\n            // Since unwrap will add both WETH and tokenwrapped\r\n            unwrapLiquidityTokens();\r\n        } else{\r\n            ( uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH) = getHowMuch1WETHBuysOfTokens();\r\n\r\n\r\n             // Check WETH if there is swap for CORRE or WBTC depending\r\n             // Check WBTC and swap for core or not depending on peg\r\n            uint256 balWETH = IERC20(_WETH).balanceOf(address(this));\r\n            // No need to upate it because we dont retain WETH\r\n\r\n            uint256 totalCredit; // In core units\r\n\r\n \r\n\r\n            // Handling core wrap deposits\r\n            // we check change from reserves\r\n            uint256 tokenBeingWrappedBalNow = IERC20(tokenBeingWrapped).balanceOf(address(this));\r\n            uint256 tokenBeingWrappedBalChange = tokenBeingWrappedBalNow.sub(wrappedTokenBalance);\r\n            // If its bigger than 0 we handle\r\n            if(tokenBeingWrappedBalChange > 0) {\r\n                totalWrapTokenContributed = totalWrapTokenContributed.add(tokenBeingWrappedBalChange);\r\n      \r\n                // We add wrapped token contributionsto the person this is for stats only\r\n                wrappedTokenContributed[msg.sender] = wrappedTokenContributed[msg.sender].add(tokenBeingWrappedBalChange);\r\n                // We check how much credit he got that returns from this function\r\n                totalCredit =   handleTokenBeingWrappedLiquidityAddition(tokenBeingWrappedBalChange,tokenBeingWrappedPer1ETH,coreTokenPer1ETH) ;\r\n                // We update reserves\r\n                wrappedTokenBalance = IERC20(tokenBeingWrapped).balanceOf(address(this));\r\n                COREBalance = IERC20(COREToken).balanceOf(address(this)); /// CHANGE\r\n\r\n           }           \r\n           \r\n             // Handling weth\r\n            if(balWETH > 0){\r\n                totalETHContributed = totalETHContributed.add(balWETH);\r\n                totalCredit = totalCredit.add( handleWETHLiquidityAddition(balWETH,tokenBeingWrappedPer1ETH,coreTokenPer1ETH) );\r\n                // No other number should be there since it just started a line above\r\n                COREBalance = IERC20(COREToken).balanceOf(address(this)); /// CHANGE\r\n            }\r\n\r\n            // we check core balance against reserves\r\n            // Note this is FoT token safe because we check balance of this \r\n            // And not accept user input\r\n            uint256 COREBalNow = IERC20(COREToken).balanceOf(address(this));\r\n            uint256 balCOREChange = COREBalNow.sub(COREBalance);\r\n            if(balCOREChange > 0) {\r\n                COREContributed[msg.sender] = COREContributed[msg.sender].add(balCOREChange);\r\n                totalCOREContributed = totalCOREContributed.add(balCOREChange);\r\n            }\r\n            // Reset reserves\r\n            COREBalance = COREBalNow;\r\n\r\n            uint256 unitsChange = totalCredit.add(balCOREChange);\r\n            // Gives people balances based on core units, if Core is contributed then we just append it to it without special logic\r\n            unitsContributed[msg.sender] = unitsContributed[msg.sender].add(unitsChange);\r\n            totalUnitsContributed = totalUnitsContributed.add(unitsChange);\r\n            emit Contibution(totalCredit, msg.sender);\r\n        \r\n        }\r\n    }\r\n\r\n    function handleTokenBeingWrappedLiquidityAddition(uint256 amt,uint256 tokenBeingWrappedPer1ETH,uint256 coreTokenPer1ETH) internal  returns (uint256 coreUnitsCredit) {\r\n        // VERY IMPRECISE TODO\r\n        uint256 outWETH;\r\n        (uint256 reserveWETHofWrappedTokenPair, uint256 reserveTokenofWrappedTokenPair) = getPairReserves(preWrapEthPair);\r\n\r\n        if(COREBalance.div(coreTokenPer1ETH) <= wrappedTokenBalance.div(tokenBeingWrappedPer1ETH)) {\r\n            // swap for eth\r\n            outWETH = COREIUniswapV2Library.getAmountOut(amt, reserveTokenofWrappedTokenPair, reserveWETHofWrappedTokenPair);\r\n            buyToken(_WETH, outWETH, address(tokenBeingWrapped) , amt, preWrapEthPair);\r\n            // buy core\r\n            (uint256 buyReserveWeth, uint256 reserveCore) = getPairReserves(coreEthPair);\r\n            uint256 outCore = COREIUniswapV2Library.getAmountOut(outWETH, buyReserveWeth, reserveCore);\r\n            buyToken(COREToken, outCore, _WETH ,outWETH,coreEthPair);\r\n        } else {\r\n            // Dont swap just calculate out and credit and leave as is\r\n            outWETH = COREIUniswapV2Library.getAmountOut(amt, reserveTokenofWrappedTokenPair , reserveWETHofWrappedTokenPair);\r\n        }\r\n\r\n        // Out weth is in 2 branches\r\n        // We give credit to user contributing\r\n        coreUnitsCredit = outWETH.mul(coreTokenPer1ETH).div(1e18);\r\n    }\r\n\r\n    function handleWETHLiquidityAddition(uint256 amt,uint256 tokenBeingWrappedPer1ETH,uint256 coreTokenPer1ETH) internal returns (uint256 coreUnitsCredit) {\r\n        // VERY IMPRECISE TODO\r\n\r\n        // We check if corebalance in ETH is smaller than wrapped token balance in eth\r\n        if(COREBalance.div(coreTokenPer1ETH) <= wrappedTokenBalance.div(tokenBeingWrappedPer1ETH)) {\r\n            // If so we buy core\r\n            (uint256 reserveWeth, uint256 reserveCore) = getPairReserves(coreEthPair);\r\n            uint256 outCore = COREIUniswapV2Library.getAmountOut(amt, reserveWeth, reserveCore);\r\n            //we buy core\r\n            buyToken(COREToken, outCore,_WETH,amt, coreEthPair);\r\n\r\n            // amt here is weth contributed\r\n        } else {\r\n            (uint256 reserveWeth, uint256 reserveToken) = getPairReserves(preWrapEthPair);\r\n            uint256 outToken = COREIUniswapV2Library.getAmountOut(amt, reserveWeth, reserveToken);\r\n            // we buy wrappedtoken\r\n            buyToken(address(tokenBeingWrapped), outToken,_WETH, amt,preWrapEthPair);\r\n            wrappedTokenBalance = IERC20(tokenBeingWrapped).balanceOf(address(this));\r\n\r\n\r\n           //We buy outToken of the wrapped token and add it here\r\n            wrappedTokenContributed[msg.sender] = wrappedTokenContributed[msg.sender].add(outToken);\r\n        }\r\n        // we credit user for ETH/ multiplied per core per 1 eth and then divided by 1 weth meaning we get exactly how much core it would be\r\n        // in the running average\r\n        coreUnitsCredit = amt.mul(coreTokenPer1ETH).div(1e18);\r\n\r\n    }\r\n\r\n\r\n    function getHowMuch1WETHBuysOfTokens() public view returns (uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH) {\r\n        return (getAveragePriceLast20Blocks(address(tokenBeingWrapped)), getAveragePriceLast20Blocks(COREToken));\r\n    }\r\n\r\n\r\n    //TEST TASK : Check if liquidity is added via just ending ETH to contract\r\n    fallback() external payable {\r\n        if(msg.sender != _WETH) {\r\n             addLiquidityETH();\r\n        }\r\n    }\r\n\r\n    //TEST TASK : Check if liquidity is added via calling this function\r\n    function addLiquidityETH() nonReentrant public payable {\r\n        // wrap weth\r\n        IWETH(_WETH).deposit{value: msg.value}();\r\n        addLiquidityAtomic();\r\n    }\r\n\r\n    // TEST TASK : check if this function deposits tokens\r\n    function addLiquidityWithTokenWithAllowance(address token, uint256 amount) public nonReentrant {\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        addLiquidityAtomic();\r\n    }   \r\n\r\n    // We burn liquiidyt from WBTC/ETH pair\r\n    // And then send it to this ontract\r\n    // Wrap atomic will handle both deposits of WETH and wrappedtoken\r\n    function unwrapLiquidityTokens() internal {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(preWrapEthPair);\r\n        pair.transfer(preWrapEthPair, pair.balanceOf(address(this)));\r\n        pair.burn(address(this));\r\n        addLiquidityAtomic();\r\n    }\r\n\r\n\r\n\r\n    // TODO\r\n\r\n    mapping(address => PriceAverage) _averagePrices;\r\n    struct PriceAverage{\r\n       uint8 lastAddedHead;\r\n       uint256[20] price;\r\n       uint256 cumulativeLast20Blocks;\r\n       bool arrayFull;\r\n       uint lastBlockOfIncrement; // Just update once per block ( by buy token function )\r\n    }\r\n\r\n    // This is out tokens per 1WETH (1e18 units)\r\n    function getAveragePriceLast20Blocks(address token) public view returns (uint256){\r\n\r\n       return _averagePrices[token].cumulativeLast20Blocks.div(_averagePrices[token].arrayFull ? 20 : _averagePrices[token].lastAddedHead);\r\n       // We check if the \"array is full\" because 20 writes might not have happened yet\r\n       // And therefor the average would be skewed by dividing it by 20\r\n    }\r\n\r\n\r\n    // NOTE outTokenFor1WETH < lastQuote.mul(150).div(100) check\r\n    function updateRunningAveragePrice(address token, bool isRescue) public returns (uint256) {\r\n        PriceAverage storage currentAveragePrices =  _averagePrices[token];\r\n        address pairWithWETH = pairWithWETHAddressForToken[token];\r\n        (uint256 wethReserves, uint256 tokenReserves) = getPairReserves(address(pairWithWETH));\r\n        // Get amt you would get for 1eth\r\n        uint256 outTokenFor1WETH = COREIUniswapV2Library.getAmountOut(1e18, wethReserves, tokenReserves);\r\n\r\n        uint8 i = currentAveragePrices.lastAddedHead;\r\n        \r\n        ////////////////////\r\n        /// flash loan safety\r\n        //we check the last quote for comparing to this one\r\n        uint256 lastQuote;\r\n        if(i == 0) {\r\n            lastQuote = currentAveragePrices.price[19];\r\n        }\r\n        else {\r\n            lastQuote = currentAveragePrices.price[i - 1];\r\n        }\r\n\r\n        // Safety flash loan revert\r\n        // If change is above 50%\r\n        // This can be rescued by the bool \"isRescue\"\r\n        if(lastQuote != 0 && isRescue == false){\r\n            require(outTokenFor1WETH < lastQuote.mul(15000).div(10000), \"Change too big from previous price\");\r\n        }\r\n        ////////////////////\r\n        \r\n        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.sub(currentAveragePrices.price[i]);\r\n        currentAveragePrices.price[i] = outTokenFor1WETH;\r\n        currentAveragePrices.cumulativeLast20Blocks = currentAveragePrices.cumulativeLast20Blocks.add(outTokenFor1WETH);\r\n        currentAveragePrices.lastAddedHead++;\r\n        if(currentAveragePrices.lastAddedHead > 19) {\r\n            currentAveragePrices.lastAddedHead = 0;\r\n            currentAveragePrices.arrayFull = true;\r\n        }\r\n        return currentAveragePrices.cumulativeLast20Blocks;\r\n    }\r\n\r\n    // Because its possible that price of someting legitimately goes +50%\r\n    // Then the updateRunningAveragePrice would be stuck until it goes down,\r\n    // This allows the admin to \"rescue\" it by writing a new average\r\n    // skiping the +50% check\r\n    function rescueRatioLock(address token) public onlyOwner{\r\n        updateRunningAveragePrice(token, true);\r\n    }\r\n\r\n\r\n\r\n    // Protect form people atomically calling for LGE generation [x]\r\n    // Price manipulation protections\r\n    // use TWAP [x] custom 20 blocks\r\n    // Set max diviation from last trade - not needed [ ]\r\n    // re-entrancy protection [x]\r\n    // dev tax [x]\r\n    function addLiquidityToPairPublic() nonReentrant public{\r\n        addLiquidityToPair(true);\r\n    }\r\n\r\n    // Safety function that can call public add liquidity before\r\n    // This is in case someone manipulates the 20 liquidity addition blocks \r\n    // and screws up the ratio\r\n    // Allows admins 2 hours to rescue the contract.\r\n    function addLiquidityToPairAdmin() nonReentrant onlyOwner public{\r\n        addLiquidityToPair(false);\r\n    }\r\n    \r\n    function getCORERefundForPerson(address guy) public view returns (uint256) {\r\n        return COREContributed[guy].mul(1e12).div(totalCOREContributed).\r\n            mul(totalCOREToRefund).div(1e12);\r\n    }\r\n    \r\n    function getCOREREfund() nonReentrant public {\r\n        require(LGEFinished == true, \"LGE not finished\");\r\n        require(totalCOREToRefund > 0 , \"No refunds\");\r\n        require(COREContributed[msg.sender] > 0, \"You didn't contribute anything\");\r\n        // refund happens just once\r\n        require(CORERefundClaimed[msg.sender] == false , \"You already claimed\");\r\n        \r\n        // To get refund we get the core contributed of this user\r\n        // divide it by total core to get the percentage of total this user contributed\r\n        // And then multiply that by total core\r\n        uint256 COREToRefundToThisPerson = getCORERefundForPerson(msg.sender);\r\n        // Let 50% of total core is refunded, total core contributed is 5000\r\n        // So refund amount it 2500\r\n        // Lets say this user contributed 100, so he needs to get 50 back\r\n        // 100*1e12 = 100000000000000\r\n        // 100000000000000/5000 is 20000000000\r\n        // 20000000000*2500 is 50000000000000\r\n        // 50000000000000/1e21 = 50\r\n        CORERefundClaimed[msg.sender] = true;\r\n        IERC20(COREToken).transfer(msg.sender,COREToRefundToThisPerson);\r\n    }\r\n\r\n    function addLiquidityToPair(bool publicCall) internal {\r\n        require(block.timestamp > contractStartTimestamp.add(LGEDurationDays).add(publicCall ? 2 hours : 0), \"LGE : Liquidity generation ongoing\");\r\n        require(LGEFinished == false, \"LGE : Liquidity generation finished\");\r\n        \r\n        // !!!!!!!!!!!\r\n        //unlock wrapping\r\n        IERC95(wrappedToken).unpauseTransfers();\r\n        //!!!!!!!!!\r\n\r\n\r\n        // // wrap token\r\n        tokenBeingWrapped.transfer(wrappedToken, tokenBeingWrapped.balanceOf(address(this)));\r\n        IERC95(wrappedToken).wrapAtomic(address(this));\r\n        IERC95(wrappedToken).skim(address(this)); // In case\r\n\r\n        // Optimistically get pair\r\n        wrappedTokenUniswapPair = IUniswapV2Factory(coreGlobals.UniswapFactory()).getPair(COREToken , wrappedToken);\r\n        if(wrappedTokenUniswapPair == address(0)) { // Pair doesn't exist yet \r\n            // create pair returns address\r\n            wrappedTokenUniswapPair = IUniswapV2Factory(coreGlobals.UniswapFactory()).createPair(\r\n                COREToken,\r\n                wrappedToken\r\n            );\r\n        }\r\n\r\n        //send dev fee\r\n        // 7.24% \r\n        uint256 DEV_FEE = 724; // TODO: DEV_FEE isn't public //ICoreVault(coreGlobals.COREVault).DEV_FEE();\r\n        address devaddress = ICoreVault(coreGlobals.COREVaultAddress()).devaddr();\r\n        IERC95(wrappedToken).transfer(devaddress, IERC95(wrappedToken).balanceOf(address(this)).mul(DEV_FEE).div(10000));\r\n        IERC20(COREToken).transfer(devaddress, IERC20(COREToken).balanceOf(address(this)).mul(DEV_FEE).div(10000));\r\n\r\n        //calculate core refund\r\n        uint256 balanceCORENow = IERC20(COREToken).balanceOf(address(this));\r\n        uint256 balanceCOREWrappedTokenNow = IERC95(wrappedToken).balanceOf(address(this));\r\n\r\n        ( uint256 tokenBeingWrappedPer1ETH, uint256 coreTokenPer1ETH)  = getHowMuch1WETHBuysOfTokens();\r\n\r\n        uint256 totalValueOfWrapper = balanceCOREWrappedTokenNow.div(tokenBeingWrappedPer1ETH).mul(1e18);\r\n        uint256 totalValueOfCORE =  balanceCORENow.div(coreTokenPer1ETH).mul(1e18);\r\n\r\n        totalCOREToRefund = totalValueOfWrapper >= totalValueOfCORE ? 0 :\r\n            totalValueOfCORE.sub(totalValueOfWrapper).mul(coreTokenPer1ETH).div(1e18);\r\n\r\n\r\n        // send tokenwrap\r\n        IERC95(wrappedToken).transfer(wrappedTokenUniswapPair, IERC95(wrappedToken).balanceOf(address(this)));\r\n\r\n        // send core without the refund\r\n        IERC20(COREToken).transfer(wrappedTokenUniswapPair, balanceCORENow.sub(totalCOREToRefund));\r\n\r\n        require(IUniswapV2Pair(wrappedTokenUniswapPair).totalSupply() == 0, \"Somehow total supply is higher, sanity fail\");\r\n        // mint LP to this adddress\r\n        IUniswapV2Pair(wrappedTokenUniswapPair).mint(address(this));\r\n\r\n        // check how much was minted\r\n        totalLPCreated = IUniswapV2Pair(wrappedTokenUniswapPair).balanceOf(address(this));\r\n\r\n        // calculate minted per contribution\r\n        LPPerUnitContributed = totalLPCreated.mul(1e18).div(totalUnitsContributed.sub(totalCOREToRefund)); // Stored as 1e18 more for round erorrs and change\r\n                                                                               // Remove refunded from the total\r\n        require(LPPerUnitContributed > 0, \"LP Per Unit Contribute Must be above Zero\");\r\n        // set LGE to complete\r\n        LGEFinished = true;\r\n\r\n        //sync the tokens\r\n        ICORETransferHandler(coreGlobals.TransferHandler()).sync(wrappedToken);\r\n        ICORETransferHandler(coreGlobals.TransferHandler()).sync(COREToken);\r\n\r\n    }\r\n    \r\n\r\n\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"COREamt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"COREBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"COREvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Contibution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"COREContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CORERefundClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COREToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEDurationDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LGEStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPPerUnitContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityAtomic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityToPairAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityToPairPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithTokenWithAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreETHPairGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreEthPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreGlobals\",\"outputs\":[{\"internalType\":\"contract ICOREGlobals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numHours\",\"type\":\"uint256\"}],\"name\":\"extendLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"finalizeTokenWrapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAveragePriceLast20Blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCOREREfund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"getCORERefundForPerson\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHowMuch1WETHBuysOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBeingWrappedPer1ETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coreTokenPer1ETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysLong\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreGlobals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_preWrapEthPair\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLGEOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairWithWETHAddressForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preWrapEthPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueRatioLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyETHWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"safetyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPairWithWETH\",\"type\":\"address\"}],\"name\":\"setTokenBeingWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBeingWrapped\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCOREContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCOREToRefund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWrapTokenContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unitsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unitsContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRescue\",\"type\":\"bool\"}],\"name\":\"updateRunningAveragePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokenContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedTokenUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"cLGE","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"99999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://afe338505dad6bfaed2faedcae1bfbec127c5dc719cf561e93bd8d5d9e1960b5"}]}