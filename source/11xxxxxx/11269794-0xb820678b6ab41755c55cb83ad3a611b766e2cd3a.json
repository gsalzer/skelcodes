{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.4;\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;}\r\ncontract ERC20 {\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != address(0x0));\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract yieldFarmer {\r\n    address creator;\r\n    uint8 public decimals = 18;\r\n    uint64 public blockTime = 180000;\r\n    address erushLPtoken = 0x88B96ad151D86AAb2367292f53e53C8eaF12dFa3;\r\n    address tetherAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    event NewFarmer(address indexed from, uint256 value);\r\n    event RemoveLiq(address indexed from, uint256 value);\r\n    using SafeMath for uint;\r\n    constructor() {creator = msg.sender;}\r\n    \r\n    struct fdetailz {\r\n       uint256 _amount;\r\n       uint256 _block;\r\n   }\r\n   \r\n    mapping(address => fdetailz) fdetails;\r\n    \r\n    function importUSDT(uint256 _tokens)  public {\r\n        uint256 rma = _tokens * 10 ** uint256(decimals);\r\n        require(ERC20(tetherAddress).balanceOf(msg.sender) >= _tokens);\r\n        ERC20(tetherAddress).transferFrom(msg.sender, address(this), rma);\r\n    }\r\n\r\n\r\n\r\n    function startFarming(uint256 _tokens)  public {\r\n        //200 LP token provider can reach 50 usdt -> direct proportion with 200&50;\r\n        uint256 rma = _tokens.mul(10 ** uint256(decimals));\r\n        require(rma > 1 * 10 ** uint256(decimals)); //minimum 1 LPtoken require\r\n        require(ERC20(erushLPtoken).balanceOf(msg.sender) >= rma);\r\n        require(fdetails[msg.sender]._amount == 0);\r\n        ERC20(erushLPtoken).transferFrom(msg.sender, address(this), rma);\r\n        uint256 myusdtincome = _tokens.mul(50).div(200);\r\n        ERC20(tetherAddress).transfer(msg.sender, myusdtincome * 10 ** uint256(decimals) );\r\n        fdetails[msg.sender] = fdetailz(rma, block.number);\r\n        emit NewFarmer(msg.sender, _tokens);\r\n    }\r\n    \r\n    function stopFarming() public {\r\n        require(fdetails[msg.sender]._amount != 0);\r\n        require(block.number - fdetails[msg.sender]._block >= blockTime);\r\n        ERC20(erushLPtoken).transfer(msg.sender, fdetails[msg.sender]._amount);\r\n        emit RemoveLiq(msg.sender, fdetails[msg.sender]._amount.div(10 ** uint256(decimals)));\r\n        fdetails[msg.sender] = fdetailz(0, 0);\r\n    }\r\n   \r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender == creator);   // Check if the sender is manager\r\n        if (newOwner != address(0)) {\r\n            creator = newOwner;\r\n        }\r\n    }\r\n    \r\n    function showMyBloks(address _addr) public view returns(uint256) {\r\n        return block.number - fdetails[_addr]._block;\r\n    }\r\n    \r\n    \r\n    function showMyBalance(address _addr) public view returns(uint256) {\r\n        return   fdetails[_addr]._amount.div(10 ** uint256(decimals));\r\n    }\r\n    \r\n    function withdrawal(uint tokens)  public {\r\n        require(msg.sender == creator); \r\n        ERC20(erushLPtoken).transfer(creator, tokens);\r\n    }\r\n    \r\n    function withdrawalUSDT(uint tokens)  public {\r\n        require(msg.sender == creator); \r\n        ERC20(tetherAddress).transfer(creator, tokens);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewFarmer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemoveLiq\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"importUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showMyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showMyBloks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawalUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"yieldFarmer","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a06f8e5f56e2a0b92a6b916865d9974e2170eac2b52e6c29ffdfef77537b46b0"}]}