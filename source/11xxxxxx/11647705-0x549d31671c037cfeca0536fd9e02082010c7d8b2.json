{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Context {\r\n    function _msgSender() internal view  returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view  returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public  onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public  onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract GraRewardPool is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n\r\n    struct UserInfo {\r\n        uint256 Gratotalreward;\r\n        uint256 rewarded; \r\n        uint256 amount;\r\n        uint256 GrarewardDebt;\r\n        uint256 Grapending;\r\n        uint256 BLWrewardDebt;\r\n        uint256 BLWpending;\r\n    }\r\n\r\n    struct PoolInfo {\r\n        IERC20 token;\r\n        uint256 startBlock;\r\n        uint256 endBlock;\r\n        uint256 GraPerBlock;\r\n        uint256 BLWPerBlock;\r\n        uint256 lastRewardBlock;\r\n        uint256 accGraPerShare;\r\n        uint256 accBLWPerShare;\r\n        uint256 totalStake;\r\n    }\r\n    uint256 public lockperiod;\r\n    uint256 public startrelease;\r\n    IERC20 public Gratoken;\r\n    IERC20 public BLWtoken;\r\n \r\n    PoolInfo[] public poolinfo;\r\n\r\n    mapping (uint256 => mapping (address => UserInfo)) public users;\r\n\r\n    event Deposit(address indexed user,uint256 amount);\r\n    event Withdraw(address indexed user,uint256 amount);\r\n    event ReclaimStakingReward(address user, uint256 amount);\r\n    event Set(uint256 pid, uint256 allocPoint, bool withUpdate);\r\n    constructor(IERC20 _Gratoken, IERC20 _BLWtoken, uint256 _lockperiod, uint256 _startrelease) public { \r\n        Gratoken = _Gratoken;\r\n        BLWtoken = _BLWtoken;\r\n        lockperiod = _lockperiod;\r\n        startrelease = _startrelease;\r\n    }\r\n\r\n    function setparms(uint256 _lockperiod, uint256 _startrelease) public onlyOwner{\r\n        lockperiod = _lockperiod;\r\n        startrelease = _startrelease;\r\n        \r\n    }\r\n    modifier validatePool(uint256 _pid) {\r\n        require(_pid < poolinfo.length, \" pool exists?\");\r\n        _;\r\n    }\r\n\r\n\r\n    function getpool() view public returns(PoolInfo[] memory){\r\n        return poolinfo;\r\n    }\r\n\r\n    //添加pool池\r\n    function addPool(IERC20 _token, uint256 _startblock, uint256 _endblock, uint256 _GraPerBlock, uint256 _BLWPerBlock, bool _withUpdate) public onlyOwner {\r\n        for (uint i = 0; i < poolinfo.length; ++i) {\r\n            require(address(poolinfo[i].token) != address(_token), \"pool already exist\");\r\n        }\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > _startblock ? block.number : _startblock;\r\n        poolinfo.push(PoolInfo({\r\n            token: _token,\r\n            startBlock: _startblock,\r\n            endBlock: _endblock,\r\n            GraPerBlock: _GraPerBlock,\r\n            BLWPerBlock: _BLWPerBlock,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accGraPerShare: 0,\r\n            accBLWPerShare: 0,\r\n            totalStake: 0\r\n        }));\r\n    }\r\n  \r\n    \r\n    function getMultiplier(PoolInfo storage pool) internal view returns (uint256) {\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return 0;\r\n        }\r\n        uint256 from = pool.lastRewardBlock;\r\n        uint256 to = block.number < pool.endBlock ? block.number : pool.endBlock;\r\n        if (from >= to) {\r\n            return 0;\r\n        }\r\n        return to.sub(from);\r\n              \r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        uint256 length = poolinfo.length;\r\n        for (uint256 pid = 0; pid < length; pid++) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public validatePool(_pid) {\r\n        \r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock || pool.lastRewardBlock > pool.endBlock) { \r\n            return;\r\n        }\r\n\r\n        uint256 totalStake = pool.totalStake;\r\n        if (totalStake == 0) {\r\n            pool.lastRewardBlock = block.number <= pool.endBlock ? block.number : pool.endBlock;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool);\r\n        uint256 GraReward = multiplier.mul(pool.GraPerBlock);\r\n        uint256 BLWReward = multiplier.mul(pool.BLWPerBlock);\r\n        pool.accGraPerShare = pool.accGraPerShare.add(GraReward.mul(1e18).div(totalStake));\r\n        pool.accBLWPerShare = pool.accBLWPerShare.add(BLWReward.mul(1e18).div(totalStake));\r\n        pool.lastRewardBlock = block.number < pool.endBlock ? block.number : pool.endBlock;\r\n    }\r\n\r\n\r\n    function pendingGra(uint256 _pid, address _user) public view validatePool(_pid) returns (uint256)  {\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][_user];\r\n        uint256 accGraPerShare = pool.accGraPerShare;\r\n\r\n        uint256 totalStake = pool.totalStake;\r\n        if (block.number > pool.lastRewardBlock && totalStake > 0) {\r\n            uint256 multiplier = getMultiplier(pool);\r\n            uint256 GraReward = multiplier.mul(pool.GraPerBlock);\r\n            accGraPerShare = accGraPerShare.add(GraReward.mul(1e18).div(totalStake));\r\n        \r\n        }\r\n        return user.Grapending.add(user.amount.mul(accGraPerShare).div(1e18)).sub(user.GrarewardDebt);\r\n    }\r\n    function pendingBLW(uint256 _pid, address _user) public view validatePool(_pid) returns (uint256)  {\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][_user];\r\n        uint256 accBLWPerShare = pool.accBLWPerShare;\r\n\r\n        uint256 totalStake = pool.totalStake;\r\n        if (block.number > pool.lastRewardBlock && totalStake > 0) {\r\n            uint256 multiplier = getMultiplier(pool);\r\n            uint256 BLWReward = multiplier.mul(pool.BLWPerBlock);\r\n            accBLWPerShare = accBLWPerShare.add(BLWReward.mul(1e18).div(totalStake));\r\n        \r\n        }\r\n        return user.BLWpending.add(user.amount.mul(accBLWPerShare).div(1e18)).sub(user.BLWrewardDebt);\r\n    }\r\n    //抵押\r\n    function deposit(uint256 _pid, uint256 _amount) public validatePool(_pid){\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) { \r\n            uint256 Grapending = user.amount.mul(pool.accGraPerShare).div(1e18).sub(user.GrarewardDebt);\r\n            uint256 BLWpending = user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.BLWrewardDebt);\r\n            user.Grapending = user.Grapending.add(Grapending);\r\n            user.Gratotalreward = user.Gratotalreward.add(Grapending);\r\n            user.BLWpending = user.BLWpending.add(BLWpending);\r\n        }\r\n        pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        pool.totalStake = pool.totalStake.add(_amount);\r\n        user.amount = user.amount.add(_amount);\r\n        user.GrarewardDebt = user.amount.mul(pool.accGraPerShare).div(1e18);\r\n        user.BLWrewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n\r\n    //提取抵押\r\n    function withdraw(uint256 _pid, uint256 _amount) public validatePool(_pid){\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][msg.sender];\r\n        require(block.number >= pool.endBlock, \"withdraw time not reached\");\r\n        require(user.amount >= _amount, \"withdraw: insufficient balance\");\r\n        updatePool(_pid);\r\n        uint256 Grapending = user.amount.mul(pool.accGraPerShare).div(1e18).sub(user.GrarewardDebt);\r\n        uint256 BLWpending = user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.BLWrewardDebt);\r\n        if (Grapending > 0 || BLWpending > 0) {\r\n            user.Gratotalreward = user.Gratotalreward.add(Grapending);\r\n            user.Grapending = user.Grapending.add(Grapending);\r\n            user.BLWpending = user.BLWpending.add(BLWpending);\r\n        }\r\n        user.amount = user.amount.sub(_amount);\r\n        user.GrarewardDebt = user.amount.mul(pool.accGraPerShare).div(1e18);\r\n        user.BLWrewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        pool.token.safeTransfer(msg.sender, _amount);\r\n        pool.totalStake = pool.totalStake.sub(_amount);\r\n        emit Withdraw(msg.sender,_amount);\r\n        }\r\n\r\n    function reclaimBLWStakingReward(uint256 _pid) public validatePool(_pid) {\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 BLWpending = user.BLWpending.add(user.amount.mul(pool.accBLWPerShare).div(1e18).sub(user.BLWrewardDebt));\r\n        if (BLWpending > 0) {\r\n            safeBLWTransfer(msg.sender, BLWpending);\r\n        }\r\n        user.BLWpending = 0;\r\n        user.BLWrewardDebt = user.amount.mul(pool.accBLWPerShare).div(1e18);\r\n        emit ReclaimStakingReward(msg.sender, BLWpending);\r\n    }\r\n\r\n    function reclaimGraStakingReward(uint256 _pid) public validatePool(_pid){\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        uint256 Grapending = user.amount.mul(pool.accGraPerShare).div(1e18).sub(user.GrarewardDebt);\r\n        if (Grapending > 0) {\r\n            user.Grapending = user.Grapending.add(Grapending);\r\n            user.Gratotalreward = user.Gratotalreward.add(Grapending);   \r\n        }\r\n        uint256 time = block.timestamp.sub(startrelease).div(86400);\r\n        if (time < lockperiod) {\r\n            if (user.Gratotalreward.mul(time).div(lockperiod) > user.rewarded){\r\n                uint256 amount = user.Gratotalreward.mul(time).div(lockperiod).sub(user.rewarded);\r\n                safegraTransfer(msg.sender, amount);\r\n                user.rewarded = user.rewarded.add(amount);\r\n                user.Grapending = user.Grapending.sub(amount);\r\n                emit ReclaimStakingReward(msg.sender, amount);\r\n            }\r\n        }else{\r\n            uint256 amount = user.Gratotalreward > user.rewarded ? user.Gratotalreward.sub(user.rewarded) : 0;\r\n            safegraTransfer(msg.sender, amount);\r\n            user.rewarded = user.rewarded.add(amount);\r\n            user.Grapending = user.Grapending.sub(amount);\r\n            emit ReclaimStakingReward(msg.sender, amount);\r\n        }\r\n        \r\n        user.GrarewardDebt = user.amount.mul(pool.accGraPerShare).div(1e18);\r\n        \r\n    }\r\n\r\n    function getGraclaimamount(uint256 _pid, address _user) view public returns(uint256){\r\n        PoolInfo storage pool = poolinfo[_pid];\r\n        UserInfo storage user = users[_pid][_user];\r\n        uint256 accGraPerShare = pool.accGraPerShare;\r\n\r\n        uint256 totalStake = pool.totalStake;\r\n        if (block.number > pool.lastRewardBlock && totalStake > 0) {\r\n            uint256 multiplier = getMultiplier(pool);\r\n            uint256 GraReward = multiplier.mul(pool.GraPerBlock);\r\n            accGraPerShare = accGraPerShare.add(GraReward.mul(1e18).div(totalStake));\r\n        }\r\n        if (block.timestamp <= startrelease){\r\n            return 0;\r\n        }\r\n\r\n        uint256 Gratotalreward = user.Gratotalreward.add(user.amount.mul(accGraPerShare).div(1e18).sub(user.GrarewardDebt));\r\n\r\n        uint256 time = block.timestamp.sub(startrelease).div(86400);\r\n\r\n        uint256 amount = Gratotalreward.mul(time).div(lockperiod);\r\n\r\n        if (user.rewarded ==  Gratotalreward || Gratotalreward == 0 || amount <= user.rewarded) {\r\n            return 0;\r\n        }\r\n        \r\n        if (time < lockperiod) {\r\n            return amount.sub(user.rewarded);\r\n        }else{\r\n            return Gratotalreward > user.rewarded ? Gratotalreward.sub(user.rewarded) : 0;\r\n        }\r\n    }\r\n\r\n    function safegraTransfer(address _to, uint256 _amount) internal {\r\n        uint256 GraBalance = Gratoken.balanceOf(address(this));\r\n        if (_amount > GraBalance) {\r\n            Gratoken.transfer(_to, GraBalance);\r\n        } else {\r\n            Gratoken.transfer(_to, _amount);\r\n        }\r\n    }\r\n    function safeBLWTransfer(address _to, uint256 _amount) internal {\r\n        uint256 BLWBalance = BLWtoken.balanceOf(address(this));\r\n        if (_amount > BLWBalance) {\r\n            BLWtoken.transfer(_to, BLWBalance);\r\n        } else {\r\n            BLWtoken.transfer(_to, _amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_Gratoken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_BLWtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockperiod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startrelease\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReclaimStakingReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLWtoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Gratoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endblock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_GraPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_BLWPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGraclaimamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpool\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GraPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BLWPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGraPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBLWPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"internalType\":\"struct GraRewardPool.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockperiod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBLW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingGra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolinfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GraPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BLWPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGraPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBLWPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reclaimBLWStakingReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reclaimGraStakingReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockperiod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startrelease\",\"type\":\"uint256\"}],\"name\":\"setparms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startrelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Gratotalreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GrarewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Grapending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BLWrewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BLWpending\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GraRewardPool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a23b7e3bb936c7753b5e7a6c304a8fb43979d200000000000000000000000006767d3789ff7c678612e771b7b78db7fa04a063c000000000000000000000000000000000000000000000000000000000000016d0000000000000000000000000000000000000000000000000000000060771180","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3e8da2d58b9cb515e65e89920142baa146b9f8952ddedc12d7e50ec248423894"}]}