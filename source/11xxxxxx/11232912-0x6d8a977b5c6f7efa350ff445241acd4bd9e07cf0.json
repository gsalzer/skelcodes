{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function delegates(address) external view returns (address);\r\n    function getCurrentVotes(address) external view returns (uint96);\r\n}\r\n\r\nlibrary GovernaceTypes {\r\n   struct Proposal {\r\n        uint id;\r\n        address proposer;\r\n        uint eta;\r\n        address[] targets;\r\n        uint[] values;\r\n        string[] signatures;\r\n        bytes[] calldatas;\r\n        uint startBlock;\r\n        uint endBlock;\r\n        uint forVotes;\r\n        uint againstVotes;\r\n        bool canceled;\r\n        bool executed;\r\n    }\r\n\r\n    struct Receipt {\r\n        bool hasVoted;\r\n        bool support;\r\n        uint96 votes;\r\n    }\r\n\r\n     enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n     \r\n}\r\n\r\ninterface GoveranceInterface {\r\n    function proposals(uint) external view returns (GovernaceTypes.Proposal memory);\r\n    function proposalCount() external view returns (uint);\r\n\r\n    function state(uint) external view returns (GovernaceTypes.ProposalState);\r\n\r\n    function getQuorumVotes() external view returns (uint) ;\r\n    function getProposalThreshold() external view returns (uint);\r\n    function proposalMaxOperations() external pure returns (uint);\r\n    function getVotingDelay() external view returns (uint);\r\n    function getVotingPeriod() external view returns (uint);\r\n}\r\n\r\n\r\ncontract Resolver {\r\n    struct ProposalState {\r\n        uint forVotes;\r\n        uint againstVotes;\r\n        bool isFailed;\r\n        bool isEnded;\r\n        GovernaceTypes.ProposalState currentState;\r\n    }\r\n\r\n    function getProposalStates(address govAddr, uint256[] memory ids) public view returns (ProposalState[] memory) {\r\n        ProposalState[] memory proposalStates = new ProposalState[](ids.length);\r\n        GoveranceInterface govContract = GoveranceInterface(govAddr);\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            uint id = ids[i];\r\n            GovernaceTypes.Proposal memory proposal = govContract.proposals(id);\r\n            bool isEnded = proposal.endBlock <= block.number;\r\n            bool isFailed = proposal.forVotes <= proposal.againstVotes || proposal.forVotes < govContract.getQuorumVotes();\r\n            proposalStates[i] = ProposalState({\r\n                forVotes: proposal.forVotes,\r\n                againstVotes: proposal.againstVotes,\r\n                isFailed: isEnded && isFailed,\r\n                isEnded: isEnded,\r\n                currentState: govContract.state(id)\r\n            });\r\n        }\r\n        return proposalStates;\r\n    }\r\n}\r\n\r\ncontract AtlasGovResolver is Resolver {\r\n\r\n    string public constant name = \"Atlas-Governance-Resolver-v1.0\";\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"govAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getProposalStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFailed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"enum GovernaceTypes.ProposalState\",\"name\":\"currentState\",\"type\":\"uint8\"}],\"internalType\":\"struct Resolver.ProposalState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtlasGovResolver","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5f1a900791b728878c31f48b9fedfd5a46c255c409ac747ce8ba7c67c7a305c3"}]}