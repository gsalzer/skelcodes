{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nabstract contract AuctionHouseLike {\r\n    function bids(uint) external view virtual returns (uint, uint, uint, uint, uint48, address, address);\r\n    function buyCollateral(uint256 id, uint256 wad) external virtual;\r\n    function liquidationEngine() view public virtual returns (LiquidationEngineLike);\r\n    function collateralType() view public virtual returns (bytes32);\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function tokenCollateral(bytes32, address) virtual public view returns (uint);\r\n    function canModifySAFE(address, address) virtual public view returns (uint);\r\n    function collateralTypes(bytes32) virtual public view returns (uint, uint, uint, uint, uint);\r\n    function coinBalance(address) virtual public view returns (uint);\r\n    function safes(bytes32, address) virtual public view returns (uint, uint);\r\n    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\r\n    function approveSAFEModification(address) virtual public;\r\n    function denySAFEModification(address) virtual public;\r\n    function transferInternalCoins(address, address, uint) virtual public;\r\n}\r\n\r\nabstract contract CollateralJoinLike {\r\n    function decimals() virtual public returns (uint);\r\n    function collateral() virtual public returns (CollateralLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n    function collateralType() virtual public returns (bytes32);\r\n}\r\n\r\nabstract contract CoinJoinLike {\r\n    function safeEngine() virtual public returns (SAFEEngineLike);\r\n    function systemCoin() virtual public returns (CollateralLike);\r\n    function join(address, uint) virtual public payable;\r\n    function exit(address, uint) virtual public;\r\n}\r\n\r\nabstract contract CollateralLike {\r\n    function approve(address, uint) virtual public;\r\n    function transfer(address, uint) virtual public;\r\n    function transferFrom(address, address, uint) virtual public;\r\n    function deposit() virtual public payable;\r\n    function withdraw(uint) virtual public;\r\n    function balanceOf(address) virtual public view returns (uint);\r\n}\r\n\r\nabstract contract LiquidationEngineLike {\r\n    function chosenSAFESaviour(bytes32, address) virtual view public returns (address);\r\n    function safeSaviours(address) virtual view public returns (uint);\r\n    function liquidateSAFE(bytes32 collateralType, address safe) virtual external returns (uint256 auctionId);\r\n    function safeEngine() view public virtual returns (SAFEEngineLike);\r\n    function collateralTypes(bytes32) public virtual returns(AuctionHouseLike,uint,uint);\r\n}\r\n\r\n/// @title GEB Multi Collateral Keeper Flash Proxy\r\n/// @notice Trustless proxy that facilitates SAFE liquidation and bidding in collateral auctions using Uniswap V2 flashswaps\r\n/// @notice Multi collateral version, works with both ETH and general ERC20 collateral\r\ncontract GebUniswapV2MultiCollateralKeeperFlashProxy {\r\n    SAFEEngineLike          public safeEngine;\r\n    CollateralLike          public weth;\r\n    CollateralLike          public coin;\r\n    CoinJoinLike            public coinJoin;\r\n    IUniswapV2Pair          public uniswapPair;\r\n    IUniswapV2Factory       public uniswapFactory;\r\n    LiquidationEngineLike   public liquidationEngine;\r\n    bytes32                 public collateralType;\r\n\r\n    /// @notice Constructor\r\n    /// @param wethAddress WETH address\r\n    /// @param systemCoinAddress System coin address\r\n    /// @param uniswapFactoryAddress Uniswap V2 factory address\r\n    /// @param coinJoinAddress CoinJoin address\r\n    /// @param liquidationEngineAddress Liquidation engine address\r\n    constructor(\r\n        address wethAddress,\r\n        address systemCoinAddress,\r\n        address uniswapFactoryAddress,\r\n        address coinJoinAddress,\r\n        address liquidationEngineAddress\r\n    ) public {\r\n        require(wethAddress != address(0), \"GebUniswapV2MultiCollateralKeeperFlashProxy/null-weth\");\r\n        require(systemCoinAddress != address(0), \"GebUniswapV2MultiCollateralKeeperFlashProxy/null-system-coin\");\r\n        require(uniswapFactoryAddress != address(0), \"GebUniswapV2MultiCollateralKeeperFlashProxy/null-uniswap-factory\");\r\n        require(coinJoinAddress != address(0), \"GebUniswapV2MultiCollateralKeeperFlashProxy/null-coin-join\");\r\n        require(liquidationEngineAddress != address(0), \"GebUniswapV2MultiCollateralKeeperFlashProxy/null-liquidation-engine\");\r\n\r\n        weth                = CollateralLike(wethAddress);\r\n        coin                = CollateralLike(systemCoinAddress);\r\n        uniswapFactory      = IUniswapV2Factory(uniswapFactoryAddress);\r\n        coinJoin            = CoinJoinLike(coinJoinAddress);\r\n        liquidationEngine   = LiquidationEngineLike(liquidationEngineAddress);\r\n        safeEngine          = liquidationEngine.safeEngine();\r\n    }\r\n\r\n    // --- Math ---\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"GebUniswapV2MultiCollateralKeeperFlashProxy/sub-overflow\");\r\n    }\r\n    function wad(uint rad) internal pure returns (uint) {\r\n        return rad / 10 ** 27;\r\n    }\r\n\r\n    // --- Internal Utils ---\r\n    /// @notice Initiates a flashwap\r\n    /// @param amount Amount to borrow\r\n    /// @param data Callback data\r\n    function _startSwap(uint amount, bytes memory data) internal {\r\n        uint amount0Out = address(coin) == uniswapPair.token0() ? amount : 0;\r\n        uint amount1Out = address(coin) == uniswapPair.token1() ? amount : 0;\r\n\r\n        uniswapPair.swap(amount0Out, amount1Out, address(this), data);\r\n    }\r\n\r\n    // --- External Utils ---\r\n    /// @notice Callback for Uniswap V2\r\n    /// @param _sender Flashswap requestor (must be this contract)\r\n    /// @param _amount0 Amount of token0\r\n    /// @param _amount1 Amount of token1\r\n    /// @param _data Data sent back from Uniswap\r\n    function uniswapV2Call(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external {\r\n        require(_sender == address(this), \"GebUniswapV2MultiCollateralKeeperFlashProxy/invalid-sender\");\r\n        require(msg.sender == address(uniswapPair), \"GebUniswapV2MultiCollateralKeeperFlashProxy/invalid-uniswap-pair\");\r\n\r\n        (address caller, CollateralJoinLike collateralJoin, AuctionHouseLike auctionHouse, uint auctionId, uint amount) = abi.decode(\r\n            _data, (address, CollateralJoinLike, AuctionHouseLike, uint, uint)\r\n        );\r\n\r\n        uint wadAmount = wad(amount) + 1;\r\n\r\n        // join COIN\r\n        coin.approve(address(coinJoin), wadAmount);\r\n        coinJoin.join(address(this), wadAmount);\r\n\r\n        // bid\r\n        auctionHouse.buyCollateral(auctionId, amount);\r\n\r\n        // exit collateral\r\n        collateralJoin.exit(address(this), safeEngine.tokenCollateral(collateralJoin.collateralType(), address(this)));\r\n\r\n        // repay loan\r\n        uint pairBalanceTokenBorrow = coin.balanceOf(address(uniswapPair));\r\n        uint pairBalanceTokenPay = collateralJoin.collateral().balanceOf(address(uniswapPair));\r\n        uint amountToRepay = ((1000 * pairBalanceTokenPay * wadAmount ) / (997 * pairBalanceTokenBorrow)) + 1;\r\n        require(amountToRepay <= collateralJoin.collateral().balanceOf(address(this)), \"GebUniswapV2MultiCollateralKeeperFlashProxy/profit-not-enough-to-repay-the-flashswap\");\r\n        collateralJoin.collateral().transfer(address(uniswapPair), amountToRepay);\r\n\r\n        // send profit back\r\n        if (collateralJoin.collateral() == weth) {\r\n            uint profit = weth.balanceOf(address(this));\r\n            weth.withdraw(profit);\r\n            caller.call{value: profit}(\"\");\r\n        } else {\r\n            collateralJoin.collateral().transfer(caller, collateralJoin.collateral().balanceOf(address(this)));\r\n        }\r\n\r\n        uniswapPair = IUniswapV2Pair(address(0x0));\r\n    }\r\n\r\n    // --- Core Bidding and Settling Logic ---\r\n    /// @notice Liquidates an underwater SAFE and settles the auction right away\r\n    /// @dev It will revert for protected safes (those that have saviours), these need to be liquidated through the LiquidationEngine\r\n    /// @param collateralJoin Join address for a collateral type\r\n    /// @param safe A SAFE's ID\r\n    /// @return auction Auction ID\r\n    function liquidateAndSettleSAFE(CollateralJoinLike collateralJoin, address safe) public returns (uint auction) {\r\n        collateralType = collateralJoin.collateralType();\r\n        if (liquidationEngine.safeSaviours(liquidationEngine.chosenSAFESaviour(collateralType, safe)) == 1) {\r\n            require (liquidationEngine.chosenSAFESaviour(collateralType, safe) == address(0),\r\n            \"GebUniswapV2MultiCollateralKeeperFlashProxy/safe-is-protected\");\r\n        }\r\n\r\n        auction = liquidationEngine.liquidateSAFE(collateralType, safe);\r\n        settleAuction(collateralJoin, auction);\r\n    }\r\n\r\n    /// @notice Settle an auction\r\n    /// @param collateralJoin Join address for a collateral type\r\n    /// @param auctionId ID of the auction to be settled\r\n    function settleAuction(CollateralJoinLike collateralJoin, uint auctionId) public {\r\n        (AuctionHouseLike auctionHouse,,) = liquidationEngine.collateralTypes(collateralJoin.collateralType());\r\n        (uint raisedAmount,,, uint amountToRaise, uint48 auctionDeadline,,) = auctionHouse.bids(auctionId);\r\n        require(auctionDeadline > now, \"GebUniswapV2MultiCollateralKeeperFlashProxy/auction-expired\");\r\n        uint amount = subtract(amountToRaise, raisedAmount);\r\n        require(amount > 0, \"GebUniswapV2MultiCollateralKeeperFlashProxy/auction-already-settled\");\r\n\r\n        bytes memory callbackData = abi.encode(\r\n            msg.sender,\r\n            address(collateralJoin),\r\n            address(auctionHouse),\r\n            auctionId,\r\n            amount);   // rad\r\n\r\n        uniswapPair = IUniswapV2Pair(uniswapFactory.getPair(address(collateralJoin.collateral()), address(coin)));\r\n\r\n        safeEngine.approveSAFEModification(address(auctionHouse));\r\n        _startSwap(wad(amount) + 1, callbackData);\r\n        safeEngine.denySAFEModification(address(auctionHouse));\r\n    }\r\n\r\n    // --- Fallback ---\r\n    receive() external payable {\r\n        require(msg.sender == address(weth), \"GebUniswapV2MultiCollateralKeeperFlashProxy/only-weth-withdrawals-allowed\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"systemCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coinJoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidationEngineAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"contract CollateralLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinJoin\",\"outputs\":[{\"internalType\":\"contract CoinJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CollateralJoinLike\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"liquidateAndSettleSAFE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract LiquidationEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CollateralJoinLike\",\"name\":\"collateralJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV2Call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract CollateralLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"GebUniswapV2MultiCollateralKeeperFlashProxy","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000003ab458634910aad20ef5f1c8ee96f1d6ac549190000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000000a5653cca4db1b6e265f47caf6969e64f1cfdc4500000000000000000000000027efc6ffe79692e0521e7e27657cf228240a06c2","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b03710ba9c431f7ab22948479ac6c50d579ecb7fa476b280dfa96ea58b150a95"}]}