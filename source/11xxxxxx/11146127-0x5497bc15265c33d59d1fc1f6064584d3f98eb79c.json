{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Poll.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\ncontract Poll is Ownable {\r\n    WalletRegistry walletRegistry;\r\n    Token token;\r\n\r\n    // Designates when the poll is over\r\n    uint256 public end;\r\n\r\n    string question;\r\n\r\n    struct Option {\r\n        uint256 id;\r\n        string text;\r\n        uint256 votes; // Represented in weis\r\n    }\r\n\r\n    Option[] options;\r\n\r\n    mapping(address => bool) private voted;\r\n\r\n    constructor(\r\n        WalletRegistry _walletRegistry,\r\n        Token _token,\r\n        string memory _question,\r\n        uint256 _end\r\n    ) public {\r\n        walletRegistry = _walletRegistry;\r\n        token = _token;\r\n        question = _question;\r\n        end = _end;\r\n    }\r\n\r\n    function addOption(uint256 optionId, string memory text) public onlyOwner {\r\n        options.push(Option(optionId, text, 0));\r\n    }\r\n\r\n    function vote(address account, uint256 optionId) public returns (bool) {\r\n        Controller controller = Controller(msg.sender);\r\n        require(\r\n            controller.votingPermissions(account),\r\n            \"This account cannot vote\"\r\n        );\r\n        require(controller.balances(account) > 0, \"No balance to vote\");\r\n        require(\r\n            walletRegistry.exists(account),\r\n            \"Sender is not a registered account\"\r\n        );\r\n        require(!voted[account], \"Account already voted\");\r\n        require(end > block.timestamp, \"Voting period is already over\");\r\n\r\n        for (uint256 index = 0; index < options.length; index++) {\r\n            if (options[index].id == optionId) {\r\n                options[index].votes += controller.balances(account);\r\n                voted[account] = true;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        revert(\"Not a valid option\");\r\n    }\r\n\r\n    function optionText(uint256 index) public view returns (string memory) {\r\n        return options[index].text;\r\n    }\r\n\r\n    function optionVotes(uint256 index) public view returns (uint256) {\r\n        return options[index].votes;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Controller.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract Controller is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    WalletRegistry walletRegistry;\r\n    Token token;\r\n\r\n    // Token balances\r\n    mapping(address => uint256) public balances;\r\n\r\n    // Designates whether a user is able to vote\r\n    mapping(address => bool) public votingPermissions;\r\n\r\n    // Initial vested amounts\r\n    mapping(address => uint256) public initialVestedAmounts;\r\n\r\n    // New amounts transferred\r\n    mapping(address => mapping(uint256 => uint256)) public newVestedAmounts;\r\n\r\n    // Vesting transferred\r\n    mapping(address => uint256) public vestingsTransferred;\r\n\r\n    // Vesting period starts for each wallet\r\n    mapping(address => uint256) public startVestings;\r\n\r\n    // Vesting periods\r\n    uint256 public firstVestingPeriodStart = 90;\r\n    uint256 public secondVestingPeriodStart = 180;\r\n    uint256 public thirdVestingPeriodStart = 270;\r\n    uint256 public fourthVestingPeriodStart = 365;\r\n\r\n    uint256 public firstVestingPeriodStartDays = 90 days;\r\n    uint256 public secondVestingPeriodStartDays = 180 days;\r\n    uint256 public thirdVestingPeriodStartDays = 270 days;\r\n    uint256 public fourthVestingPeriodStartDays = 365 days;\r\n\r\n    event EnableVoting();\r\n    event ConfigureVesting(\r\n        address account,\r\n        uint256 startVesting,\r\n        uint256 initialVestedAmount\r\n    );\r\n    event AddNewVestedAmount(uint256 amount);\r\n    event Transfer(address to, uint256 amount);\r\n    event Vote(address indexed account, address indexed poll, uint256 option);\r\n\r\n    modifier onlyRegistered() {\r\n        require(\r\n            walletRegistry.exists(msg.sender),\r\n            \"Sender is not a registered account\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == address(token), \"Sender is not ERC20 token BHF\");\r\n        _;\r\n    }\r\n\r\n    constructor(WalletRegistry _walletRegistry, Token _token) public {\r\n        walletRegistry = _walletRegistry;\r\n        token = _token;\r\n    }\r\n\r\n    function enableVoting(address account) public onlyOwner {\r\n        require(votingPermissions[account] == false, \"Voting already enabled\");\r\n\r\n        votingPermissions[account] = true;\r\n\r\n        emit EnableVoting();\r\n    }\r\n\r\n    function configureVesting(\r\n        address account,\r\n        uint256 _initialVestedAmount,\r\n        uint256 _startVesting\r\n    ) public onlyOwner {\r\n        require(\r\n            initialVestedAmounts[account] == 0,\r\n            \"Vesting already configured\"\r\n        );\r\n\r\n        startVestings[account] = _startVesting;\r\n        initialVestedAmounts[account] = _initialVestedAmount;\r\n\r\n        emit ConfigureVesting(account, _startVesting, _initialVestedAmount);\r\n    }\r\n\r\n    function addNewVestedAmount(address account, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(initialVestedAmounts[account] != 0, \"Vesting not configured\");\r\n        require(amount > 0, \"Increase is 0\");\r\n\r\n        newVestedAmounts[account][nextVestingPeriod(\r\n            account\r\n        )] = newVestedAmounts[account][nextVestingPeriod(account)].add(amount);\r\n\r\n        emit AddNewVestedAmount(amount);\r\n    }\r\n\r\n    function transfer(address account, uint256 amount) public onlyRegistered {\r\n        require(\r\n            availableToTransfer(msg.sender) >= amount,\r\n            \"Wallet: Amount is subject to vesting or no balance\"\r\n        );\r\n        require(\r\n            token.transfer(account, amount),\r\n            \"Wallet: Could not complete the transfer\"\r\n        );\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n        manageTransferredAmount(amount);\r\n\r\n        emit Transfer(account, amount);\r\n    }\r\n\r\n    function manageTransferredAmount(uint256 amount) internal {\r\n        if (freeFromVesting(msg.sender) > vestingsTransferred[msg.sender]) {\r\n            if (amount <= freeFromVesting(msg.sender)) {\r\n                vestingsTransferred[msg.sender] = vestingsTransferred[msg\r\n                    .sender]\r\n                    .add(amount);\r\n            } else {\r\n                vestingsTransferred[msg.sender] = freeFromVesting(msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    function vote(Poll poll, uint256 option) public onlyRegistered {\r\n        require(poll.vote(msg.sender, option), \"Could not vote\");\r\n\r\n        emit Vote(msg.sender, address(poll), option);\r\n    }\r\n\r\n    function availableToTransfer(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return nonVestedAmount(account).add(transferrableVesting(account));\r\n    }\r\n\r\n    function transferrableVesting(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return freeFromVesting(account) - vestingsTransferred[account];\r\n    }\r\n\r\n    function freeFromVesting(address account) internal view returns (uint256) {\r\n        /*\r\n        Amount free from vesting calculed from the total vesting amount, it doen't take\r\n        tranferred vesting into account.\r\n        */\r\n        uint256 _freeFromVesting = 0;\r\n        uint256 _currentVestingPeriod = currentVestingPeriod(account);\r\n        uint256 _totalVestedAmountAvailable = totalVestedAmountAvailable(\r\n            account\r\n        );\r\n\r\n        if (_currentVestingPeriod == fourthVestingPeriodStart) {\r\n            _freeFromVesting = _totalVestedAmountAvailable; // 100%\r\n        } else if (_currentVestingPeriod == thirdVestingPeriodStart) {\r\n            _freeFromVesting = (_totalVestedAmountAvailable.mul(300)).div(1000); // 30%\r\n        } else if (_currentVestingPeriod == secondVestingPeriodStart) {\r\n            _freeFromVesting = (_totalVestedAmountAvailable.mul(225)).div(1000); // 22.5%\r\n        } else if (_currentVestingPeriod == firstVestingPeriodStart) {\r\n            _freeFromVesting = (_totalVestedAmountAvailable.mul(150)).div(1000); // 15.0%\r\n        } else {\r\n            _freeFromVesting = (_totalVestedAmountAvailable.mul(75)).div(1000); // 7.5%\r\n        }\r\n\r\n        return _freeFromVesting;\r\n    }\r\n\r\n    function increaseBalance(address account, uint256 amount) public onlyToken {\r\n        balances[account] = balances[account].add(amount);\r\n    }\r\n\r\n    function totalNewVestedAmounts(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 nextVestingPeriod = nextVestingPeriod(account);\r\n\r\n        if (nextVestingPeriod == firstVestingPeriodStart) {\r\n            return newVestedAmounts[account][firstVestingPeriodStart];\r\n        } else if (nextVestingPeriod == secondVestingPeriodStart) {\r\n            return\r\n                newVestedAmounts[account][firstVestingPeriodStart].add(\r\n                    newVestedAmounts[account][secondVestingPeriodStart]\r\n                );\r\n        } else if (nextVestingPeriod == thirdVestingPeriodStart) {\r\n            return\r\n                newVestedAmounts[account][firstVestingPeriodStart]\r\n                    .add(newVestedAmounts[account][secondVestingPeriodStart])\r\n                    .add(newVestedAmounts[account][thirdVestingPeriodStart]);\r\n        } else {\r\n            return\r\n                newVestedAmounts[account][firstVestingPeriodStart]\r\n                    .add(newVestedAmounts[account][secondVestingPeriodStart])\r\n                    .add(newVestedAmounts[account][thirdVestingPeriodStart])\r\n                    .add(newVestedAmounts[account][fourthVestingPeriodStart]);\r\n        }\r\n    }\r\n\r\n    function totalVestedAmountAvailable(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalNewVestedAmounts(account) + initialVestedAmounts[account];\r\n    }\r\n\r\n    function totalVestedAmount(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            newVestedAmounts[account][firstVestingPeriodStart]\r\n                .add(newVestedAmounts[account][secondVestingPeriodStart])\r\n                .add(newVestedAmounts[account][thirdVestingPeriodStart])\r\n                .add(newVestedAmounts[account][fourthVestingPeriodStart])\r\n                .add(initialVestedAmounts[account]);\r\n    }\r\n\r\n    function currentVestingPeriod(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 currentTime = time();\r\n        if (\r\n            startVestings[account] <= currentTime &&\r\n            currentTime <\r\n            startVestings[account].add(firstVestingPeriodStartDays)\r\n        ) {\r\n            // Not stored since this is a dummy period in relation to new amounts in vesting\r\n            return 0;\r\n        } else if (\r\n            startVestings[account].add(firstVestingPeriodStartDays) <=\r\n            currentTime &&\r\n            currentTime <\r\n            startVestings[account].add(secondVestingPeriodStartDays)\r\n        ) {\r\n            return firstVestingPeriodStart;\r\n        } else if (\r\n            startVestings[account].add(secondVestingPeriodStartDays) <=\r\n            currentTime &&\r\n            currentTime <\r\n            startVestings[account].add(thirdVestingPeriodStartDays)\r\n        ) {\r\n            return secondVestingPeriodStart;\r\n        } else if (\r\n            startVestings[account].add(thirdVestingPeriodStartDays) <=\r\n            currentTime &&\r\n            currentTime <\r\n            startVestings[account].add(fourthVestingPeriodStartDays)\r\n        ) {\r\n            return thirdVestingPeriodStart;\r\n        } else {\r\n            return fourthVestingPeriodStart;\r\n        }\r\n    }\r\n\r\n    function nextVestingPeriod(address account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        /*\r\n        Returns the next vesting period, if last period is active keeps returning\r\n        the last one\r\n        */\r\n        if (time() <= startVestings[account].add(firstVestingPeriodStartDays)) {\r\n            return firstVestingPeriodStart;\r\n        } else if (\r\n            time() <= startVestings[account].add(secondVestingPeriodStartDays)\r\n        ) {\r\n            return secondVestingPeriodStart;\r\n        } else if (\r\n            time() <= startVestings[account].add(thirdVestingPeriodStartDays)\r\n        ) {\r\n            return thirdVestingPeriodStart;\r\n        } else {\r\n            return fourthVestingPeriodStart;\r\n        }\r\n    }\r\n\r\n    function nonVestedAmount(address account) internal view returns (uint256) {\r\n        /* \r\n            Returns the amount managed by the contract but not related to vesting\r\n            in any meanings\r\n        */\r\n        uint256 remainingVesting = totalVestedAmount(account).sub(\r\n            vestingsTransferred[account]\r\n        );\r\n\r\n        return balances[account].sub(remainingVesting);\r\n    }\r\n\r\n    function time() public virtual view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\n\r\ncontract Token is ERC20 {\r\n    Controller controller;\r\n\r\n    address burnerAddress;\r\n\r\n    constructor(uint256 _totalSupply, address _burnerAddress)\r\n        public\r\n        ERC20(\"Blue Hill\", \"BHF\")\r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n        burnerAddress = _burnerAddress;\r\n        controller = Controller(address(0));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            msg.sender != burnerAddress,\r\n            \"Cannot transfer from burner address\"\r\n        );\r\n        _transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Method to deposit tokens in the controller\r\n    function depositController(address account, uint256 amount) public {\r\n        controller.increaseBalance(account, amount);\r\n        transfer(address(controller), amount);\r\n    }\r\n\r\n    // Total supply removing burned tokens\r\n    function totalAvailable() public view returns (uint256) {\r\n        return super.totalSupply() - balanceOf(burnerAddress);\r\n    }\r\n\r\n    function setController(Controller _controller) public {\r\n        require(\r\n            address(controller) == address(0),\r\n            \"Controller address already set.\"\r\n        );\r\n        controller = _controller;\r\n    }\r\n}\r\n\r\n// File: contracts/WalletRegistry.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n\r\ncontract WalletRegistry is Ownable {\r\n    mapping(address => bool) private wallets;\r\n\r\n    function addWallet(address _wallet) public onlyOwner {\r\n        wallets[_wallet] = true;\r\n    }\r\n\r\n    function exists(address _wallet) public view returns (bool) {\r\n        return wallets[_wallet];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Controller\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000073ce27351811f40c0000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f06038fa2ed5198b5e3c2b2256d1a1192618a42b196a358e594a8af65412272"}]}