{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n// File: localhost/contracts/Libraries/utils/DateTime.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract DateTime {\r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint constant SECONDS_PER_MINUTE = 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n    \r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n\r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n    \r\n    function getYear(uint timestamp) internal pure returns (uint year) {\r\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getMonth(uint timestamp) internal pure returns (uint month) {\r\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n    function getDay(uint timestamp) internal pure returns (uint day) {\r\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n}\r\n// File: localhost/contracts/Libraries/tokens/SafeERC20.sol\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/IERC20.sol\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/IERC1155Metadata.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Metadata Interface\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n*/\r\n\r\ninterface IERC1155Metadata {\r\n\r\n  event URI(string _uri, uint256 indexed _id);\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) external view returns (string memory);\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/ERC1155Metadata.sol\r\n\r\n/**\r\n * @notice Contract that handles metadata related methods.\r\n * @dev Methods assume a deterministic generation of URI based on token IDs.\r\n *      Methods also assume that URI uses hex representation of token IDs.\r\n */\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ERC1155Metadata is IERC1155Metadata {\r\n\r\n  // URI's default URI prefix\r\n  string internal baseMetadataURI;\r\n  event URI(string _uri, uint256 indexed _id);\r\n\r\n\r\n  /***********************************|\r\n  |     Metadata Public Function s    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\r\n   * @dev URIs are defined in RFC 3986.\r\n   *      URIs are assumed to be deterministically generated based on token ID\r\n   *      Token IDs are assumed to be represented in their hex format in URIs\r\n   * @return URI string\r\n   */\r\n  function uri(uint256 _id) public override view returns (string memory) {\r\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \".json\"));\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Metadata Internal Functions    |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Will emit default URI log event for corresponding token _id\r\n   * @param _tokenIDs Array of IDs of tokens to log default URI\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs) internal {\r\n    string memory baseURL = baseMetadataURI;\r\n    string memory tokenURI;\r\n\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \".json\"));\r\n      emit URI(tokenURI, _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will emit a specific URI log event for corresponding token\r\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\r\n   * @param _URIs    The URIs of the specified _tokenIDs\r\n   */\r\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\r\n    require(_tokenIDs.length == _URIs.length, \"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\");\r\n    for (uint256 i = 0; i < _tokenIDs.length; i++) {\r\n      emit URI(_URIs[i], _tokenIDs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Will update the base URL of token's URI\r\n   * @param _newBaseMetadataURI New base URL of token's URI\r\n   */\r\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\r\n    baseMetadataURI = _newBaseMetadataURI;\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |    Utility Internal Functions     |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @notice Convert uint256 to string\r\n   * @param _i Unsigned integer to convert to string\r\n   */\r\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n\r\n    uint256 j = _i;\r\n    uint256 ii = _i;\r\n    uint256 len;\r\n\r\n    // Get number of bytes\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len - 1;\r\n\r\n    // Get each individual ASCII\r\n    while (ii != 0) {\r\n      bstr[k--] = byte(uint8(48 + ii % 10));\r\n      ii /= 10;\r\n    }\r\n\r\n    // Convert to string\r\n    return string(bstr);\r\n  }\r\n\r\n}\r\n// File: localhost/contracts/Libraries/tokens/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (`ERC165Checker`).\r\n *\r\n * For an implementation, see `ERC165`.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: localhost/contracts/Libraries/tokens/ERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the `IERC165` interface.\r\n *\r\n * Contracts may inherit from this and call `_registerInterface` to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC165.supportsInterface`.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        override\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See `IERC165.supportsInterface`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/IERC1155TokenReceiver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Receiver Interface\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n*/\r\n\r\n\r\nabstract contract IERC1155TokenReceiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external virtual returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external virtual returns (bytes4);\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/IERC1155.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Standard basic interface\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\n\r\n\r\n\r\nabstract contract IERC1155 is IERC165, IERC1155Metadata {\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address owner, uint256 id)\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\r\n        public\r\n        virtual\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved)\r\n        external\r\n        virtual;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        virtual\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external virtual;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external virtual;\r\n}\r\n\r\n// File: localhost/contracts/Libraries/tokens/ERC1155.sol\r\n\r\n/**\r\n * @title Standard ERC1155 token\r\n *\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n */\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1155 is ERC165, ERC1155Metadata, IERC1155 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to owner balances\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n    constructor() public {\r\n        _registerInterface(\r\n            ERC1155(0).safeTransferFrom.selector ^\r\n                ERC1155(0).safeBatchTransferFrom.selector ^\r\n                ERC1155(0).balanceOf.selector ^\r\n                ERC1155(0).balanceOfBatch.selector ^\r\n                ERC1155(0).setApprovalForAll.selector ^\r\n                ERC1155(0).isApprovedForAll.selector\r\n        );\r\n    }\r\n\r\n    /**\r\n        @dev Get the specified address' balance for token with specified ID.\r\n        @param owner The address of the token holder\r\n        @param id ID of the token\r\n        @return The owner's balance of the token type requested\r\n     */\r\n    function balanceOf(address owner, uint256 id)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC1155: balance query for the zero address\"\r\n        );\r\n        return _balances[id][owner];\r\n    }\r\n\r\n    /**\r\n        @dev Get the balance of multiple account/token pairs\r\n        @param owners The addresses of the token holders\r\n        @param ids IDs of the tokens\r\n        @return Balances for each owner and token id pair\r\n     */\r\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        require(\r\n            owners.length == ids.length,\r\n            \"ERC1155: owners and IDs must have same lengths\"\r\n        );\r\n\r\n        uint256[] memory batchBalances = new uint256[](owners.length);\r\n\r\n        for (uint256 i = 0; i < owners.length; ++i) {\r\n            require(\r\n                owners[i] != address(0),\r\n                \"ERC1155: some address in batch balance query is zero\"\r\n            );\r\n            batchBalances[i] = _balances[ids[i]][owners[i]];\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf\r\n     * @param operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        external\r\n        override\r\n    {\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /**\r\n        @notice Queries the approval status of an operator for a given owner.\r\n        @param owner     The owner of the Tokens\r\n        @param operator  Address of authorized operator\r\n        @return           True if the operator is approved, false if not\r\n    */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        override\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n        @dev Transfers `value` amount of an `id` from the `from` address to the `to` address specified.\r\n        Caller must be approved to manage the tokens being transferred out of the `from` account.\r\n        If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.\r\n        @param from Source address\r\n        @param to Target address\r\n        @param id ID of the token type\r\n        @param value Transfer amount\r\n        @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n    */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external virtual override {\r\n        require(to != address(0), \"ERC1155: target address must be non-zero\");\r\n        require(\r\n            from == msg.sender || _operatorApprovals[from][msg.sender] == true,\r\n            \"ERC1155: need operator approval for 3rd party transfers.\"\r\n        );\r\n\r\n        _safeTransferFrom(from, to, id, value, data);\r\n    }\r\n\r\n    /**\r\n        @dev Transfers `values` amount(s) of `ids` from the `from` address to the\r\n        `to` address specified. Caller must be approved to manage the tokens being\r\n        transferred out of the `from` account. If `to` is a smart contract, will\r\n        call `onERC1155BatchReceived` on `to` and act appropriately.\r\n        @param from Source address\r\n        @param to Target address\r\n        @param ids IDs of each token type\r\n        @param values Transfer amounts per token type\r\n        @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n    */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external virtual override {\r\n        require(\r\n            ids.length == values.length,\r\n            \"ERC1155: IDs and values must have same lengths\"\r\n        );\r\n        require(to != address(0), \"ERC1155: target address must be non-zero\");\r\n        require(\r\n            from == msg.sender || _operatorApprovals[from][msg.sender] == true,\r\n            \"ERC1155: need operator approval for 3rd party transfers.\"\r\n        );\r\n\r\n        _safeBatchTransferFrom(from, to, ids, values, data);\r\n    }\r\n\r\n    /**\r\n        @dev Internal function for \"safeTransferFrom\"\r\n        @param from Source address\r\n        @param to Target address\r\n        @param id ID of the token type\r\n        @param value Transfer amount\r\n        @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n    */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        _balances[id][from] = _balances[id][from].sub(value);\r\n        _balances[id][to] = value.add(_balances[id][to]);\r\n\r\n        emit TransferSingle(msg.sender, from, to, id, value);\r\n\r\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, value, data);\r\n    }\r\n\r\n    /**\r\n        @dev Internal function for \"safeBatchTransferFrom\"\r\n        @param from Source address\r\n        @param to Target address\r\n        @param ids IDs of each token type\r\n        @param values Transfer amounts per token type\r\n        @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n    */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 value = values[i];\r\n\r\n            _balances[id][from] = _balances[id][from].sub(value);\r\n            _balances[id][to] = value.add(_balances[id][to]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, from, to, ids, values);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            msg.sender,\r\n            from,\r\n            to,\r\n            ids,\r\n            values,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint an amount of a token with the given ID\r\n     * @param to The address that will own the minted token\r\n     * @param id ID of the token to be minted\r\n     * @param value Amount of the token to be minted\r\n     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        _balances[id][to] = value.add(_balances[id][to]);\r\n        emit TransferSingle(msg.sender, address(0), to, id, value);\r\n\r\n        _doSafeTransferAcceptanceCheck(\r\n            msg.sender,\r\n            address(0),\r\n            to,\r\n            id,\r\n            value,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to batch mint amounts of tokens with the given IDs\r\n     * @param to The address that will own the minted token\r\n     * @param ids IDs of the tokens to be minted\r\n     * @param values Amounts of the tokens to be minted\r\n     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n     */\r\n    function _batchMint(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        require(to != address(0), \"ERC1155: batch mint to the zero address\");\r\n        require(\r\n            ids.length == values.length,\r\n            \"ERC1155: IDs and values must have same lengths\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] = values[i].add(_balances[ids[i]][to]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, address(0), to, ids, values);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            msg.sender,\r\n            address(0),\r\n            to,\r\n            ids,\r\n            values,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn an amount of a token with the given ID\r\n     * @param owner Account which owns the token to be burnt\r\n     * @param id ID of the token to be burnt\r\n     * @param value Amount of the token to be burnt\r\n     */\r\n    function _burn(\r\n        address owner,\r\n        uint256 id,\r\n        uint256 value\r\n    ) internal {\r\n        _balances[id][owner] = _balances[id][owner].sub(value);\r\n        emit TransferSingle(msg.sender, owner, address(0), id, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to batch burn an amounts of tokens with the given IDs\r\n     * @param owner Account which owns the token to be burnt\r\n     * @param ids IDs of the tokens to be burnt\r\n     * @param values Amounts of the tokens to be burnt\r\n     */\r\n    function _batchBurn(\r\n        address owner,\r\n        uint256[] memory ids,\r\n        uint256[] memory values\r\n    ) internal {\r\n        require(\r\n            ids.length == values.length,\r\n            \"ERC1155: IDs and values must have same lengths\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][owner] = _balances[ids[i]][owner].sub(values[i]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, owner, address(0), ids, values);\r\n    }\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        if (to.isContract()) {\r\n            try IERC1155TokenReceiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\r\n                if (response != IERC1155TokenReceiver(to).onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    ) internal {\r\n        if (to.isContract()) {\r\n            try IERC1155TokenReceiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (bytes4 response) {\r\n                if (response != IERC1155TokenReceiver(to).onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Libraries/utils/Address.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Libraries/utils/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Libraries/math/SafeMath.sol\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/DF9.sol\r\n\r\n/**\r\n * @title DF9 Tickets\r\n * @author @marvin\r\n * @dev This contract is the first iteration of DF9 market\r\n */\r\n\r\npragma solidity >=0.4.25 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface Core {\r\n    function isVerifiedMarket(address market) external returns (bool);\r\n    function createMarkets() external;\r\n}\r\n\r\ncontract DF9 is ERC1155, Ownable, DateTime {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public usdt;\r\n    Core private factory;\r\n\r\n    event NewSynCardGenerated(address indexed account, uint256 level, uint256 id, uint256 timestamp);\r\n\r\n    constructor() public {}\r\n    \r\n    struct RedeemedBet {\r\n        uint256 id;\r\n        uint256 level;\r\n        string cardType;\r\n        uint256 time;\r\n    }\r\n    \r\n    struct UserInfo {\r\n        RedeemedBet[] redeemedBets;\r\n    }\r\n    \r\n    mapping(address => UserInfo) private userInfo;\r\n    \r\n    function genCardID(uint256 prefix) internal view returns (uint256) {\r\n        // id: (level + date)\r\n        uint256 year = getYear(block.timestamp);\r\n        uint256 month = getMonth(block.timestamp).mul(100);\r\n        uint256 day = getDay(block.timestamp);\r\n        uint256 date = year.mul(1e4).add(month).add(day);\r\n        return prefix.mul(1e8).add(date);\r\n    }\r\n    \r\n    function decodeCardID(uint256 id) internal pure returns (uint256) {\r\n        // eg: decode id 120201120 to level 1\r\n        return id.sub(id.mod(1e8)).div(1e8);\r\n    }\r\n    \r\n    function getUserInfo(address account) view public returns (UserInfo memory) {\r\n        return userInfo[account];\r\n    }\r\n    \r\n    function setUsdt(IERC20 _usdt) public onlyOwner {\r\n        usdt = _usdt;\r\n    }\r\n\r\n    function setFactory(Core _factory) public onlyOwner {\r\n        factory = _factory;\r\n    }\r\n\r\n    function setBaseMetadataURI(string memory baseURI) public onlyOwner {\r\n        _setBaseMetadataURI(baseURI);\r\n    }\r\n    \r\n    function baseTokenURI() internal view returns (string memory) {\r\n        return baseMetadataURI;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            baseTokenURI(),\r\n            _uint2str(_tokenId),\r\n            \".json\"\r\n        ));\r\n    }\r\n\r\n    function redeem(address account, uint256 level, uint256 id, uint256 dividend, bool mintable) external {\r\n        // msg sender should be DF9T clone contract\r\n        require(factory.isVerifiedMarket(address(msg.sender)));\r\n        if (mintable) {\r\n            /// @dev mint DF9 and transfer prize to accout\r\n            _mint(account, id, 1, \"\");\r\n            userInfo[account].redeemedBets.push(\r\n                RedeemedBet({\r\n                    id: id,\r\n                    level: level,\r\n                    cardType: \"DF9\",\r\n                    time: block.timestamp\r\n                })\r\n            );\r\n            emit NewSynCardGenerated(account, level, id, block.timestamp);\r\n        }\r\n        if (dividend > 0) {\r\n            usdt.safeTransfer(account, dividend);\r\n        }\r\n    }\r\n\r\n    function validateSynIds(uint256[] memory ids, uint256 level) internal pure returns (bool) {\r\n        bool result = true;\r\n        for (uint256 i; i < ids.length; i++) {\r\n            if (decodeCardID(ids[i]) != level) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function syn(address account, uint256[] memory ids, uint256 level) public {\r\n        require(account != address(0), \"DF9: Can't syn from the zero address\");\r\n        require(ids.length == 2, \"DF9: Only two cards needed\");\r\n        require(level < 5, \"DF9: Can't syn cards with level larger than 4\");\r\n        require(validateSynIds(ids, level), \"DF9: invalid id is included\");\r\n\r\n        for(uint index = 0; index < ids.length; index++) {\r\n            require(balanceOf(account, ids[index]) >= 1, \"DF9: INSUFFICIENT_AMOUNT\");\r\n            _burn(account, ids[index], 1);\r\n            // delete from userInfo\r\n            bool deleted = false;\r\n            for(uint j = 0; j < userInfo[account].redeemedBets.length; j++) {\r\n                if (!deleted && userInfo[account].redeemedBets[j].id == ids[index]) {\r\n                    delete userInfo[account].redeemedBets[j];\r\n                    deleted = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        uint256 newLevel = level.add(1);\r\n        uint256 newId = genCardID(newLevel);\r\n        _mint(account, newId, 1, \"\");\r\n        userInfo[account].redeemedBets.push(\r\n            RedeemedBet({\r\n                id: newId,\r\n                level: newLevel,\r\n                cardType: \"DF9\",\r\n                time: block.timestamp\r\n            })\r\n        );\r\n        emit NewSynCardGenerated(account, newLevel, newId, block.timestamp);\r\n    }\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(to != address(0), \"ERC1155: target address must be non-zero\");\r\n        require(\r\n            from == msg.sender || _operatorApprovals[from][msg.sender] == true,\r\n            \"ERC1155: need operator approval for 3rd party transfers.\"\r\n        );\r\n        require(balanceOf(from, id) >= 1, \"DF9: INSUFFICIENT_AMOUNT\");\r\n        _safeTransferFrom(from, to, id, value, data);\r\n        // update userInfo\r\n        for(uint i = 0; i < value; i++) {\r\n            for(uint j = 0; j < userInfo[from].redeemedBets.length; j++) {\r\n                if (userInfo[from].redeemedBets[j].id == id) {\r\n                    userInfo[to].redeemedBets.push(userInfo[from].redeemedBets[j]);\r\n                    delete userInfo[from].redeemedBets[j];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(\r\n            ids.length == values.length,\r\n            \"ERC1155: IDs and values must have same lengths\"\r\n        );\r\n        require(to != address(0), \"ERC1155: target address must be non-zero\");\r\n        require(\r\n            from == msg.sender || _operatorApprovals[from][msg.sender] == true,\r\n            \"ERC1155: need operator approval for 3rd party transfers.\"\r\n        );\r\n        \r\n        _safeBatchTransferFrom(from, to, ids, values, data);\r\n        // update userInfo\r\n        for(uint index = 0; index < ids.length; index++) {\r\n            // delete from userInfo\r\n            for(uint i = 0; i < values[index]; i++) {\r\n                for(uint j = 0; j < userInfo[from].redeemedBets.length; j++) {\r\n                    if (userInfo[from].redeemedBets[j].id == ids[index]) {\r\n                        userInfo[to].redeemedBets.push(userInfo[from].redeemedBets[j]);\r\n                        delete userInfo[from].redeemedBets[j];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function withdrawForDividend(uint256 amount) public onlyOwner {\r\n        usdt.safeTransfer(msg.sender, amount);\r\n    }\r\n    \r\n    function gen(address account, uint256[] memory levels) public onlyOwner {\r\n        for (uint i = 0; i < levels.length; i++) {\r\n            uint256 level = levels[i];\r\n            uint256 id = genCardID(level);\r\n            _mint(account, id, 1, \"\");\r\n            userInfo[account].redeemedBets.push(\r\n                RedeemedBet({\r\n                    id: id,\r\n                    level: level,\r\n                    cardType: \"DF9\",\r\n                    time: block.timestamp\r\n                })\r\n            );\r\n            emit NewSynCardGenerated(account, level, id, block.timestamp);\r\n        }\r\n    }\r\n    \r\n    function batchGen(address[] memory addrs, uint256 level, uint256 dividend) public onlyOwner {\r\n        uint256 id = genCardID(level);\r\n        uint256 eachDividend = dividend.div(addrs.length);\r\n        for(uint i = 0; i < addrs.length; i++) {\r\n            _mint(address(addrs[i]), id, 1, \"\");\r\n            userInfo[addrs[i]].redeemedBets.push(\r\n                RedeemedBet({\r\n                    id: id,\r\n                    level: level,\r\n                    cardType: \"DF9\",\r\n                    time: block.timestamp\r\n                })\r\n            );\r\n            emit NewSynCardGenerated(addrs[i], level, id, block.timestamp);\r\n            if (eachDividend > 0) {\r\n                usdt.safeTransfer(addrs[i], eachDividend);\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewSynCardGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"batchGen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"}],\"name\":\"gen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct DF9.RedeemedBet[]\",\"name\":\"redeemedBets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DF9.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Core\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"syn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DF9","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://38976ebc7c58cbeb6680877e148a8fea2d703afc663b94495ddf9fdee60eb86e"}]}