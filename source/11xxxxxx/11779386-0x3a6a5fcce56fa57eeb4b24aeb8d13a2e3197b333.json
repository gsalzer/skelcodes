{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\index\\util\\IEthItemOrchestrator.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IEthItemOrchestrator {\r\n    function createNative(bytes calldata modelInitPayload, string calldata ens)\r\n        external\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse);\r\n}\r\n\r\n// File: contracts\\index\\util\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC1155 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\index\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\index\\util\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20 {\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: contracts\\index\\util\\IEthItem.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\ninterface IEthItem is IERC1155 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\index\\util\\INativeV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface INativeV1 is IEthItem {\r\n\r\n    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\r\n\r\n    function extension() external view returns (address extensionAddress);\r\n\r\n    function canMint(address operator) external view returns (bool result);\r\n\r\n    function isEditable(uint256 objectId) external view returns (bool result);\r\n\r\n    function releaseExtension() external;\r\n\r\n    function uri() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 objectId, uint256 amount) external;\r\n\r\n    function makeReadOnly(uint256 objectId) external;\r\n\r\n    function setUri(string calldata newUri) external;\r\n\r\n    function setUri(uint256 objectId, string calldata newUri) external;\r\n}\r\n\r\n// File: contracts\\index\\util\\ERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract ERC1155Receiver {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n        _registerInterface(\r\n            ERC1155Receiver(0).onERC1155Received.selector ^\r\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts\\index\\util\\DFOHub.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\index\\Index.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\ncontract Index is ERC1155Receiver {\r\n\r\n    address public _doubleProxy;\r\n\r\n    mapping(address => bool) _temporaryIndex;\r\n\r\n    event NewIndex(uint256 indexed id, address indexed interoperableInterfaceAddress, address indexed token, uint256 amount);\r\n\r\n    address public collection;\r\n\r\n    mapping(uint256 => address[]) public tokens;\r\n    mapping(uint256 => uint256[]) public amounts;\r\n\r\n    constructor(address doubleProxy, address ethItemOrchestrator, string memory name, string memory symbol, string memory uri) {\r\n        _doubleProxy = doubleProxy;\r\n        (collection,) = IEthItemOrchestrator(ethItemOrchestrator).createNative(abi.encodeWithSignature(\"init(string,string,bool,string,address,bytes)\", name, symbol, true, uri, address(this), \"\"), \"\");\r\n    }\r\n\r\n    modifier onlyDFO() {\r\n        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function setDoubleProxy(address newDoubleProxy) public onlyDFO {\r\n        _doubleProxy = newDoubleProxy;\r\n    }\r\n\r\n    function setCollectionUri(string memory uri) public onlyDFO {\r\n        INativeV1(collection).setUri(uri);\r\n    }\r\n\r\n    function info(uint256 objectId, uint256 value) public view returns(address[] memory _tokens, uint256[] memory _amounts) {\r\n        uint256 amount = value == 0 ? 1e18 : value;\r\n        _tokens = tokens[objectId];\r\n        _amounts = new uint256[](_tokens.length);\r\n        for(uint256 i = 0; i < _amounts.length; i++) {\r\n            _amounts[i] = (amounts[objectId][i] * amount) / 1e18;\r\n        }\r\n    }\r\n\r\n    function mint(string memory name, string memory symbol, string memory uri, address[] memory _tokens, uint256[] memory _amounts, uint256 value, address receiver) public payable returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        require(_tokens.length > 0 && _tokens.length == _amounts.length, \"invalid length\");\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            require(!_temporaryIndex[_tokens[i]], \"already done\");\r\n            require(_amounts[i] > 0, \"amount\");\r\n            _temporaryIndex[_tokens[i]] = true;\r\n            if(value > 0) {\r\n                uint256 tokenValue = (_amounts[i] * value) / 1e18;\r\n                require(tokenValue > 0, \"Insufficient balance\");\r\n                if(_tokens[i] == address(0)) {\r\n                    require(msg.value == tokenValue, \"insufficient eth\");\r\n                } else {\r\n                    _safeTransferFrom(_tokens[i], msg.sender, address(this), tokenValue);\r\n                }\r\n            }\r\n        }\r\n        require(_temporaryIndex[address(0)] || msg.value == 0, \"eth not involved\");\r\n        INativeV1 theCollection = INativeV1(collection);\r\n        (objectId, interoperableInterfaceAddress) = theCollection.mint(value == 0 ? 1e18 : value, name, symbol, uri, true);\r\n        tokens[objectId] = _tokens;\r\n        amounts[objectId] = _amounts;\r\n        if(value == 0) {\r\n            theCollection.burn(objectId, theCollection.balanceOf(address(this), objectId));\r\n        } else {\r\n            _safeTransfer(interoperableInterfaceAddress, receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));\r\n        }\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            delete _temporaryIndex[_tokens[i]];\r\n            emit NewIndex(objectId, interoperableInterfaceAddress, _tokens[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function mint(uint256 objectId, uint256 value, address receiver) public payable {\r\n        require(value > 0, \"value\");\r\n        bool ethInvolved = false;\r\n        for(uint256 i = 0; i < tokens[objectId].length; i++) {\r\n            uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;\r\n            require(tokenValue > 0, \"Insufficient balance\");\r\n            if(tokens[objectId][i] == address(0)) {\r\n                ethInvolved = true;\r\n                 require(msg.value == tokenValue, \"insufficient eth\");\r\n            } else {\r\n                _safeTransferFrom(tokens[objectId][i], msg.sender, address(this), tokenValue);\r\n            }\r\n        }\r\n        require(ethInvolved || msg.value == 0, \"eth not involved\");\r\n        INativeV1 theCollection = INativeV1(collection);\r\n        theCollection.mint(objectId, value);\r\n        _safeTransfer(address(theCollection.asInteroperable(objectId)), receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n            require(msg.sender == collection, \"Only Index collection allowed here\");\r\n            _onSingleReceived(from, id, value, data);\r\n            return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n\r\n        require(msg.sender == collection, \"Only Index collection allowed here\");\r\n        bytes[] memory payloads = abi.decode(data, (bytes[]));\r\n        require(payloads.length == ids.length, \"Wrong payloads length\");\r\n        for(uint256 i = 0; i < ids.length; i++) {\r\n            _onSingleReceived(from, ids[i], values[i], payloads[i]);\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function _onSingleReceived(\r\n        address from,\r\n        uint256 objectId,\r\n        uint256 value,\r\n        bytes memory data) private {\r\n            address receiver = data.length == 0 ? from : abi.decode(data, (address));\r\n            receiver = receiver == address(0) ? from : receiver;\r\n            INativeV1 theCollection = INativeV1(collection);\r\n            theCollection.burn(objectId, value);\r\n            for(uint256 i = 0; i < tokens[objectId].length; i++) {\r\n                uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;\r\n                if(tokens[objectId][i] == address(0)) {\r\n                    payable(receiver).transfer(tokenValue);\r\n                } else {\r\n                    _safeTransfer(tokens[objectId][i], receiver, tokenValue);\r\n                }\r\n            }\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethItemOrchestrator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"interoperableInterfaceAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewIndex\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interoperableInterfaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setCollectionUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Index","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f869538e3904778a0cb1ff620c8e83c7df36b94600000000000000000000000086ab19d36c38aa81f092eab4b1a8a4b55361246500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000011436f76656e616e747320496e64657865730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005494e444558000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a697066733a2f2f697066732f516d534245794569646f535a4e6368443962763839694a6f714c5a5167475538485a6532694a396e5475736d3852000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://63c82a5053ff668ff08dda818b00d1446280dfc99b76fecaeab71c64547a6724"}]}