{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\ncontract ReserveLike {\r\n    function depositToken(address, string memory, bytes memory, uint) public;\r\n}\r\n\r\ncontract WrappedDaiLike {\r\n    function setProxy(address) public;\r\n    function setReserve(address) public;\r\n\r\n    uint public totalSupply;\r\n    function approve(address, uint) public returns (bool);\r\n\r\n    function mint(address, uint) public;\r\n    function burn(address, uint) public;\r\n}\r\n\r\ncontract DaiLike {\r\n    function approve(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\ncontract JoinLike {\r\n    VatLike public vat;\r\n    DaiLike public dai;\r\n\r\n    function join(address, uint) public;\r\n    function exit(address, uint) public;\r\n}\r\n\r\ncontract PotLike {\r\n    mapping(address => uint) public pie;\r\n    uint public chi;\r\n\r\n    VatLike public vat;\r\n    uint public rho;\r\n\r\n    function drip() public returns (uint);\r\n\r\n    function join(uint) public;\r\n    function exit(uint) public;\r\n}\r\n\r\ncontract VatLike {\r\n    mapping(address => uint) public dai;\r\n\r\n    function hope(address) public;\r\n    function move(address, address, uint) public;\r\n}\r\n\r\ncontract DaiProxy {\r\n    string public constant version = \"0511\";\r\n\r\n    // --- Owner ---\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event SetOwner(address owner);\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n        emit SetOwner(_owner);\r\n    }\r\n\r\n    // --- State ---\r\n    enum State { Ready, Running, Killed }\r\n\r\n    State public state = State.Ready;\r\n\r\n    modifier notStarted {\r\n        require(state == State.Ready);\r\n        _;\r\n    }\r\n\r\n    modifier notPaused {\r\n        require(state == State.Running);\r\n        _;\r\n    }\r\n\r\n    // --- Math ---\r\n    uint constant ONE = 10 ** 27;\r\n\r\n    function add(uint a, uint b) private pure returns (uint) {\r\n        require(a <= uint(-1) - b);\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint a, uint b) private pure returns (uint) {\r\n        require(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) private pure returns (uint) {\r\n        require(b == 0 || a <= uint(-1) / b);\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint a, uint b) private pure returns (uint) {\r\n        require(b != 0);\r\n        return a / b;\r\n    }\r\n\r\n    function ceil(uint a, uint b) private pure returns (uint) {\r\n        require(b != 0);\r\n\r\n        uint r = a / b;\r\n        return a > r * b ? r + 1 : r;\r\n    }\r\n\r\n    function muldiv(uint a, uint b, uint c) private pure returns (uint) {\r\n        uint safe = 1 << (256 - 32);  // 2.696e67\r\n        uint mask = (1 << 32) - 1;\r\n\r\n        require(c != 0 && c < safe);\r\n\r\n        if (b == 0) return 0;\r\n        if (a < b) (a, b) = (b, a);\r\n        \r\n        uint p = a / c;\r\n        uint r = a % c;\r\n\r\n        uint res = 0;\r\n\r\n        while (true) {  // most 8 times\r\n            uint v = b & mask;\r\n            res = add(res, add(mul(p, v), r * v / c));\r\n\r\n            b >>= 32;\r\n            if (b == 0) break;\r\n\r\n            require(p < safe);\r\n\r\n            p <<= 32;\r\n            r <<= 32;\r\n\r\n            p = add(p, r / c);\r\n            r %= c;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    // --- Contracts & Constructor ---\r\n    DaiLike public Dai;\r\n    JoinLike public Join;\r\n    PotLike public Pot;\r\n    VatLike public Vat;\r\n\r\n    ReserveLike public Reserve;\r\n\r\n    WrappedDaiLike public EDai;\r\n    WrappedDaiLike public ODai;\r\n\r\n    event SetReserve(address reserve);\r\n\r\n    constructor(address dai, address join, address pot, address vat, address eDai, address oDai) public {\r\n        owner = msg.sender;\r\n\r\n        Dai = DaiLike(dai);\r\n        Join = JoinLike(join);\r\n        Pot = PotLike(pot);\r\n        Vat = VatLike(vat);\r\n\r\n        EDai = WrappedDaiLike(eDai);\r\n        ODai = WrappedDaiLike(oDai);\r\n\r\n        require(address(Join.dai()) == dai);\r\n        require(address(Join.vat()) == vat);\r\n        require(address(Pot.vat()) == vat);\r\n\r\n        Vat.hope(pot);  // Pot.join\r\n        Vat.hope(join);  // Join.exit\r\n\r\n        require(Dai.approve(join, uint(-1)));  // Join.join -> dai.burn\r\n    }\r\n\r\n    function setReserve(address reserve) public onlyOwner {\r\n        require(EDai.approve(address(Reserve), 0));\r\n        require(ODai.approve(address(Reserve), 0));\r\n\r\n        Reserve = ReserveLike(reserve);\r\n\r\n        EDai.setReserve(reserve);\r\n        ODai.setReserve(reserve);\r\n\r\n        // approve for Reserve.depositToken\r\n        require(EDai.approve(reserve, uint(-1)));\r\n        require(ODai.approve(reserve, uint(-1)));\r\n\r\n        emit SetReserve(reserve);\r\n    }\r\n\r\n    modifier onlyEDai {\r\n        require(msg.sender == address(EDai));\r\n        _;\r\n    }\r\n\r\n    modifier onlyODai {\r\n        require(msg.sender == address(ODai));\r\n        _;\r\n    }\r\n\r\n    // --- Integration ---\r\n    function chi() private returns (uint) {\r\n        return now > Pot.rho() ? Pot.drip() : Pot.chi();\r\n    }\r\n\r\n    function joinDai(uint dai) private {\r\n        require(Dai.transferFrom(msg.sender, address(this), dai));\r\n        Join.join(address(this), dai);\r\n\r\n        uint vat = Vat.dai(address(this));\r\n        Pot.join(div(vat, chi()));\r\n    }\r\n\r\n    function exitDai(address to, uint dai) private {\r\n        uint vat = Vat.dai(address(this));\r\n        uint req = mul(dai, ONE);\r\n\r\n        if (req > vat) {\r\n            uint pot = ceil(req - vat, chi());\r\n            Pot.exit(pot);\r\n        }\r\n\r\n        Join.exit(to, dai);\r\n    }\r\n\r\n    function mintODai(address to, uint dai) private returns (uint) {\r\n        uint wad = dai;\r\n\r\n        if (ODai.totalSupply() != 0) {\r\n            uint pie = Pot.pie(address(this));\r\n            uint vat = Vat.dai(address(this));\r\n\r\n            // 기존 rad\r\n            uint rad = sub(add(mul(pie, chi()), vat), mul(EDai.totalSupply(), ONE));\r\n\r\n            // rad : supply = dai * ONE : wad\r\n            wad = muldiv(ODai.totalSupply(), mul(dai, ONE), rad);\r\n        }\r\n\r\n        joinDai(dai);\r\n        ODai.mint(to, wad);\r\n        return wad;\r\n    }\r\n\r\n    function depositEDai(string memory toChain, uint dai, bytes memory to) public notPaused {\r\n        require(dai > 0);\r\n\r\n        joinDai(dai);\r\n\r\n        EDai.mint(address(this), dai);\r\n        Reserve.depositToken(address(EDai), toChain, to, dai);\r\n    }\r\n\r\n    function depositODai(string memory toChain, uint dai, bytes memory to) public notPaused {\r\n        require(dai > 0);\r\n\r\n        uint wad = mintODai(address(this), dai);\r\n        Reserve.depositToken(address(ODai), toChain, to, wad);\r\n    }\r\n\r\n    function swapFromEDai(address from, address to, uint dai) private {\r\n        EDai.burn(from, dai);\r\n        exitDai(to, dai);\r\n    }\r\n\r\n    function swapFromODai(address from, address to, uint wad) private {\r\n        uint pie = Pot.pie(address(this));\r\n        uint vat = Vat.dai(address(this));\r\n\r\n        // 기존 rad\r\n        uint rad = sub(add(mul(pie, chi()), vat), mul(EDai.totalSupply(), ONE));\r\n\r\n        // rad : supply = dai * ONE : wad\r\n        uint dai = muldiv(rad, wad, mul(ODai.totalSupply(), ONE));\r\n\r\n        ODai.burn(from, wad);\r\n        exitDai(to, dai);\r\n    }\r\n\r\n    function withdrawEDai(address to, uint dai) public onlyEDai notPaused {\r\n        require(dai > 0);\r\n\r\n        swapFromEDai(address(Reserve), to, dai);\r\n    }\r\n\r\n    function withdrawODai(address to, uint wad) public onlyODai notPaused {\r\n        require(wad > 0);\r\n\r\n        swapFromODai(address(Reserve), to, wad);\r\n    }\r\n\r\n    function swapToEDai(uint dai) public notPaused {\r\n        require(dai > 0);\r\n\r\n        joinDai(dai);\r\n        EDai.mint(msg.sender, dai);\r\n    }\r\n\r\n    function swapToODai(uint dai) public notPaused {\r\n        require(dai > 0);\r\n\r\n        mintODai(msg.sender, dai);\r\n    }\r\n\r\n    function swapFromEDai(uint dai) public notPaused {\r\n        require(dai > 0);\r\n\r\n        swapFromEDai(msg.sender, msg.sender, dai);\r\n    }\r\n\r\n    function swapFromODai(uint wad) public notPaused {\r\n        require(wad > 0);\r\n\r\n        swapFromODai(msg.sender, msg.sender, wad);\r\n    }\r\n\r\n    // --- Migration ---\r\n    DaiProxy public NewProxy;\r\n\r\n    event SetNewProxy(address proxy);\r\n    event StartProxy(address prev);\r\n    event KillProxy(address next, bool mig);\r\n\r\n    modifier onlyNewProxy {\r\n        require(msg.sender == address(NewProxy));\r\n        _;\r\n    }\r\n\r\n\r\n    function setNewProxy(address proxy) public onlyOwner {\r\n        NewProxy = DaiProxy(proxy);\r\n        emit SetNewProxy(proxy);\r\n    }\r\n\r\n\r\n    function killProxy(address to) public notPaused onlyOwner {\r\n        state = State.Killed;\r\n\r\n        chi();\r\n\r\n        Pot.exit(Pot.pie(address(this)));\r\n        Join.exit(to, Vat.dai(address(this)) / ONE);\r\n\r\n        emit KillProxy(to, false);\r\n    }\r\n\r\n\r\n    function migrateProxy() public notPaused onlyNewProxy {\r\n        state = State.Killed;\r\n\r\n        EDai.setProxy(address(NewProxy));\r\n        ODai.setProxy(address(NewProxy));\r\n\r\n        chi();\r\n\r\n        Pot.exit(Pot.pie(address(this)));\r\n        Vat.move(address(this), address(NewProxy), Vat.dai(address(this)));\r\n\r\n        emit KillProxy(address(NewProxy), true);\r\n    }\r\n\r\n\r\n    function startProxy(address oldProxy) public notStarted onlyOwner {\r\n        state = State.Running;\r\n\r\n        if (oldProxy != address(0)) {\r\n            DaiProxy(oldProxy).migrateProxy();\r\n\r\n            uint vat = Vat.dai(address(this));\r\n            Pot.join(div(vat, chi()));\r\n        }\r\n\r\n        emit StartProxy(oldProxy);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"join\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eDai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oDai\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mig\",\"type\":\"bool\"}],\"name\":\"KillProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"SetNewProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"SetReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"}],\"name\":\"StartProxy\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"Dai\",\"outputs\":[{\"internalType\":\"contract DaiLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EDai\",\"outputs\":[{\"internalType\":\"contract WrappedDaiLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Join\",\"outputs\":[{\"internalType\":\"contract JoinLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NewProxy\",\"outputs\":[{\"internalType\":\"contract DaiProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ODai\",\"outputs\":[{\"internalType\":\"contract WrappedDaiLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Pot\",\"outputs\":[{\"internalType\":\"contract PotLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Reserve\",\"outputs\":[{\"internalType\":\"contract ReserveLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"}],\"name\":\"depositEDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"toChain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"}],\"name\":\"depositODai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"killProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrateProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setNewProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldProxy\",\"type\":\"address\"}],\"name\":\"startProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum DaiProxy.State\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"swapFromEDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"swapFromODai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"swapToEDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"swapToODai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dai\",\"type\":\"uint256\"}],\"name\":\"withdrawEDai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdrawODai\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf700000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000c355fe6e4e99c0b93577f08c4e9a599714435912000000000000000000000000e28103f9163e675b9de46952e4fe527853ab5464","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://6a2fa354fe3611275d2026ed96e1bae0875a1b18ad407cadcf91eeb849c04ae5"}]}