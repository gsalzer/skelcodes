{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @dev Contract for locking up tokens for set periods of time \\n * + optionally providing locked tokens with voting power\\n */\\ncontract Vault {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice lockManager contract\\n    ILockManager public lockManager;\\n\\n    /// @notice Lock definition\\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    /// @notice Lock balance definition\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    ///@notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    /// @dev Used to translate lock periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of lock id > token locks\\n    mapping (uint256 => Lock) public tokenLocks;\\n\\n    /// @notice Mapping of address to lock id\\n    mapping (address => uint256[]) public lockIds;\\n\\n    ///@notice Number of locks\\n    uint256 public numLocks;\\n\\n    /// @notice Event emitted when a new lock is created\\n    event LockCreated(address indexed token, address indexed locker, address indexed receiver, uint256 lockId, uint256 amount, uint48 startTime, uint16 durationInDays, uint16 cliffInDays, uint256 votingPower);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an unlocked balance\\n    event UnlockedTokensClaimed(address indexed receiver, address indexed token, uint256 indexed lockId, uint256 amountClaimed, uint256 votingPowerRemoved);\\n\\n    /// @notice Event emitted when lock duration extended\\n    event LockExtended(uint256 indexed lockId, uint16 indexed oldDuration, uint16 indexed newDuration, uint16 oldCliff, uint16 newCliff, uint48 startTime);\\n\\n    /**\\n     * @notice Create a new Vault contract\\n     */\\n    constructor(address _lockManager) {\\n        lockManager = ILockManager(_lockManager);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, optionally providing voting power\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    )\\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokens: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokens: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokens: vesting duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokens: amount not > 0\\\");\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token to lock\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The lock period in days\\n     * @param cliffDurationInDays The lock cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function lockTokensWithPermit(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokensWithPermit: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokensWithPermit: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokensWithPermit: duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokensWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IERC20(token).permit(locker, address(this), amount, deadline, v, r, s);\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids\\n     * @return the lock ids\\n     */\\n    function allActiveLockIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks\\n     * @return the locks\\n     */\\n    function allActiveLocks() external view returns(Lock[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lock;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances\\n     * @return the active lock balances\\n     */\\n    function allActiveLockBalances() external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock ids\\n     */\\n    function activeLockIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = receiverLockIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function allLocks(address receiver) external view returns(Lock[] memory){\\n        uint256[] memory allLockIds = lockIds[receiver];\\n        Lock[] memory result = new Lock[](allLockIds.length);\\n        for (uint256 i; i < allLockIds.length; i++) {\\n            result[i] = tokenLocks[allLockIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function activeLocks(address receiver) external view returns(Lock[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = tokenLocks[receiverLockIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock balances\\n     */\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(receiverLockIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory tokenLock = tokenLocks[i];\\n            if(tokenLock.token == token && tokenLock.amount != tokenLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount.add(tokenLock.amount);\\n                balance.votingPower = balance.votingPower.add(tokenLock.votingPower);\\n                if(block.timestamp > tokenLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount.add(tokenLock.amountClaimed);\\n\\n                    uint256 elapsedTime = block.timestamp.sub(tokenLock.startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (\\n                        elapsedDays >= tokenLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= tokenLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount.add(tokenLock.amount).sub(tokenLock.amountClaimed);\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(tokenLock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n                            uint256 vestingAmountPerSec = tokenLock.amount.div(vestingDurationInSecs);\\n                            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n                            balance.claimableAmount = balance.claimableAmount.add(amountVested.sub(tokenLock.amountClaimed));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has unlocked balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory receiverLock = tokenLocks[receiverLockIds[i]];\\n            if(receiverLock.token == token && receiverLock.amount != receiverLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount.add(receiverLock.amount);\\n                balance.votingPower = balance.votingPower.add(receiverLock.votingPower);\\n                if(block.timestamp > receiverLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount.add(receiverLock.amountClaimed);\\n\\n                    uint256 elapsedTime = block.timestamp.sub(receiverLock.startTime);\\n                    uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n\\n                    if (\\n                        elapsedDays >= receiverLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= receiverLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount.add(receiverLock.amount).sub(receiverLock.amountClaimed);\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(receiverLock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n                            uint256 vestingAmountPerSec = receiverLock.amount.div(vestingDurationInSecs);\\n                            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n                            balance.claimableAmount = balance.claimableAmount.add(amountVested.sub(receiverLock.amountClaimed));\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get lock balance for a given lock id\\n     * @param lockId The lock ID\\n     * @return balance the lock balance\\n     */\\n    function lockBalance(uint256 lockId) public view returns (LockBalance memory balance) {\\n        balance.id = lockId;\\n        balance.claimableAmount = claimableBalance(lockId);\\n        balance.lock = tokenLocks[lockId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given lock id\\n     * @dev Returns 0 if cliff duration has not ended\\n     * @param lockId The lock ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 lockId) public view returns (uint256) {\\n        Lock storage lock = tokenLocks[lockId];\\n\\n        // For locks created with a future start date, that hasn't been reached, return 0\\n        if (block.timestamp < lock.startTime) {\\n            return 0;\\n        }\\n\\n        uint256 elapsedTime = block.timestamp.sub(lock.startTime);\\n        uint256 elapsedDays = elapsedTime.div(SECONDS_PER_DAY);\\n        \\n        if (elapsedDays < lock.cliffDurationInDays) {\\n            return 0;\\n        } \\n        \\n        if (elapsedDays >= lock.vestingDurationInDays) {\\n            return lock.amount.sub(lock.amountClaimed);\\n        } else {\\n            uint256 vestingDurationInSecs = uint256(lock.vestingDurationInDays).mul(SECONDS_PER_DAY);\\n            uint256 vestingAmountPerSec = lock.amount.div(vestingDurationInSecs);\\n            uint256 amountVested = vestingAmountPerSec.mul(elapsedTime);\\n            return amountVested.sub(lock.amountClaimed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their unlocked tokens for a set of locks\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     */\\n    function claimAllUnlockedTokens(uint256[] memory locks) external {\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount > 0, \\\"Vault::claimAllUnlockedTokens: claimableAmount is 0\\\");\\n            _claimTokens(locks[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their unlocked tokens for a given lock\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     * @param amounts The amount of each unlocked token to claim\\n     */\\n    function claimUnlockedTokenAmounts(uint256[] memory locks, uint256[] memory amounts) external {\\n        require(locks.length == amounts.length, \\\"Vault::claimUnlockedTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount >= amounts[i], \\\"Vault::claimUnlockedTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(locks[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver extend lock periods for a given lock\\n     * @param lockId The lock id for a locked token balance\\n     * @param vestingDaysToAdd The number of days to add to vesting duration\\n     * @param cliffDaysToAdd The number of days to add to cliff duration\\n     */\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external {\\n        Lock storage lock = tokenLocks[lockId];\\n        require(msg.sender == lock.receiver, \\\"Vault::extendLock: msg.sender must be receiver\\\");\\n        uint16 oldVestingDuration = lock.vestingDurationInDays;\\n        uint16 newVestingDuration = _add16(oldVestingDuration, vestingDaysToAdd, \\\"Vault::extendLock: vesting max days exceeded\\\");\\n        uint16 oldCliffDuration = lock.cliffDurationInDays;\\n        uint16 newCliffDuration = _add16(oldCliffDuration, cliffDaysToAdd, \\\"Vault::extendLock: cliff max days exceeded\\\");\\n        require(newCliffDuration <= 10*365, \\\"Vault::extendLock: cliff more than 10 years\\\");\\n        require(newVestingDuration <= 25*365, \\\"Vault::extendLock: vesting duration more than 25 years\\\");\\n        require(newVestingDuration >= newCliffDuration, \\\"Vault::extendLock: duration < cliff\\\");\\n        lock.vestingDurationInDays = newVestingDuration;\\n        emit LockExtended(lockId, oldVestingDuration, newVestingDuration, oldCliffDuration, newCliffDuration, lock.startTime);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of lockTokens\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function _lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the vault contract\\n        IERC20(token).safeTransferFrom(locker, address(this), amount);\\n\\n        uint48 lockStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n        uint256 votingPowerGranted;\\n        \\n        // Grant voting power, if specified\\n        if(grantVotingPower) {\\n            votingPowerGranted = lockManager.grantVotingPower(receiver, token, amount);\\n        }\\n\\n        // Create lock\\n        Lock memory lock = Lock({\\n            token: token,\\n            receiver: receiver,\\n            startTime: lockStartTime,\\n            vestingDurationInDays: vestingDurationInDays,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0,\\n            votingPower: votingPowerGranted\\n        });\\n\\n        tokenLocks[numLocks] = lock;\\n        lockIds[receiver].push(numLocks);\\n        emit LockCreated(token, locker, receiver, numLocks, amount, lockStartTime, vestingDurationInDays, cliffDurationInDays, votingPowerGranted);\\n        \\n        // Increment lock id\\n        numLocks++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param lockId The lock id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 lockId, uint256 claimAmount) internal {\\n        Lock storage lock = tokenLocks[lockId];\\n        uint256 votingPowerRemoved;\\n\\n        // Remove voting power, if exists\\n        if (lock.votingPower > 0) {\\n            votingPowerRemoved = lockManager.removeVotingPower(lock.receiver, lock.token, claimAmount);\\n            lock.votingPower = lock.votingPower.sub(votingPowerRemoved);\\n        }\\n\\n        // Update claimed amount\\n        lock.amountClaimed = lock.amountClaimed.add(claimAmount);\\n\\n        // Release tokens\\n        IERC20(lock.token).safeTransfer(lock.receiver, claimAmount);\\n        emit UnlockedTokensClaimed(lock.receiver, lock.token, lockId, claimAmount, votingPowerRemoved);\\n    }\\n\\n    /**\\n     * @notice Adds uint16 to uint16 safely\\n     * @param a First number\\n     * @param b Second number\\n     * @param errorMessage Error message to use if numbers cannot be added\\n     * @return uint16 number\\n     */\\n    function _add16(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\n        uint16 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILockManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockManager {\\n    struct LockedStake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n    function calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n    function grantVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerGranted);\\n    function removeVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerRemoved);\\n}\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"durationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldDuration\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPowerRemoved\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"}],\"name\":\"claimAllUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimUnlockedTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDaysToAdd\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDaysToAdd\",\"type\":\"uint16\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Vault","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000b05834034b21531f1689456b1d79fb0569e23474","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}