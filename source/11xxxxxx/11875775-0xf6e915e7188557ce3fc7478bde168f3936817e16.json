{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SwapTokenLockerFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport './SwapTokenLocker.sol';\\n\\ncontract SwapTokenLockerFactory {\\n    event SwapTokenLockerCreated(address admin, address locker);\\n    mapping(address => address[]) private deployedContracts;\\n    address[] private allLockers;\\n\\n    function getLastDeployed(address owner) external view returns(address locker) {\\n        uint256 length = deployedContracts[owner].length;\\n        return deployedContracts[owner][length - 1];\\n    }\\n\\n    function getAllContracts() external view returns (address[] memory) {\\n        return allLockers;\\n    }\\n\\n    function getDeployed(address owner) external view returns(address[] memory) {\\n        return deployedContracts[owner];\\n    }\\n\\n    function createTokenLocker(address token) external returns (address locker) {\\n        SwapTokenLocker lockerContract = new SwapTokenLocker(msg.sender, token);\\n        locker = address(lockerContract);\\n        deployedContracts[msg.sender].push(locker);\\n        allLockers.push(locker);\\n        emit SwapTokenLockerCreated(msg.sender, locker);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/SwapTokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./SwapAdmin.sol\\\";\\n\\ncontract SwapTokenLocker is SwapAdmin {\\n    using SafeMath for uint;\\n\\n    struct LockInfo {\\n        uint256 amount;\\n        uint256 lockTimestamp; // lock time at block.timestamp\\n        uint256 lockHours;\\n        uint256 claimedAmount;\\n        uint256 lastUpdated;\\n    }\\n    address immutable token;\\n    mapping (address => LockInfo) public lockData;\\n    \\n    constructor(address _admin, address _token) public SwapAdmin(_admin) {\\n        token = _token;\\n    }\\n    function getToken() external view returns(address) {\\n        return token;\\n    }\\n    \\n\\tfunction getLockData(address _user) external view returns(uint256, uint256, uint256, uint256, uint256) {\\n        require(_user != address(0), \\\"User address is invalid\\\");\\n\\n        LockInfo storage _lockInfo = lockData[_user];\\n\\t\\treturn (_lockInfo.amount, _lockInfo.lockTimestamp, _lockInfo.lockHours, _lockInfo.claimedAmount, _lockInfo.lastUpdated);\\n\\t}\\n\\n    function sendLockTokenMany(\\n        address[] calldata _users, \\n        uint256[] calldata _amounts, \\n        uint256[] calldata _lockTimestamps, \\n        uint256[] calldata _lockHours,\\n        uint256 _sendAmount\\n    ) external onlyAdmin {\\n        require(_users.length == _amounts.length, \\\"array length not eq\\\");\\n        require(_users.length == _lockHours.length, \\\"array length not eq\\\");\\n        require(_users.length == _lockTimestamps.length, \\\"array length not eq\\\");\\n        require(_sendAmount >0 , \\\"Amount is invalid\\\");\\n\\n        IERC20(token).transferFrom(msg.sender, address(this), _sendAmount);\\n        \\n        for (uint256 j = 0; j < _users.length; j++) {\\n            sendLockToken(_users[j], _amounts[j], _lockTimestamps[j], _lockHours[j]);\\n        }\\n    }\\n\\n    function sendLockToken(\\n        address _user, \\n        uint256 _amount, \\n        uint256 _lockTimestamp, \\n        uint256 _lockHours\\n    ) internal {\\n        require(_amount > 0, \\\"amount can not zero\\\");\\n        require(_lockHours > 0, \\\"lock hours need more than zero\\\");\\n        require(_lockTimestamp > 0, \\\"lock timestamp need more than zero\\\");\\n        require(lockData[_user].amount == 0, \\\"this address has already locked\\\");\\n        \\n        LockInfo memory lockinfo = LockInfo({\\n            amount: _amount,\\n            lockTimestamp: _lockTimestamp,\\n            lockHours: _lockHours,\\n            lastUpdated: block.timestamp,\\n            claimedAmount: 0\\n        });\\n\\n        lockData[_user] = lockinfo;\\n    }\\n    \\n    function claimToken(uint256 _amount) external returns (uint256) {\\n        require(_amount > 0, \\\"Invalid parameter amount\\\");\\n        address _user = msg.sender;\\n\\n        LockInfo storage _lockInfo = lockData[_user];\\n\\n        require(_lockInfo.lockTimestamp <= block.timestamp, \\\"Vesting time is not started\\\");\\n        require(_lockInfo.amount > 0, \\\"No lock token to claim\\\");\\n\\n        uint256 passhours = block.timestamp.sub(_lockInfo.lockTimestamp).div(1 hours);\\n        require(passhours > 0, \\\"need wait for one hour at least\\\");\\n        require((block.timestamp - _lockInfo.lastUpdated) > 1 hours, \\\"You have to wait at least an hour to claim\\\");\\n\\n        uint256 available = 0;\\n        if (passhours >= _lockInfo.lockHours) {\\n            available = _lockInfo.amount;\\n        } else {\\n            available = _lockInfo.amount.div(_lockInfo.lockHours).mul(passhours);\\n        }\\n        available = available.sub(_lockInfo.claimedAmount);\\n        require(available > 0, \\\"not available claim\\\");\\n        uint256 claim = _amount;\\n        if (_amount > available) { // claim as much as possible\\n            claim = available;\\n        }\\n\\n        _lockInfo.claimedAmount = _lockInfo.claimedAmount.add(claim);\\n\\n        IERC20(token).transfer(_user, claim);\\n        _lockInfo.lastUpdated = block.timestamp;\\n\\n        return claim;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SwapAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ncontract SwapAdmin {\\n    address public admin;\\n    address public candidate;\\n\\n    constructor(address _admin) public {\\n        require(_admin != address(0), \\\"admin address cannot be 0\\\");\\n        admin = _admin;\\n        emit AdminChanged(address(0), _admin);\\n    }\\n\\n    function setCandidate(address _candidate) external onlyAdmin {\\n        address old = candidate;\\n        candidate = _candidate;\\n        emit candidateChanged( old, candidate);\\n    }\\n\\n    function becomeAdmin( ) external {\\n        require( msg.sender == candidate, \\\"Only candidate can become admin\\\");\\n        address old = admin;\\n        admin = candidate;\\n        emit AdminChanged( old, admin ); \\n    }\\n\\n    modifier onlyAdmin {\\n        require( (msg.sender == admin), \\\"Only the contract admin can perform this action\\\");\\n        _;\\n    }\\n\\n    event candidateChanged(address oldCandidate, address newCandidate );\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"SwapTokenLockerCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDeployed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getLastDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapTokenLockerFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}