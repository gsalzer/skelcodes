{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IWETH.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.2.0\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/v612/FANNY/FannyRouter.sol\r\n\r\ninterface ITransferHandler01{\r\n    function feePercentX100() external view returns (uint8);\r\n}\r\n\r\ncontract FannyRouter is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 immutable public FANNY;\r\n    IERC20 constant public CORE  = IERC20(0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7);\r\n    IUniswapV2Pair public pairFANNYxCORE;  // we dont know token0 and token 1\r\n    IUniswapV2Pair public pairWETHxCORE =  IUniswapV2Pair(0x32Ce7e48debdccbFE0CD037Cc89526E4382cb81b); // CORE is token 0, WETH token 1\r\n    IWETH constant public WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    ITransferHandler01 constant public transferHandler = ITransferHandler01(0x2e2A33CECA9aeF101d679ed058368ac994118E7a);\r\n\r\n\r\n    constructor(address _fanny) public {\r\n        FANNY = IERC20(_fanny);\r\n    }\r\n\r\n    function listFanny() public onlyOwner {\r\n        require(address(pairFANNYxCORE) == address(0), \"Fanny is already listed\");\r\n        uint256 balanceOfFanny = FANNY.balanceOf(address(this));\r\n        uint256 balanceOfCORE = CORE.balanceOf(address(this));\r\n\r\n        require(balanceOfCORE > 0, \"Mo core\");\r\n        require(balanceOfFanny > 150 ether, \"Mo fanny\");\r\n\r\n        address pair = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f).getPair(address(FANNY), address(CORE));\r\n        if(pair == address(0)) { // We make the pair\r\n            pair = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f).createPair(\r\n                address(FANNY),\r\n                address(CORE)\r\n            );\r\n        }\r\n        require(pair != address(0), \"Sanity failure\");\r\n\r\n        FANNY.transfer(pair, balanceOfFanny);\r\n        CORE.transfer(pair, balanceOfCORE);\r\n        require(CORE.balanceOf(pair) >= balanceOfCORE, \"FoT off failure on list\");\r\n        pairFANNYxCORE = IUniswapV2Pair(pair);\r\n        pairFANNYxCORE.mint(msg.sender);\r\n        require(IERC20(address(pairFANNYxCORE)).balanceOf(msg.sender) > 0 , \"Did not get any LP tokens\");\r\n    }\r\n\r\n\r\n    function ETHneededToBuyFanny(uint256 amountFanny) public view returns (uint256) {\r\n        // We get the amount CORE thats neededed to buy fanny\r\n        address token0 = pairFANNYxCORE.token0();\r\n        (uint256 reserves0, uint256 reserves1,) = pairFANNYxCORE.getReserves();\r\n        uint256 coreNeededPreTax;\r\n        if(token0 ==  address(FANNY)) {\r\n            coreNeededPreTax = getAmountIn(amountFanny, reserves1 , reserves0);\r\n        } else {\r\n            coreNeededPreTax = getAmountIn(amountFanny, reserves0 , reserves1); \r\n        }\r\n        uint256 coreNeededAfterTax = getCOREPreTaxForAmountPostTax(coreNeededPreTax);\r\n        (uint256 reserveCORE, uint256 reserveWETH,) = pairWETHxCORE.getReserves();\r\n        return getAmountIn(coreNeededAfterTax, reserveWETH , reserveCORE).mul(101).div(100); // add 1% slippage\r\n    }\r\n\r\n    function CORENeededToBuyFanny(uint256 amountFanny) public view returns (uint256) {\r\n        // We get the amount CORE thats neededed to buy fanny\r\n        address token0 = pairFANNYxCORE.token0();\r\n        (uint256 reserves0, uint256 reserves1,) = pairFANNYxCORE.getReserves();\r\n        uint256 coreNeededPreTax;\r\n        if(token0 ==  address(FANNY)) {\r\n            coreNeededPreTax = getAmountIn(amountFanny, reserves1 , reserves0);\r\n        } else {\r\n            coreNeededPreTax = getAmountIn(amountFanny, reserves0 , reserves1); \r\n        }\r\n        return getCOREPreTaxForAmountPostTax(coreNeededPreTax).mul(101).div(100);// add 1% slippage because math isnt perfect\r\n                                                                                // And we rather people buy 1 whole unit with dust\r\n    }\r\n\r\n    function getCOREPreTaxForAmountPostTax(uint256 _postTaxAmount) public view returns (uint256 coreNeededAfterTax) {\r\n        uint256 tax = uint256(transferHandler.feePercentX100());\r\n        uint256 divisor = uint256(1e8).sub((tax * 1e8).div(1000));\r\n        coreNeededAfterTax = _postTaxAmount.mul(1e8).div(divisor);\r\n    }\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator);\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n        if(msg.sender != address(WETH)) revert();\r\n    }\r\n\r\n    function buyFannyForETH(uint256 minFannyOut) public payable {\r\n        WETH.deposit{value : msg.value}();\r\n        _buyFannyForWETH(msg.value, minFannyOut);\r\n    }\r\n\r\n    function buyFannyForWETH(uint256 amount,uint256 minFannyOut) public {\r\n        safeTransferFrom(address(WETH), msg.sender, address(this), amount);\r\n        _buyFannyForWETH(amount, minFannyOut);\r\n    }\r\n\r\n    function _buyFannyForWETH(uint256 amount,uint256 minFannyOut) internal {\r\n        (uint256 reserveCORE, uint256 reserveWETH,) = pairWETHxCORE.getReserves();\r\n        uint256 coreOut = getAmountOut(amount, reserveWETH, reserveCORE);\r\n        WETH.transfer(address(pairWETHxCORE), amount);\r\n        pairWETHxCORE.swap(coreOut, 0 , address(this),\"\");\r\n        uint256 coreBalanceOfPair = CORE.balanceOf(address(pairFANNYxCORE));\r\n        CORE.transfer(address(pairFANNYxCORE), coreOut);\r\n        _buyFannyForCORE(minFannyOut,coreBalanceOfPair);\r\n    }\r\n\r\n    function _buyFannyForCORE(uint256 minFannyOut, uint256 coreBalanceOfPairBefore) internal {\r\n        uint256 coreBalanceOfAfter = CORE.balanceOf(address(pairFANNYxCORE));\r\n        uint256 coreDelta = coreBalanceOfAfter.sub(coreBalanceOfPairBefore, \"??\");\r\n        address token0 = pairFANNYxCORE.token0();\r\n        (uint256 reserves0, uint256 reserves1,) = pairFANNYxCORE.getReserves();\r\n        uint256 fannyOut;\r\n        if(token0 == address(CORE)) {\r\n            fannyOut = getAmountOut(coreDelta, reserves0, reserves1);\r\n            pairFANNYxCORE.swap(0, fannyOut, msg.sender, \"\");\r\n        } else {\r\n            fannyOut = getAmountOut(coreDelta, reserves1, reserves0);\r\n            pairFANNYxCORE.swap(fannyOut, 0, msg.sender, \"\");\r\n        }\r\n        require(fannyOut >= minFannyOut, \"Slippage was too high on trade\");\r\n    }\r\n\r\n    function buyFannyForCORE(uint256 amount,uint256 minFannyOut) public {\r\n        uint256 coreBalanceOfPair = CORE.balanceOf(address(pairFANNYxCORE));\r\n        safeTransferFrom(address(CORE), msg.sender, address(pairFANNYxCORE), amount);\r\n        _buyFannyForCORE(minFannyOut, coreBalanceOfPair);\r\n    }\r\n\r\n    function sellFannyForCORE(uint256 amount,uint256 minCOREOut) public {\r\n        safeTransferFrom(address(FANNY), msg.sender, address(pairFANNYxCORE), amount);\r\n        _sellFannyForCORE(amount, minCOREOut, msg.sender);\r\n    }\r\n\r\n\r\n    function _sellFannyForCORE(uint256 amount,uint256 minCOREOut, address recipent) internal returns(uint256 coreOut) {\r\n        address token0 = pairFANNYxCORE.token0();\r\n        (uint256 reserves0, uint256 reserves1,) = pairFANNYxCORE.getReserves();\r\n        if(token0 == address(FANNY)) {\r\n            coreOut = getAmountOut(amount, reserves0, reserves1);\r\n            pairFANNYxCORE.swap(0, coreOut, recipent, \"\");\r\n        } else {\r\n            coreOut = getAmountOut(amount, reserves1, reserves0);\r\n            pairFANNYxCORE.swap(coreOut, 0, recipent, \"\");\r\n        }\r\n        require(coreOut > 0, \"Sold for nothing\");\r\n        require(coreOut >= minCOREOut, \"Too much slippage in trade\");\r\n    }\r\n\r\n\r\n    function sellFannyForETH(uint256 amount, uint256 minETHOut) public {\r\n        safeTransferFrom(address(FANNY), msg.sender, address(pairFANNYxCORE), amount);\r\n        uint256 coreOut = _sellFannyForCORE(amount, 0, address(this));\r\n        uint256 COREBefore = CORE.balanceOf(address(pairWETHxCORE));\r\n        CORE.transfer(address(pairWETHxCORE), coreOut);\r\n        uint256 COREAfter = CORE.balanceOf(address(pairWETHxCORE));\r\n\r\n        (uint256 reserveCORE, uint256 reserveWETH,) = pairWETHxCORE.getReserves();\r\n        uint256 ethOut = getAmountOut(COREAfter - COREBefore, reserveCORE, reserveWETH);\r\n        pairWETHxCORE.swap(0, ethOut , address(this), \"\");\r\n        require(ethOut >= minETHOut, \"Too much slippage in trade\");\r\n        WETH.withdraw(ethOut);\r\n        (bool success, ) = msg.sender.call.value(ethOut)(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'MUH FANNY: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fanny\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFanny\",\"type\":\"uint256\"}],\"name\":\"CORENeededToBuyFanny\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFanny\",\"type\":\"uint256\"}],\"name\":\"ETHneededToBuyFanny\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FANNY\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFannyOut\",\"type\":\"uint256\"}],\"name\":\"buyFannyForCORE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFannyOut\",\"type\":\"uint256\"}],\"name\":\"buyFannyForETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFannyOut\",\"type\":\"uint256\"}],\"name\":\"buyFannyForWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postTaxAmount\",\"type\":\"uint256\"}],\"name\":\"getCOREPreTaxForAmountPostTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coreNeededAfterTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFanny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFANNYxCORE\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairWETHxCORE\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCOREOut\",\"type\":\"uint256\"}],\"name\":\"sellFannyForCORE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minETHOut\",\"type\":\"uint256\"}],\"name\":\"sellFannyForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferHandler\",\"outputs\":[{\"internalType\":\"contract ITransferHandler01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FannyRouter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008ad66f7e0e3e3dc331d3dbf2c662d7ae293c1fe0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bfb55ec0e200bc40476038a9b530185296ade411c7d5134d7840125a02f83fd8"}]}