{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"MasksMetadataStore.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MasksMetadataStore is Ownable {\\n    // Public variables\\n\\n    bytes32[] public ipfsHashesInHexadecimal;\\n    bytes3[] public traitBytes;\\n\\n    // Public constants\\n\\n    uint256 public constant MAX_MASKS_SUPPLY = 16384;\\n\\n    // IPFS CID is generated using default options of the IPFS node version specified in the variable below\\n    string public constant IPFS_VERSION = \\\"go-ipfs 0.8.0\\\"; // Version of IPFS node used. For reproducibility.\\n    bytes2 public constant IPFS_PREFIX = 0x1220; // Multihash function: SHA2-256 Hashing algorithm\\n    string public constant IPFS_CHUNKER = \\\"size-262144\\\"; // IPFS Chunker used: size-262144\\n    uint256 public constant IPFS_CID_VERSION = 0; // IPFS CID Version: v0\\n    bool public constant IPFS_RAW_LEAVES_FLAG = false; // IPFS Raw leaves option flag: Set to false\\n    string public constant IPFS_DAG_FORMAT = \\\"Merkle DAG\\\"; // IPFS DAG: Merkle DAG by default\\n\\n    /*\\n    Store Metadata comprising of IPFS Hashes (In Hexadecimal minus the first two fixed bytes) and explicit traits\\n    Ordered according to original hashed sequence pertaining to the Hashmasks provenance\\n    Ownership is intended to be burned (Renounced) after storage is completed\\n    */\\n    function storeMetadata(bytes32[] memory ipfsHex, bytes3[] memory traitsHex)\\n        public\\n        onlyOwner\\n    {\\n        storeMetadataStartingAtIndex(\\n            ipfsHashesInHexadecimal.length,\\n            ipfsHex,\\n            traitsHex\\n        );\\n    }\\n\\n    /*\\n    Store metadata starting at a particular index. In case any corrections are required before completion\\n    */\\n    function storeMetadataStartingAtIndex(\\n        uint256 startIndex,\\n        bytes32[] memory ipfsHex,\\n        bytes3[] memory traitsHex\\n    ) public onlyOwner {\\n        require(startIndex \\u003c= ipfsHashesInHexadecimal.length);\\n        require(\\n            ipfsHex.length == traitsHex.length,\\n            \\\"Arrays must be equal in length\\\"\\n        );\\n\\n        for (uint256 i = 0; i \\u003c ipfsHex.length; i++) {\\n            if ((i + startIndex) \\u003e= ipfsHashesInHexadecimal.length) {\\n                ipfsHashesInHexadecimal.push(ipfsHex[i]);\\n                traitBytes.push(traitsHex[i]);\\n            } else {\\n                ipfsHashesInHexadecimal[i + startIndex] = ipfsHex[i];\\n                traitBytes[i + startIndex] = traitsHex[i];\\n            }\\n        }\\n\\n        // Post-assertions\\n        require(ipfsHashesInHexadecimal.length \\u003c= MAX_MASKS_SUPPLY);\\n        require(traitBytes.length \\u003c= MAX_MASKS_SUPPLY);\\n    }\\n\\n    /*\\n    Returns the IPFS Hash in Hexadecimal format for the Hashmask image at specified position in the original hashed sequence\\n    */\\n    function getIPFSHashHexAtIndex(uint256 index)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        require(\\n            index \\u003c ipfsHashesInHexadecimal.length,\\n            \\\"Metadata does not exist for the specified index\\\"\\n        );\\n        return abi.encodePacked(IPFS_PREFIX, ipfsHashesInHexadecimal[index]);\\n    }\\n\\n    /*\\n    Returns the trait bytes for the Hashmask image at specified position in the original hashed sequence\\n    */\\n    function getTraitBytesAtIndex(uint256 index) public view returns (bytes3) {\\n        require(\\n            index \\u003c traitBytes.length,\\n            \\\"Metadata does not exist for the specified index\\\"\\n        );\\n        return traitBytes[index];\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IPFS_CHUNKER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IPFS_CID_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IPFS_DAG_FORMAT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IPFS_PREFIX\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IPFS_RAW_LEAVES_FLAG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IPFS_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MASKS_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getIPFSHashHexAtIndex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTraitBytesAtIndex\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ipfsHashesInHexadecimal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ipfsHex\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes3[]\",\"name\":\"traitsHex\",\"type\":\"bytes3[]\"}],\"name\":\"storeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"ipfsHex\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes3[]\",\"name\":\"traitsHex\",\"type\":\"bytes3[]\"}],\"name\":\"storeMetadataStartingAtIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traitBytes\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasksMetadataStore","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1fe378ba398f19277cadf4a51f86e867669627ab545b9bd5aee03dfa4df91c98"}]}