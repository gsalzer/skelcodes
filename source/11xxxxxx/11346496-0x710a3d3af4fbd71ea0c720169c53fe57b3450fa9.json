{"status":"1","message":"OK","result":[{"SourceCode":"{\"cubecoin.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-02-24\\n*/\\n\\npragma solidity ^0.4.24;\\n\\n// ----------------------------------------------------------------------------\\n// \\u0027Cubebit\\u0027  token contract\\n//\\n// Symbol      : CUB\\n// Name        : Cubebit\\n// Total supply: 300 000 000\\n// Decimals    : 18\\n// ----------------------------------------------------------------------------\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address public owner;\\n\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  function Ownable() {\\n    owner = msg.sender;\\n  }\\n\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) onlyOwner public {\\n    require(newOwner != address(0));\\n    OwnershipTransferred(owner, newOwner);\\n    owner = newOwner;\\n  }\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is ERC20Basic, Ownable {\\n  using SafeMath for uint256;\\n\\n  mapping(address =\\u003e uint256) balances;\\n  // allowedAddresses will be able to transfer even when locked\\n  // lockedAddresses will *not* be able to transfer even when *not locked*\\n  mapping(address =\\u003e bool) public allowedAddresses;\\n  mapping(address =\\u003e bool) public lockedAddresses;\\n  bool public locked = true;\\n\\n  function allowAddress(address _addr, bool _allowed) public onlyOwner {\\n    require(_addr != owner);\\n    allowedAddresses[_addr] = _allowed;\\n  }\\n\\n  function lockAddress(address _addr, bool _locked) public onlyOwner {\\n    require(_addr != owner);\\n    lockedAddresses[_addr] = _locked;\\n  }\\n\\n  function setLocked(bool _locked) public onlyOwner {\\n    locked = _locked;\\n  }\\n\\n  function canTransfer(address _addr) public constant returns (bool) {\\n    if(locked){\\n      if(!allowedAddresses[_addr]\\u0026\\u0026_addr!=owner) return false;\\n    }else if(lockedAddresses[_addr]) return false;\\n\\n    return true;\\n  }\\n\\n\\n\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(canTransfer(msg.sender));\\n    \\n\\n    // SafeMath.sub will throw if there is not enough balance.\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of.\\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is ERC20, BasicToken {\\n\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n    require(_to != address(0));\\n    require(canTransfer(msg.sender));\\n\\n    uint256 _allowance = allowed[_from][msg.sender];\\n\\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n    // require (_value \\u003c= _allowance);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   *\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n\\n  /**\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   */\\n  function increaseApproval (address _spender, uint _addedValue)\\n    returns (bool success) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  function decreaseApproval (address _spender, uint _subtractedValue)\\n    returns (bool success) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue \\u003e oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n}\\n\\n\\n/**\\n * @title Burnable Token\\n * @dev Token that can be irreversibly burned (destroyed).\\n */\\ncontract BurnableToken is StandardToken {\\n\\n    event Burn(address indexed burner, uint256 value);\\n\\n    /**\\n     * @dev Burns a specific amount of tokens.\\n     * @param _value The amount of token to be burned.\\n     */\\n    function burn(uint256 _value) public {\\n        require(_value \\u003e 0);\\n        require(_value \\u003c= balances[msg.sender]);\\n        // no need to require value \\u003c= totalSupply, since that would imply the\\n        // sender\\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n        address burner = msg.sender;\\n        balances[burner] = balances[burner].sub(_value);\\n        totalSupply = totalSupply.sub(_value);\\n        Burn(burner, _value);\\n        Transfer(burner, address(0), _value);\\n    }\\n}\\n\\ncontract Cubebit is BurnableToken {\\n\\n    string public constant name = \\\"Cubebit\\\";\\n    string public constant symbol = \\\"CUB\\\";\\n    uint public constant decimals = 18;\\n    // there is no problem in using * here instead of .mul()\\n    uint256 public constant initialSupply = 300000000 * (10 ** uint256(decimals));\\n\\n    // Constructors\\n    function Cubebit () {\\n        totalSupply = initialSupply;\\n        balances[msg.sender] = initialSupply; // Send all tokens to owner\\n        allowedAddresses[owner] = true;\\n    }\\n\\n}\"},\"staking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity \\u003c=0.7.5;\\n\\nimport \\u0027./cubecoin.sol\\u0027;\\n\\n\\ninterface IStaking{\\n    \\n    function stake() external returns(bool);\\n    \\n    function claim() external returns(bool);\\n    \\n    function forceclaim() external returns(bool);\\n    \\n    function drain() external returns(bool);\\n    \\n    function specificDrain(uint256 amount) external returns(bool);\\n    \\n    function fetchhistory(address user) external returns(uint256[],uint256[],uint256[]);\\n    \\n}\\n\\ncontract CUB_STAKING {\\n    Cubebit public cube_address;\\n    address public owner;\\n    \\n    struct History{\\n        uint256[] time;\\n        uint256[] amount;\\n        bool[] isclaimed;\\n    }\\n    \\n    \\n    struct User{\\n        uint256 staked;\\n        uint256 claimed;\\n        uint256 laststake;\\n    }\\n    \\n    constructor(address contract_address) public{\\n        cube_address = Cubebit(contract_address);\\n        owner = msg.sender;\\n    }\\n    \\n    mapping(address =\\u003e User) public users;\\n    mapping(address =\\u003e History) history;\\n    \\n    function stake(uint256 _amount) public returns(bool){\\n        require(cube_address.allowance(msg.sender,address(this)) \\u003e= _amount,\\u0027Allowance Exceeded\\u0027);\\n        require(cube_address.balanceOf(msg.sender) \\u003e= _amount,\\u0027Insufficient Balance\\u0027);\\n        User storage u = users[msg.sender];\\n        u.staked = SafeMath.add(u.staked,_amount);\\n        u.laststake = block.timestamp;\\n        History storage h = history[msg.sender];\\n        h.time.push(block.timestamp);\\n        h.amount.push(_amount);\\n        h.isclaimed.push(false);\\n        cube_address.transferFrom(msg.sender,address(this),_amount);\\n        return true;\\n    }\\n    \\n    function claim() public returns(bool,uint256){\\n        User storage u = users[msg.sender];\\n        require(u.staked \\u003e 0, \\u0027Nothing Staked\\u0027);\\n        require(block.timestamp \\u003e u.laststake + 365 days,\\u0027Maturity Not Reached\\u0027);\\n        uint256 p = SafeMath.mul(u.staked,12);\\n        uint256 i = SafeMath.div(p,100);\\n        uint256 am = SafeMath.add(u.staked,i);\\n        History storage h = history[msg.sender];\\n        h.time.push(block.timestamp);\\n        h.amount.push(am);\\n        h.isclaimed.push(true);\\n        u.claimed = SafeMath.add(u.claimed,am);\\n        u.staked = 0;\\n        u.laststake = 0;\\n        cube_address.transfer(msg.sender,am);\\n        return(true,am);\\n    }\\n    \\n    function forceclaim() public returns(bool){\\n        User storage u = users[msg.sender];\\n        require(u.staked \\u003e 0,\\u0027Nothing Staked\\u0027);\\n        u.claimed = SafeMath.add(u.claimed,u.staked);\\n        History storage h = history[msg.sender];\\n        h.time.push(block.timestamp);\\n        h.amount.push(u.staked);\\n        h.isclaimed.push(true);\\n        cube_address.transfer(msg.sender,u.staked);\\n        u.staked = 0;\\n        u.laststake = 0;\\n        return true;\\n    }\\n    \\n    function fetchhistory(address user) public view returns(uint256[] time,uint256[] staked,bool[] claimed){\\n        History storage h = history[user];\\n        return(h.time,h.amount,h.isclaimed);\\n    }\\n    \\n    function changeOwner(address new_owner) public returns(bool){\\n        require(msg.sender==owner,\\u0027Not Owner\\u0027);\\n        owner = new_owner;\\n    }\\n    \\n    function drain() public returns(bool){\\n        require(msg.sender==owner,\\u0027Not Owner\\u0027);\\n        cube_address.transfer(owner,cube_address.balanceOf(address(this)));\\n    }\\n    \\n    function specificDrain(uint256 amount) public returns(bool){\\n        require(msg.sender==owner,\\u0027Not Owner\\u0027);\\n        cube_address.transfer(owner,amount);\\n    }\\n    \\n}\"}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"specificDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceclaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cube_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"fetchhistory\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256[]\"},{\"name\":\"staked\",\"type\":\"uint256[]\"},{\"name\":\"claimed\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"staked\",\"type\":\"uint256\"},{\"name\":\"claimed\",\"type\":\"uint256\"},{\"name\":\"laststake\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"contract_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"CUB_STAKING","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a12a550cc13ce7c38c40a58465bfbb55d1edc36","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://cb785d10c4a315e29ba2fc6da9a74fa734861e957232d02fb6dfb517ee60263c"}]}