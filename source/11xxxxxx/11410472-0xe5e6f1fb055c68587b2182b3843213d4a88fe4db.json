{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/global/SavingsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport {Ownable} from \\\"../lib/Ownable.sol\\\";\\n\\ncontract SavingsRegistry is Ownable {\\n\\n    // Available synths which have a savings contract\\n    address[] public availableSavings;\\n\\n    // Synth synthetic (proxy) to savings contract\\n    mapping(address => address) public savings;\\n\\n    /* ========== Events ========== */\\n\\n    event SavingsAdded(address synthetic, address savings);\\n    event SavingsRemoved(address synthetic, address savings);\\n\\n    /* ========== View Functions ========== */\\n\\n    function getAllSavings()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return availableSavings;\\n    }\\n\\n    /* ========== Mutative Functions ========== */\\n\\n    /**\\n     * @dev Add a new savings contract to the registry.\\n     *\\n     * @param synthetic The address of the synthetic token proxy contract\\n     * @param saving The address of the savings contract proxy address\\n     */\\n    function addSavings(\\n        address synthetic,\\n        address saving\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            savings[synthetic] == address(0),\\n            \\\"Savings already exists\\\"\\n        );\\n\\n        availableSavings.push(synthetic);\\n        savings[synthetic] = saving;\\n\\n        emit SavingsAdded(synthetic, saving);\\n    }\\n\\n\\n    /**\\n     * @dev Remove a savings contract from registry.\\n     *\\n     * @param synthetic The address of the synthetic token proxy contract\\n     */\\n    function removeSavings(\\n        address synthetic\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            address(savings[synthetic]) != address(0),\\n            \\\"Synth does not exist\\\"\\n        );\\n\\n        // Save the address we're removing for emitting the event at the end.\\n        address savingsToRemove = savings[synthetic];\\n\\n        // Remove the synth from the availableSynths array.\\n        for (uint i = 0; i < availableSavings.length; i++) {\\n            if (address(availableSavings[i]) == savingsToRemove) {\\n                delete availableSavings[i];\\n                availableSavings[i] = availableSavings[availableSavings.length - 1];\\n                availableSavings.length--;\\n\\n                break;\\n            }\\n        }\\n\\n        // And remove it from the synths mapping\\n        delete savings[synthetic];\\n\\n        emit SavingsRemoved(synthetic, savingsToRemove);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.16;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synthetic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"savings\",\"type\":\"address\"}],\"name\":\"SavingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"synthetic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"savings\",\"type\":\"address\"}],\"name\":\"SavingsRemoved\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthetic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"saving\",\"type\":\"address\"}],\"name\":\"addSavings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableSavings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllSavings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"synthetic\",\"type\":\"address\"}],\"name\":\"removeSavings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"savings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SavingsRegistry","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}