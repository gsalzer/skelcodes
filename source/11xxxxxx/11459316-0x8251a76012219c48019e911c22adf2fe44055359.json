{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/Cane.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./lib/ERC20.sol\\\";\\n\\n// File: contracts/Cane.sol\\ncontract Cane is ERC20 {\\n\\n    address minter;\\n    uint256 tradingStartTimestamp;\\n    uint256 public constant maxSupply = 12500 * 1e18;\\n\\n    modifier onlyMinter {\\n        require(msg.sender == minter, 'Only minter can call this function.');\\n        _;\\n    }\\n\\n    modifier limitEarlyBuy (uint256 _amount) {\\n        require(tradingStartTimestamp <= block.timestamp ||\\n            _amount <= (5 * 1e18), \\\"ERC20: early buys limited\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _minter, uint256 _tradingStartTimestamp) public ERC20('Hurricane Finance', 'HCANE') {\\n        tradingStartTimestamp = _tradingStartTimestamp;\\n        minter = _minter;\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        require(_totalSupply.add(amount) <= maxSupply, \\\"ERC20: max supply exceeded\\\");\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override limitEarlyBuy (amount) returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override limitEarlyBuy (amount) returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/CategoryFive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IUniswap.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Math.sol\\\";\\nimport \\\"./lib/Address.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/FeeHelpers.sol\\\";\\nimport \\\"./Cane.sol\\\";\\nimport \\\"./Hugo.sol\\\";\\n\\n\\n// File: contracts/CategoryFive.sol\\n\\ncontract CategoryFive is ReentrancyGuard, Ownable {\\n \\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event Staked(address indexed from, uint256 amount, uint256 amountLP);\\n    event Withdrawn(address indexed to, uint256 poolId, uint256 amount, uint256 amountLP);\\n    event Claimed(address indexed to, uint256 poolId, uint256 amount);\\n    event ClaimedAndStaked(address indexed to, uint256 poolId, uint256 amount);\\n    event Halving(uint256 amount);\\n    event Received(address indexed from, uint256 amount);\\n    event EmergencyWithdraw(address indexed to, uint256 poolId, uint256 amount);\\n    event ClaimedLPReward(address indexed to, uint256 poolId, uint256 lpEthReward, uint256 lpCaneReward);\\n\\n    Cane public cane; // Hurricane farming token\\n    Hugo public hugo; // Hurricane governance token\\n\\n    IUniswapV2Factory public factory;\\n    IUniswapV2Router02 public router;\\n    address public weth;\\n    address payable public treasury;\\n    bool public treasuryDisabled = false;\\n\\n    struct AccountInfo {\\n        uint256 index;\\n        uint256 balance;\\n        uint256 maxBalance;\\n        uint256 lastWithdrawTimestamp;\\n        uint256 lastStakedTimestamp;\\n        uint256 reward;\\n        uint256 rewardPerTokenPaid;\\n        uint256 lpEthReward;\\n        uint256 lpEthRewardPaid;\\n        uint256 lpCaneReward;\\n        uint256 lpCaneRewardPaid;\\n    }\\n    struct PoolInfo {\\n        IERC20 pairAddress; // Address of LP token contract\\n        IERC20 otherToken; // Reference to other token in pair (e.g. 'weth')\\n        uint256 rewardAllocation; // Rewards allocated for this pool\\n        uint256 totalSupply; // Total supply of tokens in pool\\n        uint256 borrowedSupply; // Total CANE token borrowed for pool\\n        uint256 rewardPerTokenStored; // Rewards per token in this pool\\n    }\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => AccountInfo)) public accountInfos;\\n    // List for supporting accountInfos interation\\n    mapping(uint256 => address payable[]) public accountInfosIndex;\\n\\n    struct Airgrabber {\\n        uint256 ethAmount; // Amount of ETH due\\n        uint256 caneAmount; // Amount of CANE due\\n        bool ethClaimed; // Track eth claim status\\n        bool caneClaimed; // Track claimed CANE\\n    }\\n    mapping(address => Airgrabber) public airgrabbers;\\n\\n    uint256 public constant HALVING_DURATION = 14 days;\\n    uint256 public rewardAllocation = 5000 * 10 ** 18;\\n    uint256 public halvingTimestamp = 0;\\n    uint256 public lastUpdateTimestamp = 0;\\n\\n    uint256 public rewardRate = 0;\\n\\n    // configurable parameters via gov voting (days 30+ parameters only)\\n    uint256 public rewardHalvingPercent = 50;\\n    uint256 public claimBurnFee = 1;\\n    uint256 public claimTreasuryFeePercent = 2;\\n    uint256 public claimLPFeePercent = 2;\\n    uint256 public claimLiquidBalancePercent = 95;\\n    uint256 public unstakeLPFeePercent = 2;\\n    uint256 public unstakeTreasuryFeePercent = 2;\\n    uint256 public unstakeBurnFeePercent = 1;\\n    uint256 public withdrawalLimitPercent = 20;\\n    uint256 public katrinaExitFeePercent = 3;\\n\\n    // Goal is for farming to be started as early as this timestamp\\n    // Date and time (GMT): Tuesday, December 15, 2020 7:00 PM UTC\\n    uint256 public farmingStartTimestamp = 1608058800;\\n    bool public farmingStarted = false;\\n\\n    // References to our 2 core pools\\n    uint256 private constant HUGO_POOL_ID = 0;\\n    uint256 private constant KATRINA_POOL_ID = 1;\\n\\n    // Burn address\\n    address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Uniswap Router Address\\n    address constant ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    // Prevent big buys for first few mins after farming starts\\n    uint256 public constant NOBUY_DURATION = 5 minutes;\\n\\n    constructor(address payable _treasury) public {\\n        cane = new Cane(address(this), farmingStartTimestamp.add(NOBUY_DURATION));\\n        hugo = new Hugo(address(this));\\n\\n        router = IUniswapV2Router02(ROUTER_ADDRESS);\\n        factory = IUniswapV2Factory(router.factory());\\n        weth = router.WETH();\\n        treasury = _treasury;\\n\\n        IERC20(cane).safeApprove(address(router), uint256(-1));\\n\\n        // Calc initial reward rate\\n        rewardRate = rewardAllocation.div(HALVING_DURATION);\\n\\n        // Initialize CANE staking pool w/ 30% of rewards at launch\\n        // New allocations can be set dynamically via governance\\n        poolInfo.push(PoolInfo({\\n            pairAddress: cane,\\n            otherToken: cane,\\n            rewardAllocation: rewardAllocation.mul(30).div(100),\\n            borrowedSupply: 0,\\n            totalSupply: 0,\\n            rewardPerTokenStored: 0\\n        }));\\n\\n        // Initialize Katrina liquidity pool w/ 70% of rewards at launch\\n        // New allocations can be set dynamically via governance\\n        poolInfo.push(PoolInfo({\\n            pairAddress: IERC20(factory.createPair(address(cane), weth)),\\n            otherToken: IERC20(weth),\\n            rewardAllocation: rewardAllocation.mul(70).div(100),\\n            borrowedSupply: 0,\\n            totalSupply: 0,\\n            rewardPerTokenStored: 0\\n        }));\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function stakeToHugo(uint256 _amount, bool _claimAndStakeRewards) public nonReentrant {\\n        _checkFarming();\\n        _updateReward(HUGO_POOL_ID);\\n        _halving(HUGO_POOL_ID);\\n\\n        // Retrieve pool & account Info\\n        PoolInfo storage pool = poolInfo[HUGO_POOL_ID];\\n        AccountInfo storage account = accountInfos[HUGO_POOL_ID][msg.sender];\\n\\n        // find user rewards due in each pool and auto claim\\n        if (_claimAndStakeRewards) {\\n            uint256 rewardsDue = account.reward; // current reward due in Hugo\\n            for (uint256 pid = 1; pid < poolInfo.length; pid++) {\\n                if (accountInfos[pid][msg.sender].reward > 0) {\\n                    rewardsDue = rewardsDue.add(accountInfos[pid][msg.sender].reward);\\n                    accountInfos[pid][msg.sender].reward = 0;\\n                }\\n            }\\n\\n            if (rewardsDue > 0) { // transfer to Hugo staking pool directly without any fees\\n                // mint rewards directly to pool, plus send equiv Hugo gov tokens to user\\n                cane.mint(address(this), rewardsDue);\\n                hugo.mint(msg.sender, rewardsDue);\\n\\n                emit ClaimedAndStaked(msg.sender, HUGO_POOL_ID, rewardsDue);\\n\\n                account.balance = account.balance.add(rewardsDue);\\n                // Track to always allow full withdrawals against withdrawalLimit\\n                if (account.balance > account.maxBalance) {\\n                    account.maxBalance = account.balance;\\n                }\\n                account.lastStakedTimestamp = block.timestamp;\\n                if (account.index == 0) {\\n                    accountInfosIndex[HUGO_POOL_ID].push(msg.sender);\\n                    account.index = accountInfosIndex[HUGO_POOL_ID].length;\\n                }\\n\\n                pool.totalSupply = pool.totalSupply.add(rewardsDue);\\n\\n                if (account.reward > 0) {\\n                    account.reward = 0;\\n                }\\n            }\\n        }\\n\\n        if (_amount > 0) { // allows staking only rewards to Hugo\\n            require(cane.balanceOf(msg.sender) >= _amount, 'Invalid balance');\\n            cane.transferFrom(msg.sender, address(this), _amount);\\n\\n            // Add balance to pool's total supply\\n            pool.totalSupply = pool.totalSupply.add(_amount);\\n\\n            // Add to iterator tracker if not exists\\n            account.balance = account.balance.add(_amount);\\n            // Track to always allow full withdrawals against withdrawalLimit\\n            if (account.balance > account.maxBalance) {\\n                account.maxBalance = account.balance;\\n            }\\n            account.lastStakedTimestamp = block.timestamp;\\n            \\n            if (account.index == 0) {\\n                accountInfosIndex[HUGO_POOL_ID].push(msg.sender);\\n                account.index = accountInfosIndex[HUGO_POOL_ID].length;\\n            }\\n\\n            // Mint equivalent number of our gov token for user\\n            hugo.mint(msg.sender, _amount);\\n\\n            emit Staked(msg.sender, _amount, 0);\\n        }\\n    }\\n\\n    function stake(uint256 _poolId, uint256 _amount, address payable sender) external payable nonReentrant {\\n        _checkFarming();\\n        _updateReward(_poolId);\\n        _halving(_poolId);\\n\\n        if (_poolId == KATRINA_POOL_ID) {\\n            _amount = msg.value;\\n        }\\n\\n        require(_amount > 0, 'Invalid amount');\\n        require(!address(msg.sender).isContract() || address(msg.sender) == address(this), 'Invalid user');\\n\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n        require(_poolId > HUGO_POOL_ID, 'Stake in Hugo');\\n\\n        if (address(msg.sender) != address(this)) {\\n            sender = msg.sender;\\n        }\\n\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        AccountInfo storage account = accountInfos[_poolId][sender];\\n\\n        // Use 2% of deposit sent to purchase CANE\\n        uint256 boughtCane = 0;\\n        if (pool.totalSupply > 0 && \\n            farmingStartTimestamp.add(NOBUY_DURATION) <= block.timestamp && \\n            _poolId == KATRINA_POOL_ID) {\\n            address[] memory swapPath = new address[](2);\\n            swapPath[0] = address(pool.otherToken);\\n            swapPath[1] = address(cane);\\n            IERC20(pool.otherToken).safeApprove(address(router), 0);\\n            IERC20(pool.otherToken).safeApprove(address(router), _amount.div(50));\\n            uint256[] memory amounts = router.swapExactETHForTokens{ value: _amount.div(50) }\\n                (uint(0), swapPath, address(this), block.timestamp + 1 days);\\n            \\n            boughtCane = amounts[amounts.length - 1];\\n            _amount = _amount.sub(_amount.div(50));\\n        }\\n\\n        uint256 caneTokenAmount = IERC20(cane).balanceOf(address(pool.pairAddress));\\n        uint256 otherTokenAmount = IERC20(pool.otherToken).balanceOf(address(pool.pairAddress));\\n        \\n        // If otherTokenAmount = 0 then set initial price to 1 ETH = 1 CANE\\n        uint256 amountCaneTokenDesired = 0;\\n        if (_poolId == KATRINA_POOL_ID) {\\n            amountCaneTokenDesired = (otherTokenAmount == 0) ? \\n                _amount * 1 : _amount.mul(caneTokenAmount).div(otherTokenAmount);\\n        } else {\\n            require(otherTokenAmount > 0, \\\"Pool not started\\\"); // require manual add for new LPs\\n            amountCaneTokenDesired = _amount.mul(caneTokenAmount).div(otherTokenAmount);\\n        }\\n\\n        // Mint borrowed cane and update borrowed amount in pool\\n        cane.mint(address(this), amountCaneTokenDesired.sub(boughtCane));\\n        pool.borrowedSupply = pool.borrowedSupply.add(amountCaneTokenDesired);\\n\\n        // Add liquidity in uniswap\\n        IERC20(cane).approve(address(router), amountCaneTokenDesired);\\n        \\n        uint256 liquidity;\\n        if (_poolId == KATRINA_POOL_ID) { // use addLiquidityETH\\n            (,, liquidity) = router.addLiquidityETH{value : _amount}(\\n                address(cane), amountCaneTokenDesired, 0, 0, address(this), block.timestamp + 1 days);\\n        } else { // use addLiquidity for token/cane liquidity\\n            IERC20(pool.otherToken).approve(address(router), _amount);\\n            (,, liquidity) = router.addLiquidity(\\n                address(pool.otherToken), address(cane), \\n                _amount, amountCaneTokenDesired, 0, 0, address(this), block.timestamp + 1 days);\\n        }\\n\\n        // Add LP token to total supply\\n        pool.totalSupply = pool.totalSupply.add(liquidity);\\n\\n        // Add to balance and iterator tracker if not exists\\n        account.balance = account.balance.add(liquidity);\\n        // Track to always allow full withdrawals against withdrawalLimit\\n        if (account.balance > account.maxBalance) {\\n            account.maxBalance = account.balance;\\n        }\\n        if (account.index == 0) {\\n            accountInfosIndex[_poolId].push(sender);\\n            account.index = accountInfosIndex[_poolId].length;\\n        }\\n\\n        // Set stake timestamp as last withdraw timestamp\\n        // to prevent withdraw immediately after first staking\\n        account.lastStakedTimestamp = block.timestamp;\\n        if (account.lastWithdrawTimestamp == 0) {\\n            account.lastWithdrawTimestamp = block.timestamp;\\n        }\\n\\n        emit Staked(sender, _amount, liquidity);\\n    }\\n\\n    function withdraw(uint256 _poolId) external nonReentrant {\\n        _checkFarming();\\n        _updateReward(_poolId);\\n        _halving(_poolId);\\n\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n\\n        // Retrieve account in pool\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        AccountInfo storage account = accountInfos[_poolId][msg.sender];\\n\\n        require(account.lastWithdrawTimestamp + 12 hours <= block.timestamp, 'Invalid withdraw time');\\n        require(account.balance > 0, 'Invalid balance');\\n\\n        uint256 _amount = account.maxBalance.mul(withdrawalLimitPercent).div(100);\\n        if (account.balance < _amount) {\\n            _amount = account.balance;\\n        }\\n\\n        // Reduce total supply in pool\\n        pool.totalSupply = pool.totalSupply.sub(_amount);\\n        // Reduce user's balance\\n        account.balance = account.balance.sub(_amount);\\n        // Update user's withdraw timestamp\\n        account.lastWithdrawTimestamp = block.timestamp;\\n\\n        uint256[] memory totalToken = new uint256[](2);\\n\\n        uint256 otherTokenAmountMinusFees = 0;\\n\\n        if (_poolId == HUGO_POOL_ID) { // burn Hugo\\n            totalToken[1] = _amount;\\n            hugo.burn(msg.sender, _amount);\\n\\n            uint256 burnFee = _amount.div(FeeHelpers.getUnstakeBurnFee(account.lastStakedTimestamp, unstakeBurnFeePercent)); // calculate fee\\n            cane.burn(BURN_ADDRESS, burnFee);\\n            otherTokenAmountMinusFees = _amount.sub(burnFee);\\n        } else { // Remove liquidity in uniswap\\n            IERC20(pool.pairAddress).approve(address(router), _amount);\\n            if (_poolId == KATRINA_POOL_ID) {\\n                (uint256 caneTokenAmount, uint256 otherTokenAmount) = router.removeLiquidityETH(address(cane), _amount, 0, 0, address(this), block.timestamp + 1 days);\\n                totalToken[0] = caneTokenAmount;\\n                totalToken[1] = otherTokenAmount;\\n            } else {\\n                (uint256 caneTokenAmount, uint256 otherTokenAmount) = router.removeLiquidity(address(cane), address(pool.otherToken), _amount, 0, 0, address(this), block.timestamp + 1 days);\\n                totalToken[0] = caneTokenAmount;\\n                totalToken[1] = otherTokenAmount;\\n            }\\n\\n            // Burn borrowed cane and update count\\n            cane.burn(address(this), totalToken[0]);\\n            pool.borrowedSupply = pool.borrowedSupply.sub(totalToken[0]);\\n        }\\n\\n        // Calculate and transfer withdrawal fee to treasury\\n        uint256 treasuryFee = 0;\\n        if (_poolId == KATRINA_POOL_ID) {\\n            treasuryFee = FeeHelpers.getKatrinaExitFee(katrinaExitFeePercent);\\n            treasuryFee = totalToken[1].div(treasuryFee);\\n            treasury.transfer(treasuryFee);\\n        } else {\\n            treasuryFee = FeeHelpers.getUnstakeTreasuryFee(account.lastStakedTimestamp, unstakeTreasuryFeePercent);\\n            treasuryFee = totalToken[1].div(treasuryFee);\\n            pool.otherToken.transfer(treasury, treasuryFee);\\n        }\\n        \\n        if (_poolId == HUGO_POOL_ID) {\\n            otherTokenAmountMinusFees = otherTokenAmountMinusFees.sub(treasuryFee);\\n        } else {\\n            otherTokenAmountMinusFees = totalToken[1].sub(treasuryFee);\\n        }\\n        \\n        // Calculate and transfer withdrawal fee for distribution to other LPs\\n        if (accountInfosIndex[_poolId].length > 0 && pool.totalSupply > 0) {\\n            uint256 lpFee = 0;\\n            if (_poolId == KATRINA_POOL_ID) {\\n                lpFee = FeeHelpers.getKatrinaExitFee(katrinaExitFeePercent);\\n            } else {\\n                lpFee = FeeHelpers.getUnstakeLPFee(account.lastStakedTimestamp, unstakeLPFeePercent);\\n            }\\n\\n            lpFee = totalToken[1].div(lpFee);\\n            for (uint256 i = 0; i < accountInfosIndex[_poolId].length; i ++) {\\n                AccountInfo storage lpAccount = accountInfos[_poolId][accountInfosIndex[_poolId][i]];\\n                // Send portion of fee and track amounts if we have an LP balance and is not sender\\n                if (lpAccount.balance > 0 && accountInfosIndex[_poolId][i] != msg.sender) {\\n                    if (_poolId == KATRINA_POOL_ID) {\\n                        lpAccount.lpEthReward = lpAccount.lpEthReward.add(lpAccount.balance.mul(lpFee).div(pool.totalSupply));\\n                    } else {\\n                        lpAccount.lpCaneReward = lpAccount.lpCaneReward.add(lpAccount.balance.mul(lpFee).div(pool.totalSupply));\\n                    }\\n                }\\n            }\\n            otherTokenAmountMinusFees = otherTokenAmountMinusFees.sub(lpFee);\\n        }\\n\\n        totalToken[1] = otherTokenAmountMinusFees;\\n\\n        if (_poolId == KATRINA_POOL_ID) {\\n            msg.sender.transfer(totalToken[1]);\\n        } else {\\n            pool.otherToken.transfer(msg.sender, totalToken[1]);\\n        }\\n\\n        // Remove from list if balance is zero\\n        if (account.balance == 0 && account.index > 0 && account.index <= accountInfosIndex[_poolId].length) {\\n            uint256 accountIndex = account.index - 1; // Fetch real index in array\\n            accountInfos[_poolId][accountInfosIndex[_poolId][accountInfosIndex[_poolId].length - 1]].index = accountIndex + 1; // Give it my index\\n            accountInfosIndex[_poolId][accountIndex] = accountInfosIndex[_poolId][accountInfosIndex[_poolId].length - 1]; // Give it my address\\n            accountInfosIndex[_poolId].pop();\\n            account.index = 0; // Keep struct ref valid, but remove from tracking list of active LPs\\n        }\\n\\n        emit Withdrawn(msg.sender, _poolId, _amount, totalToken[1]);\\n    }\\n\\n    // Claim functions for extracting pool rewards\\n    function claim(uint256 _poolId) external nonReentrant {\\n        _checkFarming();\\n        _updateReward(_poolId);\\n        _halving(_poolId);\\n\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n\\n        // Retrieve account in pool\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        AccountInfo storage account = accountInfos[_poolId][msg.sender];\\n        \\n        uint256 reward = account.reward;\\n\\n        require(reward > 0, 'No rewards');\\n\\n        if (reward > 0) {\\n            // Reduce rewards due\\n            account.reward = 0;\\n            // Apply variable % burn fee\\n            cane.mint(BURN_ADDRESS, reward.div(FeeHelpers.getClaimBurnFee(account.lastStakedTimestamp, claimBurnFee)));\\n            // Extract liquid qty and send liquid to user wallet\\n            cane.mint(msg.sender, reward.div(FeeHelpers.getClaimLiquidBalancePcnt(account.lastStakedTimestamp, claimLiquidBalancePercent)));\\n            // Extract treasury fee and send\\n            cane.mint(address(treasury), reward.div(FeeHelpers.getClaimTreasuryFee(account.lastStakedTimestamp, claimTreasuryFeePercent)));\\n\\n            // Extract LPs fees amount and distribute\\n            if (accountInfosIndex[_poolId].length > 0 && pool.totalSupply > 0) {\\n                for (uint256 i = 0; i < accountInfosIndex[_poolId].length; i ++) {\\n                    AccountInfo storage lpAccount = accountInfos[_poolId][accountInfosIndex[_poolId][i]];\\n                    // Send portion of fee and track amounts if we have an LP balance and is not sender\\n                    if (lpAccount.balance > 0 && accountInfosIndex[_poolId][i] != msg.sender) {\\n                        lpAccount.lpCaneReward = lpAccount.lpCaneReward.add(lpAccount.balance\\n                            .mul(reward.div(FeeHelpers.getClaimLPFee(account.lastStakedTimestamp, claimLPFeePercent)))\\n                            .div(pool.totalSupply));\\n                    }\\n                }\\n            }\\n\\n            // Remove liquid and treasury/lp/burn fees, then remainder goes back to LP\\n            uint256[] memory rewardAmounts = new uint256[](2);\\n            rewardAmounts[0] = reward\\n                .sub(reward.div(FeeHelpers.getClaimBurnFee(account.lastStakedTimestamp, claimBurnFee)))\\n                .sub(reward.div(FeeHelpers.getClaimLiquidBalancePcnt(account.lastStakedTimestamp, claimLiquidBalancePercent)))\\n                .sub(reward.div(FeeHelpers.getClaimTreasuryFee(account.lastStakedTimestamp, claimTreasuryFeePercent)))\\n                .sub(reward.div(FeeHelpers.getClaimLPFee(account.lastStakedTimestamp, claimLPFeePercent)));\\n            rewardAmounts[1] = rewardAmounts[0].div(2);\\n            // Mint [ALL] the qty of tokens needed to buy ETH and add LP\\n            cane.mint(address(this), rewardAmounts[0]);\\n            // Build swap pair from token to token (eg: WETH)\\n            address[] memory swapPath = new address[](2);\\n            swapPath[0] = address(cane);\\n            swapPath[1] = address(weth);\\n            // Sell minted half for ETH equivalent\\n            IERC20(cane).safeApprove(address(router), 0);\\n            IERC20(cane).safeApprove(address(router), rewardAmounts[1]);\\n            uint256[] memory swappedTokens = router.swapExactTokensForETH(rewardAmounts[1], uint(0), swapPath, address(this), block.timestamp + 1 days);\\n            // Use other minted half for CANE part, add to lp\\n            uint256[] memory totalLp = new uint256[](3);\\n            IERC20(cane).safeApprove(address(router), 0);\\n            IERC20(cane).safeApprove(address(router), rewardAmounts[1]);\\n            (totalLp[0], totalLp[1], totalLp[2]) = router.addLiquidityETH{value: swappedTokens[swappedTokens.length - 1]}\\n                (address(cane), rewardAmounts[1], 0, 0, address(this), block.timestamp + 5 minutes);\\n            // Check for any leftover CANE dust, return to treasury\\n            if (rewardAmounts[1].sub(totalLp[0]) > 0) {\\n                cane.mint(treasury, rewardAmounts[1].sub(totalLp[0]));\\n            }\\n            // Check for any leftover ETH dust, return to treasury\\n            if (swappedTokens[swappedTokens.length - 1].sub(totalLp[1]) > 0) {\\n                treasury.transfer(swappedTokens[swappedTokens.length - 1].sub(totalLp[1]));\\n            }\\n\\n            // Add LP token to total and borrowed supply to KAT pool\\n            PoolInfo storage katPool = poolInfo[KATRINA_POOL_ID];\\n            AccountInfo storage katAccount = accountInfos[KATRINA_POOL_ID][msg.sender];\\n\\n            katPool.totalSupply = katPool.totalSupply.add(totalLp[2]);\\n            katPool.borrowedSupply = katPool.borrowedSupply.add(totalLp[0]);\\n            \\n            // Add to balance and iterator if not already in pool\\n            katAccount.balance = katAccount.balance.add(totalLp[2]);\\n            if (katAccount.index == 0) {\\n                accountInfosIndex[KATRINA_POOL_ID].push(msg.sender);\\n                katAccount.index = accountInfosIndex[KATRINA_POOL_ID].length;\\n            }\\n\\n            emit Claimed(msg.sender, _poolId, reward);\\n        }\\n    }\\n\\n    // allow LPs to claim fee rewards with no penalties\\n    function claimLP(uint256 _poolId) external {\\n        AccountInfo storage account = accountInfos[_poolId][msg.sender];\\n        require (account.lpEthReward > 0 || account.lpCaneReward > 0, 'No LP rewards');\\n        emit ClaimedLPReward(msg.sender, _poolId, account.lpEthReward, account.lpCaneReward);\\n\\n        if (account.lpEthReward > 0) {\\n            // Reduce rewards due, track total paid, and send ETH\\n            account.lpEthRewardPaid = account.lpEthRewardPaid.add(account.lpEthReward);\\n            msg.sender.transfer(account.lpEthReward);\\n            account.lpEthReward = 0;\\n        }\\n        if (account.lpCaneReward > 0) {\\n            account.lpCaneRewardPaid = account.lpCaneRewardPaid.add(account.lpCaneReward);\\n            cane.mint(msg.sender, account.lpCaneReward);\\n            account.lpCaneReward = 0;\\n        }\\n    }\\n\\n    // stake airgrabber's tokens to Hugo\\n    function stakeAirgrabber() external {\\n        require(airgrabbers[msg.sender].caneAmount > 0, \\\"No CANE to stake\\\");\\n        require(!airgrabbers[msg.sender].caneClaimed, \\\"Already airgrabbed CANE\\\");\\n        airgrabbers[msg.sender].caneClaimed = true;\\n        cane.mint(msg.sender, airgrabbers[msg.sender].caneAmount);\\n        stakeToHugo(airgrabbers[msg.sender].caneAmount, false);\\n    }\\n\\n    // stake airgrabber's tokens to Katrina\\n    function stakeAirgrabberLP() external {\\n        require(airgrabbers[msg.sender].ethAmount > 0, \\\"No ETH to stake\\\");\\n        require(!airgrabbers[msg.sender].ethClaimed, \\\"Already airgrabbed ETH\\\");\\n        airgrabbers[msg.sender].ethClaimed = true;\\n        this.stake{value: airgrabbers[msg.sender].ethAmount}(KATRINA_POOL_ID, airgrabbers[msg.sender].ethAmount, msg.sender);\\n    }\\n\\n    // withdraw airgrabber's ETH to their wallet\\n    function withdrawAirgrabber() external {\\n        require(airgrabbers[msg.sender].ethAmount > 0, \\\"No ETH to stake\\\");\\n        require(!airgrabbers[msg.sender].ethClaimed, \\\"Already airgrabbed ETH\\\");\\n        airgrabbers[msg.sender].ethClaimed = true;\\n        msg.sender.transfer(airgrabbers[msg.sender].ethAmount);\\n    }\\n\\n    // Accepts user's address and adds their ETH/CANE stakes due from the airgrab\\n    function addAirgrabber(address _airgrabber, uint256 _ethAmount, uint256 _caneAmount) external onlyOwner {\\n        require(!airgrabbers[_airgrabber].ethClaimed || !airgrabbers[_airgrabber].caneClaimed, \\\"Airgrabber already claimed\\\");\\n        airgrabbers[_airgrabber] = Airgrabber({\\n            ethAmount: _ethAmount,\\n            caneAmount: _caneAmount,\\n            ethClaimed: false,\\n            caneClaimed: false\\n        });\\n    }\\n\\n    // transfer to treasury if problem found. allow disabling \\n    // of this function, if we find all is well over time\\n    function disableSendToTreasury() external onlyOwner {\\n        require(!treasuryDisabled, \\\"Already disabled\\\");\\n        treasuryDisabled = true;\\n    }\\n    function sendToTreasury() external onlyOwner {\\n        require(!treasuryDisabled, \\\"Invalid operation\\\");\\n        treasury.transfer(address(this).balance);\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    // _rewardAllocation must be % number (e.g. 15 means 15%)\\n    \\n    function add(\\n        uint256 _rewardAllocation, \\n        IERC20 _pairAddress, \\n        IERC20 _otherToken\\n        ) external onlyOwner {\\n        require (_rewardAllocation <= 100, \\\"Invalid allocation\\\");\\n        uint256 _totalAllocation = rewardAllocation.mul(_rewardAllocation).div(100);\\n        for (uint256 pid = 0; pid < poolInfo.length; ++ pid) {\\n            _totalAllocation = _totalAllocation.add(poolInfo[pid].rewardAllocation);\\n        }\\n        require (_totalAllocation <= rewardAllocation, \\\"Allocation exceeded\\\");\\n\\n        poolInfo.push(PoolInfo({\\n            pairAddress: _pairAddress,\\n            otherToken: _otherToken,\\n            rewardAllocation: rewardAllocation.mul(_rewardAllocation).div(100),\\n            borrowedSupply: 0,\\n            totalSupply: 0,\\n            rewardPerTokenStored: 0\\n        }));\\n    }\\n\\n    // Update the given pool's CANE rewards. Can only be called by the owner.\\n    // _rewardAllocation must be % number (e.g. 15 means 15%)\\n    function set(uint256 _poolId, uint256 _rewardAllocation) external onlyOwner {\\n        require (_rewardAllocation <= 100, \\\"Invalid allocation\\\");\\n        uint256 totalAllocation = rewardAllocation.sub(poolInfo[_poolId].rewardAllocation).add(\\n            rewardAllocation.mul(_rewardAllocation).div(100)\\n        );\\n        require (totalAllocation <= rewardAllocation, \\\"Allocation exceeded\\\");\\n        \\n        if (poolInfo[_poolId].rewardAllocation != rewardAllocation.mul(_rewardAllocation).div(100)) {\\n            poolInfo[_poolId].rewardAllocation = rewardAllocation.mul(_rewardAllocation).div(100);\\n        }\\n    }\\n\\n    // Fetches length of accounts in a pool\\n    // Allows easy front end iteration of accountInfos\\n    function accountInfosLength(uint256 _poolId) external view returns (uint256) {\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n        return accountInfosIndex[_poolId].length;\\n    }\\n\\n    // Fetches details of account in the pool specified\\n    // Allows easy front end iteration of accountInfos\\n    function accountInfosByIndex(uint256 _poolId, uint256 _index) \\n        external view returns (\\n            uint256 index,\\n            uint256 balance,\\n            uint256 lastWithdrawTimestamp,\\n            uint256 lastStakedTimestamp,\\n            uint256 reward,\\n            uint256 rewardPerTokenPaid,\\n            uint256 lpEthReward,\\n            uint256 lpEthRewardPaid,\\n            uint256 lpCaneReward,\\n            uint256 lpCaneRewardPaid,\\n            address userAddress) {\\n\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n        userAddress = accountInfosIndex[_poolId][_index];\\n        AccountInfo memory account = accountInfos[_poolId][userAddress];\\n        return (\\n            account.index,\\n            account.balance,\\n            account.lastWithdrawTimestamp,\\n            account.lastStakedTimestamp,\\n            account.reward,\\n            account.rewardPerTokenPaid,\\n            account.lpEthReward,\\n            account.lpEthRewardPaid,\\n            account.lpCaneReward,\\n            account.lpCaneRewardPaid,\\n            userAddress\\n            );\\n    }\\n\\n    // Fetches individual balances for each token in a pair\\n    function balanceOfPool(uint256 _poolId) external view returns (uint256, uint256) {\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        \\n        uint256 otherTokenAmount = IERC20(pool.otherToken).balanceOf(address(pool.pairAddress));\\n        uint256 caneTokenAmount = IERC20(cane).balanceOf(address(pool.pairAddress));\\n\\n        return (otherTokenAmount, caneTokenAmount);\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function burnedTokenAmount() external view returns (uint256) {\\n        return cane.balanceOf(BURN_ADDRESS);\\n    }\\n\\n    function rewardPerToken(uint256 _poolId) public view returns (uint256) {\\n        require(_poolId < poolInfo.length, 'Invalid pool');\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        if (pool.totalSupply == 0) {\\n            return pool.rewardPerTokenStored;\\n        }\\n\\n        uint256 poolRewardRate = pool.rewardAllocation.mul(rewardRate).div(rewardAllocation);\\n\\n        return pool.rewardPerTokenStored\\n        .add(\\n            lastRewardTimestamp()\\n            .sub(lastUpdateTimestamp)\\n            .mul(poolRewardRate)\\n            .mul(1e18)\\n            .div(pool.totalSupply)\\n        );\\n    }\\n\\n    function lastRewardTimestamp() public view returns (uint256) {\\n        return Math.min(block.timestamp, halvingTimestamp);\\n    }\\n\\n    function rewardEarned(uint256 _poolId, address account) public view returns (uint256) {\\n        return accountInfos[_poolId][account].balance.mul(\\n            rewardPerToken(_poolId).sub(accountInfos[_poolId][account].rewardPerTokenPaid)\\n        )\\n        .div(1e18)\\n        .add(accountInfos[_poolId][account].reward);\\n    }\\n\\n    // Token price in eth\\n    function tokenPrice(uint256 _poolId) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        uint256 ethAmount = IERC20(weth).balanceOf(address(pool.pairAddress));\\n        uint256 tokenAmount = IERC20(cane).balanceOf(address(pool.pairAddress));\\n        \\n        return tokenAmount > 0 ?\\n        // Current price\\n        ethAmount.mul(1e18).div(tokenAmount) :\\n        // Initial price\\n        (uint256(1e18).div(1));\\n    }\\n\\n    // Set all configurable parameters\\n    function setGoverningParameters(uint256[] memory _parameters) external onlyOwner {\\n        require(_parameters[0] >= 5 && _parameters[0] <= 50, \\\"Invalid range\\\");  //_parameters[0] _rewardHalvingPercent\\n        require(_parameters[1] >= 10 && _parameters[1] <= 50, \\\"Invalid range\\\"); //_parameters[1] _withdrawalLimitPercent\\n        require(_parameters[2] >= 1 && _parameters[2] <= 5, \\\"Invalid range\\\");   //_parameters[2] _claimBurnFee\\n        require(_parameters[3] >= 1 && _parameters[3] <= 5, \\\"Invalid range\\\");   //_parameters[3] _claimTreasuryFeePercent\\n        require(_parameters[4] >= 1 && _parameters[4] <= 5, \\\"Invalid range\\\");   //_parameters[4] _claimLPFeePercent\\n        require(_parameters[5] >= 25 && _parameters[5] <= 95, \\\"Invalid range\\\"); //_parameters[5] _claimLiquidBalancePercent\\n        require(_parameters[6] >= 1 && _parameters[6] <= 5, \\\"Invalid range\\\");   //_parameters[6] _unstakeBurnFeePercent\\n        require(_parameters[7] >= 1 && _parameters[7] <= 5, \\\"Invalid range\\\");   //_parameters[7] _unstakeTreasuryFeePercent\\n        require(_parameters[8] >= 1 && _parameters[8] <= 5, \\\"Invalid range\\\");   //_parameters[8] _unstakeLPFeePercent\\n        require(_parameters[9] >= 2 && _parameters[9] <= 10, \\\"Invalid range\\\");  //_parameters[9] _katrinaExitFeePercent\\n        require(_parameters[2]   // _claimBurnFee\\n            .add(_parameters[3]) // _claimTreasuryFeePercent\\n            .add(_parameters[4]) // _claimLPFeePercent\\n            .add(_parameters[5]) // _claimLiquidBalancePercent\\n            == 100, 'Invalid claim fees');\\n        rewardHalvingPercent = _parameters[0];\\n        withdrawalLimitPercent = _parameters[1];\\n        claimBurnFee = _parameters[2];\\n        claimTreasuryFeePercent = _parameters[3];\\n        claimLPFeePercent = _parameters[4];\\n        claimLiquidBalancePercent = _parameters[5];\\n        unstakeBurnFeePercent = _parameters[6];\\n        unstakeTreasuryFeePercent = _parameters[7];\\n        unstakeLPFeePercent = _parameters[8];\\n        katrinaExitFeePercent = _parameters[9];\\n    }\\n    \\n    // Only allow our farmingStartTimestamp to be changed between 72 hours\\n    // of the original schedule. Gives us flexibility in when to go live\\n    // if some unexpected circumstances happens (such as high gas prices)\\n    //\\n    // We must start farming somewhere between Dec 15, 2020 and Dec 16, 2020 19:00 GMT\\n    // Thanks Karl (Cat3) for the suggestion ;-)\\n    function setFarmingStartTimestamp(uint256 _farmingStartTimestamp) external onlyOwner {\\n        require(!farmingStarted && _farmingStartTimestamp >= 1608058800 && _farmingStartTimestamp <= 1608145200, \\\"Invalid range\\\");\\n        farmingStartTimestamp = _farmingStartTimestamp;\\n    }\\n\\n    // Update user rewards\\n    function _updateReward(uint256 _poolId) internal {\\n        PoolInfo storage pool = poolInfo[_poolId];\\n        pool.rewardPerTokenStored = rewardPerToken(_poolId);\\n        lastUpdateTimestamp = lastRewardTimestamp();\\n        if (msg.sender != address(0)) {\\n            accountInfos[_poolId][msg.sender].reward = rewardEarned(_poolId, msg.sender);\\n            accountInfos[_poolId][msg.sender].rewardPerTokenPaid = pool.rewardPerTokenStored;\\n        }\\n    }\\n\\n    // Do halving when timestamp reached\\n    function _halving(uint256 _poolId) internal {\\n        if (block.timestamp >= halvingTimestamp) {\\n            rewardAllocation = rewardAllocation.mul(rewardHalvingPercent).div(100);\\n\\n            rewardRate = rewardAllocation.div(HALVING_DURATION);\\n            halvingTimestamp = halvingTimestamp.add(HALVING_DURATION);\\n\\n            _updateReward(_poolId);\\n            emit Halving(rewardAllocation);\\n        }\\n    }\\n    // Check if farming is started\\n    function _checkFarming() internal {\\n        require(farmingStartTimestamp <= block.timestamp, 'Farming has not yet started. Try again later.');\\n        if (!farmingStarted) {\\n            // We made it to this line, so farming has finally started! The Hurricane.Finance team \\n            // would love to thank the following team members for their unwavering support:\\n            // Kart (Cat3); Foxtrot Delta; Storm Wins; psychologist; Lito; and Lizzie\\n            // ...and of course, me, Meteorologist - hehehe.\\n            //\\n            // Let's go, Hurricanes!\\n            farmingStarted = true;\\n            halvingTimestamp = block.timestamp.add(HALVING_DURATION);\\n            lastUpdateTimestamp = block.timestamp;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/Hugo.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./lib/ERC20.sol\\\";\\n\\n// File: contracts/Hugo.sol\\ncontract Hugo is ERC20 {\\n    \\n    address minter;\\n\\n    modifier onlyMinter {\\n        require(msg.sender == minter, 'Only minter can call this function.');\\n        _;\\n    }\\n\\n    constructor(address _minter) public ERC20('Hurricane Gov', 'HGOV') {\\n        minter = _minter;\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyMinter {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyMinter {\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/interfaces/IUniswap.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n// File: contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n// File: contracts/uniswapv2/interfaces/IUniswapV2Router02.sol\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: contracts/uniswapv2/interfaces/IWETH.sol\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) _balances;\\n\\n    mapping (address => mapping (address => uint256)) _allowances;\\n\\n    uint256 _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/FeeHelpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Math.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary FeeHelpers {\\n    using SafeMath for uint256;\\n    \\n    function getClaimBurnFee(uint256 lastStakedTimestamp, uint256 claimBurnFee) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days) {\\n            return base.mul(100).div(25);\\n        } else if (block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(20);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days) {\\n            return base.mul(100).div(10);\\n        } else if (block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(5);\\n        } else {\\n            return base.mul(100).div(claimBurnFee);\\n        }\\n    }\\n\\n    function getClaimTreasuryFee(uint256 lastStakedTimestamp, uint256 claimTreasuryFeePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days) {\\n            return base.mul(100).div(9);\\n        } else if (block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(8);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days || block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(5);\\n        } else if (block.timestamp > lastStakedTimestamp + 4 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(4);\\n        } else {\\n            return base.mul(100).div(claimTreasuryFeePercent);\\n        }\\n    }\\n\\n    function getClaimLPFee(uint256 lastStakedTimestamp, uint256 claimLPFeePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days) {\\n            return base.mul(100).div(15);\\n        } else if (block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(12);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days || block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(10);\\n        } else if (block.timestamp > lastStakedTimestamp + 4 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(5);\\n        } else {\\n            return base.mul(100).div(claimLPFeePercent);\\n        }\\n    }\\n    \\n    function getClaimLiquidBalancePcnt(uint256 lastStakedTimestamp, uint256 claimLiquidBalancePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days) {\\n            return base.mul(100).div(1);\\n        } else if (block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(10);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days) {\\n            return base.mul(100).div(15);\\n        } else if (block.timestamp > lastStakedTimestamp + 3 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(20);\\n        } else {\\n            return base.mul(100).div(claimLiquidBalancePercent);\\n        }\\n    }\\n\\n    function getUnstakeBurnFee(uint256 lastStakedTimestamp, uint256 unstakeBurnFeePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days || block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(25);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days) {\\n            return base.mul(100).div(20);\\n        } else if (block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(15);\\n        } else if (block.timestamp > lastStakedTimestamp + 4 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(5);\\n        } else {\\n            return base.mul(100).div(unstakeBurnFeePercent);\\n        }\\n    }\\n\\n    function getUnstakeTreasuryFee(uint256 lastStakedTimestamp, uint256 unstakeTreasuryFeePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n\\n        if (block.timestamp < lastStakedTimestamp + 1 days || block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(25);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days) {\\n            return base.mul(100).div(20);\\n        } else if (block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(15);\\n        } else if (block.timestamp > lastStakedTimestamp + 4 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(5);\\n        } else {\\n            return base.mul(100).div(unstakeTreasuryFeePercent);\\n        }\\n    }\\n    \\n    function getUnstakeLPFee(uint256 lastStakedTimestamp, uint256 unstakeLPFeePercent) public view returns (uint256) {\\n        uint256 base = 1;\\n        if (block.timestamp < lastStakedTimestamp + 1 days || block.timestamp < lastStakedTimestamp + 2 days) {\\n            return base.mul(100).div(25);\\n        } else if (block.timestamp < lastStakedTimestamp + 3 days) {\\n            return base.mul(100).div(20);\\n        } else if (block.timestamp < lastStakedTimestamp + 4 days) {\\n            return base.mul(100).div(15);\\n        } else if (block.timestamp > lastStakedTimestamp + 4 days && block.timestamp < lastStakedTimestamp + 29 days) {\\n            return base.mul(100).div(10);\\n        } else {\\n            return base.mul(100).div(unstakeLPFeePercent);\\n        }\\n    }\\n\\n    function getKatrinaExitFee(uint256 katrinaExitFeePercent) public pure returns (uint256) {\\n        uint256 base = 1;\\n        return base.mul(100).div(katrinaExitFeePercent);\\n    }\\n}\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/math/Math.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n * @dev Basic contract for authorization control.\\n * @author dicether\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event LogOwnerShipTransferInitiated(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Modifier, which throws if called by other account than owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set contract creator as initial owner\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        pendingOwner = _newOwner;\\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev PendingOwner can accept ownership.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n        emit LogOwnerShipTransferred(owner, pendingOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/mwilliams/Library/Mobile Documents/com~apple~CloudDocs/Projects/Qubicles/Technology/Hurricane/testing/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"FeeHelpers\": \"0x1dfff442355eA663aEEcF868df691b9013454B58\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedAndStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpEthReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpCaneReward\",\"type\":\"uint256\"}],\"name\":\"ClaimedLPReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Halving\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HALVING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOBUY_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpEthReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpEthRewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpCaneReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpCaneRewardPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"accountInfosByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpEthReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpEthRewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpCaneReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpCaneRewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountInfosIndex\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"accountInfosLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAllocation\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airgrabber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_caneAmount\",\"type\":\"uint256\"}],\"name\":\"addAirgrabber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airgrabbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"caneAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ethClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"caneClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cane\",\"outputs\":[{\"internalType\":\"contract Cane\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLPFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLiquidBalancePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTreasuryFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSendToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hugo\",\"outputs\":[{\"internalType\":\"contract Hugo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"katrinaExitFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"otherToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHalvingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAllocation\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmingStartTimestamp\",\"type\":\"uint256\"}],\"name\":\"setFarmingStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_parameters\",\"type\":\"uint256[]\"}],\"name\":\"setGoverningParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAirgrabber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAirgrabberLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimAndStakeRewards\",\"type\":\"bool\"}],\"name\":\"stakeToHugo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeBurnFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeLPFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTreasuryFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAirgrabber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CategoryFive","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001b5ed7c13eb64819f7b0c7b2d810daba93dfc2e0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}