{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/link/ILINK.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface ILINK {\r\n    function balanceOf(address _addr) external returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/link/LINKEthManager.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\ncontract LINKEthManager {\r\n    using SafeMath for uint256;\r\n\r\n    ILINK public link_;\r\n\r\n    mapping(bytes32 => bool) public usedEvents_;\r\n\r\n    event Locked(\r\n        address indexed token,\r\n        address indexed sender,\r\n        uint256 amount,\r\n        address recipient\r\n    );\r\n\r\n    event Unlocked(\r\n        address ethToken,\r\n        uint256 amount,\r\n        address recipient,\r\n        bytes32 receiptId\r\n    );\r\n\r\n    address public wallet;\r\n    modifier onlyWallet {\r\n        require(msg.sender == wallet, \"HmyManager/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param link token contract address, e.g., erc20 contract\r\n     * @param _wallet is the multisig wallet\r\n     */\r\n    constructor(ILINK link, address _wallet) public {\r\n        link_ = link;\r\n        wallet = _wallet;\r\n    }\r\n\r\n    /**\r\n     * @dev lock tokens to be minted on harmony chain\r\n     * @param amount amount of tokens to lock\r\n     * @param recipient recipient address on the harmony chain\r\n     */\r\n    function lockToken(uint256 amount, address recipient) public {\r\n        require(\r\n            recipient != address(0),\r\n            \"EthManager/recipient is a zero address\"\r\n        );\r\n        require(amount > 0, \"EthManager/zero token locked\");\r\n        uint256 _balanceBefore = link_.balanceOf(msg.sender);\r\n        require(\r\n            link_.transferFrom(msg.sender, address(this), amount),\r\n            \"EthManager/lock failed\"\r\n        );\r\n        uint256 _balanceAfter = link_.balanceOf(msg.sender);\r\n        uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);\r\n        emit Locked(address(link_), msg.sender, _actualAmount, recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev lock tokens for an user address to be minted on harmony chain\r\n     * @param amount amount of tokens to lock\r\n     * @param recipient recipient address on the harmony chain\r\n     */\r\n    function lockTokenFor(\r\n        address userAddr,\r\n        uint256 amount,\r\n        address recipient\r\n    ) public onlyWallet {\r\n        require(\r\n            recipient != address(0),\r\n            \"EthManager/recipient is a zero address\"\r\n        );\r\n        require(amount > 0, \"EthManager/zero token locked\");\r\n        uint256 _balanceBefore = link_.balanceOf(userAddr);\r\n        require(\r\n            link_.transferFrom(userAddr, address(this), amount),\r\n            \"EthManager/lock failed\"\r\n        );\r\n        uint256 _balanceAfter = link_.balanceOf(userAddr);\r\n        uint256 _actualAmount = _balanceBefore.sub(_balanceAfter);\r\n        emit Locked(address(link_), userAddr, _actualAmount, recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev unlock tokens after burning them on harmony chain\r\n     * @param amount amount of unlock tokens\r\n     * @param recipient recipient of the unlock tokens\r\n     * @param receiptId transaction hash of the burn event on harmony chain\r\n     */\r\n    function unlockToken(\r\n        uint256 amount,\r\n        address recipient,\r\n        bytes32 receiptId\r\n    ) public onlyWallet {\r\n        require(\r\n            !usedEvents_[receiptId],\r\n            \"EthManager/The burn event cannot be reused\"\r\n        );\r\n        usedEvents_[receiptId] = true;\r\n        require(link_.transfer(recipient, amount), \"EthManager/unlock failed\");\r\n        emit Unlocked(address(link_), amount, recipient, receiptId);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILINK\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ethToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"link_\",\"outputs\":[{\"internalType\":\"contract ILINK\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"lockTokenFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"receiptId\",\"type\":\"bytes32\"}],\"name\":\"unlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedEvents_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LINKEthManager","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000715cdda5e9ad30a0ced14940f9997ee611496de6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a13e948c5f7b2a7838607842a238e0725b73279f0b742bdd018db908c139aaa1"}]}