{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-02-12\r\n*/\r\n\r\npragma solidity 0.4.19;\r\ninterface ERC20 {\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function balanceOf(address _owner) public view returns (uint);\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint indexed _value, bytes _data);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Vesting of DGTX tokens\r\n * @dev Vesting contract allows to lock in DGTX tokens and withdraw them according to the predefined scheme.\r\n *   The planned amount to lock-in is 100,000,000 DGTX.\r\n * @author SmartDec\r\n */\r\ncontract Vesting is Ownable {\r\n    address public token;\r\n    uint public constant FIRST_UNLOCK = 1531612800; // 15 July 2018 00:00 GMT\r\n    uint public constant TOTAL_TOKENS = 100000000 * (uint(10) ** 18); // 100 000 000 DGTX tokens\r\n    bool public tokenReceived = true;\r\n\r\n    event Withdraw(address _to, uint _value);\r\n\r\n    /**\r\n     * @param _token token that will be received by vesting\r\n     */\r\n    function Vesting(address _token) public Ownable() {\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw less or equals than available tokens. Throws if there are not enough tokens available.\r\n     * @param _amount amount of tokens to withdraw.\r\n     */\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        uint availableTokens = ERC20(token).balanceOf(this) - lockedAmount();\r\n        require(_amount <= availableTokens);\r\n        ERC20(token).transfer(msg.sender, _amount);\r\n        Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw all available tokens.\r\n     */\r\n    function withdrawAll() public onlyOwner {\r\n        uint availableTokens = ERC20(token).balanceOf(this) - lockedAmount();\r\n        ERC20(token).transfer(msg.sender, availableTokens);\r\n        Withdraw(msg.sender, availableTokens);\r\n    }\r\n    \r\n    /**\r\n     * @dev Internal function that tells how many tokens are locked at the moment.\r\n     * @return {\r\n     *    \"lockedTokens\": \"amount of locked tokens\"\r\n     * }\r\n     */\r\n    function lockedAmount() internal view returns (uint) {\r\n        if (now < FIRST_UNLOCK) {\r\n            return TOTAL_TOKENS;  \r\n        }\r\n\r\n        uint quarters = (now - FIRST_UNLOCK) / 0.25 years; // quarters past\r\n        uint effectiveQuarters = quarters <= 12 ? quarters : 12; // all tokens unlocked in 3 years after FIRST_UNLOCK\r\n        uint locked = TOTAL_TOKENS * (7500 - effectiveQuarters * 625) / 10000; // unlocks 25% plus 6.25% per quarter\r\n\r\n        return locked;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_UNLOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vesting","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c666081073e8dff8d3d1c2292a29ae1a2153ec09","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f21e8e417700efa3a42c030f52ba5072a2929b28305ea5f51d89551cf109a10b"}]}