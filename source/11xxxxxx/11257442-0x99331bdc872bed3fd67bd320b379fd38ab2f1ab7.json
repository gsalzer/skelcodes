{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.4;\r\n\r\ncontract RecycleFactory {\r\n    function recycle(uint uid, address[] calldata erc20) external {\r\n        bytes32 salt = keccak256(abi.encode(msg.sender, uid));\r\n        bytes memory bytecode = type(Recycle).creationCode;\r\n        address recycleContract;\r\n        assembly {\r\n            recycleContract := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        Recycle(recycleContract).initialize(msg.sender,erc20);\r\n    }\r\n}\r\n\r\ncontract Recycle {\r\n    function initialize(address payable recycler, address[] calldata erc20) external lock {\r\n        if(erc20.length > 0){\r\n            for (uint i; i < erc20.length; i++) {\r\n                RecyleHelper.transfer(erc20[i],recycler);\r\n            }\r\n        }\r\n        selfdestruct(recycler);\r\n    }\r\n    \r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n}\r\n\r\nlibrary RecyleHelper {\r\n    function transfer(address token, address to) internal returns (bool) {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        uint value = balanceOf(token);\r\n        if (value > 0){\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n            return success && (data.length == 0 || abi.decode(data, (bool)));\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address token) internal returns (uint) {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x70a08231, address(this)));\r\n        if (!success || data.length == 0) return 0;\r\n        return abi.decode(data, (uint));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20\",\"type\":\"address[]\"}],\"name\":\"recycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RecycleFactory","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ea1d8a7cd28aa072e9dcf9e794fd84689248404607880f9944a9e420e807aa6"}]}