{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IMiniMeToken.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IMiniMeToken {\r\n    function decimals() external view returns(uint8);\r\n    function balanceOf(address _account) external view returns(uint256);\r\n    function balanceOfAt(address _account, uint256 _block) external view returns(uint256);\r\n    function totalSupply() external view returns(uint256);\r\n    function totalSupplyAt(uint256 _block) external view returns(uint256);\r\n}\r\n// File: @aragon/os/contracts/lib/math/SafeMath.sol\r\n\r\n// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\r\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\r\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\r\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\r\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a, ERROR_ADD_OVERFLOW);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, ERROR_DIV_ZERO);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Crust.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n// ❤️ Thanks Rohini for coming up with the name\r\ncontract Crust is IMiniMeToken {\r\n    using SafeMath for uint256;\r\n    IMiniMeToken[] public crumbs;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    constructor(address[] memory _crumbs, string _name, string _symbol, uint8 _decimals) public {\r\n        require(_crumbs.length > 0, \"Crust.constructor: Crust must at least have one crumb\");\r\n        for(uint256 i = 0; i < _crumbs.length; i ++) {\r\n            crumbs.push(IMiniMeToken(_crumbs[i]));\r\n            require(crumbs[i].decimals() == _decimals, \"Crumbs must have same number of decimals as crust\");\r\n        }\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n    * @notice Tells the balance of `_account`.\r\n    * @param _account Address of the account.\r\n    * @return The balance of the account.\r\n    */\r\n    function balanceOf(address _account) external view returns(uint256) {\r\n        return this.balanceOfAt(_account, block.number);\r\n    }\r\n\r\n    /**\r\n    * @notice Tells the balance of `_account` at block `_block`.\r\n    * @param _account Address of the account.\r\n    * @param _block Block number.\r\n    * @return The balance of the account.\r\n    */\r\n    function balanceOfAt(address _account, uint256 _block) external view returns(uint256) {\r\n        uint256 result = 0;\r\n        for(uint256 i = 0; i < crumbs.length; i++) {\r\n            result = result.add(crumbs[i].balanceOfAt(_account, _block));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @notice Tells the total supply of this token.\r\n    * @return The total supply.\r\n    */\r\n    function totalSupply() external view returns(uint256) {\r\n        return this.totalSupplyAt(block.number);\r\n    }\r\n\r\n    /**\r\n    * @notice Tells the total supply of this token at block `_block`.\r\n    * @return The total supply.\r\n    */\r\n    function totalSupplyAt(uint256 _block) external view returns(uint256) {\r\n        uint256 result = 0;\r\n        for(uint256 i = 0; i < crumbs.length; i++) {\r\n            result = result.add(crumbs[i].totalSupplyAt(_block));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n    * @notice Gets the amount of decimals.\r\n    * @dev Necesary because otherwise typechain does not generate working artifacts\r\n    */\r\n    function decimals() external view returns(uint8) {\r\n        return decimals;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crumbs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crumbs\",\"type\":\"address[]\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Crust","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000020000000000000000000000005f5e9ed11344dadc3a08688e5f17e23f6a99bf81000000000000000000000000ad32a8e6220741182940c5abf610bde99e737b2d000000000000000000000000000000000000000000000000000000000000000c50696544414f204372757374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054352555354000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://36526f8eb417fddf4e8a9b04066c415afee565558830ffb89505e24037f2ffea"}]}