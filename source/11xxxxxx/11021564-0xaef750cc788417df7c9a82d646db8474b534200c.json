{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.4;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// ---------------------------------------------------------------------\r\n// ERC-20 Token Standard Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ---------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n  /**\r\n  Returns the name of the token - e.g. \"MyToken\"\r\n   */\r\n  string public name;\r\n  /**\r\n  Returns the symbol of the token. E.g. \"HIX\".\r\n   */\r\n  string public symbol;\r\n  /**\r\n  Returns the number of decimals the token uses - e. g. 8\r\n   */\r\n  uint8 public decimals;\r\n  /**\r\n  Returns the total token supply.\r\n   */\r\n  uint256 public totalSupply;\r\n  /**\r\n  Returns the account balance of another account with address _owner.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  /**\r\n  Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \r\n  The function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n  /**\r\n  Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n  /**\r\n  Allows _spender to withdraw from your account multiple times, up to the _value amount. \r\n  If this function is called again it overwrites the current allowance with _value.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n  /**\r\n  Returns the amount which _spender is still allowed to withdraw from _owner.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n  /**\r\n  MUST trigger when tokens are transferred, including zero value transfers.\r\n   */\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  /**\r\n  MUST trigger on any successful call to approve(address _spender, uint256 _value).\r\n    */\r\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\nOwned contract\r\n */\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\nFunction to receive approval and execute function in one call.\r\n */\r\ncontract TokenRecipient { \r\n  function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public; \r\n}\r\n\r\n/**\r\nToken implement\r\n */\r\ncontract Token is ERC20Interface, Owned {\r\n\r\n  mapping (address => uint256) _balances;\r\n  mapping (address => mapping (address => uint256)) _allowed;\r\n  \r\n  // This notifies clients about the amount burnt\r\n  event Burn(address indexed from, uint256 value);\r\n  \r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return _balances[_owner];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    _transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_value <= _allowed[_from][msg.sender]); \r\n    _allowed[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    _allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return _allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  Owner can transfer out any accidentally sent ERC20 tokens\r\n   */\r\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n  }\r\n\r\n  /**\r\n  Approves and then calls the receiving contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\r\n    TokenRecipient spender = TokenRecipient(_spender);\r\n    approve(_spender, _value);\r\n    spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Destroy tokens.\r\n  Remove `_value` tokens from the system irreversibly\r\n    */\r\n  function burn(uint256 _value) public returns (bool success) {\r\n    require(_balances[msg.sender] >= _value);\r\n    _balances[msg.sender] -= _value;\r\n    totalSupply -= _value;\r\n    emit Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  function mint(address recipient, uint256 amount) public {\r\n      require(msg.sender == owner);\r\n      require(totalSupply + amount >= totalSupply); // Overflow check\r\n\r\n      totalSupply += amount;\r\n      _balances[recipient] += amount;\r\n      emit Transfer(address(0), recipient, amount);\r\n  }\r\n\r\n  /**\r\n  Destroy tokens from other account.\r\n  Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    */\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n    require(_balances[_from] >= _value);\r\n    require(_value <= _allowed[_from][msg.sender]);\r\n    _balances[_from] -= _value;\r\n    _allowed[_from][msg.sender] -= _value;\r\n    totalSupply -= _value;\r\n    emit Burn(_from, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Internal transfer, only can be called by this contract\r\n    */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(_to != address(0x0));\r\n    // Check if the sender has enough\r\n    require(_balances[_from] >= _value);\r\n    // Check for overflows\r\n    require(_balances[_to] + _value > _balances[_to]);\r\n    // Save this for an assertion in the future\r\n    uint previousBalances = _balances[_from] + _balances[_to];\r\n    // Subtract from the sender\r\n    _balances[_from] -= _value;\r\n    // Add the same to the recipient\r\n    _balances[_to] += _value;\r\n    emit Transfer(_from, _to, _value);\r\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n    assert(_balances[_from] + _balances[_to] == previousBalances);\r\n  }\r\n\r\n}\r\n\r\ncontract CommonToken is Token {\r\n\r\n  constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _initialSupply) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n    totalSupply = _initialSupply * 10 ** uint256(decimals);\r\n    _balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  /**\r\n  If ether is sent to this address, send it back.\r\n   */\r\n  function () external payable {\r\n    revert();\r\n  }\r\n\r\n}\r\n\r\ncontract FintechGreen is CommonToken {\r\n  constructor() CommonToken(\"FINTECH GREEN\", \"FGI\", 8, 100000000000) public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FintechGreen","CompilerVersion":"v0.5.4+commit.9549d8ff","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ee51fd9f6d4eeedb237756b9c46fb85a2bc80e9899fb81de9ec88c71b18036af"}]}