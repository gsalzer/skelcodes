{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *  Program Name: EtherTreasury\r\n *  Website     : https://www.ethertreasury.com/\r\n *  Telegram    : https://t.me/ethertreasury\r\n *  Twitter     : https://twitter.com/ethertreasury\r\n *  Concept     : Ethereum & ERC-20 Toekns Dividend Paying DApp\r\n *  Category    : Passive Income\r\n * */\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n     /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract EtherTreasury is Ownable, ReentrancyGuard {\r\n    \r\n    /**\r\n     * @dev Structure to hold tokens supplu and dividend per share against collateral.\r\n     */\r\n    struct TokenMaster {\r\n        uint supply;\r\n        uint dividend;\r\n    }\r\n    \r\n    /**\r\n     * @dev Structure to hold collateral balalnce of wallet.\r\n     */\r\n    struct BalanceLedger {\r\n        uint tokenBalance;\r\n        uint referralBalance;\r\n        int payOut;\r\n    }\r\n    \r\n    /**\r\n     * @dev mapping to store all active contract addresses and wallet addresses. This will be used to check if contract address and wallet address already part of system.\r\n     */\r\n    mapping(address => bool) contractAddressList;\r\n    mapping(address => bool) walletAddressList;\r\n    \r\n    /**\r\n     * @dev array to store active contract address and wallet addresses.\r\n     */\r\n    address[] contractAddressSet;\r\n    address[] walletAddressSet;\r\n    \r\n    uint constant magnitude = 1e18 ;\r\n    uint constant initialPrice = 100000000000;\r\n    uint constant incrementPrice = 10000000000;\r\n    uint constant dividendFee = 10;\r\n    \r\n    /**\r\n     * @dev owner will start program on given time for investment.\r\n     */\r\n    bool startDeposit = false;\r\n    \r\n    /**\r\n     * @dev structure mapping created for storing balance and token information.\r\n     */\r\n    mapping (address => mapping(address => BalanceLedger)) balanceDetails;\r\n    mapping(address => TokenMaster) tokenDetails;\r\n    \r\n    /**\r\n     * @dev events to register information about collateral buy, sell, reinvest and token withdraw.\r\n     */\r\n    event onPurchase(address walletAddress, address contractAddress, uint incomingTokenAmount, uint collateralMinted, address referredBy);\r\n    event onSell(address walletAddress, address contractAddress, uint tokenAmountToReceiver, uint collateralBurned);\r\n    event onReinvest(address walletAddress, address contractAddress, uint reInvestTokenAmount, uint collateralMinted);\r\n    event onWithdraw(address walletAddress, address contractAddress, uint amountToWithdraw);\r\n    \r\n    /**\r\n     * @dev function to purchase collateral by sending Ethereum.\r\n     */\r\n    function buy(address _referredBy) public nonReentrant payable returns(uint256)\r\n    {\r\n        require(startDeposit);\r\n        require(msg.value>0);\r\n        \r\n        // if this is first deposit transaction for token then activate token struct storage with default initial parameters.\r\n        if(contractAddressList[0x0000000000000000000000000000000000000000] == false){\r\n            contractAddressList[0x0000000000000000000000000000000000000000] = true ;\r\n            \r\n            tokenDetails[0x0000000000000000000000000000000000000000].supply = 0;\r\n            tokenDetails[0x0000000000000000000000000000000000000000].dividend = 0;\r\n            \r\n            contractAddressSet.push(0x0000000000000000000000000000000000000000);\r\n        }\r\n        \r\n        // if first investment from user then activate wallet address in system.\r\n        if(walletAddressList[msg.sender] == false){\r\n            walletAddressList[msg.sender] = true;\r\n            walletAddressSet.push(msg.sender);\r\n        }\r\n        \r\n        uint256 collateAmount = purchaseCollate(0x0000000000000000000000000000000000000000, msg.value, _referredBy);\r\n        return collateAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to purchase collateral by sending any ERC-20 Tokens except Ethereum.\r\n     */\r\n    function buy(address contractAddress, uint256 tokenAmount, address _referredBy) public nonReentrant returns(uint256)\r\n    {\r\n        require(startDeposit);\r\n        \r\n        // transfer token to system from user wallet\r\n        require(ERC20(contractAddress).allowance(msg.sender, address(this)) >= tokenAmount);\r\n        require(ERC20(contractAddress).transferFrom(msg.sender, address(this), tokenAmount));\r\n        \r\n        // if this is first deposit transaction for token then activate token struct storage with default initial parameters.\r\n        if(contractAddressList[contractAddress]==false){\r\n            contractAddressList[contractAddress]=true ;\r\n            \r\n            tokenDetails[contractAddress].supply = 0;\r\n            tokenDetails[contractAddress].dividend = 0;\r\n            \r\n            contractAddressSet.push(contractAddress);\r\n        }\r\n        \r\n        // if first investment from user then activate wallet address in system.\r\n        if(walletAddressList[msg.sender] == false){\r\n            walletAddressList[msg.sender] = true;\r\n            walletAddressSet.push(msg.sender);\r\n        }\r\n        \r\n        uint256 collateAmount = purchaseCollate(contractAddress,tokenAmount, _referredBy);\r\n        return collateAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to purchase collateral by sending Ethereum directly to smart contract address.\r\n     */\r\n    fallback() nonReentrant payable external\r\n    {\r\n        require(startDeposit);\r\n        require(msg.value > 0);\r\n        // if this is first deposit transaction for token then activate token struct storage with default initial parameters.\r\n        if(contractAddressList[0x0000000000000000000000000000000000000000] == false){\r\n            contractAddressList[0x0000000000000000000000000000000000000000] = true ;\r\n            \r\n            tokenDetails[0x0000000000000000000000000000000000000000].supply = 0;\r\n            tokenDetails[0x0000000000000000000000000000000000000000].dividend = 0;\r\n            \r\n            contractAddressSet.push(0x0000000000000000000000000000000000000000);\r\n        }\r\n        \r\n        // if first investment from user then activate wallet address in system.\r\n        if(walletAddressList[msg.sender] == false){\r\n            walletAddressList[msg.sender] = true;\r\n            walletAddressSet.push(msg.sender);\r\n        }\r\n        purchaseCollate(0x0000000000000000000000000000000000000000, msg.value, 0x0000000000000000000000000000000000000000);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to convert all dividend to collateral.\r\n     */\r\n    function reinvest(address contractAddress) public nonReentrant\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(contractAddress, false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        balanceDetails[_customerAddress][contractAddress].payOut +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += balanceDetails[_customerAddress][contractAddress].referralBalance;\r\n        \r\n        balanceDetails[_customerAddress][contractAddress].referralBalance = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _collate = purchaseCollate(contractAddress, _dividends, 0x0000000000000000000000000000000000000000);\r\n        \r\n        // fire event\r\n        emit onReinvest(_customerAddress, contractAddress, _dividends, _collate);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to sell collateral and withdraw tokens.\r\n     */\r\n    function sellAndwithdraw(address contractAddress) public nonReentrant\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = balanceDetails[_customerAddress][contractAddress].tokenBalance;\r\n        if(_tokens > 0) sell(contractAddress, _tokens);\r\n    \r\n        withdraw(contractAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev function to withdraw tokens, dividend and referralBalance.\r\n     */\r\n    function withdraw(address contractAddress) public nonReentrant\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(contractAddress, false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        balanceDetails[_customerAddress][contractAddress].payOut +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += balanceDetails[_customerAddress][contractAddress].referralBalance;\r\n        balanceDetails[_customerAddress][contractAddress].referralBalance = 0;\r\n        \r\n        // delivery service\r\n        if (contractAddress == 0x0000000000000000000000000000000000000000){\r\n            payable(address(_customerAddress)).transfer(_dividends);\r\n        }\r\n        else{\r\n            ERC20(contractAddress).transfer(_customerAddress,_dividends);\r\n        }\r\n        \r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, contractAddress, _dividends);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to sell collatral.\r\n     */\r\n    function sell(address contractAddress, uint256 _amountOfCollate) public\r\n    {\r\n      \r\n        address _customerAddress = msg.sender;\r\n       \r\n        require(_amountOfCollate <= balanceDetails[_customerAddress][contractAddress].tokenBalance);\r\n        \r\n        uint256 _collates = _amountOfCollate;\r\n        uint256 _tokens = collateralToToken_(contractAddress, _collates);\r\n        uint256 _dividends = SafeMath.div(_tokens, dividendFee);\r\n        uint256 _taxedToken = SafeMath.sub(_tokens, _dividends);\r\n        \r\n        // burn the sold tokens\r\n        tokenDetails[contractAddress].supply = SafeMath.sub(tokenDetails[contractAddress].supply, _collates);\r\n        balanceDetails[_customerAddress][contractAddress].tokenBalance = SafeMath.sub(balanceDetails[_customerAddress][contractAddress].tokenBalance, _collates);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (tokenDetails[contractAddress].dividend * _collates + (_taxedToken * magnitude));\r\n        balanceDetails[_customerAddress][contractAddress].payOut -= _updatedPayouts;       \r\n        \r\n        // dividing by zero is a bad idea\r\n        if (tokenDetails[contractAddress].supply > 0) {\r\n            // update the amount of dividends per token\r\n            tokenDetails[contractAddress].dividend = SafeMath.add(tokenDetails[contractAddress].dividend, (_dividends * magnitude) / tokenDetails[contractAddress].supply);\r\n        }\r\n        \r\n        // fire event\r\n        emit onSell(_customerAddress, contractAddress, _taxedToken, _collates);\r\n    }\r\n        \r\n    /**\r\n     * @dev function to get current purchase price of single collateral.\r\n     */\r\n    function buyPrice(address contractAddress) public view returns(uint currentBuyPrice) {\r\n        if(tokenDetails[contractAddress].supply == 0){\r\n            return initialPrice + incrementPrice;\r\n        } else {\r\n            uint256 _token = collateralToToken_(contractAddress, 1e18);\r\n            uint256 _dividends = SafeMath.div(_token, dividendFee);\r\n            uint256 _taxedToken = SafeMath.add(_token, _dividends);\r\n            return _taxedToken;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev function to get current sell price of single collateral.\r\n     */\r\n    function sellPrice(address contractAddress) public view returns(uint) {\r\n        if(tokenDetails[contractAddress].supply == 0){\r\n            return initialPrice - incrementPrice;\r\n        } else {\r\n            uint256 _token = collateralToToken_(contractAddress, 1e18);\r\n            uint256 _dividends = SafeMath.div(_token, dividendFee);\r\n            uint256 _taxedToken = SafeMath.sub(_token, _dividends);\r\n            return _taxedToken;\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev function to calculate collateral price based on an amount of incoming token\r\n     * It's an scientific algorithm;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function tokentoCollateral_(address contractAddress, uint amount) internal view returns(uint)\r\n    {\r\n        uint256 _tokenPriceInitial = initialPrice * 1e18;\r\n        uint256 tokenSupply_ = tokenDetails[contractAddress].supply;\r\n        uint tokenPriceIncremental_ = incrementPrice;\r\n        \r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(amount * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to calculate token price based on an amount of incoming collateral\r\n     * It's an scientific algorithm;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function collateralToToken_(address contractAddress, uint256 _tokens) internal view returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = _tokens + 1e18 ;\r\n        uint256 _tokenSupply = tokenDetails[contractAddress].supply + 1e18;\r\n        uint256 tokenPriceInitial_ = initialPrice;\r\n        uint tokenPriceIncremental_ = incrementPrice;\r\n        \r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        \r\n        return _etherReceived;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to calculate amount of collateral received after sending tokens\r\n     */\r\n    function calculateCollateReceived(address contractAddress, uint256 _tokenAmount) public view returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(_tokenAmount, dividendFee);\r\n        uint256 _taxedToken = SafeMath.sub(_tokenAmount, _dividends);\r\n        uint256 _amountOfCollatral = tokentoCollateral_(contractAddress, _taxedToken);\r\n        \r\n        return _amountOfCollatral;\r\n    }\r\n     \r\n    /**\r\n     * @dev function to calculate amount of tokens received after sending collateral\r\n     */\r\n    function calculateTokenReceived(address contractAddress, uint256 _collateToSell) public view returns(uint256)\r\n    {\r\n        require(_collateToSell <= tokenDetails[contractAddress].supply);\r\n        uint256 _token = collateralToToken_(contractAddress, _collateToSell);\r\n        uint256 _dividends = SafeMath.div(_token, dividendFee);\r\n        uint256 _taxedToken = SafeMath.sub(_token, _dividends);\r\n        return _taxedToken;\r\n    }  \r\n    \r\n    /**\r\n     * @dev function to process purchase of collateral and update user balance, dividend\r\n     */\r\n    function purchaseCollate(address contractAddress, uint256 _incomingToken, address _referredBy) internal returns(uint256)\r\n    {\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(_incomingToken, dividendFee);\r\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedToken = SafeMath.sub(_incomingToken, _undividedDividends);\r\n        uint256 _amountOfCollate = tokentoCollateral_(contractAddress,_taxedToken);\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n      \r\n        require(_amountOfCollate > 0 && (SafeMath.add(_amountOfCollate,tokenDetails[contractAddress].supply) > tokenDetails[contractAddress].supply));\r\n        \r\n        // is the user referred by a karmalink?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            \r\n            // no cheating!\r\n            _referredBy != _customerAddress &&\r\n            \r\n            walletAddressList[_referredBy] == true\r\n        ){\r\n            // wealth redistribution\r\n            balanceDetails[_referredBy][contractAddress].referralBalance = SafeMath.add(balanceDetails[_referredBy][contractAddress].referralBalance, _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenDetails[contractAddress].supply > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenDetails[contractAddress].supply = SafeMath.add(tokenDetails[contractAddress].supply, _amountOfCollate);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            tokenDetails[contractAddress].dividend += (_dividends * magnitude / (tokenDetails[contractAddress].supply));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfCollate * (_dividends * magnitude / (tokenDetails[contractAddress].supply))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenDetails[contractAddress].supply = _amountOfCollate;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        balanceDetails[_customerAddress][contractAddress].tokenBalance = SafeMath.add(balanceDetails[_customerAddress][contractAddress].tokenBalance, _amountOfCollate);\r\n        \r\n        int256 _updatedPayouts = (int256) ((tokenDetails[contractAddress].dividend * _amountOfCollate) - _fee);\r\n        balanceDetails[_customerAddress][contractAddress].payOut += _updatedPayouts;\r\n        \r\n        // fire event\r\n        emit onPurchase(_customerAddress, contractAddress, _incomingToken, _amountOfCollate, _referredBy);\r\n        \r\n        return _amountOfCollate;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to get tokens contract hold\r\n     */\r\n    function totalTokenBalance(address contractAddress) public view returns(uint)\r\n    {   \r\n        if (contractAddress== 0x0000000000000000000000000000000000000000){\r\n            return address(this).balance;\r\n        }\r\n        else{\r\n            return ERC20(contractAddress).balanceOf(address(this));\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev function to retrieve the total token supply.\r\n     */\r\n    function totalSupply(address contractAddress) public view returns(uint256)\r\n    {\r\n        return tokenDetails[contractAddress].supply;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens(address contractAddress) public view returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(contractAddress, _customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * @dev function to retrieve the dividends owned by the caller.\r\n      */ \r\n    function myDividends(address contractAddress, bool _includeReferralBonus) public view returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(contractAddress,_customerAddress) + balanceDetails[_customerAddress][contractAddress].referralBalance : dividendsOf(contractAddress, _customerAddress) ;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address contractAddress, address _customerAddress) view public returns(uint256)\r\n    {\r\n        return balanceDetails[_customerAddress][contractAddress].tokenBalance;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address contractAddress, address _customerAddress) view public returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(tokenDetails[contractAddress].dividend * balanceDetails[_customerAddress][contractAddress].tokenBalance) - balanceDetails[_customerAddress][contractAddress].payOut) / magnitude;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev function to return active tokens list in system\r\n     */ \r\n    function tokenList() public view returns (address [] memory){\r\n        return contractAddressSet;\r\n    }\r\n    \r\n    /**\r\n     * @dev function to return active wallets list in system\r\n     */ \r\n    function walletList() public view returns (address [] memory){\r\n        return walletAddressSet;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev function to process upgrade of user balance to new token contract address in case project decide to change ERC-20 token contract\r\n     * This function will be used only when project team sent equivalent new contract in system token without asking for returning old tokens\r\n     * token swap ratio must be same\r\n     * this will protect users from price crash due to token sell for swapping or new token stuck\r\n     * User will be having access of both old and new contract tokens\r\n     */ \r\n    function assignUpgradedTokens(address contractAddress, address newContractAddress) public onlyOwner returns(bool success)\r\n    {\r\n        // validate old contract is already part of system\r\n        require(contractAddressList[contractAddress]=true, \"Contract tokens must be part of system\");\r\n        \r\n        // activate new contractAddress in system\r\n        if(contractAddressList[newContractAddress]==false)\r\n        {\r\n            contractAddressList[newContractAddress]=true ;\r\n            tokenDetails[newContractAddress].supply = 0;\r\n            tokenDetails[newContractAddress].dividend = 0;\r\n            \r\n            contractAddressSet.push(newContractAddress);\r\n        }\r\n        \r\n        for(uint i = 0; i < walletAddressSet.length; i++)\r\n        {\r\n            if (balanceDetails[walletAddressSet[i]][contractAddress].tokenBalance > 0 || balanceDetails[walletAddressSet[i]][contractAddress].payOut > 0)\r\n            {\r\n                // assign new tokens. we are keeping old token as it is and user can withdraw that also\r\n                balanceDetails[walletAddressSet[i]][newContractAddress].tokenBalance = balanceDetails[walletAddressSet[i]][contractAddress].tokenBalance;\r\n                balanceDetails[walletAddressSet[i]][newContractAddress].referralBalance = balanceDetails[walletAddressSet[i]][contractAddress].referralBalance;\r\n                balanceDetails[walletAddressSet[i]][newContractAddress].payOut = balanceDetails[walletAddressSet[i]][contractAddress].payOut;\r\n                \r\n            }\r\n        }\r\n        \r\n        // assign dividend, current price and supply to new contract\r\n        tokenDetails[newContractAddress].supply = tokenDetails[contractAddress].supply;\r\n        tokenDetails[newContractAddress].dividend = tokenDetails[contractAddress].dividend;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * @dev function to startDeposit\r\n     */ \r\n    function startContract() public onlyOwner returns(bool status){\r\n        startDeposit = true;\r\n        return true;\r\n    }\r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev interface to process transfer of ERC20 tokens\r\n */ \r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender,    uint _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint    _value);\r\n}\r\n\r\n/**\r\n * @dev safemath library to avoid mathematical overflow error\r\n */ \r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reInvestTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountToReceiver\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralBurned\",\"type\":\"uint256\"}],\"name\":\"onSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newContractAddress\",\"type\":\"address\"}],\"name\":\"assignUpgradedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBuyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateCollateReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateToSell\",\"type\":\"uint256\"}],\"name\":\"calculateTokenReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfCollate\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"sellAndwithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtherTreasury","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3f61c109ab97dbe83a400ac135a8269739952776a7eb6bf3194f9ae0d9ecc30"}]}