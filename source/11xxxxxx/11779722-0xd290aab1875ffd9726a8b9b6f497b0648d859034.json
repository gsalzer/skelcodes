{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Governor.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Timelock.sol\\\";\\r\\n\\r\\ncontract GovernorAlpha {\\r\\n    /// @notice The name of this contract\\r\\n    string public constant name = \\\"Crt Governor Alpha\\\";\\r\\n\\r\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\r\\n    function quorumVotes() public pure returns (uint) { return 2000e18; } // 10% of CRT\\r\\n\\r\\n    /// @notice The number of votes required in order for a voter to become a proposer\\r\\n    function proposalThreshold() public pure returns (uint) { return 400e18; } // 2% of CRT\\r\\n\\r\\n    /// @notice The maximum number of actions that can be included in a proposal\\r\\n    function proposalMaxOperations() public pure returns (uint) { return 20; } // 10 actions\\r\\n\\r\\n    /// @notice The delay before voting on a proposal may take place, once proposed\\r\\n    function votingDelay() public pure returns (uint) { return 1; } // 1 block\\r\\n\\r\\n    /// @notice The duration of voting on a proposal, in blocks\\r\\n    function votingPeriod() public pure returns (uint) { return 17280; } // ~3 days in blocks (assuming 15s blocks)\\r\\n\\r\\n    /// @notice The address of the Protocol Timelock\\r\\n    Timelock public timelock;\\r\\n\\r\\n    /// @notice The address of the governance token\\r\\n    CrtInterface public crt;\\r\\n\\r\\n    /// @notice The total number of proposals\\r\\n    uint public proposalCount;\\r\\n\\r\\n    struct Proposal {\\r\\n        /// @notice Unique id for looking up a proposal\\r\\n        uint id;\\r\\n\\r\\n        /// @notice Creator of the proposal\\r\\n        address proposer;\\r\\n\\r\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\r\\n        uint eta;\\r\\n\\r\\n        /// @notice the ordered list of target addresses for calls to be made\\r\\n        address[] targets;\\r\\n\\r\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\r\\n        uint[] values;\\r\\n\\r\\n        /// @notice The ordered list of function signatures to be called\\r\\n        string[] signatures;\\r\\n\\r\\n        /// @notice The ordered list of calldata to be passed to each call\\r\\n        bytes[] calldatas;\\r\\n\\r\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\r\\n        uint startBlock;\\r\\n\\r\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\r\\n        uint endBlock;\\r\\n\\r\\n        /// @notice Current number of votes in favor of this proposal\\r\\n        uint forVotes;\\r\\n\\r\\n        /// @notice Current number of votes in opposition to this proposal\\r\\n        uint againstVotes;\\r\\n\\r\\n        /// @notice Flag marking whether the proposal has been canceled\\r\\n        bool canceled;\\r\\n\\r\\n        /// @notice Flag marking whether the proposal has been executed\\r\\n        bool executed;\\r\\n\\r\\n        /// @notice Receipts of ballots for the entire set of voters\\r\\n        mapping (address => Receipt) receipts;\\r\\n    }\\r\\n\\r\\n    /// @notice Ballot receipt record for a voter\\r\\n    struct Receipt {\\r\\n        /// @notice Whether or not a vote has been cast\\r\\n        bool hasVoted;\\r\\n\\r\\n        /// @notice Whether or not the voter supports the proposal\\r\\n        bool support;\\r\\n\\r\\n        /// @notice The number of votes the voter had, which were cast\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice Possible states that a proposal may be in\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice The official record of all proposals ever proposed\\r\\n    mapping (uint => Proposal) public proposals;\\r\\n\\r\\n    /// @notice The latest proposal for each proposer\\r\\n    mapping (address => uint) public latestProposalIds;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\r\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\r\\n\\r\\n    /// @notice An event emitted when a new proposal is created\\r\\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\\r\\n\\r\\n    /// @notice An event emitted when a vote has been cast on a proposal\\r\\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been canceled\\r\\n    event ProposalCanceled(uint id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\r\\n    event ProposalQueued(uint id, uint eta);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\r\\n    event ProposalExecuted(uint id);\\r\\n\\r\\n    constructor(address crt_) public {\\r\\n        timelock = new Timelock(address(this), 2 days);\\r\\n        crt = CrtInterface(crt_);\\r\\n    }\\r\\n\\r\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\\r\\n        require(crt.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(), \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\");\\r\\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\");\\r\\n        require(targets.length != 0, \\\"GovernorAlpha::propose: must provide actions\\\");\\r\\n        require(targets.length <= proposalMaxOperations(), \\\"GovernorAlpha::propose: too many actions\\\");\\r\\n\\r\\n        uint latestProposalId = latestProposalIds[msg.sender];\\r\\n        if (latestProposalId != 0) {\\r\\n          ProposalState proposersLatestProposalState = state(latestProposalId);\\r\\n          require(proposersLatestProposalState != ProposalState.Active, \\\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\\\");\\r\\n          require(proposersLatestProposalState != ProposalState.Pending, \\\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\\\");\\r\\n        }\\r\\n\\r\\n        uint startBlock = add256(block.number, votingDelay());\\r\\n        uint endBlock = add256(startBlock, votingPeriod());\\r\\n\\r\\n        proposalCount++;\\r\\n        Proposal memory newProposal = Proposal({\\r\\n            id: proposalCount,\\r\\n            proposer: msg.sender,\\r\\n            eta: 0,\\r\\n            targets: targets,\\r\\n            values: values,\\r\\n            signatures: signatures,\\r\\n            calldatas: calldatas,\\r\\n            startBlock: startBlock,\\r\\n            endBlock: endBlock,\\r\\n            forVotes: 0,\\r\\n            againstVotes: 0,\\r\\n            canceled: false,\\r\\n            executed: false\\r\\n        });\\r\\n\\r\\n        proposals[newProposal.id] = newProposal;\\r\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\r\\n\\r\\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\\r\\n        return newProposal.id;\\r\\n    }\\r\\n\\r\\n    function queue(uint proposalId) public {\\r\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        uint eta = add256(block.timestamp, timelock.delay());\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\r\\n        }\\r\\n        proposal.eta = eta;\\r\\n        emit ProposalQueued(proposalId, eta);\\r\\n    }\\r\\n\\r\\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\\r\\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\");\\r\\n        timelock.queueTransaction(target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    function execute(uint proposalId) public {\\r\\n        require(state(proposalId) == ProposalState.Queued, \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.executed = true;\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            timelock.executeTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\r\\n        }\\r\\n        emit ProposalExecuted(proposalId);\\r\\n    }\\r\\n\\r\\n    function cancel(uint proposalId) public {\\r\\n        ProposalState state = state(proposalId);\\r\\n        require(state != ProposalState.Executed, \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(crt.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(), \\\"GovernorAlpha::cancel: proposer above threshold\\\");\\r\\n\\r\\n        proposal.canceled = true;\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\r\\n        }\\r\\n\\r\\n        emit ProposalCanceled(proposalId);\\r\\n    }\\r\\n\\r\\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\\r\\n        Proposal storage p = proposals[proposalId];\\r\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\r\\n    }\\r\\n\\r\\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\\r\\n        return proposals[proposalId].receipts[voter];\\r\\n    }\\r\\n\\r\\n    function state(uint proposalId) public view returns (ProposalState) {\\r\\n        require(proposalCount >= proposalId && proposalId > 0, \\\"GovernorAlpha::state: invalid proposal id\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        if (proposal.canceled) {\\r\\n            return ProposalState.Canceled;\\r\\n        } else if (block.number <= proposal.startBlock) {\\r\\n            return ProposalState.Pending;\\r\\n        } else if (block.number <= proposal.endBlock) {\\r\\n            return ProposalState.Active;\\r\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\\r\\n            return ProposalState.Defeated;\\r\\n        } else if (proposal.eta == 0) {\\r\\n            return ProposalState.Succeeded;\\r\\n        } else if (proposal.executed) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\r\\n            return ProposalState.Expired;\\r\\n        } else {\\r\\n            return ProposalState.Queued;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function castVote(uint proposalId, bool support) public {\\r\\n        return _castVote(msg.sender, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\\r\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\r\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"GovernorAlpha::castVoteBySig: invalid signature\\\");\\r\\n        return _castVote(signatory, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function _castVote(address voter, uint proposalId, bool support) internal {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"GovernorAlpha::_castVote: voting is closed\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        Receipt storage receipt = proposal.receipts[voter];\\r\\n        require(receipt.hasVoted == false, \\\"GovernorAlpha::_castVote: voter already voted\\\");\\r\\n        uint96 votes = crt.getPriorVotes(voter, proposal.startBlock);\\r\\n\\r\\n        if (support) {\\r\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\r\\n        } else {\\r\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\r\\n        }\\r\\n\\r\\n        receipt.hasVoted = true;\\r\\n        receipt.support = support;\\r\\n        receipt.votes = votes;\\r\\n\\r\\n        emit VoteCast(voter, proposalId, support, votes);\\r\\n    }\\r\\n\\r\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, \\\"addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        require(b <= a, \\\"subtraction underflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint) {\\r\\n        uint chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface CrtInterface {\\r\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\r\\n}\"\r\n    },\r\n    \"contracts/Timelock.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract Timelock {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\r\\n    event NewDelay(uint indexed newDelay);\\r\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\r\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\r\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\r\\n\\r\\n    uint public constant GRACE_PERIOD = 14 days;\\r\\n    uint public constant MINIMUM_DELAY = 2 days;\\r\\n    uint public constant MAXIMUM_DELAY = 30 days;\\r\\n\\r\\n    address public admin;\\r\\n    address public pendingAdmin;\\r\\n    uint public delay;\\r\\n\\r\\n    mapping (bytes32 => bool) public queuedTransactions;\\r\\n\\r\\n\\r\\n    constructor(address admin_, uint delay_) public {\\r\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::constructor: Delay must exceed minimum delay.\\\");\\r\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\r\\n\\r\\n        admin = admin_;\\r\\n        delay = delay_;\\r\\n    }\\r\\n\\r\\n    function() external payable { }\\r\\n\\r\\n    function setDelay(uint delay_) public {\\r\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\r\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\r\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\r\\n        delay = delay_;\\r\\n\\r\\n        emit NewDelay(delay);\\r\\n    }\\r\\n\\r\\n    function acceptAdmin() public {\\r\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\r\\n        admin = msg.sender;\\r\\n        pendingAdmin = address(0);\\r\\n\\r\\n        emit NewAdmin(admin);\\r\\n    }\\r\\n\\r\\n    function setPendingAdmin(address pendingAdmin_) public {\\r\\n        require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\r\\n        pendingAdmin = pendingAdmin_;\\r\\n\\r\\n        emit NewPendingAdmin(pendingAdmin);\\r\\n    }\\r\\n\\r\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\r\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\r\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\r\\n\\r\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n        queuedTransactions[txHash] = true;\\r\\n\\r\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\r\\n        return txHash;\\r\\n    }\\r\\n\\r\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\r\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\r\\n\\r\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n        queuedTransactions[txHash] = false;\\r\\n\\r\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes memory) {\\r\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\r\\n\\r\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\r\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\r\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\r\\n\\r\\n        queuedTransactions[txHash] = false;\\r\\n\\r\\n        bytes memory callData;\\r\\n\\r\\n        if (bytes(signature).length == 0) {\\r\\n            callData = data;\\r\\n        } else {\\r\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\r\\n        }\\r\\n\\r\\n        // solium-disable-next-line security/no-call-value\\r\\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\\r\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\r\\n\\r\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function getBlockTimestamp() internal view returns (uint) {\\r\\n        // solium-disable-next-line security/no-block-members\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\r\\n\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot underflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, errorMessage);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers.\\r\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crt_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crt\",\"outputs\":[{\"internalType\":\"contract CrtInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract Timelock\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"GovernorAlpha","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ba0ef82a023de4223fd44b97f497ba2a89f28ac3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}