{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.7.6;\r\n// SPDX-License-Identifier: MIT\r\n\r\n// On mainnet at: 0xaBe194DE48045DC40fbc767F66ccBceB6D022030\r\n\r\n/**\r\nCopyright (c) 2020 Austin Williams\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n**/\r\n\r\ninterface IESDS {\r\n    function redeemCoupons(uint256 _epoch, uint256 _couponAmount) external;\r\n    function transferCoupons(address _sender, address _recipient, uint256 _epoch, uint256 _amount) external;\r\n    function balanceOfCouponUnderlying(address _account, uint256 _epoch) external view returns (uint256);\r\n    function epoch() external view returns (uint256);\r\n    function advance() external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// @notice Lets anybody trustlessly redeem coupons on anyone else's behalf for a fee.\r\n//    Requires that the coupon holder has previously approved this contract via the ESDS `approveCoupons` function.\r\n// @dev Bots should scan for the `SetOffer` event emitted by the this contract to find out which \r\n//    users have made offers. They should be sure to verify that the users have \"approved\" this contract.\r\n// @dev This contract's API should be backwards compatible with CouponClipper V1 and V2.\r\ncontract CouponClipperV3 {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 constant private ESD = IERC20(0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723);\r\n    IESDS constant private ESDS = IESDS(0x443D2f2755DB5942601fa062Cc248aAA153313D3);\r\n    \r\n    uint256 constant public MAX_HOUSE_RATE_BPS = 1500; // 15% Max house take from bot proceeds\r\n    \r\n    address public house; // collector of house fee\r\n    uint256 public houseRate; // Defaults to 1000 bps (10%) of proceeds. Can be changed via the `changeHouseRate` function.\r\n    \r\n    event SetOffer(address indexed user, uint256 offer);\r\n    event SetHouseRate(uint256 fee);\r\n    \r\n    // The basis points offered by coupon holders to have their coupons redeemed -- default is 0 bps (0%).\r\n    // E.g., offers[_user] = 500 indicates that _user will pay 500 basis points (5%) to have their coupons redeemed for them.\r\n    mapping(address => uint256) private offers;\r\n    \r\n    constructor() {\r\n        house = 0x7Fb471734271b732FbEEd4B6073F401983a406e1;\r\n        houseRate = 1000; // Defaults to 1000 bps (10%) of proceeds.\r\n    }\r\n\r\n    // @notice Gets the number of basis points the _user is offering the bots.\r\n    // @param _user The account whose offer we're looking up.\r\n    // @return The number of basis points the account is offering to have their coupons redeemed.\r\n    function getOffer(address _user) public view returns (uint256) {\r\n        return offers[_user];\r\n    }\r\n\r\n    // @notice Allows msg.sender to change the number of basis points they are offering.\r\n    // @dev A user's offer cannot be *decreased* during the 15 minutes before the epoch advance (frontrun protection)\r\n    // @param _newOffer The number of basis points msg.sender wants to offer to have their coupons redeemed.\r\n    function setOffer(uint256 _newOffer) external {\r\n        require(_newOffer <= 10_000, \"Offer exceeds 100%.\");\r\n        uint256 oldOffer = offers[msg.sender];\r\n        if (_newOffer < oldOffer) {\r\n            uint256 nextEpoch = ESDS.epoch() + 1;\r\n            uint256 nextEpochStartTime = getEpochStartTime(nextEpoch);\r\n            uint256 timeUntilNextEpoch = nextEpochStartTime.sub(block.timestamp);\r\n            require(timeUntilNextEpoch > 15 minutes, \"You cannot reduce your offer within 15 minutes of the next epoch\");\r\n        }\r\n        \r\n        offers[msg.sender] = _newOffer;\r\n        \r\n        emit SetOffer(msg.sender, _newOffer);\r\n    }\r\n\r\n    // @notice Internal logic used to redeem coupons on the coupon holder's bahalf\r\n    // @param _user Address of the user holding the coupons (and who has approved this contract)\r\n    // @param _epoch The epoch in which the _user purchased the coupons\r\n    // @param _amount The number of coupons to redeem (18 decimals), typically balanceOfCouponUnderlying\r\n    function _redeem(address _user, uint256 _epoch, uint256 _amount) internal {\r\n        \r\n        // pull user's coupons into this contract (requires that the user has approved this contract)\r\n        ESDS.transferCoupons(_user, address(this), _epoch, _amount); // @audit-info : reverts on failure\r\n        \r\n        // redeem the coupons for ESD\r\n        uint256 balanceOfCouponUnderlying = ESDS.balanceOfCouponUnderlying(address(this), _epoch); // @audit-info handles unexpected underlying balance\r\n        ESDS.redeemCoupons(_epoch, balanceOfCouponUnderlying); // @audit-info : reverts on failure\r\n        \r\n        // pay the fees\r\n        uint256 esdRevenue = ESD.balanceOf(address(this));\r\n        uint256 totalFeeRate = getOffer(_user);\r\n        uint256 totalFee = esdRevenue.mul(totalFeeRate).div(10_000);\r\n        uint256 houseFee = totalFee.mul(houseRate).div(10_000);\r\n        uint256 botFee = totalFee.sub(houseFee);\r\n        ESD.transfer(house, houseFee); // @audit-info : reverts on failure\r\n        ESD.transfer(msg.sender, botFee); // @audit-info : reverts on failure\r\n        \r\n        // send the ESD to the user\r\n        ESD.transfer(_user, esdRevenue.sub(totalFee)); // @audit-info : reverts on failure\r\n    }\r\n    \r\n    // @notice Allows anyone to redeem coupons for ESD on the coupon-holder's bahalf\r\n    // @dev Backwards compatible with CouponClipper V1 and V2.\r\n    function redeem(address _user, uint256 _epoch, uint256 _amount) external {\r\n        _redeem(_user, _epoch, _amount);\r\n    }\r\n    \r\n    // @notice Returns the timestamp at which the _targetEpoch starts\r\n    function getEpochStartTime(uint256 _targetEpoch) public pure returns (uint256) {\r\n        return _targetEpoch.sub(106).mul(28800).add(1602201600);\r\n    }\r\n    \r\n    // @notice Allows house address to change the house address\r\n    function changeHouseAddress(address _newAddress) external {\r\n        require(msg.sender == house);\r\n        house = _newAddress;\r\n    }\r\n    \r\n    // @notice Allows house address to change the house rate\r\n    // @dev House rate can never be larger than MAX_HOUSE_RATE_BPS\r\n    // @dev House rate cannot *increase* fewer than 15 minutes before the next epoch (frontrun protection)\r\n    function changeHouseRate(uint256 _newHouseRate) external {\r\n        require(msg.sender == house, \"only house can update fee\");\r\n        require(_newHouseRate <= MAX_HOUSE_RATE_BPS, \"fee too high\");\r\n        if (_newHouseRate > houseRate) {\r\n            uint256 nextEpoch = ESDS.epoch() + 1;\r\n            uint256 nextEpochStartTime = getEpochStartTime(nextEpoch);\r\n            uint256 timeUntilNextEpoch = nextEpochStartTime.sub(block.timestamp);\r\n            require(timeUntilNextEpoch > 15 minutes, \"Cannot increase house rate within 15 minutes of the next epoch\");\r\n        }\r\n        houseRate = _newHouseRate;\r\n        emit SetHouseRate(_newHouseRate);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetHouseRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"SetOffer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_HOUSE_RATE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newHouseRate\",\"type\":\"uint256\"}],\"name\":\"changeHouseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetEpoch\",\"type\":\"uint256\"}],\"name\":\"getEpochStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOffer\",\"type\":\"uint256\"}],\"name\":\"setOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CouponClipperV3","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6081b8ffee6ac865724c379ca64864d4e82baa686d9ebcbba113b35108c7f7b4"}]}