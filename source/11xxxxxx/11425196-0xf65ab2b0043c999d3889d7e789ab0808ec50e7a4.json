{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/shared/interfaces/IFunding.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title Grants Spec Abstract Contract.\r\n * @dev Grant request, funding, and management.\r\n * @author @NoahMarconi\r\n */\r\ninterface IFunding {\r\n\r\n    /*----------  Events  ----------*/\r\n\r\n    /**\r\n     * @dev Funding target reached event.\r\n     */\r\n    event LogFundingComplete();\r\n\r\n    /**\r\n     * @dev Grant received funding.\r\n     * @param donor Address funding the grant.\r\n     * @param value Amount in WEI or ATOMIC_UNITS funded.\r\n     */\r\n    event LogFunding(address indexed donor, uint256 value);\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        external\r\n        view\r\n        returns(uint256);\r\n\r\n\r\n}\r\n\r\n// File: contracts/shared/storage/Funding.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title Total Funding.\r\n * @dev Handles state for tracking contract total amount funded.\r\n * @author @NoahMarconi @ameensol @JFickel @ArnaudBrousseau\r\n */\r\nabstract contract Funding is IFunding {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /*----------  Globals  ----------*/\r\n\r\n    /* solhint-disable max-line-length */\r\n    uint256 private totalFunding;                 // Cumulative funding donated by donors.\r\n    /* solhint-enable max-line-length */\r\n\r\n\r\n    /*----------  Shared Getters  ----------*/\r\n\r\n    /**\r\n     * @dev Cumulative funding donated by donors.\r\n     */\r\n    function getTotalFunding()\r\n        public\r\n        override\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return totalFunding;\r\n    }\r\n\r\n\r\n    /*----------  Shared Setters  ----------*/\r\n\r\n    /**\r\n     * @dev Increase cumulative funding donated by donors.\r\n     * @param value amount to increase total funding by.\r\n     */\r\n    function increaseTotalFundingBy(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = totalFunding.add(value);\r\n    }\r\n\r\n    function setTotalFunding(uint256 value)\r\n        internal\r\n    {\r\n        totalFunding = value;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/EtherVesting.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EtherVesting\r\n * @dev An ether holder contract that can release its ether balance gradually like a\r\n * typical vesting scheme, with a vesting period. Optionally revocable by the\r\n * owner.\r\n * NOTE: anyone can send ETH to the contract but only the owner or the beneficiary can receive ETH from this contract.\r\n */\r\ncontract EtherVesting is Ownable, ReentrancyGuard, Funding {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with\r\n    // a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n\r\n    event LogReleased(uint256 amount);\r\n    event LogRevoked(bool releaseSuccessful);\r\n\r\n    // beneficiary of Ether after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    bool private _revocable;\r\n\r\n    uint256 private _released;\r\n    bool private _revoked;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of Ether to the\r\n     * beneficiary, gradually in a linear fashion until start + duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested ether is transferred\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the ether will vest\r\n     * @param revocable whether the vesting is revocable or not\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 duration, bool revocable) {\r\n        require(beneficiary != address(0), \"EtherVesting: beneficiary is the zero address\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(duration > 0, \"EtherVesting: duration is 0\");\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) > block.timestamp, \"EtherVesting: final time is before current time\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _revocable = revocable;\r\n        _duration = duration;\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the ether.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the ether vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the ether vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return true if the vesting is revocable.\r\n     */\r\n    function revocable() public view returns (bool) {\r\n        return _revocable;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the ether released.\r\n     */\r\n    function released() public view returns (uint256) {\r\n        return _released;\r\n    }\r\n\r\n    /**\r\n     * @return true if the ether is revoked.\r\n     */\r\n    function revoked() public view returns (bool) {\r\n        return _revoked;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested ether to beneficiary.\r\n     */\r\n    function release()\r\n        external\r\n        nonReentrant\r\n    {\r\n        uint256 unreleased = _releasableAmount();\r\n\r\n        require(unreleased > 0, \"EtherVesting: no ether are due\");\r\n\r\n        _released = _released.add(unreleased);\r\n\r\n\r\n        (bool success, ) = _beneficiary.call{ value: unreleased}(\"\");\r\n        require(\r\n            success,\r\n            \"EtherVesting::Transfer Error. Unable to send unreleased to _beneficiary.\"\r\n        );\r\n\r\n        emit LogReleased(unreleased);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Ether already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     */\r\n    function revoke()\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(_revocable, \"EtherVesting: cannot revoke\");\r\n        require(!_revoked, \"EtherVesting: ether already revoked\");\r\n\r\n\r\n        uint256 unreleased = _releasableAmount();\r\n\r\n        (bool releaseSuccessful, ) = _beneficiary.call{ value: unreleased }(\"\");\r\n        if (releaseSuccessful) {\r\n            _released = _released.add(unreleased);\r\n            emit LogReleased(unreleased);\r\n        }\r\n\r\n        uint256 refund = address(this).balance;\r\n\r\n        _revoked = true;\r\n\r\n        if (refund > 0) {\r\n            (bool success, ) = owner().call{ value: refund}(\"\");\r\n            require(\r\n                success,\r\n                \"EtherVesting::Transfer Error. Unable to send refund to owner.\"\r\n            );\r\n        }\r\n\r\n        emit LogRevoked(releaseSuccessful);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n     */\r\n    function _releasableAmount() private view returns (uint256) {\r\n        return _vestedAmount().sub(_released);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     */\r\n    function _vestedAmount() private view returns (uint256) {\r\n        if (block.timestamp <= _start) return 0;\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 totalBalance = currentBalance.add(_released);\r\n\r\n        if (block.timestamp >= _start.add(_duration) || _revoked) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Receive ether transfers\r\n     */\r\n    receive()\r\n        external\r\n        payable\r\n        nonReentrant\r\n    {\r\n\r\n        require(\r\n            msg.value > 0,\r\n            \"fallback::Invalid Value. msg.value must be greater than 0.\"\r\n        );\r\n\r\n        increaseTotalFundingBy(msg.value);\r\n\r\n        emit LogFunding(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\n// File: contracts/shared/factory/EtherVestingFactory.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title EtherVestingFactory\r\n * @dev Factory Contract to create and track new vesting contracts.\r\n */\r\ncontract EtherVestingFactory {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /*----------  Globals  ----------*/\r\n    uint256 public id = 0;\r\n    mapping(uint256 => address) internal _vestingContracts;  // Vesting contracts mapped by GUID.\r\n\r\n\r\n    /*----------  Events  ----------*/\r\n\r\n    event LogEtherVestingCreated(uint256 indexed id, address vestingContract);\r\n\r\n\r\n    /*----------  Public Methods  ----------*/\r\n\r\n    function create(address beneficiary, uint256 start, uint256 duration, bool revocable)\r\n        public\r\n        payable\r\n        returns (address)\r\n    {\r\n        address vestingAddress;\r\n\r\n        EtherVesting vesting = new EtherVesting(\r\n            beneficiary,\r\n            start,\r\n            duration,\r\n            revocable\r\n        );\r\n\r\n        vestingAddress = address(vesting);\r\n\r\n        // Store grant info.\r\n        uint256 vestingId = id;\r\n        _vestingContracts[vestingId] = vestingAddress;\r\n\r\n        // Increment id counter.\r\n        id = id.add(1);\r\n\r\n        emit LogEtherVestingCreated(vestingId, vestingAddress);\r\n\r\n        vesting.transferOwnership(msg.sender);\r\n\r\n        (bool success, ) = vestingAddress.call{ value: msg.value}(\"\");\r\n        require(\r\n            success,\r\n            \"EtherVestingFactory: Error. Unable to send msg.value to vestingAddress\"\r\n        );\r\n\r\n        return vestingAddress;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Vesting contract address getter.\r\n     * @param _id Sequential identifier for vesting contract.\r\n     * @return vesting contract address.\r\n     */\r\n    function getVestingAddress(uint256 _id)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return _vestingContracts[_id];\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingContract\",\"type\":\"address\"}],\"name\":\"LogEtherVestingCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVestingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EtherVestingFactory","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bcfcda4a93740f5a9714721e978cf2d513919df31d5789779be37426a6362d6b"}]}