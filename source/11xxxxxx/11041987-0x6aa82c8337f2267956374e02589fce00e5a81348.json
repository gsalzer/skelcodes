{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @title: SafeMath\r\n * @dev: Helper contract functions to arithmatic operations safely.\r\n */\r\ncontract SafeMath {\r\n    function Sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function Add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function Mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @title: Token\r\n * @dev: Interface contract for ERC20 tokens\r\n */\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n}\r\n\r\n/*\r\n * @title: Staking\r\n */\r\ncontract LockAndEarn is SafeMath {\r\n    // KAI_ADDRESS: KAI ERC20 contract address\r\n    // msg.sender: owner && operator\r\n    constructor(uint256 _interest, uint256 _lockDays, uint256 _lockStartTime, address[] memory _initAddress) public {\r\n        owner = msg.sender;\r\n        interest = _interest;\r\n        lockDays = _lockDays;\r\n        lockStartTime = _lockStartTime;\r\n        isEnded = false;\r\n        for (uint i=0; i < _initAddress.length; i++) {\r\n            isAddrWhitelisted[_initAddress[i]] = true;\r\n        }\r\n    }\r\n\r\n    address constant public KAI_ADDRESS = 0xD9Ec3ff1f8be459Bb9369b4E79e9Ebcf7141C093;\r\n    uint256 constant public HARD_CAP = 50000000000000000000000000; // 50000000 KAI\r\n\r\n    address public owner;\r\n    uint256 public interest;\r\n    uint256 public bonus;\r\n    uint256 public lockDays;\r\n    uint256 public currentCap;\r\n    uint256 public lockStartTime;\r\n    bool public isEnded;\r\n\r\n    mapping(address => uint256) public addrBalance;\r\n    mapping (address => bool) public isAddrWhitelisted;\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // deposit bonus to pay interest\r\n    function depositBonus(uint256 amount) public onlyOwner {\r\n        require(Token(KAI_ADDRESS).transferFrom(msg.sender, address(this), amount));\r\n        \r\n        bonus = Add(amount, bonus);\r\n    }\r\n\r\n    // withdraw bonus to owner account\r\n    function withdrawBonus(uint256 amount) public onlyOwner {\r\n        require(Token(KAI_ADDRESS).transfer(msg.sender, amount));\r\n        \r\n        bonus = Sub(bonus, amount);\r\n    }\r\n\r\n    // Deposit ERC20's for saving\r\n    function depositToken(uint256 amount) public {\r\n        require(isEnded != true, \"Deposit ended\");\r\n        require(lockStartTime < now, 'Event has not been started yet');\r\n        require(isAddrWhitelisted[msg.sender] == true, \"Address is not whitelisted.\");\r\n        require(Add(currentCap, amount) <= HARD_CAP, 'Exceed limit total cap');\r\n        require(Token(KAI_ADDRESS).transferFrom(msg.sender, address(this), amount));\r\n        \r\n        currentCap = Add(currentCap, amount);\r\n        addrBalance[msg.sender] = Add(addrBalance[msg.sender], amount);\r\n    }\r\n\r\n    // Withdraw ERC20's to personal address\r\n    function withdrawToken() public {\r\n        require(lockStartTime + lockDays * 1 days < now, \"Locking period\");\r\n        uint256 amount = addrBalance[msg.sender];\r\n        require(amount > 0, \"withdraw only once\");\r\n        \r\n        uint256 _interest = Mul(amount, interest) / 10000;\r\n\r\n        bonus = Sub(bonus, _interest);\r\n        amount = Add(amount, _interest);\r\n        require(Token(KAI_ADDRESS).transfer(msg.sender, amount));\r\n        addrBalance[msg.sender] = 0;\r\n    }\r\n    \r\n    // owner sets global variables the campaign ends\r\n    function setEndedDeposit() public onlyOwner {\r\n        isEnded = true;\r\n    }\r\n\r\n    // Below two emergency functions will be never used in normal situations.\r\n    // These function is only prepared for emergency case such as smart contract hacking Vulnerability or smart contract abolishment\r\n    // Withdrawn fund by these function cannot belong to any operators or owners.\r\n    // Withdrawn fund should be distributed to individual accounts having original ownership of withdrawn fund.\r\n\r\n    function emergencyWithdrawalETH(uint256 amount) public onlyOwner {\r\n        require(msg.sender.send(amount));\r\n    }\r\n    \r\n    function emergencyWithdrawalToken(uint256 amount) public onlyOwner {\r\n        Token(KAI_ADDRESS).transfer(msg.sender, amount);\r\n    }\r\n    \r\n    function whitelistAddress(address addAddress) public onlyOwner {\r\n        isAddrWhitelisted[addAddress] = true;\r\n    }\r\n    \r\n    function removeWhiteListAddress(address removeAddress) public onlyOwner {\r\n        isAddrWhitelisted[removeAddress] = false;\r\n    }\r\n    \r\n    function getMyBalance() public view returns (uint256) {\r\n        return addrBalance[msg.sender];\r\n    }\r\n    \r\n    function getTimestamp() public view returns (uint256) {\r\n        return now;\r\n    }\r\n    \r\n    // @notice Will receive any eth sent to the contract\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addAddress\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KAI_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawalToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddrWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setEndedDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"removeAddress\",\"type\":\"address\"}],\"name\":\"removeWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_interest\",\"type\":\"uint256\"},{\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"name\":\"_lockStartTime\",\"type\":\"uint256\"},{\"name\":\"_initAddress\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LockAndEarn","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000177000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000005f848b900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000700000000000000000000000026bddac580a6afe29e0db3013f760bbb327003ac0000000000000000000000006539d1ab30a055b4810e3914c5d004b6c796e7420000000000000000000000007f6e9a4d35f6e73fa69b3a3c4661cdd08a226e5600000000000000000000000074f8adcd09488cf88e71d48309a6b705185aaeb5000000000000000000000000b00364a28b171b36e68ab7a7c90234c3070142920000000000000000000000008f1b352e2f6a9950467472b1f91bcd036cef319000000000000000000000000019b491e80631c15e9b2578e226b2c068209ebeab","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f2376cfd4eb3e1707bbfab3525154b0eacdb9e9e4bd50fa98a8418a9f1b5c623"}]}