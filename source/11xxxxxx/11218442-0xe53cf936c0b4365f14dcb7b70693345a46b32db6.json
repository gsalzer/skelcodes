{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _governance;\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _governance = msgSender;\r\n        emit GovernanceTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function governance() public view returns (address) {\r\n        return _governance;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_governance == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferGovernance(address newOwner) internal virtual onlyGovernance {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit GovernanceTransferred(_governance, newOwner);\r\n        _governance = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/StabilizeStrategyPickle.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\n// This is a strategy that utilizes UNI ETH/USDT token in the Pickle.Finance protocol\r\n// It deposits the LP token for pJar tokens\r\n// It then deposits the pJar tokens into the pickle farm to earn pickle tokens\r\n// It then uses the earned pickle tokens and stakes it into pickle staking to earn WETH\r\n// It then collects the earn WETH and splits it among the depositors, the STBZ staking pool and the STBZ treasury\r\n// The strategy doesn't sell any tokens via Uniswap so it shouldn't affect Pickle adversely\r\n// The pickle earned via the farm are constantly being staked to earn more WETH for the users\r\n// When a user withdraws, he/she receives a proportion of the total shares in LP token, Pickle and WETH\r\n\r\n// Used to convert weth to eth upon withdraw\r\ninterface WrappedEther {\r\n    function withdraw(uint) external; \r\n}\r\n\r\ninterface PickleJar {\r\n    function getRatio() external view returns (uint256);\r\n    function deposit(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function withdrawAll() external;\r\n}\r\n\r\ninterface PickleFarm {\r\n    function deposit(uint256, uint256) external;\r\n    function withdraw(uint256, uint256) external;\r\n    function userInfo(uint256, address) external view returns (uint256, uint256);\r\n}\r\n\r\ninterface PickleStake {\r\n    function stake(uint256) external;\r\n    function withdraw(uint256) external;\r\n    function exit() external;\r\n    function earned(address) external view returns (uint256);\r\n    function getReward() external;\r\n}\r\n\r\ninterface StabilizeStakingPool {\r\n    function notifyRewardAmount(uint256) external;\r\n}\r\n\r\ncontract StabilizeStrategyPickleV1 is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    \r\n    address public treasuryAddress; // Address of the treasury\r\n    address public stakingAddress; // Address to the STBZ staking pool\r\n    address public zsTokenAddress; // The address of the controlling zs-Token\r\n    \r\n    uint256 constant divisionFactor = 100000;\r\n    uint256 public percentLPDepositor = 50000; // 1000 = 1%, LP depositors earn 50% of all WETH produced, 100% of everything else\r\n    uint256 public percentStakers = 50000; // 50% of non LP WETH goes to stakers, can be changed\r\n    \r\n    // Reward tokens tokens list\r\n    address[] rewardTokenList;\r\n    \r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 depositTime; // The time the user made the last deposit, token share is calculated from this\r\n    }\r\n    \r\n    mapping(address => UserInfo) private userInfo;\r\n    uint256 public weightedAverageDepositTime = 0; // Average time to enter\r\n    \r\n    // Strategy specific variables\r\n    uint256 private _totalBalancePTokens = 0; // The total amount of pTokens currently staked/stored in contract\r\n    uint256 private _stakedPickle = 0; // The amount of pickles being staked\r\n    address constant wethAddress = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address constant pickleAddress = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\r\n    address constant pJarAddress = address(0x09FC573c502037B149ba87782ACC81cF093EC6ef); // Pickle jar address / pToken address\r\n    address constant pFarmAddress = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d); // Pickle farming contract aka MasterChef\r\n    uint256 constant pTokenID = 12; // The location of the pToken in the pickle staking farm\r\n    address constant pickleStakeAddress = address(0xa17a8883dA1aBd57c690DF9Ebf58fC194eDAb66F); // Pickle staking address\r\n    uint256 constant minETH = 1000000000; // 0.000000001 ETH / 1 Gwei\r\n\r\n    constructor(\r\n        address _treasury,\r\n        address _staking,\r\n        address _zsToken\r\n    ) public {\r\n        treasuryAddress = _treasury;\r\n        stakingAddress = _staking;\r\n        zsTokenAddress = _zsToken;\r\n        setupRewardTokens();\r\n    }\r\n\r\n    // Initialization functions\r\n    \r\n    function setupRewardTokens() internal {\r\n        // Reward tokens\r\n        rewardTokenList.push(address(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852)); // Uniswap LP token for ETH/USDT\r\n        rewardTokenList.push(pickleAddress); // Picke token\r\n        rewardTokenList.push(wethAddress); // Wrapped Ether token\r\n    }\r\n    \r\n    // Modifier\r\n    modifier onlyZSToken() {\r\n        require(zsTokenAddress == _msgSender(), \"Call not sent from the zs-Token\");\r\n        _;\r\n    }\r\n    \r\n    // Read functions\r\n    \r\n    function rewardTokensCount() external view returns (uint256) {\r\n        return rewardTokenList.length;\r\n    }\r\n    \r\n    function rewardTokenAddress(uint256 _pos) external view returns (address) {\r\n        require(_pos < rewardTokenList.length,\"No token at that position\");\r\n        return rewardTokenList[_pos];\r\n    }\r\n    \r\n    function balance() external view returns (uint256) {\r\n        return _totalBalancePTokens;\r\n    }\r\n    \r\n    function pricePerToken() external view returns (uint256) {\r\n        return PickleJar(pJarAddress).getRatio();\r\n    }\r\n    \r\n    // Write functions\r\n    \r\n    function enter() external onlyZSToken {\r\n        deposit(_msgSender());\r\n    }\r\n    \r\n    function exit() external onlyZSToken {\r\n        // The ZS token vault is removing all tokens from this strategy\r\n        withdraw(_msgSender(),1,1);\r\n    }\r\n    \r\n    function withdraw(address payable _depositor, uint256 _share, uint256 _total) public onlyZSToken returns (uint256) {\r\n        require(_totalBalancePTokens > 0, \"There are no LP tokens in this strategy\");\r\n        // When a user withdraws, we need to pull the user's share out from all the contracts and split its tokens\r\n        checkWETHAndPay(); // First check if we have unclaimed WETH and claim it\r\n        \r\n        // Next we need to calculate our percent of pTokens\r\n        bool _takeAll = false;\r\n        if(_share == _total){\r\n            _takeAll = true; // Remove everything to this user\r\n        }\r\n        \r\n        uint256 pTokenAmount = _totalBalancePTokens;\r\n        if(_takeAll == false){\r\n            pTokenAmount = _totalBalancePTokens.mul(_share).div(_total);\r\n        }else{\r\n            (pTokenAmount, ) = PickleFarm(pFarmAddress).userInfo(pTokenID, address(this)); // Get the total amount at the farm\r\n            _totalBalancePTokens = pTokenAmount;\r\n        }\r\n        \r\n        // Lower the amount of pTokens\r\n         _totalBalancePTokens = _totalBalancePTokens.sub(pTokenAmount);\r\n\r\n         // Now withdraw the pLP from Pickle Farm\r\n        PickleFarm(pFarmAddress).withdraw(pTokenID, pTokenAmount); // This function also returns Pickle earned\r\n        \r\n        // Now exchange the pJar token for the LP token\r\n        IERC20 _lpToken = IERC20(rewardTokenList[0]);\r\n        uint256 lpWithdrawAmount = 0;\r\n        if(_takeAll == false){\r\n            uint256 _before = _lpToken.balanceOf(address(this));\r\n            PickleJar(pJarAddress).withdraw(pTokenAmount);\r\n            lpWithdrawAmount = _lpToken.balanceOf(address(this)).sub(_before);\r\n        }else{\r\n            PickleJar(pJarAddress).withdrawAll();\r\n            lpWithdrawAmount = _lpToken.balanceOf(address(this)); // Get all LP tokens here\r\n        }\r\n        require(lpWithdrawAmount > 0,\"Failed to withdraw from the Pickle Jar\");\r\n\r\n        // Transfer the accessory tokens\r\n        transferAccessoryTokens(_depositor, _share, _total);\r\n        \r\n        // Now we withdraw the LP to the user\r\n        _lpToken.safeTransfer(_depositor, lpWithdrawAmount);\r\n        return lpWithdrawAmount;\r\n    }\r\n    \r\n    function transferAccessoryTokens(address payable _depositor, uint256 _share, uint256 _total) internal {\r\n        bool _takeAll = false;\r\n        if(_share == _total){\r\n            _takeAll = true;\r\n        }\r\n        if(_takeAll == false){\r\n            // We need to now calculate the percent of accessory tokens going to this depositor\r\n            // It is based on how long the depositor is in the contract and their share\r\n            \r\n            uint256 exitTime = now;\r\n            uint256 enterTime = userInfo[_depositor].depositTime;\r\n            if(userInfo[_depositor].depositTime == 0){ // User has never deposited into the contract at this address\r\n                enterTime = now; // No access to pickle or weth reward\r\n            }\r\n            uint256 numerator = exitTime.sub(enterTime);\r\n            uint256 denominator = exitTime.sub(weightedAverageDepositTime);\r\n            uint256 timeShare = 0;\r\n            if(numerator > denominator){\r\n                // This user has been in the contract longer than the average, allow up to 100% of tokens based on share\r\n                timeShare = divisionFactor; // 100%\r\n            }else{\r\n                // User has been in less than or equal to average, limit token amount based on that\r\n                if(denominator > 0){\r\n                    timeShare = numerator.mul(divisionFactor).div(denominator);\r\n                }else{\r\n                    timeShare = 0;\r\n                }\r\n            }\r\n            \r\n            // Now withdraw the tokens based on the timeshare and share\r\n            IERC20 _token = IERC20(pickleAddress);\r\n            uint256 _tokenBalance = _token.balanceOf(address(this)); // Get balance of pickle in contract not staked\r\n            uint256 tokenWithdrawAmount = _tokenBalance.add(_stakedPickle).mul(_share).div(_total); // First based on our share %\r\n            tokenWithdrawAmount = tokenWithdrawAmount.mul(timeShare).div(divisionFactor); // Then on time in contract\r\n            if(tokenWithdrawAmount > _tokenBalance){\r\n                // Must remove some from the staking pool to fill this amount\r\n                uint256 _removeAmount = tokenWithdrawAmount.sub(_tokenBalance);\r\n                _stakedPickle = _stakedPickle.sub(_removeAmount);\r\n                PickleStake(pickleStakeAddress).withdraw(_removeAmount);\r\n            }\r\n            // Send the Pickle to the user\r\n            if(tokenWithdrawAmount > 0){\r\n                _token.safeTransfer(_depositor, tokenWithdrawAmount);\r\n            }\r\n            \r\n            // Now do the same for WETH\r\n            _token = IERC20(wethAddress);\r\n            _tokenBalance = _token.balanceOf(address(this)); // Weth is just stored in this contract until removed\r\n            tokenWithdrawAmount = _tokenBalance.mul(_share).div(_total); // First based on our share %\r\n            tokenWithdrawAmount = tokenWithdrawAmount.mul(timeShare).div(divisionFactor); // Then on time in contract\r\n            // Convert and send ETH to user\r\n            if(tokenWithdrawAmount > 0){\r\n                WrappedEther(wethAddress).withdraw(tokenWithdrawAmount); // This will send ETH to this contract and burn WETH\r\n                // Now send the Ether to user\r\n                _depositor.transfer(tokenWithdrawAmount); // Transfer has low gas allocation, preventing re-entrancy\r\n            }\r\n        }else{\r\n            // Just pull all pickle and all WETH\r\n            if(_stakedPickle > 0){\r\n                PickleStake(pickleStakeAddress).exit(); // Will pull all pickle and all WETH (should be near empty)\r\n                _stakedPickle = 0;\r\n            }\r\n            IERC20 _token = IERC20(pickleAddress);\r\n            if( _token.balanceOf(address(this)) > 0){\r\n                _token.safeTransfer(_depositor, _token.balanceOf(address(this)));\r\n            }\r\n            _token = IERC20(wethAddress);\r\n            uint256 wethBalance = _token.balanceOf(address(this));\r\n            if(wethBalance > 0){\r\n                if(_depositor != zsTokenAddress){\r\n                    WrappedEther(wethAddress).withdraw(wethBalance); // This will send ETH to this contract and burn WETH\r\n                    _depositor.transfer(wethBalance);\r\n                }else{\r\n                    // Keep it as ERC20\r\n                    _token.safeTransfer(_depositor, wethBalance);\r\n                }                \r\n            }\r\n        }        \r\n    }\r\n\r\n    receive() external payable {\r\n        // We need an anonymous fallback function to accept ether into this contract\r\n    }\r\n    \r\n    function deposit(address _depositor) public onlyZSToken {\r\n        // Only the ZS token can call the function\r\n        \r\n        // Get the balance of the reward token sent here\r\n        IERC20 _token = IERC20(rewardTokenList[0]);\r\n        uint256 _lpBalance = _token.balanceOf(address(this));\r\n        \r\n        // Now deposit it into the pickle jar\r\n        _token.safeApprove(pJarAddress ,_lpBalance); // Approve for transfer\r\n        PickleJar(pJarAddress).deposit(_lpBalance); // Send the LP, get the pLP\r\n        IERC20 _pToken = IERC20(pJarAddress);\r\n        uint256 _pBalance = _pToken.balanceOf(address(this));\r\n        require(_pBalance > 0,\"Failed to get pTokens from the Pickle Jar\");\r\n        \r\n        // Calculate the new weighted average\r\n        if(_depositor != zsTokenAddress){\r\n            // Calculate the deposit time\r\n            userInfo[_depositor].depositTime = now;\r\n            \r\n            weightedAverageDepositTime = weightedAverageDepositTime.mul(_totalBalancePTokens)\r\n                                        .div(_pBalance.add(_totalBalancePTokens));\r\n            \r\n            weightedAverageDepositTime = userInfo[_depositor].depositTime.mul(_pBalance)\r\n                                        .div(_pBalance.add(_totalBalancePTokens))\r\n                                        .add(weightedAverageDepositTime);\r\n        }\r\n        \r\n        // Now deposit these tokens into the farm contract\r\n        _pToken.safeApprove(pFarmAddress, _pBalance); // Approve for transfer\r\n        PickleFarm(pFarmAddress).deposit(pTokenID, _pBalance); // This function also returns Pickle earned\r\n        _totalBalancePTokens += _pBalance; // Add to our pTokens accounted for\r\n        \r\n        // Now check to see if we should claim and stake pickle\r\n        checkPickleAndStake();\r\n        \r\n        // Now check to see if we should claim and payout WETH\r\n        checkWETHAndPay();\r\n    }\r\n    \r\n    function checkPickleAndStake() internal {\r\n        // Check if we have pickle in this contract then stake if we do\r\n        IERC20 _pickle = IERC20(pickleAddress);\r\n        uint256 _balance = _pickle.balanceOf(address(this));\r\n        if(_balance > 0){\r\n            // We have pickle, let's stake it\r\n            _pickle.safeApprove(pickleStakeAddress, _balance);\r\n            PickleStake(pickleStakeAddress).stake(_balance);\r\n            _stakedPickle += _balance;\r\n        }\r\n    }\r\n    \r\n    function checkWETHAndPay() internal {\r\n        // Check if we have earned WETH from the staked pickle\r\n        uint256 _balance = PickleStake(pickleStakeAddress).earned(address(this)); // This will return the WETH earned balance\r\n        if(_balance > minETH){\r\n            // Claim the reward and split it between the depositors, treasury and stakers\r\n            IERC20 _token = IERC20(wethAddress);\r\n            uint256 _before = _token.balanceOf(address(this));\r\n            PickleStake(pickleStakeAddress).getReward(); // Pull the WETH from the staking address\r\n            uint256 amount = _token.balanceOf(address(this)).sub(_before);\r\n            require(amount > 0,\"Pickle staking should have returned some WETH\");\r\n            uint256 depositorsAmount = amount.mul(percentLPDepositor).div(divisionFactor); // This amount remains in contract\r\n            uint256 holdersAmount = amount.sub(depositorsAmount);\r\n            uint256 stakersAmount = holdersAmount.mul(percentStakers).div(divisionFactor);\r\n            uint256 treasuryAmount = holdersAmount.sub(stakersAmount);\r\n            if(treasuryAmount > 0){\r\n                _token.safeTransfer(treasuryAddress, treasuryAmount);\r\n            }\r\n            if(stakersAmount > 0){\r\n                _token.safeTransfer(stakingAddress, stakersAmount);\r\n                StabilizeStakingPool(stakingAddress).notifyRewardAmount(stakersAmount);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    // Governance functions\r\n    // Timelock variables\r\n    \r\n    uint256 private _timelockStart; // The start of the timelock to change governance variables\r\n    uint256 private _timelockType; // The function that needs to be changed\r\n    uint256 constant _timelockDuration = 86400; // Timelock is 24 hours\r\n    \r\n    // Reusable timelock variables\r\n    address private _timelock_address;\r\n    uint256 private _timelock_data_1;\r\n    \r\n    modifier timelockConditionsMet(uint256 _type) {\r\n        require(_timelockType == _type, \"Timelock not acquired for this function\");\r\n        _timelockType = 0; // Reset the type once the timelock is used\r\n        if(_totalBalancePTokens > 0){ // Timelock only applies when balance exists\r\n            require(now >= _timelockStart + _timelockDuration, \"Timelock time not met\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    // Change the owner of the token contract\r\n    // --------------------\r\n    function startGovernanceChange(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 1;\r\n        _timelock_address = _address;       \r\n    }\r\n    \r\n    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\r\n        transferGovernance(_timelock_address);\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the treasury address\r\n    // --------------------\r\n    function startChangeTreasury(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 2;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeTreasury() external onlyGovernance timelockConditionsMet(2) {\r\n        treasuryAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the percent going to depositors for WETH\r\n    // --------------------\r\n    function startChangeDepositorPercent(uint256 _percent) external onlyGovernance {\r\n        require(_percent <= 100000,\"Percent cannot be greater than 100%\");\r\n        _timelockStart = now;\r\n        _timelockType = 3;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeDepositorPercent() external onlyGovernance timelockConditionsMet(3) {\r\n        percentLPDepositor = _timelock_data_1;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the staking address\r\n    // --------------------\r\n    function startChangeStakingPool(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 4;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeStakingPool() external onlyGovernance timelockConditionsMet(4) {\r\n        stakingAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the zsToken address\r\n    // --------------------\r\n    function startChangeZSToken(address _address) external onlyGovernance {\r\n        _timelockStart = now;\r\n        _timelockType = 5;\r\n        _timelock_address = _address;\r\n    }\r\n    \r\n    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(5) {\r\n        zsTokenAddress = _timelock_address;\r\n    }\r\n    // --------------------\r\n    \r\n    // Change the percent going to stakers for WETH\r\n    // --------------------\r\n    function startChangeStakersPercent(uint256 _percent) external onlyGovernance {\r\n        require(_percent <= 100000,\"Percent cannot be greater than 100%\");\r\n        _timelockStart = now;\r\n        _timelockType = 6;\r\n        _timelock_data_1 = _percent;\r\n    }\r\n    \r\n    function finishChangeStakersPercent() external onlyGovernance timelockConditionsMet(6) {\r\n        percentStakers = _timelock_data_1;\r\n    }\r\n    // --------------------\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeDepositorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStakersPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentLPDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeDepositorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"startChangeStakersPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startChangeZSToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"startGovernanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedAverageDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zsTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StabilizeStrategyPickleV1","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000042cbe17335ef8d52f8d1e0a261ea2e78e829c56e0000000000000000000000008c17be13e034f7fa2a6496bc83b6010be6305204000000000000000000000000b81cb6016c50e674dfa7e4c41bb0c5194fe05ca1","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f74222f321a9da59f43480a82ac1e40eb2687dcfcfdffd782cb05c55b0f51b18"}]}