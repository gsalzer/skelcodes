{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/spec_interfaces/IElections.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Elections contract interface\r\ninterface IElections {\r\n\t\r\n\t// Election state change events\r\n\tevent StakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 effectiveStake);\r\n\tevent GuardianStatusUpdated(address indexed guardian, bool readyToSync, bool readyForCommittee);\r\n\r\n\t// Vote out / Vote unready\r\n\tevent GuardianVotedUnready(address indexed guardian);\r\n\tevent VoteUnreadyCasted(address indexed voter, address indexed subject, uint256 expiration);\r\n\tevent GuardianVotedOut(address indexed guardian);\r\n\tevent VoteOutCasted(address indexed voter, address indexed subject);\r\n\r\n\t/*\r\n\t * External functions\r\n\t */\r\n\r\n    /// Notifies that the guardian is ready to sync with other nodes\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev ready to sync state is not managed in the contract that only emits an event\r\n    /// @dev readyToSync clears the readyForCommittee state\r\n\tfunction readyToSync() external;\r\n\r\n    /// Notifies that the guardian is ready to join the committee\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev a qualified guardian calling readyForCommittee is added to the committee\r\n\tfunction readyForCommittee() external;\r\n\r\n    /// Checks if a guardian is qualified to join the committee\r\n    /// @dev when true, calling readyForCommittee() will result in adding the guardian to the committee\r\n    /// @dev called periodically by guardians to check if they are qualified to join the committee\r\n    /// @param guardian is the guardian to check\r\n    /// @return canJoin indicating that the guardian can join the current committee\r\n\tfunction canJoinCommittee(address guardian) external view returns (bool);\r\n\r\n    /// Returns an address effective stake\r\n    /// The effective stake is derived from a guardian delegate stake and selfs stake  \r\n    /// @return effectiveStake is the guardian's effective stake\r\n\tfunction getEffectiveStake(address guardian) external view returns (uint effectiveStake);\r\n\r\n    /// Returns the current committee along with the guardians' Orbs address and IP\r\n    /// @return committee is a list of the committee members' guardian addresses\r\n    /// @return weights is a list of the committee members' weight (effective stake)\r\n    /// @return orbsAddrs is a list of the committee members' orbs address\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return ips is a list of the committee members' ip\r\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n\r\n\t// Vote-unready\r\n\r\n    /// Casts an unready vote on a subject guardian\r\n    /// @dev Called by a guardian as part of the automatic vote-unready flow\r\n    /// @dev The transaction may be sent from the guardian or orbs address.\r\n    /// @param subject is the subject guardian to vote out\r\n    /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.\r\n\tfunction voteUnready(address subject, uint voteExpiration) external;\r\n\r\n    /// Returns the current vote unready vote for a voter and a subject pair\r\n    /// @param voter is the voting guardian address\r\n    /// @param subject is the subject guardian address\r\n    /// @return valid indicates whether there is a valid vote\r\n    /// @return expiration returns the votes expiration time\r\n\tfunction getVoteUnreadyVote(address voter, address subject) external view returns (bool valid, uint256 expiration);\r\n\r\n    /// Returns the current vote-unready status of a subject guardian.\r\n    /// @dev the committee and certification data is used to check the certified and committee threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return committee is a list of the current committee members\r\n    /// @return weights is a list of the current committee members weight\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return votes is a list of bool indicating the members that votes the subject unready\r\n    /// @return subjectInCommittee indicates that the subject is in the committee\r\n    /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee\r\n\tfunction getVoteUnreadyStatus(address subject) external view returns (\r\n\t\taddress[] memory committee,\r\n\t\tuint256[] memory weights,\r\n\t\tbool[] memory certification,\r\n\t\tbool[] memory votes,\r\n\t\tbool subjectInCommittee,\r\n\t\tbool subjectInCertifiedCommittee\r\n\t);\r\n\r\n\t// Vote-out\r\n\r\n    /// Casts a voteOut vote by the sender to the given address\r\n    /// @dev the transaction is sent from the guardian address\r\n    /// @param subject is the subject guardian address\r\n\tfunction voteOut(address subject) external;\r\n\r\n    /// Returns the subject address the addr has voted-out against\r\n    /// @param voter is the voting guardian address\r\n    /// @return subject is the subject the voter has voted out\r\n\tfunction getVoteOutVote(address voter) external view returns (address);\r\n\r\n    /// Returns the governance voteOut status of a guardian.\r\n    /// @dev A guardian is voted out if votedStake / totalDelegatedStake (in percent mille) > threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return votedOut indicates whether the subject was voted out\r\n    /// @return votedStake is the total stake voting against the subject\r\n    /// @return totalDelegatedStake is the total delegated stake\r\n\tfunction getVoteOutStatus(address subject) external view returns (bool votedOut, uint votedStake, uint totalDelegatedStake);\r\n\r\n\t/*\r\n\t * Notification functions from other PoS contracts\r\n\t */\r\n\r\n    /// Notifies a delegated stake change event\r\n    /// @dev Called by: delegation contract\r\n    /// @param delegate is the delegate to update\r\n    /// @param selfDelegatedStake is the delegate self stake (0 if not self-delegating)\r\n    /// @param delegatedStake is the delegate delegated stake (0 if not self-delegating)\r\n    /// @param totalDelegatedStake is the total delegated stake\r\n\tfunction delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationsContract onlyWhenActive */;\r\n\r\n    /// Notifies a new guardian was unregistered\r\n    /// @dev Called by: guardian registration contract\r\n    /// @dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee\r\n    /// @param guardian is the address of the guardian that unregistered\r\n\tfunction guardianUnregistered(address guardian) external /* onlyGuardiansRegistrationContract */;\r\n\r\n    /// Notifies on a guardian certification change\r\n    /// @dev Called by: guardian registration contract\r\n    /// @param guardian is the address of the guardian to update\r\n    /// @param isCertified indicates whether the guardian is certified\r\n\tfunction guardianCertificationChanged(address guardian, bool isCertified) external /* onlyCertificationContract */;\r\n\r\n\r\n\t/*\r\n     * Governance functions\r\n\t */\r\n\r\n\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteOutPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteUnreadyPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\r\n\r\n    /// Sets the minimum self stake requirement for the effective stake\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \r\n\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the minimum self-stake required for the effective stake\r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille \r\n\tfunction getMinSelfStakePercentMille() external view returns (uint32);\r\n\r\n    /// Sets the vote-out threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteOutPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteOutPercentMilleThreshold(uint32 voteOutPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-out threshold\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteOutPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Sets the vote-unready threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteUnreadyPercentMilleThreshold(uint32 voteUnreadyPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-unready threshold\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteUnreadyPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Returns the contract's settings \r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getSettings() external view returns (\r\n\t\tuint32 minSelfStakePercentMille,\r\n\t\tuint32 voteUnreadyPercentMilleThreshold,\r\n\t\tuint32 voteOutPercentMilleThreshold\r\n\t);\r\n\r\n    /// Initializes the ready for committee notification for the committee guardians\r\n    /// @dev governance function called only by the initialization admin during migration \r\n    /// @dev identical behaviour as if each guardian sent readyForCommittee() \r\n    /// @param guardians a list of guardians addresses to update\r\n\tfunction initReadyForCommittee(address[] calldata guardians) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IDelegations.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Delegations contract interface\r\ninterface IDelegations /* is IStakeChangeNotifier */ {\r\n\r\n    // Delegation state change events\r\n\tevent DelegatedStakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, address indexed delegator, uint256 delegatorContributedStake);\r\n\r\n    // Function calls\r\n\tevent Delegated(address indexed from, address indexed to);\r\n\r\n\t/*\r\n     * External functions\r\n     */\r\n\r\n    /// Delegate your stake\r\n    /// @dev updates the election contract on the changes in the delegated stake\r\n    /// @dev updates the rewards contract on the upcoming change in the delegator's delegation state\r\n    /// @param to is the address to delegate to\r\n\tfunction delegate(address to) external /* onlyWhenActive */;\r\n\r\n    /// Refresh the address stake for delegation power based on the staking contract\r\n    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\r\n    /// @dev refreshStake re-syncs the stake data with the staking contract\r\n    /// @param addr is the address to refresh its stake\r\n\tfunction refreshStake(address addr) external /* onlyWhenActive */;\r\n\r\n    /// Refresh the addresses stake for delegation power based on the staking contract\r\n    /// @dev Batched version of refreshStake\r\n    /// @dev Disabled stake change update notifications from the staking contract may create mismatches\r\n    /// @dev refreshStakeBatch re-syncs the stake data with the staking contract\r\n    /// @param addrs is the list of addresses to refresh their stake\r\n\tfunction refreshStakeBatch(address[] calldata addrs) external /* onlyWhenActive */;\r\n\r\n    /// Returns the delegate address of the given address\r\n    /// @param addr is the address to query\r\n    /// @return delegation is the address the addr delegated to\r\n\tfunction getDelegation(address addr) external view returns (address);\r\n\r\n    /// Returns a delegator info\r\n    /// @param addr is the address to query\r\n    /// @return delegation is the address the addr delegated to\r\n    /// @return delegatorStake is the stake of the delegator as reflected in the delegation contract\r\n\tfunction getDelegationInfo(address addr) external view returns (address delegation, uint256 delegatorStake);\r\n\t\r\n    /// Returns the delegated stake of an addr \r\n    /// @dev an address that is not self delegating has a 0 delegated stake\r\n    /// @param addr is the address to query\r\n    /// @return delegatedStake is the address delegated stake\r\n\tfunction getDelegatedStake(address addr) external view returns (uint256);\r\n\r\n    /// Returns the total delegated stake\r\n    /// @dev delegatedStake - the total stake delegated to an address that is self delegating\r\n    /// @dev the delegated stake of a non self-delegated address is 0\r\n    /// @return totalDelegatedStake is the total delegatedStake of all the addresses\r\n\tfunction getTotalDelegatedStake() external view returns (uint256) ;\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tevent DelegationsImported(address[] from, address indexed to);\r\n\r\n\tevent DelegationInitialized(address indexed from, address indexed to);\r\n\r\n    /// Imports delegations during initial migration\r\n    /// @dev initialization function called only by the initializationManager\r\n    /// @dev Does not update the Rewards or Election contracts\r\n    /// @dev assumes deactivated Rewards\r\n    /// @param from is a list of delegator addresses\r\n    /// @param to is the address the delegators delegate to\r\n\tfunction importDelegations(address[] calldata from, address to) external /* onlyMigrationManager onlyDuringDelegationImport */;\r\n\r\n    /// Initializes the delegation of an address during initial migration \r\n    /// @dev initialization function called only by the initializationManager\r\n    /// @dev behaves identically to a delegate transaction sent by the delegator\r\n    /// @param from is the delegator addresses\r\n    /// @param to is the delegator delegates to\r\n\tfunction initDelegation(address from, address to) external /* onlyInitializationAdmin */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IGuardiansRegistration.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Guardian registration contract interface\r\ninterface IGuardiansRegistration {\r\n\tevent GuardianRegistered(address indexed guardian);\r\n\tevent GuardianUnregistered(address indexed guardian);\r\n\tevent GuardianDataUpdated(address indexed guardian, bool isRegistered, bytes4 ip, address orbsAddr, string name, string website, uint256 registrationTime);\r\n\tevent GuardianMetadataChanged(address indexed guardian, string key, string newValue, string oldValue);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// Registers a new guardian\r\n    /// @dev called using the guardian's address that holds the guardian self-stake and used for delegation\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external;\r\n\r\n    /// Updates a registered guardian data\r\n    /// @dev may be called only by a registered guardian\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external;\r\n\r\n    /// Updates a registered guardian ip address\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction updateGuardianIp(bytes4 ip) external /* onlyWhenActive */;\r\n\r\n    /// Updates a guardian's metadata property\r\n    /// @dev called using the guardian's address\r\n    /// @dev any key may be updated to be used by Orbs platform and tools\r\n    /// @param key is the name of the property to update\r\n    /// @param value is the value of the property to update in a string format\r\n    function setMetadata(string calldata key, string calldata value) external;\r\n\r\n    /// Returns a guardian's metadata property\r\n    /// @dev a property that wasn't set returns an empty string\r\n    /// @param guardian is the guardian to query\r\n    /// @param key is the name of the metadata property to query\r\n    /// @return value is the value of the queried property in a string format\r\n    function getMetadata(address guardian, string calldata key) external view returns (string memory);\r\n\r\n    /// Unregisters a guardian\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev unregistering does not clear the guardian's metadata properties\r\n\tfunction unregisterGuardian() external;\r\n\r\n    /// Returns a guardian's data\r\n    /// @param guardian is the guardian to query\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string\r\n    /// @param registrationTime is the timestamp of the guardian's registration\r\n    /// @param lastUpdateTime is the timestamp of the guardian's last update\r\n\tfunction getGuardianData(address guardian) external view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, uint registrationTime, uint lastUpdateTime);\r\n\r\n    /// Returns the Orbs addresses of a list of guardians\r\n    /// @dev an unregistered guardian returns address(0) Orbs address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @return orbsAddrs is a list of the guardians' Orbs addresses \r\n\tfunction getGuardiansOrbsAddress(address[] calldata guardianAddrs) external view returns (address[] memory orbsAddrs);\r\n\r\n    /// Returns a guardian's ip\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardian is the guardian to query\r\n    /// @return ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction getGuardianIp(address guardian) external view returns (bytes4 ip);\r\n\r\n    /// Returns the ip of a list of guardians\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @param ips is a list of the guardians' node ipv4 addresses as a 32b numbers\r\n\tfunction getGuardianIps(address[] calldata guardianAddrs) external view returns (bytes4[] memory ips);\r\n\r\n    /// Checks if a guardian is registered\r\n    /// @param guardian is the guardian to query\r\n    /// @return registered is a bool indicating a guardian address is registered\r\n\tfunction isRegistered(address guardian) external view returns (bool);\r\n\r\n    /// Translates a list guardians Orbs addresses to guardian addresses\r\n    /// @dev an Orbs address that does not correspond to any registered guardian returns address(0)\r\n    /// @param orbsAddrs is a list of the guardians' Orbs addresses to query\r\n    /// @return guardianAddrs is a list of guardians' addresses that matches the Orbs addresses\r\n\tfunction getGuardianAddresses(address[] calldata orbsAddrs) external view returns (address[] memory guardianAddrs);\r\n\r\n    /// Resolves the guardian address for a guardian, given a Guardian/Orbs address\r\n    /// @dev revert if the address does not correspond to a registered guardian address or Orbs address\r\n    /// @dev designed to be used for contracts calls, validating a registered guardian\r\n    /// @dev should be used with caution when called by tools as the call may revert\r\n    /// @dev in case of a conflict matching both guardian and Orbs address, the Guardian address takes precedence\r\n    /// @param guardianOrOrbsAddress is the address to query representing a guardian address or Orbs address\r\n    /// @return guardianAddress is the guardian address that matches the queried address\r\n\tfunction resolveGuardianAddress(address guardianOrOrbsAddress) external view returns (address guardianAddress);\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n    /// Migrates a list of guardians from a previous guardians registration contract\r\n    /// @dev governance function called only by the initialization admin\r\n    /// @dev reads the migrated guardians data by calling getGuardianData in the previous contract\r\n    /// @dev imports also the guardians' registration time and last update\r\n    /// @dev emits a GuardianDataUpdated for each guardian to allow tracking by tools\r\n    /// @param guardiansToMigrate is a list of guardians' addresses to migrate\r\n    /// @param previousContract is the previous registration contract address\r\n\tfunction migrateGuardians(address[] calldata guardiansToMigrate, IGuardiansRegistration previousContract) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICommittee.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Committee contract interface\r\ninterface ICommittee {\r\n\tevent CommitteeChange(address indexed addr, uint256 weight, bool certification, bool inCommittee);\r\n\tevent CommitteeSnapshot(address[] addrs, uint256[] weights, bool[] certification);\r\n\r\n\t// No external functions\r\n\r\n\t/*\r\n     * External functions\r\n     */\r\n\r\n    /// Notifies a weight change of a member\r\n    /// @dev Called only by: Elections contract\r\n    /// @param addr is the committee member address\r\n    /// @param weight is the updated weight of the committee member\r\n\tfunction memberWeightChange(address addr, uint256 weight) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n    /// Notifies a change in the certification of a member\r\n    /// @dev Called only by: Elections contract\r\n    /// @param addr is the committee member address\r\n    /// @param isCertified is the updated certification state of the member\r\n\tfunction memberCertificationChange(address addr, bool isCertified) external /* onlyElectionsContract onlyWhenActive */;\r\n\r\n    /// Notifies a member removal for example due to voteOut or voteUnready\r\n    /// @dev Called only by: Elections contract\r\n    /// @param memberRemoved is the removed committee member address\r\n    /// @return memberRemoved indicates whether the member was removed from the committee\r\n    /// @return removedMemberWeight indicates the removed member weight\r\n    /// @return removedMemberCertified indicates whether the member was in the certified committee\r\n\tfunction removeMember(address addr) external returns (bool memberRemoved, uint removedMemberWeight, bool removedMemberCertified)/* onlyElectionContract */;\r\n\r\n    /// Notifies a new member applicable for committee (due to registration, unbanning, certification change)\r\n    /// The new member will be added only if it is qualified to join the committee \r\n    /// @dev Called only by: Elections contract\r\n    /// @param addr is the added committee member address\r\n    /// @param weight is the added member weight\r\n    /// @param isCertified is the added member certification state\r\n    /// @return memberAdded bool indicates whether the member was added\r\n\tfunction addMember(address addr, uint256 weight, bool isCertified) external returns (bool memberAdded)  /* onlyElectionsContract */;\r\n\r\n    /// Checks if addMember() would add a the member to the committee (qualified to join)\r\n    /// @param addr is the candidate committee member address\r\n    /// @param weight is the candidate committee member weight\r\n    /// @return wouldAddMember bool indicates whether the member will be added\r\n\tfunction checkAddMember(address addr, uint256 weight) external view returns (bool wouldAddMember);\r\n\r\n    /// Returns the committee members and their weights\r\n    /// @return addrs is the committee members list\r\n    /// @return weights is an array of uint, indicating committee members list weight\r\n    /// @return certification is an array of bool, indicating the committee members certification status\r\n\tfunction getCommittee() external view returns (address[] memory addrs, uint256[] memory weights, bool[] memory certification);\r\n\r\n    /// Returns the currently appointed committee data\r\n    /// @return generalCommitteeSize is the number of members in the committee\r\n    /// @return certifiedCommitteeSize is the number of certified members in the committee\r\n    /// @return totalWeight is the total effective stake (weight) of the committee\r\n\tfunction getCommitteeStats() external view returns (uint generalCommitteeSize, uint certifiedCommitteeSize, uint totalWeight);\r\n\r\n    /// Returns a committee member data\r\n    /// @param addr is the committee member address\r\n    /// @return inCommittee indicates whether the queried address is a member in the committee\r\n    /// @return weight is the committee member weight\r\n    /// @return isCertified indicates whether the committee member is certified\r\n    /// @return totalCommitteeWeight is the total weight of the committee.\r\n\tfunction getMemberInfo(address addr) external view returns (bool inCommittee, uint weight, bool isCertified, uint totalCommitteeWeight);\r\n\r\n    /// Emits a CommitteeSnapshot events with current committee info\r\n    /// @dev a CommitteeSnapshot is useful on contract migration or to remove the need to track past events.\r\n\tfunction emitCommitteeSnapshot() external;\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n\tevent MaxCommitteeSizeChanged(uint8 newValue, uint8 oldValue);\r\n\r\n    /// Sets the maximum number of committee members\r\n    /// @dev governance function called only by the functional manager\r\n    /// @dev when reducing the number of members, the bottom ones are removed from the committee\r\n    /// @param _maxCommitteeSize is the maximum number of committee members \r\n\tfunction setMaxCommitteeSize(uint8 _maxCommitteeSize) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the maximum number of committee members\r\n    /// @return maxCommitteeSize is the maximum number of committee members \r\n\tfunction getMaxCommitteeSize() external view returns (uint8);\r\n\t\r\n    /// Imports the committee members from a previous committee contract during migration\r\n    /// @dev initialization function called only by the initializationManager\r\n    /// @dev does not update the reward contract to avoid incorrect notifications \r\n    /// @param previousCommitteeContract is the address of the previous committee contract\r\n\tfunction importMembers(ICommittee previousCommitteeContract) external /* onlyInitializationAdmin */;\r\n}\r\n\r\n// File: contracts/spec_interfaces/ICertification.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Certification contract interface\r\ninterface ICertification /* is Ownable */ {\r\n\tevent GuardianCertificationUpdate(address indexed guardian, bool isCertified);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// Returns the certification status of a guardian\r\n    /// @param guardian is the guardian to query\r\n\tfunction isGuardianCertified(address guardian) external view returns (bool isCertified);\r\n\r\n    /// Sets the guardian certification status\r\n    /// @dev governance function called only by the certification manager\r\n    /// @param guardian is the guardian to update\r\n    /// @param isCertified bool indication whether the guardian is certified\r\n\tfunction setGuardianCertification(address guardian, bool isCertified) external /* onlyCertificationManager */ ;\r\n}\r\n\r\n// File: contracts/spec_interfaces/IManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title managed contract interface, used by the contracts registry to notify the contract on updates\r\ninterface IManagedContract /* is ILockable, IContractRegistryAccessor, Initializable */ {\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() external;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Contract registry contract interface\r\n/// @dev The contract registry holds Orbs PoS contracts and managers lists\r\n/// @dev The contract registry updates the managed contracts on changes in the contract list\r\n/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \r\n/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \r\n/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\r\n\tevent ManagerChanged(string role, address newManager);\r\n\tevent ContractRegistryUpdated(address newContractRegistry);\r\n\r\n\t/*\r\n\t* External functions\r\n\t*/\r\n\r\n    /// Updates the contracts address and emits a corresponding event\r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @param addr is the contract updated address\r\n    /// @param managedContract indicates whether the contract is managed by the registry and notified on changes\r\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Returns the current address of the given contracts\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @return addr is the contract updated address\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n\r\n    /// Returns the list of contract addresses managed by the registry\r\n    /// @dev Managed contracts are updated on changes in the registry contracts addresses \r\n    /// @return addrs is the list of managed contracts\r\n\tfunction getManagedContracts() external view returns (address[] memory);\r\n\r\n    /// Locks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @dev When set all onlyWhenActive functions will revert\r\n\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Unlocks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\r\n\t\r\n    /// Updates a manager address and emits a corresponding event\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev the managers list is a flexible list of role to the manager's address\r\n    /// @param role is the managers' role name, for example \"functionalManager\"\r\n    /// @param manager is the manager updated address\r\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\r\n\r\n    /// Returns the current address of the given manager\r\n    /// @param role is the manager name, used to identify it\r\n    /// @return addr is the manager updated address\r\n\tfunction getManager(string calldata role) external view returns (address);\r\n\r\n    /// Sets a new contract registry to migrate to\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev updates the registry address record in all the managed contracts\r\n    /// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\r\n    /// @param newRegistry is the new registry contract \r\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the previous contract registry address \r\n    /// @dev used when the setting the contract as a new registry to assure a valid registry\r\n    /// @return previousContractRegistry is the previous contract registry\r\n\tfunction getPreviousContractRegistry() external view returns (address);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IContractRegistryAccessor {\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the contract registry address\r\n    /// @return contractRegistry is the contract registry address\r\n    function getContractRegistry() external view returns (IContractRegistry contractRegistry);\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableRegistryManagement.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableRegistryManagement is Context {\r\n    address private _registryAdmin;\r\n    address private _pendingRegistryAdmin;\r\n\r\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _registryAdmin = msgSender;\r\n        emit RegistryManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current registryAdmin.\r\n     */\r\n    function registryAdmin() public view returns (address) {\r\n        return _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the registryAdmin.\r\n     */\r\n    modifier onlyRegistryAdmin() {\r\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current registryAdmin.\r\n     */\r\n    function isRegistryAdmin() public view returns (bool) {\r\n        return _msgSender() == _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\r\n     *\r\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\r\n     * thereby removing any functionality that is only available to the registryAdmin.\r\n     */\r\n    function renounceRegistryManagement() public onlyRegistryAdmin {\r\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\r\n        _registryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\r\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\r\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\r\n        _registryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingManager.\r\n     */\r\n    modifier onlyPendingRegistryAdmin() {\r\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current registryAdmin to set the pendingManager address.\r\n     * @param newRegistryAdmin The address to transfer registryManagement to.\r\n     */\r\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\r\n        _pendingRegistryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\r\n     */\r\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\r\n        _transferRegistryManagement(_pendingRegistryAdmin);\r\n        _pendingRegistryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current pendingRegistryAdmin\r\n    */\r\n    function pendingRegistryAdmin() public view returns (address) {\r\n       return _pendingRegistryAdmin;  \r\n    }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Initializable {\r\n\r\n    address private _initializationAdmin;\r\n\r\n    event InitializationComplete();\r\n\r\n    /// Constructor\r\n    /// Sets the initializationAdmin to the contract deployer\r\n    /// The initialization admin may call any manager only function until initializationComplete\r\n    constructor() public{\r\n        _initializationAdmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyInitializationAdmin() {\r\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the initializationAdmin address\r\n    function initializationAdmin() public view returns (address) {\r\n        return _initializationAdmin;\r\n    }\r\n\r\n    /// Finalizes the initialization and revokes the initializationAdmin role \r\n    function initializationComplete() external onlyInitializationAdmin {\r\n        _initializationAdmin = address(0);\r\n        emit InitializationComplete();\r\n    }\r\n\r\n    /// Checks if the initialization was completed\r\n    function isInitializationComplete() public view returns (bool) {\r\n        return _initializationAdmin == address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is IContractRegistryAccessor, WithClaimableRegistryManagement, Initializable {\r\n\r\n    IContractRegistry private contractRegistry;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\r\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\r\n        setContractRegistry(_contractRegistry);\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationManager {\r\n        require(isMigrationManager(), \"sender is not the migration manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunctionalManager {\r\n        require(isFunctionalManager(), \"sender is not the functional manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    /// Checks whether the caller is Admin: either the contract registry, the registry admin, or the initialization admin\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\r\n    }\r\n\r\n    /// Checks whether the caller is a specific manager role or and Admin\r\n    /// @dev queries the registry contract for the up to date manager assignment\r\n    function isManager(string memory role) internal view returns (bool) {\r\n        IContractRegistry _contractRegistry = contractRegistry;\r\n        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\r\n    }\r\n\r\n    /// Checks whether the caller is the migration manager\r\n    function isMigrationManager() internal view returns (bool) {\r\n        return isManager('migrationManager');\r\n    }\r\n\r\n    /// Checks whether the caller is the functional manager\r\n    function isFunctionalManager() internal view returns (bool) {\r\n        return isManager('functionalManager');\r\n    }\r\n\r\n    /* \r\n     * Contract getters, return the address of a contract by calling the contract registry \r\n     */ \r\n\r\n    function getProtocolContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"protocol\");\r\n    }\r\n\r\n    function getStakingRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewards\");\r\n    }\r\n\r\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\r\n    }\r\n\r\n    function getCommitteeContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"committee\");\r\n    }\r\n\r\n    function getElectionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"elections\");\r\n    }\r\n\r\n    function getDelegationsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"delegations\");\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"guardiansRegistration\");\r\n    }\r\n\r\n    function getCertificationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certification\");\r\n    }\r\n\r\n    function getStakingContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"staking\");\r\n    }\r\n\r\n    function getSubscriptionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"subscriptions\");\r\n    }\r\n\r\n    function getStakingRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\r\n    }\r\n\r\n    function getGeneralFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"generalFeesWallet\");\r\n    }\r\n\r\n    function getCertifiedFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\r\n    }\r\n\r\n    function getStakingContractHandler() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingContractHandler\");\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newContractRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {\r\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\r\n        contractRegistry = newContractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\r\n    }\r\n\r\n    /// Returns the contract registry that the contract is set to use\r\n    /// @return contractRegistry is the registry contract address\r\n    function getContractRegistry() public override view returns (IContractRegistry) {\r\n        return contractRegistry;\r\n    }\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ILockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title lockable contract interface, allows to lock a contract\r\ninterface ILockable {\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external /* onlyMigrationManager */;\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external /* onlyMigrationManager */;\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() view external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title lockable contract\r\ncontract Lockable is ILockable, ContractRegistryAccessor {\r\n\r\n    bool public locked;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external override onlyMigrationManager {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external override onlyMigrationManager {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() external override view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title managed contract\r\ncontract ManagedContract is IManagedContract, Lockable {\r\n\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() virtual override external {}\r\n\r\n}\r\n\r\n// File: contracts/Elections.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Elections contract\r\ncontract Elections is IElections, ManagedContract {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint32 constant PERCENT_MILLIE_BASE = 100000;\r\n\r\n\tmapping(address => mapping(address => uint256)) voteUnreadyVotes; // by => to => expiration\r\n\tmapping(address => uint256) public votersStake;\r\n\tmapping(address => address) voteOutVotes; // by => to\r\n\tmapping(address => uint256) accumulatedStakesForVoteOut; // addr => total stake\r\n\tmapping(address => bool) votedOutGuardians;\r\n\r\n\tstruct Settings {\r\n\t\tuint32 minSelfStakePercentMille;\r\n\t\tuint32 voteUnreadyPercentMilleThreshold;\r\n\t\tuint32 voteOutPercentMilleThreshold;\r\n\t}\r\n\tSettings settings;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \r\n    /// @param voteUnreadyPercentMilleThreshold is the minimum vote-unready threshold in percent-mille (0-100,000)\r\n    /// @param voteOutPercentMilleThreshold is the minimum vote-out threshold in percent-mille (0-100,000)\r\n\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin, uint32 minSelfStakePercentMille, uint32 voteUnreadyPercentMilleThreshold, uint32 voteOutPercentMilleThreshold) ManagedContract(_contractRegistry, _registryAdmin) public {\r\n\t\tsetMinSelfStakePercentMille(minSelfStakePercentMille);\r\n\t\tsetVoteOutPercentMilleThreshold(voteOutPercentMilleThreshold);\r\n\t\tsetVoteUnreadyPercentMilleThreshold(voteUnreadyPercentMilleThreshold);\r\n\t}\r\n\r\n\tmodifier onlyDelegationsContract() {\r\n\t\trequire(msg.sender == address(delegationsContract), \"caller is not the delegations contract\");\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyGuardiansRegistrationContract() {\r\n\t\trequire(msg.sender == address(guardianRegistrationContract), \"caller is not the guardian registrations contract\");\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyCertificationContract() {\r\n\t\trequire(msg.sender == address(certificationContract), \"caller is not the certification contract\");\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n\t * External functions\r\n\t */\r\n\r\n    /// Notifies that the guardian is ready to sync with other nodes\r\n    /// @dev ready to sync state is not managed in the contract that only emits an event\r\n    /// @dev readyToSync clears the readyForCommittee state\r\n\tfunction readyToSync() external override onlyWhenActive {\r\n\t\taddress guardian = guardianRegistrationContract.resolveGuardianAddress(msg.sender); // this validates registration\r\n\t\trequire(!isVotedOut(guardian), \"caller is voted-out\");\r\n\r\n\t\temit GuardianStatusUpdated(guardian, true, false);\r\n\r\n\t\tcommitteeContract.removeMember(guardian);\r\n\t}\r\n\r\n    /// Notifies that the guardian is ready to join the committee\r\n    /// @dev a qualified guardian calling readyForCommittee is added to the committee\r\n\tfunction readyForCommittee() external override onlyWhenActive {\r\n\t\t_readyForCommittee(msg.sender);\r\n\t}\r\n\r\n    /// Checks if a guardian is qualified to join the committee\r\n    /// @dev when true, calling readyForCommittee() will result in adding the guardian to the committee\r\n    /// @dev called periodically by guardians to check if they are qualified to join the committee\r\n    /// @param guardian is the guardian to check\r\n    /// @return canJoin indicating that the guardian can join the current committee\r\n\tfunction canJoinCommittee(address guardian) external view override returns (bool) {\r\n\t\tguardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration\r\n\r\n\t\tif (isVotedOut(guardian)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tuint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);\r\n\t\treturn committeeContract.checkAddMember(guardian, effectiveStake);\r\n\t}\r\n\r\n    /// Returns an address effective stake\r\n    /// The effective stake is derived from a guardian delegate stake and selfs stake  \r\n    /// @return effectiveStake is the guardian's effective stake\r\n\tfunction getEffectiveStake(address guardian) external override view returns (uint effectiveStake) {\r\n\t\treturn getGuardianEffectiveStake(guardian, settings);\r\n\t}\r\n\r\n    /// Returns the current committee along with the guardians' Orbs address and IP\r\n    /// @return committee is a list of the committee members' guardian addresses\r\n    /// @return weights is a list of the committee members' weight (effective stake)\r\n    /// @return orbsAddrs is a list of the committee members' orbs address\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return ips is a list of the committee members' ip\r\n\tfunction getCommittee() external override view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips) {\r\n\t\tIGuardiansRegistration _guardianRegistrationContract = guardianRegistrationContract;\r\n\t\t(committee, weights, certification) = committeeContract.getCommittee();\r\n\t\torbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);\r\n\t\tips = _guardianRegistrationContract.getGuardianIps(committee);\r\n\t}\r\n\r\n\t// Vote-unready\r\n\r\n    /// Casts an unready vote on a subject guardian\r\n    /// @dev Called by a guardian as part of the automatic vote-unready flow\r\n    /// @dev The transaction may be sent from the guardian or orbs address.\r\n    /// @param subject is the subject guardian to vote out\r\n    /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.\r\n\tfunction voteUnready(address subject, uint voteExpiration) external override onlyWhenActive {\r\n\t\trequire(voteExpiration >= block.timestamp, \"vote expiration time must not be in the past\");\r\n\r\n\t\taddress voter = guardianRegistrationContract.resolveGuardianAddress(msg.sender);\r\n\t\tvoteUnreadyVotes[voter][subject] = voteExpiration;\r\n\t\temit VoteUnreadyCasted(voter, subject, voteExpiration);\r\n\r\n\t\t(address[] memory generalCommittee, uint256[] memory generalWeights, bool[] memory certification) = committeeContract.getCommittee();\r\n\r\n\t\tbool votedUnready = isCommitteeVoteUnreadyThresholdReached(generalCommittee, generalWeights, certification, subject);\r\n\t\tif (votedUnready) {\r\n\t\t\tclearCommitteeUnreadyVotes(generalCommittee, subject);\r\n\t\t\temit GuardianVotedUnready(subject);\r\n\r\n\t\t\temit GuardianStatusUpdated(subject, false, false);\r\n\t\t\tcommitteeContract.removeMember(subject);\r\n\t\t}\r\n\t}\r\n\r\n    /// Returns the current vote unready vote for a voter and a subject pair\r\n    /// @param voter is the voting guardian address\r\n    /// @param subject is the subject guardian address\r\n    /// @return valid indicates whether there is a valid vote\r\n    /// @return expiration returns the votes expiration time\r\n\tfunction getVoteUnreadyVote(address voter, address subject) public override view returns (bool valid, uint256 expiration) {\r\n\t\texpiration = voteUnreadyVotes[voter][subject];\r\n\t\tvalid = expiration != 0 && block.timestamp < expiration;\r\n\t}\r\n\r\n    /// Returns the current vote-unready status of a subject guardian.\r\n    /// @dev the committee and certification data is used to check the certified and committee threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return committee is a list of the current committee members\r\n    /// @return weights is a list of the current committee members weight\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return votes is a list of bool indicating the members that votes the subject unready\r\n    /// @return subjectInCommittee indicates that the subject is in the committee\r\n    /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee\r\n\tfunction getVoteUnreadyStatus(address subject) external override view returns (address[] memory committee, uint256[] memory weights, bool[] memory certification, bool[] memory votes, bool subjectInCommittee, bool subjectInCertifiedCommittee) {\r\n\t\t(committee, weights, certification) = committeeContract.getCommittee();\r\n\r\n\t\tvotes = new bool[](committee.length);\r\n\t\tfor (uint i = 0; i < committee.length; i++) {\r\n\t\t\taddress memberAddr = committee[i];\r\n\t\t\tif (block.timestamp < voteUnreadyVotes[memberAddr][subject]) {\r\n\t\t\t\tvotes[i] = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (memberAddr == subject) {\r\n\t\t\t\tsubjectInCommittee = true;\r\n\t\t\t\tsubjectInCertifiedCommittee = certification[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Vote-out\r\n\r\n    /// Casts a voteOut vote by the sender to the given address\r\n    /// @dev the transaction is sent from the guardian address\r\n    /// @param subject is the subject guardian address\r\n\tfunction voteOut(address subject) external override onlyWhenActive {\r\n\t\tSettings memory _settings = settings;\r\n\r\n\t\taddress voter = msg.sender;\r\n\t\taddress prevSubject = voteOutVotes[voter];\r\n\r\n\t\tvoteOutVotes[voter] = subject;\r\n\t\temit VoteOutCasted(voter, subject);\r\n\r\n\t\tuint256 voterStake = delegationsContract.getDelegatedStake(voter);\r\n\r\n\t\tif (prevSubject == address(0)) {\r\n\t\t\tvotersStake[voter] = voterStake;\r\n\t\t}\r\n\r\n\t\tif (subject == address(0)) {\r\n\t\t\tdelete votersStake[voter];\r\n\t\t}\r\n\r\n\t\tuint totalStake = delegationsContract.getTotalDelegatedStake();\r\n\r\n\t\tif (prevSubject != address(0) && prevSubject != subject) {\r\n\t\t\tapplyVoteOutVotesFor(prevSubject, 0, voterStake, totalStake, _settings);\r\n\t\t}\r\n\r\n\t\tif (subject != address(0)) {\r\n\t\t\tuint voteStakeAdded = prevSubject != subject ? voterStake : 0;\r\n\t\t\tapplyVoteOutVotesFor(subject, voteStakeAdded, 0, totalStake, _settings); // recheck also if not new\r\n\t\t}\r\n\t}\r\n\r\n    /// Returns the subject address the addr has voted-out against\r\n    /// @param voter is the voting guardian address\r\n    /// @return subject is the subject the voter has voted out\r\n\tfunction getVoteOutVote(address voter) external override view returns (address) {\r\n\t\treturn voteOutVotes[voter];\r\n\t}\r\n\r\n    /// Returns the governance voteOut status of a guardian.\r\n    /// @dev A guardian is voted out if votedStake / totalDelegatedStake (in percent mille) > threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return votedOut indicates whether the subject was voted out\r\n    /// @return votedStake is the total stake voting against the subject\r\n    /// @return totalDelegatedStake is the total delegated stake\r\n\tfunction getVoteOutStatus(address subject) external override view returns (bool votedOut, uint votedStake, uint totalDelegatedStake) {\r\n\t\tvotedOut = isVotedOut(subject);\r\n\t\tvotedStake = accumulatedStakesForVoteOut[subject];\r\n\t\ttotalDelegatedStake = delegationsContract.getTotalDelegatedStake();\r\n\t}\r\n\r\n\t/*\r\n\t * Notification functions from other PoS contracts\r\n\t */\r\n\r\n    /// Notifies a delegated stake change event\r\n    /// @dev Called by: delegation contract\r\n    /// @param delegate is the delegate to update\r\n    /// @param selfDelegatedStake is the delegate self stake (0 if not self-delegating)\r\n    /// @param delegatedStake is the delegate delegated stake (0 if not self-delegating)\r\n    /// @param totalDelegatedStake is the total delegated stake\r\n\tfunction delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external override onlyDelegationsContract onlyWhenActive {\r\n\t\tSettings memory _settings = settings;\r\n\r\n\t\tuint effectiveStake = calcEffectiveStake(selfDelegatedStake, delegatedStake, _settings);\r\n\t\temit StakeChanged(delegate, selfDelegatedStake, delegatedStake, effectiveStake);\r\n\r\n\t\tcommitteeContract.memberWeightChange(delegate, effectiveStake);\r\n\r\n\t\tapplyStakesToVoteOutBy(delegate, delegatedStake, totalDelegatedStake, _settings);\r\n\t}\r\n\r\n    /// Notifies a new guardian was unregistered\r\n    /// @dev Called by: guardian registration contract\r\n    /// @dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee\r\n    /// @param guardian is the address of the guardian that unregistered\r\n\tfunction guardianUnregistered(address guardian) external override onlyGuardiansRegistrationContract onlyWhenActive {\r\n\t\temit GuardianStatusUpdated(guardian, false, false);\r\n\t\tcommitteeContract.removeMember(guardian);\r\n\t}\r\n\r\n    /// Notifies on a guardian certification change\r\n    /// @dev Called by: guardian registration contract\r\n    /// @param guardian is the address of the guardian to update\r\n    /// @param isCertified indicates whether the guardian is certified\r\n\tfunction guardianCertificationChanged(address guardian, bool isCertified) external override onlyCertificationContract onlyWhenActive {\r\n\t\tcommitteeContract.memberCertificationChange(guardian, isCertified);\r\n\t}\r\n\r\n\t/*\r\n     * Governance functions\r\n\t */\r\n\r\n    /// Sets the minimum self stake requirement for the effective stake\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \r\n\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) public override onlyFunctionalManager {\r\n\t\trequire(minSelfStakePercentMille <= PERCENT_MILLIE_BASE, \"minSelfStakePercentMille must be 100000 at most\");\r\n\t\temit MinSelfStakePercentMilleChanged(minSelfStakePercentMille, settings.minSelfStakePercentMille);\r\n\t\tsettings.minSelfStakePercentMille = minSelfStakePercentMille;\r\n\t}\r\n\r\n    /// Returns the minimum self-stake required for the effective stake\r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille \r\n\tfunction getMinSelfStakePercentMille() external override view returns (uint32) {\r\n\t\treturn settings.minSelfStakePercentMille;\r\n\t}\r\n\r\n    /// Sets the vote-out threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteOutPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteOutPercentMilleThreshold(uint32 voteOutPercentMilleThreshold) public override onlyFunctionalManager {\r\n\t\trequire(voteOutPercentMilleThreshold <= PERCENT_MILLIE_BASE, \"voteOutPercentMilleThreshold must not be larger than 100000\");\r\n\t\temit VoteOutPercentMilleThresholdChanged(voteOutPercentMilleThreshold, settings.voteOutPercentMilleThreshold);\r\n\t\tsettings.voteOutPercentMilleThreshold = voteOutPercentMilleThreshold;\r\n\t}\r\n\r\n    /// Returns the vote-out threshold\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteOutPercentMilleThreshold() external override view returns (uint32) {\r\n\t\treturn settings.voteOutPercentMilleThreshold;\r\n\t}\r\n\r\n    /// Sets the vote-unready threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteUnreadyPercentMilleThreshold(uint32 voteUnreadyPercentMilleThreshold) public override onlyFunctionalManager {\r\n\t\trequire(voteUnreadyPercentMilleThreshold <= PERCENT_MILLIE_BASE, \"voteUnreadyPercentMilleThreshold must not be larger than 100000\");\r\n\t\temit VoteUnreadyPercentMilleThresholdChanged(voteUnreadyPercentMilleThreshold, settings.voteUnreadyPercentMilleThreshold);\r\n\t\tsettings.voteUnreadyPercentMilleThreshold = voteUnreadyPercentMilleThreshold;\r\n\t}\r\n\r\n    /// Returns the vote-unready threshold\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteUnreadyPercentMilleThreshold() external override view returns (uint32) {\r\n\t\treturn settings.voteUnreadyPercentMilleThreshold;\r\n\t}\r\n\r\n    /// Returns the contract's settings \r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getSettings() external override view returns (\r\n\t\tuint32 minSelfStakePercentMille,\r\n\t\tuint32 voteUnreadyPercentMilleThreshold,\r\n\t\tuint32 voteOutPercentMilleThreshold\r\n\t) {\r\n\t\tSettings memory _settings = settings;\r\n\t\tminSelfStakePercentMille = _settings.minSelfStakePercentMille;\r\n\t\tvoteUnreadyPercentMilleThreshold = _settings.voteUnreadyPercentMilleThreshold;\r\n\t\tvoteOutPercentMilleThreshold = _settings.voteOutPercentMilleThreshold;\r\n\t}\r\n\r\n    /// Initializes the ready for committee notification for the committee guardians\r\n    /// @dev governance function called only by the initialization admin during migration \r\n    /// @dev identical behaviour as if each guardian sent readyForCommittee() \r\n    /// @param guardians a list of guardians addresses to update\r\n\tfunction initReadyForCommittee(address[] calldata guardians) external override onlyInitializationAdmin {\r\n\t\tfor (uint i = 0; i < guardians.length; i++) {\r\n\t\t\t_readyForCommittee(guardians[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n     * Private functions\r\n\t */\r\n\r\n\r\n    /// Handles a readyForCommittee notification\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev notifies the committee contract that will add the guardian if qualified\r\n    /// @param guardian is the guardian ready for committee\r\n\tfunction _readyForCommittee(address guardian) private {\r\n\t\tguardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration\r\n\t\trequire(!isVotedOut(guardian), \"caller is voted-out\");\r\n\r\n\t\temit GuardianStatusUpdated(guardian, true, true);\r\n\r\n\t\tuint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);\r\n\t\tcommitteeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));\r\n\t}\r\n\r\n    /// Calculates a guardian effective stake based on its self-stake and delegated stake\r\n\tfunction calcEffectiveStake(uint256 selfStake, uint256 delegatedStake, Settings memory _settings) private pure returns (uint256) {\r\n\t\tif (selfStake.mul(PERCENT_MILLIE_BASE) >= delegatedStake.mul(_settings.minSelfStakePercentMille)) {\r\n\t\t\treturn delegatedStake;\r\n\t\t}\r\n\t\treturn selfStake.mul(PERCENT_MILLIE_BASE).div(_settings.minSelfStakePercentMille); // never overflows or divides by zero\r\n\t}\r\n\r\n    /// Returns the effective state of a guardian \r\n    /// @dev calls the delegation contract to retrieve the guardian current stake and delegated stake\r\n    /// @param guardian is the guardian to query\r\n    /// @param _settings is the contract settings struct\r\n    /// @return effectiveStake is the guardian's effective stake\r\n\tfunction getGuardianEffectiveStake(address guardian, Settings memory _settings) private view returns (uint256 effectiveStake) {\r\n\t\tIDelegations _delegationsContract = delegationsContract;\r\n\t\t(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);\r\n\t\tuint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);\r\n\t\treturn calcEffectiveStake(selfStake, delegatedStake, _settings);\r\n\t}\r\n\r\n\t// Vote-unready\r\n\r\n    /// Checks if the vote unready threshold was reached for a given subject\r\n    /// @dev a subject is voted-unready if either it reaches the threshold in the general committee or a certified subject reaches the threshold in the certified committee\r\n    /// @param committee is a list of the current committee members\r\n    /// @param weights is a list of the current committee members weight\r\n    /// @param certification is a list of bool indicating the committee members certification\r\n    /// @param subject is the subject guardian address\r\n    /// @return thresholdReached is a bool indicating that the threshold was reached\r\n\tfunction isCommitteeVoteUnreadyThresholdReached(address[] memory committee, uint256[] memory weights, bool[] memory certification, address subject) private returns (bool) {\r\n\t\tSettings memory _settings = settings;\r\n\r\n\t\tuint256 totalCommitteeStake = 0;\r\n\t\tuint256 totalVoteUnreadyStake = 0;\r\n\t\tuint256 totalCertifiedStake = 0;\r\n\t\tuint256 totalCertifiedVoteUnreadyStake = 0;\r\n\r\n\t\taddress member;\r\n\t\tuint256 memberStake;\r\n\t\tbool isSubjectCertified;\r\n\t\tfor (uint i = 0; i < committee.length; i++) {\r\n\t\t\tmember = committee[i];\r\n\t\t\tmemberStake = weights[i];\r\n\r\n\t\t\tif (member == subject && certification[i]) {\r\n\t\t\t\tisSubjectCertified = true;\r\n\t\t\t}\r\n\r\n\t\t\ttotalCommitteeStake = totalCommitteeStake.add(memberStake);\r\n\t\t\tif (certification[i]) {\r\n\t\t\t\ttotalCertifiedStake = totalCertifiedStake.add(memberStake);\r\n\t\t\t}\r\n\r\n\t\t\t(bool valid, uint256 expiration) = getVoteUnreadyVote(member, subject);\r\n\t\t\tif (valid) {\r\n\t\t\t\ttotalVoteUnreadyStake = totalVoteUnreadyStake.add(memberStake);\r\n\t\t\t\tif (certification[i]) {\r\n\t\t\t\t\ttotalCertifiedVoteUnreadyStake = totalCertifiedVoteUnreadyStake.add(memberStake);\r\n\t\t\t\t}\r\n\t\t\t} else if (expiration != 0) {\r\n\t\t\t\t// Vote is stale, delete from state\r\n\t\t\t\tdelete voteUnreadyVotes[member][subject];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\ttotalCommitteeStake > 0 &&\r\n\t\t\ttotalVoteUnreadyStake.mul(PERCENT_MILLIE_BASE) >= uint256(_settings.voteUnreadyPercentMilleThreshold).mul(totalCommitteeStake)\r\n\t\t) || (\r\n\t\t\tisSubjectCertified &&\r\n\t\t\ttotalCertifiedStake > 0 &&\r\n\t\t\ttotalCertifiedVoteUnreadyStake.mul(PERCENT_MILLIE_BASE) >= uint256(_settings.voteUnreadyPercentMilleThreshold).mul(totalCertifiedStake)\r\n\t\t);\r\n\t}\r\n\r\n    /// Clears the committee members vote-unready state upon declaring a guardian unready\r\n    /// @param committee is a list of the current committee members\r\n    /// @param subject is the subject guardian address\r\n\tfunction clearCommitteeUnreadyVotes(address[] memory committee, address subject) private {\r\n\t\tfor (uint i = 0; i < committee.length; i++) {\r\n\t\t\tvoteUnreadyVotes[committee[i]][subject] = 0; // clear vote-outs\r\n\t\t}\r\n\t}\r\n\r\n\t// Vote-out\r\n\r\n    /// Updates the vote-out state upon a stake change notification\r\n    /// @param voter is the voter address\r\n    /// @param currentVoterStake is the voter delegated stake\r\n    /// @param totalDelegatedStake is the total delegated stake\r\n    /// @param _settings is the contract settings struct\r\n\tfunction applyStakesToVoteOutBy(address voter, uint256 currentVoterStake, uint256 totalDelegatedStake, Settings memory _settings) private {\r\n\t\taddress subject = voteOutVotes[voter];\r\n\t\tif (subject == address(0)) return;\r\n\r\n\t\tuint256 prevVoterStake = votersStake[voter];\r\n\t\tvotersStake[voter] = currentVoterStake;\r\n\r\n\t\tapplyVoteOutVotesFor(subject, currentVoterStake, prevVoterStake, totalDelegatedStake, _settings);\r\n\t}\r\n\r\n    /// Applies updates in a vote-out subject state and checks whether its threshold was reached\r\n    /// @param subject is the vote-out subject\r\n    /// @param voteOutStakeAdded is the added votes against the subject\r\n    /// @param voteOutStakeRemoved is the removed votes against the subject\r\n    /// @param totalDelegatedStake is the total delegated stake used to check the vote-out threshold\r\n    /// @param _settings is the contract settings struct\r\n    function applyVoteOutVotesFor(address subject, uint256 voteOutStakeAdded, uint256 voteOutStakeRemoved, uint256 totalDelegatedStake, Settings memory _settings) private {\r\n\t\tif (isVotedOut(subject)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 accumulated = accumulatedStakesForVoteOut[subject].\r\n\t\t\tsub(voteOutStakeRemoved).\r\n\t\t\tadd(voteOutStakeAdded);\r\n\r\n\t\tbool shouldBeVotedOut = totalDelegatedStake > 0 && accumulated.mul(PERCENT_MILLIE_BASE) >= uint256(_settings.voteOutPercentMilleThreshold).mul(totalDelegatedStake);\r\n\t\tif (shouldBeVotedOut) {\r\n\t\t\tvotedOutGuardians[subject] = true;\r\n\t\t\temit GuardianVotedOut(subject);\r\n\r\n\t\t\temit GuardianStatusUpdated(subject, false, false);\r\n\t\t\tcommitteeContract.removeMember(subject);\r\n\t\t}\r\n\r\n\t\taccumulatedStakesForVoteOut[subject] = accumulated;\r\n\t}\r\n\r\n    /// Checks whether a guardian was voted out\r\n\tfunction isVotedOut(address guardian) private view returns (bool) {\r\n\t\treturn votedOutGuardians[guardian];\r\n\t}\r\n\r\n\t/*\r\n     * Contracts topology / registry interface\r\n     */\r\n\r\n\tICommittee committeeContract;\r\n\tIDelegations delegationsContract;\r\n\tIGuardiansRegistration guardianRegistrationContract;\r\n\tICertification certificationContract;\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n\tfunction refreshContracts() external override {\r\n\t\tcommitteeContract = ICommittee(getCommitteeContract());\r\n\t\tdelegationsContract = IDelegations(getDelegationsContract());\r\n\t\tguardianRegistrationContract = IGuardiansRegistration(getGuardiansRegistrationContract());\r\n\t\tcertificationContract = ICertification(getCertificationContract());\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"minSelfStakePercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteUnreadyPercentMilleThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteOutPercentMilleThreshold\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"readyToSync\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"readyForCommittee\",\"type\":\"bool\"}],\"name\":\"GuardianStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianVotedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianVotedUnready\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"}],\"name\":\"MinSelfStakePercentMilleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"RegistryManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"selfDelegatedStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"effectiveStake\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"VoteOutCasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"}],\"name\":\"VoteOutPercentMilleThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"VoteUnreadyCasted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"}],\"name\":\"VoteUnreadyPercentMilleThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"}],\"name\":\"VoteUnreadyTimeoutSecondsChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"canJoinCommittee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"selfDelegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDelegatedStake\",\"type\":\"uint256\"}],\"name\":\"delegatedStakeChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommittee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"committee\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"orbsAddrs\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"certification\",\"type\":\"bool[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"ips\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"getEffectiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSelfStakePercentMille\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"minSelfStakePercentMille\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteUnreadyPercentMilleThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"voteOutPercentMilleThreshold\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteOutPercentMilleThreshold\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getVoteOutStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votedOut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDelegatedStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoteOutVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteUnreadyPercentMilleThreshold\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getVoteUnreadyStatus\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"committee\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"certification\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"votes\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"subjectInCommittee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"subjectInCertifiedCommittee\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getVoteUnreadyVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"}],\"name\":\"guardianCertificationChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"guardianUnregistered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"initReadyForCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRegistryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyForCommittee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readyToSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"newContractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minSelfStakePercentMille\",\"type\":\"uint32\"}],\"name\":\"setMinSelfStakePercentMille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"}],\"name\":\"setRegistryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"voteOutPercentMilleThreshold\",\"type\":\"uint32\"}],\"name\":\"setVoteOutPercentMilleThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"voteUnreadyPercentMilleThreshold\",\"type\":\"uint32\"}],\"name\":\"setVoteUnreadyPercentMilleThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"transferRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"voteOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteExpiration\",\"type\":\"uint256\"}],\"name\":\"voteUnready\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votersStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Elections","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d859701c81119ab12a1e62af6270ad2ae05c7ab3000000000000000000000000f1fd5233e60e7ef797025fe9dd066d60d59bcb920000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000111700000000000000000000000000000000000000000000000000000000000011170","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2643d8debe01ae4182e08ac333b74b50c649fb45d8fb6b9be0f1cfff5d8d5ce"}]}