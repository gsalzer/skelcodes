{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.6.10;\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address public owner;\r\n    address private dev;\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner, \"Owner only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require(_msgSender() == dev, \"Dev only\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _dev) public {\r\n        owner = _msgSender();\r\n        dev = _dev;\r\n    }\r\n\r\n    function transferOwnership(address payable _owner) public onlyOwner() {\r\n        owner = _owner;\r\n    }\r\n\r\n    function transferDev(address _dev) public onlyDev() {\r\n        dev = _dev;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/NFYTradingPlatform.sol\r\n\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ninterface NFTContract {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function nftTokenId(address _stakeholder) external view returns(uint256 id);\r\n}\r\n\r\ncontract NFYTradingPlatform is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    bytes32[] private stakeTokenList;\r\n    uint private nextTradeId;\r\n    uint private nextOrderId;\r\n\r\n    uint public platformFee;\r\n\r\n    IERC20 public NFYToken;\r\n    address public rewardPool;\r\n    address public communityFund;\r\n    address public devAddress;\r\n\r\n    enum Side {\r\n        BUY,\r\n        SELL\r\n    }\r\n\r\n    struct StakeToken {\r\n        bytes32 ticker;\r\n        NFTContract nftContract;\r\n        address nftAddress;\r\n        address stakingAddress;\r\n    }\r\n\r\n    struct Order {\r\n        uint id;\r\n        address userAddress;\r\n        Side side;\r\n        bytes32 ticker;\r\n        uint amount;\r\n        uint filled;\r\n        uint price;\r\n        uint date;\r\n    }\r\n\r\n    struct PendingTransactions{\r\n        uint pendingAmount;\r\n        uint id;\r\n    }\r\n\r\n    mapping(bytes32 => mapping(address => PendingTransactions[])) private pendingETH;\r\n\r\n    mapping(bytes32 => mapping(address => PendingTransactions[])) private pendingToken;\r\n\r\n    mapping(bytes32 => StakeToken) private tokens;\r\n\r\n    mapping(address => mapping(bytes32 => uint)) private traderBalances;\r\n\r\n    mapping(bytes32 => mapping(uint => Order[])) private orderBook;\r\n\r\n    mapping(address => uint) private ethBalance;\r\n\r\n    // Event for a new trade\r\n    event NewTrade(\r\n        uint tradeId,\r\n        uint orderId,\r\n        bytes32 indexed ticker,\r\n        address trader1,\r\n        address trader2,\r\n        uint amount,\r\n        uint price,\r\n        uint date\r\n    );\r\n\r\n    constructor(address _nfy, address _rewardPool, uint _fee, address _devFeeAddress, address _communityFundAddress, address _dev) Ownable(_dev) public {\r\n        NFYToken = IERC20(_nfy);\r\n        rewardPool = _rewardPool;\r\n        platformFee = _fee;\r\n        devAddress = _devFeeAddress;\r\n        communityFund = _communityFundAddress;\r\n    }\r\n\r\n    // Function that updates platform fee\r\n    function setFee(uint _fee) external onlyOwner() {\r\n        platformFee = _fee;\r\n    }\r\n\r\n    // Function that updates dev address for portion of fee\r\n    function setDevFeeAddress(address _devAddress) external onlyDev() {\r\n        require(_devAddress != address(0), \"Can not be 0 address\");\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    // Function that updates community address for portion of fee\r\n    function setCommunityFeeAddress(address _communityAddress) external onlyOwner() {\r\n        require(_communityAddress != address(0), \"Can not be 0 address\");\r\n        communityFund = _communityAddress;\r\n    }\r\n\r\n    // Function that gets balance of a user\r\n    function getTraderBalance(address _user, string memory ticker) external view returns(uint) {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n\r\n        return traderBalances[_user][_ticker];\r\n    }\r\n\r\n    // Function that gets eth balance of a user\r\n    function getEthBalance(address _user) external view returns(uint) {\r\n        return ethBalance[_user];\r\n    }\r\n\r\n    // Function that adds staking NFT\r\n    function addToken(string memory ticker, NFTContract _NFTContract, address _nftAddress, address _stakingAddress) onlyOwner() external {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n        require(tokens[_ticker].stakingAddress == address(0), \"Already exists\");\r\n        tokens[_ticker] = StakeToken(_ticker, _NFTContract, _nftAddress, _stakingAddress);\r\n        stakeTokenList.push(_ticker);\r\n    }\r\n\r\n    // Function that allows user to deposit staking NFT\r\n    function depositStake(string memory ticker, uint _tokenId, uint _amount) stakeNFTExist(ticker) external {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n        require(tokens[_ticker].nftContract.ownerOf(_tokenId) == _msgSender(), \"Owner of token is not user\");\r\n\r\n        (bool success, ) = tokens[_ticker].stakingAddress.call(abi.encodeWithSignature(\"decrementNFTValue(uint256,uint256)\", _tokenId, _amount));\r\n        require(success == true, \"decrement call failed\");\r\n\r\n        traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].add(_amount);\r\n    }\r\n\r\n    // Function that allows a user to withdraw their staking NFT\r\n    function withdrawStake(string memory ticker, uint _amount) stakeNFTExist(ticker) external {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n\r\n        if(tokens[_ticker].nftContract.nftTokenId(_msgSender()) == 0){\r\n\r\n            // Call to contract to add stake holder\r\n            (bool addSuccess, ) = tokens[_ticker].stakingAddress.call(abi.encodeWithSignature(\"addStakeholderExternal(address)\", _msgSender()));\r\n            require(addSuccess == true, \"add stakeholder call failed\");\r\n        }\r\n\r\n        uint _tokenId = tokens[_ticker].nftContract.nftTokenId(_msgSender());\r\n        require(traderBalances[_msgSender()][_ticker] >= _amount, 'balance too low');\r\n\r\n        traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].sub(_amount);\r\n\r\n        (bool success, ) = tokens[_ticker].stakingAddress.call(abi.encodeWithSignature(\"incrementNFTValue(uint256,uint256)\", _tokenId, _amount));\r\n        require(success == true, \"increment call failed\");\r\n    }\r\n\r\n    // Function that deposits eth\r\n    function depositEth() external payable{\r\n        ethBalance[_msgSender()] = ethBalance[_msgSender()].add(msg.value);\r\n    }\r\n\r\n    // Function that withdraws eth\r\n    function withdrawEth(uint _amount) external{\r\n        require(_amount > 0, \"cannot withdraw 0 eth\");\r\n        require(ethBalance[_msgSender()] >= _amount, \"Not enough eth in trading balance\");\r\n\r\n        ethBalance[_msgSender()] = ethBalance[_msgSender()].sub(_amount);\r\n\r\n        _msgSender().transfer(_amount);\r\n    }\r\n\r\n    // Function that gets total all orders\r\n    function getOrders(string memory ticker, Side side) external view returns(Order[] memory) {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n        return orderBook[_ticker][uint(side)];\r\n     }\r\n\r\n    // Function that gets all trading\r\n    function getTokens() external view returns(StakeToken[] memory) {\r\n         StakeToken[] memory _tokens = new StakeToken[](stakeTokenList.length);\r\n         for (uint i = 0; i < stakeTokenList.length; i++) {\r\n             _tokens[i] = StakeToken(\r\n               tokens[stakeTokenList[i]].ticker,\r\n               tokens[stakeTokenList[i]].nftContract,\r\n               tokens[stakeTokenList[i]].nftAddress,\r\n               tokens[stakeTokenList[i]].stakingAddress\r\n             );\r\n         }\r\n         return _tokens;\r\n    }\r\n\r\n    // Function that creates limit order\r\n    function createLimitOrder(string memory ticker, uint _amount, uint _price, Side _side) external {\r\n\r\n        uint devFee = platformFee.mul(10).div(100);\r\n        uint communityFee = platformFee.mul(5).div(100);\r\n\r\n        uint rewardFee = platformFee.sub(devFee).sub(communityFee);\r\n\r\n        NFYToken.transferFrom(_msgSender(), devAddress, devFee);\r\n        NFYToken.transferFrom(_msgSender(), communityFund, communityFee);\r\n        NFYToken.transferFrom(_msgSender(), rewardPool, rewardFee);\r\n\r\n        _limitOrder(ticker, _amount, _price, _side);\r\n    }\r\n\r\n    // Limit order Function\r\n    function _limitOrder(string memory ticker, uint _amount, uint _price, Side _side) stakeNFTExist(ticker) internal {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n        require(_amount > 0, \"Amount can not be 0\");\r\n        require(_price > 0, \"Price can not be 0\");\r\n\r\n        Order[] storage orders = orderBook[_ticker][uint(_side == Side.BUY ? Side.SELL : Side.BUY)];\r\n        if(orders.length == 0){\r\n            _createOrder(_ticker, _amount, _price, _side);\r\n        }\r\n        else{\r\n            if(_side == Side.BUY){\r\n                uint remaining = _amount;\r\n                uint i;\r\n                uint orderLength = orders.length;\r\n                while(i < orders.length && remaining > 0) {\r\n\r\n                    if(_price >= orders[i].price){\r\n                        remaining = _matchOrder(_ticker,orders, remaining, i, _side);\r\n                        nextTradeId = nextTradeId.add(1);\r\n\r\n                        if(orders.length.sub(i) == 1 && remaining > 0){\r\n                            _createOrder(_ticker, remaining, _price, _side);\r\n                        }\r\n                        i = i.add(1);\r\n                    }\r\n                    else{\r\n                        i = orderLength;\r\n                        if(remaining > 0){\r\n                            _createOrder(_ticker, remaining, _price, _side);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(_side == Side.SELL){\r\n                uint remaining = _amount;\r\n                uint i;\r\n                uint orderLength = orders.length;\r\n                while(i < orders.length && remaining > 0) {\r\n                    if(_price <= orders[i].price){\r\n                        remaining = _matchOrder(_ticker,orders, remaining, i, _side);\r\n                        nextTradeId = nextTradeId.add(1);\r\n\r\n                        if(orders.length.sub(i) == 1 && remaining > 0){\r\n                            _createOrder(_ticker, remaining, _price, _side);\r\n                        }\r\n                        i = i.add(1);\r\n                    }\r\n                    else{\r\n                        i = orderLength;\r\n                        if(remaining > 0){\r\n                            _createOrder(_ticker, remaining, _price, _side);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n           uint i = 0;\r\n\r\n            while(i < orders.length && orders[i].filled == orders[i].amount) {\r\n                for(uint j = i; j < orders.length.sub(1); j = j.add(1) ) {\r\n                    orders[j] = orders[j.add(1)];\r\n                }\r\n            orders.pop();\r\n            i = i.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _createOrder(bytes32 _ticker, uint _amount, uint _price, Side _side) internal {\r\n        if(_side == Side.BUY) {\r\n            require(ethBalance[_msgSender()] > 0, \"Can not purchase no stake\");\r\n            require(ethBalance[_msgSender()] >= _amount.mul(_price).div(1e18), \"Eth too low\");\r\n            PendingTransactions[] storage pending = pendingETH[_ticker][_msgSender()];\r\n            pending.push(PendingTransactions(_amount.mul(_price).div(1e18), nextOrderId));\r\n            ethBalance[_msgSender()] = ethBalance[_msgSender()].sub(_amount.mul(_price).div(1e18));\r\n        }\r\n        else {\r\n            require(traderBalances[_msgSender()][_ticker] >= _amount, \"Token too low\");\r\n            PendingTransactions[] storage pending = pendingToken[_ticker][_msgSender()];\r\n            pending.push(PendingTransactions(_amount, nextOrderId));\r\n            traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].sub(_amount);\r\n        }\r\n\r\n        Order[] storage orders = orderBook[_ticker][uint(_side)];\r\n\r\n        orders.push(Order(\r\n            nextOrderId,\r\n            _msgSender(),\r\n            _side,\r\n            _ticker,\r\n            _amount,\r\n            0,\r\n            _price,\r\n            now\r\n        ));\r\n\r\n        uint i = orders.length > 0 ? orders.length.sub(1) : 0;\r\n        while(i > 0) {\r\n            if(_side == Side.BUY && orders[i.sub(1)].price > orders[i].price) {\r\n                break;\r\n            }\r\n            if(_side == Side.SELL && orders[i.sub(1)].price < orders[i].price) {\r\n                break;\r\n            }\r\n            Order memory order = orders[i.sub(1)];\r\n            orders[i.sub(1)] = orders[i];\r\n            orders[i] = order;\r\n            i = i.sub(1);\r\n        }\r\n        nextOrderId = nextOrderId.add(1);\r\n    }\r\n\r\n    function _matchOrder(bytes32 _ticker, Order[] storage orders, uint remaining, uint i, Side side) internal returns(uint left){\r\n        uint available = orders[i].amount.sub(orders[i].filled);\r\n        uint matched = (remaining > available) ? available : remaining;\r\n        remaining = remaining.sub(matched);\r\n        orders[i].filled = orders[i].filled.add(matched);\r\n\r\n        emit NewTrade(\r\n            nextTradeId,\r\n            orders[i].id,\r\n            _ticker,\r\n            orders[i].userAddress,\r\n            _msgSender(),\r\n            matched,\r\n            orders[i].price,\r\n            now\r\n        );\r\n\r\n        if(side == Side.SELL) {\r\n            traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].sub(matched);\r\n            traderBalances[orders[i].userAddress][_ticker] = traderBalances[orders[i].userAddress][_ticker].add(matched);\r\n            ethBalance[_msgSender()]  = ethBalance[_msgSender()].add(matched.mul(orders[i].price).div(1e18));\r\n\r\n            PendingTransactions[] storage pending = pendingETH[_ticker][orders[i].userAddress];\r\n            uint userOrders = pending.length;\r\n            uint b = 0;\r\n            uint id = orders[i].id;\r\n            while(b < userOrders){\r\n                if(pending[b].id == id && orders[i].filled == orders[i].amount){\r\n                    for(uint o = b; o < userOrders.sub(1); o = o.add(1)){\r\n                        pending[o] = pending[o.add(1)];\r\n                        b = userOrders;\r\n                    }\r\n                    pending.pop();\r\n                }\r\n                b = b.add(1);\r\n            }\r\n        }\r\n\r\n        if(side == Side.BUY) {\r\n            require(ethBalance[_msgSender()] >= matched.mul(orders[i].price).div(1e18), 'eth balance too low');\r\n            traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].add(matched);\r\n            ethBalance[orders[i].userAddress]  = ethBalance[orders[i].userAddress].add(matched.mul(orders[i].price).div(1e18));\r\n            ethBalance[_msgSender()]  = ethBalance[_msgSender()].sub(matched.mul(orders[i].price).div(1e18));\r\n\r\n            PendingTransactions[] storage pending = pendingToken[_ticker][orders[i].userAddress];\r\n            uint userOrders = pending.length;\r\n            uint b = 0;\r\n            while(b < userOrders){\r\n                if(pending[b].id == orders[i].id && orders[i].filled == orders[i].amount){\r\n                    for(uint o = b; o < userOrders.sub(1); o = o.add(1)){\r\n                        pending[o] = pending[o.add(1)];\r\n                        b = userOrders;\r\n                    }\r\n                    pending.pop();\r\n                }\r\n                b = b.add(1);\r\n            }\r\n        }\r\n        left = remaining;\r\n        return left;\r\n    }\r\n\r\n    function cancelOrder(string memory ticker, Side _side) external stakeNFTExist(ticker) {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n\r\n        Order[] storage orders = orderBook[_ticker][uint(_side)];\r\n\r\n        if(_side == Side.BUY) {\r\n            PendingTransactions[] storage pending = pendingETH[_ticker][_msgSender()];\r\n            uint amount = _cancelOrder(pending, orders, _side);\r\n            ethBalance[_msgSender()]  = ethBalance[_msgSender()].add(amount);\r\n        }\r\n        else{\r\n            PendingTransactions[] storage pending = pendingToken[_ticker][_msgSender()];\r\n            uint amount = _cancelOrder(pending, orders, _side);\r\n            traderBalances[_msgSender()][_ticker] = traderBalances[_msgSender()][_ticker].add(amount);\r\n        }\r\n    }\r\n\r\n    function _cancelOrder(PendingTransactions[] storage pending, Order[] storage orders, Side _side) internal returns(uint left){\r\n        int userOrders = int(pending.length - 1);\r\n        require(userOrders >= 0, 'users has no pending order');\r\n        uint userOrder = uint(userOrders);\r\n        uint orderId = pending[userOrder].id;\r\n        uint orderLength = orders.length;\r\n\r\n        uint i = 0;\r\n        uint amount;\r\n\r\n        while(i < orders.length){\r\n\r\n           if(orders[i].id == orderId){\r\n\r\n                if(_side == Side.BUY){\r\n                    amount = pending[userOrder].pendingAmount.sub(orders[i].filled.mul(orders[i].price).div(1e18));\r\n                }\r\n\r\n                else {\r\n                    amount = pending[userOrder].pendingAmount.sub(orders[i].filled);\r\n                }\r\n\r\n                for(uint c = i; c < orders.length.sub(1); c = c.add(1)){\r\n                    orders[c] = orders[c.add(1)];\r\n                }\r\n\r\n                orders.pop();\r\n                pending.pop();\r\n                i = orderLength;\r\n           }\r\n\r\n           i = i.add(1);\r\n        }\r\n        left = amount;\r\n        return left;\r\n    }\r\n\r\n    modifier stakeNFTExist(string memory ticker) {\r\n        bytes32 _ticker = stringToBytes32(ticker);\r\n        require(tokens[_ticker].stakingAddress != address(0), \"staking NFT does not exist\");\r\n        _;\r\n    }\r\n\r\n    //HELPER FUNCTION\r\n    // CONVERT STRING TO BYTES32\r\n\r\n    function stringToBytes32(string memory _source)\r\n    public pure\r\n    returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(_source);\r\n        string memory tempSource = _source;\r\n\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(tempSource, 32))\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nfy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devFeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityFundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ticker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NewTrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFYToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"contract NFTContract\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"enum NFYTradingPlatform.Side\",\"name\":\"_side\",\"type\":\"uint8\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"enum NFYTradingPlatform.Side\",\"name\":\"_side\",\"type\":\"uint8\"}],\"name\":\"createLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"enum NFYTradingPlatform.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"enum NFYTradingPlatform.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"ticker\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct NFYTradingPlatform.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ticker\",\"type\":\"bytes32\"},{\"internalType\":\"contract NFTContract\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFYTradingPlatform.StakeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"getTraderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityAddress\",\"type\":\"address\"}],\"name\":\"setCommunityFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"transferDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ticker\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFYTradingPlatform","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001cbb83ebcd552d5ebf8131ef8c9cd9d9bab342bc0000000000000000000000002f822da8016d5e8ce3c93b53ee1528392ca3ac5700000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000628c3a02dc2f08f3592286150dbd67972583276500000000000000000000000051e486e7d62a798ff8c9bc105c1372b15c9396690000000000000000000000005530fb19c22b1b410708b0a9fd230c714cba12ed","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77ffa199e9f5b0f4e92699615e70df1039488f74a1bc2a65462f23fcb121e2af"}]}