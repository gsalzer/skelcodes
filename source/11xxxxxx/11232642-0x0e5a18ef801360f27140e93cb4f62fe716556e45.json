{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract NFTStaking {\r\n\r\n  bool public active;\r\n  uint256 public startTime;\r\n  uint256 public cutoffTime;\r\n  address public governance;\r\n  IERC20 internal immutable NFTProtocol;\r\n  struct rewardSchedule {\r\n    uint64 days30;\r\n    uint64 days45;\r\n    uint64 days60;\r\n    uint64 days90;\r\n  }\r\n  rewardSchedule public rewardMultiplier = rewardSchedule({\r\n    days30: 2,\r\n    days45: 3,\r\n    days60: 5,\r\n    days90: 10\r\n  });\r\n\r\n  mapping(address=>uint256) public userDepositTotal;\r\n  mapping(address=>uint256) public numUserDeposits;\r\n  address[] public allStakingUsers;\r\n  struct userDeposit {\r\n    uint256 amountNFT;\r\n    uint256 depositTime;\r\n  }\r\n  mapping(address=>userDeposit[]) public userDeposits;\r\n\r\n  uint256 public totalDeposited;\r\n  uint256 public userFunds;\r\n  uint256 public stakingFunds;\r\n  uint256 public constant maxContractStakingCapacity = 7500000 * 1 ether;\r\n  uint256 public constant userMaxDeposits = 5;\r\n  uint256 public constant totalRewardSupply = 750000 * 1 ether;\r\n  uint256 public constant minStakingAmount = 10000 * 1 ether;\r\n  uint256 public constant maxStakingAmount = 1000000 * 1 ether;\r\n\r\n  constructor (address nftAddress) public {\r\n    //NFTProtocol = IERC20(0xB5a9f4270157BeDe68070df7A070525644fc782D); // Kovan\r\n    //NFTProtocol = IERC20(0xcB8d1260F9c92A3A545d409466280fFdD7AF7042); // Mainnet\r\n    NFTProtocol = IERC20(nftAddress);\r\n    governance = msg.sender;\r\n  }\r\n\r\n  function deposit(uint256 depositAmount) external {\r\n    require(NFTProtocol.balanceOf(msg.sender) >= depositAmount, \"not enough NFT tokens\");\r\n    require(active == true, \"staking has not begun yet\");\r\n    require(depositAmount >= minStakingAmount, \"depositAmount too low\");\r\n    require(depositAmount <= maxStakingAmount, \"depositAmount too high\");\r\n    require(numUserDeposits[msg.sender] < userMaxDeposits, \"users can only have 5 total deposits\");\r\n    require(totalDeposited < maxContractStakingCapacity, \"contract staking capacity exceeded\");\r\n    require(block.timestamp < cutoffTime, \"contract staking deposit time period over\");\r\n    if (userDepositTotal[msg.sender] == 0) allStakingUsers.push(msg.sender);\r\n    userDepositTotal[msg.sender] += depositAmount;\r\n    totalDeposited += depositAmount;\r\n    userFunds += depositAmount;\r\n    userDeposits[msg.sender].push(userDeposit({\r\n      amountNFT: depositAmount,\r\n      depositTime: block.timestamp\r\n    }));\r\n    numUserDeposits[msg.sender] = numUserDeposits[msg.sender] + 1;\r\n    NFTProtocol.transferFrom(msg.sender, address(this), depositAmount);\r\n  }\r\n\r\n  event WithdrawAll(address userAddress, uint256 principal, uint256 yield, uint256 userFundsRemaining, uint256 stakingFundsRemaining);\r\n  function withdrawAll() public {\r\n    require(active == true, \"staking has not begun yet\");\r\n    require(userDepositTotal[msg.sender] > 0, \"nothing to withdraw\");\r\n    uint256 withdrawalAmount = userDepositTotal[msg.sender];\r\n    uint256 userYield = getUserYield(msg.sender);\r\n    userDepositTotal[msg.sender] = 0;\r\n    userFunds -= withdrawalAmount;\r\n    stakingFunds -= userYield;\r\n    for (uint256 i = 0; i < userDeposits[msg.sender].length; i++) {\r\n        delete userDeposits[msg.sender][i];\r\n    }\r\n    NFTProtocol.transfer(msg.sender, withdrawalAmount);\r\n    NFTProtocol.transfer(msg.sender, userYield);\r\n    emit WithdrawAll(msg.sender, withdrawalAmount, userYield, userFunds, stakingFunds);\r\n  }\r\n\r\n  event WithdrawPrincipal(address userAddress, uint256 principal, uint256 userFundsRemaining);\r\n  function withdrawPrincipal() public {\r\n    require(active == true, \"staking has not begun yet\");\r\n    uint256 withdrawalAmount = userDepositTotal[msg.sender];\r\n    userDepositTotal[msg.sender] = 0;\r\n    userFunds -= withdrawalAmount;\r\n    for (uint256 i = 0; i < userDeposits[msg.sender].length; i++) {\r\n        delete userDeposits[msg.sender][i];\r\n    }\r\n    NFTProtocol.transfer(msg.sender, withdrawalAmount);\r\n    emit WithdrawPrincipal(msg.sender, withdrawalAmount, userFunds);\r\n  }\r\n\r\n  event StakingBegins(uint256 timestamp, uint256 stakingFunds);\r\n  function beginStaking() external {\r\n    require(msg.sender == governance, \"only governance can begin staking\");\r\n    require(NFTProtocol.balanceOf(address(this)) == totalRewardSupply, \"not enough staking rewards\");\r\n    active = true;\r\n    startTime = block.timestamp;\r\n    cutoffTime = startTime + 60 days;\r\n    stakingFunds = totalRewardSupply;\r\n    emit StakingBegins(startTime, stakingFunds);\r\n  }\r\n\r\n  function getYieldMultiplier(uint256 daysStaked) public view returns(uint256) {\r\n    if (daysStaked >= 90) return rewardMultiplier.days90;\r\n    if (daysStaked >= 60) return rewardMultiplier.days60;\r\n    if (daysStaked >= 45) return rewardMultiplier.days45;\r\n    if (daysStaked >= 30) return rewardMultiplier.days30;\r\n    return 0;\r\n  }\r\n\r\n  function getUserYield(address userAddress) public view returns(uint256) {\r\n    uint256 totalYield;\r\n    for (uint256 i = 0; i < userDeposits[userAddress].length; i++) {\r\n      uint256 daysStaked = (block.timestamp - userDeposits[userAddress][i].depositTime) / 1 days;\r\n      uint256 yieldMultiplier = getYieldMultiplier(daysStaked);\r\n      totalYield += userDeposits[userAddress][i].amountNFT * 1 ether * yieldMultiplier / (1 ether * 100);\r\n    }\r\n    return totalYield;\r\n  }\r\n  \r\n  function getUserDeposits(address userAddress) external view returns(userDeposit[] memory) {\r\n    return userDeposits[userAddress];\r\n  }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFunds\",\"type\":\"uint256\"}],\"name\":\"StakingBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userFundsRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFundsRemaining\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userFundsRemaining\",\"type\":\"uint256\"}],\"name\":\"WithdrawPrincipal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allStakingUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.userDeposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysStaked\",\"type\":\"uint256\"}],\"name\":\"getYieldMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxContractStakingCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numUserDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"days30\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"days45\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"days60\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"days90\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDepositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userMaxDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cb8d1260f9c92a3a545d409466280ffdd7af7042","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb93e24da821f9d1d4db1fd1057fb26f4831e10be03b15c78f1f7006090a6661"}]}