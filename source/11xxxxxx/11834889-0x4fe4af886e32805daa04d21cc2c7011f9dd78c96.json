{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: unlicensed\r\n\r\npragma solidity ^0.5.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value); \r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { \r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable){\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount,\"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success,\"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom( IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance( IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance( IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value,\"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // solhint-disable-next-line max-line-length\r\n            require( abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() internal {\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor() internal {\r\n        address payable msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require( newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);    \r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function quote( uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n    function getAmountIn( uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n    function token1() external pure returns (address);\r\n    function getReserves() external view returns ( uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface Iuniswap {\r\n    function tokenToTokenTransferInput(    // converting ERC20 to ERC20 and transfer\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address recipient,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256 eth_bought);\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256 tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256 tokens_bought);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\ninterface IBFactory {\r\n    function isBPool(address b) external view returns (bool);\r\n}\r\n\r\ninterface IBPool {\r\n    function joinswapExternAmountIn(address tokenIn, uint256 tokenAmountIn, uint256 minPoolAmountOut) external payable returns (uint256 poolAmountOut);\r\n    function isBound(address t) external view returns (bool);\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n    function totalSupply() external view returns (uint256);\r\n    function getDenormalizedWeight(address token) external view returns (uint256);\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n    function getSwapFee() external view returns (uint256);\r\n    function getBalance(address token) external view returns (uint256);\r\n    function calcPoolOutGivenSingleIn(\r\n        uint256 tokenBalanceIn,\r\n        uint256 tokenWeightIn,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 tokenAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256 poolAmountOut);\r\n}\r\n\r\ninterface IBPool_Balancer_RemoveLiquidity_V1_1 {\r\n    function exitswapPoolAmountIn(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut) external payable returns (uint256 tokenAmountOut);\r\n    function totalSupply() external view returns (uint256);\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n    function getDenormalizedWeight(address token)external view returns (uint256);\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n    function getSwapFee() external view returns (uint256);\r\n    function isBound(address t) external view returns (bool);\r\n    function getBalance(address token) external view returns (uint256);\r\n    function calcSingleOutGivenPoolIn(\r\n        uint256 tokenBalanceOut,\r\n        uint256 tokenWeightOut,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 poolAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256 tokenAmountOut);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))),  \"TransferHelper: APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))),\"TransferHelper: TRANSFER_FAILED\"); \r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n    }\r\n}\r\n\r\ninterface ICurveRegistry {\r\n    function metaPools(address tokenAddress) external view returns (address swapAddress);\r\n    function getTokenAddress(address swapAddress) external view returns (address tokenAddress);\r\n    function getPoolTokens(address swapAddress) external view returns (address[4] memory poolTokens);\r\n    function isMetaPool(address swapAddress) external view returns (bool);\r\n    function getNumTokens(address swapAddress) external view returns (uint8 numTokens);\r\n    function isBtcPool(address swapAddress) external view returns (bool);\r\n    function isUnderlyingToken( address swapAddress, address tokenContractAddress) external view returns (bool, uint8);\r\n    function getIntermediateStableWithdraw(address swapAddress) external view returns (uint8 stableIndex, address stableAddress);  \r\n}\r\n\r\ninterface yERC20 {\r\n    function deposit(uint256 _amount) external;\r\n}\r\n\r\ninterface ICurveSwap {\r\n    function coins(int128 arg0) external view returns (address);\r\n    function coins(uint256 arg0) external view returns (address);\r\n    function balances(int128 arg0) external view returns (uint256);\r\n    function balances(uint256 arg0) external view returns (uint256);\r\n    function underlying_coins(int128 arg0) external view returns (address);\r\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n}\r\n\r\n\r\ncontract SushiswapRemoveLiquidity is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    bool public stopped = false;\r\n    uint16 public goodwill = 0;\r\n\r\n    address public goodwillAddress              = address(0);\r\n    uint256 private constant deadline           = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n    address private constant wethTokenAddress   = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);   \r\n\r\n    IUniswapV2Router02 private constant uniswapV2Router         = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Factory private constant UniSwapV2FactoryAddress  = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUniswapV2Router02 private constant sushiSwapRouter         = IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    IUniswapV2Factory private constant sushiSwapFactoryAddress  = IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    \r\n    constructor(uint16 _goodwill, address payable _goodwillAddress) public {\r\n        goodwill = _goodwill;\r\n        goodwillAddress = _goodwillAddress;\r\n    }\r\n\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function RemoveLiquidity2PairToken(address _FromSushiPoolAddress, uint256 _IncomingLP)public nonReentrant stopInEmergency returns (uint256 amountA, uint256 amountB){\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromSushiPoolAddress);\r\n\r\n        require(address(pair) != address(0),\"Error: Invalid Sushipool Address\");\r\n\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n\r\n        IERC20(_FromSushiPoolAddress).safeTransferFrom(msg.sender, address(this), _IncomingLP);\r\n\r\n        uint256 goodwillPortion = _transferGoodwill(_FromSushiPoolAddress, _IncomingLP);\r\n \r\n        IERC20(_FromSushiPoolAddress).safeApprove(address(sushiSwapRouter), SafeMath.sub(_IncomingLP, goodwillPortion));\r\n\r\n        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {\r\n            address _token = token0 == wethTokenAddress ? token1 : token0;\r\n            (amountA, amountB) = sushiSwapRouter.removeLiquidityETH(_token, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, msg.sender, deadline);\r\n        } else {\r\n            (amountA, amountB) = sushiSwapRouter.removeLiquidity(token0, token1, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, msg.sender, deadline); \r\n        }\r\n    }\r\n\r\n    function RemoveLiquidity(address _ToTokenContractAddress, address _FromSushiPoolAddress, uint256 _IncomingLP, uint256 _minTokensRec)public nonReentrant stopInEmergency returns (uint256) {  \r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromSushiPoolAddress);\r\n\r\n        require(address(pair) != address(0), \"Error: Invalid Sushipool Address\");  \r\n\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n\r\n        IERC20(_FromSushiPoolAddress).safeTransferFrom(msg.sender, address(this), _IncomingLP);\r\n \r\n        uint256 goodwillPortion = _transferGoodwill(_FromSushiPoolAddress, _IncomingLP);\r\n  \r\n        IERC20(_FromSushiPoolAddress).safeApprove(address(sushiSwapRouter), SafeMath.sub(_IncomingLP, goodwillPortion));\r\n \r\n        (uint256 amountA, uint256 amountB) = sushiSwapRouter.removeLiquidity(token0, token1, SafeMath.sub(_IncomingLP, goodwillPortion), 1, 1, address(this), deadline);\r\n \r\n        uint256 tokenBought;\r\n        if (canSwapFromV2(_ToTokenContractAddress, token0) && canSwapFromV2(_ToTokenContractAddress, token1)) {\r\n            tokenBought = swapFromV2(token0, _ToTokenContractAddress, amountA);\r\n            tokenBought += swapFromV2(token1, _ToTokenContractAddress, amountB);\r\n        } else if (canSwapFromV2(_ToTokenContractAddress, token0)) {\r\n            uint256 token0Bought = swapFromV2(token1, token0, amountB);\r\n            tokenBought = swapFromV2(token0, _ToTokenContractAddress, token0Bought.add(amountA));\r\n        } else if (canSwapFromV2(_ToTokenContractAddress, token1)) {\r\n            uint256 token1Bought = swapFromV2(token0, token1, amountA);\r\n            tokenBought = swapFromV2(token1, _ToTokenContractAddress, token1Bought.add(amountB));\r\n        }\r\n\r\n        require(tokenBought >= _minTokensRec, \"High slippage\");\r\n\r\n        if (_ToTokenContractAddress == address(0)) {\r\n            msg.sender.transfer(tokenBought);\r\n        } else {\r\n            IERC20(_ToTokenContractAddress).safeTransfer(msg.sender, tokenBought);\r\n        }\r\n\r\n        return tokenBought;\r\n    }\r\n\r\n    function RemoveLiquidity2PairTokenWithPermit(\r\n        address _FromSushiPoolAddress,\r\n        uint256 _IncomingLP,\r\n        uint256 _approvalAmount,\r\n        uint256 _deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {\r\n        IUniswapV2Pair(_FromSushiPoolAddress).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);\r\n        (amountA, amountB) = RemoveLiquidity2PairToken(_FromSushiPoolAddress, _IncomingLP);\r\n    }\r\n\r\n    function RemoveLiquidityWithPermit(\r\n        address _ToTokenContractAddress,\r\n        address _FromSushiPoolAddress,\r\n        uint256 _IncomingLP,\r\n        uint256 _minTokensRec,\r\n        uint256 _approvalAmount,\r\n        uint256 _deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external stopInEmergency returns (uint256) {\r\n        IUniswapV2Pair(_FromSushiPoolAddress).permit(msg.sender, address(this), _approvalAmount, _deadline, v, r, s);\r\n        return (RemoveLiquidity(_ToTokenContractAddress, _FromSushiPoolAddress, _IncomingLP, _minTokensRec));\r\n    }\r\n\r\n    function swapFromV2(address _fromToken, address _toToken, uint256 amount) internal returns (uint256) {\r\n        require(_fromToken != address(0) || _toToken != address(0), \"Invalid Exchange values\");\r\n        if (_fromToken == _toToken) return amount;\r\n        require(canSwapFromV2(_fromToken, _toToken), \"Cannot be exchanged\");\r\n        require(amount > 0, \"Invalid amount\");\r\n\r\n        if (_fromToken == address(0)) {\r\n            if (_toToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).deposit.value(amount)();\r\n                return amount;\r\n            }\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _toToken;\r\n            uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];\r\n            \r\n            minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);\r\n                \r\n            uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens.value(amount)(minTokens, path, address(this), deadline);\r\n                \r\n            return amounts[1];\r\n        } else if (_toToken == address(0)) {\r\n            if (_fromToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).withdraw(amount);\r\n                return amount;\r\n            }\r\n            address[] memory path = new address[](2);\r\n            IERC20(_fromToken).safeApprove(address(uniswapV2Router), amount);\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n            uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];\r\n            \r\n            minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);\r\n\r\n            uint256[] memory amounts = uniswapV2Router.swapExactTokensForETH(amount, minTokens, path, address(this), deadline);\r\n\r\n            return amounts[1];\r\n        } else {\r\n            IERC20(_fromToken).safeApprove(address(uniswapV2Router), amount);\r\n            uint256 returnedAmount = _swapTokenToTokenV2(_fromToken, _toToken, amount);\r\n            require(returnedAmount > 0, \"Error in swap\");\r\n            return returnedAmount;\r\n        }\r\n    }\r\n\r\n    function _swapTokenToTokenV2(address _fromToken, address _toToken, uint256 amount) internal returns (uint256) {\r\n        IUniswapV2Pair pair1 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));\r\n        IUniswapV2Pair pair2 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));\r\n        IUniswapV2Pair pair3 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, _toToken));\r\n            \r\n        uint256[] memory amounts;\r\n\r\n        if (_haveReserve(pair3)) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = _fromToken;\r\n            path[1] = _toToken;\r\n            uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[1];\r\n            minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(amount, minTokens, path, address(this), deadline);\r\n\r\n            return amounts[1];\r\n        } else if (_haveReserve(pair1) && _haveReserve(pair2)) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n            path[2] = _toToken;\r\n            uint256 minTokens = uniswapV2Router.getAmountsOut(amount, path)[2];\r\n            minTokens = SafeMath.div(SafeMath.mul(minTokens, SafeMath.sub(10000, 200)), 10000);\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(amount, minTokens, path, address(this), deadline);\r\n\r\n            return amounts[2];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function canSwapFromV2(address _fromToken, address _toToken) internal view returns (bool){\r\n        require(_fromToken != address(0) || _toToken != address(0), \"Invalid Exchange values\");\r\n \r\n        if (_fromToken == _toToken) return true;\r\n\r\n        if (_fromToken == address(0) || _fromToken == wethTokenAddress) {\r\n            if (_toToken == wethTokenAddress || _toToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));\r\n                \r\n            if (_haveReserve(pair)) return true;\r\n\r\n        } else if (_toToken == address(0) || _toToken == wethTokenAddress) {\r\n            if (_fromToken == wethTokenAddress || _fromToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));\r\n                \r\n            if (_haveReserve(pair)) return true;\r\n            \r\n        } else {\r\n            IUniswapV2Pair pair1 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress));\r\n            IUniswapV2Pair pair2 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress));  \r\n            IUniswapV2Pair pair3 = IUniswapV2Pair(UniSwapV2FactoryAddress.getPair(_fromToken, _toToken));\r\n                \r\n            if (_haveReserve(pair1) && _haveReserve(pair2)) return true;\r\n            if (_haveReserve(pair3)) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _haveReserve(IUniswapV2Pair pair) internal view returns (bool) {\r\n        if (address(pair) != address(0)) {\r\n            uint256 totalSupply = pair.totalSupply();\r\n            if (totalSupply > 0) return true;\r\n        }\r\n    }\r\n\r\n    function _transferGoodwill(address _tokenContractAddress, uint256 tokens2Trade) internal returns (uint256 goodwillPortion) {\r\n        if (goodwill == 0) {\r\n            return 0;\r\n        }\r\n\r\n        goodwillPortion = SafeMath.div(SafeMath.mul(tokens2Trade, goodwill), 10000);\r\n\r\n        IERC20(_tokenContractAddress).safeTransfer(goodwillAddress,goodwillPortion);\r\n    }\r\n\r\n    function setNewGoodwill(uint16 _new_goodwill) public onlyOwner {\r\n        require(_new_goodwill >= 0 && _new_goodwill < 10000, \"GoodWill Value not allowed\");\r\n        goodwill = _new_goodwill;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.safeTransfer(owner(), qty);\r\n    }\r\n\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = owner().toPayable();\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n    function setNewGoodwillAddress(address _newGoodwillAddress) public onlyOwner{\r\n        goodwillAddress = _newGoodwillAddress;\r\n    }\r\n\r\n    function() external payable {\r\n        require(msg.sender != tx.origin, \"Do not send ETH directly\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_goodwill\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_goodwillAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromSushiPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromSushiPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity2PairToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FromSushiPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"RemoveLiquidity2PairTokenWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ToTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FromSushiPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_IncomingLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"RemoveLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"goodwillAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_new_goodwill\",\"type\":\"uint16\"}],\"name\":\"setNewGoodwill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGoodwillAddress\",\"type\":\"address\"}],\"name\":\"setNewGoodwillAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SushiswapRemoveLiquidity","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098d895220f285b7acd3475f8e6ce5ef3129e6f78","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4497dc2a50c96626d10714ed172608eae32942a4c5dd497676981a56b45d17a7"}]}