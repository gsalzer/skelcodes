{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\npragma solidity ^0.8.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface IKeep3rV1Oracle {\r\n    function quote(address tokenIn, uint amountIn, address tokenOut, uint granularity) external view returns (uint);\r\n    function current(address tokenIn, uint amountIn, address tokenOut) external view returns (uint);\r\n}\r\n\r\n\r\ninterface ISushiswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\nlibrary SushiswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'SushiswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'SushiswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function sushiPairFor(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\r\n            )))));\r\n    }\r\n    \r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function uniPairFor(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            )))));\r\n    }\r\n\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address pair, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = ISushiswapV2Pair(pair).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n}\r\n\r\ninterface IChainLinkFeedsRegistry {\r\n    function getPriceETH(address tokenIn) external view returns (uint);\r\n}\r\n\r\ninterface ISwapV2Router02 {\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Keep3rV1OracleUSD  {\r\n    \r\n    struct LiquidityParams {\r\n        uint sReserveA;\r\n        uint sReserveB;\r\n        uint uReserveA;\r\n        uint uReserveB;\r\n        uint sLiquidity;\r\n        uint uLiquidity;\r\n    }\r\n    \r\n    struct QuoteParams {\r\n        uint quoteOut;\r\n        uint amountOut;\r\n        uint currentOut;\r\n        uint sTWAP;\r\n        uint uTWAP;\r\n        uint sCUR;\r\n        uint uCUR;\r\n        uint cl;\r\n    }\r\n    \r\n    IKeep3rV1Oracle public constant sushiswapV1Oracle = IKeep3rV1Oracle(0xf67Ab1c914deE06Ba0F264031885Ea7B276a7cDa);\r\n    IKeep3rV1Oracle public constant uniswapV1Oracle = IKeep3rV1Oracle(0x73353801921417F465377c8d898c6f4C0270282C);\r\n    \r\n    ISwapV2Router02 public constant sushiswapV2Router = ISwapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    ISwapV2Router02 public constant uniswapV2Router = ISwapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    \r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    \r\n    IChainLinkFeedsRegistry constant chainlink = IChainLinkFeedsRegistry(0x271bf4568fb737cc2e6277e9B1EE0034098cDA2a);\r\n\r\n    function assetToUsd(address tokenIn, uint amountIn, uint granularity) public view returns (QuoteParams memory q, LiquidityParams memory l) {\r\n        (q,) = assetToEth(tokenIn, amountIn, granularity);\r\n        return ethToUsd(q.amountOut, granularity);\r\n    }\r\n    \r\n    function assetToEth(address tokenIn, uint amountIn, uint granularity) public view returns (QuoteParams memory q, LiquidityParams memory l) {\r\n        q.sTWAP = sushiswapV1Oracle.quote(tokenIn, amountIn, WETH, granularity);\r\n        q.uTWAP = uniswapV1Oracle.quote(tokenIn, amountIn, WETH, granularity);\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = tokenIn;\r\n        _path[1] = WETH;\r\n        q.sCUR = amountIn * sushiswapV2Router.getAmountsOut(10 ** IERC20(tokenIn).decimals(), _path)[1] / 10 ** IERC20(tokenIn).decimals();\r\n        q.uCUR = amountIn * uniswapV2Router.getAmountsOut(10 ** IERC20(tokenIn).decimals(), _path)[1] / 10 ** IERC20(tokenIn).decimals();\r\n        q.cl = chainlink.getPriceETH(tokenIn) * amountIn / 10 ** IERC20(tokenIn).decimals();\r\n        l = getLiquidity(tokenIn, WETH);\r\n        \r\n        q.amountOut = (q.sTWAP * l.sLiquidity + q.uTWAP * l.uLiquidity) / (l.sLiquidity + l.uLiquidity);\r\n        q.currentOut = (q.sCUR * l.sLiquidity + q.uCUR * l.uLiquidity) / (l.sLiquidity + l.uLiquidity);\r\n        q.quoteOut = Math.min(Math.min(q.amountOut, q.currentOut), q.cl);\r\n    }\r\n    \r\n    function ethToAsset(uint amountIn, address tokenOut, uint granularity) public view returns (QuoteParams memory q, LiquidityParams memory l) {\r\n        q.sTWAP = sushiswapV1Oracle.quote(WETH, amountIn, tokenOut, granularity);\r\n        q.uTWAP = uniswapV1Oracle.quote(WETH, amountIn, tokenOut, granularity);\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = WETH;\r\n        _path[1] = tokenOut;\r\n        q.sCUR = amountIn * sushiswapV2Router.getAmountsOut(10 ** 18, _path)[1] / 10 ** 18;\r\n        q.uCUR = amountIn * uniswapV2Router.getAmountsOut(10 ** 18, _path)[1] / 10 ** 18;\r\n        \r\n        q.cl = amountIn * 10 ** 18 / chainlink.getPriceETH(tokenOut);\r\n        l = getLiquidity(WETH, tokenOut);\r\n        \r\n        q.amountOut = (q.sTWAP * l.sLiquidity + q.uTWAP * l.uLiquidity) / (l.sLiquidity + l.uLiquidity);\r\n        q.currentOut = (q.sCUR * l.sLiquidity + q.uCUR * l.uLiquidity) / (l.sLiquidity + l.uLiquidity);\r\n        q.quoteOut = Math.min(q.amountOut, q.currentOut);\r\n        q.quoteOut = Math.min(Math.min(q.amountOut, q.currentOut), q.cl);\r\n    }\r\n    \r\n    function ethToUsd(uint amountIn, uint granularity) public view returns (QuoteParams memory q, LiquidityParams memory l) {\r\n        return assetToAsset(WETH, amountIn, DAI, granularity);\r\n    }\r\n    \r\n    function pairFor(address tokenA, address tokenB) external pure returns (address sPair, address uPair) {\r\n        sPair = SushiswapV2Library.sushiPairFor(tokenA, tokenB);\r\n        uPair = SushiswapV2Library.uniPairFor(tokenA, tokenB);\r\n    }\r\n    \r\n    function sPairFor(address tokenA, address tokenB) external pure returns (address sPair) {\r\n        sPair = SushiswapV2Library.sushiPairFor(tokenA, tokenB);\r\n    }\r\n    \r\n    function uPairFor(address tokenA, address tokenB) external pure returns (address uPair) {\r\n        uPair = SushiswapV2Library.uniPairFor(tokenA, tokenB);\r\n    }\r\n    \r\n    function getLiquidity(address tokenA, address tokenB) public view returns (LiquidityParams memory l) {\r\n        address sPair = SushiswapV2Library.sushiPairFor(tokenA, tokenB);\r\n        address uPair = SushiswapV2Library.uniPairFor(tokenA, tokenB);\r\n        (l.sReserveA, l.sReserveB) =  SushiswapV2Library.getReserves(sPair, tokenA, tokenB);\r\n        (l.uReserveA, l.uReserveB) =  SushiswapV2Library.getReserves(uPair, tokenA, tokenB);\r\n        l.sLiquidity = l.sReserveA * l.sReserveB;\r\n        l.uLiquidity = l.uReserveA * l.uReserveB;\r\n    }\r\n    \r\n    function assetToAsset(address tokenIn, uint amountIn, address tokenOut, uint granularity) public view returns (QuoteParams memory q, LiquidityParams memory l) {\r\n        if (tokenIn == WETH) {\r\n            return ethToAsset(amountIn, tokenOut, granularity);\r\n        } else if (tokenOut == WETH) {\r\n            return assetToEth(tokenIn, amountIn, granularity);\r\n        } else {\r\n            (q,) = assetToEth(tokenIn, amountIn, granularity);\r\n            return ethToAsset(q.quoteOut, tokenOut, granularity);\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"assetToAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.QuoteParams\",\"name\":\"q\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"assetToEth\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.QuoteParams\",\"name\":\"q\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"assetToUsd\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.QuoteParams\",\"name\":\"q\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"ethToAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.QuoteParams\",\"name\":\"q\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"ethToUsd\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uTWAP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uCUR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cl\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.QuoteParams\",\"name\":\"q\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uReserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct Keep3rV1OracleUSD.LiquidityParams\",\"name\":\"l\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uPair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sPairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sPair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapV1Oracle\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapV2Router\",\"outputs\":[{\"internalType\":\"contract ISwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"uPairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uPair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV1Oracle\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract ISwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Keep3rV1OracleUSD","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e7a26cd6ce804395b4f2e453c83bff6f4c81704f8984cd6f40ecb0f5e0b6ca84"}]}