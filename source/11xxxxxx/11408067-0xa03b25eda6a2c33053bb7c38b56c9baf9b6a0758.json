{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.2 https://hardhat.org\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n//  Off-chain signature gathering multisig that streams funds - @austingriffith\r\n//\r\n// https://github.com/austintgriffith/scaffold-eth/tree/streaming-meta-multi-sig\r\n//\r\n// started from üèó scaffold-eth - meta-multi-sig-wallet example https://github.com/austintgriffith/scaffold-eth/tree/meta-multi-sig\r\n//    (off-chain signature based multi-sig)\r\n//  added a very simple streaming mechanism where `onlySelf` can open a withdraw-based stream\r\n//\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n// File @openzeppelin/contracts/cryptography/ECDSA.sol@v3.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n √∑ 2 + 1, and for v in (282): v ‚àà {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StreamingMetaMultiSigWallet.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n//  Off-chain signature gathering multisig that streams funds - @austingriffith\r\n//\r\n// started from üèó scaffold-eth - meta-multi-sig-wallet example https://github.com/austintgriffith/scaffold-eth/tree/meta-multi-sig\r\n//    (off-chain signature based multi-sig)\r\n//  added a very simple streaming mechanism where `onlySelf` can open a withdraw-based stream\r\n//\r\n\r\npragma solidity ^0.6.7;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract StreamingMetaMultiSigWallet {\r\n    using ECDSA for bytes32;\r\n\r\n    event Deposit(address indexed sender, uint amount, uint balance);\r\n    event ExecuteTransaction( address indexed owner, address payable to, uint256 value, bytes data, uint256 nonce, bytes32 hash, bytes result);\r\n    event Owner( address indexed owner, bool added);\r\n\r\n    mapping(address => bool) public isOwner;\r\n    uint public signaturesRequired;\r\n    uint public nonce;\r\n    uint public chainId;\r\n\r\n    constructor(uint256 _chainId, address[] memory _owners, uint _signaturesRequired) public {\r\n        require(_signaturesRequired>0,\"constructor: must be non-zero sigs required\");\r\n        signaturesRequired = _signaturesRequired;\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n            require(owner!=address(0), \"constructor: zero address\");\r\n            require(!isOwner[owner], \"constructor: owner not unique\");\r\n            isOwner[owner] = true;\r\n            emit Owner(owner,isOwner[owner]);\r\n        }\r\n        chainId=_chainId;\r\n    }\r\n\r\n    modifier onlySelf() {\r\n        require(msg.sender == address(this), \"Not Self\");\r\n        _;\r\n    }\r\n\r\n    function addSigner(address newSigner, uint256 newSignaturesRequired) public onlySelf {\r\n        require(newSigner!=address(0), \"addSigner: zero address\");\r\n        require(!isOwner[newSigner], \"addSigner: owner not unique\");\r\n        require(newSignaturesRequired>0,\"addSigner: must be non-zero sigs required\");\r\n        isOwner[newSigner] = true;\r\n        signaturesRequired = newSignaturesRequired;\r\n        emit Owner(newSigner,isOwner[newSigner]);\r\n    }\r\n\r\n    function removeSigner(address oldSigner, uint256 newSignaturesRequired) public onlySelf {\r\n        require(isOwner[oldSigner], \"removeSigner: not owner\");\r\n        require(newSignaturesRequired>0,\"removeSigner: must be non-zero sigs required\");\r\n        isOwner[oldSigner] = false;\r\n        signaturesRequired = newSignaturesRequired;\r\n        emit Owner(oldSigner,isOwner[oldSigner]);\r\n    }\r\n\r\n    function updateSignaturesRequired(uint256 newSignaturesRequired) public onlySelf {\r\n        require(newSignaturesRequired>0,\"updateSignaturesRequired: must be non-zero sigs required\");\r\n        signaturesRequired = newSignaturesRequired;\r\n    }\r\n\r\n    function getTransactionHash( uint256 _nonce, address to, uint256 value, bytes memory data ) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(address(this),chainId,_nonce,to,value,data));\r\n    }\r\n\r\n    function executeTransaction( address payable to, uint256 value, bytes memory data, bytes[] memory signatures)\r\n        public\r\n        returns (bytes memory)\r\n    {\r\n        require(isOwner[msg.sender], \"executeTransaction: only owners can execute\");\r\n        bytes32 _hash =  getTransactionHash(nonce, to, value, data);\r\n        nonce++;\r\n        uint256 validSignatures;\r\n        address duplicateGuard;\r\n        for (uint i = 0; i < signatures.length; i++) {\r\n            address recovered = recover(_hash,signatures[i]);\r\n            require(recovered>duplicateGuard, \"executeTransaction: duplicate or unordered signatures\");\r\n            duplicateGuard = recovered;\r\n            if(isOwner[recovered]){\r\n              validSignatures++;\r\n            }\r\n        }\r\n\r\n        require(validSignatures>=signaturesRequired, \"executeTransaction: not enough valid signatures\");\r\n\r\n        (bool success, bytes memory result) = to.call{value: value}(data);\r\n        require(success, \"executeTransaction: tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, to, value, data, nonce-1, _hash, result);\r\n        return result;\r\n    }\r\n\r\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\r\n        return _hash.toEthSignedMessageHash().recover(_signature);\r\n    }\r\n\r\n    receive() payable external {\r\n        emit Deposit(msg.sender, msg.value, address(this).balance);\r\n    }\r\n\r\n    //\r\n    //  new streaming stuff\r\n    //\r\n\r\n    event OpenStream( address indexed to, uint256 amount, uint256 frequency );\r\n    event CloseStream( address indexed to );\r\n    event Withdraw( address indexed to, uint256 amount, string reason );\r\n\r\n    struct Stream {\r\n        uint256 amount;\r\n        uint256 frequency;\r\n        uint256 last;\r\n    }\r\n    mapping(address => Stream) public streams;\r\n\r\n    function streamWithdraw(uint256 amount, string memory reason) public {\r\n        require(streams[msg.sender].amount>0,\"withdraw: no open stream\");\r\n        _streamWithdraw(msg.sender,amount,reason);\r\n    }\r\n\r\n    function _streamWithdraw(address payable to, uint256 amount, string memory reason) private {\r\n        uint256 totalAmountCanWithdraw = streamBalance(to);\r\n        require(totalAmountCanWithdraw>=amount,\"withdraw: not enough\");\r\n        streams[to].last = streams[to].last + ((block.timestamp - streams[to].last) * amount / totalAmountCanWithdraw);\r\n        emit Withdraw( to, amount, reason );\r\n        to.transfer(amount);\r\n    }\r\n\r\n    function streamBalance(address to) public view returns (uint256){\r\n      return (streams[to].amount * (block.timestamp-streams[to].last)) / streams[to].frequency;\r\n    }\r\n\r\n    function openStream(address to, uint256 amount, uint256 frequency) public onlySelf {\r\n        require(streams[to].amount==0,\"openStream: stream already open\");\r\n        require(amount>0,\"openStream: no amount\");\r\n        require(frequency>0,\"openStream: no frequency\");\r\n\r\n        streams[to].amount = amount;\r\n        streams[to].frequency = frequency;\r\n        streams[to].last = block.timestamp;\r\n\r\n        emit OpenStream( to, amount, frequency );\r\n    }\r\n\r\n    function closeStream(address to) public onlySelf {\r\n        require(streams[to].amount>0,\"closeStream: stream already closed\");\r\n        _streamWithdraw(address(uint160(to)),streams[to].amount,\"stream closed\");\r\n        delete streams[to];\r\n        emit CloseStream( to );\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_signaturesRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CloseStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"}],\"name\":\"OpenStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"closeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"}],\"name\":\"openStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"streamBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"streamWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"streams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSignaturesRequired\",\"type\":\"uint256\"}],\"name\":\"updateSignaturesRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StreamingMetaMultiSigWallet","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000007a69000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d75b0609ed51307e13bae0f9394b5f63a7f8b6a1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9d77e7e1f8a60db52fda0c265add3fb244d831d6b8128539f3b0bb5a50182e27"}]}