{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\WUSD\\util\\IEthItemOrchestrator.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IEthItemOrchestrator {\r\n    function createNative(bytes calldata modelInitPayload, string calldata ens)\r\n        external\r\n        returns (address newNativeAddress, bytes memory modelInitCallResponse);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC1155.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC1155 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IEthItemInteroperableInterface.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IEthItemInteroperableInterface is IERC20 {\r\n\r\n    function mainInterface() external view returns (address);\r\n\r\n    function objectId() external view returns (uint256);\r\n\r\n    function mint(address owner, uint256 amount) external;\r\n\r\n    function burn(address owner, uint256 amount) external;\r\n\r\n    function permitNonce(address sender) external view returns(uint256);\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IEthItem.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\n\r\ninterface IEthItem is IERC1155 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply(uint256 objectId) external view returns (uint256);\r\n\r\n    function name(uint256 objectId) external view returns (string memory);\r\n\r\n    function symbol(uint256 objectId) external view returns (string memory);\r\n\r\n    function decimals(uint256 objectId) external view returns (uint256);\r\n\r\n    function uri(uint256 objectId) external view returns (string memory);\r\n\r\n    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\r\n\r\n    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\r\n\r\n    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\r\n\r\n    function interoperableInterfaceModel() external view returns (address, uint256);\r\n\r\n    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\r\n\r\n    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\r\n\r\n    function mint(uint256 amount, string calldata partialUri)\r\n        external\r\n        returns (uint256, address);\r\n\r\n    function burn(\r\n        uint256 objectId,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnBatch(\r\n        uint256[] calldata objectIds,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\INativeV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface INativeV1 is IEthItem {\r\n\r\n    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\r\n\r\n    function extension() external view returns (address extensionAddress);\r\n\r\n    function canMint(address operator) external view returns (bool result);\r\n\r\n    function isEditable(uint256 objectId) external view returns (bool result);\r\n\r\n    function releaseExtension() external;\r\n\r\n    function uri() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\r\n\r\n    function mint(uint256 objectId, uint256 amount) external;\r\n\r\n    function makeReadOnly(uint256 objectId) external;\r\n\r\n    function setUri(string calldata newUri) external;\r\n\r\n    function setUri(uint256 objectId, string calldata newUri) external;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\amm-aggregator\\common\\IAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IAMM {\r\n\r\n    event NewLiquidityPoolAddress(address indexed);\r\n\r\n    function info() external view returns(string memory name, uint256 version);\r\n\r\n    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\r\n\r\n    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\r\n\r\n    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\r\n\r\n    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\r\n\r\n    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\r\n\r\n    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\r\n    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\r\n    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\r\n\r\n    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\r\n\r\n    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\r\n    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\r\n}\r\n\r\n// File: contracts\\WUSD\\AllowedAMM.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nstruct AllowedAMM {\r\n    address ammAddress;\r\n    address[] liquidityPools;\r\n}\r\n\r\n// File: contracts\\WUSD\\WUSDExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WUSDExtension {\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n\r\n    address private _controller;\r\n\r\n    address private _collection;\r\n\r\n    uint256 private _mainItemObjectId;\r\n    address private _mainItemInteroperableAddress;\r\n\r\n    constructor(address orchestrator) {\r\n        _controller = msg.sender;\r\n        (_collection,) = IEthItemOrchestrator(orchestrator).createNative(abi.encodeWithSignature(\"init(string,string,bool,string,address,bytes)\", \"Covenants Wrapped USD\", \"WUSD\", true, \"ipfs://ipfs/QmbFb9QdwSV1i8F1FhvBoL7XuCU7D1wRTLRRi23Zvu8Z9J\", address(this), \"\"), \"\");\r\n        (_mainItemObjectId, _mainItemInteroperableAddress) = _mintEmpty(\"Wrapped USD\", \"WUSD\", \"ipfs://ipfs/QmTj9k7vq8DqLFuS3TrGGNDaacHL2cTgLjJ6Tu8ZbKwTHm\", true);\r\n    }\r\n\r\n    function collection() public view returns (address) {\r\n        return _collection;\r\n    }\r\n\r\n    function data() public view returns (address, uint256, address) {\r\n        return (_collection, _mainItemObjectId, _mainItemInteroperableAddress);\r\n    }\r\n\r\n    function controller() public view returns (address) {\r\n        return _controller;\r\n    }\r\n\r\n    modifier controllerOnly() {\r\n        require(msg.sender == _controller, \"Unauthorized action\");\r\n        _;\r\n    }\r\n\r\n    function mintEmpty(string memory tokenName, string memory tokenSymbol, string memory objectUri, bool editable) public controllerOnly returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        return _mintEmpty(tokenName, tokenSymbol, objectUri, editable);\r\n    }\r\n\r\n    function _mintEmpty(string memory tokenName, string memory tokenSymbol, string memory objectUri, bool editable) private returns(uint256 objectId, address interoperableInterfaceAddress) {\r\n        INativeV1 theCollection = INativeV1(_collection);\r\n        (objectId, interoperableInterfaceAddress) = theCollection.mint(10**18, tokenName, tokenSymbol, objectUri, editable);\r\n        theCollection.burn(objectId, theCollection.balanceOf(address(this), objectId));\r\n    }\r\n\r\n    function setCollectionUri(string memory uri) public controllerOnly {\r\n        INativeV1(_collection).setUri(uri);\r\n    }\r\n\r\n    function setItemUri(uint256 existingObjectId, string memory uri) public controllerOnly {\r\n        INativeV1(_collection).setUri(existingObjectId, uri);\r\n    }\r\n\r\n    function makeReadOnly(uint256 objectId) public controllerOnly {\r\n        INativeV1(_collection).makeReadOnly(objectId);\r\n    }\r\n\r\n    function mintFor(address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount, address receiver) public controllerOnly {\r\n        _safeTransferFrom(liquidityPoolAddress, msg.sender, address(this), liquidityPoolAmount);\r\n        _mint(_mainItemObjectId, _normalizeAndSumAmounts(ammPlugin, liquidityPoolAddress, liquidityPoolAmount), receiver);\r\n    }\r\n\r\n    function mintForRebalanceByCredit(AllowedAMM[] memory amms) public controllerOnly returns(uint256 credit) {\r\n        uint256 totalSupply = INativeV1(_collection).totalSupply(_mainItemObjectId);\r\n        for(uint256 i = 0; i < amms.length; i++) {\r\n            for(uint256 j = 0; j < amms[i].liquidityPools.length; j++) {\r\n                credit += _normalizeAndSumAmounts(amms[i].ammAddress, amms[i].liquidityPools[j], IERC20(amms[i].liquidityPools[j]).balanceOf(address(this)));\r\n            }\r\n        }\r\n        require(credit > totalSupply, \"No credit\");\r\n        _mint(_mainItemObjectId, credit = (credit - totalSupply), msg.sender);\r\n    }\r\n\r\n    function burnFor(uint256 objectId, uint256 value, address receiver) public controllerOnly {\r\n        _safeTransferFrom(_mainItemInteroperableAddress, msg.sender, address(this), INativeV1(_collection).toInteroperableInterfaceAmount(_mainItemObjectId, value));\r\n        INativeV1(_collection).burn(_mainItemObjectId, value);\r\n        _mint(objectId, value, receiver);\r\n    }\r\n\r\n    function _mint(uint256 objectId, uint256 amount, address receiver) private {\r\n        INativeV1(_collection).mint(objectId, amount);\r\n        INativeV1(_collection).safeTransferFrom(address(this), receiver, objectId, INativeV1(_collection).balanceOf(address(this), objectId), \"\");\r\n    }\r\n\r\n    function burnFor(address from, uint256 value, address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount, address liquidityPoolReceiver) public controllerOnly {\r\n        _safeTransferFrom(_mainItemInteroperableAddress, msg.sender, address(this), INativeV1(_collection).toInteroperableInterfaceAmount(_mainItemObjectId, value));\r\n        uint256 toBurn = _normalizeAndSumAmounts(ammPlugin, liquidityPoolAddress, liquidityPoolAmount);\r\n        require(value >= toBurn, \"Insufficient Amount\");\r\n        if(value > toBurn) {\r\n            INativeV1(_collection).safeTransferFrom(address(this), from, _mainItemObjectId, value - toBurn, \"\");\r\n        }\r\n        INativeV1(_collection).burn(_mainItemObjectId, toBurn);\r\n        _safeTransfer(liquidityPoolAddress, liquidityPoolReceiver, liquidityPoolAmount);\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n\r\n    function _normalizeAndSumAmounts(address ammPlugin, address liquidityPoolAddress, uint256 liquidityPoolAmount)\r\n        private\r\n        view\r\n        returns(uint256 amount) {\r\n            IERC20 liquidityPool = IERC20(liquidityPoolAddress);\r\n            (uint256[] memory amounts, address[] memory tokens) = IAMM(ammPlugin).byLiquidityPoolAmount(address(liquidityPool), liquidityPoolAmount);\r\n            for(uint256 i = 0; i < amounts.length; i++) {\r\n                amount += _normalizeTokenAmountToDefaultDecimals(tokens[i], amounts[i]);\r\n            }\r\n    }\r\n\r\n    function _normalizeTokenAmountToDefaultDecimals(address tokenAddress, uint256 amount) internal virtual view returns(uint256) {\r\n        uint256 remainingDecimals = DECIMALS;\r\n        IERC20 token = IERC20(tokenAddress);\r\n        remainingDecimals -= token.decimals();\r\n\r\n        if(remainingDecimals == 0) {\r\n            return amount;\r\n        }\r\n\r\n        return amount * (remainingDecimals == 0 ? 1 : (10**remainingDecimals));\r\n    }\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\DFOHub.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\ERC1155Receiver.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract ERC1155Receiver {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n        _registerInterface(\r\n            ERC1155Receiver(0).onERC1155Received.selector ^\r\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\r\n        );\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        virtual\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts\\WUSD\\util\\IERC20WrapperV1.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IERC20WrapperV1 is IEthItem {\r\n\r\n    function source(uint256 objectId) external view returns (address erc20TokenAddress);\r\n\r\n    function object(address erc20TokenAddress) external view returns (uint256 objectId);\r\n\r\n    function mint(address erc20TokenAddress, uint256 amount) external returns (uint256 objectId, address wrapperAddress);\r\n\r\n    function mintETH() external payable returns (uint256 objectId, address wrapperAddress);\r\n}\r\n\r\n// File: contracts\\WUSD\\IWUSDNoteController.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n\r\ninterface IWUSDNoteController {\r\n\r\n    function wusdCollection() external view returns(address);\r\n    function wusdObjectId() external view returns(uint256);\r\n    function wusdNoteObjectId() external view returns(uint256);\r\n    function multiplier() external view returns(uint256);\r\n\r\n    function info() external view returns(address, uint256, uint256, uint256);\r\n\r\n    function init(address _wusdCollection, uint256 _wusdObjectId, uint256 _wusdNoteObjectId, uint256 _multiplier) external;\r\n}\r\n\r\n// File: contracts\\WUSD\\IWUSDExtensionController.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\ninterface IWUSDExtensionController {\r\n\r\n    function rebalanceByCreditBlockInterval() external view returns(uint256);\r\n\r\n    function lastRebalanceByCreditBlock() external view returns(uint256);\r\n\r\n    function wusdInfo() external view returns (address, uint256, address);\r\n}\r\n\r\n// File: contracts\\WUSD\\WUSDExtensionController.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WUSDExtensionController is IWUSDExtensionController, ERC1155Receiver {\r\n\r\n    uint256 public constant ONE_HUNDRED = 1e18;\r\n\r\n    uint256 private constant DECIMALS = 18;\r\n\r\n    address private _doubleProxy;\r\n\r\n    uint256 public override rebalanceByCreditBlockInterval;\r\n\r\n    address private _extension;\r\n\r\n    address private _collection;\r\n\r\n    uint256 private _wusdObjectId;\r\n    address private _wusdInteroperableInterfaceAddress;\r\n\r\n    uint256 private _wusdNote2ObjectId;\r\n    address private _wusdNote2InteroperableInterfaceAddress;\r\n    address private _wusdNote2Controller;\r\n    uint256 private _wusdNote2Percentage;\r\n\r\n    uint256 private _wusdNote5ObjectId;\r\n    address private _wusdNote5InteroperableInterfaceAddress;\r\n    address private _wusdNote5Controller;\r\n    uint256 private _wusdNote5Percentage;\r\n\r\n    uint256 public override lastRebalanceByCreditBlock;\r\n\r\n    AllowedAMM[] private _allowedAMMs;\r\n\r\n    uint256[] private _rebalanceByCreditPercentages;\r\n\r\n    address[] private _rebalanceByCreditReceivers;\r\n\r\n    uint256 private _rebalanceByCreditPercentageForCaller;\r\n\r\n    uint256 public maximumPairRatioForMint;\r\n\r\n    uint256 public maximumPairRatioForBurn;\r\n\r\n    uint256 public minimumRebalanceByDebtAmount;\r\n\r\n    struct WUSDInitializer {\r\n        address orchestratorAddress;\r\n        address doubleProxyAddress;\r\n        uint256 rebalanceByCreditPercentageForCaller;\r\n        uint256 wusdNote2Percentage;\r\n        uint256 wusdNote5Percentage;\r\n        uint256 maximumPairRatioForMint;\r\n        uint256 maximumPairRatioForBurn;\r\n        uint256 minimumRebalanceByDebtAmount;\r\n        uint256 rebalanceByCreditBlockInterval;\r\n    }\r\n\r\n    constructor(bytes memory wusdInitializerBytes) {\r\n        WUSDInitializer memory wusdInitializer = abi.decode(wusdInitializerBytes, (WUSDInitializer));\r\n        _doubleProxy = wusdInitializer.doubleProxyAddress;\r\n        rebalanceByCreditBlockInterval = wusdInitializer.rebalanceByCreditBlockInterval;\r\n        maximumPairRatioForMint = wusdInitializer.maximumPairRatioForMint;\r\n        maximumPairRatioForBurn = wusdInitializer.maximumPairRatioForBurn;\r\n        minimumRebalanceByDebtAmount = minimumRebalanceByDebtAmount;\r\n        require(\r\n            ((_wusdNote2Percentage = wusdInitializer.wusdNote2Percentage) +\r\n            (_wusdNote5Percentage = wusdInitializer.wusdNote5Percentage) +\r\n            (_rebalanceByCreditPercentageForCaller = wusdInitializer.rebalanceByCreditPercentageForCaller))\r\n            <= ONE_HUNDRED, \"More than one hundred\");\r\n        (_collection, _wusdObjectId, _wusdInteroperableInterfaceAddress) = WUSDExtension(_extension = address(new WUSDExtension(wusdInitializer.orchestratorAddress))).data();\r\n    }\r\n\r\n    function finalizeInitialization(bytes memory allowedAMMS, address[] memory controllers) public {\r\n        require(_wusdNote2InteroperableInterfaceAddress == address(0), \"already init\");\r\n        _setAllowedAMMs(allowedAMMS);\r\n        WUSDExtension wusdExtension = WUSDExtension(_extension);\r\n        (_wusdNote2ObjectId, _wusdNote2InteroperableInterfaceAddress) = wusdExtension.mintEmpty(\"2x Wrapped USD\", \"2xUSD\", \"ipfs://ipfs/QmWgkBQdDHEr2WzA4GJNuED3sD9SYzRiknV7qXnGJgiRNP\", true);\r\n        (_wusdNote5ObjectId, _wusdNote5InteroperableInterfaceAddress) = wusdExtension.mintEmpty(\"5x Wrapped USD\", \"5xUSD\", \"ipfs://ipfs/QmU3wEzZ6kdnigXKYbgnrEnpQMwPfNqEhFEXXR1YBZvZeN\", true);\r\n        IWUSDNoteController(_wusdNote2Controller = controllers[0]).init(_collection, _wusdObjectId, _wusdNote2ObjectId, 2);\r\n        IWUSDNoteController(_wusdNote5Controller = controllers[1]).init(_collection, _wusdObjectId, _wusdNote5ObjectId, 5);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function _checkNoteController(address noteController, uint256 wusdNoteObjectIdInput, uint256 multiplierInput) private {\r\n        (address collectionAddress, uint256 wusdObjectId, uint256 wusdNoteObjectId, uint256 multiplier) = IWUSDNoteController(noteController).info();\r\n        if(collectionAddress == address(0)) {\r\n            IWUSDNoteController(noteController).init(_collection, _wusdObjectId, wusdNoteObjectIdInput, multiplierInput);\r\n            (collectionAddress, wusdObjectId, wusdNoteObjectId, multiplier) = IWUSDNoteController(noteController).info();\r\n        }\r\n        require(collectionAddress == _collection, \"Wrong collection\");\r\n        require(wusdObjectId == _wusdObjectId, \"Wrong WUSD Object Id\");\r\n        require(wusdNoteObjectId == wusdNoteObjectIdInput, \"Wrong WUSD Note Object Id\");\r\n        require(multiplier == multiplierInput, \"Wrong WUSD Note multiplier\");\r\n    }\r\n\r\n    function _setRebalanceByCreditData(address[] memory rebalanceByCreditReceivers, uint256[] memory rebalanceByCreditPercentages, uint256 rebalanceByCreditPercentageForCaller) private {\r\n        require((_rebalanceByCreditPercentages = rebalanceByCreditPercentages).length == (_rebalanceByCreditReceivers = rebalanceByCreditReceivers).length, \"Invalid lengths\");\r\n        uint256 percentage = _rebalanceByCreditPercentageForCaller = rebalanceByCreditPercentageForCaller + _wusdNote2Percentage + _wusdNote5Percentage;\r\n        for(uint256 i = 0; i < rebalanceByCreditReceivers.length; i++) {\r\n            require(rebalanceByCreditReceivers[i] != address(0), \"Void address\");\r\n            require(rebalanceByCreditPercentages[i] > 0, \"Zero percentage\");\r\n            percentage += rebalanceByCreditPercentages[i];\r\n        }\r\n        require(percentage <= ONE_HUNDRED, \"More than one hundred\");\r\n        _rebalanceByCreditPercentages = rebalanceByCreditPercentages;\r\n        _rebalanceByCreditReceivers = rebalanceByCreditReceivers;\r\n    }\r\n\r\n    function _setAllowedAMMs(bytes memory data) private {\r\n        AllowedAMM[] memory amms = abi.decode(data, (AllowedAMM[]));\r\n        delete _allowedAMMs;\r\n        for(uint256 i = 0; i < amms.length; i++) {\r\n            _allowedAMMs.push(amms[i]);\r\n        }\r\n    }\r\n\r\n    function doubleProxy() public view returns (address) {\r\n        return _doubleProxy;\r\n    }\r\n\r\n    function extension() public view returns (address) {\r\n        return _extension;\r\n    }\r\n\r\n    function collection() public view returns (address) {\r\n        return _collection;\r\n    }\r\n\r\n    function wusdInfo() public override view returns (address, uint256, address) {\r\n        return (_collection, _wusdObjectId, _wusdInteroperableInterfaceAddress);\r\n    }\r\n\r\n    function wusdNote2Info() public view returns (address, uint256, address, address, uint256) {\r\n        return (_collection, _wusdNote2ObjectId, _wusdNote2InteroperableInterfaceAddress, _wusdNote2Controller, _wusdNote2Percentage);\r\n    }\r\n\r\n    function wusdNote5Info() public view returns (address, uint256, address, address, uint256) {\r\n        return (_collection, _wusdNote5ObjectId, _wusdNote5InteroperableInterfaceAddress, _wusdNote5Controller, _wusdNote5Percentage);\r\n    }\r\n\r\n    function rebalanceByCreditReceiversInfo() public view returns (address[] memory, uint256[] memory, uint256, address) {\r\n        return (_rebalanceByCreditReceivers, _rebalanceByCreditPercentages, _rebalanceByCreditPercentageForCaller, IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress());\r\n    }\r\n\r\n    modifier byDFO virtual {\r\n        require(_isFromDFO(msg.sender), \"Unauthorized action\");\r\n        _;\r\n    }\r\n\r\n    function _isFromDFO(address sender) private view returns(bool) {\r\n        return IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender);\r\n    }\r\n\r\n    function setDoubleProxy(address newDoubleProxy) public byDFO {\r\n        _doubleProxy = newDoubleProxy;\r\n    }\r\n\r\n    function setRebalanceByCreditData(address[] memory rebalanceByCreditReceivers, uint256[] memory rebalanceByCreditPercentages, uint256 rebalanceByCreditPercentageForCaller) public byDFO {\r\n        _setRebalanceByCreditData(rebalanceByCreditReceivers, rebalanceByCreditPercentages, rebalanceByCreditPercentageForCaller);\r\n    }\r\n\r\n    function setCollectionUri(string memory uri) public byDFO {\r\n        WUSDExtension(_extension).setCollectionUri(uri);\r\n    }\r\n\r\n    function setItemUri(uint256 existingObjectId, string memory uri) public byDFO {\r\n        WUSDExtension(_extension).setItemUri(existingObjectId, uri);\r\n    }\r\n\r\n    function setrebalanceByCreditBlockInterval(uint256 newrebalanceByCreditBlockInterval) public byDFO {\r\n        rebalanceByCreditBlockInterval = newrebalanceByCreditBlockInterval;\r\n    }\r\n\r\n    function setMinimumRebalanceByDebtAmount(uint256 newMinimumRebalanceByDebtAmount) public byDFO {\r\n        minimumRebalanceByDebtAmount = newMinimumRebalanceByDebtAmount;\r\n    }\r\n\r\n    function setMaximumPairRatioForMint(uint256 newMaximumPairRatioForMint) public byDFO {\r\n        maximumPairRatioForMint = newMaximumPairRatioForMint;\r\n    }\r\n\r\n    function setMaximumPairRatioForBurn(uint256 newMaximumPairRatioForBurn) public byDFO {\r\n        maximumPairRatioForBurn = newMaximumPairRatioForBurn;\r\n    }\r\n\r\n    function allowedAMMs() public view returns(AllowedAMM[] memory) {\r\n        return _allowedAMMs;\r\n    }\r\n\r\n    function setAllowedAMMs(AllowedAMM[] memory newAllowedAMMs) public byDFO {\r\n        _setAllowedAMMs(abi.encode(newAllowedAMMs));\r\n    }\r\n\r\n    function differences()\r\n        public\r\n        view\r\n        returns (uint256 credit, uint256 debt)\r\n    {\r\n        uint256 totalSupply = INativeV1(_collection).totalSupply(_wusdObjectId);\r\n        uint256 effectiveAmount = 0;\r\n        for(uint256 i = 0; i < _allowedAMMs.length; i++) {\r\n            for(uint256 j = 0; j < _allowedAMMs[i].liquidityPools.length; j++) {\r\n                effectiveAmount += _normalizeAndSumAmounts(i, j, 0);\r\n            }\r\n        }\r\n        credit = effectiveAmount > totalSupply\r\n            ? effectiveAmount - totalSupply\r\n            : 0;\r\n        debt = totalSupply > effectiveAmount\r\n            ? totalSupply - effectiveAmount\r\n            : 0;\r\n    }\r\n\r\n    function fromTokenToStable(address tokenAddress, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 tokenDecimals = token.decimals();\r\n        uint256 remainingDecimals = DECIMALS - tokenDecimals;\r\n        uint256 result = amount == 0 ? token.balanceOf(_extension) : amount;\r\n        if (remainingDecimals == 0) {\r\n            return result;\r\n        }\r\n        return result * 10**remainingDecimals;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n            require(msg.sender == _collection, \"Only WUSD collection allowed here\");\r\n            _onSingleReceived(from, id, value, data);\r\n            return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory values,\r\n        bytes memory data\r\n    )\r\n        public\r\n        override\r\n        returns(bytes4) {\r\n\r\n        require(msg.sender == _collection, \"Only WUSD collection allowed here\");\r\n        bytes[] memory payloads = abi.decode(data, (bytes[]));\r\n        require(payloads.length == ids.length, \"Wrong payloads length\");\r\n        for(uint256 i = 0; i < ids.length; i++) {\r\n            _onSingleReceived(from, ids[i], values[i], payloads[i]);\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function _onSingleReceived(\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data) private {\r\n            require(id == _wusdObjectId, \"Only WUSD id allowed here\");\r\n            if(from == _extension) {\r\n                return;\r\n            }\r\n            (uint256 action, bytes memory payload) = abi.decode(data, (uint256, bytes));\r\n            if(action == 1) {\r\n                _rebalanceByDebt(from, value, payload);\r\n            } else {\r\n                _burn(from, value, payload);\r\n            }\r\n    }\r\n\r\n    function _burn(address from, uint256 value, bytes memory payload) private {\r\n        (uint256 ammPosition, uint256 liquidityPoolPosition, uint256 liquidityPoolAmount, bool keepLiquidityPool) = abi.decode(payload, (uint256, uint256, uint256, bool));\r\n        _safeApprove(_wusdInteroperableInterfaceAddress, _extension, INativeV1(_collection).toInteroperableInterfaceAmount(_wusdObjectId, value));\r\n        IAMM amm = IAMM(_allowedAMMs[ammPosition].ammAddress);\r\n        address liquidityPoolAddress = _allowedAMMs[ammPosition].liquidityPools[liquidityPoolPosition];\r\n        _checkMaximumPairRatio(amm, liquidityPoolAddress, liquidityPoolAmount, maximumPairRatioForBurn);\r\n        WUSDExtension(_extension).burnFor(from, value, _allowedAMMs[ammPosition].ammAddress, _allowedAMMs[ammPosition].liquidityPools[liquidityPoolPosition], liquidityPoolAmount, keepLiquidityPool ? from : address(this));\r\n        if(!keepLiquidityPool) {\r\n            _checkAllowance(liquidityPoolAddress, liquidityPoolAmount, address(amm));\r\n            amm.removeLiquidity(LiquidityPoolData(\r\n                liquidityPoolAddress,\r\n                liquidityPoolAmount,\r\n                address(0),\r\n                true,\r\n                false,\r\n                from\r\n            ));\r\n        }\r\n    }\r\n\r\n    function _rebalanceByDebt(address from, uint256 value, bytes memory payload) private {\r\n        (, uint256 debt) = differences();\r\n        require(debt >= minimumRebalanceByDebtAmount, \"Insufficient debt\");\r\n        require(value <= debt, \"Cannot Burn this amount\");\r\n        uint256 note = abi.decode(payload, (uint256));\r\n        _safeApprove(_wusdInteroperableInterfaceAddress, _extension, INativeV1(_collection).toInteroperableInterfaceAmount(_wusdObjectId, value));\r\n        WUSDExtension(_extension).burnFor(note == 2 ? _wusdNote2ObjectId : _wusdNote5ObjectId, value, from);\r\n    }\r\n\r\n    function rebalanceByCredit() public {\r\n        require(block.number >= (lastRebalanceByCreditBlock + rebalanceByCreditBlockInterval), \"Unauthorized action\");\r\n        lastRebalanceByCreditBlock = block.number;\r\n        uint256 credit = WUSDExtension(_extension).mintForRebalanceByCredit(_allowedAMMs);\r\n        uint256 availableCredit = credit;\r\n        uint256 reward = 0;\r\n        if(_rebalanceByCreditPercentageForCaller > 0) {\r\n            IERC20(_wusdInteroperableInterfaceAddress).transfer(msg.sender, reward = _calculatePercentage(credit, _rebalanceByCreditPercentageForCaller));\r\n            availableCredit -= reward;\r\n        }\r\n        if(_wusdNote2Percentage > 0) {\r\n            IERC20(_wusdInteroperableInterfaceAddress).transfer(_wusdNote2Controller, reward = _calculatePercentage(credit, _wusdNote2Percentage));\r\n            availableCredit -= reward;\r\n        }\r\n        if(_wusdNote5Percentage > 0) {\r\n            IERC20(_wusdInteroperableInterfaceAddress).transfer(_wusdNote5Controller, reward = _calculatePercentage(credit, _wusdNote5Percentage));\r\n            availableCredit -= reward;\r\n        }\r\n        for(uint256 i = 0; i < _rebalanceByCreditReceivers.length; i++) {\r\n            IERC20(_wusdInteroperableInterfaceAddress).transfer(_rebalanceByCreditReceivers[i], reward = _calculatePercentage(credit, _rebalanceByCreditPercentages[i]));\r\n            availableCredit -= reward;\r\n        }\r\n        if(availableCredit > 0) {\r\n            IERC20(_wusdInteroperableInterfaceAddress).transfer(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDWalletAddress(), availableCredit);\r\n        }\r\n    }\r\n\r\n    function _calculatePercentage(uint256 total, uint256 percentage) private pure returns (uint256) {\r\n        return (total * ((percentage * 1e18) / ONE_HUNDRED)) / 1e18;\r\n    }\r\n\r\n    modifier _forAllowedAMMAndLiquidityPool(uint256 ammIndex, uint256 liquidityPoolIndex) {\r\n        require(\r\n            ammIndex >= 0 && ammIndex < _allowedAMMs.length,\r\n            \"Unknown AMM!\"\r\n        );\r\n        require(\r\n            liquidityPoolIndex >= 0 && liquidityPoolIndex < _allowedAMMs[ammIndex].liquidityPools.length,\r\n            \"Unknown Liquidity Pool!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 ammPosition,\r\n        uint256 liquidityPoolPosition,\r\n        uint256 liquidityPoolAmount,\r\n        bool byLiquidityPool\r\n    )\r\n        public\r\n        _forAllowedAMMAndLiquidityPool(ammPosition, liquidityPoolPosition)\r\n        returns(uint256 toMint)\r\n    {\r\n        address liquidityPoolAddress = _allowedAMMs[ammPosition].liquidityPools[liquidityPoolPosition];\r\n        IAMM amm = IAMM(_allowedAMMs[ammPosition].ammAddress);\r\n        uint256[] memory spent;\r\n        (uint256[] memory amounts, address[] memory tokens) = amm.byLiquidityPoolAmount(liquidityPoolAddress, liquidityPoolAmount);\r\n        _checkMaximumPairRatio(amounts, tokens, maximumPairRatioForMint);\r\n        if(byLiquidityPool) {\r\n            _safeTransferFrom(liquidityPoolAddress, msg.sender, address(this), toMint = liquidityPoolAmount);\r\n        } else {\r\n            for(uint256 i = 0; i < tokens.length; i++) {\r\n                _safeTransferFrom(tokens[i], msg.sender, address(this), amounts[i]);\r\n                _safeApprove(tokens[i], address(amm), amounts[i]);\r\n            }\r\n            (toMint, spent,) = amm.addLiquidity(LiquidityPoolData(\r\n                liquidityPoolAddress,\r\n                liquidityPoolAmount,\r\n                address(0),\r\n                true,\r\n                false,\r\n                address(this)\r\n            ));\r\n        }\r\n\r\n        _safeApprove(liquidityPoolAddress, _extension, toMint);\r\n        WUSDExtension(_extension).mintFor(_allowedAMMs[ammPosition].ammAddress, liquidityPoolAddress, toMint, msg.sender);\r\n\r\n        for(uint256 i = 0; i < spent.length; i++) {\r\n            uint256 difference = amounts[i] - spent[i];\r\n            if(difference > 0) {\r\n                _safeTransfer(tokens[i], msg.sender, difference);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkMaximumPairRatio(IAMM amm, address liquidityPoolAddress, uint256 liquidityPoolAmount, uint256 maximumPairRatio) private view {\r\n        (uint256[] memory amounts, address[] memory tokens) = amm.byLiquidityPoolAmount(liquidityPoolAddress, liquidityPoolAmount);\r\n        _checkMaximumPairRatio(amounts, tokens, maximumPairRatio);\r\n    }\r\n\r\n    function _checkMaximumPairRatio(uint256[] memory amounts, address[] memory tokens, uint256 maximumPairRatio) private view {\r\n        if(maximumPairRatio == 0) {\r\n            return;\r\n        }\r\n        uint256 token0NormalizedAmount = _normalizeTokenAmountToDefaultDecimals(tokens[0], amounts[0]);\r\n        uint256 token1NormalizedAmount = _normalizeTokenAmountToDefaultDecimals(tokens[1], amounts[1]);\r\n\r\n        uint256 pairRatio = (token0NormalizedAmount * ONE_HUNDRED) / token1NormalizedAmount;\r\n        if(token1NormalizedAmount > token0NormalizedAmount) {\r\n            pairRatio = (token1NormalizedAmount * ONE_HUNDRED) / token0NormalizedAmount;\r\n        }\r\n        require(pairRatio <= maximumPairRatio, \"Insufficient ratio\");\r\n    }\r\n\r\n    function _checkAllowance(address tokenAddress, uint256 value, address operator) internal virtual {\r\n        if(tokenAddress == address(0) || operator == address(0)) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        if(token.allowance(address(this), operator) <= value) {\r\n            _safeApprove(tokenAddress, operator, token.totalSupply());\r\n        }\r\n    }\r\n\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n\r\n    function _flushBack(address payable sender, address[] memory tokens) internal virtual {\r\n        for(uint256 i = 0; i < tokens.length; i++) {\r\n            if(tokens[i] != address(0)) {\r\n                _flushBack(sender, tokens[i]);\r\n            }\r\n        }\r\n        _flushBack(sender, address(0));\r\n    }\r\n\r\n    function _flushBack(address payable sender, address tokenAddress) internal virtual {\r\n        uint256 balance = tokenAddress == address(0) ? address(this).balance : IERC20(tokenAddress).balanceOf(address(this));\r\n\r\n        if(balance == 0) {\r\n            return;\r\n        }\r\n\r\n        if(tokenAddress == address(0)) {\r\n            return sender.transfer(balance);\r\n        }\r\n        _safeTransfer(tokenAddress, sender, balance);\r\n    }\r\n\r\n    function _normalizeAndSumAmounts(uint256 ammPosition, uint256 liquidityPoolPosition, uint256 liquidityPoolAmount)\r\n        private\r\n        view\r\n        returns(uint256 amount) {\r\n            IERC20 liquidityPool = IERC20(_allowedAMMs[ammPosition].liquidityPools[liquidityPoolPosition]);\r\n            (uint256[] memory amounts, address[] memory tokens) = IAMM(_allowedAMMs[ammPosition].ammAddress).byLiquidityPoolAmount(address(liquidityPool), liquidityPoolAmount != 0 ? liquidityPoolAmount : liquidityPool.balanceOf(_extension));\r\n            for(uint256 i = 0; i < amounts.length; i++) {\r\n                amount += _normalizeTokenAmountToDefaultDecimals(tokens[i], amounts[i]);\r\n            }\r\n    }\r\n\r\n    function _normalizeTokenAmountToDefaultDecimals(address tokenAddress, uint256 amount) internal virtual view returns(uint256) {\r\n        uint256 remainingDecimals = DECIMALS;\r\n        IERC20 token = IERC20(tokenAddress);\r\n        remainingDecimals -= token.decimals();\r\n\r\n        if(remainingDecimals == 0) {\r\n            return amount;\r\n        }\r\n\r\n        return amount * (remainingDecimals == 0 ? 1 : (10**remainingDecimals));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"wusdInitializerBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ammPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPoolPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"byLiquidityPool\",\"type\":\"bool\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toMint\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedAMMs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPools\",\"type\":\"address[]\"}],\"internalType\":\"struct AllowedAMM[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"differences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doubleProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"allowedAMMS\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"controllers\",\"type\":\"address[]\"}],\"name\":\"finalizeInitialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fromTokenToStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceByCreditBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumPairRatioForBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumPairRatioForMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumRebalanceByDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceByCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceByCreditBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceByCreditReceiversInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ammAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPools\",\"type\":\"address[]\"}],\"internalType\":\"struct AllowedAMM[]\",\"name\":\"newAllowedAMMs\",\"type\":\"tuple[]\"}],\"name\":\"setAllowedAMMs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setCollectionUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDoubleProxy\",\"type\":\"address\"}],\"name\":\"setDoubleProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"existingObjectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setItemUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaximumPairRatioForBurn\",\"type\":\"uint256\"}],\"name\":\"setMaximumPairRatioForBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaximumPairRatioForMint\",\"type\":\"uint256\"}],\"name\":\"setMaximumPairRatioForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumRebalanceByDebtAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumRebalanceByDebtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rebalanceByCreditReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rebalanceByCreditPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceByCreditPercentageForCaller\",\"type\":\"uint256\"}],\"name\":\"setRebalanceByCreditData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newrebalanceByCreditBlockInterval\",\"type\":\"uint256\"}],\"name\":\"setrebalanceByCreditBlockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wusdInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wusdNote2Info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wusdNote5Info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WUSDExtensionController","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000012000000000000000000000000086ab19d36c38aa81f092eab4b1a8a4b553612465000000000000000000000000f869538e3904778a0cb1ff620c8e83c7df36b94600000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000000f43fc2c04ee00000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000000015f90","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e8d17bde16157476574ae7cb4e006b0a710609e3f3762fc37bcfc6dd8714580c"}]}