{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Project/tge-contracts/contracts/Bonded.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract Bonded is OwnableUpgradeSafe {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public TGE;\\r\\n    uint256 public constant month = 30 days;\\r\\n    uint256 constant decimals = 18;\\r\\n    uint256 constant decMul = uint256(10)**decimals;\\r\\n\\r\\n    address public advisorsAddress;\\r\\n    address public foundationAddress;\\r\\n    address public ecosystemAddress;\\r\\n    address public reserveAddress;\\r\\n    address public marketingAddress;\\r\\n    address public employeesAddress;\\r\\n\\r\\n    uint256 public constant SEED_POOL = 5000000 * decMul;\\r\\n    uint256 public constant ADVISORS_POOL = 480000 * decMul;\\r\\n    uint256 public constant FOUNDATION_POOL = 1200000 * decMul;\\r\\n    uint256 public constant ECOSYSTEM_POOL = 1200000 * decMul;\\r\\n    uint256 public constant RESERVE_POOL = 600000 * decMul;\\r\\n    uint256 public constant MARKETING_POOL = 480000 * decMul;\\r\\n    uint256 public constant EMPLOYEES_POOL = 840000 * decMul;\\r\\n\\r\\n    uint256 public currentSeedPool;\\r\\n    uint256 public currentAdvisorsPool;\\r\\n    uint256 public currentFoundationPool;\\r\\n    uint256 public currentEcosystemPool;\\r\\n    uint256 public currentReservePool;\\r\\n    uint256 public currentMarketingPool;\\r\\n    uint256 public currentEmployeesPool;\\r\\n\\r\\n    ERC20BurnableUpgradeSafe public token;\\r\\n\\r\\n    mapping(address => uint256) public seedWhitelist;\\r\\n\\r\\n    modifier requireSetTGE() {\\r\\n        require(TGE > 0, \\\"TGE must be set\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _advisorsAddress,\\r\\n        address _foundationAddress,\\r\\n        address _ecosystemAddress,\\r\\n        address _reserveAddress,\\r\\n        address _marketingAddress,\\r\\n        address _employeesAddress,\\r\\n        uint256 _currentSeedPool,\\r\\n        uint256 _currentAdvisorsPool,\\r\\n        uint256 _currentFoundationPool,\\r\\n        uint256 _currentEcosystemPool,\\r\\n        uint256 _currentReservePool,\\r\\n        uint256 _currentMarketingPool,\\r\\n        uint256 _currentEmployeesPool\\r\\n    ) public {\\r\\n        __Ownable_init_unchained();\\r\\n\\r\\n        advisorsAddress = _advisorsAddress;\\r\\n        foundationAddress = _foundationAddress;\\r\\n        ecosystemAddress = _ecosystemAddress;\\r\\n        reserveAddress = _reserveAddress;\\r\\n        marketingAddress = _marketingAddress;\\r\\n        employeesAddress = _employeesAddress;\\r\\n\\r\\n        currentSeedPool = _currentSeedPool;\\r\\n        currentAdvisorsPool = _currentAdvisorsPool;\\r\\n        currentFoundationPool = _currentFoundationPool;\\r\\n        currentEcosystemPool = _currentEcosystemPool;\\r\\n        currentReservePool = _currentReservePool;\\r\\n        currentMarketingPool = _currentMarketingPool;\\r\\n        currentEmployeesPool = _currentEmployeesPool;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the AddXyz ERC-20 token contract address\\r\\n     */\\r\\n    function setTokenContract(address _tokenAddress) public onlyOwner {\\r\\n        require(true == isContract(_tokenAddress), \\\"require contract\\\");\\r\\n        token = ERC20BurnableUpgradeSafe(_tokenAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the current TGE from where the vesting period will be counted. Can be used only if TGE is zero.\\r\\n     */\\r\\n    function setTGE(uint256 _date) public onlyOwner {\\r\\n        require(TGE == 0, \\\"TGE has already been set\\\");\\r\\n        TGE = _date;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets each address from `addresses` as the key and each balance\\r\\n     * from `balances` to the privateWhitelist. Can be used only by an owner.\\r\\n     */\\r\\n    function addToWhitelist(\\r\\n        address[] memory addresses,\\r\\n        uint256[] memory balances\\r\\n    ) public onlyOwner {\\r\\n        require(addresses.length == balances.length, \\\"Invalid request length\\\");\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            seedWhitelist[addresses[i]] = balances[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim seed tokens from the contract balance.\\r\\n     * `amount` means how many tokens must be claimed.\\r\\n     * Can be used only by an owner or by any whitelisted person\\r\\n     */\\r\\n\\r\\n    function claimSeedTokens(uint256 amount) public requireSetTGE() {\\r\\n        require(\\r\\n            seedWhitelist[msg.sender] > 0 || msg.sender == owner(),\\r\\n            \\\"Sender is not whitelisted\\\"\\r\\n        );\\r\\n        require(\\r\\n            seedWhitelist[msg.sender] >= amount || msg.sender == owner(),\\r\\n            \\\"Exceeded token amount\\\"\\r\\n        );\\r\\n        require(currentSeedPool >= amount, \\\"Exceeded seedpool\\\");\\r\\n        require(amount > 0, \\\"Amount should be more than 0\\\");\\r\\n\\r\\n        currentSeedPool = currentSeedPool.sub(amount);\\r\\n\\r\\n        // Bridge fees are not taken off for contract owner\\r\\n        if (msg.sender == owner()) {\\r\\n            token.transfer(msg.sender, amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        seedWhitelist[msg.sender] = seedWhitelist[msg.sender].sub(amount);\\r\\n\\r\\n        uint256 amountToBurn = calculateFee(amount);\\r\\n\\r\\n        if (amountToBurn > 0) {\\r\\n            token.burn(amountToBurn);\\r\\n        }\\r\\n\\r\\n        token.transfer(msg.sender, amount.sub(amountToBurn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim advisors tokens from the contract balance.\\r\\n     * Can be used only by an owner or from advisorsAddress.\\r\\n     * Tokens will be send to sender address.\\r\\n     */\\r\\n    function claimAdvisorsTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == advisorsAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n        require(currentAdvisorsPool > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        uint256 amount = 0;\\r\\n        uint256 periodsPass = now.sub(TGE).div(6 * month);\\r\\n        require(periodsPass >= 1, \\\"Vesting period\\\");\\r\\n\\r\\n        uint256 amountToClaim = ADVISORS_POOL.div(4);\\r\\n        for (uint256 i = 1; i <= periodsPass; i++) {\\r\\n            if (\\r\\n                currentAdvisorsPool <= ADVISORS_POOL.sub(amountToClaim.mul(i))\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n            currentAdvisorsPool = currentAdvisorsPool.sub(amountToClaim);\\r\\n            amount = amount.add(amountToClaim);\\r\\n        }\\r\\n\\r\\n        // 25% each 6 months\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        uint256 amountToBurn = calculateFee(amount);\\r\\n\\r\\n        if (amountToBurn > 0) {\\r\\n            token.burn(amountToBurn);\\r\\n        }\\r\\n\\r\\n        token.transfer(advisorsAddress, amount.sub(amountToBurn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim foundation tokens from the contract balance.\\r\\n     * Can be used only by an owner or from foundationAddress.\\r\\n     * Tokens will be send to foundationAddress.\\r\\n     */\\r\\n\\r\\n    function claimFoundationTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == foundationAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n        require(currentFoundationPool > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        // 1 year of vesting period\\r\\n        require(now >= TGE + 12 * month, \\\"Vesting period\\\");\\r\\n\\r\\n        // Get the total months passed after the vesting period of 1 year\\r\\n        uint256 monthPassed = (now.sub(TGE)).div(month).sub(12).add(1);\\r\\n\\r\\n        // Avoid overflow when releasing 10% each month\\r\\n        // If more than 10 months passed without token claim then 100% tokens can be claimed at once.\\r\\n        if (monthPassed > 10) {\\r\\n            monthPassed = 10;\\r\\n        }\\r\\n\\r\\n        uint256 amount =\\r\\n            currentFoundationPool.sub(\\r\\n                FOUNDATION_POOL.sub(\\r\\n                    FOUNDATION_POOL.mul(monthPassed * 10).div(100)\\r\\n                )\\r\\n            );\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        currentFoundationPool = currentFoundationPool.sub(amount);\\r\\n\\r\\n        //18 month of vesting period, no need to check fee\\r\\n        token.transfer(foundationAddress, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim ecosystem tokens from the contract balance.\\r\\n     * Can be used only by an owner or from ecosystemAddress.\\r\\n     * Tokens will be send to ecosystemAddress.\\r\\n     */\\r\\n    function claimEcosystemTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == ecosystemAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n\\r\\n        //6 months of vesting period\\r\\n        require(now >= TGE + 6 * month, \\\"Vesting period\\\");\\r\\n\\r\\n        uint256 monthPassed = now.sub(TGE).div(month).sub(5);\\r\\n\\r\\n        // Avoid overflow when releasing 5% each month\\r\\n        if (monthPassed > 20) {\\r\\n            monthPassed = 20;\\r\\n        }\\r\\n\\r\\n        uint256 amount =\\r\\n            currentEcosystemPool.sub(\\r\\n                ECOSYSTEM_POOL.sub(ECOSYSTEM_POOL.mul(monthPassed * 5).div(100))\\r\\n            );\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        currentEcosystemPool = currentEcosystemPool.sub(amount);\\r\\n\\r\\n        uint256 amountToBurn = calculateFee(amount);\\r\\n\\r\\n        if (amountToBurn > 0) {\\r\\n            token.burn(amountToBurn);\\r\\n        }\\r\\n\\r\\n        token.transfer(ecosystemAddress, amount.sub(amountToBurn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim reserve tokens from the contract balance.\\r\\n     * Can be used only by an owner or from reserveAddress.\\r\\n     * Tokens will be send to reserveAddress.\\r\\n     */\\r\\n    function claimReserveTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == reserveAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n\\r\\n        //6 months of vesting period\\r\\n        require(now >= TGE + 6 * month, \\\"Vesting period\\\");\\r\\n\\r\\n        uint256 monthPassed = now.sub(TGE).div(month).sub(5);\\r\\n\\r\\n        // Avoid overflow when releasing 5% each month\\r\\n        if (monthPassed > 20) {\\r\\n            monthPassed = 20;\\r\\n        }\\r\\n\\r\\n        uint256 amount =\\r\\n            currentReservePool.sub(\\r\\n                RESERVE_POOL.sub((RESERVE_POOL.mul(monthPassed * 5)).div(100))\\r\\n            );\\r\\n\\r\\n        currentReservePool = currentReservePool.sub(amount);\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        uint256 amountToBurn = calculateFee(amount);\\r\\n\\r\\n        if (amountToBurn > 0) {\\r\\n            token.burn(amountToBurn);\\r\\n        }\\r\\n\\r\\n        token.transfer(reserveAddress, amount.sub(amountToBurn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim marketing tokens from the contract balance.\\r\\n     * Can be used only by an owner or from marketingAddress.\\r\\n     * Tokens will be send to marketingAddress.\\r\\n     */\\r\\n    function claimMarketingTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == marketingAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n\\r\\n        // no vesting period\\r\\n        uint256 monthPassed = (now.sub(TGE)).div(month).add(1);\\r\\n\\r\\n        // Avoid overflow when releasing 10% each month\\r\\n        if (monthPassed > 10) {\\r\\n            monthPassed = 10;\\r\\n        }\\r\\n\\r\\n        uint256 amount =\\r\\n            currentMarketingPool.sub(\\r\\n                MARKETING_POOL.sub(\\r\\n                    MARKETING_POOL.mul(monthPassed * 10).div(100)\\r\\n                )\\r\\n            );\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        currentMarketingPool = currentMarketingPool.sub(amount);\\r\\n\\r\\n        uint256 amountToBurn = calculateFee(amount);\\r\\n\\r\\n        if (amountToBurn > 0) {\\r\\n            token.burn(amountToBurn);\\r\\n        }\\r\\n\\r\\n        token.transfer(marketingAddress, amount.sub(amountToBurn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev claim employee tokens from the contract balance.\\r\\n     * Can be used only by an owner or from employeesAddress\\r\\n     */\\r\\n    function claimEmployeeTokens() public requireSetTGE() {\\r\\n        require(\\r\\n            msg.sender == employeesAddress || msg.sender == owner(),\\r\\n            \\\"Unauthorised sender\\\"\\r\\n        );\\r\\n\\r\\n        // 1 year of vesting period\\r\\n        require(now >= TGE + 12 * month, \\\"Vesting period\\\");\\r\\n\\r\\n        // Get the total months passed after the vesting period of 1.5 years\\r\\n        uint256 monthPassed = (now.sub(TGE)).div(month).sub(12).add(1);\\r\\n\\r\\n        // Avoid overflow when releasing 10% each month\\r\\n        // If more than 10 months passed without token claim then 100% tokens can be claimed at once.\\r\\n        if (monthPassed > 10) {\\r\\n            monthPassed = 10;\\r\\n        }\\r\\n\\r\\n        uint256 amount =\\r\\n            currentEmployeesPool.sub(\\r\\n                EMPLOYEES_POOL.sub(\\r\\n                    EMPLOYEES_POOL.mul(monthPassed * 10).div(100)\\r\\n                )\\r\\n            );\\r\\n        require(amount > 0, \\\"nothing to claim\\\");\\r\\n\\r\\n        currentEmployeesPool = currentEmployeesPool.sub(amount);\\r\\n\\r\\n        //18 month of vesting period, no need to check fee\\r\\n        token.transfer(employeesAddress, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev getCurrentFee calculate current fee according to TGE and returns it.\\r\\n     * NOTE: divide result by 10000 to calculate current percent.\\r\\n     */\\r\\n    function getCurrentFee() public returns (uint256) {\\r\\n        if (now >= TGE + 9 * month) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (now >= TGE + 8 * month) {\\r\\n            return 923;\\r\\n        }\\r\\n        if (now >= TGE + 7 * month) {\\r\\n            return 1153;\\r\\n        }\\r\\n        if (now >= TGE + 6 * month) {\\r\\n            return 1442;\\r\\n        }\\r\\n        if (now >= TGE + 5 * month) {\\r\\n            return 1802;\\r\\n        }\\r\\n        if (now >= TGE + 4 * month) {\\r\\n            return 2253;\\r\\n        }\\r\\n        if (now >= TGE + 3 * month) {\\r\\n            return 2816;\\r\\n        }\\r\\n        if (now >= TGE + 2 * month) {\\r\\n            return 3520;\\r\\n        }\\r\\n        if (now >= TGE + 1 * month) {\\r\\n            return 4400;\\r\\n        }\\r\\n\\r\\n        return 5500;\\r\\n    }\\r\\n\\r\\n    function calculateFee(uint256 amount) public returns (uint256) {\\r\\n        return amount.mul(getCurrentFee()).div(10000);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) private returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeSafe is Initializable, ContextUpgradeSafe, ERC20UpgradeSafe {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_advisorsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foundationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_employeesAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentSeedPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentAdvisorsPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentFoundationPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEcosystemPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentReservePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentMarketingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentEmployeesPool\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADVISORS_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ECOSYSTEM_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMPLOYEES_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDATION_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEED_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAdvisorsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEcosystemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEmployeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFoundationTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMarketingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimSeedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAdvisorsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEcosystemPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEmployeesPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFoundationPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMarketingPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReservePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSeedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"employeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seedWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20BurnableUpgradeSafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bonded","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006aa8f653880a94583232de390bd4be03483886b80000000000000000000000008ab11fd2522d28cb9b0c50e78cb5623d3e676f92000000000000000000000000c7b1abd4e968eade01023011b495b995fafb68d10000000000000000000000005ae5bfdbab296d758806deda16f4f699366c651d000000000000000000000000ffde9f42f1eac6354a8c050e07f804d47a12dd9c000000000000000000000000ce5f3160c9606aaca6ae6c1581057f161d7d05080000000000000000000000000000000000000000000057c58ec436e847b87960000000000000000000000000000000000000000000004c3ba39c5e411100000000000000000000000000000000000000000000000000fe1c215e8f838e00000000000000000000000000000000000000000000000000f907167644f6af0000000000000000000000000000000000000000000000000078b3c30cea91b0400000000000000000000000000000000000000000000000001e7e4171bf4d3a00000000000000000000000000000000000000000000000000b1e07dc231427d000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}