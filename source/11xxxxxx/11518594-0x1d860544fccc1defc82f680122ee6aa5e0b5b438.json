{"status":"1","message":"OK","result":[{"SourceCode":"// Price Oracle for Stabilize Protocol\r\n// This contract uses Aave Price Oracle\r\n// The main Operator contract can change which Price Oracle it uses\r\n// Modified to accomodate proxy usage\r\n// This version increases the gas efficiency of the oracle with proxy tokens\r\n\r\n// Updated to use Chainlink upgrade\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/************\r\nIPriceOracleGetter interface\r\nInterface for the Aave price oracle.\r\n*/\r\ninterface IPriceOracleGetter {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external view returns(address);\r\n    function getFallbackOracle() external view returns(address);\r\n}\r\n\r\ninterface LendingPoolAddressesProvider {\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\ninterface zaToken {\r\n    // For the proxy tokens\r\n    function underlyingAsset() external view returns (address);\r\n}\r\n\r\ncontract StabilizePriceOracle {\r\n    \r\n    // Mapping of custom tokens\r\n    mapping(address => bool) public zTokens;\r\n    address public owner;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        insertCustomTokens(); // zTokens have underlying asset\r\n    }\r\n    \r\n    modifier onlyGovernance() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function insertCustomTokens() internal {\r\n        // Mainnet zaToken\r\n        zTokens[address(0x4dEaD8338cF5cb31122859b2Aec2b60416D491f0)] = true;\r\n        zTokens[address(0x6B2e59b8EbE61B5ee0EF30021b7740C63F597654)] = true;\r\n        zTokens[address(0xfa8c04d342FBe24d871ea77807b1b93eC42A57ea)] = true;\r\n        zTokens[address(0x89Cc19cece29acbD41F931F3dD61A10C1627E4c4)] = true;\r\n        zTokens[address(0x8e769EAA31375D13a1247dE1e64987c28Bed987E)] = true;\r\n        zTokens[address(0x739D93f2b116E6aD754e173655c635Bd5D8d664c)] = true;\r\n    }\r\n    \r\n    function addNewCustomToken(address _address) external onlyGovernance {\r\n        zTokens[_address] = true;\r\n    }\r\n    \r\n    function removeCustomToken(address _address) external onlyGovernance {\r\n        zTokens[_address] = false;\r\n    }\r\n    \r\n    function isZToken(address _address) internal view returns (bool) {\r\n        return zTokens[_address];\r\n    }\r\n    \r\n    function getPrice(address _address) public view returns (uint256) {\r\n        // This version of the price oracle will use Aave contracts\r\n        \r\n        // First get the Ethereum USD price from Chainlink Aggregator\r\n        // Mainnet address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        // Kovan address: 0x9326BFA02ADD2366b30bacB125260Af641031331\r\n        AggregatorV3Interface ethOracle = AggregatorV3Interface(address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419));\r\n        ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer \r\n        uint256 ethPrice = uint256(intEthPrice);\r\n        \r\n        address underlyingAsset = _address;\r\n        if(isZToken(_address) == true){\r\n            // zaTokens store their underlying asset address in the contract\r\n            underlyingAsset = zaToken(_address).underlyingAsset();\r\n        }\r\n        \r\n        // Retrieve PriceOracle address\r\n        // Mainnet address: 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\r\n        // Kovan address: 0x506B0B2CF20FAA8f38a4E2B524EE43e1f4458Cc5\r\n        LendingPoolAddressesProvider provider = LendingPoolAddressesProvider(address(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8));\r\n        address priceOracleAddress = provider.getPriceOracle();\r\n        IPriceOracleGetter priceOracle = IPriceOracleGetter(priceOracleAddress);\r\n\r\n        uint256 price = priceOracle.getAssetPrice(underlyingAsset); // This is relative to Ethereum, need to convert to USD\r\n        ethPrice = ethPrice / 10000; // We only care about 4 decimal places from Chainlink priceOracleAddress\r\n        price = price * ethPrice / 10000; // Convert to Wei format\r\n        return price;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNewCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StabilizePriceOracle","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d46cc226f513c595424d4b10568a0d6e294c412909ee8aa0e47c657a48016d3"}]}