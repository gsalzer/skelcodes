{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\n\n// \n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nenum RebaseResult { Double, Park, Draw }\n\ninterface ITautrinoToken {\n    function rebase(RebaseResult result) external returns (uint);\n    function setGovernance(address _governance) external;\n    function factor2() external view returns (uint);\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IPriceManager {\n    function averagePrice() external returns (uint32);\n    function lastAvgPrice() external view returns (uint32);\n    function setTautrino(address _tautrino) external;\n}\n\ncontract TautrinoGovernance is Ownable {\n\n    event LogRebase(uint64 epoch, uint32 ethPrice, RebaseResult tauResult, uint tauTotalSupply, RebaseResult trinoResult, uint trinoTotalSupply);\n\n    uint64 public constant REBASE_CYCLE = 1 hours;\n\n    ITautrinoToken public tauToken;\n    ITautrinoToken public trinoToken;\n\n    IPriceManager public priceManager;\n\n    IUniswapV2Pair[] public tautrinoUniswapPairs;\n\n    RebaseResult private _lastTauRebaseResult;\n    RebaseResult private _lastTrinoRebaseResult;\n\n\tuint64 private _nextRebaseEpoch;\n\tuint64 private _lastRebaseEpoch;\n\n    uint64 public rebaseOffset = 3 minutes;\n\n    /**\n     * @dev Constructor.\n     * @param _tauToken The address of TAU token.\n     * @param _trinoToken The address of TRINO token.\n     */\n\n    constructor(address _tauToken, address _trinoToken, uint64 _delay) public Ownable() {\n        tauToken = ITautrinoToken(_tauToken);\n        trinoToken = ITautrinoToken(_trinoToken);\n        _nextRebaseEpoch = uint64(block.timestamp - block.timestamp % 3600) + REBASE_CYCLE + _delay;\n    }\n\n    /**\n     * @dev Update rebase offset.\n     * @param _rebaseOffset new rebase offset.\n     */\n\n    function setRebaseOffset(uint64 _rebaseOffset) external onlyOwner {\n        rebaseOffset = _rebaseOffset;\n    }\n\n    /**\n     * @dev Rebase TAU and TRINO tokens.\n     */\n\n    function rebase() external onlyOwner {\n        require(_nextRebaseEpoch <= uint64(block.timestamp) + rebaseOffset, \"Not ready to rebase!\");\n\n        uint32 _ethPrice = priceManager.averagePrice();\n        uint32 _number = _ethPrice;\n\n        uint8 _even = 0;\n        uint8 _odd = 0;\n\n        while (_number > 0) {\n            if (_number % 2 == 1) {\n                _odd += 1;\n            } else {\n                _even += 1;\n            }\n            _number /= 10;\n        }\n\n        if (_even > _odd) {\n            // double balance\n            _lastTauRebaseResult = RebaseResult.Double;\n            _lastTrinoRebaseResult = RebaseResult.Park;\n        } else if (_even < _odd) {\n            // park balance\n            _lastTauRebaseResult = RebaseResult.Park;\n            _lastTrinoRebaseResult = RebaseResult.Double;\n        } else {\n            _lastTauRebaseResult = RebaseResult.Draw;\n            _lastTrinoRebaseResult = RebaseResult.Draw;\n        }\n\n        _lastRebaseEpoch = uint64(block.timestamp);\n        _nextRebaseEpoch = _nextRebaseEpoch + 1 hours;\n        if (_nextRebaseEpoch <= _lastRebaseEpoch) {\n            _nextRebaseEpoch = uint64(block.timestamp - block.timestamp % 3600) + REBASE_CYCLE;\n        }\n\n        uint _tauTotalSupply = tauToken.rebase(_lastTauRebaseResult);\n        uint _trinoTotalSupply = trinoToken.rebase(_lastTrinoRebaseResult);\n\n        for (uint i = 0; i < tautrinoUniswapPairs.length; i += 1) {\n            tautrinoUniswapPairs[i].sync();\n        }\n        emit LogRebase(_lastRebaseEpoch, _ethPrice, _lastTauRebaseResult, _tauTotalSupply, _lastTrinoRebaseResult, _trinoTotalSupply);\n    }\n\n    /**\n     * @return Price of eth used for last rebasing.\n     */\n\n    function lastAvgPrice() public view returns (uint32) {\n        return priceManager.lastAvgPrice();\n    }\n\n    /**\n     * @return Next rebase epoch.\n     */\n\n    function nextRebaseEpoch() public view returns (uint64) {\n        return _nextRebaseEpoch;\n    }\n\n    /**\n     * @return Last rebase epoch.\n     */\n\n    function lastRebaseEpoch() public view returns (uint64) {\n        return _lastRebaseEpoch;\n    }\n\n    /**\n     * @return Last rebase result.\n     */\n\n    function lastRebaseResult() public view returns (RebaseResult, RebaseResult) {\n        return (_lastTauRebaseResult, _lastTrinoRebaseResult);\n    }\n\n    /**\n     * @dev Migrate governance.\n     * @param _newGovernance new TautrinoGovernance address.\n     */\n\n    function migrateGovernance(address _newGovernance) external onlyOwner {\n        require(_newGovernance != address(0), \"invalid governance\");\n        tauToken.setGovernance(_newGovernance);\n        trinoToken.setGovernance(_newGovernance);\n\n        if (address(priceManager) != address(0)) {\n            priceManager.setTautrino(_newGovernance);\n        }\n    }\n\n    /**\n     * @dev Update price manager.\n     * @param _priceManager The address of new price manager.\n     */\n\n    function setPriceManager(address _priceManager) external onlyOwner {\n        priceManager = IPriceManager(_priceManager);\n    }\n\n    /**\n     * @dev Add new TAU or TRINO Uniswap pair.\n     * @param _pair The address of pair.\n     */\n\n    function addTautrinoUniswapPair(IUniswapV2Pair _pair) external onlyOwner {\n        tautrinoUniswapPairs.push(_pair);\n    }\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tauToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trinoToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_delay\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ethPrice\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enum RebaseResult\",\"name\":\"tauResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tauTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum RebaseResult\",\"name\":\"trinoResult\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trinoTotalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REBASE_CYCLE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addTautrinoUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAvgPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseResult\",\"outputs\":[{\"internalType\":\"enum RebaseResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"enum RebaseResult\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"migrateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebaseEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceManager\",\"outputs\":[{\"internalType\":\"contract IPriceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseOffset\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceManager\",\"type\":\"address\"}],\"name\":\"setPriceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rebaseOffset\",\"type\":\"uint64\"}],\"name\":\"setRebaseOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tauToken\",\"outputs\":[{\"internalType\":\"contract ITautrinoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tautrinoUniswapPairs\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trinoToken\",\"outputs\":[{\"internalType\":\"contract ITautrinoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TautrinoGovernance","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000009afa34ef0cfaf0a5baec71560acbe908f0250b2b000000000000000000000000af6ebc7a9ce00042f5fb8c5fc9b606ac660539e00000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}