{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: ISC\n\npragma solidity ^0.7.5;\npragma experimental ABIEncoderV2;\n\nabstract contract UniTarget {\n    function symbol() public virtual view returns (string memory);\n\n    function token0() public virtual view returns (address);\n\n    function token1() public virtual view returns (address);\n}\n\n// target contract interface - selection of used ERC20\nabstract contract Target {\n    function name() public virtual view returns (string memory);\n\n    function symbol() public virtual view returns (string memory);\n\n    function decimals() public virtual view returns (uint8);\n\n    function totalSupply() public virtual view returns (uint256);\n}\n\ncontract UniTokenLoader {\n\n    struct TokenInfo {\n        address addr;\n        string name;\n        string symbol;\n        uint8 decimals;\n        uint256 totalSupply;\n    }\n\n    function loadTokens(address[] calldata tokens) external view returns (TokenInfo[] memory tokenInfo) {\n        tokenInfo = new TokenInfo[](2 * tokens.length);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            UniTarget uniToken = UniTarget(tokens[i]);\n            (bool success, bytes memory returnData) = tokens[i].staticcall(abi.encodeWithSelector(uniToken.symbol.selector));\n\n            // keccak256(bytes(\"UNI-V2\")) = 0x0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255\n            if (success && returnData.length != 0 && keccak256(abi.decode(returnData, (bytes))) == 0x0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255) {\n                address token0Address = uniToken.token0();\n                address token1Address = uniToken.token1();\n                Target token0 = Target(token0Address);\n                Target token1 = Target(token1Address);\n\n                tokenInfo[2 * i] = TokenInfo(token0Address, token0.name(), token0.symbol(), token0.decimals(), token0.totalSupply());\n                tokenInfo[2 * i + 1] = TokenInfo(token1Address, token1.name(), token1.symbol(), token1.decimals(), token1.totalSupply());\n            }\n        }\n\n        return tokenInfo;\n    }\n\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"loadTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct UniTokenLoader.TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniTokenLoader","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}