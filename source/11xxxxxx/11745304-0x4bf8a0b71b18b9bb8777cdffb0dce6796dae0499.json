{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\external\\IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts\\external\\IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts\\external\\IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts\\external\\IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts\\Constants.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n// pragma experimental ABIEncoderV2;\r\n\r\nlibrary Constants {\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _launchSupply = 164000 * 10**9;\r\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\r\n\r\n\r\n    // uint256 private constant _baseExpansionFactor = 100;\r\n    // uint256 private constant _baseContractionFactor = 100;\r\n    uint256 private constant _baseUtilityFee = 50; // 0.5%\r\n    // uint256 private constant _baseContractionCap = 1000;\r\n\r\n    uint256 private constant _stabilizerFee = 50; // 0.5%\r\n    // uint256 private constant _stabilizationLowerBound = 50;\r\n    // uint256 private constant _stabilizationLowerReset = 75;\r\n    // uint256 private constant _stabilizationUpperBound = 150;\r\n    // uint256 private constant _stabilizationUpperReset = 125;\r\n    // uint256 private constant _stabilizePercent = 10;\r\n\r\n    uint256 private constant _treasuryFee = 100; // 1%\r\n\r\n    // uint256 private constant _presaleIndividualCap = 1 ether;\r\n    // uint256 private constant _presaleCap = 1 * 10**5 * 10**18;\r\n    // uint256 private constant _maxPresaleGas = 200000000000;\r\n\r\n    uint256 private constant _epochLength = 4 hours;\r\n\r\n    uint256 private constant _liquidityReward = 25 * 10**9;\r\n    uint256 private constant _minForLiquidity = 500 * 10**9;\r\n    uint256 private constant _minForCallerLiquidity = 500 * 10**9;\r\n\r\n    address private constant _treasuryAddress = 0xf7FBdEA9b0e7aF8034f9Fc99D7d95B4D4a52B948;\r\n\r\n    string private constant _name = \"RSTABLE\";\r\n    string private constant _symbol = \"RST\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 public constant twoYearSec = 63072000;\r\n\r\n    uint256 private constant _addLiquidRate = 64000/80;\r\n\r\n    /****** Getters *******/\r\n    function getAddLiquidRate() internal pure returns (uint256){\r\n        return _addLiquidRate;\r\n    }\r\n    function getLaunchSupply() internal pure returns (uint256) {\r\n        return _launchSupply;\r\n    }\r\n    function getLargeTotal() internal pure returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n\r\n   \r\n    function getBaseUtilityFee() internal pure returns (uint256) {\r\n        return _baseUtilityFee;\r\n    }\r\n    function getStabilizerFee() internal pure returns (uint256) {\r\n        return _stabilizerFee;\r\n    }\r\n    \r\n    function getTreasuryFee() internal pure returns (uint256) {\r\n        return _treasuryFee;\r\n    }\r\n    function getEpochLength() internal pure returns (uint256) {\r\n        return _epochLength;\r\n    }\r\n    function getLiquidityReward() internal pure returns (uint256) {\r\n        return _liquidityReward;\r\n    }\r\n    function getMinForLiquidity() internal pure returns (uint256) {\r\n        return _minForLiquidity;\r\n    }\r\n    function getMinForCallerLiquidity() internal pure returns (uint256) {\r\n        return _minForCallerLiquidity;\r\n    }\r\n\r\n    \r\n    function getTreasuryAdd() internal pure returns (address) {\r\n        return _treasuryAddress;\r\n    }\r\n    function getName() internal pure returns (string memory)  {\r\n        return _name;\r\n    }\r\n    function getSymbol() internal pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function getDecimals() internal pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts\\State.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract State {\r\n\r\n    mapping (address => uint256) _largeBalances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    // Supported pools and data for measuring mint & burn factors\r\n    struct PoolCounter {\r\n        address pairToken;\r\n        uint256 tokenBalance;\r\n        uint256 pairTokenBalance;\r\n        uint256 lpBalance;\r\n        uint256 startTokenBalance;\r\n        uint256 startPairTokenBalance;\r\n    }\r\n    address[] _supportedPools;\r\n    mapping (address => PoolCounter) _poolCounters;\r\n    mapping (address => bool) _isSupportedPool;\r\n    address _mainPool;\r\n\r\n    uint256 public _currentEpoch;\r\n \r\n    uint256 _largeTotal;\r\n    uint256 _totalSupply;\r\n\r\n    address _liquidityReserve = 0xa0DA83FcB4d921E966C67E747cDd66c4D60bB074;\r\n    address _stabilizer = 0xa0DA83FcB4d921E966C67E747cDd66c4D60bB074;\r\n    address uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address uniswapFac = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n    bool _taxLess;\r\n    bool _presaleDone;\r\n    address public presaleAdd;\r\n    address public pol;\r\n\r\n    uint256 public advanceMinThreshold = 512; // random range [0:1023], if number is >=511, < 512, advance.\r\n    uint256 public advanceMaxThreshold = 513; \r\n    uint256 public advanceLotteryBits = 10; // 1024\r\n    uint256 public maxEpochLength = 4 hours;\r\n    uint256 public lastCalculatedBlock;\r\n    uint256 public txNum;\r\n    /*\r\n        Based on assumption of 1 txes every 15secs, over 1hour, there are 240 txes\r\n        There is 23% of trigger within the first hour\r\n        There is 46% of trigger within the first 2 hours\r\n        There is 70% of trigger within the first 3 hours\r\n        There is 93% of trigger within the first 4 hours\r\n    */\r\n    // all sacled by 100,000\r\n    uint256 public minBurnRate = 1000; //1%\r\n    uint256 public maxBurnRate = 10000; //10%\r\n    uint256 public minMintRate = 1000; //1%\r\n    uint256 public maxMintRate = 8000; //8%\r\n\r\n    bool public isBootstrap = true;\r\n    uint256 public numEpochs = 0;\r\n    uint256 public bootstrapEnd = 30;\r\n\r\n    uint256 public mintRateOffset = 0;\r\n    uint256 public burnRateOffset = 0;\r\n    uint256 public lastMintRate;\r\n\r\n    mapping(address=>bool) _isTaxlessSetter;\r\n}\r\n\r\n// File: contracts\\Getters.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Getters is State {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function getLargeBalances(address account) public view returns (uint256) {\r\n        return _largeBalances[account];\r\n    }\r\n    function getAllowances(address account, address spender) public view returns (uint256) {\r\n        return _allowances[account][spender];\r\n    } \r\n    function getSupportedPools(uint256 index) public view returns (address) {\r\n        return _supportedPools[index];\r\n    }\r\n    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\r\n        PoolCounter memory pc = _poolCounters[pool];\r\n        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\r\n    }\r\n    function isSupportedPool(address pool) public view returns (bool) {\r\n        return _isSupportedPool[pool];\r\n    }\r\n    function mainPool() public view returns (address) {\r\n        return _mainPool;\r\n    }\r\n    function getCurrentEpoch() public view returns (uint256) {\r\n        return _currentEpoch;\r\n    }\r\n    \r\n    function getLargeTotal() public view returns (uint256) {\r\n        return _largeTotal;\r\n    }\r\n    function getTotalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function getLiquidityReserve() public view returns (address) {\r\n        return _liquidityReserve;\r\n    }\r\n    function getPol() public view returns (address) {\r\n        return pol;\r\n    }\r\n    function getStabilizer() public view returns (address) {\r\n        return _stabilizer;\r\n    }\r\n    function isPresaleDone() public view returns (bool) {\r\n        return _presaleDone;\r\n    }\r\n    // function getPresaleAddress() public view returns (address) {\r\n    //     return _presaleCon;\r\n    // }\r\n   \r\n    function isTaxLess() public view returns (bool) {\r\n        return _taxLess;\r\n    }\r\n    function isTaxlessSetter(address account) public view returns (bool) {\r\n        return _isTaxlessSetter[account];\r\n    }\r\n    function getUniswapRouter() public view returns (IUniswapV2Router02) {\r\n        return IUniswapV2Router02(uniswapRouter);\r\n    }\r\n    function getUniswapFactory() public view returns (IUniswapV2Factory) {\r\n        return IUniswapV2Factory(uniswapFac);\r\n    }\r\n    function getFactor() public view returns(uint256) {\r\n        if (_presaleDone) {\r\n            return _largeTotal.div(_totalSupply);\r\n        } else {\r\n            return _largeTotal.div(Constants.getLaunchSupply());\r\n        }\r\n    }\r\n    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\r\n        uint256 lpBalance = IERC20(pool).totalSupply();\r\n        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\r\n        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\r\n        return (tokenBalance, pairTokenBalance, lpBalance);\r\n    }\r\n    function getExpansionRate(address poolAdd) public view returns (uint256) {\r\n        uint256 expansionR = (_poolCounters[poolAdd].pairTokenBalance).mul(_poolCounters[poolAdd].startTokenBalance).mul(100000).div(_poolCounters[poolAdd].startPairTokenBalance).div(_poolCounters[poolAdd].tokenBalance);\r\n        \r\n        if (expansionR > 100000){ // more than 100percent\r\n            expansionR = expansionR.mul(expansionR).div(100000);\r\n            uint256 delta = expansionR - 100000;\r\n            delta = delta + mintRateOffset;\r\n\r\n            return (delta > maxMintRate) ? maxMintRate : delta;\r\n           \r\n        }else{\r\n            return minMintRate;\r\n        }\r\n    }\r\n    function getContractionRate(address poolAdd) public view returns (uint256) {\r\n        uint256 contractionR = (_poolCounters[poolAdd].tokenBalance).mul(_poolCounters[poolAdd].startPairTokenBalance).mul(100000).div(_poolCounters[poolAdd].pairTokenBalance).div(_poolCounters[poolAdd].startTokenBalance);\r\n        \r\n        if (contractionR > 100000){ // more than 100percent\r\n            contractionR = contractionR.mul(contractionR).div(100000);\r\n            uint256 delta = contractionR - 100000;\r\n            delta = delta + burnRateOffset;\r\n\r\n            uint256 maxBurn = _getMaxBurnRate();\r\n            return (delta > maxBurn) ? maxBurn : delta;\r\n           \r\n        }else{\r\n            return minBurnRate;\r\n        }\r\n    }\r\n    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256, uint256, uint256) {\r\n        uint256 expansionR = getExpansionRate(sender); // e.g. 14000 = 14%\r\n        uint256 mintAmount = amount.mul(expansionR).div(100000);\r\n        \r\n        return (expansionR, mintAmount.mul(Constants.getStabilizerFee()).div(10000),mintAmount.mul(Constants.getTreasuryFee()).div(10000),mintAmount);\r\n    }\r\n\r\n    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 contractionR = getContractionRate(isSupportedPool(recipient) ? recipient : _mainPool); \r\n        // e.g. 14000 = 14%\r\n        uint256 burnAmount = amount.mul(contractionR).div(100000);\r\n        return (burnAmount, burnAmount.mul(currentFactor));\r\n    }\r\n\r\n    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 utilityFee = amount.mul(Constants.getBaseUtilityFee()).div(10000);\r\n        return (utilityFee, utilityFee.mul(currentFactor));\r\n    }\r\n    // function getMintRate(address pool) external view returns (uint256) {\r\n    //     uint256 expansionR = (_poolCounters[pool].pairTokenBalance).mul(_poolCounters[pool].startTokenBalance).mul(100).div(_poolCounters[pool].startPairTokenBalance).div(_poolCounters[pool].tokenBalance);\r\n    //     if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\r\n    //         uint256 mintFactor = expansionR.mul(expansionR);\r\n    //         return mintFactor.sub(10000);\r\n    //     } else {\r\n    //         return Constants.getBaseExpansionFactor();\r\n    //     }\r\n    // }\r\n    // function getBurnRate(address pool) external view returns (uint256) {\r\n    //     uint256 contractionR = (_poolCounters[pool].tokenBalance).mul(_poolCounters[pool].startPairTokenBalance).mul(100).div(_poolCounters[pool].pairTokenBalance).div(_poolCounters[pool].startTokenBalance);\r\n    //     uint256 burnRate;\r\n    //     if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\r\n    //         uint256 burnFactor = contractionR.mul(contractionR);\r\n    //         burnRate = burnFactor.sub(10000);\r\n    //         if (burnRate > Constants.getBaseContractionCap()) {\r\n    //             return Constants.getBaseContractionCap();\r\n    //         }\r\n    //         return burnRate;\r\n\r\n    //     } else {\r\n    //         return Constants.getBaseContractionFactor();\r\n    //     }\r\n    // }\r\n    function _getMaxBurnRate() internal view returns (uint256) {\r\n        if (isBootstrap) {\r\n            return maxMintRate - 1;\r\n        } else {\r\n            return maxBurnRate;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n// File: contracts\\Setters.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract Setters is State, Getters {\r\n    // function updatePresaleAddress(address presaleAddress) internal {\r\n    //     _presaleCon = presaleAddress;\r\n    // }\r\n    event NewEpoch(uint256 timestamp, uint256 burnOffset, uint256 mintOffset);\r\n\r\n    function setAllowances(address owner, address spender, uint256 amount) internal {\r\n        _allowances[owner][spender] = amount;\r\n    }\r\n    function addToAccount(address account, uint256 amount) internal {\r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        _largeBalances[account] = _largeBalances[account].add(largeAmount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function addToAll(uint256 amount) internal {\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n    function initializeEpoch() internal {\r\n        _currentEpoch = now;\r\n    }\r\n    function updateEpoch(uint256 seed) internal {\r\n        initializeEpoch();\r\n        for (uint256 i=0; i<_supportedPools.length; i++) {\r\n            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\r\n            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\r\n        }\r\n        numEpochs += 1;\r\n        if (numEpochs == bootstrapEnd){\r\n            isBootstrap = false;\r\n        }\r\n\r\n        if (seed == 0){\r\n            seed = getNewSeed();\r\n        }\r\n        // random mint/burn rate\r\n        (seed, mintRateOffset) = getRandom(seed, minMintRate,maxMintRate.div(2));\r\n        (, burnRateOffset) = getRandom(seed, minBurnRate,maxBurnRate.div(2));\r\n        emit NewEpoch(now, mintRateOffset, burnRateOffset);\r\n    }\r\n    \r\n    function getNewSeed() internal view returns (uint256){\r\n        return uint256(keccak256(abi.encodePacked(blockhash(block.number-1), txNum)));\r\n    }\r\n    function getRandom(uint256 seed, uint256 min, uint256 max) internal pure returns (uint256, uint256) {\r\n        uint256 r = uint256(keccak256(abi.encodePacked(seed))) % (max.sub(min));\r\n        return (r, min + r);\r\n    }\r\n\r\n    function initializeLargeTotal() internal {\r\n        _largeTotal = Constants.getLargeTotal();\r\n    }\r\n    function syncPair(address pool) internal returns(bool) {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n        return (lpBurn);\r\n    }\r\n    function silentSyncPair(address pool) public {\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\r\n        _poolCounters[pool].lpBalance = lpBalance;\r\n        _poolCounters[pool].tokenBalance = tokenBalance;\r\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\r\n    }\r\n    function addSupportedPool(address pool, address pairToken) internal {\r\n        require(!isSupportedPool(pool),\"This pool is already supported\");\r\n        _isSupportedPool[pool] = true;\r\n        _supportedPools.push(pool);\r\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\r\n        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\r\n    }\r\n    function removeSupportedPool(address pool) internal {\r\n        require(isSupportedPool(pool), \"This pool is currently not supported\");\r\n        for (uint256 i = 0; i < _supportedPools.length; i++) {\r\n            if (_supportedPools[i] == pool) {\r\n                _supportedPools[i] = _supportedPools[_supportedPools.length - 1];\r\n                _isSupportedPool[pool] = false;\r\n                delete _poolCounters[pool];\r\n                _supportedPools.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n  \r\n}\r\n\r\n// File: contracts\\IUnicrypt.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IUnicrypt {\r\n    function depositToken(address token, uint256 amount, uint256 unlock_date) external payable;\r\n    function withdrawToken(address token, uint256 amount) external;\r\n\r\n    function getTokenReleaseAtIndex (address token, uint index) external view returns (uint256, uint256);\r\n    function getUserTokenInfo (address token, address user) external view returns (uint256, uint256, uint256);\r\n    function getUserVestingAtIndex (address token, address user, uint index) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts\\RST.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RStable is Setters, Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    modifier onlyTaxlessSetter {\r\n        require(isTaxlessSetter(_msgSender()),\"not taxless\");\r\n        _;\r\n    }\r\n    modifier taxlessTx {\r\n        _taxLess = true;\r\n        _;\r\n        _taxLess = false;\r\n    }\r\n\r\n    constructor() public Ownable(){\r\n        // uniswapRouterV2 = IUniswapV2Router02(Constants.getRouterAdd());\r\n        // uniswapFactory = IUniswapV2Factory(Constants.getFactoryAdd());\r\n        updateEpoch(0);\r\n        initializeLargeTotal();\r\n\r\n        // if platform that require sending coins\r\n        // initSaleWithBalance();\r\n        \r\n        // start with no tax during sale. taxlessly create pool first.\r\n        //  _taxLess = true;\r\n    }\r\n    // function initSaleWithBalance() internal {\r\n    //     // mint to myself.\r\n    //     uint256 toMint = Constants.getLaunchSupply().sub(totalSupply());\r\n    //     addToAccount(owner(),toMint);\r\n    //     emit Transfer(address(0),address(this),toMint);\r\n    // }\r\n\r\n    // needed if sale platform mints on the go\r\n    // function setPresaleDone() public payable onlyOwner {\r\n    //     require(totalSupply() <= Constants.getLaunchSupply(), \"Total supply is already minted\");\r\n    //     _mintRemaining();\r\n    //     _presaleDone = true;\r\n    // }\r\n    \r\n\r\n\r\n    function name() public pure returns (string memory) {\r\n        return Constants.getName();\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return Constants.getSymbol();\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return Constants.getDecimals();\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\r\n        return getTotalSupply();\r\n    }\r\n    \r\n    function circulatingSupply() public view returns (uint256) {\r\n        return getTotalSupply().sub(balanceOf(address(this))).sub(balanceOf(getStabilizer()));\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 currentFactor = getFactor();\r\n        return getLargeBalances(account).div(currentFactor);\r\n    }\r\n    \r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return getAllowances(owner,spender);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), getAllowances(sender,_msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n  \r\n    function setPresaleDone() public payable  {\r\n        // require(_msgSender() == presaleAdd, \"no!\");\r\n        // require(totalSupply() <= Constants.getLaunchSupply(), \"Total supply is already minted\");\r\n        _mintRemaining(); // mints the allocation for the LP\r\n        _presaleDone = true;\r\n        _createEthPool();\r\n    }\r\n    function _mintRemaining() private {\r\n        require(!isPresaleDone(), \"Cannot mint post presale\");\r\n        uint256 toMint = Constants.getLaunchSupply().sub(totalSupply());\r\n        addToAccount(address(this),toMint);\r\n        emit Transfer(address(0),address(this),toMint);\r\n    }\r\n    \r\n    function mint(address to, uint256 amount) external { \r\n        require(!_presaleDone,\"no minting after presale!\");\r\n        require(_msgSender() == presaleAdd, \"no!\");\r\n        addToAccount(to,amount);\r\n        emit Transfer(address(0),to,amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        setAllowances(owner, spender, amount);\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function randomAdvanceEpoch(address sender, address recipient, uint256 amount) internal {\r\n        \r\n        // if a new block, then calculate.\r\n        if (now > getCurrentEpoch().add(maxEpochLength)){\r\n            updateEpoch(0);\r\n        } else {\r\n            if (block.number == lastCalculatedBlock){\r\n                return;\r\n            }\r\n            lastCalculatedBlock = block.number;\r\n            (uint256 r, uint256 rMasked) = getRandom3(sender, recipient, amount);\r\n            if (rMasked >= advanceMinThreshold && rMasked < advanceMaxThreshold){\r\n                updateEpoch(r);\r\n            }\r\n        }\r\n    }\r\n    // function getRandom1(address sender, address recipient, uint256 amount) public view returns (uint256) {\r\n    //     uint256 r = uint256(keccak256(abi.encodePacked(txNum, sender, recipient, amount, blockhash(block.number-1))));\r\n    //     return r;\r\n    // }\r\n    // function getRandom2(uint256 r) public view returns (uint256) {\r\n    //     uint256 r1 = r.sub((r >> advanceLotteryBits) << advanceLotteryBits);\r\n    //     return r1;\r\n    // }\r\n    function getRandom3(address sender, address recipient, uint256 amount) public view returns (uint256, uint256) {\r\n        uint256 r = uint256(keccak256(abi.encodePacked(txNum, sender, recipient, amount, blockhash(block.number-1))));\r\n        uint256 r1 = _sliceNumber(r, advanceLotteryBits);\r\n        return (r,r1);\r\n    }\r\n    function _sliceNumber(uint256 _n, uint256 _nbits) private pure returns (uint256) {\r\n        // mask is made by shifting left an offset number of times\r\n        uint256 mask = uint256((2**(_nbits)) - 1);\r\n        // AND n with mask, and trim to max of _nbits bits\r\n        return uint256((_n & mask));\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        require(amount <= balanceOf(sender),\"Amount exceeds balance!!\");\r\n        // require(isPresaleDone(),\"Presale yet to close\");\r\n        \r\n        txNum += 1;\r\n        \r\n        uint256 currentFactor = getFactor();\r\n        uint256 largeAmount = amount.mul(currentFactor);\r\n        uint256 txType;\r\n        if (isTaxLess()) {\r\n            txType = 3;\r\n        } else {\r\n            bool lpBurn;\r\n            if (isSupportedPool(sender)) {\r\n                lpBurn = syncPair(sender);\r\n            } else if (isSupportedPool(recipient)){\r\n                silentSyncPair(recipient);\r\n            } else {\r\n                silentSyncPair(_mainPool);\r\n            }\r\n            txType = _getTxType(sender, lpBurn);\r\n        }\r\n        if (txType != 3){\r\n            // random advance epoch\r\n            randomAdvanceEpoch(sender, recipient, amount);\r\n        }\r\n        // Buy Transaction from supported pools - requires mint, no utility fee\r\n        if (txType == 1) {\r\n            (uint256 expansionR, uint256 stabilizerMint, uint256 treasuryMint, uint256 totalMint) = getMintValue(sender, amount);\r\n            // uint256 mintSize = amount.div(100);\r\n            lastMintRate = expansionR;\r\n\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\r\n            _largeBalances[getStabilizer()] = _largeBalances[getStabilizer()].add(stabilizerMint.mul(currentFactor));\r\n            _largeBalances[Constants.getTreasuryAdd()] = _largeBalances[Constants.getTreasuryAdd()].add(treasuryMint.mul(currentFactor));\r\n            _totalSupply = _totalSupply.add(totalMint);\r\n            emit Transfer(sender, recipient, amount);\r\n            emit Transfer(address(0),getStabilizer(),stabilizerMint); // stabilizer = dev fees for now.\r\n            emit Transfer(address(0),Constants.getTreasuryAdd(),treasuryMint);\r\n        }\r\n        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\r\n        else if (txType == 2) {\r\n            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\r\n            (uint256 utilityFee, uint256 largeUtilityFee) = getUtilityFee(amount);\r\n            uint256 actualTransferAmount = amount.sub(burnSize).sub(utilityFee);\r\n            uint256 largeTransferAmount = actualTransferAmount.mul(currentFactor);\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeTransferAmount);\r\n            _largeBalances[_liquidityReserve] = _largeBalances[_liquidityReserve].add(largeUtilityFee);\r\n            _totalSupply = _totalSupply.sub(burnSize);\r\n            _largeTotal = _largeTotal.sub(largeBurnSize);\r\n            emit Transfer(sender, recipient, actualTransferAmount);\r\n            emit Transfer(sender, address(0), burnSize);\r\n            emit Transfer(sender, _liquidityReserve, utilityFee);\r\n        } \r\n        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\r\n        else if (txType == 3) {\r\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\r\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _getTxType(address sender, bool lpBurn) private view returns(uint256) {\r\n        uint256 txType = 2;\r\n        if (isSupportedPool(sender)) {\r\n            if (lpBurn) {\r\n                txType = 3;\r\n            } else {\r\n                txType = 1;\r\n            }\r\n        } else if (sender == uniswapRouter) {\r\n            txType = 3;\r\n        }\r\n        return txType;\r\n    }\r\n\r\n    function _createEthPool() private taxlessTx{\r\n\r\n        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\r\n        IUniswapV2Factory uniswapFactory = getUniswapFactory();\r\n        address tokenUniswapPair;\r\n        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\r\n            tokenUniswapPair = uniswapFactory.createPair(\r\n            address(uniswapRouterV2.WETH()), address(this));\r\n        } else {\r\n            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\r\n        }\r\n        uint256 amtEth = address(this).balance;\r\n        uint256 amtToken = amtEth.mul(Constants.getAddLiquidRate()).div(10**9);\r\n        if (amtToken > balanceOf(address(this))){\r\n            amtToken = balanceOf(address(this));\r\n        }\r\n\r\n        _approve(address(this), address(uniswapRouterV2), amtToken);\r\n   \r\n        uniswapRouterV2.addLiquidityETH{value: amtEth}(address(this),\r\n            amtToken, 0, 0, address(this), block.timestamp); // to lp\r\n      \r\n        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\r\n        _mainPool = tokenUniswapPair;\r\n        \r\n        // lock\r\n        uint amtLPheld = IERC20(tokenUniswapPair).balanceOf(address(this));      \r\n        IERC20(tokenUniswapPair).approve(pol,amtLPheld);\r\n   \r\n        // lock liquidity\r\n        // if (pol != address(0)){\r\n        IUnicrypt(pol).depositToken(tokenUniswapPair, amtLPheld, block.timestamp.add(Constants.twoYearSec));\r\n        // }\r\n        \r\n    }\r\n    function spareFundsToTreasury(uint256 amt) external taxlessTx onlyOwner{\r\n        _transfer(address(this), Constants.getTreasuryAdd(), amt);\r\n    }\r\n    \r\n\r\n    function addNewSupportedPool(address pool, address pairToken) external onlyOwner() {\r\n        addSupportedPool(pool, pairToken);\r\n    }\r\n\r\n    function removeOldSupportedPool(address pool) external onlyOwner() {\r\n        removeSupportedPool(pool);\r\n    }\r\n\r\n    function setTaxlessSetter(address cont) external onlyOwner() {\r\n        require(!isTaxlessSetter(cont),\"already setter\");\r\n        _isTaxlessSetter[cont] = true;\r\n    }\r\n\r\n    function setTaxless(bool flag) public onlyTaxlessSetter {\r\n        _taxLess = flag;\r\n    }\r\n\r\n    function removeTaxlessSetter(address cont) external onlyOwner() {\r\n        require(isTaxlessSetter(cont),\"not setter\");\r\n        _isTaxlessSetter[cont] = false;\r\n    }\r\n\r\n    function setLiquidityReserve(address reserve) external onlyOwner() {\r\n        _isTaxlessSetter[_liquidityReserve] = false;\r\n        uint256 oldBalance = balanceOf(_liquidityReserve);\r\n        if (oldBalance > 0) {\r\n            _transfer(_liquidityReserve, reserve, oldBalance);\r\n            emit Transfer(_liquidityReserve, reserve, oldBalance);\r\n        }\r\n        _liquidityReserve = reserve;\r\n        _isTaxlessSetter[reserve] = true;\r\n    }\r\n\r\n    function setStabilizer(address reserve) external onlyOwner() taxlessTx {\r\n        _isTaxlessSetter[_stabilizer] = false;\r\n        uint256 oldBalance = balanceOf(_stabilizer);\r\n        if (oldBalance > 0) {\r\n            _transfer(_stabilizer, reserve, oldBalance);\r\n            emit Transfer(_stabilizer, reserve, oldBalance);\r\n        }\r\n        _stabilizer = reserve;\r\n        _isTaxlessSetter[reserve] = true;\r\n    }\r\n    function setRouterAdd(address a) external onlyOwner {\r\n        uniswapRouter = a;\r\n    }\r\n    function setFactoryAdd(address a) external onlyOwner{\r\n        uniswapFac = a;\r\n    }\r\n    function setMaxEpochLength(uint256 secs) external onlyOwner {\r\n        maxEpochLength = secs;\r\n    }\r\n    function setAdvance(uint256 min, uint256 max, uint256 bits) external onlyOwner {\r\n        advanceMinThreshold = min;\r\n        advanceMaxThreshold = max;\r\n        advanceLotteryBits = bits;\r\n    }\r\n    function setRates(uint256 minBurn, uint256 maxBurn, uint256 minMint, uint256 maxMint) external onlyOwner {\r\n        minBurnRate = minBurn;\r\n        maxBurnRate = maxBurn;\r\n        minMintRate = minMint;\r\n        maxMintRate = maxMint;\r\n    }\r\n    function setIsBootstrap(bool b) external onlyOwner {\r\n        isBootstrap = b;\r\n    }\r\n    function setNumEpochs(uint256 e) external onlyOwner {\r\n        numEpochs = e;\r\n    }\r\n    function setBootstrapEnd(uint256 n) external onlyOwner {\r\n        bootstrapEnd = n;\r\n    }\r\n    function setPresaleAdd(address a) external onlyOwner {\r\n        presaleAdd = a;\r\n    }\r\n    function setPolAdd(address a) external onlyOwner {\r\n        pol = a;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintOffset\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"addNewSupportedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceLotteryBits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceMaxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advanceMinThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRateOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAdd\",\"type\":\"address\"}],\"name\":\"getContractionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAdd\",\"type\":\"address\"}],\"name\":\"getExpansionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLargeBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCounters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRandom3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStabilizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSupportedPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"getUpdatedPoolCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBootstrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isSupportedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxLess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxlessSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCalculatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRateOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeOldSupportedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"removeTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bits\",\"type\":\"uint256\"}],\"name\":\"setAdvance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setBootstrapEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setFactoryAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setIsBootstrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setLiquidityReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setMaxEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"}],\"name\":\"setNumEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setPolAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setPresaleAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleDone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setRouterAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"}],\"name\":\"setStabilizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"}],\"name\":\"setTaxlessSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"silentSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"spareFundsToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RStable","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3950eecfb05cd8337fc6cc176f62a283b539f25de01bdbe7a7e953faabec6fe1"}]}