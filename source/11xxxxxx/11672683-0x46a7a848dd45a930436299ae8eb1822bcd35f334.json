{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: localhost/contracts/interfaces/IWETH.sol\n\n// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.6.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function withdraw(uint wad) external;\n}\n// File: localhost/contracts/access/Context.sol\n\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n// File: localhost/contracts/access/Ownable.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function initialize() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n// File: localhost/contracts/interfaces/ICurve.sol\n\n\npragma solidity ^0.6.0;\n\nabstract contract ICurveFiCurve {\n    \n    function exchange (\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external virtual;\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx)\n        external virtual view returns (uint256 out);\n        \n    function get_dy(int128 i, int128 j, uint256 dx)\n        external virtual view\n        returns (uint256 out);\n    \n    function A() external virtual view returns (uint256);\n    \n    function balances(uint arg0) external virtual view returns (uint256);\n    function fee() external virtual view returns (uint256);\n\n}\n\n// File: localhost/contracts/utils/CurveUtils.sol\n\n\npragma solidity ^0.6.12;\n\n\n/**\n * @dev reverse-engineered utils to help Curve amount calculations\n */\ncontract CurveUtils {\n    address constant CURVE_ADDRESS = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7; // 3-pool DAI/USDC/USDT\n    address public constant DAI_ADDRESS =\n        0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    address public constant USDC_ADDRESS =\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public constant USDT_ADDRESS =\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    ICurveFiCurve public curve = ICurveFiCurve(CURVE_ADDRESS);\n\n    uint256 private constant N_COINS = 3;\n    uint256[N_COINS] private RATES; //\n    uint256[N_COINS] private PRECISION_MUL;\n    uint256 private constant LENDING_PRECISION = 10**18;\n    uint256 private constant FEE_DENOMINATOR = 10**10;\n\n    mapping(address => int128) public curveIndex;\n\n    /**\n     * @dev get index of a token in Curve pool contract\n     */\n    function getCurveIndex(address token) internal view returns (int128) {\n        // to avoid 'stack too deep' compiler issue\n        return curveIndex[token] - 1;\n    }\n\n    /**\n     * @dev init internal variables at creation\n     */\n    function init() public virtual {\n        RATES = [\n            1000000000000000000,\n            1000000000000000000000000000000,\n            1000000000000000000000000000000\n        ];\n        PRECISION_MUL = [1, 1000000000000, 1000000000000];\n\n        curveIndex[DAI_ADDRESS] = 1; // actual index is 1 less\n        curveIndex[USDC_ADDRESS] = 2;\n        curveIndex[USDT_ADDRESS] = 3;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function get_D(uint256[N_COINS] memory xp, uint256 amp)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256 S = 0;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            S += xp[i];\n        }\n        if (S == 0) {\n            return 0;\n        }\n\n        uint256 Dprev = 0;\n        uint256 D = S;\n        uint256 Ann = amp * N_COINS;\n\n        for (uint256 i = 0; i < 255; i++) {\n            uint256 D_P = D;\n\n            for (uint256 j = 0; j < N_COINS; j++) {\n                D_P = (D_P * D) / (xp[j] * N_COINS + 1); // +1 is to prevent /0\n            }\n\n            Dprev = D;\n            D =\n                ((Ann * S + D_P * N_COINS) * D) /\n                ((Ann - 1) * D + (N_COINS + 1) * D_P);\n            // Equality with the precision of 1\n            if (D > Dprev) {\n                if ((D - Dprev) <= 1) {\n                    break;\n                }\n            } else {\n                if ((Dprev - D) <= 1) {\n                    break;\n                }\n            }\n        }\n        return D;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function get_y(\n        uint256 i,\n        uint256 j,\n        uint256 x,\n        uint256[N_COINS] memory xp_\n    ) public view returns (uint256) {\n        //x in the input is converted to the same price/precision\n        uint256 amp = curve.A();\n        uint256 D = get_D(xp_, amp);\n        uint256 c = D;\n        uint256 S_ = 0;\n        uint256 Ann = amp * N_COINS;\n\n        uint256 _x = 0;\n\n        for (uint256 _i = 0; _i < N_COINS; _i++) {\n            if (_i == i) {\n                _x = x;\n            } else if (_i != j) {\n                _x = xp_[_i];\n            } else {\n                continue;\n            }\n\n            S_ += _x;\n            c = (c * D) / (_x * N_COINS);\n        }\n\n        c = (c * D) / (Ann * N_COINS);\n        uint256 b = S_ + D / Ann; //  # - D\n        uint256 y_prev = 0;\n        uint256 y = D;\n\n        for (uint256 _i = 0; _i < 255; _i++) {\n            y_prev = y;\n            y = (y * y + c) / (2 * y + b - D);\n            //# Equality with the precision of 1\n            if (y > y_prev) {\n                if ((y - y_prev) <= 1) {\n                    break;\n                } else if ((y_prev - y) <= 1) {\n                    break;\n                }\n            }\n        }\n\n        return y;\n    }\n\n    /**\n     * @dev curve-specific maths - this method does not exists in the curve pool but we recreated it\n     */\n    function get_dx_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dy\n    ) public view returns (uint256) {\n        //dx and dy in underlying units\n        //uint256[N_COINS] rates = self._stored_rates();\n\n        uint256[N_COINS] memory xp = _xp();\n\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\n\n        uint256 y =\n            xp[j] -\n                ((dy * FEE_DENOMINATOR) / (FEE_DENOMINATOR - curve.fee())) *\n                precisions[j];\n        uint256 x = get_y(j, i, y, xp);\n        uint256 dx = (x - xp[i]) / precisions[i];\n        return dx;\n    }\n\n    /**\n     * @dev curve-specific maths\n     */\n    function _xp() internal view returns (uint256[N_COINS] memory) {\n        uint256[N_COINS] memory result = RATES;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            result[i] = (result[i] * curve.balances(i)) / LENDING_PRECISION;\n        }\n\n        return result;\n    }\n}\n\n// File: localhost/contracts/interfaces/IUniswapV2.sol\n\n\npragma solidity ^0.6.0;\n\n\ninterface IUniRouter {\n    function swapExactTokensForTokens(\n      uint amountIn,\n      uint amountOutMin,\n      address[] calldata path,\n      address to,\n      uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n      external\n      payable\n      returns (uint[] memory amounts);\n\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n    \n}\n\ninterface IUniswapV2Factory {\n    function addLiquidity(\n      address tokenA,\n      address tokenB,\n      uint amountADesired,\n      uint amountBDesired,\n      uint amountAMin,\n      uint amountBMin,\n      address to,\n      uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    \n    function removeLiquidity(\n      address tokenA,\n      address tokenB,\n      uint liquidity,\n      uint amountAMin,\n      uint amountBMin,\n      address to,\n      uint deadline\n    ) external returns (uint amountA, uint amountB);\n\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\n}\n\ninterface IUniswapV2Exchange {\n    //event Approval(address indexed owner, address indexed spender, uint value);\n    //event Transfer(address indexed from, address indexed to, uint value);\n\n    //function name() external pure returns (string memory);\n    //function symbol() external pure returns (string memory);\n    //function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    \n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    \n\n    //function allowance(address owner, address spender) external view returns (uint);\n\n    //function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    //function transferFrom(address from, address to, uint value) external returns (bool);\n\n    //function DOMAIN_SEPARATOR() external view returns (bytes32);\n    //function PERMIT_TYPEHASH() external pure returns (bytes32);\n    //function nonces(address owner) external view returns (uint);\n\n    //function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    //event Mint(address indexed sender, uint amount0, uint amount1);\n    //event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    /*event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    */\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    /*function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n    */\n}\n\n// File: localhost/contracts/utils/UniswapV2Lib.sol\n\n\npragma solidity ^0.6.12;\n\n\n\ncontract UniswapUtils {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        //require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        //require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n}\n\nlibrary UniswapV2ExchangeLib {\n    using SafeMath for uint256;\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function getReturn(\n        IUniswapV2Exchange exchange,\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amountIn\n    )\n        internal\n        view\n        returns (\n            uint256 result,\n            bool needSync,\n            bool needSkim\n        )\n    {\n        uint256 reserveIn = fromToken.balanceOf(address(exchange));\n        uint256 reserveOut = destToken.balanceOf(address(exchange));\n        (uint112 reserve0, uint112 reserve1, ) = exchange.getReserves();\n        if (fromToken > destToken) {\n            (reserve0, reserve1) = (reserve1, reserve0);\n        }\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\n\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(min(reserveOut, reserve1));\n        uint256 denominator =\n            min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\n    }\n}\n\n// File: localhost/contracts/interfaces/IERC20.sol\n\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: localhost/contracts/utils/SafeERC20.sol\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\n\n\npragma solidity ^0.6.12;\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\nlibrary UniversalERC20 {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            address(uint160(to)).transfer(amount);\n        } else {\n            token.safeTransfer(to, amount);\n        }\n    }\n\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\n        if (token != IERC20(0)) {\n            token.safeApprove(to, amount);\n        }\n    }\n\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\n        if (token == IERC20(0)) {\n            require(from == msg.sender && msg.value >= amount, \"msg.value is zero\");\n            if (to != address(this)) {\n                address(uint160(to)).transfer(amount);\n            }\n            if (msg.value > amount) {\n                msg.sender.transfer(msg.value.sub(amount));\n            }\n        } else {\n            token.safeTransferFrom(from, to, amount);\n        }\n    }\n\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\n        if (token == IERC20(0)) {\n            return who.balance;\n        } else {\n            return token.balanceOf(who);\n        }\n    }\n}\n// File: localhost/contracts/XTrinity.sol\n\n\npragma solidity ^0.6.12;\n\n\n\n\n\n\n\n/**\n * @title XTrinity exchanger contract\n * @dev this is an implementation of a split exchange that takes the input amount and proposes a better price\n * given the liquidity obtained from multiple AMM DEX exchanges considering their liquidity at the moment\n * might also help mitigating a flashloan attack\n */\ncontract XTrinity is Ownable, CurveUtils, UniswapUtils {\n    using UniversalERC20 for IERC20;\n    using Address for address;\n\n    using SafeMath for uint256;\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\n\n    IERC20 private constant ZERO_ADDRESS =\n        IERC20(0x0000000000000000000000000000000000000000);\n    IERC20 private constant ETH_ADDRESS =\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IERC20 private constant WETH_ADDRESS =\n        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    //address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    //address public constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    //address public constant USDT_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    address private constant UNI_FACTORY =\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n    address private constant SUSHI_FACTORY =\n        0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n\n    address private constant BONUS_ADDRESS =\n        0x8c545be506a335e24145EdD6e01D2754296ff018;\n    IWETH internal constant weth = IWETH(address(WETH_ADDRESS));\n\n    uint256 private constant PC_DENOMINATOR = 1e5;\n    address[] public exchanges = [UNI_FACTORY, SUSHI_FACTORY, CURVE_ADDRESS];\n    uint256 private constant ex_count = 3;\n    uint256 public slippageFee; //1000 = 1% slippage\n    uint256 public minPc;\n\n    bool private initialized;\n\n    /** @dev helper to identify if we work with ETH\n     */\n    function isETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == address(ZERO_ADDRESS) ||\n            address(token) == address(ETH_ADDRESS));\n    }\n\n    /** @dev helper to identify if we work with WETH\n     */\n    function isWETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == address(WETH_ADDRESS));\n    }\n\n    /** @dev helper to identify if we work with ETH or WETH\n     */\n    function isofETH(IERC20 token) internal pure returns (bool) {\n        return (address(token) == address(ZERO_ADDRESS) ||\n            address(token) == address(ETH_ADDRESS) ||\n            address(token) == address(WETH_ADDRESS));\n    }\n\n    /**\n     * @dev initializer method instead of a constructor - though we don't normally use proxy here we still might want to\n     */\n    function init() public virtual override {\n        require(!initialized, \"Initialized\");\n        initialized = true;\n        Ownable.initialize(); // Do not forget this call!\n        _init();\n    }\n\n    /**\n     * @dev internal variable initialization\n     */\n    function _init() internal virtual {\n        slippageFee = 1000; //1%\n        minPc = 20000; // 10%\n        CurveUtils.init();\n    }\n\n    /**\n     * @dev re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already.\n     * This method might help fixing the storage state.\n     */\n    function reInit() public virtual onlyOwner {\n        _init();\n    }\n\n    /**\n     * @dev set the slippage %%\n     */\n    function setMinPc(uint256 _minPC) external onlyOwner {\n        minPc = _minPC;\n    }\n\n    /**\n     * @dev universal method to get the given AMM address reserves\n     */\n    function getReserves(\n        IERC20 fromToken,\n        IERC20 toToken,\n        address factory\n    ) public view returns (uint256 reserveA, uint256 reserveB) {\n        IERC20 _from = isETH(fromToken) ? WETH_ADDRESS : fromToken;\n        IERC20 _to = isETH(toToken) ? WETH_ADDRESS : toToken;\n\n        address fromAddress = address(_from);\n        address toAddress = address(_to);\n\n        if (factory != CURVE_ADDRESS) {\n            //UNI\n            IUniswapV2Factory uniFactory = IUniswapV2Factory(factory);\n\n            IUniswapV2Exchange pair = uniFactory.getPair(_from, _to);\n\n            if (address(pair) != address(0)) {\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\n                (address token0, ) = sortTokens(fromAddress, toAddress);\n                (reserveA, reserveB) = fromAddress == token0\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n            }\n        } else {\n            // CURVE\n            int128 fromIndex = int128(curveIndex[fromAddress]);\n            int128 toIndex = int128(curveIndex[toAddress]);\n            if (fromIndex > 0 && toIndex > 0) {\n                reserveA = curve.balances(uint256(getCurveIndex(fromAddress)));\n                reserveB = curve.balances(uint256(getCurveIndex(toAddress)));\n            }\n        }\n    }\n\n    /**\n     * @dev Method to get the full reserves for the 2 token to be exchanged plus the proposed distribution to obtain the best price\n     */\n    function getFullReserves(IERC20 fromToken, IERC20 toToken)\n        public\n        view\n        returns (\n            uint256 fromTotal,\n            uint256 destTotal,\n            uint256[ex_count] memory dist,\n            uint256[2][ex_count] memory res\n        )\n    {\n        for (uint256 i = 0; i < ex_count; i++) {\n            (uint256 balance0, uint256 balance1) =\n                getReserves(fromToken, toToken, exchanges[i]);\n            fromTotal += balance0;\n            destTotal += balance1; //balance1 is toToken and the bigger it is  the juicier for us\n\n            (res[i][0], res[i][1]) = (balance0, balance1);\n        }\n\n        if (destTotal > 0) {\n            for (uint256 i = 0; i < ex_count; i++) {\n                dist[i] = res[i][1].mul(PC_DENOMINATOR).div(destTotal);\n            }\n        }\n    }\n\n    /**\n     * @dev Standard Uniswap V2 way to calculate the output amount given the input amount\n     */\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        uint256 amountInWithFee = amountIn.mul(997);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @dev Standard Uniswap V2 way\n     * given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n     */\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    /**\n     * @dev Method to get a direct quote between the given tokens - might not be always available\n     * as there might not be any direct liquidity between them\n     */\n    function quoteDirect(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    )\n        public\n        view\n        returns (uint256 returnAmount, uint256[ex_count] memory swapAmounts)\n    {\n        (\n            ,\n            ,\n            uint256[ex_count] memory distribution,\n            uint256[2][ex_count] memory reserves\n        ) = getFullReserves(fromToken, toToken);\n\n        uint256 addDistribution;\n        uint256 eligible;\n        uint256 lastNonZeroIndex;\n\n        for (uint256 i = 0; i < ex_count; i++) {\n            if (distribution[i] > minPc) {\n                lastNonZeroIndex = i;\n                eligible++;\n            } else {\n                addDistribution += distribution[i];\n                distribution[i] = 0;\n            }\n        }\n        require(eligible > 0, \"No eligible pools\");\n\n        uint256 remainingAmount = amount;\n\n        for (uint256 i = 0; i <= lastNonZeroIndex; i++) {\n            if (distribution[i] > 0) {\n                if (addDistribution > 0) {\n                    distribution[i] += addDistribution.div(eligible);\n                }\n\n                if (i == lastNonZeroIndex) {\n                    swapAmounts[i] = remainingAmount;\n                } else {\n                    swapAmounts[i] =\n                        (amount * distribution[i]) /\n                        PC_DENOMINATOR;\n                }\n\n                if (exchanges[i] == CURVE_ADDRESS) {\n                    returnAmount += curve.get_dy_underlying(\n                        getCurveIndex(address(fromToken)),\n                        getCurveIndex(address(toToken)),\n                        swapAmounts[i]\n                    );\n                } else {\n                    returnAmount += getAmountOut(\n                        swapAmounts[i],\n                        reserves[i][0],\n                        reserves[i][1]\n                    );\n                }\n\n                remainingAmount -= swapAmounts[i];\n            }\n        }\n    }\n\n    /**\n     * @dev Method to get a reverse direct quote between the given tokens - might not be always available\n     * as there might not be any direct liquidity between them\n     */\n    function reverseQuoteDirect(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    )\n        public\n        view\n        returns (uint256 inputAmount, uint256[ex_count] memory swapAmounts)\n    {\n        (\n            ,\n            ,\n            uint256[ex_count] memory distribution,\n            uint256[2][ex_count] memory reserves\n        ) = getFullReserves(fromToken, toToken);\n\n        uint256 addDistribution;\n        uint256 eligible;\n        uint256 lastNonZeroIndex;\n\n        for (uint256 i = 0; i < ex_count; i++) {\n            if (distribution[i] > minPc) {\n                lastNonZeroIndex = i;\n                eligible++;\n            } else {\n                addDistribution += distribution[i];\n                distribution[i] = 0;\n            }\n        }\n        require(eligible > 0, \"No eligible pools\");\n\n        uint256 remainingAmount = returnAmount;\n\n        for (uint256 i = 0; i <= lastNonZeroIndex; i++) {\n            if (distribution[i] > 0) {\n                if (addDistribution > 0) {\n                    distribution[i] += addDistribution.div(eligible);\n                }\n\n                if (i == lastNonZeroIndex) {\n                    swapAmounts[i] = remainingAmount;\n                } else {\n                    swapAmounts[i] =\n                        (returnAmount * distribution[i]) /\n                        PC_DENOMINATOR;\n                }\n\n                if (exchanges[i] == CURVE_ADDRESS) {\n                    inputAmount += get_dx_underlying(\n                        uint256(getCurveIndex(address(fromToken))),\n                        uint256(getCurveIndex(address(toToken))),\n                        swapAmounts[i]\n                    );\n                } else {\n                    inputAmount += getAmountIn(\n                        swapAmounts[i],\n                        reserves[i][0],\n                        reserves[i][1]\n                    );\n                }\n\n                remainingAmount -= swapAmounts[i];\n            }\n        }\n    }\n\n    /**\n     * @dev Method to get a best quote between the direct and through the WETH -\n     * as there is more liquidity between token/ETH than token0/token1\n     */\n    function quote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount\n    )\n        public\n        view\n        returns (\n            uint256 returnAmount,\n            uint256[ex_count] memory swapAmountsIn,\n            uint256[ex_count] memory swapAmountsOut,\n            bool swapVia\n        )\n    {\n        if (fromToken == toToken) {\n            returnAmount = amount;\n        } else {\n            (\n                uint256 returnAmountDirect,\n                uint256[ex_count] memory swapAmounts1\n            ) = quoteDirect(fromToken, toToken, amount);\n            returnAmount = returnAmountDirect;\n            swapAmountsIn = swapAmounts1;\n            if (!isofETH(toToken) && !isofETH(fromToken)) {\n                (\n                    uint256 returnAmountETH,\n                    uint256[ex_count] memory swapAmounts2\n                ) = quoteDirect(fromToken, WETH_ADDRESS, amount);\n                (\n                    uint256 returnAmountVia,\n                    uint256[ex_count] memory swapAmounts3\n                ) = quoteDirect(WETH_ADDRESS, toToken, returnAmountETH);\n\n                if (returnAmountVia > returnAmountDirect) {\n                    returnAmount = returnAmountVia;\n                    swapAmountsIn = swapAmounts2;\n                    swapAmountsOut = swapAmounts3;\n                    swapVia = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Method to get a best Reverse Quote between the direct and through the WETH -\n     * as there is more liquidity between token/ETH than token0/token1\n     */\n    function reverseQuote(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 returnAmount\n    )\n        public\n        view\n        returns (\n            uint256 inputAmount,\n            uint256[ex_count] memory swapAmountsIn,\n            uint256[ex_count] memory swapAmountsOut,\n            bool swapVia\n        )\n    {\n        if (fromToken == toToken) {\n            inputAmount = returnAmount;\n        } else {\n            (uint256 inputAmountDirect, uint256[ex_count] memory swapAmounts1) =\n                reverseQuoteDirect(fromToken, toToken, returnAmount);\n            inputAmount = inputAmountDirect;\n            swapAmountsIn = swapAmounts1;\n            if (!isofETH(toToken) && !isofETH(fromToken)) {\n                (\n                    uint256 inputAmountETH,\n                    uint256[ex_count] memory swapAmounts3\n                ) = reverseQuoteDirect(WETH_ADDRESS, toToken, returnAmount);\n                (\n                    uint256 inputAmountVia,\n                    uint256[ex_count] memory swapAmounts2\n                ) = reverseQuoteDirect(fromToken, WETH_ADDRESS, inputAmountETH);\n\n                if (inputAmountVia < inputAmountDirect) {\n                    inputAmount = inputAmountVia;\n                    swapAmountsIn = swapAmounts2;\n                    swapAmountsOut = swapAmounts3;\n                    swapVia = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev run a swap across multiple exchanges given the splitted amounts\n     * @param swapAmounts - array of splitted amounts\n     */\n    function executeSwap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256[ex_count] memory swapAmounts\n    ) internal returns (uint256 returnAmount) {\n        for (uint256 i = 0; i < swapAmounts.length; i++) {\n            if (swapAmounts[i] > 0) {\n                uint256 thisBalance =\n                    fromToken.universalBalanceOf(address(this));\n                uint256 swapAmount = min(thisBalance, swapAmounts[i]);\n\n                if (exchanges[i] != CURVE_ADDRESS) {\n                    returnAmount += _swapOnUniswapV2Internal(\n                        fromToken,\n                        toToken,\n                        swapAmount,\n                        exchanges[i]\n                    );\n                } else {\n                    returnAmount += _swapOnCurve(\n                        fromToken,\n                        toToken,\n                        swapAmount\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Main function to run a swap\n     * @param slipProtect - enable/disable slip protection\n     */\n    function swap(\n        IERC20 fromToken,\n        IERC20 toToken,\n        uint256 amount,\n        bool slipProtect\n    ) public payable virtual returns (uint256 returnAmount) {\n        if (fromToken == toToken) {\n            return amount;\n        }\n\n        if (isETH(fromToken)) {\n            amount = msg.value;\n            weth.deposit{value: amount}();\n            fromToken = WETH_ADDRESS;\n        } else {\n            fromToken.universalTransferFrom(msg.sender, address(this), amount);\n        }\n\n        amount = min(fromToken.balanceOf(address(this)), amount);\n\n        (\n            uint256 returnQuoteAmount,\n            uint256[ex_count] memory swapAmountsIn,\n            uint256[ex_count] memory swapAmountsOut,\n            bool swapVia\n        ) = quote(fromToken, toToken, amount);\n\n        uint256 minAmount;\n        if (slipProtect) {\n            uint256 feeSlippage =\n                returnQuoteAmount.mul(slippageFee).div(PC_DENOMINATOR);\n            minAmount = returnQuoteAmount.sub(feeSlippage);\n        }\n\n        if (swapVia) {\n            executeSwap(fromToken, WETH_ADDRESS, swapAmountsIn);\n            returnAmount = executeSwap(WETH_ADDRESS, toToken, swapAmountsOut);\n        } else {\n            returnAmount = executeSwap(fromToken, toToken, swapAmountsIn);\n        }\n        require(returnAmount >= minAmount, \"XTrinity slippage is too high\");\n\n        toToken.universalTransfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @dev fallback function to withdraw tokens from contract\n     * - not normally needed\n     */\n    function transferTokenBack(address TokenAddress)\n        external\n        onlyOwner\n        returns (uint256 returnBalance)\n    {\n        IERC20 Token = IERC20(TokenAddress);\n        returnBalance = Token.universalBalanceOf(address(this));\n        if (returnBalance > 0) {\n            Token.universalTransfer(msg.sender, returnBalance);\n        }\n    }\n\n    function _swapOnCurve(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount\n    ) public payable returns (uint256 returnAmount) {\n        //using curve\n\n        if (fromToken.allowance(address(this), CURVE_ADDRESS) != uint256(-1)) {\n            fromToken.universalApprove(CURVE_ADDRESS, uint256(-1));\n        }\n\n        uint256 startBalance = destToken.balanceOf(address(this));\n\n        // actual index is -1\n        curve.exchange(\n            getCurveIndex(address(fromToken)),\n            getCurveIndex(address(destToken)),\n            amount,\n            0\n        );\n\n        return destToken.balanceOf(address(this)) - startBalance;\n    }\n\n    function _swapOnUniswapV2Internal(\n        IERC20 fromToken,\n        IERC20 destToken,\n        uint256 amount,\n        address factory\n    ) public payable returns (uint256 returnAmount) {\n        if (isETH(fromToken)) {\n            weth.deposit{value: amount}();\n            fromToken = WETH_ADDRESS;\n        }\n\n        destToken = isETH(destToken) ? WETH_ADDRESS : destToken;\n        IUniswapV2Factory uniFactory = IUniswapV2Factory(factory);\n        IUniswapV2Exchange exchange = uniFactory.getPair(fromToken, destToken);\n        bool needSync;\n        bool needSkim;\n        (returnAmount, needSync, needSkim) = exchange.getReturn(\n            fromToken,\n            destToken,\n            amount\n        );\n        if (needSync) {\n            exchange.sync();\n        } else if (needSkim) {\n            exchange.skim(BONUS_ADDRESS);\n        }\n\n        fromToken.universalTransfer(address(exchange), amount);\n        if (uint256(address(fromToken)) < uint256(address(destToken))) {\n            exchange.swap(0, returnAmount, address(this), \"\");\n        } else {\n            exchange.swap(returnAmount, 0, address(this), \"\");\n        }\n\n        if (isETH(destToken)) {\n            weth.withdraw(WETH_ADDRESS.balanceOf(address(this)));\n        }\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_swapOnCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"_swapOnUniswapV2Internal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"contract ICurveFiCurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"curveIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"getFullReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"dist\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[2][3]\",\"name\":\"res\",\"type\":\"uint256[2][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"xp\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"}],\"name\":\"get_D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"name\":\"get_dx_underlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"xp_\",\"type\":\"uint256[3]\"}],\"name\":\"get_y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsIn\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsOut\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"swapVia\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quoteDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmounts\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsIn\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmountsOut\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"swapVia\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"reverseQuoteDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmounts\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPC\",\"type\":\"uint256\"}],\"name\":\"setMinPc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"slipProtect\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"transferTokenBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XTrinity","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}