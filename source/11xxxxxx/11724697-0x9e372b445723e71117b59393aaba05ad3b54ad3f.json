{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/X2ETHFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IX2ETHFactory.sol\\\";\\nimport \\\"./interfaces/IX2Token.sol\\\";\\n\\nimport \\\"./X2ETHMarket.sol\\\";\\nimport \\\"./X2Token.sol\\\";\\n\\ncontract X2ETHFactory is IX2ETHFactory {\\n    using SafeMath for uint256;\\n\\n    address public gov;\\n    address public appOwner;\\n    address public override feeReceiver;\\n    address public override interestReceiver;\\n\\n    address[] public markets;\\n\\n    event CreateMarket(\\n        address priceFeed,\\n        uint256 multiplierBasisPoints,\\n        uint256 maxProfitBasisPoints,\\n        uint256 fundingDivisor,\\n        uint256 appFeeBasisPoints,\\n        uint256 index\\n    );\\n\\n    event GovChange(address gov);\\n    event FeeReceiverChange(address feeReceiver);\\n    event InterestReceiverChange(address feeReceiver);\\n    event DistributorChange(address token, address distributor, address rewardToken);\\n    event InfoChange(address token, string name, string symbol);\\n    event FundingChange(address market, uint256 fundingDivisor);\\n    event AppOwnerChange(address appOwner);\\n    event AppFeeChange(address market, uint256 feeBasisPoints);\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"X2ETHFactory: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyAppOwner() {\\n        require(msg.sender == appOwner, \\\"X2ETHFactory: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function marketsLength() external view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n        emit GovChange(gov);\\n    }\\n\\n    function setDistributor(address _token, address _distributor, address _rewardToken) external onlyGov {\\n        IX2Token(_token).setDistributor(_distributor, _rewardToken);\\n        emit DistributorChange(_token, _distributor, _rewardToken);\\n    }\\n\\n    function setFunding(address _market, uint256 _fundingDivisor) external onlyGov {\\n        IX2Market(_market).setFunding(_fundingDivisor);\\n        emit FundingChange(_market, _fundingDivisor);\\n    }\\n\\n    function setAppOwner(address _appOwner) external onlyGov {\\n        appOwner = _appOwner;\\n        emit AppOwnerChange(appOwner);\\n    }\\n\\n    function setAppFee(address _market, uint256 _appFeeBasisPoints) external onlyAppOwner {\\n        IX2Market(_market).setAppFee(_appFeeBasisPoints);\\n        emit AppFeeChange(_market, _appFeeBasisPoints);\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external onlyGov {\\n        feeReceiver = _feeReceiver;\\n        emit FeeReceiverChange(feeReceiver);\\n    }\\n\\n    function setInterestReceiver(address _interestReceiver) external onlyGov {\\n        interestReceiver = _interestReceiver;\\n        emit InterestReceiverChange(interestReceiver);\\n    }\\n\\n    function setInfo(\\n        address _bullToken,\\n        string calldata _bullName,\\n        string calldata _bullSymbol,\\n        address _bearToken,\\n        string calldata _bearName,\\n        string calldata _bearSymbol\\n    ) external onlyGov {\\n        IX2Token(_bullToken).setInfo(_bullName, _bullSymbol);\\n        IX2Token(_bearToken).setInfo(_bearName, _bearSymbol);\\n        emit InfoChange(_bullToken, _bullName, _bullSymbol);\\n        emit InfoChange(_bearToken, _bearName, _bearSymbol);\\n    }\\n\\n    function createMarket(\\n        address _priceFeed,\\n        uint256 _multiplierBasisPoints,\\n        uint256 _maxProfitBasisPoints,\\n        uint256 _fundingDivisor,\\n        uint256 _appFeeBasisPoints\\n    ) external returns (address, address, address) {\\n        require(msg.sender == gov || msg.sender == appOwner, \\\"X2ETHFactory: forbidden\\\");\\n\\n        X2ETHMarket market = new X2ETHMarket();\\n        market.initialize(\\n            address(this),\\n            _priceFeed,\\n            _multiplierBasisPoints,\\n            _maxProfitBasisPoints,\\n            _fundingDivisor,\\n            _appFeeBasisPoints\\n        );\\n\\n        X2Token bullToken = new X2Token();\\n        bullToken.initialize(address(this), address(market));\\n\\n        X2Token bearToken = new X2Token();\\n        bearToken.initialize(address(this), address(market));\\n\\n        market.setBullToken(address(bullToken));\\n        market.setBearToken(address(bearToken));\\n\\n        markets.push(address(market));\\n\\n        emit CreateMarket(\\n            _priceFeed,\\n            _multiplierBasisPoints,\\n            _maxProfitBasisPoints,\\n            _fundingDivisor,\\n            _appFeeBasisPoints,\\n            markets.length - 1\\n        );\\n\\n        return (address(market), address(bullToken), address(bearToken));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2ETHFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2ETHFactory {\\n    function feeReceiver() external view returns (address);\\n    function interestReceiver() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2Token {\\n    function cumulativeRewardPerToken() external view returns (uint256);\\n    function lastBoughtAt(address account) external view returns (uint256);\\n    function getPendingProfit(address account) external view returns (uint256);\\n    function distributor() external view returns (address);\\n    function rewardToken() external view returns (address);\\n    function _totalSupply() external view returns (uint256);\\n    function _balanceOf(address account) external view returns (uint256);\\n    function market() external view returns (address);\\n    function getDivisor() external view returns (uint256);\\n    function getReward(address account) external view returns (uint256);\\n    function costOf(address account) external view returns (uint256);\\n    function mint(address account, uint256 amount, uint256 divisor) external;\\n    function burn(address account, uint256 amount, bool distribute) external returns (uint256);\\n    function setDistributor(address _distributor, address _rewardToken) external;\\n    function setInfo(string memory name, string memory symbol) external;\\n}\\n\"\r\n    },\r\n    \"contracts/X2ETHMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/token/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IX2ETHFactory.sol\\\";\\nimport \\\"./interfaces/IX2PriceFeed.sol\\\";\\nimport \\\"./interfaces/IX2Token.sol\\\";\\nimport \\\"./interfaces/IX2Market.sol\\\";\\n\\ncontract X2ETHMarket is ReentrancyGuard, IX2Market {\\n    using SafeMath for uint256;\\n\\n    // use a single storage slot\\n    // max uint128 has 38 digits so it can support the INITIAL_REBASE_DIVISOR\\n    // increasing by 10^28 times\\n    uint128 public override cachedBullDivisor;\\n    uint128 public override cachedBearDivisor;\\n\\n    uint256 public constant FEE_BASIS_POINTS = 20; // 0.2% fee\\n    uint256 public constant MAX_APP_FEE_BASIS_POINTS = 20; // 0.2% max app fee\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    // X2Token.balance uses uint128, max uint128 has 38 digits\\n    // with an initial rebase divisor of 10^10\\n    // and 18 decimals for ETH, collateral of up to 10 billion ETH\\n    // can be supported\\n    uint128 public constant INITIAL_REBASE_DIVISOR = 10**10;\\n    uint256 public constant MAX_DIVISOR = uint128(-1);\\n\\n    uint256 public constant FUNDING_INTERVAL = 1 hours;\\n    uint256 public constant MIN_FUNDING_DIVISOR = 500;\\n    uint256 public constant MAX_FUNDING_DIVISOR = 1000000;\\n\\n    address public factory;\\n\\n    address public override bullToken;\\n    address public override bearToken;\\n    address public priceFeed;\\n    uint256 public multiplierBasisPoints;\\n    uint256 public maxProfitBasisPoints;\\n    uint256 public feeReserve;\\n\\n    uint256 public appFeeBasisPoints;\\n    uint256 public appFeeReserve;\\n\\n    uint256 public fundingDivisor;\\n    uint256 public lastFundingTime;\\n\\n    uint256 public override lastPrice;\\n\\n    bool public isInitialized;\\n\\n    mapping (address => uint256) public appFees;\\n\\n    event DistributeFees(address feeReceiver, uint256 amount);\\n    event DistributeInterest(address feeReceiver, uint256 amount);\\n    event Rebase(uint256 price, uint128 bullDivisor, uint128 bearDivisor);\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"X2ETHMarket: forbidden\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _factory,\\n        address _priceFeed,\\n        uint256 _multiplierBasisPoints,\\n        uint256 _maxProfitBasisPoints,\\n        uint256 _fundingDivisor,\\n        uint256 _appFeeBasisPoints\\n    ) public {\\n        require(!isInitialized, \\\"X2ETHMarket: already initialized\\\");\\n        require(_maxProfitBasisPoints <= BASIS_POINTS_DIVISOR, \\\"X2ETHMarket: maxProfitBasisPoints limit exceeded\\\");\\n        isInitialized = true;\\n\\n        factory = _factory;\\n        priceFeed = _priceFeed;\\n        multiplierBasisPoints = _multiplierBasisPoints;\\n        maxProfitBasisPoints = _maxProfitBasisPoints;\\n        setFunding(_fundingDivisor);\\n        setAppFee(_appFeeBasisPoints);\\n\\n        lastPrice = uint176(latestPrice());\\n        require(lastPrice != 0, \\\"X2ETHMarket: unsupported price feed\\\");\\n\\n        _updateLastFundingTime();\\n    }\\n\\n    function setAppFee(uint256 _appFeeBasisPoints) public override onlyFactory {\\n        require(_appFeeBasisPoints <= MAX_APP_FEE_BASIS_POINTS, \\\"X2ETHMarket: fee limit exceeded\\\");\\n        appFeeBasisPoints = _appFeeBasisPoints;\\n    }\\n\\n    function setFunding(uint256 _fundingDivisor) public override onlyFactory {\\n        require(_fundingDivisor >= MIN_FUNDING_DIVISOR && _fundingDivisor <= MAX_FUNDING_DIVISOR, \\\"X2ETHMarket: funding range exceeded\\\");\\n        fundingDivisor = _fundingDivisor;\\n    }\\n\\n    function setBullToken(address _bullToken) public onlyFactory {\\n        require(bullToken == address(0), \\\"X2ETHMarket: bullToken already set\\\");\\n        bullToken = _bullToken;\\n        cachedBullDivisor = INITIAL_REBASE_DIVISOR;\\n    }\\n\\n    function setBearToken(address _bearToken) public onlyFactory {\\n        require(bearToken == address(0), \\\"X2ETHMarket: bearToken already set\\\");\\n        bearToken = _bearToken;\\n        cachedBearDivisor = INITIAL_REBASE_DIVISOR;\\n    }\\n\\n    function buy(address _token, address _appFeeReceiver) public payable nonReentrant returns (uint256) {\\n        return _buy(_token, msg.sender, _appFeeReceiver);\\n    }\\n\\n    function sell(address _token, uint256 _sellPoints, address _receiver, address _appFeeReceiver) public nonReentrant returns (uint256) {\\n        return _sell(_token, _sellPoints, _receiver, true, _appFeeReceiver);\\n    }\\n\\n    // since an X2Token's distributor can be set by the factory's gov,\\n    // the market should allow an option to sell the token without invoking\\n    // the distributor\\n    // this ensures that tokens can always be sold even if the distributor\\n    // is set to an address that intentionally fails when `distribute` is called\\n    function sellWithoutDistribution(address _token, uint256 _sellPoints, address _receiver) public nonReentrant returns (uint256) {\\n        return _sell(_token, _sellPoints, _receiver, false, address(0));\\n    }\\n\\n    function flip(address _token, uint256 _flipPoints, address _appFeeReceiver) public nonReentrant returns (uint256) {\\n        return _flip(_token, _flipPoints, msg.sender, _appFeeReceiver);\\n    }\\n\\n    function rebase() public returns (bool) {\\n        uint256 _lastPrice = uint256(lastPrice);\\n        uint256 nextPrice = latestPrice();\\n        uint256 intervals = block.timestamp.sub(lastFundingTime).div(FUNDING_INTERVAL);\\n        if (_lastPrice == nextPrice && intervals == 0) { return false; }\\n\\n        (uint256 nextBullDivisor, uint256 nextBearDivisor) = getDivisors(_lastPrice, nextPrice);\\n\\n        lastPrice = nextPrice;\\n        cachedBullDivisor = uint128(nextBullDivisor);\\n        cachedBearDivisor = uint128(nextBearDivisor);\\n        if (intervals > 0) {\\n            _updateLastFundingTime();\\n        }\\n\\n        emit Rebase(nextPrice, uint128(nextBullDivisor), uint128(nextBearDivisor));\\n        return true;\\n    }\\n\\n    function distributeFees() public nonReentrant returns (uint256) {\\n        address feeReceiver = IX2ETHFactory(factory).feeReceiver();\\n        require(feeReceiver != address(0), \\\"X2Market: empty feeReceiver\\\");\\n\\n        uint256 fees = feeReserve;\\n        feeReserve = 0;\\n\\n        (bool success,) = feeReceiver.call{value: fees}(\\\"\\\");\\n        require(success, \\\"X2ETHMarket: transfer failed\\\");\\n\\n        emit DistributeFees(feeReceiver, fees);\\n\\n        return fees;\\n    }\\n\\n    function distributeAppFees(address _appFeeReceiver) public nonReentrant returns (uint256) {\\n        require(_appFeeReceiver != address(0), \\\"X2Market: empty feeReceiver\\\");\\n\\n        uint256 fees = appFees[_appFeeReceiver];\\n        if (fees == 0) { return 0; }\\n\\n        appFeeReserve = appFeeReserve.sub(fees);\\n        appFees[_appFeeReceiver] = 0;\\n\\n        (bool success,) = _appFeeReceiver.call{value: fees}(\\\"\\\");\\n        require(success, \\\"X2ETHMarket: transfer failed\\\");\\n\\n        emit DistributeFees(_appFeeReceiver, fees);\\n\\n        return fees;\\n    }\\n\\n    function distributeInterest() public nonReentrant returns (uint256) {\\n        address interestReceiver = IX2ETHFactory(factory).interestReceiver();\\n        require(interestReceiver != address(0), \\\"X2Market: empty interestReceiver\\\");\\n\\n        uint256 interest = interestReserve();\\n\\n        (bool success,) = interestReceiver.call{value: interest}(\\\"\\\");\\n        require(success, \\\"X2ETHMarket: transfer failed\\\");\\n\\n        emit DistributeInterest(interestReceiver, interest);\\n\\n        return interest;\\n    }\\n\\n    function interestReserve() public view returns (uint256) {\\n        uint256 bullRefSupply = IX2Token(bullToken)._totalSupply();\\n        uint256 bearRefSupply = IX2Token(bearToken)._totalSupply();\\n\\n        // the actual underlying supplies\\n        uint256 totalBulls = bullRefSupply.div(cachedBullDivisor);\\n        uint256 totalBears = bearRefSupply.div(cachedBearDivisor);\\n\\n        uint256 balance = address(this).balance;\\n        return balance.sub(totalBulls).sub(totalBears).sub(feeReserve).sub(appFeeReserve);\\n    }\\n\\n    function getDivisor(address _token) public override view returns (uint256) {\\n        bool isBull = _token == bullToken;\\n        uint256 _lastPrice = uint256(lastPrice);\\n        uint256 nextPrice = latestPrice();\\n        uint256 intervals = block.timestamp.sub(lastFundingTime).div(FUNDING_INTERVAL);\\n\\n        if (_lastPrice == nextPrice && intervals == 0) {\\n            return isBull ? cachedBullDivisor : cachedBearDivisor;\\n        }\\n\\n        (uint256 nextBullDivisor, uint256 nextBearDivisor) = getDivisors(_lastPrice, nextPrice);\\n        return isBull ? nextBullDivisor : nextBearDivisor;\\n    }\\n\\n    function latestPrice() public override view returns (uint256) {\\n        int256 answer = IX2PriceFeed(priceFeed).latestAnswer();\\n        // avoid negative or zero values being returned\\n        if (answer <= 0) {\\n            return uint256(lastPrice);\\n        }\\n        return uint256(answer);\\n    }\\n\\n    function getFunding() public override view returns (uint256, uint256) {\\n        uint256 _lastPrice = uint256(lastPrice);\\n        uint256 nextPrice = latestPrice();\\n        (uint256 nextBullDivisor, uint256 nextBearDivisor) = getDivisors(_lastPrice, nextPrice);\\n\\n        uint256 totalBulls = IX2Token(bullToken)._totalSupply().div(nextBullDivisor);\\n        uint256 totalBears = IX2Token(bearToken)._totalSupply().div(nextBearDivisor);\\n\\n        if (totalBulls > totalBears && totalBears > 0) {\\n            uint256 funding = totalBulls.sub(totalBears).div(fundingDivisor);\\n            return (funding, 0);\\n        }\\n\\n        if (totalBears > totalBulls && totalBulls > 0) {\\n            uint256 funding = totalBears.sub(totalBulls).div(fundingDivisor);\\n            return (0, funding);\\n        }\\n\\n        return (0, 0);\\n    }\\n\\n    function getDivisors(uint256 _lastPrice, uint256 _nextPrice) public override view returns (uint256, uint256) {\\n        uint256 bullRefSupply = IX2Token(bullToken)._totalSupply();\\n        uint256 bearRefSupply = IX2Token(bearToken)._totalSupply();\\n\\n        // the actual underlying supplies\\n        uint256 totalBulls = bullRefSupply.div(cachedBullDivisor);\\n        uint256 totalBears = bearRefSupply.div(cachedBearDivisor);\\n\\n        // scope variables to avoid stack too deep errors\\n        {\\n        // refSupply is the smaller of the two supplies\\n        uint256 refSupply = totalBulls < totalBears ? totalBulls : totalBears;\\n        uint256 delta = _nextPrice > _lastPrice ? _nextPrice.sub(_lastPrice) : _lastPrice.sub(_nextPrice);\\n        // profit is [(smaller supply) * (change in price) / (last price)] * multiplierBasisPoints\\n        uint256 profit = refSupply.mul(delta).div(_lastPrice).mul(multiplierBasisPoints).div(BASIS_POINTS_DIVISOR);\\n\\n        // cap the profit to the (max profit percentage) of the smaller supply\\n        uint256 maxProfit = refSupply.mul(maxProfitBasisPoints).div(BASIS_POINTS_DIVISOR);\\n        if (profit > maxProfit) { profit = maxProfit; }\\n\\n        totalBulls = _nextPrice > _lastPrice ? totalBulls.add(profit) : totalBulls.sub(profit);\\n        totalBears = _nextPrice > _lastPrice ? totalBears.sub(profit) : totalBears.add(profit);\\n        }\\n\\n        {\\n        uint256 intervals = block.timestamp.sub(lastFundingTime).div(FUNDING_INTERVAL);\\n        if (intervals > 0) {\\n            if (totalBulls > totalBears && totalBears > 0) {\\n                uint256 funding = totalBulls.sub(totalBears).div(fundingDivisor).mul(intervals);\\n                totalBulls = totalBulls.sub(funding);\\n                totalBears = totalBears.add(funding);\\n            }\\n            if (totalBears > totalBulls && totalBulls > 0) {\\n                uint256 funding = totalBears.sub(totalBulls).div(fundingDivisor).mul(intervals);\\n                totalBears = totalBears.sub(funding);\\n                totalBulls = totalBulls.add(funding);\\n            }\\n        }\\n        }\\n\\n        return (_getNextDivisor(bullRefSupply, totalBulls, cachedBullDivisor), _getNextDivisor(bearRefSupply, totalBears, cachedBearDivisor));\\n    }\\n\\n    function _updateLastFundingTime() private {\\n        lastFundingTime = block.timestamp;\\n    }\\n\\n    function _getNextDivisor(uint256 _refSupply, uint256 _nextSupply, uint256 _fallbackDivisor) private pure returns (uint256) {\\n        if (_nextSupply == 0) {\\n            return INITIAL_REBASE_DIVISOR;\\n        }\\n\\n        // round up the divisor\\n        uint256 divisor = _refSupply.mul(10).div(_nextSupply).add(9).div(10);\\n        // prevent the cachedDivisor from overflowing or being set to 0\\n        if (divisor == 0 || divisor > MAX_DIVISOR) { return _fallbackDivisor; }\\n\\n        return divisor;\\n    }\\n\\n    function _collectFees(uint256 _amount) private returns (uint256) {\\n        uint256 fee = _amount.mul(FEE_BASIS_POINTS).div(BASIS_POINTS_DIVISOR);\\n        feeReserve = feeReserve.add(fee);\\n        return fee;\\n    }\\n\\n    function _collectAppFees(uint256 _amount, address _appFeeReceiver) private returns (uint256) {\\n        if (appFeeBasisPoints == 0) {\\n            return 0;\\n        }\\n        uint256 fee = _amount.mul(appFeeBasisPoints).div(BASIS_POINTS_DIVISOR);\\n        appFees[_appFeeReceiver] = appFees[_appFeeReceiver].add(fee);\\n        appFeeReserve = appFeeReserve.add(fee);\\n        return fee;\\n    }\\n\\n    function _buy(address _token, address _receiver, address _appFeeReceiver) private returns (uint256) {\\n        bool isBull = _token == bullToken;\\n        require(isBull || _token == bearToken, \\\"X2ETHMarket: unsupported token\\\");\\n        uint256 amount = msg.value;\\n        require(amount > 0, \\\"X2ETHMarket: insufficient collateral sent\\\");\\n\\n        rebase();\\n\\n        uint256 fee = _collectFees(amount);\\n        uint256 appFee = _appFeeReceiver == address(0) ? 0 : _collectAppFees(amount, _appFeeReceiver);\\n        uint256 depositAmount = amount.sub(fee).sub(appFee);\\n\\n        IX2Token(_token).mint(_receiver, depositAmount, isBull ? cachedBullDivisor : cachedBearDivisor);\\n\\n        return depositAmount;\\n    }\\n\\n    function _sell(address _token, uint256 _sellPoints, address _receiver, bool _distribute, address _appFeeReceiver) private returns (uint256) {\\n        require(_sellPoints > 0, \\\"X2ETHMarket: insufficient amount\\\");\\n        require(_token == bullToken || _token == bearToken, \\\"X2ETHMarket: unsupported token\\\");\\n        rebase();\\n\\n        uint256 amount = IX2Token(_token).burn(msg.sender, _sellPoints, _distribute);\\n\\n        uint256 fee = _collectFees(amount);\\n        uint256 appFee = _appFeeReceiver == address(0) ? 0 : _collectAppFees(amount, _appFeeReceiver);\\n\\n        uint256 withdrawAmount = amount.sub(fee).sub(appFee);\\n        (bool success,) = _receiver.call{value: withdrawAmount}(\\\"\\\");\\n        require(success, \\\"X2ETHMarket: transfer failed\\\");\\n\\n        return withdrawAmount;\\n    }\\n\\n    function _flip(address _token, uint256 _flipPoints, address _receiver, address _appFeeReceiver) private returns (uint256) {\\n        require(_flipPoints > 0, \\\"X2ETHMarket: insufficient amount\\\");\\n\\n        bool sellBull = _token == bullToken;\\n        require(sellBull || _token == bearToken, \\\"X2ETHMarket: unsupported token\\\");\\n        rebase();\\n\\n        uint256 amount = IX2Token(_token).burn(msg.sender, _flipPoints, true);\\n\\n        uint256 fee = _collectFees(amount);\\n        uint256 appFee = _appFeeReceiver == address(0) ? 0 : _collectAppFees(amount, _appFeeReceiver);\\n        uint256 flipAmount = amount.sub(fee).sub(appFee);\\n\\n        // if bull tokens were burnt then mint bear tokens\\n        // if bear tokens were burnt then mint bull tokens\\n        IX2Token(sellBull ? bearToken : bullToken).mint(\\n            _receiver,\\n            flipAmount,\\n            sellBull ? cachedBearDivisor : cachedBullDivisor\\n        );\\n\\n        return flipAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/X2Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./libraries/token/IERC20.sol\\\";\\nimport \\\"./libraries/token/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/SafeMath.sol\\\";\\nimport \\\"./libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IX2Fund.sol\\\";\\nimport \\\"./interfaces/IX2Market.sol\\\";\\nimport \\\"./interfaces/IX2Token.sol\\\";\\n\\n// rewards code adapated from https://github.com/trusttoken/smart-contracts/blob/master/contracts/truefi/TrueFarm.sol\\ncontract X2Token is IERC20, IX2Token, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct Ledger {\\n        uint128 balance;\\n        uint128 cost;\\n    }\\n\\n    // max uint128 has 38 digits\\n    // the initial divisor has 10 digits\\n    // each 1 wei of rewards will increase cumulativeRewardPerToken by\\n    // 1*10^10 (PRECISION 10^20 / divisor 10^10)\\n    // assuming a supply of only 1 wei of X2Tokens\\n    // if the reward token has 18 decimals, total rewards of up to\\n    // 1 billion reward tokens is supported\\n    // max uint96 has 28 digits, so max claimable rewards also supports\\n    // 1 billion reward tokens\\n    struct Reward {\\n        uint128 previousCumulativeRewardPerToken;\\n        uint96 claimable;\\n        uint32 lastBoughtAt;\\n    }\\n\\n    uint256 constant HOLDING_TIME = 10 minutes;\\n    uint256 constant PRECISION = 1e20;\\n    uint256 constant MAX_BALANCE = uint128(-1);\\n    uint256 constant MAX_REWARD = uint96(-1);\\n    uint256 constant MAX_CUMULATIVE_REWARD = uint128(-1);\\n    uint256 constant MAX_QUANTITY_POINTS = 1e30;\\n\\n    string public name = \\\"X2\\\";\\n    string public symbol = \\\"X2\\\";\\n    uint8 public constant decimals = 18;\\n\\n    // _totalSupply also tracks totalStaked\\n    uint256 public override _totalSupply;\\n\\n    address public override market;\\n    address public factory;\\n    address public override distributor;\\n    address public override rewardToken;\\n\\n    // ledgers track balances and costs\\n    mapping (address => Ledger) public ledgers;\\n    mapping (address => mapping (address => uint256)) public allowances;\\n\\n    // track previous cumulated rewards and claimable rewards for accounts\\n    mapping(address => Reward) public rewards;\\n    // track overall cumulative rewards\\n    uint256 public override cumulativeRewardPerToken;\\n\\n    bool public isInitialized;\\n\\n    event Claim(address receiver, uint256 amount);\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"X2Token: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarket() {\\n        require(msg.sender == market, \\\"X2Token: forbidden\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function initialize(address _factory, address _market) public {\\n        require(!isInitialized, \\\"X2Token: already initialized\\\");\\n        isInitialized = true;\\n        factory = _factory;\\n        market = _market;\\n    }\\n\\n    function setDistributor(address _distributor, address _rewardToken) external override onlyFactory {\\n        distributor = _distributor;\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function setInfo(string memory _name, string memory _symbol) external override onlyFactory {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function mint(address _account, uint256 _amount, uint256 _divisor) external override onlyMarket {\\n        _mint(_account, _amount, _divisor);\\n    }\\n\\n    function burn(address _account, uint256 _burnPoints, bool _distribute) external override onlyMarket returns (uint256) {\\n        return _burn(_account, _burnPoints, _distribute);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply.div(getDivisor());\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"X2Token: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function claim(address _receiver) external nonReentrant {\\n        address _account = msg.sender;\\n        uint256 cachedTotalSupply = _totalSupply;\\n        _updateRewards(_account, cachedTotalSupply, true, false);\\n\\n        Reward storage reward = rewards[_account];\\n        uint256 rewardToClaim = reward.claimable;\\n        reward.claimable = 0;\\n\\n        IERC20(rewardToken).transfer(_receiver, rewardToClaim);\\n\\n        emit Claim(_receiver, rewardToClaim);\\n    }\\n\\n    function getDivisor() public override view returns (uint256) {\\n        return IX2Market(market).getDivisor(address(this));\\n    }\\n\\n    function lastBoughtAt(address _account) public override view returns (uint256) {\\n        return uint256(rewards[_account].lastBoughtAt);\\n    }\\n\\n    function hasPendingPurchase(address _account) public view returns (bool) {\\n        return lastBoughtAt(_account) > block.timestamp.sub(HOLDING_TIME);\\n    }\\n\\n    function getPendingProfit(address _account) public override view returns (uint256) {\\n        if (!hasPendingPurchase(_account)) {\\n            return 0;\\n        }\\n\\n        uint256 balance = uint256(ledgers[_account].balance).div(getDivisor());\\n        uint256 cost = costOf(_account);\\n        return balance <= cost ? 0 : balance.sub(cost);\\n    }\\n\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        uint256 balance = uint256(ledgers[_account].balance).div(getDivisor());\\n        if (!hasPendingPurchase(_account)) {\\n            return balance;\\n        }\\n        uint256 cost = costOf(_account);\\n        return balance < cost ? balance : cost;\\n    }\\n\\n    function _balanceOf(address _account) public view override returns (uint256) {\\n        return uint256(ledgers[_account].balance);\\n    }\\n\\n    function costOf(address _account) public override view returns (uint256) {\\n        return uint256(ledgers[_account].cost);\\n    }\\n\\n    function getReward(address _account) public override view returns (uint256) {\\n        return uint256(rewards[_account].claimable);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(!hasPendingPurchase(_sender), \\\"X2Token: holding time not yet passed\\\");\\n        require(_sender != address(0), \\\"X2Token: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"X2Token: transfer to the zero address\\\");\\n\\n        uint256 divisor = getDivisor();\\n        _decreaseBalance(_sender, _amount, divisor, true);\\n        _increaseBalance(_recipient, _amount, divisor, false);\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount, uint256 _divisor) private {\\n        require(_account != address(0), \\\"X2Token: mint to the zero address\\\");\\n\\n        _increaseBalance(_account, _amount, _divisor, true);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _burnPoints, bool _distribute) private returns (uint256) {\\n        require(_account != address(0), \\\"X2Token: burn from the zero address\\\");\\n\\n        uint256 divisor = getDivisor();\\n\\n        Ledger memory ledger = ledgers[_account];\\n        uint256 balance = uint256(ledger.balance).div(divisor);\\n        uint256 amount = balance.mul(_burnPoints).div(MAX_QUANTITY_POINTS);\\n        uint256 scaledAmount = amount;\\n\\n        if (hasPendingPurchase(_account) && balance > ledger.cost) {\\n            // if there is a pending purchase and the user's balance\\n            // is greater than their cost, it means they have a pending profit\\n            // we scale up the amount to burn the proportional amount of\\n            // pending profit\\n            amount = uint256(ledger.cost).mul(_burnPoints).div(MAX_QUANTITY_POINTS);\\n            scaledAmount = amount.mul(balance).div(ledger.cost);\\n        }\\n\\n        _decreaseBalance(_account, scaledAmount, divisor, _distribute);\\n\\n        emit Transfer(_account, address(0), amount);\\n\\n        return amount;\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_owner != address(0), \\\"X2Token: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"X2Token: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _increaseBalance(address _account, uint256 _amount, uint256 _divisor, bool _updateLastBoughtAt) private {\\n        if (_amount == 0) { return; }\\n\\n        uint256 cachedTotalSupply = _totalSupply;\\n        _updateRewards(_account, cachedTotalSupply, true, _updateLastBoughtAt);\\n\\n        uint256 scaledAmount = _amount.mul(_divisor);\\n        Ledger memory ledger = ledgers[_account];\\n\\n        uint256 nextBalance = uint256(ledger.balance).add(scaledAmount);\\n        require(nextBalance < MAX_BALANCE, \\\"X2Token: balance limit exceeded\\\");\\n\\n        uint256 cost = uint256(ledger.cost).add(_amount);\\n        require(cost < MAX_BALANCE, \\\"X2Token: cost limit exceeded\\\");\\n\\n        ledgers[_account] = Ledger(\\n            uint128(nextBalance),\\n            uint128(cost)\\n        );\\n\\n        _totalSupply = cachedTotalSupply.add(scaledAmount);\\n    }\\n\\n    function _decreaseBalance(address _account, uint256 _amount, uint256 _divisor, bool _distribute) private {\\n        if (_amount == 0) { return; }\\n\\n        uint256 cachedTotalSupply = _totalSupply;\\n        _updateRewards(_account, cachedTotalSupply, _distribute, false);\\n\\n        uint256 scaledAmount = _amount.mul(_divisor);\\n        Ledger memory ledger = ledgers[_account];\\n\\n        // since _amount is not zero, so scaledAmount should not be zero\\n        // if ledger.balance is zero, then uint256(ledger.balance).sub(scaledAmount)\\n        // should fail, so we can calculate cost with ...div(ledger.balance)\\n        // as ledger.balance should not be zero\\n        uint256 nextBalance = uint256(ledger.balance).sub(scaledAmount);\\n        uint256 cost = uint256(ledger.cost).mul(nextBalance).div(ledger.balance);\\n\\n        ledgers[_account] = Ledger(\\n            uint128(nextBalance),\\n            uint128(cost)\\n        );\\n\\n        _totalSupply = cachedTotalSupply.sub(scaledAmount);\\n    }\\n\\n    function _updateRewards(address _account, uint256 _cachedTotalSupply, bool _distribute, bool _updateLastBoughtAt) private {\\n        uint256 blockReward;\\n        Reward memory reward = rewards[_account];\\n\\n        if (_distribute && distributor != address(0)) {\\n            blockReward = IX2Fund(distributor).distribute();\\n        }\\n\\n        uint256 _cumulativeRewardPerToken = cumulativeRewardPerToken;\\n        // only update cumulativeRewardPerToken when there are stakers, i.e. when _totalSupply > 0\\n        // if blockReward == 0, then there will be no change to cumulativeRewardPerToken\\n        if (_cachedTotalSupply > 0 && blockReward > 0) {\\n            // PRECISION is 10^20 and the BASE_DIVISOR is 10^10\\n            // cachedTotalSupply = _totalSupply * divisor\\n            // the divisor will be around 10^10\\n            // if 1000 ETH worth is minted, then cachedTotalSupply = 1000 * 10^18 * 10^10 = 10^31\\n            // cumulativeRewardPerToken will increase by blockReward * 10^20 / (10^31)\\n            // if the blockReward is 0.001 REWARD_TOKENS\\n            // then cumulativeRewardPerToken will increase by 10^-3 * 10^18 * 10^20 / (10^31)\\n            // which is 10^35 / 10^31 or 10^4\\n            // if rewards are distributed every hour then at least 0.168 REWARD_TOKENS should be distributed per week\\n            // so that there will not be precision issues for distribution\\n            _cumulativeRewardPerToken = _cumulativeRewardPerToken.add(blockReward.mul(PRECISION).div(_cachedTotalSupply));\\n            cumulativeRewardPerToken = _cumulativeRewardPerToken;\\n        }\\n\\n        // ledgers[_account].balance = balance * divisor\\n        // this divisor will be around 10^10\\n        // assuming that cumulativeRewardPerToken increases by at least 10^4\\n        // the claimableReward will increase by balance * 10^10 * 10^4 / 10^20\\n        // if the total supply is 1000 ETH\\n        // a user must own at least 10^-6 ETH or 0.000001 ETH worth of tokens to get some rewards\\n        uint256 claimableReward = uint256(reward.claimable).add(\\n            uint256(ledgers[_account].balance).mul(_cumulativeRewardPerToken.sub(reward.previousCumulativeRewardPerToken)).div(PRECISION)\\n        );\\n\\n        if (claimableReward > MAX_REWARD) {\\n            claimableReward = MAX_REWARD;\\n        }\\n\\n        if (_cumulativeRewardPerToken > MAX_CUMULATIVE_REWARD) {\\n            _cumulativeRewardPerToken = MAX_CUMULATIVE_REWARD;\\n        }\\n\\n        rewards[_account] = Reward(\\n            // update previous cumulative reward for sender\\n            uint128(_cumulativeRewardPerToken),\\n            uint96(claimableReward),\\n            _updateLastBoughtAt ? uint32(block.timestamp % 2**32) : reward.lastBoughtAt\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2PriceFeed {\\n    function latestAnswer() external view returns (int256);\\n    function latestRound() external view returns (uint80);\\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2Market {\\n    function bullToken() external view returns (address);\\n    function bearToken() external view returns (address);\\n    function latestPrice() external view returns (uint256);\\n    function lastPrice() external view returns (uint256);\\n    function getFunding() external view returns (uint256, uint256);\\n    function getDivisor(address token) external view returns (uint256);\\n    function getDivisors(uint256 _lastPrice, uint256 _nextPrice) external view returns (uint256, uint256);\\n    function setAppFee(uint256 feeBasisPoints) external;\\n    function setFunding(uint256 divisor) external;\\n    function cachedBullDivisor() external view returns (uint128);\\n    function cachedBearDivisor() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IX2Fund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IX2Fund {\\n    function distribute() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"AppFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"appOwner\",\"type\":\"address\"}],\"name\":\"AppOwnerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxProfitBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"DistributorChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingDivisor\",\"type\":\"uint256\"}],\"name\":\"FundingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"GovChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"InfoChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"InterestReceiverChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"appOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_multiplierBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxProfitBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_appFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_appOwner\",\"type\":\"address\"}],\"name\":\"setAppOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingDivisor\",\"type\":\"uint256\"}],\"name\":\"setFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bullToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_bullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bullSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bearToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_bearName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bearSymbol\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interestReceiver\",\"type\":\"address\"}],\"name\":\"setInterestReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"X2ETHFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}