{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/gavinpacini/Development/gameforth/gameforth-contracts-priv/contracts/GameForthStockOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./lib/Select.sol\\\";\\n\\ninterface IOracle {\\n    function getData() external returns (uint256, bool);\\n}\\n\\n/**\\n * @title Median Oracle\\n *\\n * @notice Provides a value onchain that's aggregated from a whitelisted set of\\n *         providers.\\n */\\ncontract GameForthStockOracle is Ownable, IOracle {\\n    using SafeMath for uint256;\\n\\n    struct Report {\\n        uint256 timestamp;\\n        uint256 payload;\\n    }\\n\\n    // Addresses of providers authorized to push reports.\\n    address[] public providers;\\n\\n    // Reports indexed by provider address. Report[0].timestamp > 0\\n    // indicates provider existence.\\n    mapping(address => Report[2]) public providerReports;\\n\\n    event ProviderAdded(address provider);\\n    event ProviderRemoved(address provider);\\n    event ReportTimestampOutOfRange(address provider);\\n    event ProviderReportPushed(\\n        address indexed provider,\\n        uint256 payload,\\n        uint256 timestamp\\n    );\\n\\n    // The number of seconds after which the report is deemed expired.\\n    uint256 public reportExpirationTimeSec; // 88200 is used on mainnet by AMPL\\n\\n    // The number of seconds since reporting that has to pass before a report\\n    // is usable.\\n    uint256 public reportDelaySec; // 3600 is used on mainnet by AMPL\\n\\n    // The minimum number of providers with valid reports to consider the\\n    // aggregate report valid.\\n    uint256 public minimumProviders = 1;\\n\\n    // Timestamp of 1 is used to mark uninitialized and invalidated data.\\n    // This is needed so that timestamp of 1 is always considered expired.\\n    uint256 private constant MAX_REPORT_EXPIRATION_TIME = 520 weeks;\\n\\n    /**\\n     * @param reportExpirationTimeSec_ The number of seconds after which the\\n     *                                 report is deemed expired.\\n     * @param reportDelaySec_ The number of seconds since reporting that has to\\n     *                        pass before a report is usable\\n     * @param minimumProviders_ The minimum number of providers with valid\\n     *                          reports to consider the aggregate report valid.\\n     */\\n    constructor(\\n        uint256 reportExpirationTimeSec_,\\n        uint256 reportDelaySec_,\\n        uint256 minimumProviders_\\n    ) public {\\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\\n        require(minimumProviders_ > 0);\\n        reportExpirationTimeSec = reportExpirationTimeSec_;\\n        reportDelaySec = reportDelaySec_;\\n        minimumProviders = minimumProviders_;\\n    }\\n\\n    /**\\n     * @notice Sets the report expiration period.\\n     * @param reportExpirationTimeSec_ The number of seconds after which the\\n     *        report is deemed expired.\\n     */\\n    function setReportExpirationTimeSec(uint256 reportExpirationTimeSec_)\\n        external\\n        onlyOwner\\n    {\\n        require(reportExpirationTimeSec_ <= MAX_REPORT_EXPIRATION_TIME);\\n        reportExpirationTimeSec = reportExpirationTimeSec_;\\n    }\\n\\n    /**\\n     * @notice Sets the time period since reporting that has to pass before a\\n     *         report is usable.\\n     * @param reportDelaySec_ The new delay period in seconds.\\n     */\\n    function setReportDelaySec(uint256 reportDelaySec_) external onlyOwner {\\n        reportDelaySec = reportDelaySec_;\\n    }\\n\\n    /**\\n     * @notice Sets the minimum number of providers with valid reports to\\n     *         consider the aggregate report valid.\\n     * @param minimumProviders_ The new minimum number of providers.\\n     */\\n    function setMinimumProviders(uint256 minimumProviders_) external onlyOwner {\\n        require(minimumProviders_ > 0);\\n        minimumProviders = minimumProviders_;\\n    }\\n\\n    /**\\n     * @notice Pushes a report for the calling provider.\\n     * @param payload is expected to be 18 decimal fixed point number.\\n     */\\n    function pushReport(uint256 payload) external {\\n        address providerAddress = msg.sender;\\n        Report[2] storage reports = providerReports[providerAddress];\\n        uint256[2] memory timestamps =\\n            [reports[0].timestamp, reports[1].timestamp];\\n\\n        require(timestamps[0] > 0); // Check if valid provider\\n\\n        uint8 index_recent = timestamps[0] >= timestamps[1] ? 0 : 1;\\n        uint8 index_past = 1 - index_recent;\\n\\n        // Check that the push is not too soon after the last one.\\n        require(timestamps[index_recent].add(reportDelaySec) <= now);\\n\\n        reports[index_past].timestamp = now;\\n        reports[index_past].payload = payload;\\n\\n        emit ProviderReportPushed(providerAddress, payload, now);\\n    }\\n\\n    /**\\n     * @notice Invalidates the reports of the calling provider.\\n     */\\n    function purgeReports() external {\\n        address providerAddress = msg.sender;\\n        require(providerReports[providerAddress][0].timestamp > 0);\\n        providerReports[providerAddress][0].timestamp = 1;\\n        providerReports[providerAddress][1].timestamp = 1;\\n    }\\n\\n    /**\\n     * @notice Computes median of provider reports whose timestamps are in the\\n     *         valid timestamp range.\\n     * @return AggregatedValue: Median of providers reported values.\\n     *         valid: Boolean indicating an aggregated value was computed successfully.\\n     */\\n    function getData() external override returns (uint256, bool) {\\n        uint256 reportsCount = providers.length;\\n        uint256[] memory validReports = new uint256[](reportsCount);\\n        uint256 size = 0;\\n        uint256 minValidTimestamp = now.sub(reportExpirationTimeSec);\\n        uint256 maxValidTimestamp = now.sub(reportDelaySec);\\n\\n        for (uint256 i = 0; i < reportsCount; i++) {\\n            address providerAddress = providers[i];\\n            Report[2] memory reports = providerReports[providerAddress];\\n\\n            uint8 index_recent =\\n                reports[0].timestamp >= reports[1].timestamp ? 0 : 1;\\n            uint8 index_past = 1 - index_recent;\\n            uint256 reportTimestampRecent = reports[index_recent].timestamp;\\n            if (reportTimestampRecent > maxValidTimestamp) {\\n                // Recent report is too recent.\\n                uint256 reportTimestampPast =\\n                    providerReports[providerAddress][index_past].timestamp;\\n                if (reportTimestampPast < minValidTimestamp) {\\n                    // Past report is too old.\\n                    emit ReportTimestampOutOfRange(providerAddress);\\n                } else if (reportTimestampPast > maxValidTimestamp) {\\n                    // Past report is too recent.\\n                    emit ReportTimestampOutOfRange(providerAddress);\\n                } else {\\n                    // Using past report.\\n                    validReports[size++] = providerReports[providerAddress][\\n                        index_past\\n                    ]\\n                        .payload;\\n                }\\n            } else {\\n                // Recent report is not too recent.\\n                if (reportTimestampRecent < minValidTimestamp) {\\n                    // Recent report is too old.\\n                    emit ReportTimestampOutOfRange(providerAddress);\\n                } else {\\n                    // Using recent report.\\n                    validReports[size++] = providerReports[providerAddress][\\n                        index_recent\\n                    ]\\n                        .payload;\\n                }\\n            }\\n        }\\n\\n        if (size < minimumProviders) {\\n            return (0, false);\\n        }\\n\\n        return (Select.computeMedian(validReports, size), true);\\n    }\\n\\n    /**\\n     * @notice Authorizes a provider.\\n     * @param provider Address of the provider.\\n     */\\n    function addProvider(address provider) external onlyOwner {\\n        require(providerReports[provider][0].timestamp == 0);\\n        providers.push(provider);\\n        providerReports[provider][0].timestamp = 1;\\n        emit ProviderAdded(provider);\\n    }\\n\\n    /**\\n     * @notice Revokes provider authorization.\\n     * @param provider Address of the provider.\\n     */\\n    function removeProvider(address provider) external onlyOwner {\\n        delete providerReports[provider];\\n        for (uint256 i = 0; i < providers.length; i++) {\\n            if (providers[i] == provider) {\\n                if (i + 1 != providers.length) {\\n                    providers[i] = providers[providers.length - 1];\\n                }\\n                providers.pop();\\n                emit ProviderRemoved(provider);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @return The number of authorized providers.\\n     */\\n    function providersSize() external view returns (uint256) {\\n        return providers.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/gavinpacini/Development/gameforth/gameforth-contracts-priv/contracts/lib/Select.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Select\\n * @dev Median Selection Library\\n */\\nlibrary Select {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Sorts the input array up to the denoted size, and returns the median.\\n     * @param array Input array to compute its median.\\n     * @param size Number of elements in array to compute the median for.\\n     * @return Median of array.\\n     */\\n    function computeMedian(uint256[] memory array, uint256 size)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(size > 0 && array.length >= size);\\n        for (uint256 i = 1; i < size; i++) {\\n            for (uint256 j = i; j > 0 && array[j - 1] > array[j]; j--) {\\n                uint256 tmp = array[j];\\n                array[j] = array[j - 1];\\n                array[j - 1] = tmp;\\n            }\\n        }\\n        if (size % 2 == 1) {\\n            return array[size / 2];\\n        } else {\\n            return array[size / 2].add(array[size / 2 - 1]) / 2;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportDelaySec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProviderReportPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ReportTimestampOutOfRange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"addProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providerReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeReports\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payload\",\"type\":\"uint256\"}],\"name\":\"pushReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportDelaySec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportExpirationTimeSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumProviders_\",\"type\":\"uint256\"}],\"name\":\"setMinimumProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportDelaySec_\",\"type\":\"uint256\"}],\"name\":\"setReportDelaySec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportExpirationTimeSec_\",\"type\":\"uint256\"}],\"name\":\"setReportExpirationTimeSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GameForthStockOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000057e400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}