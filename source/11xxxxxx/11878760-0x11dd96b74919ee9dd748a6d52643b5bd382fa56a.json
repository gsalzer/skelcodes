{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/Farm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport \\\"./interfaces/IFarm.sol\\\";\\nimport \\\"./interfaces/IFarmActivator.sol\\\";\\n\\ncontract Farm is Initializable, IFarm, IFarmActivator {\\n    event Stake(address indexed _staker, uint256 _timestamp, uint256 _amount);\\n    event Withdraw(address indexed _staker, uint256 _timestamp, uint256 _amount);\\n    event Harvest(address indexed _staker, uint256 _id, uint256 _timestamp, uint256 _amount);\\n    event Claim(address indexed _staker, uint256 indexed _harvestId, uint256 _timestamp, uint256 _amount);\\n\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 private constant REWARD_REDUCTION_PERCENT = 20;\\n    uint256 private constant REWARD_REDUCTION_INTERVAL = 10 days;\\n    uint256 private constant HARVEST_INTERVAL = 1 days;\\n\\n    struct Harvests {\\n        uint256 count;\\n        uint256 firstUnclaimedId;\\n        uint256[] timestamps;\\n        uint256[] claimed;\\n        uint256[] total;\\n    }\\n\\n    address private activator;\\n    bool private isFarmingStarted;\\n    uint256 private totalReward;\\n    uint256 private rewardLeftover;\\n    uint256 private currentReward;\\n    uint256 public currentRewardPerSecond;\\n    IERC20 private rewardToken;\\n    IERC20 private farmToken;\\n    uint256 public nextInterval;\\n    uint256 public lastUpdate;\\n    uint256 public cumulativeRewardPerToken;\\n    uint256 private totalBalance;\\n    mapping(address => uint256) private balances;\\n    mapping(address => uint256) private unharvestedRewards;\\n    mapping(address => uint256) private lastCumulativeRewardsPerToken;\\n    mapping(address => Harvests) private harvests;\\n\\n    function initialize(address _activator) external initializer {\\n        __Farm_init(_activator);\\n    }\\n\\n    function __Farm_init(address _activator) internal initializer {\\n        __Farm_init_unchained(_activator);\\n    }\\n\\n    function __Farm_init_unchained(address _activator) internal initializer {\\n        activator = _activator;\\n    }\\n\\n    modifier onlyActivator() {\\n        require(msg.sender == activator, \\\"Only activator allowed.\\\");\\n        _;\\n    }\\n\\n    modifier farmingNotStarted() {\\n        require(!isFarmingStarted, \\\"Farming was already started.\\\");\\n        _;\\n    }\\n\\n    modifier farmingStarted() {\\n        require(isFarmingStarted, \\\"Farming not started yet.\\\");\\n        _;\\n    }\\n\\n    modifier rewardTokensDeposited(address _rewardToken) {\\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\\n        require(balance > 0, \\\"Reward tokens are not deposited.\\\");\\n        _;\\n    }\\n\\n    modifier stakeAddressNotContract() {\\n        require(!address(msg.sender).isContract(), \\\"Staking from contracts is not allowed.\\\");\\n        _;\\n    }\\n\\n    modifier stakeAmountValid(uint256 _amount) {\\n        require(_amount > 0, \\\"Staking amount must be bigger than 0.\\\");\\n        require(\\n            _amount <= farmToken.allowance(msg.sender, address(this)),\\n            \\\"Farm is not allowed to transfer the desired staking amount.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier withdrawAmountValid(uint256 _amount) {\\n        require(_amount > 0, \\\"Withdraw amount is zero.\\\");\\n        require(_amount <= balances[msg.sender], \\\"Withdraw amount too big.\\\");\\n        _;\\n    }\\n\\n    function farmingActive() external view override returns (bool) {\\n        return isFarmingStarted;\\n    }\\n\\n    function totalRewardSupply() external view override returns (uint256) {\\n        return totalReward;\\n    }\\n\\n    function intervalReward() external view override returns (uint256) {\\n        if (block.timestamp < nextInterval) {\\n            return currentReward;\\n        }\\n        return getReward(getNextRewardLeftover(rewardLeftover, currentReward));\\n    }\\n\\n    function rewardIntervalLength() external view override returns (uint256) {\\n        return REWARD_REDUCTION_INTERVAL;\\n    }\\n\\n    function harvestIntervalLength() external view override returns (uint256) {\\n        return HARVEST_INTERVAL;\\n    }\\n\\n    function nextIntervalTimestamp() external view override returns (uint256) {\\n        return nextInterval.add(block.timestamp >= nextInterval ? REWARD_REDUCTION_INTERVAL : 0);\\n    }\\n\\n    function rewardTokenAddress() external view override returns (address) {\\n        return address(rewardToken);\\n    }\\n\\n    function farmTokenAddress() external view override returns (address) {\\n        return address(farmToken);\\n    }\\n\\n    function singleStaked(address _staker) external view override returns (uint256) {\\n        return balances[_staker];\\n    }\\n\\n    function totalStaked() external view override returns (uint256) {\\n        return totalBalance;\\n    }\\n\\n    function startFarming(address _rewardToken, address _farmToken)\\n        external\\n        override\\n        onlyActivator\\n        farmingNotStarted\\n        rewardTokensDeposited(_rewardToken)\\n    {\\n        rewardToken = IERC20(_rewardToken);\\n        farmToken = IERC20(_farmToken);\\n        totalReward = rewardToken.balanceOf(address(this));\\n        rewardLeftover = totalReward;\\n        currentReward = getReward(rewardLeftover);\\n        currentRewardPerSecond = getRewardPerSecond(currentReward);\\n        isFarmingStarted = true;\\n        lastUpdate = block.timestamp;\\n        nextInterval = block.timestamp.add(REWARD_REDUCTION_INTERVAL);\\n    }\\n\\n    function stake(uint256 _amount) external override farmingStarted stakeAddressNotContract stakeAmountValid(_amount) {\\n        update();\\n        farmToken.transferFrom(msg.sender, address(this), _amount);\\n        balances[msg.sender] = balances[msg.sender].add(_amount);\\n        totalBalance = totalBalance.add(_amount);\\n        emit Stake(msg.sender, block.timestamp, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external override farmingStarted withdrawAmountValid(_amount) {\\n        update();\\n        farmToken.transfer(msg.sender, _amount);\\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\\n        totalBalance = totalBalance.sub(_amount);\\n        emit Withdraw(msg.sender, block.timestamp, _amount);\\n    }\\n\\n    function harvest() external override farmingStarted {\\n        update();\\n        uint256 rewardToHarvest = unharvestedRewards[msg.sender];\\n        if (rewardToHarvest == 0) {\\n            return;\\n        }\\n        unharvestedRewards[msg.sender] = 0;\\n        harvests[msg.sender].count++;\\n        harvests[msg.sender].claimed.push(0);\\n        harvests[msg.sender].timestamps.push(block.timestamp);\\n        harvests[msg.sender].total.push(rewardToHarvest);\\n        emit Harvest(msg.sender, harvests[msg.sender].count - 1, block.timestamp, rewardToHarvest);\\n    }\\n\\n    function claim() external override farmingStarted {\\n        uint256 claimableAmount = 0;\\n        uint256 idOffset = harvests[msg.sender].firstUnclaimedId;\\n        uint256[] memory parts = claimableHarvests(msg.sender);\\n\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            if (parts[i] == 0) {\\n                break;\\n            }\\n\\n            uint256 id = i.add(idOffset);\\n            harvests[msg.sender].claimed[id] = harvests[msg.sender].claimed[id].add(parts[i]);\\n            if (harvests[msg.sender].claimed[id] >= harvests[msg.sender].total[id]) {\\n                harvests[msg.sender].firstUnclaimedId++;\\n            }\\n\\n            claimableAmount = claimableAmount.add(parts[i]);\\n            emit Claim(msg.sender, id, block.timestamp, parts[i]);\\n        }\\n\\n        if (claimableAmount > 0) {\\n            rewardToken.transfer(msg.sender, claimableAmount);\\n        }\\n    }\\n\\n    function harvestable(address _staker) external view override returns (uint256) {\\n        uint256 checkpointToTimestamp = MathUpgradeable.min(block.timestamp, nextInterval);\\n        uint256 toCumulativeRewardPerToken =\\n            getCumulativeRewardPerToken(\\n                lastUpdate,\\n                checkpointToTimestamp,\\n                cumulativeRewardPerToken,\\n                currentRewardPerSecond\\n            );\\n        uint256 unharvestedReward =\\n            getUnharvestedReward(\\n                _staker,\\n                lastCumulativeRewardsPerToken[_staker],\\n                toCumulativeRewardPerToken,\\n                unharvestedRewards[_staker]\\n            );\\n\\n        if (block.timestamp > checkpointToTimestamp) {\\n            uint256 fromCumulativeRewardPerToken = toCumulativeRewardPerToken;\\n            uint256 newRewardPerSecond =\\n                getRewardPerSecond(getReward(getNextRewardLeftover(rewardLeftover, currentReward)));\\n            toCumulativeRewardPerToken = getCumulativeRewardPerToken(\\n                checkpointToTimestamp,\\n                block.timestamp,\\n                fromCumulativeRewardPerToken,\\n                newRewardPerSecond\\n            );\\n            unharvestedReward = getUnharvestedReward(\\n                _staker,\\n                fromCumulativeRewardPerToken,\\n                toCumulativeRewardPerToken,\\n                unharvestedReward\\n            );\\n        }\\n        return unharvestedReward;\\n    }\\n\\n    function claimable(address _staker) external view override returns (uint256) {\\n        uint256[] memory parts = claimableHarvests(_staker);\\n        uint256 claimableAmount = 0;\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            claimableAmount = claimableAmount.add(parts[i]);\\n        }\\n        return claimableAmount;\\n    }\\n\\n    function harvested(address _staker) external view override returns (uint256) {\\n        uint256 harvestedAmount = 0;\\n        for (uint256 i = harvests[_staker].firstUnclaimedId; i < harvests[_staker].count; i++) {\\n            harvestedAmount = harvestedAmount.add(harvests[_staker].total[i].sub(harvests[_staker].claimed[i]));\\n        }\\n        return harvestedAmount;\\n    }\\n\\n    function harvestChunk(address _staker, uint56 _id)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 timestamp,\\n            uint256 claimed,\\n            uint256 total\\n        )\\n    {\\n        bool harvestExists = harvests[_staker].count > _id;\\n        timestamp = harvestExists ? harvests[_staker].timestamps[_id] : 0;\\n        claimed = harvestExists ? harvests[_staker].claimed[_id] : 0;\\n        total = harvestExists ? harvests[_staker].total[_id] : 0;\\n    }\\n\\n    function claimableHarvests(address _staker) private view returns (uint256[] memory) {\\n        if (harvests[_staker].count == 0 || harvests[_staker].firstUnclaimedId >= harvests[_staker].count) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 count = harvests[_staker].count.sub(harvests[_staker].firstUnclaimedId);\\n        uint256[] memory parts = new uint256[](count);\\n\\n        for (uint256 i = harvests[_staker].firstUnclaimedId; i < harvests[_staker].count; i++) {\\n            uint256 daysSinceHarvest = block.timestamp.sub(harvests[_staker].timestamps[i]).div(HARVEST_INTERVAL);\\n            uint256 percentClaimable = daysSinceHarvest >= 10 ? 100 : daysSinceHarvest.mul(10);\\n            uint256 totalClaimableAmount = harvests[_staker].total[i].mul(percentClaimable).div(100);\\n            parts[i] = harvests[_staker].claimed[i] < totalClaimableAmount\\n                ? totalClaimableAmount.sub(harvests[_staker].claimed[i])\\n                : 0;\\n        }\\n\\n        return parts;\\n    }\\n\\n    function update() private {\\n        updateUnharvestedReward();\\n        updateNextIntervalAndUnharvestedReward();\\n    }\\n\\n    function updateUnharvestedReward() private {\\n        uint256 updateToTimestamp = MathUpgradeable.min(block.timestamp, nextInterval);\\n        cumulativeRewardPerToken = getCumulativeRewardPerToken(\\n            lastUpdate,\\n            updateToTimestamp,\\n            cumulativeRewardPerToken,\\n            currentRewardPerSecond\\n        );\\n        lastUpdate = updateToTimestamp;\\n        unharvestedRewards[msg.sender] = getUnharvestedReward(\\n            msg.sender,\\n            lastCumulativeRewardsPerToken[msg.sender],\\n            cumulativeRewardPerToken,\\n            unharvestedRewards[msg.sender]\\n        );\\n        lastCumulativeRewardsPerToken[msg.sender] = cumulativeRewardPerToken;\\n    }\\n\\n    function updateNextIntervalAndUnharvestedReward() private {\\n        if (block.timestamp < nextInterval) {\\n            return;\\n        }\\n        rewardLeftover = getNextRewardLeftover(rewardLeftover, currentReward);\\n        currentReward = getReward(rewardLeftover);\\n        currentRewardPerSecond = getRewardPerSecond(currentReward);\\n        nextInterval = nextInterval.add(REWARD_REDUCTION_INTERVAL);\\n        updateUnharvestedReward();\\n    }\\n\\n    function getCumulativeRewardPerToken(\\n        uint256 _fromTimestamp,\\n        uint256 _toTimestamp,\\n        uint256 _fromCumulativeRewardPerToken,\\n        uint256 _rewardPerSecond\\n    ) private view returns (uint256) {\\n        if (totalBalance == 0) {\\n            return _fromCumulativeRewardPerToken;\\n        }\\n        return\\n            _fromCumulativeRewardPerToken.add(\\n                _toTimestamp\\n                    .sub(_fromTimestamp)\\n                    .mul(1 ether) // we must multiply it, since number would be decimal otherwise\\n                    .mul(_rewardPerSecond)\\n                    .div(totalBalance)\\n            );\\n    }\\n\\n    function getUnharvestedReward(\\n        address _staker,\\n        uint256 _fromCumulativeRewardPerToken,\\n        uint256 _toCumulativeRewardPerToken,\\n        uint256 _fromUnharvestedReward\\n    ) private view returns (uint256) {\\n        return\\n            balances[_staker].mul(_toCumulativeRewardPerToken.sub(_fromCumulativeRewardPerToken)).div(1 ether).add(\\n                _fromUnharvestedReward\\n            );\\n    }\\n\\n    function getNextRewardLeftover(uint256 _rewardLeftover, uint256 _reward) private pure returns (uint256) {\\n        return _rewardLeftover.sub(_reward);\\n    }\\n\\n    function getReward(uint256 _rewardLeftover) private pure returns (uint256) {\\n        return _rewardLeftover.mul(REWARD_REDUCTION_PERCENT).div(100);\\n    }\\n\\n    function getRewardPerSecond(uint256 _reward) private pure returns (uint256) {\\n        return _reward.div(REWARD_REDUCTION_INTERVAL);\\n    }\\n\\n    uint256[33] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/RcFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"./Farm.sol\\\";\\n\\ncontract RcFarm is Farm {}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IFarm {\\n    event Stake(address indexed _staker, uint256 _timestamp, uint256 _amount);\\n\\n    event Withdraw(address indexed _staker, uint256 _timestamp, uint256 _amount);\\n\\n    event Harvest(address indexed _staker, uint256 _id, uint256 _timestamp, uint256 _amount);\\n\\n    event Claim(address indexed _staker, uint256 indexed _harvestId, uint256 _timestamp, uint256 _amount);\\n\\n    function farmingActive() external view returns (bool);\\n\\n    function totalRewardSupply() external view returns (uint256);\\n\\n    function intervalReward() external view returns (uint256);\\n\\n    function rewardIntervalLength() external view returns (uint256);\\n\\n    function harvestIntervalLength() external view returns (uint256);\\n\\n    function nextIntervalTimestamp() external view returns (uint256);\\n\\n    function rewardTokenAddress() external view returns (address);\\n\\n    function farmTokenAddress() external view returns (address);\\n\\n    function singleStaked(address _staker) external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function claim() external;\\n\\n    function harvestable(address _staker) external view returns (uint256);\\n\\n    function claimable(address _staker) external view returns (uint256);\\n\\n    function harvested(address _staker) external view returns (uint256);\\n\\n    function harvestChunk(address _staker, uint56 _id)\\n        external\\n        view\\n        returns (\\n            uint256 timestamp,\\n            uint256 claimed,\\n            uint256 total\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/keso/projects/crypto/rollercoaster-token/contracts/interfaces/IFarmActivator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IFarmActivator {\\n    function startFarming(address _rewardToken, address _farmToken) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_harvestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"_id\",\"type\":\"uint56\"}],\"name\":\"harvestChunk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestIntervalLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"harvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"harvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIntervalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIntervalLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"singleStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmToken\",\"type\":\"address\"}],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RcFarm","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}