{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.3;\r\npragma experimental ABIEncoderV2;\r\n\r\n// A partial ERC20 interface.\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// A partial WETH interfaec.\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw() external;\r\n}\r\n\r\n// Demo contract that swaps its ERC20 balance for another ERC20.\r\n// NOT to be used in production.\r\ncontract SimpleTokenSwap {\r\n\r\n    struct Swap {\r\n        // The `sellTokenAddress` field from the API response.\r\n        IERC20 sellToken;\r\n        // The `buyTokenAddress` field from the API response.\r\n        IERC20 buyToken;\r\n        // The `allowanceTarget` field from the API response.\r\n        address spender;\r\n        // The `to` field from the API response.\r\n        address payable swapTarget;\r\n        // The `data` field from the API response.\r\n        bytes swapCallData;\r\n    }\r\n\r\n    event BoughtTokens(IERC20 sellToken, IERC20 buyToken, uint256 boughtAmount);\r\n\r\n    // The WETH contract.\r\n    IWETH public immutable WETH;\r\n    // Creator of this contract.\r\n    address public owner;\r\n\r\n    constructor(IWETH weth) {\r\n        WETH = weth;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"ONLY_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // Payable fallback to allow this contract to receive protocol fee refunds.\r\n    receive() external payable {}\r\n\r\n    // Transfer tokens held by this contrat to the sender/owner.\r\n    function withdrawToken(IERC20 token, uint256 amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(token.transfer(msg.sender, amount));\r\n    }\r\n\r\n    // Transfer ETH held by this contrat to the sender/owner.\r\n    function withdrawETH(uint256 amount)\r\n    external\r\n    onlyOwner\r\n    {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Transfer ETH into this contract and wrap it into WETH.\r\n    function depositETH()\r\n    external\r\n    payable\r\n    {\r\n        WETH.deposit{value: msg.value}();\r\n    }\r\n\r\n    // Swaps ERC20->ERC20 tokens held by this contract using a 0x-API quote.\r\n\r\n\r\n\r\n    function fillMultiQuote(Swap memory swap1, Swap memory swap2)\r\n    external\r\n    onlyOwner\r\n    payable // Must attach ETH equal to the `value` field from the API response.\r\n    {\r\n        \r\n        require(swap1.sellToken.approve(swap1.spender, uint256(-1)), 'Approve call failed 1');\r\n        // Call the encoded swap function call on the contract at `swapTarget`,\r\n        // passing along any ETH attached to this function call to cover protocol fees.\r\n        (bool success,) = swap1.swapTarget.call{value: msg.value}(swap1.swapCallData);\r\n        require(success, 'SWAP_CALL_FAILED');\r\n        // Refund any unspent protocol fees to the sender.\r\n        // msg.sender.transfer(address(this).balance);\r\n        \r\n        \r\n        // Give `spender` an infinite allowance to spend this contract's `sellToken`.\r\n        // Note that for some tokens (e.g., USDT, KNC), you must first reset any existing\r\n        // allowance to 0 before being able to update it.\r\n        require(swap2.sellToken.approve(swap2.spender, uint256(-1)), 'Approve call failed 2');\r\n        // Call the encoded swap function call on the contract at `swapTarget`,\r\n        // passing along any ETH attached to this function call to cover protocol fees.\r\n        (bool success1,) = swap2.swapTarget.call{value: address(this).balance}(swap2.swapCallData);\r\n        require(success1, 'SWAP_CALL_FAILED_2');\r\n        // Refund any unspent protocol fees to the sender.\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n        \r\n        \r\n    }\r\n    \r\n    function fillQuote(Swap memory swap)\r\n    external\r\n    onlyOwner\r\n    payable // Must attach ETH equal to the `value` field from the API response.\r\n    {\r\n        // Give `spender` an infinite allowance to spend this contract's `sellToken`.\r\n        // Note that for some tokens (e.g., USDT, KNC), you must first reset any existing\r\n        // allowance to 0 before being able to update it.\r\n        require(swap.sellToken.approve(swap.spender, uint256(-1)), 'Approve call failed 1');\r\n        // Call the encoded swap function call on the contract at `swapTarget`,\r\n        // passing along any ETH attached to this function call to cover protocol fees.\r\n        (bool success,) = swap.swapTarget.call{value: msg.value}(swap.swapCallData);\r\n        require(success, 'SWAP_CALL_FAILED');\r\n        // Refund any unspent protocol fees to the sender.\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct SimpleTokenSwap.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct SimpleTokenSwap.Swap\",\"name\":\"swap2\",\"type\":\"tuple\"}],\"name\":\"fillMultiQuote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"}],\"internalType\":\"struct SimpleTokenSwap.Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"fillQuote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SimpleTokenSwap","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8741f3c052965d76ce874cdbb9e2b73b68454c228928620a30ccc057a8d502c6"}]}