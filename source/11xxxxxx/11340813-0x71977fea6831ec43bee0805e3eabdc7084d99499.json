{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n\r\n// \r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// \r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// \r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// \r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IToken is IERC20 {\r\n\t/**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     */\r\n\tfunction burn(uint256 amount) external;\t\r\n}\r\n\r\ncontract InTokenWrapper is ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IToken;\r\n    using Address for address;\r\n\r\n    IToken public inToken;\r\n\r\n    uint256 private _totalSupply;\r\n    mapping (uint256 => uint256) private _historyTotalSupply;\r\n    mapping(address => uint256) private _balances;\r\n    //mapping to save period user last deposited tokens;\r\n    mapping (address => uint256) private _userPeriod;    \r\n\r\n    event RequestedExchange(address indexed user, uint256 amount);\r\n    event RequestedWithdraw(address indexed user, uint256 amount);\r\n    event ExecutedExchange(address indexed user, uint256 outAmount, uint256 inAmount);\r\n\r\n    /**\r\n     * @dev TokenWrapper constructor\r\n     * @param _inToken Wrapped token to be exchanged\r\n     */\r\n    constructor(address _inToken) internal {\r\n        require(_inToken.isContract(), \"address must be a contract\");\r\n        inToken = IToken(_inToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of deposited token\r\n     * @return uint256 total supply\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total amount of token at given period\r\n     * @param _period Period for which total supply returned\r\n     * @return uint256 total supply\r\n     */\r\n    function historyTotalSupply(uint256 _period)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _historyTotalSupply[_period];\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of a given account\r\n     * @param _address User for which to retrieve balance\r\n     */\r\n    function balanceOf(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits a given amount of inToken from user\r\n     * @param _user User's address     \r\n     * @param _amount Units of inToken\r\n     * @param _period Current period\r\n     */\r\n    function _deposit(address _user, uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _balances[_user] = _balances[_user].add(_amount);\r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _historyTotalSupply[_period] = _historyTotalSupply[_period].add(_amount);\r\n        _userPeriod[_user] = _period;\r\n        inToken.safeTransferFrom(_user, address(this), _amount);\r\n        emit RequestedExchange(_user, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws a given amount of inToken from user\r\n     * @param _user User's address\r\n     * @param _amount Units of inToken\r\n     * @param _period Current period\r\n     */\r\n    function _withdraw(address _user, uint256 _amount, uint256 _period)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        _balances[_user] = _balances[_user].sub(_amount, \"Not enough balance\");\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _historyTotalSupply[_period] = _historyTotalSupply[_period].sub(_amount);\r\n        inToken.safeTransfer(_user, _amount);\r\n        emit RequestedWithdraw(_user, _amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw In Tokens (balance - _out) & burn (_out) after executeExchange\r\n     * @param _user User's address \r\n     * @param _out Amount of Out Tokens paid\r\n     */\r\n    function _withdrawExecute(address _user, uint256 _out)\r\n        internal\r\n        nonReentrant\r\n    {\r\n        uint256 _amount = balanceOf(_user);\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        _balances[_user] = 0;\r\n        if(_amount > _out)\r\n            inToken.safeTransfer(_user, _amount.sub(_out));\r\n        inToken.burn(_out);\r\n        emit ExecutedExchange(_user, _out, _amount.sub(_out));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Period user last deposited tokens\r\n     * @param _address address of the User\r\n     */\r\n     function userPeriod(address _address)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _userPeriod[_address];\r\n    }\r\n\r\n}\r\n\r\ncontract Scheduller {\r\n\tusing SafeMath for uint256;\r\n\t//last period recorded\r\n    uint256 public period;\r\n    //period duration in sec\r\n    uint256 public periodTime;\r\n    //last period start time\r\n    uint256 public periodStartTime;\r\n\r\n\t/**\r\n     * @dev Scheduller constructor, saves periodTime in seconds\r\n     * @param _periodDays period length in Days\r\n     */\r\n    constructor (\r\n    \tuint256 _periodDays\r\n    )\r\n    \tpublic\r\n    {\r\n    \tperiodTime = _periodDays.mul(1 days);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates last period to current\r\n     * @param _startNow set periodStartTime = now if true\r\n     */\r\n    function _updatePeriod (bool _startNow)\r\n        internal\r\n    {\r\n        uint256 _currentPeriod = currentPeriod();\r\n        if(_currentPeriod != period){\r\n        \tperiod = _currentPeriod;\r\n            if(_startNow)\r\n                // solhint-disable-next-line not-rely-on-time\r\n                periodStartTime = block.timestamp;\r\n            else\r\n                periodStartTime = 0;\r\n        }else{\r\n            if(_startNow && periodStartTime == 0)\r\n                // solhint-disable-next-line not-rely-on-time\r\n                periodStartTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current period\r\n     */\r\n    function currentPeriod () \r\n        public \r\n        view \r\n        returns (uint256 _currentPeriod)\r\n    {\r\n    \t_currentPeriod = period;\r\n    \tif(periodStartTime == 0 && _currentPeriod != 0)\r\n    \t\treturn _currentPeriod;\r\n    \t// solhint-disable-next-line not-rely-on-time\r\n    \tif( block.timestamp >= periodStartTime.add(periodTime) )\r\n    \t\t_currentPeriod = _currentPeriod.add(1); \r\n\t\treturn _currentPeriod;\r\n    }\r\n}\r\n\r\n// \r\n// Libs\r\n// Used contracts\r\n//Internal\r\ncontract ExchangeSuperUSDC is Ownable, Scheduller, InTokenWrapper {\r\n\tusing SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\t\r\n\t//Constants\r\n    uint256 private constant CALC_PRECISION = 1e18; \r\n    //Out Token Interface\r\n    IERC20 public outToken;\r\n    // period => Out Tokens available for exchange this period\r\n    mapping (uint256 => uint256) public historyOutTokenForExchange;\r\n    // Out Token units owed to users\r\n    uint256 public outTokenDebt;\r\n    \r\n    /** \r\n    * @dev Updates Period before executing function \r\n    * @dev If Period changed, calculates new period Out Token for exchange & Out Token Debt\r\n    * @param _startNow set periodStartTime = now if true\r\n    */\r\n    modifier updatePeriod(bool _startNow) {\r\n    \tuint256 _period = period; \r\n        _updatePeriod(_startNow);\r\n        if(_period != period){\r\n            uint256 _nextPeriodForExchange;\r\n            uint256 _previousPeriodDebt;\r\n            (_nextPeriodForExchange, _previousPeriodDebt) = _getOutTokenForExchange(_period);\r\n            historyOutTokenForExchange[period] = _nextPeriodForExchange;\r\n            outTokenDebt = outTokenDebt.add(_previousPeriodDebt);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Exchange constructor, calls constructors of helper classes InTokenWrapper and Scheduller\r\n    * @param _outToken Out Token contract address\r\n    * @param _inToken In Token contract address\r\n    * @param _periodDays period length in Days\r\n    */\r\n    constructor (\r\n    \taddress _outToken,\r\n    \taddress _inToken,\r\n    \tuint256 _periodDays\r\n    )\r\n    \tpublic\r\n    \tInTokenWrapper(_inToken)\r\n    \tScheduller(_periodDays)\r\n    {\r\n    \tsetOutToken(_outToken);\r\n    }\r\n\r\n    /***************************************\r\n                    PRIVATE\r\n    ****************************************/\r\n\r\n    /** \r\n    * @dev Returns Out Tokens available for exchange for next period & debt for previous period\r\n    * @param _previousPeriod - previous period\r\n    */\r\n    function _getOutTokenForExchange (\r\n        uint256 _previousPeriod\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 _nextPeriodForExchange, uint256 _previousPeriodDebt)\r\n    {\r\n        _previousPeriodDebt = historyOutTokenForExchange[_previousPeriod];\r\n        //If Out Token balance was greater than total In Token balance for previous period\r\n        //reduce previous period debt to total supply\r\n        if(_previousPeriodDebt > historyTotalSupply(_previousPeriod))\r\n            _previousPeriodDebt = historyTotalSupply(_previousPeriod);\r\n        _nextPeriodForExchange = outToken.balanceOf(address(this)).sub(\r\n            outTokenDebt.add(_previousPeriodDebt)\r\n        );\r\n        return (_nextPeriodForExchange, _previousPeriodDebt);\r\n    }\r\n\r\n    /***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n\r\n    /** \r\n    * @dev Sets Out Token contract address, in case if proxy contract address changes\r\n\t* @param _tokenAddress - new Out Token contract address\r\n\t*/\r\n    function setOutToken (\r\n    \taddress _tokenAddress\r\n    )\r\n    \tpublic\r\n    \tonlyOwner\r\n    {\r\n    \trequire(_tokenAddress.isContract(), \"address must be a contract\");\r\n    \toutToken = IERC20(_tokenAddress);\r\n    }\r\n \r\n    /***************************************\r\n                    ACTIONS\r\n    ****************************************/\r\n    \r\n    /**\r\n     * @dev Places amount of In Tokes to be exchanged to Out Tokens current period\r\n     * if user has balance for previous period executeExchage() is done first\r\n     * @param _amount of In Tokens Tokens\r\n     */\r\n    function requestExchange (uint256 _amount)\r\n        external\r\n        updatePeriod(true)\r\n    {\r\n        require(_amount != 0, \"Cannot exchange 0\");\r\n    \trequire(historyOutTokenForExchange[period] != 0, \"No Out Tokens for current period\");\r\n    \taddress _user = msg.sender;\r\n        uint256 _balance = balanceOf(_user);\r\n    \tif(userPeriod(_user) != period && _balance != 0){\r\n    \t\texecuteExchange();\r\n            _balance = 0;\r\n    \t}\r\n        require(_balance.add(_amount) <= historyOutTokenForExchange[period], \"Balance is greater Out Tokens for period\");\r\n    \t_deposit(_user, _amount, period);\r\n    }\r\n\r\n\t/**\r\n     * @dev Withdraws amount of In Tokens deposited current period\r\n     * @param _amount of In Tokens Tokens\r\n     */\r\n    function requestWithdraw (uint256 _amount)\r\n        external\r\n        updatePeriod(false)\r\n    {\r\n    \taddress _user = msg.sender;\r\n    \trequire (userPeriod(_user) == period, \"No balance for current period\");\r\n    \t_withdraw(_user, _amount, period);\r\n    }\r\n\r\n\t/**\r\n     * @dev Sends owed Out Tokens to sender for previos periods In Tokens deposits\r\n     */\r\n    function executeExchange ()\r\n    \tpublic \r\n    \tupdatePeriod(false)\r\n    {\r\n    \taddress _user = msg.sender;\r\n    \tuint256 _out = calculateOut(_user);\r\n    \trequire (_out != 0, \"Nothing to exchange\");\r\n        outTokenDebt = outTokenDebt.sub(_out);\r\n\t\toutToken.safeTransfer(_user, _out);\r\n\t\t_withdrawExecute(_user, _out);\r\n    }\r\n    \r\n\r\n    /***************************************\r\n                    GETTERS\r\n    ****************************************/\r\n\r\n    /**\r\n    * @dev Returns total amount of InTokens locked into contract\r\n    */\r\n    function getInTokenBalance()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns OutTokens available for exchange current period\r\n    */\r\n    function getOutTokenForExchange()\r\n        public\r\n        view\r\n        returns(uint256 _outTokenForExhange)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        if(period == _period)\r\n            _outTokenForExhange = historyOutTokenForExchange[period];\r\n        else\r\n            (_outTokenForExhange, ) = _getOutTokenForExchange(period);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns InToken balance available for withdraw\r\n    * @param _user Address of the user\r\n    */\r\n    function getInTokenBalanceForWithdraw(address _user)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        uint256 _userPeriod = userPeriod(_user);\r\n        if(_userPeriod == _period)\r\n            return balanceOf(_user);\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates In Tokens contract will accept from user current period\r\n    * @param _user Address of the user\r\n    */\r\n    function calculateIn (address _user)\r\n        external\r\n        view\r\n        returns(uint256 _in)\r\n    {\r\n        uint256 _period = currentPeriod();\r\n        uint256 _userPeriod = userPeriod(_user);\r\n        uint256 _outTokenForExhange = getOutTokenForExchange();\r\n        if(_userPeriod != _period){\r\n            _in = _outTokenForExhange;\r\n        }else{\r\n            _in = _outTokenForExhange.sub(balanceOf(_user));\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev Calculates Out Tokens owed to user for past periods\r\n    * @param _user Address of the user\r\n    */\r\n    function calculateOut (address _user) \r\n    \tpublic\r\n    \tview\r\n    \treturns (uint256 _owed)\r\n    {\r\n    \tuint256 _period = currentPeriod();\r\n    \tuint256 _userPeriod = userPeriod(_user);\r\n    \tif(_userPeriod != _period){\r\n    \t\tif(historyOutTokenForExchange[_userPeriod] >= historyTotalSupply(_userPeriod)){\r\n    \t\t\t_owed = balanceOf(_user);\r\n    \t\t}else{\r\n\t    \t\t_owed = historyOutTokenForExchange[_userPeriod].mul(\r\n\t    \t\t\tbalanceOf(_user)\r\n\t    \t\t).mul(\r\n\t    \t\t\tCALC_PRECISION\r\n\t    \t\t).div(\r\n\t    \t\t\thistoryTotalSupply(_userPeriod)\r\n\t    \t\t).div(\r\n\t    \t\t\tCALC_PRECISION\r\n\t    \t\t);\r\n\t    \t}\r\n\t    }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"ExecutedExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestedExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestedWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_in\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_owed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInTokenBalanceForWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutTokenForExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outTokenForExhange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyOutTokenForExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"historyTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inToken\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outTokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ExchangeSuperUSDC","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c4213cc55385fc0e96c2244248c5c789bda8ef2b0000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://832b2ee67b6ea895f9e4901ec0ec830e27e7b5823ce85c1f484e511f2eeba0fe"}]}