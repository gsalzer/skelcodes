{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/communityFee/OPFCommunityFeeCollector.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\nimport '../interfaces/IERC20Template.sol';\\nimport 'openzeppelin-solidity/contracts/ownership/Ownable.sol';\\n\\n\\n/**\\n * @title OPFCommunityFeeCollector\\n * @dev Ocean Protocol Foundation Community Fee Collector contract\\n *      allows consumers to pay very small fee as part of the exchange of \\n *      data tokens with ocean token in order to support the community of  \\n *      ocean protocol and provide a sustainble development.\\n */\\ncontract OPFCommunityFeeCollector is Ownable {\\n    address payable private collector;\\n    /**\\n     * @dev constructor\\n     *      Called prior contract deployment. set the controller address and\\n     *      the contract owner address\\n     * @param newCollector the fee collector address.\\n     * @param OPFOwnerAddress the contract owner address\\n     */\\n    constructor(\\n        address payable newCollector,\\n        address OPFOwnerAddress\\n    ) \\n        public\\n        Ownable()\\n    {\\n        require(\\n            newCollector != address(0)&&\\n            OPFOwnerAddress != address(0), \\n            'OPFCommunityFeeCollector: collector address or owner is invalid address'\\n        );\\n        collector = newCollector;\\n        transferOwnership(OPFOwnerAddress);\\n    }\\n    /**\\n     * @dev fallback function\\n     *      this is a default fallback function in which receives\\n     *      the collected ether.\\n     */\\n    function() external payable {}\\n\\n    /**\\n     * @dev withdrawETH\\n     *      transfers all the accumlated ether the collector address\\n     */\\n    function withdrawETH() \\n        external \\n        payable\\n    {\\n        collector.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdrawToken\\n     *      transfers all the accumlated tokens the collector address\\n     * @param tokenAddress the token contract address \\n     */\\n    function withdrawToken(\\n        address tokenAddress\\n    ) \\n        external\\n    {\\n        require(\\n            tokenAddress != address(0),\\n            'OPFCommunityFeeCollector: invalid token contract address'\\n        );\\n\\n        require (\\n            IERC20Template(tokenAddress).transfer(\\n                collector,\\n                IERC20Template(tokenAddress).balanceOf(address(this))\\n            ),\\n            'OPFCommunityFeeCollector: failed to withdraw tokens'\\n        );\\n    }\\n\\n    /**\\n     * @dev changeCollector\\n     *      change the current collector address. Only owner can do that.\\n     * @param newCollector the new collector address \\n     */\\n    function changeCollector(\\n        address payable newCollector\\n    ) \\n        external \\n        onlyOwner \\n    {\\n        require(\\n            newCollector != address(0),\\n            'OPFCommunityFeeCollector: invalid collector address'\\n        );\\n        collector = newCollector;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ahmedali/Desktop/work/mainnet-deployment/ocean-contracts/contracts/interfaces/IERC20Template.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20Template {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address minter,\\n        uint256 cap,\\n        string calldata blob,\\n        address collector\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n    function minter() external view returns(address);    \\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function cap() external view returns (uint256);\\n    function isMinter(address account) external view returns (bool);\\n    function isInitialized() external view returns (bool);\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function proposeMinter(address newMinter) external;\\n    function approveMinter() external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"changeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newCollector\",\"type\":\"address\"},{\"name\":\"OPFOwnerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"OPFCommunityFeeCollector","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007df5273ad9a6fcce64d45c64c1e43cfb6f8617250000000000000000000000007df5273ad9a6fcce64d45c64c1e43cfb6f861725","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}