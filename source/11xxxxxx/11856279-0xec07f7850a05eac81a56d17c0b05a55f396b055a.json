{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * This file is derived from Uniswap, available under the GNU General Public\\n * License 3.0. https://uniswap.org/\\n *\\n * SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * This file is derived from Uniswap, available under the GNU General Public\\n * License 3.0. https://uniswap.org/\\n *\\n * SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * This file is derived from Uniswap, available under the GNU General Public\\n * License 3.0. https://uniswap.org/\\n *\\n * SPDX-License-Identifier: Apache-2.0 AND GPL-3.0-or-later\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/crowdsale/Crowdsale.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/GSN/Context.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport '../../interfaces/uniswap/IUniswapV2Factory.sol';\\nimport '../../interfaces/uniswap/IUniswapV2Router02.sol';\\n\\nimport '../investment/interfaces/IStakeFarm.sol';\\nimport '../token/interfaces/IERC20WolfMintable.sol';\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\n\\n/**\\n * @title Crowdsale\\n *\\n * @dev Crowdsale is a base contract for managing a token crowdsale, allowing\\n * investors to purchase tokens with ether. This contract implements such\\n * functionality in its most fundamental form and can be extended to provide\\n * additional functionality and/or custom behavior.\\n *\\n * The external interface represents the basic interface for purchasing tokens,\\n * and conforms the base architecture for crowdsales. It is *not* intended to\\n * be modified / overridden.\\n *\\n * The internal interface conforms the extensible and modifiable surface of\\n * crowdsales. Override the methods to add functionality. Consider using 'super'\\n * where appropriate to concatenate behavior.\\n */\\ncontract Crowdsale is Context, ReentrancyGuard, AddressBook {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IERC20WolfMintable;\\n\\n  // The token being sold\\n  IERC20WolfMintable public token;\\n\\n  // Address where funds are collected\\n  address payable private _wallet;\\n\\n  // How many token units a buyer gets per wei.\\n  //\\n  // The rate is the conversion between wei and the smallest and indivisible\\n  // token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n  // with 3 decimals called TOK 1 wei will give you 1 unit, or 0.001 TOK.\\n  //\\n  uint256 public rate;\\n\\n  // Amount of wei raised\\n  uint256 public weiRaised;\\n\\n  uint256 public cap;\\n  uint256 public investMin;\\n  uint256 public walletCap;\\n\\n  uint256 public openingTime;\\n  uint256 public closingTime;\\n\\n  // Per wallet investment (in wei)\\n  mapping(address => uint256) private _walletInvest;\\n\\n  /**\\n   * Event for token purchase logging\\n   *\\n   * @param purchaser who paid for the tokens\\n   * @param beneficiary who got the tokens\\n   * @param value weis paid for purchase\\n   * @param amount amount of tokens purchased\\n   */\\n  event TokensPurchased(\\n    address indexed purchaser,\\n    address indexed beneficiary,\\n    uint256 value,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * Event for add liquidity logging\\n   *\\n   * @param beneficiary who got the tokens\\n   * @param amountToken how many token were added\\n   * @param amountETH how many ETH were added\\n   * @param liquidity how many pool tokens were created\\n   */\\n  event LiquidityAdded(\\n    address indexed beneficiary,\\n    uint256 amountToken,\\n    uint256 amountETH,\\n    uint256 liquidity\\n  );\\n\\n  /**\\n   * Event for stake liquidity logging\\n   *\\n   * @param beneficiary who got the tokens\\n   * @param liquidity how many pool tokens were created\\n   */\\n  event Staked(address indexed beneficiary, uint256 liquidity);\\n\\n  // Uniswap Router for providing liquidity\\n  IUniswapV2Router02 public immutable uniV2Router;\\n  IERC20 public immutable uniV2Pair;\\n\\n  IStakeFarm public immutable stakeFarm;\\n\\n  // Rate of tokens to insert into the UNISwapv2 liquidity pool\\n  //\\n  // Because they will be devided, expanding by multiples of 10\\n  // is fine to express decimal values.\\n  //\\n  uint256 private tokenForLp;\\n  uint256 private ethForLp;\\n\\n  /**\\n   * @dev Reverts if not in crowdsale time range.\\n   */\\n  modifier onlyWhileOpen {\\n    require(isOpen(), 'not open');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Crowdsale constructor\\n   *\\n   * @param _addressRegistry IAdressRegistry to get wallet and uniV2Router02\\n   * @param _rate Number of token units a buyer gets per wei\\n   *\\n   * The rate is the conversion between wei and the smallest and indivisible\\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n   *\\n   * @param _token Address of the token being sold\\n   * @param _cap Max amount of wei to be contributed\\n   * @param _investMin minimum investment in wei\\n   * @param _walletCap Max amount of wei to be contributed per wallet\\n   * @param _lpEth numerator of liquidity pair\\n   * @param _lpToken denominator of liquidity pair\\n   * @param _openingTime Crowdsale opening time\\n   * @param _closingTime Crowdsale closing time\\n   */\\n  constructor(\\n    IAddressRegistry _addressRegistry,\\n    uint256 _rate,\\n    IERC20WolfMintable _token,\\n    uint256 _cap,\\n    uint256 _investMin,\\n    uint256 _walletCap,\\n    uint256 _lpEth,\\n    uint256 _lpToken,\\n    uint256 _openingTime,\\n    uint256 _closingTime\\n  ) {\\n    require(_rate > 0, 'rate is 0');\\n    require(address(_token) != address(0), 'token is addr(0)');\\n    require(_cap > 0, 'cap is 0');\\n    require(_lpEth > 0, 'lpEth is 0');\\n    require(_lpToken > 0, 'lpToken is 0');\\n\\n    // solhint-disable-next-line not-rely-on-time\\n    require(_openingTime >= block.timestamp, 'opening > now');\\n    require(_closingTime > _openingTime, 'open > close');\\n\\n    // Reverts if address is invalid\\n    IUniswapV2Router02 _uniV2Router =\\n      IUniswapV2Router02(\\n        _addressRegistry.getRegistryEntry(UNISWAP_V2_ROUTER02)\\n      );\\n    uniV2Router = _uniV2Router;\\n\\n    // Get our liquidity pair\\n    address _uniV2Pair =\\n      IUniswapV2Factory(_uniV2Router.factory()).getPair(\\n        address(_token),\\n        _uniV2Router.WETH()\\n      );\\n    require(_uniV2Pair != address(0), 'invalid pair');\\n    uniV2Pair = IERC20(_uniV2Pair);\\n\\n    // Reverts if address is invalid\\n    address _marketingWallet =\\n      _addressRegistry.getRegistryEntry(MARKETING_WALLET);\\n    _wallet = payable(_marketingWallet);\\n\\n    // Reverts if address is invalid\\n    address _stakeFarm =\\n      _addressRegistry.getRegistryEntry(WETH_WOWS_STAKE_FARM);\\n    stakeFarm = IStakeFarm(_stakeFarm);\\n\\n    rate = _rate;\\n    token = _token;\\n    cap = _cap;\\n    investMin = _investMin;\\n    walletCap = _walletCap;\\n    ethForLp = _lpEth;\\n    tokenForLp = _lpToken;\\n    openingTime = _openingTime;\\n    closingTime = _closingTime;\\n  }\\n\\n  /**\\n   * @dev Fallback function ***DO NOT OVERRIDE***\\n   *\\n   * Note that other contracts will transfer funds with a base gas stipend\\n   * of 2300, which is not enough to call buyTokens. Consider calling\\n   * buyTokens directly when purchasing tokens from a contract.\\n   */\\n  receive() external payable {\\n    // A payable receive() function follows the OpenZeppelin strategy, in which\\n    // it is designed to buy tokens.\\n    //\\n    // However, because we call out to uniV2Router from the crowdsale contract,\\n    // re-imbursement of ETH from UniswapV2Pair must not buy tokens.\\n    //\\n    // Instead it must be payed to this contract as a first step and will then\\n    // be transferred to the recipient in _addLiquidity().\\n    //\\n    if (_msgSender() != address(uniV2Router)) buyTokens(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Checks whether the cap has been reached\\n   *\\n   * @return Whether the cap was reached\\n   */\\n  function capReached() public view returns (bool) {\\n    return weiRaised >= cap;\\n  }\\n\\n  /**\\n   * @return True if the crowdsale is open, false otherwise.\\n   */\\n  function isOpen() public view returns (bool) {\\n    // solhint-disable-next-line not-rely-on-time\\n    return block.timestamp >= openingTime && block.timestamp <= closingTime;\\n  }\\n\\n  /**\\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n   *\\n   * @return Whether crowdsale period has elapsed\\n   */\\n  function hasClosed() public view returns (bool) {\\n    // solhint-disable-next-line not-rely-on-time\\n    return block.timestamp > closingTime;\\n  }\\n\\n  /**\\n   * @dev Provide a collection of UI relevant values to reduce # of queries\\n   *\\n   * @return ethRaised Amount eth raised (wei)\\n   * @return timeOpen Time presale opens (unix timestamp seconds)\\n   * @return timeClose Time presale closes (unix timestamp seconds)\\n   * @return timeNow Current time (unix timestamp seconds)\\n   * @return userEthInvested Amount of ETH users have already spent (wei)\\n   * @return userTokenAmount Amount of token held by user (token::decimals)\\n   */\\n  function getStates(address beneficiary)\\n    public\\n    view\\n    returns (\\n      uint256 ethRaised,\\n      uint256 timeOpen,\\n      uint256 timeClose,\\n      uint256 timeNow,\\n      uint256 userEthInvested,\\n      uint256 userTokenAmount\\n    )\\n  {\\n    uint256 tokenAmount =\\n      beneficiary == address(0) ? 0 : token.balanceOf(beneficiary);\\n    uint256 ethInvest = _walletInvest[beneficiary];\\n\\n    return (\\n      weiRaised,\\n      openingTime,\\n      closingTime,\\n      // solhint-disable-next-line not-rely-on-time\\n      block.timestamp,\\n      ethInvest,\\n      tokenAmount\\n    );\\n  }\\n\\n  /**\\n   * @dev Low level token purchase ***DO NOT OVERRIDE***\\n   *\\n   * This function has a non-reentrancy guard, so it shouldn't be called by\\n   * another `nonReentrant` function.\\n   *\\n   * @param beneficiary Recipient of the token purchase\\n   */\\n  function buyTokens(address beneficiary) public payable nonReentrant {\\n    uint256 weiAmount = msg.value;\\n    _preValidatePurchase(beneficiary, weiAmount);\\n\\n    // Calculate token amount to be created\\n    uint256 tokens = _getTokenAmount(weiAmount);\\n\\n    // Update state\\n    weiRaised = weiRaised.add(weiAmount);\\n    _walletInvest[beneficiary] = _walletInvest[beneficiary].add(weiAmount);\\n\\n    _processPurchase(beneficiary, tokens);\\n    emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\n\\n    _forwardFunds(weiAmount);\\n  }\\n\\n  /**\\n   * @dev Low level token purchase and liquidity staking ***DO NOT OVERRIDE***\\n   *\\n   * This function has a non-reentrancy guard, so it shouldn't be called by\\n   * another `nonReentrant` function.\\n   *\\n   * @param beneficiary Recipient of the token purchase\\n   */\\n  function buyTokensAddLiquidity(address payable beneficiary)\\n    public\\n    payable\\n    nonReentrant\\n  {\\n    uint256 weiAmount = msg.value;\\n\\n    // The ETH amount we buy WOWS token for\\n    uint256 buyAmount =\\n      weiAmount.mul(tokenForLp).div(rate.mul(ethForLp).add(tokenForLp));\\n\\n    // The ETH amount we invest for liquidity (ETH + WOLF)\\n    uint256 investAmount = weiAmount.sub(buyAmount);\\n\\n    _preValidatePurchase(beneficiary, buyAmount);\\n\\n    // Calculate token amount to be created\\n    uint256 tokens = _getTokenAmount(buyAmount);\\n\\n    // Verify that the ratio is in 0.1% limit\\n    uint256 tokensReverse = investAmount.mul(tokenForLp).div(ethForLp);\\n    require(\\n      tokens < tokensReverse || tokens.sub(tokensReverse) < tokens.div(1000),\\n      'ratio wrong'\\n    );\\n    require(\\n      tokens > tokensReverse || tokensReverse.sub(tokens) < tokens.div(1000),\\n      'ratio wrong'\\n    );\\n\\n    // Update state\\n    weiRaised = weiRaised.add(buyAmount);\\n    _walletInvest[beneficiary] = _walletInvest[beneficiary].add(buyAmount);\\n\\n    _processLiquidity(beneficiary, investAmount, tokens);\\n\\n    _forwardFunds(buyAmount);\\n  }\\n\\n  /**\\n   * @dev Low level token liquidity staking ***DO NOT OVERRIDE***\\n   *\\n   * This function has a non-reentrancy guard, so it shouldn't be called by\\n   * another `nonReentrant` function.\\n   *\\n   * approve() must be called before to let us transfer msgsenders tokens.\\n   *\\n   * @param beneficiary Recipient of the token purchase\\n   */\\n  function addLiquidity(address payable beneficiary)\\n    public\\n    payable\\n    nonReentrant\\n    onlyWhileOpen\\n  {\\n    uint256 weiAmount = msg.value;\\n    require(beneficiary != address(0), 'beneficiary is the zero address');\\n    require(weiAmount != 0, 'weiAmount is 0');\\n\\n    // Calculate number of tokens\\n    uint256 tokenAmount = weiAmount.mul(tokenForLp).div(ethForLp);\\n    require(token.balanceOf(_msgSender()) >= tokenAmount, 'insufficient token');\\n\\n    // Get the tokens from msg.sender\\n    token.safeTransferFrom(_msgSender(), address(this), tokenAmount);\\n\\n    // Step 1: add liquidity\\n    uint256 lpToken =\\n      _addLiquidity(address(this), beneficiary, weiAmount, tokenAmount);\\n\\n    // Step 2: we now own the liquidity tokens, stake them\\n    uniV2Pair.approve(address(stakeFarm), lpToken);\\n    stakeFarm.stake(lpToken);\\n\\n    // Step 3: transfer the stake to the user\\n    stakeFarm.transfer(beneficiary, lpToken);\\n\\n    emit Staked(beneficiary, lpToken);\\n  }\\n\\n  /**\\n   * @dev Finalize presale / create liquidity pool\\n   */\\n  function finalizePresale() external {\\n    require(hasClosed(), 'not closed');\\n\\n    uint256 ethBalance = address(this).balance;\\n    require(ethBalance > 0, 'no eth balance');\\n\\n    // Calculate how many token we add into liquidity pool\\n    uint256 tokenToLp = (ethBalance.mul(tokenForLp)).div(ethForLp);\\n\\n    // Calculate amount unsold token\\n    uint256 tokenUnsold = cap.sub(weiRaised).mul(rate);\\n\\n    // Mint token we spend\\n    require(\\n      token.mint(address(this), tokenToLp.add(tokenUnsold)),\\n      'minting failed'\\n    );\\n\\n    _addLiquidity(_wallet, _wallet, ethBalance, tokenToLp);\\n\\n    // Transfer all tokens from this contract to _wallet\\n    uint256 tokenInContract = token.balanceOf(address(this));\\n    if (tokenInContract > 0) token.transfer(_wallet, tokenInContract);\\n\\n    // Finally whitelist uniV2 LP pool on token contract\\n    token.enableUniV2Pair(true);\\n  }\\n\\n  /**\\n   * @dev Added to support recovering LP Rewards from other systems to be distributed to holders\\n   */\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n    require(msg.sender == _wallet, 'restricted to wallet');\\n    require(hasClosed(), 'not closed');\\n    // Cannot recover the staking token or the rewards token\\n    require(tokenAddress != address(token), 'native tokens unrecoverable');\\n\\n    IERC20(tokenAddress).safeTransfer(_wallet, tokenAmount);\\n  }\\n\\n  /**\\n   * @dev Change the closing time which gives you the possibility\\n   * to either shorten or enlarge the presale period\\n   */\\n  function setClosingTime(uint256 newClosingTime) external {\\n    require(msg.sender == _wallet, 'restricted to wallet');\\n    require(newClosingTime > openingTime, 'close < open');\\n\\n    closingTime = newClosingTime;\\n  }\\n\\n  /**\\n   * @dev Validation of an incoming purchase. Use require statements to revert\\n   * state when conditions are not met\\n   *\\n   * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n   *\\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n   *     super._preValidatePurchase(beneficiary, weiAmount);\\n   *     require(weiRaised().add(weiAmount) <= cap);\\n   *\\n   * @param beneficiary Address performing the token purchase\\n   * @param weiAmount Value in wei involved in the purchase\\n   */\\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount)\\n    internal\\n    view\\n    onlyWhileOpen\\n  {\\n    require(beneficiary != address(0), 'beneficiary zero address');\\n    require(weiAmount != 0, 'weiAmount is 0');\\n    require(weiRaised.add(weiAmount) <= cap, 'cap exceeded');\\n    require(weiAmount >= investMin, 'invest too small');\\n    require(\\n      _walletInvest[beneficiary].add(weiAmount) <= walletCap,\\n      'wallet-cap exceeded'\\n    );\\n\\n    // Silence state mutability warning without generating bytecode - see\\n    // https://github.com/ethereum/solidity/issues/2691\\n    this;\\n  }\\n\\n  /**\\n   * @dev Executed when a purchase has been validated and is ready to be executed\\n   *\\n   * Doesn't necessarily emit/send tokens.\\n   *\\n   * @param _beneficiary Address receiving the tokens\\n   * @param _tokenAmount Number of tokens to be purchased\\n   */\\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount)\\n    internal\\n  {\\n    require(token.mint(address(this), _tokenAmount), 'minting failed');\\n    token.transfer(_beneficiary, _tokenAmount);\\n  }\\n\\n  /**\\n   * @dev Executed when a purchase has been validated and is ready to be executed\\n   *\\n   * This function adds liquidity and stakes the liquidity in our initial farm.\\n   *\\n   * @param beneficiary Address receiving the tokens\\n   * @param ethAmount Amount of ETH provided\\n   * @param tokenAmount Number of tokens to be purchased\\n   */\\n  function _processLiquidity(\\n    address payable beneficiary,\\n    uint256 ethAmount,\\n    uint256 tokenAmount\\n  ) internal {\\n    require(token.mint(address(this), tokenAmount), 'minting failed');\\n\\n    // Step 1: add liquidity\\n    uint256 lpToken =\\n      _addLiquidity(address(this), beneficiary, ethAmount, tokenAmount);\\n\\n    // Step 2: we now own the liquidity tokens, stake them\\n    // Allow stakeFarm to own our tokens\\n    uniV2Pair.approve(address(stakeFarm), lpToken);\\n    stakeFarm.stake(lpToken);\\n\\n    // Step 3: transfer the stake to the user\\n    stakeFarm.transfer(beneficiary, lpToken);\\n\\n    emit Staked(beneficiary, lpToken);\\n  }\\n\\n  /**\\n   * @dev Override to extend the way in which ether is converted to tokens.\\n   *\\n   * @param weiAmount Value in wei to be converted into tokens\\n   *\\n   * @return Number of tokens that can be purchased with the specified _weiAmount\\n   */\\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n    return weiAmount.mul(rate);\\n  }\\n\\n  /**\\n   * @dev Determines how ETH is stored/forwarded on purchases.\\n   */\\n  function _forwardFunds(uint256 weiAmount) internal {\\n    _wallet.transfer(weiAmount.div(2));\\n  }\\n\\n  function _addLiquidity(\\n    address tokenOwner,\\n    address payable remainingReceiver,\\n    uint256 ethBalance,\\n    uint256 tokenBalance\\n  ) internal returns (uint256) {\\n    // Add Liquidity, receiver of pool tokens is _wallet\\n    token.approve(address(uniV2Router), tokenBalance);\\n\\n    (uint256 amountToken, uint256 amountETH, uint256 liquidity) =\\n      uniV2Router.addLiquidityETH{ value: ethBalance }(\\n        address(token),\\n        tokenBalance,\\n        tokenBalance.mul(90).div(100),\\n        ethBalance.mul(90).div(100),\\n        tokenOwner,\\n        // solhint-disable-next-line not-rely-on-time\\n        block.timestamp + 86400\\n      );\\n\\n    emit LiquidityAdded(tokenOwner, amountToken, amountETH, liquidity);\\n\\n    // Send remaining ETH to the team wallet\\n    if (amountETH < ethBalance)\\n      remainingReceiver.transfer(ethBalance.sub(amountETH));\\n\\n    // Send remaining WOWS token to team wallet\\n    if (amountToken < tokenBalance)\\n      token.transfer(remainingReceiver, tokenBalance.sub(amountToken));\\n\\n    return liquidity;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IStakeFarm.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title IStakeFarm\\n *\\n * @dev IStakeFarm is the business logic interface to staking farms.\\n */\\n\\ninterface IStakeFarm {\\n  /**\\n   * @dev Stake amount of ERC20 tokens and earn rewards\\n   */\\n  function stake(uint256 amount) external;\\n\\n  /**\\n   * @dev Unstake amount of previous staked tokens, rewards will not be claimed\\n   */\\n  function unstake(uint256 amount) external;\\n\\n  /**\\n   * @dev Claim rewards harvested during stake time\\n   */\\n  function getReward() external;\\n\\n  /**\\n   * @dev Unstake and getRewards in a single step\\n   */\\n  function exit() external;\\n\\n  /**\\n   * @dev Transfer amount of stake from msg.sender to recipient.\\n   */\\n  function transfer(address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/token/interfaces/IERC20WolfMintable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20WolfMintable is IERC20 {\\n  function mint(address account, uint256 amount) external returns (bool);\\n\\n  function enableUniV2Pair(bool enable) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ncontract AddressBook {\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get an registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20WolfMintable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_walletCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MARKETING_WALLET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_WALLET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER02\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_WOWS_STAKE_FARM\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensAddLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOpen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userEthInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"setClosingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFarm\",\"outputs\":[{\"internalType\":\"contract IStakeFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20WolfMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000945466656995c9309ff66e05b4c268558bec964e0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000672ef7e4fe230b5ca1466c5fdd40588d30fdf90a00000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000000ea6000000000000000000000000000000000000000000000000000000000003a98000000000000000000000000000000000000000000000000000000000602a9378000000000000000000000000000000000000000000000000000000006033cdf8","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}