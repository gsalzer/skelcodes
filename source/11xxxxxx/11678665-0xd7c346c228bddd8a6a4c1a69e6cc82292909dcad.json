{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface ISavingsContractV2 {\r\n\r\n    // DEPRECATED but still backwards compatible\r\n    function redeem(uint256 _amount) external returns (uint256 massetReturned);\r\n    function creditBalances(address) external view returns (uint256); // V1 & V2 (use balanceOf)\r\n\r\n    // --------------------------------------------\r\n\r\n    function depositInterest(uint256 _amount) external; // V1 & V2\r\n\r\n    function depositSavings(uint256 _amount) external returns (uint256 creditsIssued); // V1 & V2\r\n    function depositSavings(uint256 _amount, address _beneficiary) external returns (uint256 creditsIssued); // V2\r\n\r\n    function redeemCredits(uint256 _amount) external returns (uint256 underlyingReturned); // V2\r\n    function redeemUnderlying(uint256 _amount) external returns (uint256 creditsBurned); // V2\r\n\r\n    function exchangeRate() external view returns (uint256); // V1 & V2\r\n\r\n    function balanceOfUnderlying(address _user) external view returns (uint256 balance); // V2\r\n\r\n    function underlyingToCredits(uint256 _credits) external view returns (uint256 underlying); // V2\r\n    function creditsToUnderlying(uint256 _underlying) external view returns (uint256 credits); // V2\r\n\r\n}\r\n\r\ninterface MassetStructs {\r\n\r\n    /** @dev Stores high level basket info */\r\n    struct Basket {\r\n\r\n        /** @dev Array of Bassets currently active */\r\n        Basset[] bassets;\r\n\r\n        /** @dev Max number of bAssets that can be present in any Basket */\r\n        uint8 maxBassets;\r\n\r\n        /** @dev Some bAsset is undergoing re-collateralisation */\r\n        bool undergoingRecol;\r\n\r\n        /**\r\n         * @dev In the event that we do not raise enough funds from the auctioning of a failed Basset,\r\n         * The Basket is deemed as failed, and is undercollateralised to a certain degree.\r\n         * The collateralisation ratio is used to calc Masset burn rate.\r\n         */\r\n        bool failed;\r\n        uint256 collateralisationRatio;\r\n\r\n    }\r\n\r\n    /** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\r\n    struct Basset {\r\n\r\n        /** @dev Address of the bAsset */\r\n        address addr;\r\n\r\n        /** @dev Status of the basset,  */\r\n        BassetStatus status; // takes uint8 datatype (1 byte) in storage\r\n\r\n        /** @dev An ERC20 can charge transfer fee, for example USDT, DGX tokens. */\r\n        bool isTransferFeeCharged; // takes a byte in storage\r\n\r\n        /**\r\n         * @dev 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n         *      If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n         *      A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n         */\r\n        uint256 ratio;\r\n\r\n        /** @dev Target weights of the Basset (100% == 1e18) */\r\n        uint256 maxWeight;\r\n\r\n        /** @dev Amount of the Basset that is held in Collateral */\r\n        uint256 vaultBalance;\r\n\r\n    }\r\n\r\n    /** @dev Status of the Basset - has it broken its peg? */\r\n    enum BassetStatus {\r\n        Default,\r\n        Normal,\r\n        BrokenBelowPeg,\r\n        BrokenAbovePeg,\r\n        Blacklisted,\r\n        Liquidating,\r\n        Liquidated,\r\n        Failed\r\n    }\r\n\r\n    /** @dev Internal details on Basset */\r\n    struct BassetDetails {\r\n        Basset bAsset;\r\n        address integrator;\r\n        uint8 index;\r\n    }\r\n\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct ForgePropsMulti {\r\n        bool isValid; // Flag to signify that forge bAssets have passed validity check\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n    /** @dev All details needed to Forge with multiple bAssets */\r\n    struct RedeemProps {\r\n        bool isValid;\r\n        Basset[] allBassets;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n\r\n    /** @dev All details needed for proportionate Redemption */\r\n    struct RedeemPropsMulti {\r\n        uint256 colRatio;\r\n        Basset[] bAssets;\r\n        address[] integrators;\r\n        uint8[] indexes;\r\n    }\r\n}\r\n\r\ncontract IMasset is MassetStructs {\r\n\r\n    /** @dev Calc interest */\r\n    function collectInterest() external returns (uint256 swapFeesGained, uint256 newTotalSupply);\r\n    function collectPlatformInterest() external returns (uint256 interestGained, uint256 newTotalSupply);\r\n\r\n    /** @dev Minting */\r\n    function mint(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetMinted);\r\n    function mintTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n    function mintMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetMinted);\r\n\r\n    /** @dev Swapping */\r\n    function swap( address _input, address _output, uint256 _quantity, address _recipient)\r\n        external returns (uint256 output);\r\n    function getSwapOutput( address _input, address _output, uint256 _quantity)\r\n        external view returns (bool, string memory, uint256 output);\r\n\r\n    /** @dev Redeeming */\r\n    function redeem(address _basset, uint256 _bassetQuantity)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemTo(address _basset, uint256 _bassetQuantity, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMulti(address[] calldata _bAssets, uint256[] calldata _bassetQuantities, address _recipient)\r\n        external returns (uint256 massetRedeemed);\r\n    function redeemMasset(uint256 _mAssetQuantity, address _recipient) external;\r\n\r\n    /** @dev Setters for the Manager or Gov to update module info */\r\n    function upgradeForgeValidator(address _newForgeValidator) external;\r\n\r\n    /** @dev Setters for Gov to set system params */\r\n    function setSwapFee(uint256 _swapFee) external;\r\n\r\n    /** @dev Getters */\r\n    function getBasketManager() external view returns(address);\r\n    function forgeValidator() external view returns (address);\r\n    function totalSupply() external view returns (uint256);\r\n    function swapFee() external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin, // calculated off chain\r\n        address[] calldata path, // also worked out off chain\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ICurveMetaPool {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n}\r\n\r\ninterface IBasicToken {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IBoostedSavingsVault {\r\n    function stake(address _beneficiary, uint256 _amount) external;\r\n}\r\n\r\n// 4 FLOWS\r\n// 0 - SAVE\r\n// 1 - MINT AND SAVE\r\n// 2 - BUY AND SAVE (Curve)\r\n// 3 - BUY AND SAVE (ETH via Uni)\r\ncontract SaveWrapper {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Constants - add to bytecode during deployment\r\n    address save;\r\n    address vault;\r\n    address mAsset;\r\n\r\n    IUniswapV2Router02 uniswap;\r\n    ICurveMetaPool curve;\r\n\r\n    constructor(\r\n        address _save,\r\n        address _vault,\r\n        address _mAsset,\r\n        address[] memory _bAssets,\r\n        address _uniswapAddress,\r\n        address _curveAddress,\r\n        address[] memory _curveAssets\r\n    ) public {\r\n        require(_save != address(0), \"Invalid save address\");\r\n        save = _save;\r\n        require(_vault != address(0), \"Invalid vault address\");\r\n        vault = _vault;\r\n        require(_mAsset != address(0), \"Invalid mAsset address\");\r\n        mAsset = _mAsset;\r\n        require(_uniswapAddress != address(0), \"Invalid uniswap address\");\r\n        uniswap = IUniswapV2Router02(_uniswapAddress);\r\n        require(_curveAddress != address(0), \"Invalid curve address\");\r\n        curve = ICurveMetaPool(_curveAddress);\r\n\r\n        IERC20(_mAsset).safeApprove(save, uint256(-1));\r\n        IERC20(_save).approve(_vault, uint256(-1));\r\n        for(uint256 i = 0; i < _curveAssets.length; i++ ) {\r\n            IERC20(_curveAssets[i]).safeApprove(address(curve), uint256(-1));\r\n        }\r\n        for(uint256 i = 0; i < _bAssets.length; i++ ) {\r\n            IERC20(_bAssets[i]).safeApprove(_mAsset, uint256(-1));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev 0. Simply saves an mAsset and then into the vault\r\n     * @param _amount Units of mAsset to deposit to savings\r\n     */\r\n    function saveAndStake(uint256 _amount) external {\r\n        IERC20(mAsset).transferFrom(msg.sender, address(this), _amount);\r\n        uint256 credits = ISavingsContractV2(save).depositSavings(_amount);\r\n        IBoostedSavingsVault(vault).stake(msg.sender, credits);\r\n    }\r\n\r\n    /**\r\n     * @dev 1. Mints an mAsset and then deposits to SAVE\r\n     * @param _bAsset       bAsset address\r\n     * @param _amt          Amount of bAsset to mint with\r\n     * @param _stake        Add the imUSD to the Savings Vault?\r\n     */\r\n    function saveViaMint(address _bAsset, uint256 _amt, bool _stake) external {\r\n        // 1. Get the input bAsset\r\n        IERC20(_bAsset).transferFrom(msg.sender, address(this), _amt);\r\n        // 2. Mint\r\n        IMasset mAsset_ = IMasset(mAsset);\r\n        uint256 massetsMinted = mAsset_.mint(_bAsset, _amt);\r\n        // 3. Mint imUSD and optionally stake in vault\r\n        _saveAndStake(massetsMinted, _stake);\r\n    }\r\n\r\n    /**\r\n     * @dev 2. Buys mUSD on Curve, mints imUSD and optionally deposits to the vault\r\n     * @param _input         bAsset to sell\r\n     * @param _curvePosition Index of the bAsset in the Curve pool\r\n     * @param _minOutCrv     Min amount of mUSD to receive\r\n     * @param _amountIn      Input asset amount\r\n     * @param _stake         Add the imUSD to the Savings Vault?\r\n     */\r\n    function saveViaCurve(\r\n        address _input,\r\n        int128 _curvePosition,\r\n        uint256 _amountIn,\r\n        uint256 _minOutCrv,\r\n        bool _stake\r\n    ) external {\r\n        // 1. Get the input asset\r\n        IERC20(_input).transferFrom(msg.sender, address(this), _amountIn);\r\n        // 2. Purchase mUSD\r\n        uint256 purchased = curve.exchange_underlying(_curvePosition, 0, _amountIn, _minOutCrv);\r\n        // 3. Mint imUSD and optionally stake in vault\r\n        _saveAndStake(purchased, _stake);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets estimated mAsset output from a Curve trade\r\n     */\r\n    function estimate_saveViaCurve(\r\n        int128 _curvePosition,\r\n        uint256 _amountIn\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 out)\r\n    {\r\n        return curve.get_dy(_curvePosition, 0, _amountIn);\r\n    }\r\n\r\n    /**\r\n     * @dev 3. Buys a bAsset on Uniswap with ETH then mUSD on Curve\r\n     * @param _amountOutMin  bAsset to sell\r\n     * @param _path          Sell path on Uniswap (e.g. [WETH, DAI])\r\n     * @param _curvePosition Index of the bAsset in the Curve pool\r\n     * @param _minOutCrv     Min amount of mUSD to receive\r\n     * @param _stake         Add the imUSD to the Savings Vault?\r\n     */\r\n    function saveViaUniswapETH(\r\n        uint256 _amountOutMin,\r\n        address[] calldata _path,\r\n        int128 _curvePosition,\r\n        uint256 _minOutCrv,\r\n        bool _stake\r\n    ) external payable {\r\n        // 1. Get the bAsset\r\n        uint[] memory amounts = uniswap.swapExactETHForTokens.value(msg.value)(\r\n            _amountOutMin,\r\n            _path,\r\n            address(this),\r\n            now + 1000\r\n        );\r\n        // 2. Purchase mUSD\r\n        uint256 purchased = curve.exchange_underlying(_curvePosition, 0, amounts[amounts.length-1], _minOutCrv);\r\n        // 3. Mint imUSD and optionally stake in vault\r\n        _saveAndStake(purchased, _stake);\r\n    }\r\n    /**\r\n     * @dev Gets estimated mAsset output from a WETH > bAsset > mAsset trade\r\n     */\r\n    function estimate_saveViaUniswapETH(\r\n        uint256 _ethAmount,\r\n        address[] calldata _path,\r\n        int128 _curvePosition\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 out)\r\n    {\r\n        uint256 estimatedBasset = _getAmountOut(_ethAmount, _path);\r\n        return curve.get_dy(_curvePosition, 0, estimatedBasset);\r\n    }\r\n\r\n    /** @dev Internal func to deposit into SAVE and optionally stake in the vault */\r\n    function _saveAndStake(\r\n        uint256 _amount,\r\n        bool _stake\r\n    ) internal {\r\n        if(_stake){\r\n            uint256 credits = ISavingsContractV2(save).depositSavings(_amount, address(this));\r\n            IBoostedSavingsVault(vault).stake(msg.sender, credits);\r\n        } else {\r\n            ISavingsContractV2(save).depositSavings(_amount, msg.sender);\r\n        }\r\n    }\r\n\r\n    /** @dev Internal func to get esimtated Uniswap output from WETH to token trade */\r\n    function _getAmountOut(uint256 _amountIn, address[] memory _path) internal view returns (uint256) {\r\n        uint256[] memory amountsOut = uniswap.getAmountsOut(_amountIn, _path);\r\n        return amountsOut[amountsOut.length - 1];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_save\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_uniswapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_curveAssets\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"estimate_saveViaCurve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"out\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"}],\"name\":\"estimate_saveViaUniswapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"out\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveAndStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutCrv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaCurve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"int128\",\"name\":\"_curvePosition\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"_minOutCrv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"saveViaUniswapETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"SaveWrapper","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000030647a72dc82d7fbb1123ea74716ab8a317eac1900000000000000000000000078befca7de27d07dc6e71da295cc2946681a6c7b000000000000000000000000e2f2a5c287993345a840db3b0845fbc70f5935a500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000008474ddbe98f5aa3179b3b3f5942d724afcdec9f6000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000085d4780b73119b644ae5ecd22b376000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000000000000000000000000000000000000000000003000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"bzzr://06287402ab4f54425be73e79dc0a3121ced54de7f9ccc6456341b1ece50c04da"}]}