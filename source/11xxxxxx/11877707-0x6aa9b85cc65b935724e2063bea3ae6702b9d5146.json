{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConjureFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./lib/FixedPoint.sol\\\";\\r\\n\\r\\ncontract Conjure is IERC20, ReentrancyGuard {\\r\\n\\r\\n    /// @notice using Openzeppelin contracts for SafeMath and Address\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using FixedPoint for FixedPoint.uq112x112;\\r\\n    using FixedPoint for FixedPoint.uq144x112;\\r\\n\\r\\n    /// @notice presenting the total supply\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /// @notice representing the name of the token\\r\\n    string private _name;\\r\\n\\r\\n    /// @notice representing the symbol of the token\\r\\n    string private _symbol;\\r\\n\\r\\n    /// @notice representing the decimals of the token\\r\\n    uint8 private immutable _decimals = 18;\\r\\n\\r\\n    /// @notice a record of balance of a specific account by address\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    /// @notice a record of allowances for a specific address by address to address mapping\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    /// @notice the owner and creator of the contract\\r\\n    address payable public _owner;\\r\\n\\r\\n    /// @notice the owner of the CONJURE factory\\r\\n    address public _factoryaddress;\\r\\n\\r\\n    /// @notice the type of the arb asset (single asset, arb asset) (0... single, 1... arb, 2... index mcap, 3 ... sqrt mcap)\\r\\n    uint8 public _assetType;\\r\\n\\r\\n    /// @notice the address of the collateral contract factory\\r\\n    address public _collateralFactory;\\r\\n\\r\\n    /// @notice the address of the collateral contract\\r\\n    address public _collateralContract;\\r\\n\\r\\n    /// @notice shows the init state of the contract\\r\\n    bool public _inited;\\r\\n\\r\\n    /// @notice struct for oracles\\r\\n    struct _oracleStruct {\\r\\n        address oracleaddress;\\r\\n        /// 0... chainlink, 1... uniswap twap, 2... custom\\r\\n        uint oracleType;\\r\\n        string signature;\\r\\n        bytes calldatas;\\r\\n        uint256 weight;\\r\\n        uint256 decimals;\\r\\n        uint256 values;\\r\\n    }\\r\\n\\r\\n    /// @notice array for oracles\\r\\n    _oracleStruct[] public _oracleData;\\r\\n\\r\\n    /// @notice number of aracles\\r\\n    uint256 public _numoracles;\\r\\n\\r\\n    /// @notice deployed uniswap v2 oracle instance\\r\\n    UniswapV2OracleInterface public _uniswapv2oracle;\\r\\n\\r\\n    /// @notice the latest observed price\\r\\n    uint256 public _latestobservedprice;\\r\\n\\r\\n    /// @notice the latest observed price timestamp\\r\\n    uint256 public _latestobservedtime;\\r\\n\\r\\n    /// @notice the divisor for the index\\r\\n    uint256 public _indexdivisor = 1;\\r\\n\\r\\n    /// @notice constant for hourly observation\\r\\n    uint256 HOUR = 3600;\\r\\n\\r\\n    /// @notice maximum decimal size for the used prices\\r\\n    uint256 public _maximumDecimals = 18;\\r\\n\\r\\n    /* The number representing 1.0. */\\r\\n    uint public  UNIT = 10**uint(_maximumDecimals);\\r\\n\\r\\n    /// @notice the eth usd price feed chainlink oracle address\\r\\n    //chainlink eth/usd mainnet: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n    //chainlink eth/usd rinkeby: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n    AggregatorV3Interface public ethusdchainlinkoracle = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n\\r\\n    constructor (\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address payable owner_,\\r\\n        address factoryaddress_,\\r\\n        address uniswapv2oracle,\\r\\n        address collateralfactory_\\r\\n    )\\r\\n    public {\\r\\n        _owner = owner_;\\r\\n        _factoryaddress = factoryaddress_;\\r\\n        _totalSupply = 0;\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n\\r\\n        _uniswapv2oracle = UniswapV2OracleInterface(uniswapv2oracle);\\r\\n        _collateralFactory = collateralfactory_;\\r\\n\\r\\n        _balances[_owner] = _totalSupply;\\r\\n        _inited = false;\\r\\n\\r\\n        emit Transfer(address(0), _owner, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Public init function to set up the contract with pricing sources\\r\\n    *\\r\\n    */\\r\\n    function init(\\r\\n        uint256 mintingFee_,\\r\\n        uint8 assetType_,\\r\\n        uint256 indexdivisor_,\\r\\n        address[] memory oracleAddresses_,\\r\\n        uint8[] memory oracleTypes_,\\r\\n        string[] memory signatures_,\\r\\n        bytes[] memory calldata_,\\r\\n        uint256[] memory values_,\\r\\n        uint256[] memory weights_,\\r\\n        uint256[] memory decimals_\\r\\n    ) public\\r\\n    {\\r\\n        require(msg.sender == _owner);\\r\\n        require(_inited == false);\\r\\n        require(indexdivisor_ != 0);\\r\\n\\r\\n        _collateralContract = IEtherCollateralFactory(_collateralFactory).EtherCollateralMint(payable(address(this)), _owner, _factoryaddress, mintingFee_);\\r\\n        _assetType = assetType_;\\r\\n        _numoracles = oracleAddresses_.length;\\r\\n        _indexdivisor = indexdivisor_;\\r\\n\\r\\n        // push the values into the oracle struct for further processing\\r\\n        for (uint i = 0; i < oracleAddresses_.length; i++) {\\r\\n            _oracleStruct memory temp_struct;\\r\\n            temp_struct.oracleaddress = oracleAddresses_[i];\\r\\n            temp_struct.oracleType = oracleTypes_[i];\\r\\n            temp_struct.signature = signatures_[i];\\r\\n            temp_struct.calldatas = calldata_[i];\\r\\n            temp_struct.weight = weights_[i];\\r\\n            temp_struct.values = values_[i];\\r\\n            temp_struct.decimals = decimals_[i];\\r\\n            _oracleData.push(temp_struct);\\r\\n\\r\\n            require(decimals_[i] <= 18);\\r\\n        }\\r\\n\\r\\n        getPrice();\\r\\n        _inited = true;\\r\\n    }\\r\\n\\r\\n    function setEthUsdChainlinkOracle(address neworacle) public\\r\\n    {\\r\\n        require (msg.sender == _owner);\\r\\n        AggregatorV3Interface newagg = AggregatorV3Interface(neworacle);\\r\\n        ethusdchainlinkoracle = newagg;\\r\\n    }\\r\\n\\r\\n    function setUniswapOracle(address newunioracle) public\\r\\n    {\\r\\n        require (msg.sender == _owner);\\r\\n        UniswapV2OracleInterface newagg = UniswapV2OracleInterface(newunioracle);\\r\\n        _uniswapv2oracle = newagg;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Public burn function can only be called from the collateral contract\\r\\n    *\\r\\n    */\\r\\n    function burn(address account, uint amount) public\\r\\n    {\\r\\n        require(msg.sender == _collateralContract);\\r\\n        _internalBurn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Public mint function can only be called from the collateral contract\\r\\n    *\\r\\n    */\\r\\n    function mint(address account, uint amount) public\\r\\n    {\\r\\n        require(msg.sender == _collateralContract);\\r\\n        _internalIssue(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev internal mint function issues tokens to the given account\\r\\n    *\\r\\n    */\\r\\n    function _internalIssue(address account, uint amount) internal {\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        emit Issued(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev internal burn function burns tokens from the given account\\r\\n    *\\r\\n    */\\r\\n    function _internalBurn(address account, uint amount) internal {\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        emit Burned(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the owner\\r\\n     */\\r\\n    function changeOwner(address payable _newOwner) public {\\r\\n        require(msg.sender == _owner);\\r\\n        address oldOwner = _owner;\\r\\n        _owner = _newOwner;\\r\\n        emit NewOwner(oldOwner, _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner collect the collected fees\\r\\n     */\\r\\n    function collectFees() public {\\r\\n        require(msg.sender == _owner);\\r\\n        uint256 contractBalalance = address(this).balance;\\r\\n\\r\\n        _owner.transfer(contractBalalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns the latest price of an oracle asset\\r\\n    */\\r\\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (int) {\\r\\n        (\\r\\n        uint80 roundID,\\r\\n        int price,\\r\\n        uint startedAt,\\r\\n        uint timeStamp,\\r\\n        uint80 answeredInRound\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets the ETH USD price from chainlink oracle\\r\\n    */\\r\\n    function getLatestETHUSDPrice() public view returns (int) {\\r\\n\\r\\n        AggregatorV3Interface priceFeed = ethusdchainlinkoracle;\\r\\n\\r\\n        (\\r\\n        uint80 roundID,\\r\\n        int price,\\r\\n        uint startedAt,\\r\\n        uint timeStamp,\\r\\n        uint80 answeredInRound\\r\\n        ) = priceFeed.latestRoundData();\\r\\n\\r\\n        uint decimals = priceFeed.decimals();\\r\\n        uint tempprice = uint(price) * 10 ** (_maximumDecimals - decimals);\\r\\n\\r\\n        return int(tempprice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * quicksort implementation\\r\\n    */\\r\\n    function quickSort(uint[] memory arr, int left, int right) public pure {\\r\\n        int i = left;\\r\\n        int j = right;\\r\\n        if (i == j) return;\\r\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\r\\n        while (i <= j) {\\r\\n            while (arr[uint(i)] < pivot) i++;\\r\\n            while (pivot < arr[uint(j)]) j--;\\r\\n            if (i <= j) {\\r\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\r\\n                i++;\\r\\n                j--;\\r\\n            }\\r\\n        }\\r\\n        if (left < j)\\r\\n            quickSort(arr, left, j);\\r\\n        if (i < right)\\r\\n            quickSort(arr, i, right);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Avg implementation\\r\\n    */\\r\\n    function getAverage(uint[] memory arr) internal view returns (uint) {\\r\\n        uint sum = 0;\\r\\n\\r\\n        for (uint i = 0; i < arr.length; i++) {\\r\\n            sum += arr[i];\\r\\n        }\\r\\n\\r\\n        // if we dont have any weights\\r\\n        if (_assetType == 0)\\r\\n        {\\r\\n            return (sum / arr.length);\\r\\n        }\\r\\n\\r\\n        // index pricing\\r\\n        if (_assetType == 2)\\r\\n        {\\r\\n            return sum / _indexdivisor;\\r\\n        }\\r\\n        if (_assetType == 3)\\r\\n        {\\r\\n            return sum / _indexdivisor;\\r\\n        }\\r\\n\\r\\n        // divide by total weight\\r\\n        return ((sum / 100) / _indexdivisor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Sort Function\\r\\n    */\\r\\n    function sort(uint[] memory data) public pure returns (uint[] memory) {\\r\\n        quickSort(data, int(0), int(data.length - 1));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    // sqrt function\\r\\n    function sqrt(uint256 y) internal view returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = (y + 1) / 2;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y.mul(UNIT).div(x) + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        // else z = 0\\r\\n    }\\r\\n\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        return _latestobservedprice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns the price for the arb asset (median price of the 5 assets)\\r\\n    */\\r\\n    function getPrice() public returns (uint) {\\r\\n\\r\\n        // storing all in an array for further processing\\r\\n        uint[] memory prices = new uint[](_oracleData.length);\\r\\n\\r\\n        for (uint i = 0; i < _oracleData.length; i++) {\\r\\n\\r\\n            // chainlink oracle\\r\\n            if (_oracleData[i].oracleType == 0)\\r\\n            {\\r\\n                AggregatorV3Interface pricefeed = AggregatorV3Interface(_oracleData[i].oracleaddress);\\r\\n                uint price = uint(getLatestPrice(pricefeed));\\r\\n                prices[i] = price;\\r\\n\\r\\n                // norming price\\r\\n                if (_maximumDecimals != _oracleData[i].decimals)\\r\\n                {\\r\\n                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\\r\\n                }\\r\\n\\r\\n                if (_assetType == 1)\\r\\n                {\\r\\n                    prices[i] = prices[i] * _oracleData[i].weight;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // uniswap TWAP\\r\\n            if (_oracleData[i].oracleType == 1)\\r\\n            {\\r\\n                // check if update price needed\\r\\n                if (_uniswapv2oracle.canUpdatePrice(_oracleData[i].oracleaddress) == true)\\r\\n                {\\r\\n                    // update price\\r\\n                    _uniswapv2oracle.updatePrice(_oracleData[i].oracleaddress);\\r\\n                }\\r\\n\\r\\n                // since this oracle is using token / eth prices we have to norm it to usd prices\\r\\n                uint currentethtusdprice = uint(getLatestETHUSDPrice());\\r\\n\\r\\n                // grab latest price after update decode\\r\\n                FixedPoint.uq112x112 memory price = _uniswapv2oracle.computeAverageTokenPrice(_oracleData[i].oracleaddress,0, HOUR * 24 * 10);\\r\\n                prices[i] = price.mul(currentethtusdprice).decode144();\\r\\n\\r\\n                // get total supply for indexes\\r\\n                uint totalsupply = IERC20(_oracleData[i].oracleaddress).totalSupply();\\r\\n\\r\\n                // norming price\\r\\n                if (_maximumDecimals != _oracleData[i].decimals)\\r\\n                {\\r\\n                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\\r\\n                    totalsupply = totalsupply * 10 ** (_maximumDecimals - _oracleData[i].decimals);\\r\\n                }\\r\\n\\r\\n                if (_assetType == 1)\\r\\n                {\\r\\n                    prices[i] = prices[i] * _oracleData[i].weight;\\r\\n                }\\r\\n\\r\\n                // index\\r\\n                if (_assetType == 2)\\r\\n                {\\r\\n                    prices[i] = (prices[i].mul(totalsupply) / UNIT);\\r\\n                }\\r\\n\\r\\n                // sqrt mcap\\r\\n                if (_assetType == 3)\\r\\n                {\\r\\n                    // mcap\\r\\n                    prices[i] =prices[i].mul(totalsupply) / UNIT;\\r\\n                    // sqrt mcap\\r\\n                    uint256 sqrt_mcap = sqrt(prices[i]);\\r\\n                    prices[i] = sqrt_mcap;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // custom oracle\\r\\n            if (_oracleData[i].oracleType == 2)\\r\\n            {\\r\\n                address contractaddress = _oracleData[i].oracleaddress;\\r\\n                string memory signature = _oracleData[i].signature;\\r\\n                bytes memory calldatas = _oracleData[i].calldatas;\\r\\n                uint256 callvalue = _oracleData[i].values;\\r\\n\\r\\n                bytes memory callData;\\r\\n\\r\\n                if (bytes(signature).length == 0) {\\r\\n                    callData = calldatas;\\r\\n                } else {\\r\\n                    callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), calldatas);\\r\\n                }\\r\\n\\r\\n                (bool success, bytes memory data) = contractaddress.call{value:callvalue}(callData);\\r\\n                require(success);\\r\\n\\r\\n                uint  price = abi.decode(data, (uint));\\r\\n                prices[i] = price;\\r\\n\\r\\n                // norming price\\r\\n                if (_maximumDecimals != _oracleData[i].decimals)\\r\\n                {\\r\\n                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\\r\\n                }\\r\\n\\r\\n                if (_assetType == 1)\\r\\n                {\\r\\n                    prices[i] = prices[i] * _oracleData[i].weight;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory sorted = sort(prices);\\r\\n\\r\\n        /// for single assets return median\\r\\n        if (_assetType == 0)\\r\\n        {\\r\\n            uint modulo = sorted.length % 2;\\r\\n\\r\\n            // uneven so we can take the middle\\r\\n            if (modulo == 1)\\r\\n            {\\r\\n                uint sizer = (sorted.length + 1) / 2;\\r\\n\\r\\n                _latestobservedprice = sorted[sizer-1];\\r\\n                _latestobservedtime = block.timestamp;\\r\\n                return sorted[sizer-1];\\r\\n            }\\r\\n            // take average of the 2 most inner numbers\\r\\n            else\\r\\n            {\\r\\n                uint size1 = (sorted.length) / 2;\\r\\n                uint size2 = size1 + 1;\\r\\n\\r\\n                uint arrsize1 = sorted[size1-1];\\r\\n                uint arrsize2 = sorted[size2-1];\\r\\n\\r\\n                uint[] memory sortedmin = new uint[](2);\\r\\n                sortedmin[0] = arrsize1;\\r\\n                sortedmin[1] = arrsize2;\\r\\n\\r\\n                _latestobservedprice = getAverage(sortedmin);\\r\\n                _latestobservedtime = block.timestamp;\\r\\n                return getAverage(sortedmin);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        /// else return avarage for arb assets\\r\\n        _latestobservedprice = getAverage(sorted);\\r\\n        _latestobservedtime = block.timestamp;\\r\\n\\r\\n        return getAverage(sorted);\\r\\n    }\\r\\n\\r\\n    ///\\r\\n    /// ERC20 specific functions\\r\\n    ///\\r\\n\\r\\n    /**\\r\\n    * fallback function for collection funds\\r\\n    */\\r\\n    fallback() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-totalSupply}.\\r\\n    */\\r\\n    function totalSupply() public override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-balanceOf}. Uses burn abstraction for balance updates without gas and universally.\\r\\n    */\\r\\n    function balanceOf(address account) public override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-transfer}.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `recipient` cannot be the zero address.\\r\\n    * - the caller must have a balance of at least `amount`.\\r\\n    */\\r\\n    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\r\\n        uint256 amount = rawAmount;\\r\\n        _transfer(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n    public\\r\\n    override\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero ress.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 rawAmount) external override returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint256 spenderAllowance = _allowances[src][spender];\\r\\n        uint256 amount = rawAmount;\\r\\n\\r\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\r\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"CONJURE::transferFrom: transfer amount exceeds spender allowance\\\");\\r\\n            _allowances[src][spender] = newAllowance;\\r\\n        }\\r\\n\\r\\n        _transfer(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    // ========== EVENTS ==========\\r\\n    event NewOwner(address oldOwner, address newOwner);\\r\\n    event FeeChanged(uint8 oldFee, uint8 newFee);\\r\\n    event Issued(address indexed account, uint value);\\r\\n    event Burned(address indexed account, uint value);\\r\\n}\\r\\n\\r\\ncontract ConjureFactory {\\r\\n    event NewConjureContract(address deployed);\\r\\n    event FactoryOwnerChanged(address newowner);\\r\\n    address payable public factoryOwner;\\r\\n\\r\\n    constructor() public {\\r\\n        factoryOwner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getFactoryOwner() public view returns (address payable)\\r\\n    {\\r\\n        return factoryOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets anyone mint a new CONJURE contract\\r\\n     */\\r\\n    function ConjureMint(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address payable owner_,\\r\\n        address uniswapv2oracle_,\\r\\n        address collateralfactory_\\r\\n    ) public returns(address) {\\r\\n        Conjure newContract = new Conjure(\\r\\n            name_,\\r\\n            symbol_,\\r\\n            owner_,\\r\\n            address(this),\\r\\n            uniswapv2oracle_,\\r\\n            collateralfactory_\\r\\n        );\\r\\n        emit NewConjureContract(address(newContract));\\r\\n        return address(newContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lets the Factory Owner change the current owner\\r\\n     */\\r\\n    function newFactoryOwner(address payable newOwner) public {\\r\\n        require(msg.sender == factoryOwner);\\r\\n        factoryOwner = newOwner;\\r\\n        emit FactoryOwnerChanged(factoryOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface UniswapV2OracleInterface {\\r\\n    function computeAverageTokenPrice(\\r\\n        address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\\r\\n    ) external view returns (FixedPoint.uq112x112 memory);\\r\\n\\r\\n    function computeAverageEthPrice(\\r\\n        address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\\r\\n    ) external view returns (FixedPoint.uq112x112 memory);\\r\\n\\r\\n    function updatePrice(address token) external returns (bool);\\r\\n\\r\\n    function canUpdatePrice(address token) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IEtherCollateralFactory {\\r\\n    function EtherCollateralMint(address payable asset_, address owner_, address factoryaddress_, uint256 mintingfeerate_) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\n/************************************************************************************************\\r\\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\\r\\n\\r\\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\\r\\n\\r\\nModifications:\\r\\n- Removed `sqrt` function\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\r\\n    uint private constant Q224 = Q112 << RESOLUTION;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        return uq112x112(uint224(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // encodes a uint144 as a UQ144x112\\r\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\r\\n        return uq144x112(uint256(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112(self._x / uint224(x));\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\r\\n    // reverts on overflow\\r\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\r\\n        uint z;\\r\\n        require(\\r\\n            y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\\r\\n            \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\r\\n        );\\r\\n        return uq144x112(z);\\r\\n    }\\r\\n\\r\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\r\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\r\\n        return uint144(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // take the reciprocal of a UQ112x112\\r\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\r\\n        return uq112x112(uint224(Q224 / self._x));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"FactoryOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"name\":\"NewConjureContract\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapv2oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralfactory_\",\"type\":\"address\"}],\"name\":\"ConjureMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newFactoryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConjureFactory","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}