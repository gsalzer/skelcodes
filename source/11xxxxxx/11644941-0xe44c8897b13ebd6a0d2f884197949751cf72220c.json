{"status":"1","message":"OK","result":[{"SourceCode":"{\"BlackList.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\n\\r\\n/**\\r\\n* @title Contract to process black list that can not transfer token\\r\\n*/\\r\\nabstract contract BlackList is Context{\\r\\n    /**\\r\\n    * @dev Mapping to check whether `address` is in blacklist or not\\r\\n     */\\r\\n    mapping (address =\\u003e bool) internal _isBlackListed;\\r\\n\\r\\n    /**\\r\\n    * @dev Check whether `account` is in blacklist or not\\r\\n    * @param account account to check\\r\\n    * @return _isInBlackList internal function\\r\\n    */\\r\\n    function isInBlackList(address account) external view returns (bool) {\\r\\n        return _isInBlackList(account);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev Add new account to black list by marked is in black list as true \\r\\n    */\\r\\n    function addToBlackList(address account) external onlyOwner {\\r\\n        _isBlackListed[account] = true;\\r\\n        emit AddedToBlackList(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Remove account from black list by marked is in black list as false \\r\\n    */\\r\\n    function removeFromBlackList (address account) external onlyOwner {\\r\\n        _isBlackListed[account] = false;\\r\\n        emit RemovedFromBlackList(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Check whether `account` is in blacklist or not\\r\\n    * @param account account to check\\r\\n    * @return If in black list =\\u003e return true; else return false\\r\\n    */\\r\\n    function _isInBlackList(address account) internal view returns(bool){\\r\\n        return _isBlackListed[account];\\r\\n    }\\r\\n\\r\\n    //EVENTS\\r\\n    event AddedToBlackList(address account);\\r\\n    event RemovedFromBlackList(address account);\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\"},\"BNUToken.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./ERC20Token.sol\\u0027;\\r\\nimport \\u0027./BlackList.sol\\u0027;\\r\\n\\r\\n/**\\r\\n* @title Token that represents the stake in the ByteNext dividend fund\\r\\n*/ \\r\\ncontract BNUToken is ERC20Token, BlackList{\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    uint internal _eightteenDecimalValue = 1000000000000000000;\\r\\n    \\r\\n    //TOKEN ALLOCATIONS\\r\\n    address public _foundationalReserveAddress;\\r\\n    address public _rewardsPoolAddress;\\r\\n    address public _bnuStoreContractAddress;\\r\\n\\r\\n    /**\\r\\n     * @dev Generate token information\\r\\n     * 1. Generate token information\\r\\n     * 2. Transfer token for funds\\r\\n     */\\r\\n    constructor () {\\r\\n        name = \\u0027ByteNext\\u0027;\\r\\n        symbol = \\u0027BNU\\u0027;\\r\\n        decimals = 18;\\r\\n        _totalSupply = uint(200000000).mul(_eightteenDecimalValue);\\r\\n        \\r\\n        _foundationalReserveAddress = 0x219c2BF4C8DF6E05131A0f883b333ECd45bC64f6;\\r\\n        _rewardsPoolAddress = 0x2E366a202e825606eb9158341D3856061BF26e62;\\r\\n        _bnuStoreContractAddress = 0x4954e0062E0A7668A2FE3df924cD20E6440a7b77;\\r\\n        \\r\\n        //Transfer token to funds\\r\\n        _balances[owner] = _totalSupply;\\r\\n        _transfer(owner, _foundationalReserveAddress, uint(16000000).mul(_eightteenDecimalValue));          //16M\\r\\n        _transfer(owner, _rewardsPoolAddress, uint(28439041).mul(_eightteenDecimalValue));                  //28,439,041\\r\\n        _transfer(owner, _bnuStoreContractAddress, uint(155560959).mul(_eightteenDecimalValue));            //155,560,959 = 51,250,000 + 57,810,959 + 46,500,000\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Transfer token `_value` to `_to`\\r\\n    * \\r\\n    * Requirements\\r\\n    *   Sender and receipent is not in black list\\r\\n     */\\r\\n    function transfer(address _to, uint _value) public override virtual contractActive returns(bool){\\r\\n        require(!_isInBlackList(_msgSender()) \\u0026\\u0026 !_isInBlackList(_to), \\\"Black account\\\");\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Transfer token `amount` from `sender` to `recipient`\\r\\n    * \\r\\n    * Requirements\\r\\n    *   Sender and receipent is not in black list\\r\\n    */\\r\\n    function transferFrom(address sender, address recipient, uint amount) public virtual override contractActive returns(bool) {\\r\\n        require(!_isInBlackList(sender) \\u0026\\u0026 !_isInBlackList(recipient), \\\"Blocked account\\\");\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\n/**\\r\\n * @title Context\\r\\n * @dev Provide context functions\\r\\n */\\r\\nabstract contract Context {\\r\\n    address public owner;            //Contract owner address\\r\\n    bool public isContractActive;           //Make sure this contract can be used or not\\r\\n    \\r\\n    /**\\r\\n     * Make sure the sender is the owner of contract\\r\\n     */ \\r\\n    modifier onlyOwner{\\r\\n        require(_msgSender() == owner, \\\"Only owner can process\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * Make sure the contract is active to execute\\r\\n    */ \\r\\n    modifier contractActive{\\r\\n        require(isContractActive, \\\"This contract is deactived\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Constructor\\r\\n    * \\r\\n    * Implementations:\\r\\n    *   1. Set the owner of contract\\r\\n    *   2. Set contract is active\\r\\n    */\\r\\n    constructor(){\\r\\n       owner = _msgSender();           //Set owner address when contract is created\\r\\n       isContractActive = true;        //Contract is active when it is created\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get sender address\\r\\n     */ \\r\\n    function _msgSender() internal view returns(address){\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get current time in unix timestamp\\r\\n     */\\r\\n    function _now() internal view returns(uint){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Update contract status to make sure this contract can be executed or not\\r\\n     */\\r\\n    function setContractStatus(bool status) external onlyOwner{\\r\\n        require(isContractActive != status,\\\"The current contract\\u0027s status is the same with updating status\\\");\\r\\n        isContractActive = status;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Change contract\\u0027s owner\\r\\n    * @return If success return true; else return false\\r\\n    * \\r\\n    * Requirements:\\r\\n    *   1. Only current owner can execute\\r\\n    *   2. `newOwner` is not zero address\\r\\n    *   3. `newOwner` is not current owner\\r\\n    * \\r\\n    * Implementations:\\r\\n    *   1. Validate requirements\\r\\n    *   2. Set current owner is newOwner\\r\\n    *   3. Emit Events\\r\\n    *   4. Return result\\r\\n    */\\r\\n    function setOwner(address newOwner) external onlyOwner returns(bool){\\r\\n        require(newOwner != address(0), \\\"New owner is zero address\\\");\\r\\n        require(newOwner != owner, \\\"New owner is current owner\\\");\\r\\n\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerChanged(owner);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Event that notifies contract\\u0027s owner has been changed to `newOwner` \\r\\n    */\\r\\n    event OwnerChanged(address newOwner);\\r\\n}\\r\\n\\r\\n//SPDX-License-Identifier: MIT\"},\"ERC20Token.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\n\\r\\ninterface IERC20Token {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n\\r\\n    /** \\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function burn(address account, uint amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\\r\\n\\r\\nabstract contract ERC20Token is IERC20Token, Context {\\r\\n    using SafeMath for uint;\\r\\n    \\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) internal _allowances;\\r\\n    mapping (address =\\u003e uint) internal _balances;\\r\\n    uint internal _totalSupply;\\r\\n    \\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    \\r\\n    function totalSupply() external view override virtual returns (uint){\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) external override virtual view returns (uint){\\r\\n        return _balances[account];\\r\\n    }\\r\\n    \\r\\n    function transfer(address _to, uint _value) public override virtual contractActive returns(bool){\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint amount) public virtual contractActive override returns(bool) {\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) public virtual override returns(bool) {\\r\\n        return _approve(_msgSender(), spender, value);\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public virtual view override returns (uint) {\\r\\n        return _allowance(owner, spender);\\r\\n    }\\r\\n\\r\\n    function burn(address account, uint amount) external virtual override onlyOwner {\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw ERC-20 token of this contract\\r\\n     */ \\r\\n    function withdrawToken(address tokenAddress) external onlyOwner contractActive{\\r\\n        require(tokenAddress != address(0), \\\"Contract address is zero address\\\");\\r\\n        require(tokenAddress != address(this), \\\"Can not transfer self token\\\");\\r\\n        \\r\\n        IERC20Token tokenContract = IERC20Token(tokenAddress);\\r\\n        uint tokenBalance = tokenContract.balanceOf(address(this));\\r\\n        require(tokenBalance \\u003e 0, \\\"Balance is zero\\\");\\r\\n        \\r\\n        tokenContract.transfer(owner, tokenBalance);\\r\\n    }\\r\\n    \\r\\n    function _transfer(address sender, address recipient, uint amount) internal {\\r\\n        require(amount \\u003e 0, \\\"Transfer amount should be greater than zero\\\");\\r\\n        require(_balances[sender] \\u003e= amount);\\r\\n        \\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n    \\r\\n    function _transferFrom(address sender, address recipient, uint amount) internal returns(bool) {\\r\\n        require(_allowance(sender, _msgSender()) \\u003e= amount, \\\"Allowance is not enough\\\");\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender,_msgSender(),_allowance(sender, _msgSender()).sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _approve(address owner, address spender, uint value) internal returns (bool){\\r\\n        require(value \\u003e= 0,\\\"Approval value can not be negative\\\");\\r\\n        _allowances[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _allowance(address owner, address spender) internal view returns (uint) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint amount) internal virtual returns(bool){\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.7.1;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint a, uint b) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint a, uint b) internal pure returns (uint) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint a, uint b) internal pure returns (uint) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint a, uint b) internal pure returns (uint) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n//SPDX-License-Identifier: MIT\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bnuStoreContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_foundationalReserveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BNUToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b737f6ef42601005c26e47f0c9fcdda0e6ac852491a773c0985574bace27c92a"}]}