{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity = 0.7.0;\r\n\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nlibrary LiquifiDAO {\r\n    enum ProposalStatus { \r\n        IN_PROGRESS,\r\n        APPROVED,\r\n        DECLINED,\r\n        VETO\r\n    }\r\n}\r\n\r\ninterface Minter is ERC20 {\r\n    event Mint(address indexed to, uint256 value, uint indexed period, uint userEthLocked, uint totalEthLocked);\r\n\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function mint(address to, uint period, uint128 userEthLocked, uint totalEthLocked) external returns (uint amount);\r\n    function userTokensToClaim(address user) external view returns (uint amount);\r\n    function periodTokens(uint period) external pure returns (uint128);\r\n    function periodDecayK() external pure returns (uint decayK);\r\n    function initialPeriodTokens() external pure returns (uint128);\r\n}\r\n\r\ninterface PoolFactory {\r\n    event PoolCreatedEvent(address tokenA, address tokenB, bool aIsWETH, address indexed pool);\r\n\r\n    function getPool(address tokenA, address tokenB) external returns (address);\r\n    function findPool(address tokenA, address tokenB) external view returns (address);\r\n    function pools(uint poolIndex) external view returns (address pool);\r\n    function getPoolCount() external view returns (uint);\r\n}\r\n\r\ninterface WETH is ERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface GovernanceRouter {\r\n    event GovernanceApplied(uint packedGovernance);\r\n    event GovernorChanged(address covernor);\r\n    event ProtocolFeeReceiverChanged(address protocolFeeReceiver);\r\n    event PoolFactoryChanged(address poolFactory);\r\n\r\n    function schedule() external returns(uint timeZero, uint miningPeriod);\r\n    function creator() external returns(address);\r\n    function weth() external returns(WETH);\r\n\r\n    function activityMeter() external returns(ActivityMeter);\r\n    function setActivityMeter(ActivityMeter _activityMeter) external;\r\n\r\n    function minter() external returns(Minter);\r\n    function setMinter(Minter _minter) external;\r\n\r\n    function poolFactory() external returns(PoolFactory);\r\n    function setPoolFactory(PoolFactory _poolFactory) external;\r\n\r\n    function protocolFeeReceiver() external returns(address);\r\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external;\r\n\r\n    function governance() external view returns (address _governor, uint96 _defaultGovernancePacked);\r\n    function setGovernor(address _governor) external;\r\n    function applyGovernance(uint96 _defaultGovernancePacked) external;\r\n}\r\n\r\ninterface ActivityMeter {\r\n    event Deposit(address indexed user, address indexed pool, uint amount);\r\n    event Withdraw(address indexed user, address indexed pool, uint amount);\r\n\r\n    function actualizeUserPool(uint endPeriod, address user, address pool) external returns (uint ethLocked, uint mintedAmount) ;  \r\n    function deposit(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function withdraw(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function actualizeUserPools() external returns (uint ethLocked, uint mintedAmount);\r\n    function liquidityEthPriceChanged(uint effectiveTime, uint availableBalanceEth, uint totalSupply) external;\r\n    function effectivePeriod(uint effectiveTime) external view returns (uint periodNumber, uint quantaElapsed);\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function userEthLocked(address user) external view returns (uint ethLockedPeriod, uint ethLocked, uint totalEthLocked);\r\n    \r\n    function ethLockedHistory(uint period) external view returns (uint ethLockedTotal);\r\n\r\n    function poolsPriceHistory(uint period, address pool) external view returns (\r\n        uint cumulativeEthPrice,\r\n        uint240 lastEthPrice,\r\n        uint16 timeRef\r\n    );\r\n\r\n    function userPoolsSummaries(address user, address pool) external view returns (\r\n        uint144 cumulativeAmountLocked,\r\n        uint16 amountChangeQuantaElapsed,\r\n\r\n        uint128 lastAmountLocked,\r\n        uint16 firstPeriod,\r\n        uint16 lastPriceRecord,\r\n        uint16 earnedForPeriod\r\n    );\r\n\r\n    function userPools(address user, uint poolIndex) external view returns (address pool);\r\n    function userPoolsLength(address user) external view returns (uint length);\r\n\r\n    function userSummaries(address user) external view returns (\r\n        uint128 ethLocked,\r\n        uint16 ethLockedPeriod,\r\n        uint16 firstPeriod\r\n    );\r\n    \r\n    function poolSummaries(address pool) external view returns (\r\n        uint16 lastPriceRecord\r\n    );\r\n    \r\n    function users(uint userIndex) external view returns (address user);\r\n    function usersLength() external view returns (uint);\r\n}\r\n\r\ninterface LiquidityPool is ERC20 {\r\n    enum MintReason { DEPOSIT, PROTOCOL_FEE, INITIAL_LIQUIDITY }\r\n    event Mint(address indexed to, uint256 value, MintReason reason);\r\n\r\n    // ORDER_CLOSED reasons are all odd, other reasons are even\r\n    // it allows to check ORDER_CLOSED reasons as (reason & ORDER_CLOSED) != 0\r\n    enum BreakReason { \r\n        NONE,        ORDER_CLOSED, \r\n        ORDER_ADDED, ORDER_CLOSED_BY_STOP_LOSS, \r\n        SWAP,        ORDER_CLOSED_BY_REQUEST,\r\n        MINT,        ORDER_CLOSED_BY_HISTORY_LIMIT,\r\n        BURN,        ORDER_CLOSED_BY_GOVERNOR\r\n    }\r\n\r\n    function poolBalances() external view returns (\r\n        uint balanceALocked,\r\n        uint poolFlowSpeedA, // flow speed: (amountAIn * 2^32)/second\r\n\r\n        uint balanceBLocked,\r\n        uint poolFlowSpeedB, // flow speed: (amountBIn * 2^32)/second\r\n\r\n        uint totalBalanceA,\r\n        uint totalBalanceB,\r\n\r\n        uint delayedSwapsIncome,\r\n        uint rootKLastTotalSupply\r\n    );\r\n\r\n    function governanceRouter() external returns (GovernanceRouter);\r\n    function minimumLiquidity() external returns (uint);\r\n    function aIsWETH() external returns (bool);\r\n\r\n    function mint(address to) external returns (uint liquidityOut);\r\n    function burn(address to, bool extractETH) external returns (uint amountAOut, uint amountBOut);\r\n    function swap(address to, bool extractETH, uint amountAOut, uint amountBOut, bytes calldata externalData) external returns (uint amountAIn, uint amountBIn);\r\n\r\n    function tokenA() external view returns (ERC20);\r\n    function tokenB() external view returns (ERC20);\r\n}\r\n\r\ninterface DelayedExchangePool is LiquidityPool {\r\n    event FlowBreakEvent( \r\n        address sender, \r\n        // total balance contains 128 bit of totalBalanceA and 128 bit of totalBalanceB\r\n        uint totalBalance, \r\n        // contains 128 bits of rootKLast and 128 bits of totalSupply\r\n        uint rootKLastTotalSupply, \r\n        uint indexed orderId,\r\n        // breakHash is computed over all fields below\r\n        \r\n        bytes32 lastBreakHash,\r\n        // availableBalance consists of 128 bits of availableBalanceA and 128 bits of availableBalanceB\r\n        uint availableBalance, \r\n        // flowSpeed consists of 144 bits of poolFlowSpeedA and 112 higher bits of poolFlowSpeedB\r\n        uint flowSpeed,\r\n        // others consists of 32 lower bits of poolFlowSpeedB, 16 bit of notFee, 64 bit of time, 64 bit of orderId, 76 higher bits of packed and 4 bit of reason (BreakReason)\r\n        uint others      \r\n    );\r\n\r\n    event OrderClaimedEvent(uint indexed orderId, address to);\r\n    event OperatingInInvalidState(uint location, uint invalidStateReason);\r\n    event GovernanceApplied(uint packedGovernance);\r\n    \r\n    function addOrder(\r\n        address owner, uint orderFlags, uint prevByStopLoss, uint prevByTimeout, \r\n        uint stopLossAmount, uint period\r\n    ) external returns (uint id);\r\n\r\n    // availableBalance contains 128 bits of availableBalanceA and 128 bits of availableBalanceB\r\n    // delayedSwapsIncome contains 128 bits of delayedSwapsIncomeA and 128 bits of delayedSwapsIncomeB\r\n    function processDelayedOrders() external returns (uint availableBalance, uint delayedSwapsIncome, uint packed);\r\n\r\n    function claimOrder (\r\n        bytes32 previousBreakHash,\r\n        // see LiquifyPoolRegister.claimOrder for breaks list details\r\n        uint[] calldata breaksHistory\r\n    ) external returns (address owner, uint amountAOut, uint amountBOut);\r\n\r\n    function applyGovernance(uint packedGovernanceFields) external;\r\n    function sync() external;\r\n    function closeOrder(uint id) external;\r\n\r\n    function poolQueue() external view returns (\r\n        uint firstByTokenAStopLoss, uint lastByTokenAStopLoss, // linked list of orders sorted by (amountAIn/stopLossAmount) ascending\r\n        uint firstByTokenBStopLoss, uint lastByTokenBStopLoss, // linked list of orders sorted by (amountBIn/stopLossAmount) ascending\r\n    \r\n        uint firstByTimeout, uint lastByTimeout // linked list of orders sorted by timeouts ascending\r\n    );\r\n\r\n    function lastBreakHash() external view returns (bytes32);\r\n\r\n    function poolState() external view returns (\r\n        bytes32 _prevBlockBreakHash,\r\n        uint packed, // see Liquifi.PoolState for details\r\n        uint notFee,\r\n\r\n        uint lastBalanceUpdateTime,\r\n        uint nextBreakTime,\r\n        uint maxHistory,\r\n        uint ordersToClaimCount,\r\n        uint breaksCount\r\n    );\r\n\r\n    function findOrder(uint orderId) external view returns (        \r\n        uint nextByTimeout, uint prevByTimeout,\r\n        uint nextByStopLoss, uint prevByStopLoss,\r\n        \r\n        uint stopLossAmount,\r\n        uint amountIn,\r\n        uint period,\r\n        \r\n        address owner,\r\n        uint timeout,\r\n        uint flags\r\n    );\r\n}\r\n\r\nlibrary Liquifi {\r\n    enum Flag { \r\n        // padding 8 bits\r\n        PAD1, PAD2, PAD3, PAD4, PAD5, PAD6, PAD7, PAD8,\r\n        // transient flags\r\n        HASH_DIRTY, BALANCE_A_DIRTY, BALANCE_B_DIRTY, TOTALS_DIRTY, QUEUE_STOPLOSS_DIRTY, QUEUE_TIMEOUT_DIRTY, MUTEX, INVALID_STATE,\r\n        TOTAL_SUPPLY_DIRTY, SWAPS_INCOME_DIRTY, RESERVED1, RESERVED2,\r\n        // persistent flags set by governance\r\n        POOL_LOCKED, ARBITRAGEUR_FULL_FEE, GOVERNANCE_OVERRIDEN\r\n    }\r\n\r\n    struct PoolBalances { // optimized for storage\r\n        // saved on BALANCE_A_DIRTY in exit()\r\n        uint112 balanceALocked;\r\n        uint144 poolFlowSpeedA; // flow speed: (amountAIn * 2^32)/second\r\n\r\n        // saved on BALANCE_B_DIRTY in exit()\r\n        uint112 balanceBLocked;\r\n        uint144 poolFlowSpeedB; // flow speed: (amountBIn * 2^32)/second\r\n        \r\n        // saved on TOTALS_DIRTY in exit()\r\n        uint128 totalBalanceA;\r\n        uint128 totalBalanceB;\r\n\r\n        // saved on SWAPS_INCOME_DIRTY in exit()\r\n        // contains 128 bits of delayedSwapsIncomeA and 128 bits of delayedSwapsIncomeB\r\n        uint delayedSwapsIncome;\r\n        \r\n        // saved on TOTAL_SUPPLY_DIRTY in exit()\r\n        // contains 128 bits of rootKLast and 128 bits of totalSupply\r\n        // rootKLast = sqrt(availableBalanceA * availableBalanceB), as of immediately after the most recent liquidity event\r\n        uint rootKLastTotalSupply;\r\n    }\r\n\r\n    struct PoolState { // optimized for storage\r\n        // saved on HASH_DIRTY in exit()\r\n        bytes32 lastBreakHash;\r\n\r\n        // saved on QUEUE_STOPLOSS_DIRTY in exit()\r\n        uint64 firstByTokenAStopLoss; uint64 lastByTokenAStopLoss; // linked list of orders sorted by (amountAIn/stopLossAmount) ascending\r\n        uint64 firstByTokenBStopLoss; uint64 lastByTokenBStopLoss; // linked list of orders sorted by (amountBIn/stopLossAmount) ascending\r\n\r\n        // saved on QUEUE_TIMEOUT_DIRTY in exit()\r\n        uint64 firstByTimeout; uint64 lastByTimeout; // linked list of orders sorted by timeouts ascending\r\n        // this field contains\r\n        // 8 bits of instantSwapFee\r\n        // 8 bits of desiredOrdersFee\r\n        // 8 bits of protocolFee\r\n        // 32 bits of maxPeriod\r\n        // 16 bits of desiredMaxHistory\r\n        // 4 bits of persistent flags\r\n        // 12 bits of transient flags\r\n        // 8 bits of transient invalidStateReason (ErrorArg)\r\n        // Packing reduces stack depth and helps in governance\r\n        uint96 packed; // not saved in exit(), saved only by governance\r\n        uint16 notFee; // not saved in exit()\r\n\r\n        // This word is always saved in exit()\r\n        uint64 lastBalanceUpdateTime;\r\n        uint64 nextBreakTime;\r\n        uint32 maxHistory;\r\n        uint32 ordersToClaimCount;\r\n        uint64 breaksCount; // counter with increments of 2. 1st bit is used as mutex flag\r\n    }\r\n\r\n    enum OrderFlag { \r\n        NONE, IS_TOKEN_A, EXTRACT_ETH\r\n    }\r\n\r\n    struct Order { // optimized for storage, fits into 3 words\r\n        // Also closing hash is saved in this word on order close.\r\n        // Closing hash always has last bit = 1, I.e. prevByStopLoss & 1 == 1\r\n        uint64 nextByTimeout; uint64 prevByTimeout;\r\n        uint64 nextByStopLoss; uint64 prevByStopLoss;\r\n        \r\n        // mostly used together\r\n        uint112 stopLossAmount;\r\n        uint112 amountIn;\r\n        uint32 period;\r\n\r\n        address owner;\r\n        uint64 timeout;\r\n        uint8 flags;\r\n    }\r\n\r\n    struct OrderClaim { //in-memory only\r\n        uint amountOut;\r\n        uint orderFlowSpeed;\r\n        uint orderId;\r\n        uint flags;\r\n        uint closeReason;\r\n        uint previousAvailableBalance;\r\n        uint previousFlowSpeed;\r\n        uint previousOthers;\r\n    }\r\n\r\n    enum Error { \r\n        A_MUL_OVERFLOW, \r\n        B_ADD_OVERFLOW, \r\n        C_TOO_BIG_TIME_VALUE, \r\n        D_TOO_BIG_PERIOD_VALUE,\r\n        E_TOO_BIG_AMOUNT_VALUE,\r\n        F_ZERO_AMOUNT_VALUE,\r\n        G_ZERO_PERIOD_VALUE,\r\n        H_BALANCE_AFTER_BREAK,\r\n        I_BALANCE_OF_SAVED_UPD,\r\n        J_INVALID_POOL_STATE,\r\n        K_TOO_BIG_TOTAL_VALUE,\r\n        L_INSUFFICIENT_LIQUIDITY,\r\n        M_EMPTY_LIST,\r\n        N_BAD_LENGTH,\r\n        O_HASH_MISMATCH,\r\n        P_ORDER_NOT_CLOSED,\r\n        Q_ORDER_NOT_ADDED,\r\n        R_INCOMPLETE_HISTORY,\r\n        S_REENTRANCE_NOT_SUPPORTED,\r\n        T_INVALID_TOKENS_PAIR,\r\n        U_TOKEN_TRANSFER_FAILED,\r\n        V_ORDER_NOT_EXIST,\r\n        W_DIV_BY_ZERO,\r\n        X_ORDER_ALREADY_CLOSED,\r\n        Y_UNAUTHORIZED_SENDER,\r\n        Z_TOO_BIG_FLOW_SPEED_VALUE\r\n    }\r\n\r\n    enum ErrorArg {\r\n        A_NONE,\r\n        B_IN_AMOUNT,\r\n        C_OUT_AMOUNT,\r\n        D_STOP_LOSS_AMOUNT,\r\n        E_IN_ADD_ORDER,\r\n        F_IN_SWAP,\r\n        G_IN_COMPUTE_AVAILABLE_BALANCE,\r\n        H_IN_BREAKS_HISTORY,\r\n        I_USER_DATA,\r\n        J_IN_ORDER,\r\n        K_IN_MINT,\r\n        L_IN_BURN,\r\n        M_IN_CLAIM_ORDER,\r\n        N_IN_PROCESS_DELAYED_ORDERS,\r\n        O_TOKEN_A,\r\n        P_TOKEN_B,\r\n        Q_TOKEN_ETH,\r\n        R_IN_CLOSE_ORDER,\r\n        S_BY_GOVERNANCE,\r\n        T_FEE_CHANGED_WITH_ORDERS_OPEN,\r\n        U_BAD_EXCHANGE_RATE,\r\n        V_INSUFFICIENT_TOTAL_BALANCE,\r\n        W_POOL_LOCKED,\r\n        X_TOTAL_SUPPLY\r\n    }\r\n\r\n    // this methods allows to pass some information in 'require' calls without storing strings in contract bytecode \r\n    // messages will be like \"FAIL https://err.liquifi.org/XY\" where X and Y are error and errorArg from respective enums\r\n    function _require(bool condition, Error error, ErrorArg errorArg) internal pure {\r\n        if (condition) return;\r\n        { // new scope to not waste message memory if condition is satisfied \r\n            // FAIL https://err.liquifi.org/__\r\n            bytes memory message = \"\\x46\\x41\\x49\\x4c\\x20\\x68\\x74\\x74\\x70\\x73\\x3a\\x2f\\x2f\\x65\\x72\\x72\\x2e\\x6c\\x69\\x71\\x75\\x69\\x66\\x69\\x2e\\x6f\\x72\\x67\\x2f\\x5f\\x5f\";\r\n            \r\n            message[29] = bytes1(65 + uint8(error));\r\n            message[30] = bytes1(65 + uint8(errorArg));\r\n            require(false, string(message));\r\n        }\r\n    }\r\n\r\n    uint64 constant maxTime = ~uint64(0);\r\n\r\n    function trimTime(uint time) internal pure returns (uint64 trimmedTime) {\r\n        Liquifi._require(time <= maxTime, Liquifi.Error.C_TOO_BIG_TIME_VALUE, Liquifi.ErrorArg.A_NONE);\r\n        return uint64(time);\r\n    }\r\n\r\n    function trimPeriod(uint period, Liquifi.ErrorArg periodType) internal pure returns (uint32 trimmedPeriod) {\r\n        Liquifi._require(period <= ~uint32(0), Liquifi.Error.D_TOO_BIG_PERIOD_VALUE, periodType);\r\n        return uint32(period);\r\n    }\r\n\r\n    function trimAmount(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint112 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint112(0), Liquifi.Error.E_TOO_BIG_AMOUNT_VALUE, amountType);\r\n        return uint112(amount);\r\n    }\r\n\r\n\r\n    function trimTotal(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint128 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint128(0), Liquifi.Error.K_TOO_BIG_TOTAL_VALUE, amountType);\r\n        return uint128(amount);\r\n    }\r\n\r\n    function trimFlowSpeed(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint144 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint144(0), Liquifi.Error.Z_TOO_BIG_FLOW_SPEED_VALUE, amountType);\r\n        return uint144(amount);\r\n    }\r\n\r\n    function checkFlag(PoolState memory _state, Flag flag) internal pure returns(bool) {\r\n        return _state.packed & uint96(1 << uint(flag)) != 0;\r\n    }\r\n\r\n    function setFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed | uint96(1 << uint(flag));\r\n    }\r\n\r\n    function clearFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed & ~uint96(1 << uint(flag));\r\n    }\r\n\r\n    function unpackGovernance(PoolState memory _state) internal pure returns(\r\n        uint instantSwapFee, uint desiredOrdersFee, uint protocolFee, uint maxPeriod, uint desiredMaxHistory\r\n    ) {\r\n        desiredMaxHistory = uint16(_state.packed >> 24);\r\n        maxPeriod = uint32(_state.packed >> 40);\r\n        protocolFee = uint8(_state.packed >> 72);\r\n        desiredOrdersFee = uint8(_state.packed >> 80);\r\n        instantSwapFee = uint8(_state.packed >> 88);\r\n    }\r\n\r\n    function setInvalidState(PoolState memory _state, Liquifi.ErrorArg reason) internal pure {\r\n        setFlag(_state, Liquifi.Flag.INVALID_STATE);\r\n        uint oldReason = uint8(_state.packed);\r\n        if (uint(reason) > oldReason) {\r\n            _state.packed = _state.packed & ~uint96(~uint8(0)) | uint96(reason);\r\n        }\r\n    }\r\n\r\n    function checkInvalidState(PoolState memory _state) internal pure returns (Liquifi.ErrorArg reason) {\r\n        reason = Liquifi.ErrorArg.A_NONE;\r\n        if (checkFlag(_state, Liquifi.Flag.INVALID_STATE)) {\r\n            return Liquifi.ErrorArg(uint8(_state.packed));\r\n        }\r\n    }\r\n\r\n    function isTokenAIn(uint orderFlags) internal pure returns (bool) {\r\n        return orderFlags & uint(Liquifi.OrderFlag.IS_TOKEN_A) != 0;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    \r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x > y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint result) {\r\n        uint y = x;\r\n        result = (x + 1) / 2;\r\n        while (result < y) {\r\n            y = result;\r\n            result = (x / result + result) / 2;\r\n        }\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require(y == 0 || (z = x * y) / y == x, Liquifi.Error.A_MUL_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function mulWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if (y != 0 && ((z = x * y) / y != x || z > maxValue)) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    function subWithClip(uint x, uint y) internal pure returns (uint z) {\r\n        if ((z = x - y) > x) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require((z = x + y) >= x, Liquifi.Error.B_ADD_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function addWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if ((z = x + y) < x || z > maxValue) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    // function div(uint x, uint y, Liquifi.ErrorArg scope) internal pure returns (uint z) {\r\n    //     Liquifi._require(y != 0, Liquifi.Error.R_DIV_BY_ZERO, scope);\r\n    //     z = x / y;\r\n    // }\r\n}\r\n\r\ncontract LiquifiProposal {\r\n    using Math for uint256;\r\n    event ProposalVoted(address user, Vote vote, uint influence);\r\n\r\n    ERC20 public immutable govToken;\r\n    LiquifiInitialGovernor public immutable governor;\r\n\r\n    enum Vote {\r\n        NONE, YES, NO, ABSTAIN, NO_WITH_VETO\r\n    }\r\n\r\n    mapping(address => Vote) public voted;\r\n    // 0 - hasn't voted\r\n    // 1 - voted yes\r\n    // 2 - voted no\r\n    // 3 - voted abstain\r\n    // 4 - voted noWithVeto\r\n\r\n    string public description;\r\n    uint public approvalsInfluence = 0;\r\n    uint public againstInfluence = 0;\r\n    uint public abstainInfluence = 0;\r\n    uint public noWithVetoInfluence = 0;\r\n    \r\n    LiquifiDAO.ProposalStatus public result;\r\n    \r\n    uint public immutable started; //time when proposal was created\r\n    uint public immutable totalInfluence;\r\n    \r\n    uint public immutable option;\r\n    uint public immutable newValue;\r\n    uint public immutable quorum;\r\n    uint public immutable vetoPercentage;\r\n    uint public immutable votingPeriod;\r\n    uint public immutable threshold;\r\n    address public immutable addr;\r\n    address public immutable addr2;\r\n\r\n    constructor(string memory _description, \r\n            uint _totalInfluence, \r\n            address _govToken, \r\n            uint _option, uint _newValue, \r\n            uint _quorum, uint _threshold, uint _vetoPercentage, uint _votingPeriod, \r\n            address _address, address _address2) {\r\n        description = _description;\r\n        started = block.timestamp;\r\n        totalInfluence = _totalInfluence; \r\n        governor = LiquifiInitialGovernor(msg.sender);\r\n        govToken = ERC20(_govToken);\r\n\r\n        option = _option;\r\n        newValue = _newValue;\r\n\r\n        quorum = _quorum;\r\n        threshold = _threshold;\r\n        vetoPercentage = _vetoPercentage;\r\n        votingPeriod = _votingPeriod;\r\n        addr = _address;\r\n        addr2 = _address2;\r\n    }\r\n\r\n    function vote(Vote _vote) public {\r\n        address user = msg.sender;\r\n        uint influence = govToken.balanceOf(user);\r\n        (uint deposited,) = governor.deposits(user);\r\n        influence = influence.add(deposited);\r\n        vote(_vote, influence);\r\n    }\r\n\r\n\r\n    function vote(Vote _vote, uint influence) public {\r\n        address user = msg.sender;\r\n        require(voted[user] == Vote.NONE, \"You have already voted!\");\r\n\r\n        voted[user] = _vote; // prevent reentrance\r\n\r\n        require(influence > 0, \"Proposal.vote: No governance tokens in wallet\");\r\n        governor.proposalVote(user, influence, endTime());\r\n\r\n        if (checkIfEnded() != LiquifiDAO.ProposalStatus.IN_PROGRESS)\r\n            return;\r\n            \r\n        if (_vote == Vote.YES) {\r\n            approvalsInfluence += influence;\r\n        } else if (_vote == Vote.NO) {\r\n            againstInfluence += influence;\r\n        } else if (_vote == Vote.ABSTAIN) {\r\n            abstainInfluence += influence;\r\n        } else if (_vote == Vote.NO_WITH_VETO) {\r\n            noWithVetoInfluence += influence;\r\n            againstInfluence += influence;\r\n        }\r\n        emit ProposalVoted(user, _vote, influence);\r\n    }\r\n\r\n    function endTime() public view returns (uint) {\r\n        return started + 1 hours * votingPeriod;\r\n    }\r\n\r\n    function checkIfEnded() public returns (LiquifiDAO.ProposalStatus) {\r\n        require(result == LiquifiDAO.ProposalStatus.IN_PROGRESS, \"voting completed\");\r\n        \r\n        if (block.timestamp > endTime()) {\r\n            return finalize();\r\n        } else {\r\n            return LiquifiDAO.ProposalStatus.IN_PROGRESS;\r\n        }\r\n    }\r\n\r\n    function finalize() public returns (LiquifiDAO.ProposalStatus) {\r\n        require(block.timestamp > endTime(), \"Proposal: Period hasn't passed\");\r\n\r\n        if ((totalInfluence != 0) \r\n            && (100 * (approvalsInfluence + againstInfluence + abstainInfluence) / totalInfluence < quorum )){\r\n            result = LiquifiDAO.ProposalStatus.DECLINED;\r\n            governor.proposalFinalization(result, 0, 0, address(0), address(0));\r\n            return result;        \r\n        }\r\n\r\n        if ((approvalsInfluence + againstInfluence + abstainInfluence) != 0 &&\r\n            (100 * noWithVetoInfluence / (approvalsInfluence + againstInfluence + abstainInfluence) >= vetoPercentage)) {\r\n            result = LiquifiDAO.ProposalStatus.VETO;\r\n            governor.proposalFinalization(result, 0, 0, address(0), address(0));\r\n        }\r\n        else if ((approvalsInfluence + againstInfluence) != 0 &&\r\n            (100 * approvalsInfluence / (approvalsInfluence + againstInfluence) > threshold)) {\r\n            result = LiquifiDAO.ProposalStatus.APPROVED;\r\n            governor.proposalFinalization(result, option, newValue, addr, addr2);\r\n        }\r\n        else {\r\n            result = LiquifiDAO.ProposalStatus.DECLINED;\r\n            governor.proposalFinalization(result, 0, 0, address(0), address(0));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n//import { Debug } from \"./libraries/Debug.sol\";\r\ncontract LiquifiInitialGovernor {\r\n    using Math for uint256;\r\n\r\n    event EmergencyLock(address sender, address pool);\r\n    event ProposalCreated(address proposal);\r\n    event ProposalFinalized(address proposal, LiquifiDAO.ProposalStatus proposalStatus);\r\n    event DepositWithdrawn(address user, uint amount);\r\n\r\n    struct CreatedProposals{\r\n        uint amountDeposited;\r\n        LiquifiDAO.ProposalStatus status;\r\n        address creator;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint amount;\r\n        uint unfreezeTime;\r\n    }\r\n    \r\n    LiquifiProposal[] public deployedProposals;\r\n    mapping(address => CreatedProposals) proposalInfo;\r\n    mapping(/* user */address => Deposit) public deposits;\r\n    address[] public userDepositsList;\r\n\r\n    uint public immutable tokensRequiredToCreateProposal; \r\n    uint public constant quorum = 10; //percenrage\r\n    uint public constant threshold = 50;\r\n    uint public constant vetoPercentage = 33;\r\n    uint public immutable votingPeriod; //hours\r\n\r\n    ERC20 private immutable govToken;\r\n    GovernanceRouter public immutable governanceRouter;\r\n\r\n    constructor(address _governanceRouterAddress, uint _tokensRequiredToCreateProposal, uint _votingPeriod) {\r\n        tokensRequiredToCreateProposal = _tokensRequiredToCreateProposal;\r\n        votingPeriod = _votingPeriod;\r\n        govToken = GovernanceRouter(_governanceRouterAddress).minter();\r\n        governanceRouter = GovernanceRouter(_governanceRouterAddress);\r\n        (address oldGovernor,) = GovernanceRouter(_governanceRouterAddress).governance();\r\n        if (oldGovernor == address(0)) {\r\n            GovernanceRouter(_governanceRouterAddress).setGovernor(address(this));\r\n        }\r\n    }\r\n\r\n    function deposit(address user, uint amount, uint unfreezeTime) private {\r\n        uint deposited = deposits[user].amount;\r\n        if (deposited < amount) {\r\n            uint remainingAmount = amount.subWithClip(deposited);\r\n            require(govToken.transferFrom(user, address(this), remainingAmount), \"LIQUIFI_GV: TRANSFER FAILED\");\r\n            deposits[user].amount = amount;\r\n        }\r\n        deposits[user].unfreezeTime = Math.max(deposits[user].unfreezeTime, unfreezeTime);\r\n        userDepositsList.push(user);\r\n    } \r\n\r\n    function withdraw() public {\r\n        require(_withdraw(msg.sender, block.timestamp) > 0, \"LIQUIFI_GV: WITHDRAW FAILED\");\r\n    }\r\n\r\n    function _withdraw(address user, uint maxTime) private returns (uint) {\r\n        uint amount = deposits[user].amount;\r\n        if (amount == 0 || deposits[user].unfreezeTime >= maxTime) {\r\n            return 0;\r\n        }\r\n        \r\n        deposits[user].amount = 0;\r\n        require(govToken.transfer(user, amount), \"LIQUIFI_GV: TRANSFER FAILED\");\r\n        emit DepositWithdrawn(user, amount);\r\n        return amount;\r\n    }\r\n\r\n    function withdrawAll() public {\r\n        withdrawMultiple(0, userDepositsList.length);\r\n    }\r\n\r\n    function withdrawMultiple(uint fromIndex, uint toIndex) public {\r\n        uint maxWithdrawTime = block.timestamp;\r\n        (address currentGovernor,) = governanceRouter.governance();\r\n\r\n        if (currentGovernor != address(this)) {\r\n            maxWithdrawTime = type(uint).max;\r\n        }\r\n        \r\n        for(uint userIndex = fromIndex; userIndex < toIndex; userIndex++) {\r\n            _withdraw(userDepositsList[userIndex], maxWithdrawTime);\r\n        }\r\n    }\r\n\r\n    function createProposal(string memory _proposal, uint _option, uint _newValue, address _address, address _address2) public {\r\n        address creator = msg.sender;\r\n        LiquifiProposal newProposal = new LiquifiProposal(_proposal, govToken.totalSupply(), address(govToken), _option, _newValue, quorum, threshold, vetoPercentage, votingPeriod, _address, _address2);\r\n        \r\n        uint tokensRequired = deposits[creator].amount.add(tokensRequiredToCreateProposal);\r\n        deposit(creator, tokensRequired, newProposal.endTime());\r\n\r\n        deployedProposals.push(newProposal);\r\n\r\n        proposalInfo[address(newProposal)].amountDeposited = tokensRequiredToCreateProposal;\r\n        proposalInfo[address(newProposal)].creator = creator;\r\n        emit ProposalCreated(address(newProposal));\r\n    }\r\n\r\n    function emergencyLock(address pool) public returns (bool locked) {\r\n        uint gasBefore = gasleft();\r\n        try DelayedExchangePool(pool).processDelayedOrders() {\r\n            return false;\r\n        } catch (bytes memory /*lowLevelData*/) {\r\n            uint gasAfter = gasleft();\r\n            require((gasBefore - gasAfter) * 10 / gasBefore >= 1, \"LIQUIFI: LOW GAS\");\r\n            lockPool(pool);\r\n            if (knownPool(pool)) {\r\n                emit EmergencyLock(msg.sender, pool);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getDeployedProposals() public view returns (LiquifiProposal[] memory) {\r\n        return deployedProposals;\r\n    }\r\n\r\n    function proposalVote(address user, uint influence, uint unfreezeTime) public {\r\n        address proposal = msg.sender;\r\n        require(proposalInfo[proposal].amountDeposited > 0, \"LIQUIFI_GV: BAD SENDER\");\r\n        require(proposalInfo[proposal].status == LiquifiDAO.ProposalStatus.IN_PROGRESS, \"LIQUIFI_GV: PROPOSAL FINALIZED\");\r\n\r\n        deposit(user, influence, unfreezeTime);\r\n    }\r\n\r\n    function proposalFinalization(LiquifiDAO.ProposalStatus _proposalStatus, uint _option, uint /* _value */, address _address, address /* _address2 */) public {\r\n        address proposal = msg.sender;\r\n        require(proposalInfo[proposal].amountDeposited > 0, \"LIQUIFI_GV: BAD SENDER\");\r\n        require(proposalInfo[proposal].status == LiquifiDAO.ProposalStatus.IN_PROGRESS, \"LIQUIFI_GV: PROPOSAL FINALIZED\");\r\n        \r\n        if (_proposalStatus == LiquifiDAO.ProposalStatus.APPROVED) {\r\n            if (_option == 1) { \r\n                changeGovernor(_address); \r\n            }\r\n        }\r\n\r\n        proposalInfo[proposal].status = _proposalStatus;   \r\n        emit ProposalFinalized(proposal, _proposalStatus);   \r\n    }\r\n\r\n    function changeGovernor(address _newGovernor) private {\r\n        governanceRouter.setGovernor(_newGovernor);\r\n    }\r\n\r\n    function lockPool(address pool) internal {\r\n        (,uint governancePacked,,,,,,) = DelayedExchangePool(pool).poolState();\r\n\r\n        governancePacked = governancePacked | (1 << uint(Liquifi.Flag.POOL_LOCKED));\r\n        governancePacked = governancePacked | (1 << uint(Liquifi.Flag.GOVERNANCE_OVERRIDEN));\r\n        DelayedExchangePool(pool).applyGovernance(governancePacked);\r\n    }\r\n\r\n    function knownPool(address pool) private returns (bool) {\r\n        address tokenA = address(DelayedExchangePool(pool).tokenA());\r\n        address tokenB = address(DelayedExchangePool(pool).tokenB());\r\n        return governanceRouter.poolFactory().findPool(tokenA, tokenB) == pool;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceRouterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensRequiredToCreateProposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LiquifiDAO.ProposalStatus\",\"name\":\"proposalStatus\",\"type\":\"uint8\"}],\"name\":\"ProposalFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedProposals\",\"outputs\":[{\"internalType\":\"contract LiquifiProposal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreezeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"emergencyLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedProposals\",\"outputs\":[{\"internalType\":\"contract LiquifiProposal[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceRouter\",\"outputs\":[{\"internalType\":\"contract GovernanceRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LiquifiDAO.ProposalStatus\",\"name\":\"_proposalStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalFinalization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"influence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unfreezeTime\",\"type\":\"uint256\"}],\"name\":\"proposalVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensRequiredToCreateProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDepositsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vetoPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquifiInitialGovernor","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000ad8674bc5727976f092027343244ebec2f961b5800000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000000000000000000030","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c3a6eee143d58d4c48dd892fb80e7f8e0485c6caf860989d78bc10e191802985"}]}