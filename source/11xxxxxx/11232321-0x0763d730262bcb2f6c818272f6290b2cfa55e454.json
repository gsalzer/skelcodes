{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IStableV2 {\r\n    // Stable balances management\r\n    function update() external;\r\n    // Management functions callable only be Milker\r\n    function shareMilk(address taker) external returns (uint256);\r\n    function bandits(uint256 amount) external returns (uint256, uint256, uint256);\r\n    // Contract getters\r\n    function milker() external view returns (address);\r\n    function token() external view returns (address);\r\n    function startTime() external view returns (uint256);\r\n    function stakerTokens(address staker) external view returns (uint256);\r\n    function stakerCorrection(address staker) external view returns (uint256);\r\n    function tokenSupply() external view returns (uint256);\r\n    function milkSupply() external view returns (uint256);\r\n    // MILK production related getters\r\n    function level() external view returns (uint256);\r\n    function levelProgress() external view returns (uint256);\r\n    function production() external view returns (uint256);\r\n    function produced() external view returns (uint256);\r\n    function distributed() external view returns (uint256);\r\n    function pending() external view returns (uint256);\r\n    function pendingTo(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IMilker is IERC20 {\r\n    // Token management accessed only from StableV2 contracts\r\n    function produceMilk(uint256 amount) external returns (uint256);\r\n    function takeMilk(address account) external returns (uint256);\r\n    // Primary MILK tokenomics events\r\n    function bandits(uint256 percent) external returns (uint256, uint256, uint256);\r\n    function sheriffsVaultCommission() external returns (uint256);\r\n    function sheriffsPotDistribution() external returns (uint256);\r\n    // Getters\r\n    function startTime() external view returns (uint256);\r\n    function isWhitelisted(address account) external view returns (bool);\r\n    function vaultOf(address account) external view returns (uint256);\r\n    function period() external view returns (uint256);\r\n    function periodProgress() external view returns (uint256);\r\n    function periodLength() external view returns (uint256);\r\n    function production() external view returns (uint256);\r\n    function producedTotal() external view returns (uint256);\r\n    function distributedTotal() external view returns (uint256);\r\n    function pendingTotal() external view returns (uint256);\r\n    function pendingTo(address account) external view returns (uint256);\r\n}\r\n\r\n// solium-disable security/no-block-members\r\n\r\ncontract StableV2 is Ownable, IStableV2 {\r\n    using SafeMath for uint256;\r\n\r\n    // Stable contains info related to each staker.\r\n    struct Staker {\r\n        uint256 amount;      // amount of tokens currently staked to the Stable\r\n        uint256 correction;  // value needed for correct calculation staker's share\r\n        uint256 banditsCorrection;\r\n        uint256 distributed; // amount of distributed MILK tokens\r\n    }\r\n\r\n    // Default deflationarity parameters.\r\n    uint256 private constant REDUCING_INTERVAL = 7 days; // 7 days is time between reductions\r\n    uint256 private constant REDUCING_FACTOR = 10;       // production is reduced by 10%\r\n\r\n    // MILK token contract.\r\n    IMilker private _milker;\r\n\r\n    // ERC20 token contract staking to the Stable.\r\n    IERC20 private _token;\r\n\r\n    // Stakers info by token holders.\r\n    mapping(address => Staker) private _stakers;\r\n\r\n    // Common variables configuring of the Stable.\r\n    uint256 private _startTime;\r\n\r\n    // Common variables describing current state of the Stable.\r\n    uint256 private _banditsCorrection = 1e18;\r\n    uint256 private _tokensPerShare;\r\n    uint256 private _distributed;\r\n    uint256 private _production;\r\n    uint256 private _produced;\r\n    uint256 private _lastUpdateTime;\r\n\r\n\r\n    // Events.\r\n    event Initialized(uint256 startTime, uint256 initialProduction);\r\n    event Bandits(\r\n        uint256 indexed percent,\r\n        uint256 totalAmount,\r\n        uint256 arrestedAmount,\r\n        uint256 burntAmount\r\n    );\r\n    event Staked(address indexed staker, uint256 amount);\r\n    event Claimed(address indexed staker, uint256 amount);\r\n\r\n\r\n    modifier onlyMilker() {\r\n        require(address(_milker) == _msgSender(), \"StableV2: caller is not the Milker contract\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address milker, address token) public {\r\n        require(address(milker) != address(0), \"StableV2: Milker contract address cannot be empty\");\r\n        require(address(token) != address(0), \"StableV2: ERC20 token contract address cannot be empty\");\r\n        _milker = IMilker(milker);\r\n        _token = IERC20(token);\r\n        transferOwnership(Ownable(milker).owner());\r\n    }\r\n\r\n    function initialize(uint256 startTime, uint256 initialProductionPerDay) external onlyOwner {\r\n        require(produced() == 0, \"StableV2: already started\");\r\n        _startTime = startTime;\r\n        _production = 7 * initialProductionPerDay;\r\n        _lastUpdateTime = _startTime;\r\n        emit Initialized(_startTime, _production);\r\n    }\r\n\r\n    function stake(uint256 amount) external {\r\n        address staker = msg.sender;\r\n        require(!_milker.isWhitelisted(staker), \"StableV2: whitelisted MILK holders cannot stake tokens\");\r\n\r\n        // Recalculate stable shares\r\n        update();\r\n\r\n        // Transfer pending tokens (if any) to the staker\r\n        _shareMilk(staker);\r\n\r\n        if (amount > 0) {\r\n            // Transfer staking tokens to the StableV2 contract\r\n            bool ok = _token.transferFrom(staker, address(this), amount);\r\n            require(ok, \"StableV2: unable to transfer stake\");\r\n            // Register staking tokens\r\n            _stakers[staker].amount = _stakers[staker].amount.add(amount);\r\n        }\r\n\r\n        // Adjust correction (staker's reward debt)\r\n        uint256 correction = _stakers[staker].amount.mul(_tokensPerShare).div(1e12);\r\n        _stakers[staker].correction = correction.mul(1e18).div(_banditsCorrection);\r\n        _stakers[staker].banditsCorrection = _banditsCorrection;\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit Staked(staker, amount);\r\n    }\r\n\r\n    function claim(uint256 amount) external {\r\n        address staker = msg.sender;\r\n        require(!_milker.isWhitelisted(staker), \"StableV2: whitelisted MILK holders cannot claim tokens\");\r\n\r\n        // Recalculate stable shares\r\n        update();\r\n\r\n        // Transfer pending tokens (if any) to the staker\r\n        _shareMilk(staker);\r\n\r\n        if (amount > 0) {\r\n            // Unregister claimed tokens\r\n            _stakers[staker].amount = _stakers[staker].amount.sub(amount);\r\n            // Transfer requested tokens from the StableV2 contract\r\n            bool ok = _token.transfer(staker, amount);\r\n            require(ok, \"StableV2: unable to transfer stake\");\r\n        }\r\n\r\n        // Adjust correction (staker's reward debt)\r\n        uint256 correction = _stakers[staker].amount.mul(_tokensPerShare).div(1e12);\r\n        _stakers[staker].correction = correction.mul(1e18).div(_banditsCorrection);\r\n        _stakers[staker].banditsCorrection = _banditsCorrection;\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit Claimed(staker, amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Updating stable state\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    // Updates stable's accumulative data until most recent block.\r\n    function update() public override {\r\n        if (block.timestamp <= _lastUpdateTime) {\r\n            return;\r\n        }\r\n        uint256 productionNew = production();\r\n        uint256 producedNew = produced();\r\n        if (producedNew <= _produced) {\r\n            _lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 supply = tokenSupply();\r\n        if (supply == 0) {\r\n            (_production, _produced) = (productionNew, producedNew);\r\n            _lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n        // Produce MILK tokens to this contract\r\n        uint256 producedTotal = producedNew.sub(_produced);\r\n        uint256 producedToStable = _milker.produceMilk(producedTotal);\r\n        // Update stable share price\r\n        _tokensPerShare = _tokensPerShare.add(producedToStable.mul(1e12).div(supply));\r\n        // Update stable state\r\n        _production = productionNew;\r\n        _produced = producedNew;\r\n        _lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Management functions callable only be Milker\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function shareMilk(address taker) public override onlyMilker returns (uint256) {\r\n        return _shareMilk(taker);\r\n    }\r\n\r\n    function bandits(uint256 percent) external override onlyMilker returns (\r\n        uint256 banditsAmount,\r\n        uint256 arrestedAmount,\r\n        uint256 burntAmount\r\n    ) {\r\n        // Recalculate stable shares\r\n        update();\r\n\r\n        // Ensure pending amount and total tokens staked are not zero\r\n        uint256 pendingAmount = milkSupply();\r\n        if (pendingAmount == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        // Calculate bandits amounts\r\n        banditsAmount = pendingAmount.mul(percent).div(100);\r\n        burntAmount = banditsAmount.div(10);\r\n        arrestedAmount = banditsAmount.sub(burntAmount);\r\n\r\n        // Transfer arrested MILK to the Sheriff's Vault\r\n        _safeTransferMilk(address(_milker), arrestedAmount);\r\n\r\n        // Decrease pending of each staker\r\n        _banditsCorrection = _banditsCorrection.sub(_banditsCorrection.mul(percent).div(100));\r\n        _tokensPerShare = _tokensPerShare.sub(_tokensPerShare.mul(percent).div(100));\r\n\r\n        // Emit event to the logs so can be effectively used later\r\n        emit Bandits(percent, banditsAmount, arrestedAmount, burntAmount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Contract getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function milker() public view override returns (address) {\r\n        return address(_milker);\r\n    }\r\n\r\n    function token() public view override returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    function startTime() public view override returns (uint256) {\r\n        return _startTime;\r\n    }\r\n\r\n    function stakerTokens(address staker) public view override returns (uint256) {\r\n        return _stakers[staker].amount;\r\n    }\r\n\r\n    function stakerCorrection(address staker) public view override returns (uint256) {\r\n        return _stakers[staker].correction;\r\n    }\r\n\r\n    function tokenSupply() public view override returns (uint256) {\r\n        return _token.balanceOf(address(this));\r\n    }\r\n\r\n    function milkSupply() public view override returns (uint256) {\r\n        return _milker.balanceOf(address(this));\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // MILK production related getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function level() public view override returns (uint256) {\r\n        if (_startTime == 0 || _startTime >= block.timestamp) {\r\n            return 0;\r\n        }\r\n        return (block.timestamp - _startTime) / REDUCING_INTERVAL;\r\n    }\r\n\r\n    function levelProgress() public view override returns (uint256) {\r\n        if (_startTime == 0 || _startTime >= block.timestamp) {\r\n            return 0;\r\n        }\r\n        uint256 d = block.timestamp - (_startTime + level() * REDUCING_INTERVAL);\r\n        return d * 10**18 / REDUCING_INTERVAL;\r\n    }\r\n\r\n    function production() public view override returns(uint256) {\r\n        if (_startTime == 0 || _startTime >= block.timestamp) {\r\n            return 0;\r\n        }\r\n        uint256 prod = _production;\r\n        uint256 lvlA = (_lastUpdateTime - _startTime) / REDUCING_INTERVAL;\r\n        uint256 lvlB = (block.timestamp - _startTime) / REDUCING_INTERVAL;\r\n        for (; lvlA < lvlB; lvlA++) {\r\n            prod -= prod / REDUCING_FACTOR;\r\n        }\r\n        return prod;\r\n    }\r\n\r\n    function produced() public view override returns(uint256) {\r\n        if (_startTime == 0 || _startTime >= block.timestamp) {\r\n            return 0;\r\n        }\r\n        uint256 lvlA = (_lastUpdateTime - _startTime) / REDUCING_INTERVAL;\r\n        uint256 lvlB = (block.timestamp - _startTime) / REDUCING_INTERVAL;\r\n        if (lvlA == lvlB) {\r\n            return _produced + (block.timestamp - _lastUpdateTime) * _production / REDUCING_INTERVAL;\r\n        }\r\n        uint256 amount = 0;\r\n        uint256 prod = _production;\r\n        // Count end of first level\r\n        amount += ((_startTime + (lvlA+1) * REDUCING_INTERVAL) - _lastUpdateTime) * prod / REDUCING_INTERVAL;\r\n        prod -= prod / REDUCING_FACTOR;\r\n        for (lvlA++; lvlA < lvlB; lvlA++) {\r\n            // Count full level\r\n            amount += prod;\r\n            prod -= prod / REDUCING_FACTOR;\r\n        }\r\n        // Count start of current level\r\n        amount += (block.timestamp - (_startTime + lvlB * REDUCING_INTERVAL)) * prod / REDUCING_INTERVAL;\r\n        return _produced + amount;\r\n    }\r\n\r\n    function distributed() public view override returns(uint256) {\r\n        return _distributed;\r\n    }\r\n\r\n    function pending() public view override returns(uint256) {\r\n        uint256 p = produced();\r\n        if (p <= _distributed) {\r\n            return 0;\r\n        }\r\n        return p.sub(_distributed);\r\n    }\r\n\r\n    function pendingTo(address account) public view override returns (uint256) {\r\n        uint256 added = produced().sub(_produced);\r\n        uint256 supply = tokenSupply();\r\n        uint256 tokensPerShare = _tokensPerShare;\r\n        if (added > 0 && supply > 0) {\r\n            tokensPerShare = tokensPerShare.add(added.sub(added.div(20)).mul(1e12).div(supply));\r\n        }\r\n        uint256 tokens = _stakers[account].amount.mul(tokensPerShare).div(1e12);\r\n        uint256 correction = _stakers[account].correction.mul(_banditsCorrection).div(1e18);\r\n        if (_banditsCorrection != _stakers[account].banditsCorrection) {\r\n            correction = correction.mul(_stakers[account].banditsCorrection).div(_banditsCorrection);\r\n        }\r\n        if (tokens <= correction) {\r\n            return 0;\r\n        }\r\n        return tokens.sub(correction);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Internal functions\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function _shareMilk(address taker) private returns (uint256 tokens) {\r\n\r\n        // Calculate pending tokens\r\n        Staker storage s = _stakers[taker];\r\n        uint256 pendingAmount = s.amount.mul(_tokensPerShare).div(1e12);\r\n        uint256 correction = s.correction.mul(_banditsCorrection).div(1e18);\r\n        if (_banditsCorrection != s.banditsCorrection) {\r\n            correction = correction.mul(s.banditsCorrection).div(_banditsCorrection);\r\n            s.banditsCorrection = _banditsCorrection;\r\n        }\r\n        if (pendingAmount > correction) {\r\n            uint256 balance = _milker.balanceOf(address(this));\r\n            pendingAmount = pendingAmount.sub(correction);\r\n            tokens = pendingAmount > balance ? balance : pendingAmount;\r\n            // Unregister sharing tokens\r\n            s.correction = correction.add(tokens).mul(1e18).div(_banditsCorrection);\r\n            s.banditsCorrection = _banditsCorrection;\r\n            _distributed = _distributed.add(tokens);\r\n            // Transfer MILK tokens from the StableV2 contract to the taker\r\n            _safeTransferMilk(taker, tokens);\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n    function _safeTransferMilk(address to, uint256 amount) private {\r\n        uint256 balance = _milker.balanceOf(address(this));\r\n        uint256 tokens = amount > balance ? balance : amount;\r\n        if (tokens > 0) {\r\n            bool ok = _milker.transfer(to, tokens);\r\n            require(ok, \"StableV2: unable to transfer MILK\");\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [TESTS] Test functions to check internal state\r\n    // TODO: Remove it since only for tests !!!\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function testProduction() public view returns (uint256) {\r\n        return _production;\r\n    }\r\n\r\n    function testProduced() public view returns (uint256) {\r\n        return _produced;\r\n    }\r\n\r\n    function testTokensPerShare() public view returns (uint256) {\r\n        return _tokensPerShare;\r\n    }\r\n\r\n    function testLastUpdateTime() public view returns (uint256) {\r\n        return _lastUpdateTime;\r\n    }\r\n}\r\n\r\ncontract Milk is Ownable, IMilker {\r\n    using SafeMath for uint256;\r\n\r\n    // Stable related info needed for proper shares calculation.\r\n    struct StableInfo {\r\n        IStableV2 stable;\r\n    }\r\n\r\n    // Token details.\r\n    string public constant name = \"Cowboy.Finance\";\r\n    string public constant symbol = \"MILK\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Token supply limitations.\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant MAX_SUPPLY = 7_000_000 * 10**decimals;\r\n    uint256 private constant TOTAL_UNITS = MAX_UINT256 - (MAX_UINT256 % MAX_SUPPLY);\r\n\r\n    // Period length is a time of events recharging.\r\n    uint256 private constant PERIOD_LENGTH = 6 hours;\r\n\r\n    // Hardcoded address to collect 5% developers team share.\r\n    address private constant _devs = 0xFFCF83437a1Eb718933f39ebE75aD96335BC1BE4;\r\n\r\n    // Address of controller contract from which base refase functions can be called.\r\n    address private _controller;\r\n\r\n    // Token holders balances \"in hand\", balances in vaults, and spending allowances.\r\n    mapping(address => uint256) private _balances; // in units\r\n    mapping(address => uint256) private _vaults;   // in units\r\n    mapping(address => mapping (address => uint256)) private _allowances; // in tokens\r\n\r\n    // Whitelisted addresses.\r\n    mapping(address => bool) private _whitelist;\r\n\r\n    // Registered stables.\r\n    StableInfo[] private _stables;\r\n    mapping(address => uint256) _stablesLookup;\r\n\r\n    // Time of start token life.\r\n    uint256 private _startTime;\r\n\r\n    // Token supplies.\r\n    uint256 private _supplyInBalances;      // in units\r\n    uint256 private _supplyInSheriffsVault; // in units\r\n    uint256 private _supplyInSheriffsPot;   // in tokens\r\n    uint256 private _totalSupply;           // in tokens\r\n\r\n    // Values needed to convert between units and tokens (divided to several parts).\r\n    uint256 private _unitsPerTokenInBalances = TOTAL_UNITS.div(MAX_SUPPLY);\r\n    uint256 private _unitsPerTokenInSheriffsVault = TOTAL_UNITS.div(MAX_SUPPLY);\r\n\r\n    // Contract configuration events.\r\n    event ControllerSetUp(address indexed controller);\r\n    event StableCreated(address stable, address milker, address token, uint256 id);\r\n\r\n    // ERC20 token related events.\r\n    event Mint(address indexed recipient, uint256 amount);\r\n    event Burn(address indexed stable, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Tokenomics mechanics events.\r\n    event Bandits(\r\n        uint256 indexed percent,\r\n        uint256 totalAmount,\r\n        uint256 arrestedAmount,\r\n        uint256 burntAmount\r\n    );\r\n    event SheriffsVaultCommission(uint256 amount);\r\n    event SheriffsPotDistribution(uint256 amount);\r\n\r\n    // Sheriff's Vault staking/unstaking events.\r\n    event SheriffsVaultDeposit(address indexed account, uint256 amount);\r\n    event SheriffsVaultWithdraw(address indexed account, uint256 amount);\r\n\r\n\r\n    modifier validRecipient(address account) {\r\n        require(account != address(0x0), \"Milk: unable to send tokens to zero address\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(_controller == _msgSender(), \"Milk: caller is not the controller\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStable() {\r\n        require(_stablesLookup[_msgSender()] > 0, \"Milk: caller is not the StableV2\");\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        _whitelist[_devs] = true;\r\n        _startTime = block.timestamp;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Administration] Contract admin managing\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function setController(address controller) external onlyOwner {\r\n        _controller = controller;\r\n        emit ControllerSetUp(controller);\r\n    }\r\n\r\n    function createStable(address token) external onlyOwner returns (address stable) {\r\n\r\n        // Deploy StableV2 contract\r\n        bytes32 salt = keccak256(abi.encodePacked(address(this), token));\r\n        stable = address(new StableV2{salt: salt}(address(this), token));\r\n        require(stable != address(0), \"Milk: unable to create deploy StableV2 contract\");\r\n\r\n        // Register created Stable\r\n        _stables.push(StableInfo({stable: IStableV2(stable)}));\r\n        _stablesLookup[stable] = _stables.length;\r\n        _whitelist[stable] = true;\r\n\r\n        // Also set token as whitelist\r\n        if (!_whitelist[token]) {\r\n            uint256 amount = _balances[token].div(_unitsPerTokenInBalances);\r\n            _supplyInBalances = _supplyInBalances.sub(_balances[token]);\r\n            _balances[token] = amount;\r\n            _whitelist[token] = true;\r\n        }\r\n\r\n        emit StableCreated(stable, address(this), token, _stables.length - 1);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Bandits are coming!\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function bandits(uint256 percent) external override onlyController returns (\r\n        uint256 banditsAmount,\r\n        uint256 arrestedAmount,\r\n        uint256 burntAmount\r\n    ) {\r\n        require(percent > 0 && percent < 100, \"Milker: invalid bandits percent\");\r\n        uint256 supply = _supplyInBalances.div(_unitsPerTokenInBalances);\r\n\r\n        // Calculate bandits amounts\r\n        banditsAmount = supply.mul(percent).div(100);\r\n        burntAmount = banditsAmount.div(10);\r\n        arrestedAmount = banditsAmount.sub(burntAmount);\r\n\r\n        // Burn necessary amount of MILK tokens in each stable\r\n        uint256 banditsPending;\r\n        uint256 arrestedPending;\r\n        uint256 burntPending;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            (uint256 b, uint256 a, uint256 x) = _stables[i].stable.bandits(percent);\r\n            // Calculate bandits pending amounts\r\n            banditsPending = banditsPending.add(b);\r\n            arrestedPending = arrestedPending.add(a);\r\n            burntPending = burntPending.add(x);\r\n            // Burn MILK from the Stable contract\r\n            _burn(address(_stables[i].stable), x);\r\n        }\r\n\r\n        // Update supplies\r\n        uint256 supplyNew = supply.sub(banditsAmount);\r\n        if (supply > 0 && supplyNew > 0) {\r\n            _unitsPerTokenInBalances = supply.mul(_unitsPerTokenInBalances).div(supplyNew);\r\n            _supplyInBalances = supplyNew.mul(_unitsPerTokenInBalances);\r\n            _supplyInSheriffsPot = _supplyInSheriffsPot.add(arrestedAmount).add(arrestedPending);\r\n            _totalSupply = _totalSupply.sub(burntAmount);\r\n        }\r\n\r\n        // Calculate final bandits amounts\r\n        banditsAmount = banditsAmount.add(banditsPending);\r\n        arrestedAmount = arrestedAmount.add(arrestedPending);\r\n        burntAmount = burntAmount.add(burntPending);\r\n\r\n        emit Bandits(percent, banditsAmount, arrestedAmount, burntAmount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Sheriff's Vault commission\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function sheriffsVaultCommission() external override onlyController returns (uint256) {\r\n\r\n        // Calculate comission in both units and tokens\r\n        uint256 vunits = _supplyInSheriffsVault.div(100);\r\n        uint256 tokens = vunits.div(_unitsPerTokenInSheriffsVault);\r\n\r\n        // Update supplies\r\n        uint256 supply = _supplyInSheriffsVault.div(_unitsPerTokenInSheriffsVault);\r\n        uint256 supplyNew = supply.sub(supply.div(100));\r\n        if (supply > 0 && supplyNew > 0) {\r\n            _unitsPerTokenInSheriffsVault = supply.mul(_unitsPerTokenInSheriffsVault).div(supplyNew);\r\n            _supplyInSheriffsVault = supplyNew.mul(_unitsPerTokenInSheriffsVault);\r\n            _supplyInSheriffsPot = _supplyInSheriffsPot.add(tokens);\r\n        } else {\r\n            tokens = 0;\r\n        }\r\n\r\n        emit SheriffsVaultCommission(tokens);\r\n        return tokens;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Event] Sheriff's Pot distribution\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function sheriffsPotDistribution() external override onlyController returns (uint256 amount) {\r\n        uint256 tokens = _supplyInSheriffsPot;\r\n        if (tokens == 0 || _supplyInBalances == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Update supplies\r\n        uint256 supply = _supplyInBalances.div(_unitsPerTokenInBalances);\r\n        uint256 supplyNew = supply.add(tokens);\r\n        _unitsPerTokenInBalances = supply.mul(_unitsPerTokenInBalances).div(supplyNew);\r\n        _supplyInBalances = supplyNew.mul(_unitsPerTokenInBalances);\r\n        _supplyInSheriffsPot = 0;\r\n\r\n        emit SheriffsPotDistribution(tokens);\r\n        return tokens;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Sheriff's Vault\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function putToSheriffsVault(uint256 amount) external {\r\n        address account = msg.sender;\r\n        require(!_whitelist[account], \"Milk: whitelisted holders cannot use Sheriff's Vault\");\r\n\r\n        // Take pending MILK\r\n        takeMilk(account);\r\n\r\n        // Calculate amount in units\r\n        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\r\n\r\n        // Update balances and vaults records\r\n        _balances[account] = _balances[account].sub(unitsInBalances);\r\n        _vaults[account] = _vaults[account].add(unitsInSheriffsVault);\r\n\r\n        // Update supplies\r\n        _supplyInBalances = _supplyInBalances.sub(unitsInBalances);\r\n        _supplyInSheriffsVault = _supplyInSheriffsVault.add(unitsInSheriffsVault);\r\n\r\n        emit SheriffsVaultDeposit(account, amount);\r\n    }\r\n\r\n    function takeFromSheriffsVault(uint256 amount) external {\r\n        address account = msg.sender;\r\n        require(!_whitelist[account], \"Milk: whitelisted holders cannot use Sheriff's Vault\");\r\n\r\n        // Take pending MILK\r\n        takeMilk(account);\r\n\r\n        // Calculate amount in units\r\n        uint256 unitsInBalances = amount.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsInSheriffsVault = amount.mul(_unitsPerTokenInSheriffsVault);\r\n\r\n        // Update balances and vaults records\r\n        _balances[account] = _balances[account].add(unitsInBalances);\r\n        _vaults[account] = _vaults[account].sub(unitsInSheriffsVault);\r\n\r\n        // Update supplies\r\n        _supplyInBalances = _supplyInBalances.add(unitsInBalances);\r\n        _supplyInSheriffsVault = _supplyInSheriffsVault.sub(unitsInSheriffsVault);\r\n\r\n        emit SheriffsVaultWithdraw(account, amount);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Token] Minting/burning token\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function mint(address recipient, uint256 amount) external validRecipient(recipient) onlyOwner returns (bool) {\r\n        if (isWhitelisted(recipient)) {\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        } else {\r\n            uint256 units = amount.mul(_unitsPerTokenInBalances);\r\n            _balances[recipient] = _balances[recipient].add(units);\r\n            _supplyInBalances = _supplyInBalances.add(units);\r\n        }\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Mint(recipient, amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeMilk(address account) public override returns (uint256) {\r\n        uint256 tokens;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            _stables[i].stable.update();\r\n            uint256 transferred = _stables[i].stable.shareMilk(account);\r\n            tokens = tokens.add(transferred);\r\n        }\r\n        return tokens;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Token] Issuing/transferring earned tokens\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function produceMilk(uint256 amount) public override onlyStable returns (uint256) {\r\n        // Substruct 5% from each amount to transfer to the developers team\r\n        uint256 devsFee = amount.div(20);      //  5%\r\n        uint256 stabled = amount.sub(devsFee); // 95%\r\n        // Produce (mint) MILK tokens\r\n        _balances[msg.sender] = _balances[msg.sender].add(stabled);\r\n        _balances[_devs] = _balances[_devs].add(devsFee);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        // emit Mint(msg.sender, amount);\r\n        emit Transfer(address(0), msg.sender, stabled);\r\n        emit Transfer(address(0), _devs, devsFee);\r\n        return stabled;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // [Token] Transferring token\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function transfer(address to, uint256 value) public override validRecipient(to) returns (bool) {\r\n        (address from, bool fromWT, bool toWT) = (msg.sender, isWhitelisted(msg.sender), isWhitelisted(to));\r\n        uint256 unitsFrom = fromWT ? value : value.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsTo = toWT ? value : value.mul(_unitsPerTokenInBalances);\r\n        if (!fromWT && _balances[from] < unitsFrom) {\r\n            takeMilk(from);\r\n        }\r\n        if (fromWT && toWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n        } else if (fromWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n            _supplyInBalances = _supplyInBalances.add(unitsTo);\r\n        } else if (toWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n            _supplyInBalances = _supplyInBalances.sub(unitsFrom);\r\n        } else {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n        }\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public override validRecipient(to) returns (bool) {\r\n        (bool fromWT, bool toWT) = (isWhitelisted(msg.sender), isWhitelisted(to));\r\n        uint256 unitsFrom = fromWT ? value : value.mul(_unitsPerTokenInBalances);\r\n        uint256 unitsTo = toWT ? value : value.mul(_unitsPerTokenInBalances);\r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\r\n        if (!fromWT && _balances[from] < unitsFrom) {\r\n            takeMilk(from);\r\n        }\r\n        if (fromWT && toWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n        } else if (fromWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n            _supplyInBalances = _supplyInBalances.add(unitsTo);\r\n        } else if (toWT) {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n            _supplyInBalances = _supplyInBalances.sub(unitsFrom);\r\n        } else {\r\n            _balances[from] = _balances[from].sub(unitsFrom);\r\n            _balances[to] = _balances[to].add(unitsTo);\r\n        }\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Common getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function startTime() public view override returns (uint256) {\r\n        return _startTime;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view override returns (bool) {\r\n        return _whitelist[account];\r\n    }\r\n\r\n    function stable(uint256 index) public view returns (address) {\r\n        return index < _stables.length ? address(_stables[index].stable) : address(0);\r\n    }\r\n\r\n    function stables() public view returns (address[] memory) {\r\n        address[] memory addresses = new address[](_stables.length);\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            addresses[i] = address(_stables[i].stable);\r\n        }\r\n        return addresses;\r\n    }\r\n\r\n    function stableCount() public view returns (uint256) {\r\n        return _stables.length;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        // For whitelisted addresses don't calculate pending tokens\r\n        if (isWhitelisted(account)) {\r\n            return _balances[account];\r\n        }\r\n        // Summarize pending MILK from all stables\r\n        uint256 pendingAmount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            pendingAmount = pendingAmount.add(_stables[i].stable.pendingTo(account));\r\n        }\r\n        // Final balance is actually summ of acked and pending MILK\r\n        return _balances[account].div(_unitsPerTokenInBalances).add(pendingAmount);\r\n    }\r\n\r\n    function vaultOf(address account) public view override returns (uint256) {\r\n        return _vaults[account].div(_unitsPerTokenInSheriffsVault);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function holdersSupply() public view returns (uint256) {\r\n        return _supplyInBalances.div(_unitsPerTokenInBalances);\r\n    }\r\n\r\n    function sheriffsPotSupply() public view returns (uint256) {\r\n        return _supplyInSheriffsPot;\r\n    }\r\n\r\n    function sheriffsVaultSupply() public view returns (uint256) {\r\n        return _supplyInSheriffsVault.div(_unitsPerTokenInSheriffsVault);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Token lifetime related getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function period() public view override returns (uint256) {\r\n        return block.timestamp.sub(_startTime).div(PERIOD_LENGTH);\r\n    }\r\n\r\n    function periodProgress() public view override returns (uint256) {\r\n        uint256 durationFromPeriodStart = block.timestamp\r\n            .sub(_startTime.add(period().mul(PERIOD_LENGTH)));\r\n        return durationFromPeriodStart.mul(10**18).div(PERIOD_LENGTH);\r\n    }\r\n\r\n    function periodLength() public view override returns (uint256) {\r\n        return PERIOD_LENGTH;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Token production related getters\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function production() public view override returns(uint256) {\r\n        uint256 amount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            amount = amount.add(_stables[i].stable.production());\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function producedTotal() public view override returns(uint256) {\r\n        uint256 amount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            amount = amount.add(_stables[i].stable.produced());\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function distributedTotal() public view override returns(uint256) {\r\n        uint256 amount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            amount = amount.add(_stables[i].stable.distributed());\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function pendingTotal() public view override returns(uint256) {\r\n        uint256 amount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            amount = amount.add(_stables[i].stable.pending());\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function pendingTo(address account) public view override returns(uint256) {\r\n        uint256 amount;\r\n        for ((uint256 i, uint256 c) = (0, _stables.length); i < c; i++) {\r\n            amount = amount.add(_stables[i].stable.pendingTo(account));\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function unitsPerToken() public view returns (uint256) {\r\n        return _unitsPerTokenInBalances;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // Internal functions\r\n    ////////////////////////////////////////////////////////////////\r\n\r\n    function _burn(address burner, uint256 amount) private {\r\n        _balances[burner] = _balances[burner].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(burner, address(0), amount);\r\n        // emit Burn(burner, amount);\r\n    }\r\n}\r\n\r\n// solium-enable security/no-block-members","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"name\":\"Bandits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerSetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsPotDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SheriffsVaultWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"milker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StableCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"bandits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"banditsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stable\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"produceMilk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"producedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"production\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"putToSheriffsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsPotDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsPotSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsVaultCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sheriffsVaultSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stables\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeFromSheriffsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"takeMilk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vaultOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Milk","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"777","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://08f730cfc637e2e90d89159c35308a8c6460e616246cd5189bdac1cf89877e71"}]}