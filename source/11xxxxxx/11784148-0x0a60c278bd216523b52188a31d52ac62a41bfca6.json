{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Presale {\r\n\r\n    IERC20 public MFI;\r\n    // these aren't ether, we're just using this for unit conversion\r\n    uint public constant presaleSupply = 4_000_000 ether;\r\n    // how much the presale has already issued\r\n    uint public presaleIssued = 0;\r\n    address public treasury;\r\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint public startDate;\r\n    uint public lastVestedQuarter;\r\n    // 1_500_000 / 8\r\n    uint public constant vestingQuarterly = 187_500 ether;\r\n\r\n    // check for reentrancy\r\n    bool disbursing;\r\n\r\n    // initial best-guess ETH price\r\n    uint constant initialDollarsPerETH = 1400;\r\n    // updatable ETH price\r\n    uint public dollarsPerETH = initialDollarsPerETH;\r\n    uint public constant tokensPerDollar = 4;\r\n\r\n    uint public constant maxPerWallet = 10 ether * initialDollarsPerETH * tokensPerDollar;\r\n\r\n    constructor(IERC20 tokenContract, uint _startDate, address _treasury) public {\r\n        MFI = tokenContract;\r\n        treasury = _treasury;\r\n        startDate = _startDate;\r\n    }\r\n\r\n    receive() external payable {\r\n        // rule out reentrancy\r\n        require(!disbursing, \"No re-entrancy\");\r\n        disbursing = true;\r\n\r\n        // check time constraints\r\n        // after start date\r\n        require(block.timestamp >= startDate, \"Presale hasn't started yet\");\r\n        uint endDate = startDate + 2 days;\r\n        // before end date\r\n        require(endDate >= block.timestamp, \"Presale is over\");\r\n\r\n        // calculate price\r\n        // no overflow because scarcity\r\n        uint tokensPerETH = dollarsPerETH * tokensPerDollar;\r\n        // no overflow, again because scarcity\r\n        uint tokensRequested = msg.value * tokensPerETH;\r\n\r\n        // calculate how much the sender actually gets\r\n        uint tokensToTransfer = min(tokensRequested, // price\r\n                                    sub(presaleSupply, presaleIssued), // don't exceed supply\r\n                                    sub(maxPerWallet, MFI.balanceOf(msg.sender))); // don't exceed wallet max\r\n\r\n        // any eth that needs to go back\r\n        uint ethReturn = sub(tokensRequested, tokensToTransfer) / tokensPerETH;\r\n        if (ethReturn > 0) {\r\n            // send it back\r\n            payable(msg.sender).transfer(ethReturn);\r\n        }\r\n\r\n        // send eth to treasury and tokens to buyer\r\n        payable(treasury).transfer(sub(msg.value, ethReturn));\r\n        MFI.transferFrom(treasury, msg.sender, tokensToTransfer);\r\n        disbursing = false;\r\n    }\r\n\r\n    // can be called by anyone to update the current price\r\n    function setDollarsPerETH() external {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = USDC;\r\n        dollarsPerETH = UniRouter(uniRouter).getAmountsOut(1 ether, path)[1] / 1 ether;\r\n    }\r\n\r\n    function min(uint a, uint b, uint c) internal pure returns (uint result) {\r\n        // if a is smallest\r\n        result = a;\r\n        // if be is smaller\r\n        if (result > b) {\r\n            result = b;\r\n        }\r\n        // if c is even smaller\r\n        if (result > c) {\r\n            result = c;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction underflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    // send vested tokens back to treasury\r\n    function withdrawVested() external {\r\n        uint timeDiff = block.timestamp - startDate;\r\n        uint quarter = timeDiff / (90 days);\r\n        if (quarter > lastVestedQuarter) {\r\n            MFI.transfer(treasury, vestingQuarterly);\r\n            lastVestedQuarter = quarter;\r\n        }\r\n    }\r\n}\r\n\r\ninterface UniRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path)\r\n        external view returns (uint[] memory amounts);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MFI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarsPerETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVestedQuarter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleIssued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDollarsPerETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingQuarterly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Presale","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aa4e3edb11afa93c41db59842b29de64b72e355b0000000000000000000000000000000000000000000000000000000060404d3000000000000000000000000016f3fc1e4ba9d70f47387b902fa5d21020b5c6b5","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87fa259e6f6cd34afb3f210cadf4ed8839925d8e9257cd2db2079f2c5211e1f8"}]}