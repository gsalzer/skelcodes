{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    uint256 _totalSupply;\r\n    uint256 funds;\r\n    uint8 decimals;\r\n    \r\n    uint256 dateDeploy;\r\n    uint256 blockYears;\r\n    \r\n    address owner;\r\n    \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) alloweds;\r\n\r\n    constructor () {\r\n        name = \"iZiFoodToken\";\r\n        symbol = \"IZFO\";\r\n        _totalSupply = 1000000;\r\n        funds = 510000;\r\n        decimals = 0;\r\n        owner = msg.sender;\r\n        balances[owner] = _totalSupply - funds;\r\n        dateDeploy = block.timestamp;\r\n        blockYears = dateDeploy + 730 days;\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only owner can use this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier blockedTime {\r\n        require(block.timestamp >= blockYears, \"This funds are blocked for 2 years\");\r\n        _;\r\n    }\r\n    \r\n    function totalSupply () public view returns (uint256 total) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf (address _address) public view returns (uint256 balance) {\r\n        require(_address != address(0x0));\r\n        return balances[_address];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public virtual returns (bool success) {\r\n        require(_to != msg.sender, \"Can't send tokens to the same address\");\r\n        require(_to != address(0x0), \"Can't send to a null address\");\r\n        require(_value > 0, \"Can't send a negative amount of tokens\");\r\n        require(balances[msg.sender] >= _value, \"Insufficient balance\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] =  balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_spender != msg.sender, \"Can't approve tokens to the same address\");\r\n        require(balances[msg.sender] >= _value,\"Insufficient amount of tokens\");\r\n        require(_spender != address(0x0),\"Can't approve a null address\");\r\n\r\n        alloweds[msg.sender][_spender] = alloweds[msg.sender][_spender].add(_value);\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function disapprove(address _spender, uint256 _value) public returns (bool success){\r\n        require(alloweds[msg.sender][_spender] >= _value, \"Can't disapprove more than the approved\");\r\n        require(_spender != address(0x0), \"Can't disapprove a null address\");\r\n\r\n        alloweds[msg.sender][_spender] = alloweds[msg.sender][_spender].sub(_value);\r\n\r\n        emit Desapproval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool success) {\r\n        require(balances[_from] >= _value,\"Insufficient balance\");\r\n        require(alloweds[_from][msg.sender] >= _value,\"Insufficient allowance\");\r\n        require(_value > 0,\"Can't send a negative amount of tokens\");\r\n        require(_to != address(0x0),\"Can't send to a null address\");\r\n        require(_from != address(0x0),\"Can't send from a null address\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        alloweds[_from][msg.sender] =  alloweds[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function requestFunds() public onlyOwner blockedTime returns (bool success) {\r\n        require(funds > 0, \"Funds have already been transferred\");\r\n\r\n        balances[owner] = balances[owner].add(funds);\r\n        funds = 0;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Desapproval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC884 is ERC20 {\r\n    mapping(address => bytes32) private verified;\r\n    mapping(address => address) private cancellations;\r\n    mapping(address => uint256) private holderIndices;\r\n    \r\n    address[] private shareholders;\r\n    \r\n    modifier isVerifiedAddress(address _addr) {\r\n        require(verified[_addr] != bytes32(0), \"The address isn't in verified list\");\r\n        _;\r\n    }\r\n\r\n    modifier isShareholder(address _addr) {\r\n        require(holderIndices[_addr] != 0, \"The address isn't in a shareholder\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotShareholder(address _addr) {\r\n        require(holderIndices[_addr] == 0, \"The address is a shareholder\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotCancelled(address _addr) {\r\n        require(cancellations[_addr] == address(0x0));\r\n        _;\r\n    }\r\n    \r\n    function addVerified(address _addr, bytes32 _hash) public onlyOwner isNotCancelled(_addr) {\r\n        require(_addr != address(0x0), \"Can't add a null address\");\r\n        require(_hash != bytes32(0), \"Can't set a null hash\");\r\n        require(verified[_addr] == bytes32(0), \"Can't add same address\");\r\n        \r\n        verified[_addr] = _hash;\r\n        \r\n        emit VerifiedAddressAdded(_addr, _hash, msg.sender);\r\n    }\r\n\r\n    function removeVerified(address _addr) public onlyOwner {\r\n        require(_addr != address(0x0), \"Can't remove a null address\");\r\n        require(balances[_addr] == 0, \"Can't remove an address that has tokens\");\r\n        \r\n        if(verified[_addr] != bytes32(0)) {\r\n            verified[_addr] = bytes32(0);\r\n            emit VerifiedAddressRemoved(_addr, msg.sender);\r\n        }\r\n    }\r\n    \r\n    function updateVerified(address _addr, bytes32 _hash) public onlyOwner isVerifiedAddress(_addr) {\r\n        require(_hash != bytes32(0), \"The hash is required\");\r\n        \r\n        bytes32 oldHash = verified[_addr];\r\n        \r\n        if(oldHash != _hash) {\r\n            verified[_addr] = _hash;\r\n            emit VerifiedAddressUpdated(_addr, oldHash, _hash, msg.sender);\r\n        }\r\n    }\r\n    \r\n    function cancelAndReissue(address _original, address _replacement) public onlyOwner isShareholder(_original) isNotShareholder(_replacement) isVerifiedAddress(_replacement) returns (bool success) {\r\n        verified[_original] = bytes32(0);\r\n        cancellations[_original] = _replacement;\r\n\r\n        uint256 holderIndex = holderIndices[_original] - 1;\r\n        shareholders[holderIndex] = _replacement;\r\n\r\n        holderIndices[_replacement] = holderIndices[_original];\r\n        holderIndices[_original] = 0;\r\n\r\n        balances[_replacement] = balances[_original];\r\n        balances[_original] = 0;\r\n\r\n        emit VerifiedAddressSuperseded(_original, _replacement, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) override public isVerifiedAddress(_to) returns (bool success) {\r\n        updateShareholders(_to);\r\n        pruneShareholders(msg.sender, _value);\r\n        return super.transfer(_to, _value);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) override public isVerifiedAddress(_to) returns (bool success) {\r\n        updateShareholders(_to);\r\n        pruneShareholders(_from, _value);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    function isVerified(address _addr) public view returns (bool verifiedAddress) {\r\n        require(_addr != address(0x0), \"Can't verify a null address\");\r\n        \r\n        return verified[_addr] != bytes32(0);\r\n    }\r\n\r\n    function isHolder(address _addr) public view returns (bool holder) {\r\n        require(_addr != address(0x0), \"Can't verify a null address\");\r\n        \r\n        return holderIndices[_addr] != 0;\r\n    }\r\n\r\n    function hasHash(address _addr, bytes32 _hash) public view returns (bool hash) {\r\n        require(_addr != address(0x0), \"Can't verify a null address\");\r\n        require(_hash != bytes32(0), \"Can't verify a null hash\");\r\n\r\n        if (_addr == address(0x0)) {\r\n            return false;\r\n        }\r\n\r\n        return verified[_addr] == _hash;\r\n    }\r\n\r\n    function holderCount() public view returns (uint256 totalHolders) {\r\n        return shareholders.length;\r\n    }\r\n\r\n    function holderAt(uint256 _index) public view onlyOwner returns (address holder) {\r\n        require(_index < shareholders.length, \"The index must be less than the size of the array\");\r\n\r\n        return shareholders[_index];\r\n    }\r\n\r\n    function isSuperseded(address addr) public view onlyOwner returns (bool superseded) {\r\n        return cancellations[addr] != address(0x0);\r\n    }\r\n\r\n    function getCurrentFor(address _addr) public view onlyOwner returns (address) {\r\n        return findCurrentFor(_addr);\r\n    }\r\n\r\n    function findCurrentFor(address _addr) internal view returns (address) {\r\n        address candidate = cancellations[_addr];\r\n        if (candidate == address(0x0)) {\r\n            return _addr;\r\n        }\r\n        return findCurrentFor(candidate);\r\n    }\r\n    \r\n    function updateShareholders(address _addr) internal {\r\n        if (holderIndices[_addr] == 0) {\r\n            shareholders.push(_addr);\r\n            holderIndices[_addr] = shareholders.length;\r\n        }\r\n    }\r\n    \r\n    function pruneShareholders(address _addr, uint256 _value) internal {\r\n        uint256 balance = balances[_addr] - _value;\r\n\r\n        if (balance > 0) {\r\n            return;\r\n        }\r\n        uint256 holderIndex = holderIndices[_addr] - 1;\r\n        uint256 lastIndex = shareholders.length - 1;\r\n\r\n        address lastHolder = shareholders[lastIndex];\r\n\r\n        shareholders[holderIndex] = lastHolder;\r\n        holderIndices[lastHolder] = holderIndices[_addr];\r\n\r\n        shareholders.pop();\r\n        holderIndices[_addr] = 0;\r\n    }\r\n\r\n    event VerifiedAddressAdded(address indexed _addr, bytes32 _hash, address indexed _sender);\r\n\r\n    event VerifiedAddressRemoved(address indexed _addr, address indexed _sender);\r\n    \r\n    event VerifiedAddressUpdated(address indexed _addr, bytes32 _oldHash, bytes32 _hash, address indexed _sender);\r\n    \r\n    event VerifiedAddressSuperseded(address indexed _original, address indexed _replacement, address indexed _sender);\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Desapproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_original\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_replacement\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressSuperseded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_oldHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"VerifiedAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"addVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_original\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_replacement\",\"type\":\"address\"}],\"name\":\"cancelAndReissue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"disapprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getCurrentFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"hasHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hash\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"holderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalHolders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"holder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSuperseded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"superseded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"verifiedAddress\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"updateVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC884","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a10b9666ff6966bb2a58b8745fe5fff59d3568302730c20cc0c7885d0ccf5fb"}]}