{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @authors: [@nix1g]\r\n * @reviewers: [@clesaege, @ferittuncer, @fnanni-0, @mtsalenc, @unknownunknown1]\r\n * @auditors: []\r\n * @bounties: []\r\n * @deployments: []\r\n *\r\n * SPDX-License-Identifier: MIT\r\n */\r\n\r\npragma solidity ^0.6.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ITokenController {\r\n    function proxyPayment(address _owner) external payable returns (bool);\r\n    function onTransfer(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function onApprove(address _owner, address _spender, uint256 _amount) external returns (bool);\r\n}\r\n\r\ninterface IMiniMeToken is IERC20 {\r\n    function changeController(address _governor) external;\r\n    function controller() external view returns (address); // Getter\r\n}\r\n\r\ninterface IBPool is IERC20 {\r\n    function getBalance(address token) external view returns (uint256);\r\n    function getSwapFee() external view returns (uint256);\r\n    function gulp(address token) external;\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        address tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n}\r\n\r\n/** @title BalancerPoolRecoverer\r\n  * @dev The contract used to recover funds locked in a Balancer Pool.\r\n  */\r\ncontract BalancerPoolRecoverer is ITokenController {\r\n    /* *** Variables *** */\r\n\r\n    uint256 constant public ITERATION_COUNT = 32; // The number of swaps to make.\r\n\r\n    // Contracts and addresses to act on (immutable)\r\n    IMiniMeToken immutable public pnkToken;\r\n    IERC20 immutable public wethToken;\r\n    IBPool immutable public bpool;\r\n    address immutable public controller;\r\n    address immutable public beneficiary;\r\n\r\n    // Storage\r\n    bool recoveryOngoing; // Control TokenController functionality (block transfers by default).\r\n    uint256 initiateRestoreControllerTimestamp;\r\n\r\n\r\n    /* *** Functions *** */\r\n\r\n    /** @dev Constructs the recoverer.\r\n     *  @param _pnkToken The PNK token, at 0x93ED3FBe21207Ec2E8f2d3c3de6e058Cb73Bc04d. TRUSTED.\r\n     *  @param _wethToken The WETH token, at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2. TRUSTED.\r\n     *  @param _bpool The BPool to recover the liquidity from, at 0xC81d50c17754B379F1088574CF723Be4fb00307D. TRUSTED.\r\n     *  @param _controller The controller of the PNK token, at 0x988b3A538b618C7A603e1c11Ab82Cd16dbE28069. TRUSTED.\r\n     *  @param _beneficiary The address to send the equivalent of locked liquidity to, at 0x67a57535b11445506a9e340662CD0c9755E5b1b4. TRUSTED.\r\n     */\r\n    constructor(\r\n        IMiniMeToken _pnkToken,\r\n        IERC20 _wethToken,\r\n        IBPool _bpool,\r\n        address _controller,\r\n        address _beneficiary\r\n    ) public {\r\n        pnkToken = _pnkToken;\r\n        wethToken = _wethToken;\r\n        bpool = _bpool;\r\n        controller = _controller;\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /** @dev Ask for PNK token's controller to be restored.\r\n     *  Safeguard if the recovery does not work.\r\n     *  Note that this gives one hour for the recovery to be executed.\r\n     */\r\n    function initiateRestoreController() external {\r\n        require(initiateRestoreControllerTimestamp == 0);\r\n        require(pnkToken.controller() == address(this));\r\n        initiateRestoreControllerTimestamp = block.timestamp;\r\n    }\r\n\r\n    /** @dev Restore the PNK token's controller.\r\n     *  In case the recovery cannot be executed.\r\n     *  Can be called by the governor, or by anyone one hour after initiateRestoreController.\r\n     */\r\n    function restoreController() external {\r\n        require(initiateRestoreControllerTimestamp != 0);\r\n        require(initiateRestoreControllerTimestamp + 1 hours < block.timestamp);\r\n        pnkToken.changeController(address(controller));\r\n    }\r\n\r\n    /** @dev Recover the locked funds.\r\n     *  This function ensures everything happens in the same transaction.\r\n     *  Note that this function requires a high gas limit.\r\n     *  Note that all contracts are trusted.\r\n     */\r\n    function recover() external {\r\n        recoveryOngoing = true;\r\n\r\n        /* QUERY POOL STATE */\r\n        uint256 poolBalancePNK = pnkToken.balanceOf(address(bpool));\r\n        uint256 balancePNK = poolBalancePNK;\r\n        uint256 balanceWETH;\r\n\r\n        /* PULL PNK */\r\n        pnkToken.transferFrom(address(bpool), address(this), poolBalancePNK - 2); // Need to be the controller.\r\n        bpool.gulp(address(pnkToken));\r\n        pnkToken.approve(address(bpool), poolBalancePNK - 2);\r\n        poolBalancePNK = 2;\r\n\r\n        /* PULL WETH (A.K.A ARBITRAGE) */\r\n\r\n        for (uint256 i = 0; i < ITERATION_COUNT; i++) {\r\n            uint256 tokenAmountIn = poolBalancePNK / 2;\r\n            (uint256 tokenAmoutOut, ) = bpool.swapExactAmountIn(\r\n                address(pnkToken), // tokenIn\r\n                tokenAmountIn, // tokenAmountIn\r\n                address(wethToken), // tokenOut\r\n                0, // minAmountOut\r\n                uint256(-1) // maxPrice\r\n            );\r\n\r\n            balanceWETH += tokenAmoutOut;\r\n            poolBalancePNK += tokenAmountIn;\r\n        }\r\n\r\n        // Recover swapped PNK.\r\n        pnkToken.transferFrom(address(bpool), address(this), poolBalancePNK); // Need to be the controller.\r\n\r\n        /* SEND FUNDS TO BENEFICIARY */\r\n        wethToken.transfer(beneficiary, balanceWETH);\r\n        pnkToken.transfer(beneficiary, balancePNK);\r\n\r\n        /* RESTORE CONTROLLER */\r\n        pnkToken.changeController(address(controller));\r\n    }\r\n\r\n    // Since the recovery contract is PNK's controller, it has to allow transfers and approvals during the recovery only.\r\n    function proxyPayment(address _owner) override public payable returns (bool) {\r\n        return false;\r\n    }\r\n    function onTransfer(address _from, address _to, uint256 _amount) override public returns (bool) {\r\n        return recoveryOngoing;\r\n    }\r\n    function onApprove(address _owner, address _spender, uint256 _amount) override public returns (bool) {\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMiniMeToken\",\"name\":\"_pnkToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"contract IBPool\",\"name\":\"_bpool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ITERATION_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateRestoreController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pnkToken\",\"outputs\":[{\"internalType\":\"contract IMiniMeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalancerPoolRecoverer","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000093ed3fbe21207ec2e8f2d3c3de6e058cb73bc04d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c81d50c17754b379f1088574cf723be4fb00307d000000000000000000000000988b3a538b618c7a603e1c11ab82cd16dbe2806900000000000000000000000067a57535b11445506a9e340662cd0c9755e5b1b4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4732290fd6fe2ed002eea3434c6ac755d3edb5c4ffd1d813d3e861084a22e5cd"}]}