{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n███╗   ██╗███████╗████████╗     ██████╗ ██████╗  ██████╗ ██████╗     \r\n████╗  ██║██╔════╝╚══██╔══╝     ██╔══██╗██╔══██╗██╔═══██╗██╔══██╗    \r\n██╔██╗ ██║█████╗     ██║        ██║  ██║██████╔╝██║   ██║██████╔╝    \r\n██║╚██╗██║██╔══╝     ██║        ██║  ██║██╔══██╗██║   ██║██╔═══╝     \r\n██║ ╚████║██║        ██║███████╗██████╔╝██║  ██║╚██████╔╝██║         \r\n╚═╝  ╚═══╝╚═╝        ╚═╝╚══════╝╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝\r\npresented by LexDAO LLC\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n*/\r\npragma solidity 0.7.5;\r\n\r\ninterface IERC20TransferFrom { // interface for erc20 token `transferFrom()`\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC721ListingTransferFrom { // interface for erc721 token listing and `transferFrom()`\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ncontract NFT_DROP { // drop tokens on enumerable NFT owners\r\n    function dropERC721ParallelSeries(address erc721, address erc721ToDrop) external { // drop parallel erc721 series on erc721 owners\r\n        IERC721ListingTransferFrom nft = IERC721ListingTransferFrom(erc721);\r\n        uint256 count;\r\n        uint256 length = nft.totalSupply();\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            IERC721ListingTransferFrom(erc721ToDrop).transferFrom(msg.sender, nft.ownerOf(nft.tokenByIndex(count)), IERC721ListingTransferFrom(erc721ToDrop).tokenByIndex(count));\r\n            count++;\r\n        }\r\n    }\r\n    \r\n    /*******************\r\n    ERC20 DROP FUNCTIONS\r\n    *******************/\r\n    function dropDetailedSumERC20(address erc20, address erc721, uint256[] calldata amount) external { // drop detailed erc20 amount on erc721 owners (\"I want to give 10 DAI to 1st, 20 DAI to 2nd...\")\r\n        IERC721ListingTransferFrom nft = IERC721ListingTransferFrom(erc721);\r\n        uint256 count;\r\n        uint256 length = nft.totalSupply();\r\n        require(amount.length == length, \"!amount/length\");\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            IERC20TransferFrom(erc20).transferFrom(msg.sender, nft.ownerOf(nft.tokenByIndex(count)), amount[i]);\r\n            count++;\r\n        }\r\n    }\r\n    \r\n    function dropFixedSumERC20(address erc20, address erc721, uint256 amount) external { // drop erc20 amount on erc721 owners (\"I want to give 20 DAI to each\")\r\n        IERC721ListingTransferFrom nft = IERC721ListingTransferFrom(erc721);\r\n        uint256 count;\r\n        \r\n        for (uint256 i = 0; i < nft.totalSupply(); i++) {\r\n            IERC20TransferFrom(erc20).transferFrom(msg.sender, nft.ownerOf(nft.tokenByIndex(count)), amount);\r\n            count++;\r\n        }\r\n    }\r\n    \r\n    function dropLumpSumERC20(address erc20, address erc721, uint256 amount) external { // drop erc20 amount evenly on erc721 owners (\"I want to spread 100 DAI across all\")\r\n        IERC721ListingTransferFrom nft = IERC721ListingTransferFrom(erc721);\r\n        uint256 count;\r\n        uint256 length = nft.totalSupply();\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            IERC20TransferFrom(erc20).transferFrom(msg.sender, nft.ownerOf(nft.tokenByIndex(count)), amount / length);\r\n            count++;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"dropDetailedSumERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721ToDrop\",\"type\":\"address\"}],\"name\":\"dropERC721ParallelSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dropFixedSumERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"dropLumpSumERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFT_DROP","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bb20fa71377c045ec238ddb3a70b849dddde0cd926ea16a901da3e8da7effded"}]}