{"status":"1","message":"OK","result":[{"SourceCode":"// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\npragma solidity ^0.4.17;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract contractEscrow {\r\n    address public owner = msg.sender;\r\n    address public feeAddress = msg.sender;\r\n  address tracker_0x_address = 0x1E96E56857613eF737B4048FCFFD1450226dc9E3; // ContractA Address\r\n  uint public totalTokenBalance = ERC20(tracker_0x_address).balanceOf(address(this));\r\n  uint public totalBuyers = 0;\r\n  uint public totalReferrers = 0;\r\n  uint public totalBuyToken = 0;\r\n  uint public totalWeiUsedToBuy = 0;\r\n  uint public totalReferralEarn = 0;\r\n  uint public tokenPriceToWei = 1000;\r\n  uint public referralRewardPercent = 25;\r\n  mapping ( address => bool ) public buyer;\r\n  mapping ( address => bool ) public referrer;\r\n  mapping ( address => uint256 ) public balances;\r\n  address[] private buyers;\r\n  address[] private referrers;\r\n  \r\n  function() external payable {\r\n        buy(owner);\r\n    }\r\n  function getlist() public view returns(address[], address[] ){\r\n      require(msg.sender == owner, \"Should be owner!\");\r\n      return (buyers, referrers);\r\n  }\r\n  function setPrice(uint price) public {\r\n      require(msg.sender == owner, \"Should be owner!\");\r\n      tokenPriceToWei = price;\r\n  }\r\n  function setFeeAddress(address FeeAddress) public {\r\n      require(msg.sender == owner, \"Should be owner!\");\r\n      feeAddress = FeeAddress;\r\n  }\r\n  function setTokenAdddress(address TokenAddress) public {\r\n      require(msg.sender == owner, \"Should be owner!\");\r\n      tracker_0x_address = TokenAddress;\r\n  }\r\n    function setRewardPercent(uint percent) public {\r\n      require(msg.sender == owner, \"Should be owner!\");\r\n      referralRewardPercent = percent;\r\n  }\r\n  function buyExt(address referrerAddress) external payable{\r\n      buy(referrerAddress);\r\n  }\r\n  \r\n  function buy(address referrerAddress) private{\r\n      require(msg.value >= 0.02 ether, \"Minimum buy 0.02\");\r\n      uint buyAmount = msg.value * tokenPriceToWei;\r\n      //require(ERC20(tracker_0x_address).balanceOf(this) >= buyAmount, \"Token balance insufficient in contract\");\r\n      if(msg.data.length != 0) {\r\n          if (buyer[referrerAddress]){\r\n              ERC20(tracker_0x_address).transfer(msg.sender, buyAmount);\r\n              ERC20(tracker_0x_address).transfer(referrerAddress, buyAmount*referralRewardPercent/100);\r\n              address(uint160(referrerAddress)).transfer(msg.value*referralRewardPercent/100 );\r\n              address(uint160(feeAddress)).transfer(address(this).balance);\r\n          } else {\r\n              ERC20(tracker_0x_address).transfer(msg.sender, buyAmount);\r\n              ERC20(tracker_0x_address).transfer(referrerAddress, buyAmount*referralRewardPercent/100);\r\n              address(uint160(feeAddress)).transfer(address(this).balance);\r\n          }\r\n          totalReferralEarn = totalReferralEarn + (msg.value*referralRewardPercent/100);\r\n          totalReferrers = totalReferrers + 1;\r\n          referrers.push(referrerAddress);\r\n          \r\n      }else {\r\n          ERC20(tracker_0x_address).transfer( msg.sender, buyAmount);\r\n          address(uint160(feeAddress)).transfer(address(this).balance);\r\n      }\r\n      buyer[msg.sender] = true;\r\n      totalBuyers = totalBuyers + 1;\r\n      buyers.push(msg.sender);\r\n      totalBuyToken = totalBuyToken + buyAmount;\r\n      totalWeiUsedToBuy = totalWeiUsedToBuy + msg.value;\r\n      totalTokenBalance = ERC20(tracker_0x_address).balanceOf(address(this));\r\n  }\r\n\r\n  function deposit(uint tokens) public {\r\n\r\n    // add the deposited tokens into existing balance \r\n    balances[msg.sender]+= tokens;\r\n\r\n    // transfer the tokens from the sender to this contract\r\n    ERC20(tracker_0x_address).transferFrom(msg.sender, address(this), tokens);\r\n    totalTokenBalance = ERC20(tracker_0x_address).balanceOf(address(this));\r\n  }\r\n\r\n  function returnTokens(uint tokens) public {\r\n      if (balances[msg.sender] > tokens)\r\n    ERC20(tracker_0x_address).transfer(msg.sender, tokens);\r\n    balances[msg.sender] = balances[msg.sender] - tokens;\r\n    totalTokenBalance = ERC20(tracker_0x_address).balanceOf(address(this));\r\n    \r\n  }\r\n  function returnAllTokens() public {\r\n    ERC20(tracker_0x_address).transfer(msg.sender, balances[msg.sender]);\r\n    balances[msg.sender] = 0;\r\n    totalTokenBalance = ERC20(tracker_0x_address).balanceOf(address(this));\r\n    \r\n  }\r\n  function depositCustomToken(address tokenContractHash, uint tokens) public {\r\n    require(msg.sender == owner, \"Should be owner!\");\r\n    // transfer the tokens from the sender to this contract\r\n    ERC20(tokenContractHash).transferFrom(msg.sender, address(this), tokens);\r\n  }\r\n \r\n  function returnAllCustomTokens(address tokenContractHash, address toAddress) public {\r\n     require(msg.sender == owner, \"Should be owner!\");\r\n    ERC20(tokenContractHash).transfer(toAddress, ERC20(tokenContractHash).balanceOf(address(this)));\r\n  }\r\n  \r\n  function bulkDrop(address tokenContractHash, address[] recipients, uint256[] values) public {\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      ERC20(tokenContractHash).transfer(recipients[i], values[i]);\r\n    }\r\n  }\r\n  function bulkDropSameValue(address tokenContractHash, address[] recipients, uint256 value) public {\r\n    for (uint256 i = 0; i < recipients.length; i++) {\r\n      ERC20(tokenContractHash).transfer(recipients[i], value);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"referralRewardPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getlist\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReferrers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"buyExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractHash\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"bulkDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReferralEarn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractHash\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"depositCustomToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"FeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractHash\",\"type\":\"address\"},{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"returnAllCustomTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractHash\",\"type\":\"address\"},{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bulkDropSameValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAdddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBuyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setRewardPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeiUsedToBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"contractEscrow","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://109575e49a32be3f43f6704a9f8d190100b555dec33a40d30ff61f888d12a44f"}]}