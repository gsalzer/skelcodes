{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract OTEN_Farming is Ownable, ReentrancyGuard {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\tusing SafeERC20 for ERC20Detailed;\r\n\t\r\n\tuint256 private _decimalConverter = 10**18;\r\n\tuint256 private _divRate = 10000;\r\n\t\r\n\taddress private _DevAddress;\r\n\t\r\n\tstruct PoolList{\r\n\t\tIERC20 lptoken;\r\n\t\tIERC20 token;\r\n\t\tIERC20 tokenReward;\r\n\t\tuint256 rewardBlock;\r\n\t\tbool pollActive;\r\n\t\tuint256 rewardRemains;\r\n\t\tuint256 devFee;\r\n\t\tuint256 lockLP;\r\n\t\tuint256 lptotal;\r\n\t\tuint256 totalusers;\r\n\t\tuint256 totalpendingReward;\r\n\t\tuint256 poolLastBlockUpdate;\r\n\t\tuint256 stakeFee;\r\n\t\tuint256 withdrawFee;\r\n\t}\r\n\t\r\n\tstruct UserList {\r\n        uint256 blockStart; \r\n        uint256 stakingAmount;\r\n        uint256 lockedAmount;\r\n        uint256 totalstakingAmount;\r\n        uint256 pendingReward;\r\n        uint256 claimReward;\r\n    }\r\n\t\r\n\tstruct PoolTemp {\r\n\t\tuint256 devFeeAmount;\r\n\t\tuint256 lockedAmount;\r\n\t\tuint256 stakeFeeAmount;\r\n\t\tuint256 withdrawFeeAmount;\r\n\t\tuint256 Amount;\r\n\t\tuint256 AmountWithFee;\r\n\t\tuint256 LPAmount;\r\n\t\tuint256 LPAmountWithFee;\r\n\t\tuint256 BlockStart;\r\n\t\tuint256 BlockEnd;\r\n\t\tuint256 TotalShare;\r\n\t\tuint256 TotalReward;\r\n\t\tuint256 totalpendingReward;\r\n\t\tuint256 TotalBlock;\r\n\t\tuint256 TotalRewardShare;\r\n\t\tuint256 BlockRemain;\r\n\t\tuint256 counter;\r\n\t\tuint256 counter2;\r\n\t\taddress account;\r\n\t\tuint256 accountShare;\r\n\t\tuint256 accountReward;\r\n\t\tuint256 accountReward2;\r\n\t}\r\n\t\t\r\n\tPoolList[] public poolList;\r\n\t\r\n\tmapping(uint => address[]) private pooldatas;\r\n\tmapping (uint256 => mapping (address => UserList)) public userList;\r\n\tmapping(address => bool) public existingPools;\r\n\t\r\n\tconstructor(address DevAddress) public Ownable() {\t\r\n\t\t_DevAddress = DevAddress;\r\n\t\t\r\n\t\t_initial_Pool();\r\n\t}\r\n\t\r\n\tfunction _initial_Pool() internal{\r\n\t\t// addPool(address _lptoken, address _token, address _tokenReward, uint256 _rewardBlock, uint256 _rewardRemains, uint256 _devFee, uint256 _lockLP); // OTEN/ETH\r\n\t\t// addPool(address _lptoken, address _token, address _tokenReward, uint256 _rewardBlock, uint256 _rewardRemains, uint256 _devFee, uint256 _lockLP); // GOTEN/ETH\r\n\t\t// addPool(address _lptoken, address _token, address _tokenReward, uint256 _rewardBlock, uint256 _rewardRemains, uint256 _devFee, uint256 _lockLP); // OTEN/GOTEN\r\n\t}\r\n\t\r\n\tfunction addPool(address _lptoken, address _token, address _tokenReward, uint256 _rewardBlock, uint256 _rewardRemains, uint256 _devFee, uint256 _lockLP, uint256 _stakeFee, uint256 _withdrawFee) external onlyOwner {\r\n\t\trequire(existingPools[_lptoken] != true, \"pool exists\");\r\n\t\trequire(_devFee + _lockLP < 10000, \"Total Fee & Locked Token can't be bigger than 100%\");\r\n\t\t\r\n\t\tpoolList.push(PoolList(\r\n\t\t\tIERC20(_lptoken)\r\n\t\t\t, IERC20(_token)\r\n\t\t\t, IERC20(_tokenReward)\r\n\t\t\t, _rewardBlock\r\n\t\t\t, true\r\n\t\t\t, _rewardRemains\r\n\t\t\t, _devFee\r\n\t\t\t, _lockLP\r\n\t\t\t, 0\r\n\t\t\t, 0\r\n\t\t\t, 0\r\n\t\t\t, 0\r\n\t\t\t,_stakeFee\r\n\t\t\t,_withdrawFee\r\n\t\t));\r\n\t\t\t\t\r\n\t\texistingPools[_lptoken] = true;\r\n\t}\r\n\t\r\n\tfunction stakeLP(uint256 _pid, uint256 _amount) external nonReentrant {    \r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\trequire(_amount > 0, \"deposit something\");\r\n\t\t\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\t\t\r\n\t\trequire(poolList[_pid].pollActive == true, \"pool closed\");\r\n\t\t\r\n\t\tif(userList[_pid][msg.sender].totalstakingAmount == 0){\r\n\t\t\tpoolList[_pid].totalusers += 1;\r\n\t\t\tpooldatas[_pid].push(msg.sender);\r\n\t\t}\r\n\t\t\r\n\t\tpoolList[_pid].lptoken.safeTransferFrom(msg.sender, address(this), _amount);\r\n\t\tuint256 _stakeAmount = _amount;\r\n\t\t\r\n\t\tif(poolList[_pid].devFee > 0){\r\n\t\t\ttemp.devFeeAmount = (_amount * poolList[_pid].devFee) / _divRate;\r\n\t\t\tpoolList[_pid].lptoken.safeTransfer(_DevAddress, temp.devFeeAmount);\r\n\t\t\t\r\n\t\t\temit DevFee(msg.sender, address(poolList[_pid].lptoken), poolList[_pid].devFee, temp.devFeeAmount);\r\n\t\t\t\r\n\t\t\t_stakeAmount -= temp.devFeeAmount;\r\n\t\t}\r\n\r\n\t\tpoolList[_pid].lptotal += _stakeAmount;\r\n\t\t\r\n\t\tif(poolList[_pid].lockLP > 0){\r\n\t\t\ttemp.lockedAmount = (_amount * poolList[_pid].lockLP) / _divRate;\r\n\t\t\t\r\n\t\t\tuserList[_pid][msg.sender].lockedAmount += temp.lockedAmount;\r\n\t\t\temit LockStaked(msg.sender, address(poolList[_pid].lptoken), poolList[_pid].lockLP, temp.lockedAmount);\r\n\t\t\t\r\n\t\t\t_stakeAmount -= temp.lockedAmount;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tuserList[_pid][msg.sender].stakingAmount += _stakeAmount;\r\n\t\tuserList[_pid][msg.sender].totalstakingAmount += _stakeAmount + temp.lockedAmount;\r\n\t\t\r\n\t\temit Staked(msg.sender, address(poolList[_pid].lptoken) ,_stakeAmount);\r\n\t}\r\n\t\t\r\n\tfunction _updatePool(uint256 _pid) internal {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\ttemp.BlockStart = poolList[_pid].poolLastBlockUpdate + 1;\r\n\t\ttemp.BlockEnd = block.number;\r\n\t\tif(temp.BlockStart > temp.BlockEnd){\r\n\t\t\ttemp.BlockStart = temp.BlockEnd;\r\n\t\t}\r\n\t\ttemp.TotalBlock = temp.BlockEnd - temp.BlockStart;\r\n\t\ttemp.TotalReward = 0;\r\n\t\ttemp.totalpendingReward = poolList[_pid].totalpendingReward;\r\n\t\ttemp.BlockRemain = temp.TotalBlock;\r\n\t\t\r\n\t\tif(poolList[_pid].totalusers > 0){\r\n\t\t\ttemp.TotalShare = percent(poolList[_pid].lptotal, _decimalConverter, 4);\r\n\t\t\ttemp.TotalReward = temp.TotalBlock * poolList[_pid].rewardBlock * temp.TotalShare / _divRate;\r\n\t\t\ttemp.totalpendingReward += temp.TotalReward;\r\n\t\t}\r\n\t\t\r\n\t\tif(temp.TotalReward > 0){\r\n\t\t\tif(temp.totalpendingReward > poolList[_pid].rewardRemains){\r\n\t\t\t\tpoolList[_pid].pollActive = false;\r\n\t\t\t\ttemp.totalpendingReward = poolList[_pid].rewardRemains;\r\n\t\t\t\ttemp.BlockRemain = (poolList[_pid].rewardRemains - poolList[_pid].totalpendingReward) / (poolList[_pid].rewardBlock * temp.TotalShare / _divRate) / _decimalConverter;\r\n\t\t\t\ttemp.TotalReward = temp.BlockRemain * poolList[_pid].rewardBlock;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttemp.TotalRewardShare = temp.TotalReward;\r\n\t\t\t\r\n\t\t\tfor(temp.counter = 0; temp.counter < pooldatas[_pid].length;temp.counter++){\r\n\t\t\t\ttemp.account = pooldatas[_pid][temp.counter];\r\n\t\t\t\tif(temp.account != address(0)){\r\n\t\t\t\t\ttemp.accountShare = percent(userList[_pid][temp.account].totalstakingAmount, _decimalConverter, 4);\r\n\t\t\t\t\ttemp.accountReward = temp.BlockRemain * (poolList[_pid].rewardBlock * temp.accountShare / _divRate);\r\n\r\n\t\t\t\t\tif(temp.TotalBlock > temp.BlockRemain){\r\n\t\t\t\t\t\ttemp.accountReward2 = poolList[_pid].rewardBlock * temp.accountShare / _divRate;\r\n\t\t\t\t\t\tif((temp.TotalRewardShare + temp.accountReward2) > temp.totalpendingReward) {\r\n\t\t\t\t\t\t\ttemp.accountReward2 = temp.totalpendingReward - temp.TotalRewardShare;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttemp.TotalRewardShare += temp.accountReward2;\r\n\t\t\t\t\t\ttemp.accountReward += temp.accountReward2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tuserList[_pid][temp.account].pendingReward += temp.accountReward;\r\n\t\t\t\t\tuserList[_pid][temp.account].blockStart += block.number;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tpoolList[_pid].totalpendingReward = temp.totalpendingReward ;\r\n\t\tpoolList[_pid].poolLastBlockUpdate = temp.BlockEnd;\r\n\t\t\r\n\t}\r\n\t\t\r\n\tfunction TotalPool() public view returns (uint256) {\r\n\t\treturn poolList.length;\r\n\t}\r\n\t\r\n\t\r\n\tfunction pendingRewardsFromPool(uint256 _pid, address _user) public view returns (uint256) {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\tuint256 _pendingReward = 0;\r\n\t\t\r\n\t\ttemp.BlockStart = poolList[_pid].poolLastBlockUpdate + 1;\r\n\t\ttemp.BlockEnd = block.number;\r\n\t\tif(temp.BlockStart > temp.BlockEnd){\r\n\t\t\ttemp.BlockStart = temp.BlockEnd;\r\n\t\t}\r\n\t\ttemp.TotalBlock = temp.BlockEnd - temp.BlockStart;\r\n\t\ttemp.TotalReward = 0;\r\n\t\ttemp.totalpendingReward = poolList[_pid].totalpendingReward;\r\n\t\ttemp.BlockRemain = temp.TotalBlock;\r\n\r\n\t\tif(poolList[_pid].totalusers > 0){\r\n\t\t\ttemp.TotalShare = percent(poolList[_pid].lptotal, _decimalConverter, 4);\r\n\t\t\ttemp.TotalReward = temp.TotalBlock * poolList[_pid].rewardBlock * temp.TotalShare / _divRate;\r\n\t\t\ttemp.totalpendingReward += temp.TotalReward;\r\n\t\t}\r\n\r\n\t\tif(temp.TotalReward > 0){\r\n\t\t\tif(temp.totalpendingReward > poolList[_pid].rewardRemains){\r\n\t\t\t\ttemp.totalpendingReward = poolList[_pid].rewardRemains;\r\n\t\t\t\ttemp.BlockRemain = (poolList[_pid].rewardRemains - poolList[_pid].totalpendingReward) / (poolList[_pid].rewardBlock * temp.TotalShare / _divRate) / _decimalConverter;\r\n\t\t\t\ttemp.TotalReward = temp.BlockRemain * poolList[_pid].rewardBlock;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttemp.TotalRewardShare = temp.TotalReward;\r\n\t\t\t\r\n\t\t\tfor(temp.counter = 0; temp.counter < pooldatas[_pid].length;temp.counter++){\r\n\t\t\t\ttemp.account = pooldatas[_pid][temp.counter];\r\n\t\t\t\tif(temp.account != address(0)){\r\n\t\t\t\t\ttemp.accountShare = percent(userList[_pid][temp.account].totalstakingAmount, _decimalConverter, 4);\r\n\t\t\t\t\ttemp.accountReward = temp.BlockRemain * (poolList[_pid].rewardBlock * temp.accountShare / _divRate);\r\n\r\n\t\t\t\t\tif(temp.TotalBlock > temp.BlockRemain){\r\n\t\t\t\t\t\ttemp.accountReward2 = poolList[_pid].rewardBlock * temp.accountShare / _divRate;\r\n\t\t\t\t\t\tif((temp.TotalRewardShare + temp.accountReward2) > temp.totalpendingReward) {\r\n\t\t\t\t\t\t\ttemp.accountReward2 = temp.totalpendingReward - temp.TotalRewardShare;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttemp.TotalRewardShare += temp.accountReward2;\r\n\t\t\t\t\t\ttemp.accountReward += temp.accountReward2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(temp.account == _user){\r\n\t\t\t\t\t\t_pendingReward = userList[_pid][temp.account].pendingReward + temp.accountReward;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn _pendingReward;\r\n\t}\r\n\t\r\n\tfunction claim(uint256 _pid) public nonReentrant {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\ttemp.Amount = userList[_pid][msg.sender].pendingReward;\r\n\t\trequire(temp.Amount > 0, \"not have claimable reward\");\r\n\t\ttemp.AmountWithFee = temp.Amount;\r\n\t\t\r\n\t\tif(poolList[_pid].stakeFee > 0){\r\n\t\t\ttemp.stakeFeeAmount = (temp.Amount * poolList[_pid].stakeFee) / _divRate;\r\n\t\t\tpoolList[_pid].tokenReward.safeTransfer(_DevAddress, temp.stakeFeeAmount);\r\n\t\t\t\r\n\t\t\temit ClaimFee(msg.sender, address(poolList[_pid].tokenReward), poolList[_pid].stakeFee, temp.stakeFeeAmount);\r\n\t\t\t\r\n\t\t\ttemp.AmountWithFee -= temp.stakeFeeAmount;\r\n\t\t}\r\n\t\t\t\t\r\n\t\tif(temp.AmountWithFee > 0){\r\n\t\t\tpoolList[_pid].tokenReward.safeTransfer(msg.sender, temp.AmountWithFee);\r\n\t\t\t\r\n\t\t\tpoolList[_pid].rewardRemains -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].claimReward += temp.Amount;\r\n\t\t\tpoolList[_pid].totalpendingReward -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].pendingReward -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].blockStart = block.number;\r\n\t\t\temit ClaimReward(msg.sender, address(poolList[_pid].tokenReward) ,temp.AmountWithFee);\r\n\t\t}\r\n\t\t\r\n\t\tuserList[_pid][msg.sender].blockStart = block.number;\r\n\t\t\r\n\t}\r\n\t\t\r\n\tfunction withdraw(uint256 _pid) public nonReentrant {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\trequire(userList[_pid][msg.sender].stakingAmount > 0, \"not have withdrawn balance\");\r\n\t\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\ttemp.Amount = userList[_pid][msg.sender].pendingReward;\r\n\t\ttemp.AmountWithFee = temp.Amount;\r\n\t\ttemp.LPAmount = userList[_pid][msg.sender].stakingAmount;\r\n\t\ttemp.LPAmountWithFee = temp.LPAmount;\r\n\t\t\r\n\t\tif(poolList[_pid].stakeFee > 0){\r\n\t\t\ttemp.stakeFeeAmount = (temp.Amount * poolList[_pid].stakeFee) / _divRate;\r\n\t\t\tpoolList[_pid].tokenReward.safeTransfer(_DevAddress, temp.stakeFeeAmount);\r\n\t\t\t\r\n\t\t\temit ClaimFee(msg.sender, address(poolList[_pid].tokenReward), poolList[_pid].stakeFee, temp.stakeFeeAmount);\r\n\t\t\t\r\n\t\t\ttemp.AmountWithFee -= temp.stakeFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tif(temp.AmountWithFee > 0){\r\n\t\t\tpoolList[_pid].tokenReward.safeTransfer(msg.sender, temp.AmountWithFee);\r\n\t\t\t\r\n\t\t\tpoolList[_pid].rewardRemains -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].claimReward += temp.Amount;\r\n\t\t\tpoolList[_pid].totalpendingReward -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].pendingReward -= temp.Amount;\r\n\t\t\tuserList[_pid][msg.sender].blockStart = block.number;\r\n\t\t\t\r\n\t\t\temit ClaimReward(msg.sender, address(poolList[_pid].lptoken) ,temp.AmountWithFee);\r\n\t\t}\r\n\t\t\r\n\t\tif(poolList[_pid].withdrawFee > 0){\r\n\t\t\ttemp.withdrawFeeAmount = (temp.LPAmount * poolList[_pid].withdrawFee) / _divRate;\r\n\t\t\tpoolList[_pid].lptoken.safeTransfer(_DevAddress, temp.withdrawFeeAmount);\r\n\t\t\t\r\n\t\t\temit DevFee(msg.sender, address(poolList[_pid].lptoken), poolList[_pid].withdrawFee, temp.withdrawFeeAmount);\r\n\t\t\t\r\n\t\t\ttemp.LPAmountWithFee -= temp.withdrawFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tpoolList[_pid].lptoken.safeTransfer(msg.sender, temp.LPAmountWithFee);\r\n\t\t\r\n\t\tuserList[_pid][msg.sender].stakingAmount -= temp.LPAmount;\r\n\t\tuserList[_pid][msg.sender].totalstakingAmount -= temp.LPAmount;\r\n\t\t\t\t\r\n\t\tpoolList[_pid].lptotal -= temp.LPAmount;\r\n\t\t\r\n\t\temit Withdraw(msg.sender, address(poolList[_pid].lptoken) ,temp.LPAmountWithFee);\r\n\t\t\r\n\t\tif(userList[_pid][msg.sender].totalstakingAmount == 0){\r\n\t\t\tpoolList[_pid].totalusers -= 1;\r\n\t\t\tif(poolList[_pid].totalusers  > 0){\r\n\t\t\t\tfor(uint256 i = 0; i < pooldatas[_pid].length; i++) {\r\n\t\t\t\t\tif(pooldatas[_pid][i] == msg.sender){\r\n\t\t\t\t\t\tdelete pooldatas[_pid][i];\r\n\t\t\t\t\t\ti = pooldatas[_pid].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete pooldatas[_pid];\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tfunction emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n\t\tPoolTemp memory temp;\r\n\t\t\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\trequire(userList[_pid][msg.sender].stakingAmount > 0, \"not have balance\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\ttemp.Amount = userList[_pid][msg.sender].pendingReward;\r\n\t\ttemp.LPAmount = userList[_pid][msg.sender].stakingAmount;\r\n\t\ttemp.LPAmountWithFee = temp.LPAmount;\r\n\t\t\r\n\t\tif(poolList[_pid].withdrawFee > 0){\r\n\t\t\ttemp.withdrawFeeAmount = (temp.LPAmount * poolList[_pid].withdrawFee) / _divRate;\r\n\t\t\tpoolList[_pid].lptoken.safeTransfer(_DevAddress, temp.withdrawFeeAmount);\r\n\t\t\t\r\n\t\t\temit DevFee(msg.sender, address(poolList[_pid].lptoken), poolList[_pid].withdrawFee, temp.withdrawFeeAmount);\r\n\t\t\t\r\n\t\t\ttemp.LPAmountWithFee -= temp.withdrawFeeAmount;\r\n\t\t}\r\n\t\t\r\n\t\tpoolList[_pid].lptoken.safeTransfer(msg.sender, temp.LPAmountWithFee);\r\n\t\t\r\n\t\tpoolList[_pid].totalpendingReward -= temp.Amount;\r\n\t\tuserList[_pid][msg.sender].pendingReward = 0;\r\n\t\tuserList[_pid][msg.sender].stakingAmount -= temp.LPAmount;\r\n\t\tuserList[_pid][msg.sender].totalstakingAmount -= temp.LPAmount;\r\n\t\tuserList[_pid][msg.sender].blockStart = block.number;\r\n\t\t\t\t\r\n\t\tpoolList[_pid].lptotal -= temp.LPAmount;\r\n\t\t\r\n\t\temit EmergencyWithdraw(msg.sender, address(poolList[_pid].lptoken) ,temp.LPAmountWithFee);\r\n\t\t\r\n\t\tif(userList[_pid][msg.sender].totalstakingAmount == 0){\r\n\t\t\tpoolList[_pid].totalusers -= 1;\r\n\t\t\tif(poolList[_pid].totalusers  > 0){\r\n\t\t\t\tfor(uint256 i = 0; i < pooldatas[_pid].length; i++) {\r\n\t\t\t\t\tif(pooldatas[_pid][i] == msg.sender){\r\n\t\t\t\t\t\tdelete pooldatas[_pid][i];\r\n\t\t\t\t\t\ti = pooldatas[_pid].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete pooldatas[_pid];\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction percent(uint numerator, uint denominator, uint precision) internal pure returns(uint quotient) {\r\n\t\tuint _numerator  = numerator * 10 ** (precision+1);\r\n\t\tuint _quotient =  ((_numerator / denominator) + 5) / 10;\r\n\t\treturn ( _quotient);\r\n\t}\r\n\t\r\n\tfunction updateReward(uint _pid, uint256 _rewardBlock) external onlyOwner {\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\tpoolList[_pid].rewardBlock = _rewardBlock;\r\n\t}\r\n\t\r\n\tfunction updatePoolFee(uint _pid, uint256 _devFee, uint256 _lockLP, uint256 _stakeFee, uint256 _withdrawFee) external onlyOwner {\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\trequire(_devFee + _lockLP < 10000, \"Total Fee & Locked Token can't be bigger than 100%\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\tpoolList[_pid].devFee = _devFee;\r\n\t\tpoolList[_pid].lockLP = _lockLP;\r\n\t\tpoolList[_pid].stakeFee = _stakeFee;\r\n\t\tpoolList[_pid].withdrawFee = _withdrawFee;\r\n\t}\r\n\t\r\n\tfunction addRewardSupply(uint _pid, uint256 _addAmount) external onlyOwner {\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\tpoolList[_pid].rewardRemains += _addAmount;\r\n\t\tpoolList[_pid].pollActive = true;\r\n\t}\r\n\t\r\n\tfunction decreaseRewardSupply(uint _pid, uint256 _decreaseAmount) external onlyOwner {\r\n\t\tuint256 countPool = poolList.length;\r\n\t\trequire(_pid < countPool, \"Not a valid Pool\");\r\n\t\t\r\n\t\t_updatePool(_pid);\r\n\t\t\r\n\t\trequire(poolList[_pid].rewardRemains - poolList[_pid].totalpendingReward > _decreaseAmount, \"Cant Decrease Reward Remains\");\r\n\t\t\t\t\r\n\t\tpoolList[_pid].rewardRemains -= _decreaseAmount;\r\n\t}\r\n\t\r\n\tfunction updateDevAddress(address DevAddress) external onlyOwner {\r\n\t\t_DevAddress = DevAddress;\r\n\t}\r\n\t\r\n\tevent Staked(address indexed user, address lptoken, uint256 amount);\r\n\tevent LockStaked(address indexed user, address lptoken, uint256 fee, uint256 amount);\r\n\tevent DevFee(address indexed user, address lptoken, uint256 fee, uint256 amount);\r\n\tevent ClaimReward(address indexed user, address tokenReward, uint256 amount);\r\n\tevent ClaimFee(address indexed user, address tokenReward, uint256 fee, uint256 amount);\r\n\tevent Withdraw(address indexed user, address lptoken, uint256 amount);\r\n\tevent EmergencyWithdraw(address indexed user, address lptoken, uint256 amount);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DevAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRemains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existingPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardsFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolList\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pollActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardRemains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lptotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalusers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalpendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLastBlockUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"DevAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"updatePoolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardBlock\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalstakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OTEN_Farming","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000564b8ad93064ff1535538e4cc35f3cdb2241c1a6","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://513651096f6c4282e1979d025d9061182d1e8024c6b933ec77546e1df979a8e2"}]}