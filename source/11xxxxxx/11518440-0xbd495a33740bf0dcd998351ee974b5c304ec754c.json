{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;      \r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\nabstract contract IDSProxy {\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n\r\n    function owner() public view virtual returns (address);\r\n}      \r\n\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"\");\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}      \r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}      \r\n\r\n\r\n\r\n\r\n\r\nabstract contract IWETH {\r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual returns (bool);\r\n\r\n    function deposit() public payable virtual;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}      \r\n\r\n\r\n\r\ninterface IExchangeV3 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\r\n}      \r\n\r\n\r\n\r\nabstract contract IDFSRegistry {\r\n \r\n    function getAddr(bytes32 _id) public view virtual returns (address);\r\n\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public virtual;\r\n\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\r\n\r\n    function approveContractChange(bytes32 _id) public virtual;\r\n\r\n    function cancelContractChange(bytes32 _id) public virtual;\r\n\r\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\r\n}      \r\n\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}      \r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {ERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}      \r\n\r\n\r\n\r\ncontract AdminVault {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        admin = _admin;\r\n    }\r\n\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title AdminAuth Handles owner/admin priviligies over smart contracts\r\ncontract AdminAuth {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\r\n\r\n    modifier onlyOwner() {\r\n        require(adminVault.owner() == msg.sender, \"msg.sender not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(adminVault.admin() == msg.sender, \"msg.sender not admin\");\r\n        _;\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Changes the admin vault that is currently used\r\n    /// @param _newAdminVault Address of the new Admin Vault contract\r\n    function changeAdminVault(address _newAdminVault) public onlyAdmin {\r\n        adminVault = AdminVault(_newAdminVault);\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\ncontract ZrxAllowlist is AdminAuth {\r\n    mapping(address => bool) public zrxAllowlist;\r\n    mapping(address => bool) private nonPayableAddrs;\r\n\r\n    constructor() {\r\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\r\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\r\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\r\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n\r\n        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n    }\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n\r\n    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n        nonPayableAddrs[_nonPayableAddr] = true;\r\n    }\r\n\r\n    function removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\r\n        nonPayableAddrs[_nonPayableAddr] = false;\r\n    }\r\n\r\n    function isNonPayableAddr(address _addr) public view returns (bool) {\r\n        return nonPayableAddrs[_addr];\r\n    }\r\n}      \r\n\r\n\r\n\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ExchangeActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n}      \r\n\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0, \"Wrong fee value\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        require(msg.sender == owner, \"Only owner\");\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n/// @title Stores the fee recipient address and allows the owner to change it\r\ncontract FeeRecipient is AdminAuth {\r\n\r\n    address public wallet;\r\n\r\n    constructor(address _newWallet) {\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    function getFeeAddr() public view returns (address) {\r\n        return wallet;\r\n    }\r\n\r\n    function changeWalletAddr(address _newWallet) public onlyOwner {\r\n        wallet = _newWallet;\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\r\n\taddress public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function approveToken(address _tokenAddr, address _to, uint _amount) internal {\r\n        if (_tokenAddr == ETH_ADDR) return;\r\n        \r\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\r\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function pullTokens(address _token, address _from, uint256 _amount) internal returns (uint) {\r\n\r\n        // handle max uint amount\r\n        if (_amount == uint(-1)) {\r\n            uint allowance = uint (-1);\r\n\r\n            if (_token == ETH_ADDR) {\r\n                allowance = IERC20(_token).allowance(address(this), _from);\r\n            }\r\n\r\n            uint balance = getBalance(_token, _from);\r\n\r\n            _amount = (balance > allowance) ? allowance : balance;\r\n        }\r\n\r\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\r\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint) {\r\n        if (_amount == uint(-1)) {\r\n            _amount = getBalance(_token, address(this));\r\n        }\r\n\r\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\r\n            if (_token != ETH_ADDR) {\r\n                IERC20(_token).safeTransfer(_to, _amount);\r\n            } else {\r\n                payable(_to).transfer(_amount);\r\n            }\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function convertAndDepositToWeth(address _tokenAddr, uint _amount) internal returns (address) {\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            IWETH(WETH_ADDR).deposit{value: _amount}();\r\n            return WETH_ADDR;\r\n        } else {\r\n            return _tokenAddr;\r\n        }\r\n    }\r\n\r\n    function withdrawWeth(uint _amount) internal {\r\n        IWETH(WETH_ADDR).withdraw(_amount);\r\n    }\r\n\r\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint) {\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            return _acc.balance;\r\n        } else {\r\n            return IERC20(_tokenAddr).balanceOf(_acc);\r\n        }\r\n    }\r\n\r\n    function convertToWeth(address _tokenAddr) internal pure returns (address){\r\n        return _tokenAddr == ETH_ADDR ? WETH_ADDR : _tokenAddr;\r\n    }\r\n\r\n    function convertToEth(address _tokenAddr) internal pure returns (address){\r\n        return _tokenAddr == WETH_ADDR ? ETH_ADDR : _tokenAddr;\r\n    }\r\n\r\n    function getTokenDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == ETH_ADDR) return 18;\r\n\r\n        return IERC20(_token).decimals();\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeHelper is TokenUtils {\r\n    string public constant ERR_OFFCHAIN_DATA_INVALID = \"Offchain data invalid\";\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    function sendLeftover(\r\n        address _srcAddr,\r\n        address _destAddr,\r\n        address payable _to\r\n    ) internal {\r\n        // clean out any eth leftover\r\n        withdrawTokens(ETH_ADDR, _to, uint256(-1));\r\n\r\n        withdrawTokens(_srcAddr, _to, uint256(-1));\r\n        withdrawTokens(_destAddr, _to, uint256(-1));\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        require(bs.length >= start + 32, \"slicing out of range\");\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    function writeUint256(\r\n        bytes memory _b,\r\n        uint256 _index,\r\n        uint256 _input\r\n    ) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert(ERR_OFFCHAIN_DATA_INVALID);\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\ncontract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tconstructor() {\r\n\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\r\n\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\r\n\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\r\n\t}\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}      \r\n\r\n\r\n\r\n   \r\n\r\n\r\n\r\nabstract contract IOffchainWrapper is DFSExchangeData {\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ExchangeActionType _type\r\n    ) virtual public payable returns (bool success, uint256);\r\n}      \r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public constant ERR_SLIPPAGE_HIT = \"Slippage hit\";\r\n    string public constant ERR_DEST_AMOUNT_MISSING = \"Dest amount missing\";\r\n    string public constant ERR_WRAPPER_INVALID = \"Wrapper invalid\";\r\n    string public constant ERR_NOT_ZEROX_EXCHANGE = \"Zerox exchange invalid\";\r\n\r\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\r\n\r\n    FeeRecipient public constant feeRecipient =\r\n        FeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint256) {\r\n        uint256 amountWithoutFee = exData.srcAmount;\r\n        address wrapper = exData.offchainData.wrapper;\r\n        address originalSrcAddr = exData.srcAddr;\r\n        bool offChainSwapSuccess;\r\n\r\n        uint256 destBalanceBefore = getBalance(convertToEth(exData.destAddr), address(this));\r\n\r\n        // Takes DFS exchange fee\r\n        exData.srcAmount -= getFee(\r\n            exData.srcAmount,\r\n            exData.user,\r\n            exData.srcAddr,\r\n            exData.dfsFeeDivider\r\n        );\r\n\r\n        // converts from ETH -> WETH if needed\r\n        exData.srcAddr = convertAndDepositToWeth(exData.srcAddr, exData.srcAmount);\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (offChainSwapSuccess, ) = offChainSwap(exData, ExchangeActionType.SELL);\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!offChainSwapSuccess) {\r\n            onChainSwap(exData, ExchangeActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        withdrawAllWeth();\r\n\r\n        uint256 destBalanceAfter = getBalance(convertToEth(exData.destAddr), address(this));\r\n        uint256 amountBought = sub(destBalanceAfter, destBalanceBefore);\r\n\r\n        // check slippage\r\n        require(amountBought >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\r\n\r\n        // revert back exData changes to keep it consistent\r\n        exData.srcAddr = originalSrcAddr;\r\n        exData.srcAmount = amountWithoutFee;\r\n\r\n        return (wrapper, amountBought);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Usefull for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint256) {\r\n        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\r\n\r\n        uint256 amountWithoutFee = exData.srcAmount;\r\n        address wrapper = exData.offchainData.wrapper;\r\n        address originalSrcAddr = exData.srcAddr;\r\n        uint256 amountSold;\r\n        bool offChainSwapSuccess;\r\n\r\n        uint256 destBalanceBefore = getBalance(convertToEth(exData.destAddr), address(this));\r\n\r\n        // Takes DFS exchange fee\r\n        exData.srcAmount -= getFee(\r\n            exData.srcAmount,\r\n            exData.user,\r\n            exData.srcAddr,\r\n            exData.dfsFeeDivider\r\n        );\r\n\r\n        // converts from ETH -> WETH if needed\r\n        exData.srcAddr = convertAndDepositToWeth(exData.srcAddr, exData.srcAmount);\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (offChainSwapSuccess, amountSold) = offChainSwap(exData, ExchangeActionType.BUY);\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!offChainSwapSuccess) {\r\n            amountSold = onChainSwap(exData, ExchangeActionType.BUY);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        // if anything is left in weth, pull it to user as eth\r\n        withdrawAllWeth();\r\n\r\n        uint256 destBalanceAfter = getBalance(convertToEth(exData.destAddr), address(this));\r\n        uint256 amountBought = sub(destBalanceAfter, destBalanceBefore);\r\n\r\n        // check slippage\r\n        require(amountBought >= exData.destAmount, ERR_SLIPPAGE_HIT);\r\n\r\n        // revert back exData changes to keep it consistent\r\n        exData.srcAddr = originalSrcAddr;\r\n        exData.srcAmount = amountWithoutFee;\r\n\r\n        return (wrapper, amountSold);\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    function offChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\r\n        private\r\n        returns (bool success, uint256)\r\n    {\r\n        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (\r\n            !SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)\r\n        ) {\r\n            return (false, 0);\r\n        }\r\n\r\n        // send src amount\r\n        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\r\n\r\n        return\r\n            IOffchainWrapper(_exData.offchainData.wrapper).takeOrder{\r\n                value: _exData.offchainData.protocolFee\r\n            }(_exData, _type);\r\n    }\r\n\r\n    /// @notice Calls wraper contract for exchage to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function onChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\r\n        internal\r\n        returns (uint256 swapedTokens)\r\n    {\r\n        require(\r\n            SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper),\r\n            ERR_WRAPPER_INVALID\r\n        );\r\n\r\n        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n\r\n        if (_type == ExchangeActionType.SELL) {\r\n            swapedTokens = IExchangeV3(_exData.wrapper).sell(\r\n                _exData.srcAddr,\r\n                _exData.destAddr,\r\n                _exData.srcAmount,\r\n                _exData.wrapperData\r\n            );\r\n        } else {\r\n            swapedTokens = IExchangeV3(_exData.wrapper).buy(\r\n                _exData.srcAddr,\r\n                _exData.destAddr,\r\n                _exData.destAmount,\r\n                _exData.wrapperData\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawAllWeth() internal {\r\n        uint256 wethBalance = getBalance(WETH_ADDR, address(this));\r\n\r\n        if (wethBalance > 0) {\r\n            withdrawWeth(wethBalance);\r\n        }\r\n    }\r\n\r\n    /// @notice Takes a feePercentage and sends it to wallet\r\n    /// @param _amount Dai amount of the whole trade\r\n    /// @param _user Address of the user\r\n    /// @param _token Address of the token\r\n    /// @param _dfsFeeDivider Dfs fee divider\r\n    /// @return feeAmount Amount in Dai owner earned on the fee\r\n    function getFee(\r\n        uint256 _amount,\r\n        address _user,\r\n        address _token,\r\n        uint256 _dfsFeeDivider\r\n    ) internal returns (uint256 feeAmount) {\r\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\r\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\r\n        }\r\n\r\n        if (_dfsFeeDivider == 0) {\r\n            feeAmount = 0;\r\n        } else {\r\n            feeAmount = _amount / _dfsFeeDivider;\r\n\r\n            // fee can't go over 10% of the whole amount\r\n            if (feeAmount > (_amount / 10)) {\r\n                feeAmount = _amount / 10;\r\n            }\r\n\r\n            address walletAddr = feeRecipient.getFeeAddr();\r\n\r\n            withdrawTokens(_token, walletAddr, feeAmount);\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n}      \r\n\r\n\r\n\r\n\r\n\r\nabstract contract IGasToken is IERC20 {\r\n    function free(uint256 value) public virtual returns (bool success);\r\n\r\n    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\r\n\r\n    function freeFrom(address from, uint256 value) public virtual returns (bool success);\r\n\r\n    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\r\n}      \r\n\r\n\r\n\r\n\r\n\r\ncontract GasBurner {\r\n    IGasToken public constant gasToken = IGasToken(0x0000000000b3F879cb30FE243b4Dfee438691c04);\r\n    IGasToken public constant chiToken = IGasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier burnGas {\r\n        uint gasBefore = gasleft();\r\n\r\n        _;\r\n\r\n        uint gasSpent = 21000 + gasBefore - gasleft() + 16 * msg.data.length;\r\n        uint gasTokenAmount = (gasSpent + 14154) / 41130;\r\n\r\n        if (gasToken.balanceOf(address(this)) >= gasTokenAmount) {\r\n            gasToken.free(gasTokenAmount);\r\n        } else if (chiToken.balanceOf(address(this)) >= gasTokenAmount) {\r\n            chiToken.free(gasTokenAmount);\r\n        }\r\n    }\r\n}      \r\n\r\n\r\n\r\ncontract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(\r\n        address _contract,\r\n        address _caller,\r\n        string memory _logName,\r\n        bytes memory _data\r\n    ) public {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}      \r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Stores all the important DFS addresses and can be changed (timelock)\r\ncontract DFSRegistry is AdminAuth {\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_ENTRY_ALREADY_EXISTS = \"Entry id already exists\";\r\n    string public constant ERR_ENTRY_NON_EXISTENT = \"Entry id doesn't exists\";\r\n    string public constant ERR_ENTRY_NOT_IN_CHANGE = \"Entry not in change process\";\r\n    string public constant ERR_WAIT_PERIOD_SHORTER = \"New wait period must be bigger\";\r\n    string public constant ERR_CHANGE_NOT_READY = \"Change not ready yet\";\r\n    string public constant ERR_EMPTY_PREV_ADDR = \"Previous addr is 0\";\r\n    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = \"Already in contract change\";\r\n    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = \"Already in wait period change\";\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes32 => Entry) public entries;\r\n    mapping(bytes32 => address) public previousAddresses;\r\n\r\n    mapping(bytes32 => address) public pendingAddresses;\r\n    mapping(bytes32 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registred address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes32 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registred\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes32 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        // Remember tha address so we can revert back to old addr if needed\r\n        previousAddresses[_id] = _contractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"AddNewContract\",\r\n            abi.encode(_id, _contractAddr, _waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Revertes to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"RevertToPreviousAddress\",\r\n            abi.encode(_id, currentAddr, previousAddresses[_id])\r\n        );\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartContractChange\",\r\n            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartWaitPeriodChange\",\r\n            abi.encode(_id, _newWaitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n}      \r\n\r\n\r\n   \r\n\r\n\r\n\r\n/// @title Implements Action interface and common helpers for pasing inputs\r\nabstract contract ActionBase {\r\n    address public constant REGISTRY_ADDR = 0xB0e1682D17A96E8551191c089673346dF7e1D467;\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\r\n    string public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\r\n\r\n    /// @dev Subscription params index range [128, 255]\r\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\r\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\r\n\r\n    /// @dev Return params index range [1, 127]\r\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\r\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\r\n\r\n    /// @dev If the input value should not be replaced\r\n    uint8 public constant NO_PARAM_MAPPING = 0;\r\n\r\n    /// @dev We need to parse Flash loan actions in a different way\r\n    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\r\n\r\n    /// @notice Parses inputs and runs the implemented action through a proxy\r\n    /// @dev Is called by the TaskExecutor chaining actions together\r\n    /// @param _callData Array of input values each value encoded as bytes\r\n    /// @param _subData Array of subscribed vales, replaces input values if specified\r\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\r\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\r\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\r\n    function executeAction(\r\n        bytes[] memory _callData,\r\n        bytes[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual returns (bytes32);\r\n\r\n    /// @notice Parses inputs and runs the single implemented action through a proxy\r\n    /// @dev Used to save gas when executing a single action directly\r\n    function executeActionDirect(bytes[] memory _callData) public virtual payable;\r\n\r\n    /// @notice Returns the type of action we are implementing\r\n    function actionType() public pure virtual returns (uint8);\r\n\r\n\r\n    //////////////////////////// HELPER METHODS ////////////////////////////\r\n\r\n    /// @notice Given an uint256 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamUint(\r\n        uint _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (uint) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n\r\n    /// @notice Given an addr input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamAddr(\r\n        address _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (address) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Given an bytes32 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamABytes32(\r\n        bytes32 _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (bytes32) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = (_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\r\n    /// @param _type Indicated the type of the input\r\n    function isReplacable(uint8 _type) internal pure returns (bool) {\r\n        return _type != NO_PARAM_MAPPING;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value is in the return value range\r\n    /// @param _type Indicated the type of the input\r\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\r\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in return array value\r\n    /// @param _type Indicated the type of the input\r\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\r\n\r\n        return (_type - RETURN_MIN_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in sub array value\r\n    /// @param _type Indicated the type of the input\r\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\r\n\r\n        return (_type - SUB_MIN_INDEX_VALUE);\r\n    }\r\n}      \r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title A exchange sell action through the dfs exchange\r\ncontract DFSBuy is ActionBase, DFSExchangeCore, GasBurner {\r\n    uint256 internal constant RECIPIE_FEE = 400;\r\n    uint256 internal constant DIRECT_FEE = 800;\r\n\r\n    /// @inheritdoc ActionBase\r\n    function executeAction(\r\n        bytes[] memory _callData,\r\n        bytes[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable override returns (bytes32) {\r\n        (ExchangeData memory exchangeData, address from, address to) = parseInputs(_callData);\r\n\r\n        exchangeData.srcAddr = _parseParamAddr(\r\n            exchangeData.srcAddr,\r\n            _paramMapping[0],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n        exchangeData.destAddr = _parseParamAddr(\r\n            exchangeData.destAddr,\r\n            _paramMapping[1],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n\r\n        exchangeData.destAmount = _parseParamUint(\r\n            exchangeData.destAmount,\r\n            _paramMapping[2],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n        from = _parseParamAddr(from, _paramMapping[3], _subData, _returnValues);\r\n        to = _parseParamAddr(to, _paramMapping[4], _subData, _returnValues);\r\n\r\n        uint256 exchangedAmount = _dfsBuy(exchangeData, from, to, RECIPIE_FEE);\r\n\r\n        return bytes32(exchangedAmount);\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    function executeActionDirect(bytes[] memory _callData) public payable override burnGas {\r\n        (ExchangeData memory exchangeData, address from, address to) = parseInputs(_callData);\r\n\r\n        _dfsBuy(exchangeData, from, to, DIRECT_FEE);\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    function actionType() public pure override returns (uint8) {\r\n        return uint8(ActionType.STANDARD_ACTION);\r\n    }\r\n\r\n    //////////////////////////// ACTION LOGIC ////////////////////////////\r\n\r\n    function _dfsBuy(\r\n        ExchangeData memory exchangeData,\r\n        address _from,\r\n        address _to,\r\n        uint256 _fee\r\n    ) internal returns (uint256) {\r\n        pullTokens(exchangeData.srcAddr, _from, exchangeData.srcAmount);\r\n\r\n        uint256 balanceBefore =\r\n            getBalance(exchangeData.srcAddr, address(this)) - exchangeData.srcAmount;\r\n\r\n        exchangeData.user = getUserAddress();\r\n        exchangeData.dfsFeeDivider = _fee;\r\n\r\n        (address wrapper, uint256 amountSold) = _buy(exchangeData);\r\n\r\n        withdrawTokens(exchangeData.destAddr, _to, exchangeData.destAmount);\r\n\r\n        withdrawTokens(\r\n            exchangeData.srcAddr,\r\n            _from,\r\n            getBalance(exchangeData.srcAddr, address(this)) - balanceBefore\r\n        );\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"DfsBuy\",\r\n            abi.encode(\r\n                wrapper,\r\n                exchangeData.srcAddr,\r\n                exchangeData.destAddr,\r\n                amountSold,\r\n                exchangeData.destAmount\r\n            )\r\n        );\r\n\r\n        return amountSold;\r\n    }\r\n\r\n    function parseInputs(bytes[] memory _callData)\r\n        public\r\n        pure\r\n        returns (\r\n            ExchangeData memory exchangeData,\r\n            address from,\r\n            address to\r\n        )\r\n    {\r\n        exchangeData = unpackExchangeData(_callData[0]);\r\n\r\n        from = abi.decode(_callData[1], (address));\r\n        to = abi.decode(_callData[2], (address));\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        IDSProxy proxy = IDSProxy(payable(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_DEST_AMOUNT_MISSING\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_NOT_ZEROX_EXCHANGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_OFFCHAIN_DATA_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_RETURN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SLIPPAGE_HIT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SUB_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_WRAPPER_INVALID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAVER_EXCHANGE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZRX_ALLOWLIST_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chiToken\",\"outputs\":[{\"internalType\":\"contract IGasToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_subData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_callData\",\"type\":\"bytes[]\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract FeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasToken\",\"outputs\":[{\"internalType\":\"contract IGasToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_callData\",\"type\":\"bytes[]\"}],\"name\":\"parseInputs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DFSBuy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://24017e01fba0e5a77e71993d14e6ceb4b359a8ae49f6549fea1ae3b1b3d20264"}]}