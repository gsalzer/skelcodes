{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ethc2cWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface UserTrustLists {\\n    function inTrustLists(address user, address people) external returns (bool);\\n}\\n\\ncontract Ethc2cWETH {\\n    using SafeMath for uint256;\\n\\n    IERC20 WETH;\\n    IERC20 HAMMER;\\n    UserTrustLists userTrust;\\n    address public feeTo;\\n\\n    constructor(address _WETH, address _HAMMER, address _userTrust, address _feeTo) {\\n        WETH = IERC20(_WETH);\\n        HAMMER = IERC20(_HAMMER);\\n        userTrust = UserTrustLists(_userTrust);\\n        feeTo = _feeTo;\\n    }\\n\\n     /*卖单状态\\n    卖家发布卖单   SellerCreated\\n    卖家暂停卖单   SellerSuspend \\n    卖家取消卖单   SellerCancelled\\n    卖单超时赎回   SellerRedeem\\n\\n    买家提交买单    BuyerSubmit\\n    买家确认付款    BuyerConfirmPayment\\n\\n    卖家确认收款   SellerConfirmReceive\\n    卖家超时未确认 SellerOutofTime\\n    */\\n    enum State {SellerCreated,\\n                SellerSuspend,\\n                SellerCancelled, \\n                SellerRedeem, \\n                BuyerSubmit, \\n                BuyerConfirmPayment,\\n                SellerConfirmReceive, \\n                SellerOutofTime}\\n   \\n    uint256 public id = 0;\\n    uint256 public orderValidity = 4 hours;\\n    uint256 public paymentValidity = 2 hours;\\n\\n    struct OrderMessage\\n    {\\n        uint256 orderNumber;\\n        uint256 amount;\\n        uint256 price;\\n        bool    isTrust;\\n        address seller;\\n        address buyer;\\n        uint256 submitTime;\\n        uint8   numberOfRounds;\\n        State   state;\\n    }\\n\\n    mapping(uint256 =\\u003e OrderMessage) public orders;\\n    \\n    modifier onlySeller(uint256 _uid) {\\n        require(msg.sender == orders[_uid].seller);\\n        _;\\n    }\\n    \\n    modifier onlyBuyer(uint256 _uid) {\\n        require(msg.sender == orders[_uid].buyer);\\n        _;\\n    }\\n    \\n    modifier inState(uint256 _uid, State _state) {\\n        require(orders[_uid].state == _state);\\n        _;\\n    }\\n    \\n    modifier orderInTime(uint256 _uid) {\\n        require(block.timestamp \\u003c= orders[_uid].submitTime + orderValidity);\\n        _;\\n    }\\n    \\n    modifier orderOutOfTime(uint256 _uid) {\\n        require(block.timestamp \\u003e orders[_uid].submitTime + orderValidity);\\n        _;\\n    }\\n\\n    modifier ConfirmInTime(uint256 _uid) {\\n        require(block.timestamp \\u003c= orders[_uid].submitTime + paymentValidity);\\n        _;\\n    }\\n    \\n    modifier ConfirmOutOfTime(uint256 _uid) {\\n        require(block.timestamp \\u003e orders[_uid].submitTime + paymentValidity);\\n        _;\\n    }\\n\\n    //事件日志   \\n    event SetOrder(uint256 indexed orderNumber, address seller, uint256 amount, bool isTrust, uint256 orderCreated);\\n    event SellerSuspend(uint256 indexed orderNumber, address seller, uint256 amount, uint256 orderSuspend);\\n    event CancelOrder(uint256 indexed orderNumber, address seller, uint256 amount, uint256 cancelTime);\\n    event SellerRestart(uint256 indexed orderNumber, address seller, uint256 amount, uint256 restartTime);\\n    event SellerOutRestart( uint256 indexed orderNumber, address seller, uint256 amount, uint256 outRestartTime);\\n    event SellerRedeem(uint256 indexed orderNumber, address seller, uint256 amount, uint256 redeemTime);\\n    event BuyerSubmit(uint256 indexed orderNumber, address seller, uint256 amount, address buyer, uint256 buyerSubmitTime);\\n    event BuyerCancelPayment(uint256 indexed orderNumber, address seller, uint256 amount,  address buyer, uint256 buyerCancelTime);\\n    event BuyerConfirmPayment(uint256 indexed orderNumber, address seller, uint256 amount, address buyer, uint256 buyerConfirmTime);\\n    event BuyerOutofTimeRestart(uint256 indexed orderNumber, address seller,uint256 amount, address buyer, uint256 restart);\\n    event SellerConfirmReceive(uint256 indexed orderNumber, address seller, uint256 amount, address buyer, uint256 sellerConfirmTime);\\n    event FallbackToBuyer(uint256 indexed orderNumber, address seller, uint256 amount, address buyer, uint256 fallbackTime); \\n    event SellerOutofTime(uint256 indexed orderNumber, address seller, uint256 amount, address buyer, uint256 buyerWithdraw);\\n\\n    //卖家发布卖单\\n    function setOrder(uint256 _orderNumber, uint256 _amount, uint256 _price, bool _isTrust)\\n        public \\n    {       \\n        require(_amount \\u003e 0);\\n        id += 1;\\n        orders[id].orderNumber = _orderNumber;\\n        orders[id].seller = msg.sender;\\n        orders[id].amount = _amount;\\n        orders[id].price = _price;\\n        orders[id].isTrust = _isTrust;\\n        orders[id].submitTime = block.timestamp;\\n        orders[id].numberOfRounds = 0;\\n\\n        WETH.transferFrom(msg.sender, feeTo, _amount.div(1000));\\n        WETH.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit SetOrder(_orderNumber, msg.sender, _amount, _isTrust, block.timestamp);\\n    }\\n\\n    //卖家暂停卖单\\n    function sellerSuspend(uint256 _uid)\\n        public\\n        inState(_uid, State.SellerCreated)\\n        onlySeller(_uid)\\n        orderInTime(_uid)\\n    {\\n        orders[_uid].state = State.SellerSuspend;\\n        emit SellerSuspend(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, block.timestamp);\\n    }\\n\\n    //卖家取消卖单并赎回资金\\n    function cancelOrder(uint256 _uid)\\n        public\\n        inState(_uid, State.SellerCreated)\\n        onlySeller(_uid)\\n        orderInTime(_uid)\\n    {\\n        orders[_uid].state = State.SellerCancelled;\\n        WETH.transfer(msg.sender, orders[_uid].amount);\\n        emit CancelOrder(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, block.timestamp);\\n    }\\n\\n    //卖单暂停后，卖家重启卖单\\n    function sellerRestart(uint256 _uid)\\n        public\\n        inState(_uid, State.SellerSuspend)\\n        onlySeller(_uid)\\n    {\\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].state = State.SellerCreated;\\n        emit SellerRestart(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, block.timestamp);\\n    }\\n\\n    //卖单超时，卖家重启卖单\\n    function sellerOutRestart(uint256 _uid)\\n        public\\n        inState(_uid, State.SellerCreated)\\n        onlySeller(_uid)\\n        orderOutOfTime(_uid)\\n    {\\n        orders[_uid].submitTime = block.timestamp;\\n        emit SellerOutRestart(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, block.timestamp);\\n    }\\n\\n    //卖单超时，卖家赎回资金\\n    function sellerRedeem(uint256 _uid)\\n        public\\n        inState(_uid, State.SellerCreated)\\n        onlySeller(_uid)\\n        orderOutOfTime(_uid)\\n    {\\n        orders[_uid].state = State.SellerRedeem;\\n        WETH.transfer(msg.sender, orders[_uid].amount);\\n        emit SellerRedeem(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, block.timestamp);\\n    }\\n\\n    //买家提交买单\\n    function buyerSubmit(uint256 _uid) \\n        public\\n        inState(_uid, State.SellerCreated)\\n        orderInTime(_uid)\\n    {   \\n        require(orders[_uid].seller != msg.sender);\\n\\n        if(orders[_uid].isTrust == true){\\n            require(userTrust.inTrustLists(orders[_uid].seller, msg.sender));\\n        }\\n\\n        orders[_uid].buyer = msg.sender;\\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].state = State.BuyerSubmit;\\n        emit BuyerSubmit(orders[_uid].orderNumber, orders[_uid].seller, orders[_uid].amount, msg.sender, block.timestamp);\\n    }\\n\\n    //买家取消买单\\n    function buyerCancelPayment(uint256 _uid) \\n        public\\n        inState(_uid, State.BuyerSubmit)\\n        onlyBuyer(_uid)\\n        ConfirmInTime(_uid)\\n    {   \\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].buyer = address(0);\\n        orders[_uid].state = State.SellerCreated;\\n        emit BuyerCancelPayment(orders[_uid].orderNumber, orders[_uid].seller, orders[_uid].amount, msg.sender, block.timestamp);\\n    }\\n\\n    //买家确认付款\\n    function buyerConfirmPayment(uint256 _uid) \\n        public\\n        inState(_uid, State.BuyerSubmit)\\n        onlyBuyer(_uid)\\n        ConfirmInTime(_uid)\\n    {   \\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].numberOfRounds += 1;\\n        orders[_uid].state = State.BuyerConfirmPayment;\\n        emit BuyerConfirmPayment(orders[_uid].orderNumber, orders[_uid].seller, orders[_uid].amount, msg.sender, block.timestamp);\\n    }\\n\\n    //买家超时未付款，卖家重置卖单\\n    function buyerOutofTimeRestart(uint256 _uid) \\n        public\\n        inState(_uid, State.BuyerSubmit)\\n        onlySeller(_uid)\\n        ConfirmOutOfTime(_uid)\\n    {   \\n        emit BuyerOutofTimeRestart(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, orders[_uid].buyer, block.timestamp);\\n\\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].buyer = address(0);\\n        orders[_uid].numberOfRounds = 0;\\n        orders[_uid].state = State.SellerCreated;\\n    }\\n    \\n    //卖家确认收款并放行资金。\\n    //如果第一轮就成功，则奖励10个锤子，卖家6个，买家4个\\n    function sellerConfirmReceive(uint256 _uid)\\n        public\\n        inState(_uid, State.BuyerConfirmPayment)\\n        onlySeller(_uid)\\n        ConfirmInTime(_uid)\\n    {\\n        WETH.transfer(orders[_uid].buyer, orders[_uid].amount);\\n        orders[_uid].state = State.SellerConfirmReceive;\\n\\n        if(orders[_uid].numberOfRounds == 1){\\n            HAMMER.mint(orders[_uid].seller, 6 * 1e18);\\n            HAMMER.mint(orders[_uid].buyer, 4 * 1e18);\\n        }\\n        \\n        emit SellerConfirmReceive(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, orders[_uid].buyer, block.timestamp);\\n    }\\n\\n    //卖家未收到付款，退回卖单给买家\\n    function fallbackToBuyer(uint256 _uid) \\n        public\\n        inState(_uid, State.BuyerConfirmPayment)\\n        onlySeller(_uid)\\n        ConfirmInTime(_uid)\\n    {   \\n        orders[_uid].submitTime = block.timestamp;\\n        orders[_uid].state = State.BuyerSubmit;\\n        emit FallbackToBuyer(orders[_uid].orderNumber, msg.sender, orders[_uid].amount, orders[_uid].buyer, block.timestamp);\\n    }\\n\\n    //卖家超时未确认，买家取出资金\\n    function sellerOutofTime(uint256 _uid)\\n        public\\n        inState(_uid, State.BuyerConfirmPayment)\\n        onlyBuyer(_uid)\\n        ConfirmOutOfTime(_uid)\\n    {\\n        WETH.transfer(msg.sender, orders[_uid].amount);\\n        orders[_uid].state = State.SellerOutofTime;\\n        emit SellerOutofTime(orders[_uid].orderNumber, orders[_uid].seller, orders[_uid].amount, msg.sender, block.timestamp);\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity \\u003e=0.7.0 \\u003c0.8.0;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_HAMMER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userTrust\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerCancelTime\",\"type\":\"uint256\"}],\"name\":\"BuyerCancelPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerConfirmTime\",\"type\":\"uint256\"}],\"name\":\"BuyerConfirmPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"restart\",\"type\":\"uint256\"}],\"name\":\"BuyerOutofTimeRestart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerSubmitTime\",\"type\":\"uint256\"}],\"name\":\"BuyerSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelTime\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fallbackTime\",\"type\":\"uint256\"}],\"name\":\"FallbackToBuyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerConfirmTime\",\"type\":\"uint256\"}],\"name\":\"SellerConfirmReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outRestartTime\",\"type\":\"uint256\"}],\"name\":\"SellerOutRestart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerWithdraw\",\"type\":\"uint256\"}],\"name\":\"SellerOutofTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTime\",\"type\":\"uint256\"}],\"name\":\"SellerRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"restartTime\",\"type\":\"uint256\"}],\"name\":\"SellerRestart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderSuspend\",\"type\":\"uint256\"}],\"name\":\"SellerSuspend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrust\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderCreated\",\"type\":\"uint256\"}],\"name\":\"SetOrder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"buyerCancelPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"buyerConfirmPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"buyerOutofTimeRestart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"buyerSubmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"fallbackToBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTrust\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"submitTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numberOfRounds\",\"type\":\"uint8\"},{\"internalType\":\"enum Ethc2cWETH.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerConfirmReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerOutRestart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerOutofTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerRestart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"sellerSuspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isTrust\",\"type\":\"bool\"}],\"name\":\"setOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Ethc2cWETH","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000e5f80d9526adedab8ac55a5d59f98c767661002c000000000000000000000000c8ad49bbe14ebd1384baf65165da0869871eeaa900000000000000000000000058e6dae56cc70b04f7d3d0276f6f416f7e6543b8","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e9a0ea6ff9ce536f7ad59e5df9c97a9ba26cc59d3b8ebfbc325ac7ee6f63967e"}]}