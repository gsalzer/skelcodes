{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ninterface IRCD {\r\n    /**\r\n     * @notice Returns the rate to pay out for a given amount\r\n     * @param amount the bet amount to calc a payout for\r\n     * @param maxAvailable the total pooled ETH unlocked and available to bet\r\n     * @param newPrice the current price of the underlying\r\n     * @param t time for the option\r\n     * @param k true for call false for put\r\n     * @return profit total possible profit amount\r\n     *\r\n     */\r\n    function rate(uint256 amount, uint256 maxAvailable, uint256 newPrice, uint256 t, bool k) external view returns (uint256);\r\n\r\n}\r\n\r\ncontract RateCalc is IRCD {\r\n    using SafeMath for uint256;\r\n     /**\r\n     * @notice Calculates maximum option buyer profit\r\n     * @param amount Option amount\r\n     * @param maxAvailable the total pooled ETH unlocked and available to bet\r\n     * @param newPrice the current price of the underlying\r\n     * @param t time for the option\r\n     * @param k true for call false for put\r\n     * @return profit total possible profit amount\r\n     */\r\n    function rate(uint256 amount, uint256 maxAvailable, uint256 newPrice, uint256 t, bool k) external view override returns (uint256)  {\r\n        require(amount <= maxAvailable, \"greater then pool funds available\");\r\n        \r\n        uint256 oneTenth = amount.div(10);\r\n        uint256 halfMax = maxAvailable.div(2);\r\n        if (amount > halfMax) {\r\n            return amount.mul(2).add(oneTenth).add(oneTenth);\r\n        } else {\r\n            if(oneTenth > 0) {\r\n                return amount.mul(2).sub(oneTenth);\r\n            } else {\r\n                uint256 oneThird = amount.div(4);\r\n                require(oneThird > 0, \"invalid bet amount\");\r\n                return amount.mul(2).sub(oneThird);\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\ncontract RateCalc20Percent is IRCD {\r\n    using SafeMath for uint256;\r\n     /**\r\n     * @notice Calculates maximum option buyer profit\r\n     * @param amount Option amount\r\n     * @param maxAvailable the total pooled ETH unlocked and available to bet\r\n     * @param newPrice the price of the underlying at time rate is requested\r\n     * @param t time for the option\r\n     * @param k true for call false for put\r\n     * @return profit total possible profit amount\r\n     */\r\n    function rate(uint256 amount, uint256 maxAvailable, uint256 newPrice, uint256 t, bool k) external view override returns (uint256)  {\r\n        uint256 twentyPercent = maxAvailable.div(5);\r\n        require(amount <= twentyPercent, \"greater then pool funds available\");\r\n        uint256 oneTenth = amount.div(10);\r\n        uint256 halfMax = twentyPercent.div(2);\r\n        if (amount > halfMax) {\r\n            return amount.mul(2).add(oneTenth).add(oneTenth);\r\n        } else {\r\n            if(oneTenth > 0) {\r\n                return amount.mul(2).sub(oneTenth);\r\n            } else {\r\n                uint256 oneThird = amount.div(4);\r\n                require(oneThird > 0, \"invalid bet amount\");\r\n                return amount.mul(2).sub(oneThird);\r\n            }\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"k\",\"type\":\"bool\"}],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RateCalc20Percent","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dba48aae06d91bbc86e727336afa33bd931f084ec37a960c6fd605be001d7981"}]}