{"status":"1","message":"OK","result":[{"SourceCode":"// ███████╗░█████╗░██████╗░██████╗░███████╗██████╗░░░░███████╗██╗\r\n// ╚════██║██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗░░░██╔════╝██║\r\n// ░░███╔═╝███████║██████╔╝██████╔╝█████╗░░██████╔╝░░░█████╗░░██║\r\n// ██╔══╝░░██╔══██║██╔═══╝░██╔═══╝░██╔══╝░░██╔══██╗░░░██╔══╝░░██║\r\n// ███████╗██║░░██║██║░░░░░██║░░░░░███████╗██║░░██║██╗██║░░░░░██║\r\n// ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝░░░░░╚══════╝╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝\r\n// Copyright (C) 2020 zapper\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Zapper\r\n///@notice This contract provides liquidity related utility functions for Uniswap V2\r\n// SPDX-License-Identifier: GPLv2\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\ncontract Zapper_Uniswap_Utils_V1 {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Factory private constant UniswapV2Factory = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n    /**\r\n    @return numPools- total number of pools within this protocol\r\n     */\r\n    function numPools() public view returns (uint256) {\r\n        return UniswapV2Factory.allPairsLength();\r\n    }\r\n\r\n    /**\r\n    @param _start pool index to start at\r\n    @param _end pool index to end at\r\n    @dev to get all pools use 0 for start and end indicies\r\n    @return Array of Uniswap V2 Exchange Addresses\r\n     */\r\n    function pools(uint256 _start, uint256 _end)\r\n        external\r\n        view\r\n        returns (address[] memory _pools)\r\n    {\r\n        if (_start == 0 && _end == 0) {\r\n            _start = 0;\r\n            _end = numPools();\r\n        }\r\n\r\n        _pools = new address[](_end.sub(_start));\r\n        uint256 j;\r\n\r\n        for (uint256 i = _start; i < _end; i++) {\r\n            _pools[j++] = UniswapV2Factory.allPairs(i);\r\n        }\r\n\r\n        return _pools;\r\n    }\r\n\r\n    /**\r\n    @param _pools to get tokens for\r\n    @return Tokens0- token0 belonging to each of the input pools\r\n    @return Tokens1- token1 belonging to each of the input pools\r\n     */\r\n    function tokens(address[] calldata _pools)\r\n        external\r\n        pure\r\n        returns (address[] memory tokens0, address[] memory tokens1)\r\n    {\r\n        tokens0 = new address[](_pools.length);\r\n        tokens1 = new address[](_pools.length);\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(_pools[i]);\r\n            tokens0[i] = pair.token0();\r\n            tokens1[i] = pair.token1();\r\n        }\r\n    }\r\n\r\n    /**\r\n    @param _pools to get reserves for\r\n    @return reserves1- reserves of token0 belonging to each of the input pools\r\n    @return reserves0- reserves of token1 belonging to each of the input pools\r\n     */\r\n    function reserves(address[] calldata _pools)\r\n        external\r\n        view\r\n        returns (uint112[] memory reserves0, uint112[] memory reserves1)\r\n    {\r\n        reserves0 = new uint112[](_pools.length);\r\n        reserves1 = new uint112[](_pools.length);\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(_pools[i])\r\n                .getReserves();\r\n            reserves0[i] = reserve0;\r\n            reserves1[i] = reserve1;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @param _pools to get pool token supplies for\r\n    @return _totalSupplies- total supply of LP tokens belonging to \r\n    each of the input pools\r\n     */\r\n    function totalSupplies(address[] calldata _pools)\r\n        external\r\n        view\r\n        returns (uint256[] memory _totalSupplies)\r\n    {\r\n        _totalSupplies = new uint256[](_pools.length);\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            _totalSupplies[i] = IUniswapV2Pair(_pools[i]).totalSupply();\r\n        }\r\n    }\r\n\r\n    /**\r\n    @param _account to get LP token balances for\r\n    @param _pools to get pool token supplies for\r\n    @return _poolTokenBalances- balances of LP tokens belonging to \r\n    the account from each of the input pools\r\n     */\r\n    function poolTokenBalances(address[] calldata _pools, address _account)\r\n        external\r\n        view\r\n        returns (uint256[] memory _poolTokenBalances)\r\n    {\r\n        _poolTokenBalances = new uint256[](_pools.length);\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            _poolTokenBalances[i] = IUniswapV2Pair(_pools[i]).balanceOf(\r\n                _account\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to get the underlying token balance\r\n    of a pool given an arbitrary quantity of LP tokens\r\n    @param _pools to get pool token supplies for\r\n    @param _poolTokens quantity of LP tokens to get underlying balance of\r\n    @return underlyingToken0Balance- underlying balances of token 0 belonging \r\n    to each of the input pools\r\n    @return underlyingToken1Balance- underlying balances of token 1 belonging \r\n    to each of the input pools\r\n     */\r\n    function underlyingtokenBalances(\r\n        address[] calldata _pools,\r\n        uint256[] calldata _poolTokens\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory underlyingToken0Balance,\r\n            uint256[] memory underlyingToken1Balance\r\n        )\r\n    {\r\n        underlyingToken0Balance = new uint256[](_poolTokens.length);\r\n        underlyingToken1Balance = new uint256[](_poolTokens.length);\r\n\r\n        for (uint256 i = 0; i < _pools.length; i++) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(_pools[i]);\r\n            uint256 totalSupply = pair.totalSupply();\r\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n\r\n            underlyingToken0Balance[i] =\r\n                _poolTokens[i].mul(reserve0) /\r\n                totalSupply;\r\n            underlyingToken1Balance[i] =\r\n                _poolTokens[i].mul(reserve1) /\r\n                totalSupply;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"poolTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolTokenBalances\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint112[]\",\"name\":\"reserves0\",\"type\":\"uint112[]\"},{\"internalType\":\"uint112[]\",\"name\":\"reserves1\",\"type\":\"uint112[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens0\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens1\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"totalSupplies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_totalSupplies\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolTokens\",\"type\":\"uint256[]\"}],\"name\":\"underlyingtokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingToken0Balance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingToken1Balance\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Zapper_Uniswap_Utils_V1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a969d0ebdbeb61c7057acf298920014034034ce4fbbb3c1c289ad72282f73b42"}]}