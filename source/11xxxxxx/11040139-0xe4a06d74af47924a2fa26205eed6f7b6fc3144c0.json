{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract ERC20 {\r\n\r\n    function transferFrom (address,address, uint256) external returns (bool);\r\n    function balanceOf(address) public view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function transfer (address, uint256) external returns (bool);\r\n    function burn (uint256) external returns (bool);\r\n    function giveRewardsToStakers(address,uint256) external returns(bool); \r\n\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed _to);\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n      require(paused);\r\n      _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n      paused = true;\r\n      emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n      paused = false;\r\n      emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract DogeStaking is Pausable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public uniV2DogeEth;\r\n    address public uniV2EthUsdt;\r\n    address public uniV2EthUsdc;\r\n    \r\n    address public puppyTokenAddress;\r\n    \r\n    uint256 public stakingRatioPairOne;\r\n    uint256 public stakingRatioPairTwo;\r\n    uint256 public stakingRatioPairThree;\r\n\r\n    constructor(address ethDogeAddress, address ethUsdt, address ethUsdc, address _puppy) public Owned(msg.sender) {\r\n\r\n    uniV2DogeEth = ethDogeAddress;\r\n    uniV2EthUsdt = ethUsdt;\r\n    uniV2EthUsdc = ethUsdc;\r\n    \r\n    puppyTokenAddress = _puppy;\r\n    stakingRatioPairOne = 125;\r\n    stakingRatioPairTwo = 30;\r\n    stakingRatioPairThree = 30;\r\n    \r\n\r\n    }\r\n\r\n    function setAddress(address dogeEthAddress, address ethUsdt, address ethUsdc) external onlyOwner returns(bool)  \r\n    {\r\n       \r\n    uniV2DogeEth = dogeEthAddress;\r\n    uniV2EthUsdt = ethUsdt;\r\n    uniV2EthUsdc = ethUsdc;\r\n\r\n            return true;\r\n    }\r\n\r\n\r\n    function setStakingRatio(uint256 value1, uint256 value2, uint256 value3) external onlyOwner returns(bool)  \r\n    {\r\n       \r\n        stakingRatioPairOne = value1;\r\n        stakingRatioPairTwo = value2;\r\n        stakingRatioPairThree = value3;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    mapping (address => uint256) public dogeEthStaked;\r\n    mapping (address => uint256) public dogeEthStakedTime;\r\n\r\n    mapping (address => uint256) public ethUsdtStaked;\r\n    mapping (address => uint256) public ethUsdtStakedTime;\r\n\r\n    mapping (address => uint256) public ethUsdcStaked;\r\n    mapping (address => uint256) public ethUsdcStakedTime;\r\n\r\n\r\n   function stakedAllTokens (address userAddress) public view returns (uint256,uint256,uint256) {\r\n       \r\n       uint256 dogeEthStaked = dogeEthStaked[userAddress]; \r\n       uint256 ethUsdtStaked =  ethUsdtStaked[userAddress];  \r\n       uint256 ethUsdcStaked = ethUsdcStaked[userAddress];    \r\n\r\n       return (dogeEthStaked,ethUsdtStaked,ethUsdcStaked);\r\n\r\n   }\r\n\r\n\r\n   function StakingTime (address userAddress) public view returns (uint256,uint256,uint256) {\r\n       \r\n       uint256 dogeEthStakedTime = dogeEthStakedTime[userAddress]; \r\n       uint256 ethUsdtStakedTime = ethUsdtStakedTime[userAddress];  \r\n       uint256 ethUsdcStakedTime = ethUsdcStakedTime[userAddress];    \r\n       \r\n       return (dogeEthStakedTime,ethUsdtStakedTime,ethUsdcStakedTime);\r\n   }\r\n\r\n\r\n    function stakeDogeEthTokens(uint256 amount) public returns (bool) {\r\n       \r\n       require(ERC20(uniV2DogeEth).balanceOf(msg.sender) >= amount,'balance of a user is less then value');\r\n       require(dogeEthStaked[msg.sender] == 0, \"Please claim  tokens first before new stake\");\r\n       uint256 checkAllowance = ERC20(uniV2DogeEth).allowance(msg.sender, address(this)); \r\n       dogeEthStaked[msg.sender] = amount;\r\n       dogeEthStakedTime[msg.sender] = now;\r\n       require (checkAllowance >= amount, 'allowance is wrong');\r\n       require(ERC20(uniV2DogeEth).transferFrom(msg.sender,address(this),amount),'transfer From failed');\r\n        \r\n    } \r\n\r\n\r\n    function claimableDogeETHPuppyTokens (address user) public view returns (bool,uint256) {\r\n        \r\n        if (dogeEthStaked[user] > 0){\r\n            \r\n            \r\n            uint256 percent = dogeEthStaked[user].div(100);\r\n            return (true,percent.mul(stakingRatioPairOne));\r\n            \r\n            \r\n        } else {return (false,0);}\r\n        \r\n    }\r\n\r\n    function claimEthDogePuppyTokens() public returns (bool) {\r\n       \r\n        require(dogeEthStaked[msg.sender]>0, \"not staked any  tokens\");\r\n        require(now > dogeEthStakedTime[msg.sender].add(604800), \"4 hours not completed yet\"); \r\n        require(ERC20(uniV2DogeEth).transfer(msg.sender,dogeEthStaked[msg.sender]), \" tokens Burned\");\r\n\r\n        uint256 percent = dogeEthStaked[msg.sender].div(100);\r\n        require(ERC20(puppyTokenAddress).giveRewardsToStakers(msg.sender, percent.mul(stakingRatioPairOne)));\r\n        dogeEthStaked[msg.sender] = 0;\r\n        dogeEthStakedTime[msg.sender] = 0;    \r\n        \r\n    } \r\n\r\n\r\n    function stakeEthUsdtTokens(uint256 amount) public returns (bool) {\r\n       \r\n       require(ERC20(uniV2EthUsdt).balanceOf(msg.sender) >= amount,'balance of a user is less then value');\r\n       require(ethUsdtStaked[msg.sender] == 0, \"Please claim  tokens first before new stake\");\r\n       uint256 checkAllowance = ERC20(uniV2EthUsdt).allowance(msg.sender, address(this)); \r\n       ethUsdtStaked[msg.sender] = amount;\r\n       ethUsdtStakedTime[msg.sender] = now;\r\n       require (checkAllowance >= amount, 'allowance is wrong');\r\n       require(ERC20(uniV2EthUsdt).transferFrom(msg.sender,address(this),amount),'transfer From failed');\r\n        \r\n    } \r\n\r\n    function claimableEthUsdtPuppyTokens (address user) public view returns (bool,uint256) {\r\n        \r\n        if (ethUsdtStaked[user] > 0){\r\n            \r\n            uint256 percent = ethUsdtStaked[user].div(100);\r\n            return (true,percent.mul(stakingRatioPairTwo));\r\n            \r\n            \r\n        } else {return (false,0);}\r\n        \r\n    }\r\n\r\n\r\n    function claimEthUsdtPuppyTokens() public returns (bool) {\r\n       \r\n        require(ethUsdtStaked[msg.sender]>0, \"not staked any  tokens\");\r\n        require(now > ethUsdtStakedTime[msg.sender].add(604800), \"4 hours not completed yet\"); \r\n        \r\n        uint256 percent = ethUsdtStaked[msg.sender].div(100);\r\n\r\n        require(ERC20(uniV2EthUsdt).transfer(msg.sender,ethUsdtStaked[msg.sender]), \" tokens Burned\");\r\n        require(ERC20(puppyTokenAddress).giveRewardsToStakers(msg.sender,percent.mul(stakingRatioPairTwo)), \"mint failed\");\r\n\r\n        ethUsdtStaked[msg.sender] = 0;\r\n        ethUsdtStakedTime[msg.sender] = 0;\r\n        \r\n    } \r\n\r\n    function stakeEthUsdcTokens(uint256 amount) public returns (bool) {\r\n       \r\n       require(ERC20(uniV2EthUsdc).balanceOf(msg.sender) >= amount,'balance of a user is less then value');\r\n       require(ethUsdcStaked[msg.sender] == 0, \"Please claim  tokens first before new stake\");\r\n       uint256 checkAllowance = ERC20(uniV2EthUsdc).allowance(msg.sender, address(this)); \r\n       ethUsdcStaked[msg.sender] = amount;\r\n       ethUsdcStakedTime[msg.sender] = now;\r\n       require (checkAllowance >= amount, 'allowance is wrong');\r\n       require(ERC20(uniV2EthUsdc).transferFrom(msg.sender,address(this),amount),'transfer From failed');\r\n        \r\n    } \r\n\r\n    function claimableEthUsdcTokens (address user) public view returns (bool,uint256) {\r\n        \r\n        if (ethUsdcStaked[user] > 0){\r\n            \r\n            uint256 percent = ethUsdcStaked[user].div(100);\r\n            return (true,percent.mul(stakingRatioPairThree));\r\n            \r\n            \r\n        } else {return (false,0);}\r\n        \r\n    }\r\n\r\n    function claimEthUsdcTokens() public returns (bool) {\r\n       \r\n        require(ethUsdcStaked[msg.sender]>0, \"not staked any  tokens\");\r\n        require(now > ethUsdcStakedTime[msg.sender].add(604800), \"4 hours not completed yet\"); \r\n        uint256 percent = ethUsdcStaked[msg.sender].div(100);\r\n        require(ERC20(uniV2EthUsdc).transfer(msg.sender,ethUsdcStaked[msg.sender]), \" tokens Burned\");\r\n        require(ERC20(puppyTokenAddress).giveRewardsToStakers(msg.sender,percent.mul(stakingRatioPairThree)));\r\n\r\n        ethUsdcStaked[msg.sender] = 0;\r\n        ethUsdcStakedTime[msg.sender] = 0;\r\n        \r\n    } \r\n\r\n\r\n   function transferAnyERC20Token(address tokenAddress, uint tokens) public whenNotPaused onlyOwner returns (bool success) {\r\n        require(tokenAddress != address(0));\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethDogeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_puppy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"StakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthDogePuppyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthUsdcTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthUsdtPuppyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableDogeETHPuppyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableEthUsdcTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableEthUsdtPuppyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dogeEthStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dogeEthStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethUsdcStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethUsdcStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethUsdtStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethUsdtStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"puppyTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dogeEthAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethUsdc\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value3\",\"type\":\"uint256\"}],\"name\":\"setStakingRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeDogeEthTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEthUsdcTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEthUsdtTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"stakedAllTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRatioPairOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRatioPairThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRatioPairTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniV2DogeEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniV2EthUsdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniV2EthUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DogeStaking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b6916bc20cae34de64af39b8534d1459d8bb41280000000000000000000000006c3e4cb2e96b01f4b866965a91ed4437839a121a0000000000000000000000007fba4b8dc5e7616e59622806932dbea72537a56b00000000000000000000000072a118f9357b97317a0b1aa5c2d77d8b51491112","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b12876e09927fbf0c0e198149ac8a4bb28dbae209233a2f3f4b7b0bd3bc23101"}]}