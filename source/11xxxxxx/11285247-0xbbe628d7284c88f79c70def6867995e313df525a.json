{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\n\r\n// vault: (address, name, decimals, symbol, strategies[], archivedStrategies[], tokens[], governance) [getPricePerFullShare]\r\ninterface IVault {\r\n    function token() external view returns (address);\r\n    function underlying() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function controller() external view returns (address);\r\n    function governance() external view returns (address);\r\n\r\n    function getPricePerFullShare() external view returns (uint);\r\n    \r\n}\r\n\r\n// vault: (address, name, decimals, symbol, strategies[], archivedStrategies[], tokens[], governance) [getPricePerFullShare]\r\ninterface IWrappedVault {\r\n    function token() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n    function governance() external view returns (address);\r\n    \r\n    function vault() external view returns (address);\r\n\r\n    function getPricePerFullShare() external view returns (uint);\r\n    \r\n}\r\n\r\ninterface IStrategy {\r\n    function want() external view returns (address);\r\n    function deposit() external;\r\n    function withdraw(address) external;\r\n    function withdraw(uint) external;\r\n    function skim() external;\r\n    function withdrawAll() external returns (uint);\r\n    function balanceOf() external view returns (uint);\r\n}\r\n\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n    function strategies(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function want(address) external view returns (address);\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(address, uint) external;\r\n    function earn(address, uint) external;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\ncontract YRegistry {\r\n  //using Address for address;\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  address public governance;  \r\n  address public pendingGovernance;\r\n\r\n  EnumerableSet.AddressSet private vaults;\r\n  EnumerableSet.AddressSet private controllers;\r\n\r\n  mapping(address => address) private wrappedVaults;\r\n\r\n  mapping(address => bool) public isDelegatedVault;\r\n\r\n  constructor(address _governance) public {\r\n    require(_governance != address(0), \"Missing Governance\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function getName() external pure returns (string memory) {\r\n    return \"YRegistry\";\r\n  }\r\n\r\n  function addVault(address _vault) public onlyGovernance {\r\n    setVault(_vault);\r\n\r\n    (address controller,,,,) = getVaultData(_vault);\r\n    \r\n    setController(controller);\r\n  }\r\n\r\n  function addWrappedVault(address _vault) public onlyGovernance {\r\n    setVault(_vault);\r\n    address wrappedVault = IWrappedVault(_vault).vault();\r\n    setWrappedVault(_vault, wrappedVault);\r\n\r\n    (address controller,,,,) = getVaultData(_vault);\r\n\r\n    // Adds to controllers array\r\n    setController(controller);\r\n    // TODO Add and track tokens and strategies? [historical]\r\n    // (current ones can be obtained via getVaults + getVaultInfo)\r\n  }\r\n  function addDelegatedVault(address _vault) public onlyGovernance {\r\n    setVault(_vault);\r\n    setDelegatedVault(_vault);\r\n\r\n    (address controller,,,,) = getVaultData(_vault);\r\n\r\n    // Adds to controllers array\r\n    setController(controller);\r\n    // TODO Add and track tokens and strategies? [historical]\r\n    // (current ones can be obtained via getVaults + getVaultInfo)\r\n  }\r\n\r\n  function setVault(address _vault) internal {\r\n    //require(_vault.isContract(), \"Vault is not a contract\");\r\n    // Checks if vault is already on the array\r\n    require(!vaults.contains(_vault), \"Vault already exists\");\r\n    // Adds unique _vault to vaults array\r\n    vaults.add(_vault);\r\n  }\r\n\r\n  function setWrappedVault(address _vault, address _wrappedVault) internal {\r\n    //require(_wrappedVault.isContract(), \"WrappedVault is not a contract\");\r\n    wrappedVaults[_vault] = _wrappedVault;\r\n  }\r\n\r\n  function setDelegatedVault(address _vault) internal {\r\n    // TODO Is there any way to check if a vault is delegated\r\n    isDelegatedVault[_vault] = true;\r\n  }\r\n\r\n  function setController(address _controller) internal {\r\n    // Adds Controller to controllers array\r\n    if (!controllers.contains(_controller)) {\r\n      controllers.add(_controller);\r\n    }\r\n  }\r\n\r\n  function getVaultData(address _vault) internal view returns (\r\n    address controller,\r\n    address token,\r\n    address strategy,\r\n    bool isWrapped,\r\n    bool isDelegated\r\n  ) {\r\n    address vault = _vault;\r\n    isWrapped = wrappedVaults[_vault] != address(0);\r\n    if (isWrapped) {\r\n      vault = wrappedVaults[_vault];\r\n    }\r\n    isDelegated = isDelegatedVault[vault];\r\n    \r\n    // Get values from controller\r\n    controller = IVault(vault).controller();\r\n    if (isWrapped && IVault(vault).underlying() != address(0)) {\r\n      token = IVault(_vault).token(); // Use non-wrapped vault\r\n    } else {\r\n      token = IVault(vault).token();\r\n    }\r\n    \r\n    if (isDelegated) {\r\n      strategy = IController(controller).strategies(vault);\r\n    } else {\r\n      strategy = IController(controller).strategies(token);\r\n    }\r\n    \r\n    // Check if vault is set on controller for token\r\n    address controllerVault = address(0);\r\n    if (isDelegated) {\r\n      controllerVault = IController(controller).vaults(strategy);\r\n    } else {\r\n      controllerVault = IController(controller).vaults(token);\r\n    }\r\n    require(controllerVault == vault, \"Controller vault address does not match\"); // Might happen on Proxy Vaults\r\n    \r\n    // Check if strategy has the same token as vault\r\n    if (isWrapped) {\r\n      address underlying = IVault(vault).underlying();\r\n      require(underlying == token, \"WrappedVault token address does not match\"); // Might happen?\r\n    } else if (!isDelegated) {\r\n      address strategyToken = IStrategy(strategy).want();\r\n      require(token == strategyToken, \"Strategy token address does not match\"); // Might happen?\r\n    }\r\n\r\n    return (controller, token, strategy, isWrapped, isDelegated);\r\n  }\r\n\r\n  // Vaults getters\r\n  function getVault(uint index) external view returns (address vault) {\r\n    return vaults.at(index);\r\n  }\r\n\r\n  function getVaultsLength() external view returns (uint) {\r\n    return vaults.length();\r\n  }\r\n\r\n  function getVaults() external view returns (address[] memory) {\r\n    address[] memory vaultsArray = new address[](vaults.length());\r\n    for (uint i = 0; i < vaults.length(); i++) {\r\n      vaultsArray[i] = vaults.at(i);\r\n    }\r\n    return vaultsArray;\r\n  }\r\n\r\n  function getVaultInfo(address _vault) external view returns (\r\n    address controller,\r\n    address token,\r\n    address strategy,\r\n    bool isWrapped,\r\n    bool isDelegated\r\n  ) {\r\n    (controller, token, strategy, isWrapped, isDelegated) = getVaultData(_vault);\r\n    return (\r\n      controller,\r\n      token,\r\n      strategy,\r\n      isWrapped,\r\n      isDelegated\r\n    );\r\n  }\r\n\r\n  function getVaultsInfo() external view returns (\r\n    address[] memory controllerArray,\r\n    address[] memory tokenArray,\r\n    address[] memory strategyArray,\r\n    bool[] memory isWrappedArray,\r\n    bool[] memory isDelegatedArray\r\n  ) {\r\n    controllerArray = new address[](vaults.length());\r\n    tokenArray = new address[](vaults.length());\r\n    strategyArray = new address[](vaults.length());\r\n    isWrappedArray = new bool[](vaults.length());\r\n    isDelegatedArray = new bool[](vaults.length());\r\n\r\n    for (uint i = 0; i < vaults.length(); i++) {\r\n      (address _controller, address _token, address _strategy, bool _isWrapped, bool _isDelegated) = getVaultData(vaults.at(i));\r\n      controllerArray[i] = _controller;\r\n      tokenArray[i] = _token;\r\n      strategyArray[i] = _strategy;\r\n      isWrappedArray[i] = _isWrapped;\r\n      isDelegatedArray[i] = _isDelegated;\r\n    }\r\n  }\r\n\r\n // Governance setters\r\n  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\r\n    pendingGovernance = _pendingGovernance;\r\n  }\r\n  function acceptGovernance() external onlyPendingGovernance {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance {\r\n    require(msg.sender == governance, \"Only governance can call this function.\");\r\n    _;\r\n  }\r\n  modifier onlyPendingGovernance {\r\n    require(msg.sender == pendingGovernance, \"Only pendingGovernance can call this function.\");\r\n    _;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addDelegatedVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addWrappedVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWrapped\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelegated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultsInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"controllerArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenArray\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"strategyArray\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isWrappedArray\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"isDelegatedArray\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDelegatedVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000013a08ddcd940b8602f147ff228f4c08720456aa3","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://75fb336e8ab0f266eac8a0f72775142d19bd9a5bcc2069dfae7956bd603be7ae"}]}