{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divCeil(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = ((a - 1) / b) + 1;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ncontract IERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract IWethERC20 is IWeth, IERC20 {}\r\n\r\ncontract Constants {\r\n\r\n    uint256 internal constant WEI_PRECISION = 10**18;\r\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\r\n\r\n    uint256 internal constant DAYS_IN_A_YEAR = 365;\r\n    uint256 internal constant ONE_MONTH = 2628000; // approx. seconds in a month\r\n\r\n    string internal constant UserRewardsID = \"UserRewards\";\r\n    string internal constant LoanDepositValueID = \"LoanDepositValue\";\r\n\r\n    IWethERC20 public constant wethToken = IWethERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    address public constant bzrxTokenAddress = 0x56d811088235F11C8920698a204A5010a788f4b3;\r\n    address public constant vbzrxTokenAddress = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\r\n}\r\n\r\ninterface IPriceFeedsExt {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\ncontract PriceFeeds is Constants, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // address(1) is used as a stand-in for the non-existent token representing the fast-gas price on Chainlink\r\n    address internal constant FASTGAS_PRICEFEED_ADDRESS = address(1);\r\n\r\n    event GlobalPricingPaused(\r\n        address indexed sender,\r\n        bool isPaused\r\n    );\r\n\r\n    mapping (address => IPriceFeedsExt) public pricesFeeds;     // token => pricefeed\r\n    mapping (address => uint256) public decimals;               // decimals of supported tokens\r\n\r\n    bool public globalPricingPaused = false;\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        // set decimals for ether\r\n        decimals[address(wethToken)] = 18;\r\n    }\r\n\r\n    function queryRate(\r\n        address sourceToken,\r\n        address destToken)\r\n        public\r\n        view\r\n        returns (uint256 rate, uint256 precision)\r\n    {\r\n        require(!globalPricingPaused, \"pricing is paused\");\r\n        return _queryRate(\r\n            sourceToken,\r\n            destToken\r\n        );\r\n    }\r\n\r\n    function queryPrecision(\r\n        address sourceToken,\r\n        address destToken)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return sourceToken != destToken ?\r\n            _getDecimalPrecision(sourceToken, destToken) :\r\n            WEI_PRECISION;\r\n    }\r\n\r\n    //// NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly. ///\r\n    function queryReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceAmount)\r\n        public\r\n        view\r\n        returns (uint256 destAmount)\r\n    {\r\n        if (globalPricingPaused) {\r\n            return 0;\r\n        }\r\n        (uint256 rate, uint256 precision) = _queryRate(\r\n            sourceToken,\r\n            destToken\r\n        );\r\n\r\n        destAmount = sourceAmount\r\n            .mul(rate)\r\n            .div(precision);\r\n    }\r\n\r\n    function checkPriceDisagreement(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceAmount,\r\n        uint256 destAmount,\r\n        uint256 maxSlippage)\r\n        public\r\n        view\r\n        returns (uint256 sourceToDestSwapRate)\r\n    {\r\n        require(!globalPricingPaused, \"pricing is paused\");\r\n        (uint256 rate, uint256 precision) = _queryRate(\r\n            sourceToken,\r\n            destToken\r\n        );\r\n\r\n        rate = rate\r\n            .mul(WEI_PRECISION)\r\n            .div(precision);\r\n\r\n        sourceToDestSwapRate = destAmount\r\n            .mul(WEI_PRECISION)\r\n            .div(sourceAmount);\r\n\r\n        uint256 spreadValue = sourceToDestSwapRate > rate ?\r\n            sourceToDestSwapRate - rate :\r\n            rate - sourceToDestSwapRate;\r\n\r\n        if (spreadValue != 0) {\r\n            spreadValue = spreadValue\r\n                .mul(WEI_PERCENT_PRECISION)\r\n                .div(sourceToDestSwapRate);\r\n\r\n            require(\r\n                spreadValue <= maxSlippage,\r\n                \"price disagreement\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function amountInEth(\r\n        address tokenAddress,\r\n        uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 ethAmount)\r\n    {\r\n        if (tokenAddress == address(wethToken)) {\r\n            ethAmount = amount;\r\n        } else {\r\n            (uint toEthRate, uint256 toEthPrecision) = queryRate(\r\n                tokenAddress,\r\n                address(wethToken)\r\n            );\r\n            ethAmount = amount\r\n                .mul(toEthRate)\r\n                .div(toEthPrecision);\r\n        }\r\n    }\r\n\r\n    function getMaxDrawdown(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount,\r\n        uint256 margin)\r\n        public\r\n        view\r\n        returns (uint256 maxDrawdown)\r\n    {\r\n        uint256 loanToCollateralAmount;\r\n        if (collateralToken == loanToken) {\r\n            loanToCollateralAmount = loanAmount;\r\n        } else {\r\n            (uint256 rate, uint256 precision) = queryRate(\r\n                loanToken,\r\n                collateralToken\r\n            );\r\n            loanToCollateralAmount = loanAmount\r\n                .mul(rate)\r\n                .div(precision);\r\n        }\r\n\r\n        uint256 combined = loanToCollateralAmount\r\n            .add(\r\n                loanToCollateralAmount\r\n                    .mul(margin)\r\n                    .div(WEI_PERCENT_PRECISION)\r\n                );\r\n\r\n        maxDrawdown = collateralAmount > combined ?\r\n            collateralAmount - combined :\r\n            0;\r\n    }\r\n\r\n    function getCurrentMarginAndCollateralSize(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount)\r\n        public\r\n        view\r\n        returns (uint256 currentMargin, uint256 collateralInEthAmount)\r\n    {\r\n        (currentMargin,) = getCurrentMargin(\r\n            loanToken,\r\n            collateralToken,\r\n            loanAmount,\r\n            collateralAmount\r\n        );\r\n\r\n        collateralInEthAmount = amountInEth(\r\n            collateralToken,\r\n            collateralAmount\r\n        );\r\n    }\r\n\r\n    function getCurrentMargin(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount)\r\n        public\r\n        view\r\n        returns (uint256 currentMargin, uint256 collateralToLoanRate)\r\n    {\r\n        uint256 collateralToLoanAmount;\r\n        if (collateralToken == loanToken) {\r\n            collateralToLoanAmount = collateralAmount;\r\n            collateralToLoanRate = WEI_PRECISION;\r\n        } else {\r\n            uint256 collateralToLoanPrecision;\r\n            (collateralToLoanRate, collateralToLoanPrecision) = queryRate(\r\n                collateralToken,\r\n                loanToken\r\n            );\r\n\r\n            collateralToLoanRate = collateralToLoanRate\r\n                .mul(WEI_PRECISION)\r\n                .div(collateralToLoanPrecision);\r\n\r\n            collateralToLoanAmount = collateralAmount\r\n                .mul(collateralToLoanRate)\r\n                .div(WEI_PRECISION);\r\n        }\r\n\r\n        if (loanAmount != 0 && collateralToLoanAmount >= loanAmount) {\r\n            currentMargin = collateralToLoanAmount\r\n                .sub(loanAmount)\r\n                .mul(WEI_PERCENT_PRECISION)\r\n                .div(loanAmount);\r\n        }\r\n    }\r\n\r\n    function shouldLiquidate(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanAmount,\r\n        uint256 collateralAmount,\r\n        uint256 maintenanceMargin)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        (uint256 currentMargin,) = getCurrentMargin(\r\n            loanToken,\r\n            collateralToken,\r\n            loanAmount,\r\n            collateralAmount\r\n        );\r\n\r\n        return currentMargin <= maintenanceMargin;\r\n    }\r\n\r\n    function getFastGasPrice(\r\n        address payToken)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 gasPrice = _getFastGasPrice();\r\n        if (payToken != address(wethToken) && payToken != address(0)) {\r\n            require(!globalPricingPaused, \"pricing is paused\");\r\n            (uint256 rate, uint256 precision) = _queryRate(\r\n                address(wethToken),\r\n                payToken\r\n            );\r\n            gasPrice = gasPrice\r\n                .mul(rate)\r\n                .div(precision);\r\n        }\r\n        return gasPrice;\r\n    }\r\n\r\n\r\n    /*\r\n    * Owner functions\r\n    */\r\n\r\n    function setPriceFeed(\r\n        address[] calldata tokens,\r\n        IPriceFeedsExt[] calldata feeds)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tokens.length == feeds.length, \"count mismatch\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            pricesFeeds[tokens[i]] = feeds[i];\r\n        }\r\n    }\r\n\r\n    function setDecimals(\r\n        IERC20[] calldata tokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            decimals[address(tokens[i])] = tokens[i].decimals();\r\n        }\r\n    }\r\n\r\n    function setGlobalPricingPaused(\r\n        bool isPaused)\r\n        external\r\n        onlyOwner\r\n    {\r\n        globalPricingPaused = isPaused;\r\n\r\n        emit GlobalPricingPaused(\r\n            msg.sender,\r\n            isPaused\r\n        );\r\n    }\r\n\r\n    /*\r\n    * Internal functions\r\n    */\r\n\r\n    function _queryRate(\r\n        address sourceToken,\r\n        address destToken)\r\n        internal\r\n        view\r\n        returns (uint256 rate, uint256 precision)\r\n    {\r\n        if (sourceToken != destToken) {\r\n            uint256 sourceRate = _queryRateCall(sourceToken);\r\n            uint256 destRate = _queryRateCall(destToken);\r\n\r\n            rate = sourceRate\r\n                .mul(WEI_PRECISION)\r\n                .div(destRate);\r\n\r\n            precision = _getDecimalPrecision(sourceToken, destToken);\r\n        } else {\r\n            rate = WEI_PRECISION;\r\n            precision = WEI_PRECISION;\r\n        }\r\n    }\r\n\r\n    function _queryRateCall(\r\n        address token)\r\n        internal\r\n        view\r\n        returns (uint256 rate)\r\n    {\r\n        if (token != address(wethToken)) {\r\n            IPriceFeedsExt _Feed = pricesFeeds[token];\r\n            require(address(_Feed) != address(0), \"unsupported price feed\");\r\n            rate = uint256(_Feed.latestAnswer());\r\n            require(rate != 0 && (rate >> 128) == 0, \"price error\");\r\n        } else {\r\n            rate = WEI_PRECISION;\r\n        }\r\n    }\r\n\r\n    function _getDecimalPrecision(\r\n        address sourceToken,\r\n        address destToken)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (sourceToken == destToken) {\r\n            return WEI_PRECISION;\r\n        } else {\r\n            uint256 sourceTokenDecimals = decimals[sourceToken];\r\n            if (sourceTokenDecimals == 0)\r\n                sourceTokenDecimals = IERC20(sourceToken).decimals();\r\n\r\n            uint256 destTokenDecimals = decimals[destToken];\r\n            if (destTokenDecimals == 0)\r\n                destTokenDecimals = IERC20(destToken).decimals();\r\n\r\n            if (destTokenDecimals >= sourceTokenDecimals)\r\n                return 10**(SafeMath.sub(18, destTokenDecimals-sourceTokenDecimals));\r\n            else\r\n                return 10**(SafeMath.add(18, sourceTokenDecimals-destTokenDecimals));\r\n        }\r\n    }\r\n\r\n    function _getFastGasPrice()\r\n        internal\r\n        view\r\n        returns (uint256 gasPrice)\r\n    {\r\n        gasPrice = uint256(pricesFeeds[FASTGAS_PRICEFEED_ADDRESS].latestAnswer());\r\n        require(gasPrice != 0 && (gasPrice >> 128) == 0, \"gas price error\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"GlobalPricingPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"checkPriceDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceToDestSwapRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"getCurrentMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralToLoanRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"getCurrentMarginAndCollateralSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralInEthAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"}],\"name\":\"getFastGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"getMaxDrawdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDrawdown\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalPricingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricesFeeds\",\"outputs\":[{\"internalType\":\"contract IPriceFeedsExt\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"queryPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"}],\"name\":\"queryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"precision\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"}],\"name\":\"queryReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"setDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setGlobalPricingPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IPriceFeedsExt[]\",\"name\":\"feeds\",\"type\":\"address[]\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maintenanceMargin\",\"type\":\"uint256\"}],\"name\":\"shouldLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vbzrxTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"contract IWethERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceFeeds","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bd5b7b3054ff3df1ebca3e789965e12a6ea48142733091199c3c5346a6deef49"}]}