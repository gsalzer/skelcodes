{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\nabstract contract ERC20Interface {\r\n    \r\n    address public _owner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) virtual public returns (bool success);\r\n    function approve(address spender, uint tokens) virtual public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    \r\n}\r\n\r\ncontract SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n}\r\n\r\ncontract OrbicularV2 is ERC20Interface, SafeMath {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint private _totalSupply;\r\n    uint256 private constant DECIMALS = 9;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**8 * 10**DECIMALS;\r\n    uint256 private _gonsPerFragment;\r\n    uint private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    constructor() public {\r\n        name = \"OrbicularV2\";\r\n        symbol = \"ORBIv2\";\r\n        decimals = 9;\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        balances[msg.sender] = TOTAL_GONS;\r\n        _owner = msg.sender;\r\n        _gonsPerFragment = div(TOTAL_GONS, _totalSupply);\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    function changeOwner(address addr) external onlyOwner returns (bool) {\r\n        _owner = addr;\r\n        return true;\r\n    }\r\n    \r\n    function rebase(int supplyDelta) external onlyOwner returns (uint256) {\r\n        if (supplyDelta == 0) {\r\n            emit RebaseEvent(supplyDelta);\r\n            return _totalSupply;\r\n        }\r\n        \r\n        if (supplyDelta < 0) {\r\n            _totalSupply = sub(_totalSupply, uint(-supplyDelta));\r\n        }\r\n        \r\n        if (supplyDelta > 0) {\r\n            _totalSupply = add(_totalSupply, uint(supplyDelta));\r\n        }\r\n        \r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        _gonsPerFragment = div(TOTAL_GONS, _totalSupply);\r\n\r\n        emit RebaseEvent(supplyDelta);\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function totalSupply() override public view returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n    \r\n    function balanceOf(address who) override public view returns (uint256) {\r\n        return div(balances[who], _gonsPerFragment);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override public returns (bool) {\r\n        uint256 gonValue = mul(value, _gonsPerFragment);\r\n        balances[msg.sender] = sub(balances[msg.sender], gonValue);\r\n        balances[to] = add(balances[to], gonValue);\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) override public view returns (uint256) {\r\n        return allowed[owner_][spender];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) {\r\n        allowed[from][msg.sender] = sub(allowed[from][msg.sender], value);\r\n\r\n        uint256 gonValue = mul(value, _gonsPerFragment);\r\n        balances[from] = sub(balances[from], gonValue);\r\n        balances[to] = add(balances[to], gonValue);\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        allowed[msg.sender][spender] = add(allowed[msg.sender][spender], addedValue);\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            allowed[msg.sender][spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][spender] = sub(oldValue, subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    event RebaseEvent(int supplyDelta);\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"RebaseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"supplyDelta\",\"type\":\"int256\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OrbicularV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4a117a8d597e4ab2c41e4a60e4013774bf24bfc9f34cd84f119c1d5222e26c3"}]}