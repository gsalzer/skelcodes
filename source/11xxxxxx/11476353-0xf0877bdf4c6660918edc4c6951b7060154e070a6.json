{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\nstruct WhiteRecord {\r\n        bool transferEnabled;\r\n        int128 minBalance;\r\n    }\r\n\r\ninterface ISmartToken{\r\n    // We nedd this function for access WhiteList functionality from base token\r\n    function whiteList(address _maincontract) external returns (WhiteRecord memory);\r\n    function commonMinBalance() external returns (int128);\r\n    function whiteListEnable() external returns (bool);\r\n    function transferApproved(address from, address to, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ncontract ReceiverWhiteList {\r\n    \r\n    //address of token with main WhiteList\r\n    address public token=0xFcE94Fde7aC091c2F1dB00d62F15EeB82b624389;\r\n    /**\r\n     * @dev This function implement before transfer hook form OpenZeppelin ERC20.\r\n     * This only function MUST be implement and return boolean in any `ITransferChecker`\r\n     * smart contract\r\n     */\r\n    \r\n    function transferApproved(address from, address to, uint256 amount) external  returns (bool) {\r\n        //Call transferApproved from token contract\r\n        require(\r\n            ISmartToken(token).transferApproved(from, to, amount)\r\n        );\r\n        \r\n        //Additional check for receiver\r\n        if  (ISmartToken(token).whiteListEnable() == true) {\r\n            WhiteRecord memory whiteListRec = ISmartToken(token).whiteList(to);\r\n            require(whiteListRec.transferEnabled, \"Receiver is not whitelist member!\");\r\n        }   \r\n        return true;\r\n    }\r\n\r\n}\r\n/**\r\n* @dev for unit test\r\n* please DONT DEPLOY IN production\r\n*/\r\ncontract mockReceiverWL is ReceiverWhiteList {\r\n\r\n    function setToken(address _token) external {\r\n        token = _token;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReceiverWhiteList","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6064dcd0510e34936120b6b31cc9d2ca08b581e762c9a74376790ddf031d1362"}]}