{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner. (This is a BEP-20 token specific.)\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/interfaces/IBurnableToken.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\ninterface IBurnableToken is IERC20 {\r\n    function mint(address target, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    function mintable() external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ISwapContract.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ISwapContract {\r\n    function singleTransferERC20(\r\n        address _destToken,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _totalSwapped,\r\n        uint256 _rewardsAmount,\r\n        bytes32[] memory _redeemedFloatTxIds\r\n    ) external returns (bool);\r\n\r\n    function multiTransferERC20TightlyPacked(\r\n        address _destToken,\r\n        bytes32[] memory _addressesAndAmounts,\r\n        uint256 _totalSwapped,\r\n        uint256 _rewardsAmount,\r\n        bytes32[] memory _redeemedFloatTxIds\r\n    ) external returns (bool);\r\n\r\n    function collectSwapFeesForBTC(\r\n        address _destToken,\r\n        uint256 _incomingAmount,\r\n        uint256 _rewardsAmount\r\n    ) external returns (bool);\r\n\r\n    function recordIncomingFloat(\r\n        address _token,\r\n        bytes32 _addressesAndAmountOfFloat,\r\n        bool _zerofee,\r\n        bytes32 _txid\r\n    ) external returns (bool);\r\n\r\n    // function issueLPTokensForFloat(bytes32 _txid) external returns (bool);\r\n\r\n    function recordOutcomingFloat(\r\n        address _token,\r\n        bytes32 _addressesAndAmountOfLPtoken,\r\n        uint256 _minerFee,\r\n        bytes32 _txid\r\n    ) external returns (bool);\r\n\r\n    // function burnLPTokensForFloat(bytes32 _txid) external returns (bool);\r\n\r\n    function distributeNodeRewards() external returns (bool);\r\n\r\n    function churn(\r\n        address _newOwner,\r\n        bytes32[] memory _rewardAddressAndAmounts,\r\n        bool[] memory _isRemoved,\r\n        uint8 _churnedInCount,\r\n        uint8 _tssThreshold,\r\n        uint8 _nodeRewardsRatio,\r\n        uint8 _withdrawalFeeBPS\r\n    ) external returns (bool);\r\n\r\n    function isTxUsed(bytes32 _txid) external view returns (bool);\r\n\r\n    function getCurrentPriceLP() external view returns (uint256);\r\n\r\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getFloatReserve(address _tokenA, address _tokenB)\r\n        external\r\n        returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function getActiveNodes() external returns (bytes32[] memory);\r\n\r\n    function getMinimumAmountOfLPTokens(uint256 _minerFees)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/SwapContract.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract SwapContract is Ownable, ISwapContract {\r\n    using SafeMath for uint256;\r\n\r\n    address public WBTC_ADDR;\r\n    address public lpToken;\r\n\r\n    uint8 public churnedInCount;\r\n    uint8 public tssThreshold;\r\n    uint8 public nodeRewardsRatio;\r\n    uint8 public depositFeesBPS;\r\n    uint8 public withdrawalFeeBPS;\r\n\r\n    uint256 public activeWBTCBalances;\r\n    uint256 public lockedLPTokensForNode;\r\n\r\n    uint256 private priceDecimals;\r\n    uint256 private currentExchangeRate;\r\n    uint256 private lpDecimals;\r\n    // Support tokens\r\n    mapping(address => bool) public whitelist;\r\n\r\n    // Nodes\r\n    mapping(address => bytes32) private nodes;\r\n    mapping(address => bool) private isInList;\r\n    address[] private nodeAddrs;\r\n    // Token address -> amount\r\n    mapping(address => uint256) private totalRewards;\r\n    mapping(address => uint256) private floatAmountOf;\r\n    mapping(bytes32 => bool) private used;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n\r\n    event RecordIncomingFloat(\r\n        address token,\r\n        bytes32 addressesAndAmountOfFloat,\r\n        bytes32 txid\r\n    );\r\n\r\n    event IssueLPTokensForFloat(address to, uint256 amountOfLP, bytes32 txid);\r\n\r\n    event RecordOutcomingFloat(\r\n        address token,\r\n        bytes32 addressesAndAmountOfLPtoken,\r\n        bytes32 txid\r\n    );\r\n\r\n    event BurnLPTokensForFloat(\r\n        address token,\r\n        uint256 amountOfFloat,\r\n        bytes32 txid\r\n    );\r\n\r\n    modifier priceCheck() {\r\n        uint256 beforePrice = getCurrentPriceLP();\r\n        _;\r\n        require(getCurrentPriceLP() >= beforePrice, \"Invalid  LP price change\");\r\n    }\r\n\r\n    constructor(\r\n        address _lpToken,\r\n        address _wbtc,\r\n        uint256 _existingBTCFloat\r\n    ) public {\r\n        // burner = new Burner();\r\n        lpToken = _lpToken;\r\n        // Set initial price of LP token per BTC/WBTC.\r\n        lpDecimals = 10**IERC20(lpToken).decimals();\r\n        // Set WBTC address\r\n        WBTC_ADDR = _wbtc;\r\n        // Set nodeRewardsRatio\r\n        nodeRewardsRatio = 66;\r\n        // Set depositFeesBPS\r\n        depositFeesBPS = 50;\r\n        // Set withdrawalFeeBPS\r\n        withdrawalFeeBPS = 20;\r\n        // Set priceDecimals\r\n        priceDecimals = 10**8;\r\n        // Set currentExchangeRate\r\n        currentExchangeRate = priceDecimals;\r\n        // Set lockedLPTokensForNode\r\n        lockedLPTokensForNode = 0;\r\n        // SEt whitelist\r\n        whitelist[WBTC_ADDR] = true;\r\n        whitelist[lpToken] = true;\r\n        whitelist[address(0)] = true;\r\n        floatAmountOf[address(0)] = _existingBTCFloat;\r\n    }\r\n\r\n    /**\r\n     * Transfer part\r\n     */\r\n\r\n    /// @dev singleTransferERC20 function sends tokens from contract.\r\n    /// @param _destToken Address of token.\r\n    /// @param _to Recevier address.\r\n    /// @param _amount The amount of tokens.\r\n    /// @param _totalSwapped the amount of swapped amount which is for send.\r\n    /// @param _rewardsAmount Value that should be paid as fees.\r\n    /// @param _redeemedFloatTxIds the txs which is for records txids.\r\n    function singleTransferERC20(\r\n        address _destToken,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _totalSwapped,\r\n        uint256 _rewardsAmount,\r\n        bytes32[] memory _redeemedFloatTxIds\r\n    ) external override onlyOwner returns (bool) {\r\n        require(whitelist[_destToken], \"_destToken is not whitelisted\");\r\n        require(\r\n            _destToken != address(0),\r\n            \"_destToken should not be address(0)\"\r\n        );\r\n        if (_destToken == WBTC_ADDR && _totalSwapped > 0) {\r\n            activeWBTCBalances = activeWBTCBalances.sub(\r\n                _totalSwapped,\r\n                \"activeWBTCBalances insufficient\"\r\n            );\r\n        }\r\n        _rewardsCollection(_destToken, _rewardsAmount);\r\n        _addTxidUsed(_redeemedFloatTxIds);\r\n        require(IERC20(_destToken).transfer(_to, _amount));\r\n        return true;\r\n    }\r\n\r\n    /// @dev multiTransferERC20TightlyPacked function sends tokens from contract.\r\n    /// @param _destToken Address of token.\r\n    /// @param _addressesAndAmounts Recevier address and amounts.\r\n    /// @param _totalSwapped the amount of swapped amount which is for send.\r\n    /// @param _rewardsAmount Value that should be paid as fees.\r\n    /// @param _redeemedFloatTxIds the txs which is for records txids.\r\n    function multiTransferERC20TightlyPacked(\r\n        address _destToken,\r\n        bytes32[] memory _addressesAndAmounts,\r\n        uint256 _totalSwapped,\r\n        uint256 _rewardsAmount,\r\n        bytes32[] memory _redeemedFloatTxIds\r\n    ) external override onlyOwner returns (bool) {\r\n        require(whitelist[_destToken], \"_destToken is not whitelisted\");\r\n        require(\r\n            _destToken != address(0),\r\n            \"_destToken should not be address(0)\"\r\n        );\r\n        if (_destToken == WBTC_ADDR && _totalSwapped > 0) {\r\n            activeWBTCBalances = activeWBTCBalances.sub(\r\n                _totalSwapped,\r\n                \"activeWBTCBalances insufficient\"\r\n            );\r\n        }\r\n        _rewardsCollection(_destToken, _rewardsAmount);\r\n        _addTxidUsed(_redeemedFloatTxIds);\r\n        for (uint256 i = 0; i < _addressesAndAmounts.length; i++) {\r\n            require(\r\n                IERC20(_destToken).transfer(\r\n                    address(uint160(uint256(_addressesAndAmounts[i]))),\r\n                    uint256(uint96(bytes12(_addressesAndAmounts[i])))\r\n                ),\r\n                \"Batch transfer error\"\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev collectSwapFeesForBTC function collectes fees on BTC.\r\n    /// @param _destToken Address of token.\r\n    /// @param _incomingAmount spent amount of BTC.\r\n    /// @param _rewardsAmount Value that should be paid as fees.\r\n    function collectSwapFeesForBTC(\r\n        address _destToken,\r\n        uint256 _incomingAmount,\r\n        uint256 _rewardsAmount\r\n    ) external override onlyOwner returns (bool) {\r\n        require(_destToken == address(0), \"_destToken should be address(0)\");\r\n        activeWBTCBalances = activeWBTCBalances.add(_incomingAmount);\r\n        _rewardsCollection(_destToken, _rewardsAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Float part\r\n     */\r\n\r\n    /// @dev recordIncomingFloat function mint LP token.\r\n    /// @param _token Address of target token.\r\n    /// @param _addressesAndAmountOfFloat Recevier address and amounts.\r\n    /// @param _zerofee The flag of accept.\r\n    /// @param _txid the txs which is for records txids.\r\n    function recordIncomingFloat(\r\n        address _token,\r\n        bytes32 _addressesAndAmountOfFloat,\r\n        bool _zerofee,\r\n        bytes32 _txid\r\n    ) external override onlyOwner priceCheck returns (bool) {\r\n        require(whitelist[_token], \"_token is invalid\");\r\n        require(\r\n            _issueLPTokensForFloat(\r\n                _token,\r\n                _addressesAndAmountOfFloat,\r\n                _zerofee,\r\n                _txid\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev recordOutcomingFloat function burn LP token.\r\n    /// @param _token Address of target token.\r\n    /// @param _addressesAndAmountOfLPtoken Sender address and amounts.\r\n    /// @param _txid the txs which is for records txids.\r\n    function recordOutcomingFloat(\r\n        address _token,\r\n        bytes32 _addressesAndAmountOfLPtoken,\r\n        uint256 _minerFee,\r\n        bytes32 _txid\r\n    ) external override onlyOwner priceCheck returns (bool) {\r\n        require(whitelist[_token], \"_token is invalid\");\r\n        require(\r\n            _burnLPTokensForFloat(\r\n                _token,\r\n                _addressesAndAmountOfLPtoken,\r\n                withdrawalFeeBPS,\r\n                _minerFee,\r\n                _txid\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev distributeNodeRewards function sends rewards for Nodes.\r\n    function distributeNodeRewards() external override returns (bool) {\r\n        // Reduce Gas\r\n        uint256 rewardLPsForNodes = lockedLPTokensForNode;\r\n        require(rewardLPsForNodes > 0, \"totalRewardLPsForNode is not positive\");\r\n        bytes32[] memory nodeList = getActiveNodes();\r\n        uint256 totalStaked = 0;\r\n        for (uint256 i = 0; i < nodeList.length; i++) {\r\n            totalStaked = totalStaked.add(\r\n                uint256(uint96(bytes12(nodeList[i])))\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < nodeList.length; i++) {\r\n            IBurnableToken(lpToken).mint(\r\n                address(uint160(uint256(nodeList[i]))),\r\n                rewardLPsForNodes\r\n                    .mul(uint256(uint96(bytes12(nodeList[i]))))\r\n                    .div(totalStaked)\r\n            );\r\n        }\r\n        lockedLPTokensForNode = 0;\r\n        return true;\r\n    }\r\n\r\n    /// @dev churn function transfer contract ownership and set variables.\r\n    /// @param _newOwner Address of new Owner.\r\n    /// @param _rewardAddressAndAmounts Staker addresses and amounts.\r\n    /// @param _isRemoved The flags for remove node.\r\n    /// @param _churnedInCount The number of next N count.\r\n    /// @param _tssThreshold The number of next T.\r\n    /// @param _nodeRewardsRatio The number of next node rewards ratio.\r\n    /// @param _withdrawalFeeBPS The amount of wthdrawal fees.\r\n    function churn(\r\n        address _newOwner,\r\n        bytes32[] memory _rewardAddressAndAmounts,\r\n        bool[] memory _isRemoved,\r\n        uint8 _churnedInCount,\r\n        uint8 _tssThreshold,\r\n        uint8 _nodeRewardsRatio,\r\n        uint8 _withdrawalFeeBPS\r\n    ) external override onlyOwner returns (bool) {\r\n        require(\r\n            _tssThreshold >= tssThreshold && _tssThreshold <= 2**8 - 1,\r\n            \"_tssThreshold should be >= tssThreshold\"\r\n        );\r\n        require(\r\n            _churnedInCount >= _tssThreshold + uint8(1),\r\n            \"n should be >= t+1\"\r\n        );\r\n        require(\r\n            _nodeRewardsRatio >= 0 && _nodeRewardsRatio <= 100,\r\n            \"_nodeRewardsRatio is not valid\"\r\n        );\r\n        require(\r\n            _withdrawalFeeBPS >= 0 && _withdrawalFeeBPS <= 100,\r\n            \"_withdrawalFeeBPS is invalid\"\r\n        );\r\n        require(\r\n            _rewardAddressAndAmounts.length == _isRemoved.length,\r\n            \"_rewardAddressAndAmounts and _isRemoved length is not match\"\r\n        );\r\n        transferOwnership(_newOwner);\r\n        // Update active node list\r\n        for (uint256 i = 0; i < _rewardAddressAndAmounts.length; i++) {\r\n            (address newNode, ) = _splitToValues(_rewardAddressAndAmounts[i]);\r\n            _addNode(newNode, _rewardAddressAndAmounts[i], _isRemoved[i]);\r\n        }\r\n        bytes32[] memory nodeList = getActiveNodes();\r\n        if (nodeList.length > 100) {\r\n            revert(\"node size should be <= 100\");\r\n        }\r\n        churnedInCount = _churnedInCount;\r\n        tssThreshold = _tssThreshold;\r\n        nodeRewardsRatio = _nodeRewardsRatio;\r\n        withdrawalFeeBPS = _withdrawalFeeBPS;\r\n        return true;\r\n    }\r\n\r\n    /// @dev isTxUsed function sends rewards for Nodes.\r\n    /// @param _txid txid of incoming tx.\r\n    function isTxUsed(bytes32 _txid) public override view returns (bool) {\r\n        return used[_txid];\r\n    }\r\n\r\n    /// @dev getCurrentPriceLP function returns exchange rate of LP token.\r\n    function getCurrentPriceLP() public override view returns (uint256) {\r\n        return currentExchangeRate;\r\n    }\r\n\r\n    /// @dev getDepositFeeRate function returns deposit fees rate\r\n    /// @param _token The address of target token.\r\n    /// @param _amountOfFloat The amount of float.\r\n    function getDepositFeeRate(address _token, uint256 _amountOfFloat)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256 depositFeeRate)\r\n    {\r\n        uint8 isFlip = _checkFlips(_token, _amountOfFloat);\r\n        if (isFlip == 1) {\r\n            depositFeeRate = _token == WBTC_ADDR ? depositFeesBPS : 0;\r\n        } else if (isFlip == 2) {\r\n            depositFeeRate = _token == address(0) ? depositFeesBPS : 0;\r\n        }\r\n    }\r\n\r\n    /// @dev getMinimumAmountOfLPTokens function returns the minimum amount of LP Token.\r\n    /// @param _minerFees The amount of miner Fees (BTC).\r\n    function getMinimumAmountOfLPTokens(uint256 _minerFees)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\r\n            address(0),\r\n            WBTC_ADDR\r\n        );\r\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\r\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\r\n        uint256 nowPrice = totalLPs == 0\r\n            ? currentExchangeRate\r\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\r\n                totalLPs.add(lockedLPTokensForNode)\r\n            );\r\n        uint256 requiredFloat = _minerFees.mul(10000).div(withdrawalFeeBPS);\r\n        uint256 amountOfLPTokens = requiredFloat.add(10).mul(priceDecimals).div(\r\n            nowPrice\r\n        );\r\n        return (amountOfLPTokens, nowPrice);\r\n    }\r\n\r\n    /// @dev getFloatReserve function returns float reserves not current balances.\r\n    function getFloatReserve(address _tokenA, address _tokenB)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256 reserveA, uint256 reserveB)\r\n    {\r\n        (reserveA, reserveB) = (\r\n            floatAmountOf[_tokenA].add(totalRewards[_tokenA]),\r\n            floatAmountOf[_tokenB].add(totalRewards[_tokenB])\r\n        );\r\n    }\r\n\r\n    /// @dev getActiveNodes function returns active nodes list (stakes and amount)\r\n    function getActiveNodes() public override view returns (bytes32[] memory) {\r\n        uint256 nodeCount = 0;\r\n        uint256 count = 0;\r\n        // Seek all nodes\r\n        for (uint256 i = 0; i < nodeAddrs.length; i++) {\r\n            if (nodes[nodeAddrs[i]] != 0x0) {\r\n                nodeCount = nodeCount.add(1);\r\n            }\r\n        }\r\n        bytes32[] memory _nodes = new bytes32[](nodeCount);\r\n        for (uint256 i = 0; i < nodeAddrs.length; i++) {\r\n            if (nodes[nodeAddrs[i]] != 0x0) {\r\n                _nodes[count] = nodes[nodeAddrs[i]];\r\n                count = count.add(1);\r\n            }\r\n        }\r\n        return _nodes;\r\n    }\r\n\r\n    /// @dev _issueLPTokensForFloat\r\n    /// @param _token Address of target token.\r\n    /// @param _transaction Recevier address and amounts.\r\n    /// @param _zerofee The flag of accept.\r\n    /// @param _txid the txs which is for records txids.\r\n    function _issueLPTokensForFloat(\r\n        address _token,\r\n        bytes32 _transaction,\r\n        bool _zerofee,\r\n        bytes32 _txid\r\n    ) internal returns (bool) {\r\n        require(!isTxUsed(_txid), \"The txid is already used\");\r\n        // (address token, bytes32 transaction) = _loadTx(_txid);\r\n        require(_transaction != 0x0, \"The transaction is not found\");\r\n        // Define target address which is recorded bottom 20bytes on tx data\r\n        // Define amountLP which is recorded top 12bytes on tx data\r\n        (address to, uint256 amountOfFloat) = _splitToValues(_transaction);\r\n        // LP token price per BTC/WBTC changed\r\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\r\n        // Calculate amount of LP token\r\n        uint256 amountOfLP = amountOfFloat.mul(priceDecimals).div(nowPrice);\r\n        uint256 depositFeeRate = getDepositFeeRate(_token, amountOfFloat);\r\n        uint256 depositFees = depositFeeRate != 0\r\n            ? amountOfLP.mul(depositFeeRate).div(10000)\r\n            : 0;\r\n\r\n        if (_zerofee && depositFees != 0) {\r\n            revert();\r\n        }\r\n        //Send LP tokens to LP\r\n        IBurnableToken(lpToken).mint(to, amountOfLP.sub(depositFees));\r\n        // Add deposit fees\r\n        lockedLPTokensForNode = lockedLPTokensForNode.add(depositFees);\r\n        // Add float amount\r\n        _addFloat(_token, amountOfFloat);\r\n        used[_txid] = true;\r\n        emit IssueLPTokensForFloat(to, amountOfLP, _txid);\r\n        return true;\r\n    }\r\n\r\n    /// @dev _burnLPTokensForFloat\r\n    /// @param _token Address of target token.\r\n    /// @param _transaction Sender address and amounts.\r\n    /// @param _withdrawalFeeBPS The amount of withdrawal fees.\r\n    /// @param _txid the txs which is for records txids.\r\n    function _burnLPTokensForFloat(\r\n        address _token,\r\n        bytes32 _transaction,\r\n        uint256 _withdrawalFeeBPS,\r\n        uint256 _minerFee,\r\n        bytes32 _txid\r\n    ) internal returns (bool) {\r\n        require(!isTxUsed(_txid), \"The txid is already used\");\r\n        // _token should be address(0) or WBTC_ADDR\r\n        // (address token, bytes32 transaction) = _loadTx(_txid);\r\n        require(_transaction != 0x0, \"The transaction is not found\");\r\n        // Define target address which is recorded bottom 20bytes on tx data\r\n        // Define amountLP which is recorded top 12bytes on tx data\r\n        (address to, uint256 amountOfLP) = _splitToValues(_transaction);\r\n        // Calculate amountOfLP\r\n        uint256 nowPrice = _updateFloatPool(address(0), WBTC_ADDR);\r\n        // Calculate amountOfFloat\r\n        uint256 amountOfFloat = amountOfLP.mul(nowPrice).div(priceDecimals);\r\n        uint256 amountOfFees = amountOfFloat.mul(_withdrawalFeeBPS).div(10000);\r\n        require(\r\n            floatAmountOf[_token] >= amountOfFloat,\r\n            \"Pool balance insufficient.\"\r\n        );\r\n        require(\r\n            _minerFee <= amountOfFees,\r\n            \"amountOfFees.sub(_minerFee) is negative\"\r\n        );\r\n        // Burn LP tokens\r\n        require(IBurnableToken(lpToken).burn(amountOfLP));\r\n        // Remove float amount\r\n        _removeFloat(_token, amountOfFloat);\r\n        // Collect fees\r\n        _rewardsCollection(_token, amountOfFees.sub(_minerFee));\r\n        used[_txid] = true;\r\n        // WBTC transfer if token address is WBTC_ADDR\r\n        if (_token == WBTC_ADDR) {\r\n            require(\r\n                IERC20(_token).transfer(\r\n                    to,\r\n                    amountOfFloat.sub(amountOfFees).sub(_minerFee)\r\n                ),\r\n                \"WBTC balance insufficient\"\r\n            );\r\n        }\r\n        emit BurnLPTokensForFloat(to, amountOfFloat, _txid);\r\n        return true;\r\n    }\r\n\r\n    /// @dev _checkFlips\r\n    /// @param _token Address of target token.\r\n    /// @param _amountOfFloat The amount of float.\r\n    function _checkFlips(address _token, uint256 _amountOfFloat)\r\n        internal\r\n        view\r\n        returns (uint8)\r\n    {\r\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\r\n            address(0),\r\n            WBTC_ADDR\r\n        );\r\n        if (activeWBTCBalances > reserveA.add(reserveB)) {\r\n            return 0;\r\n        }\r\n        // BTC balance == balance of BTC float + balance of WBTC float - balance of WBTC\r\n        uint256 balBTC = reserveA.add(reserveB).sub(activeWBTCBalances);\r\n        uint256 threshold = reserveA\r\n            .add(reserveB)\r\n            .add(_amountOfFloat)\r\n            .mul(2)\r\n            .div(3);\r\n        if (_token == WBTC_ADDR) {\r\n            if (activeWBTCBalances.add(_amountOfFloat) >= threshold) {\r\n                return 1; // BTC float insufficient\r\n            }\r\n        } else if (_token == address(0)) {\r\n            if (balBTC.add(_amountOfFloat) >= threshold) {\r\n                return 2; // WBTC float insufficient\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /// @dev _updateFloatPool updates float balances.\r\n    /// @param _tokenA Address of target tokenA.\r\n    /// @param _tokenB Address of target tokenB.\r\n    function _updateFloatPool(address _tokenA, address _tokenB)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Reduce gas cost.\r\n        (uint256 reserveA, uint256 reserveB) = getFloatReserve(\r\n            _tokenA,\r\n            _tokenB\r\n        );\r\n        uint256 totalLPs = IBurnableToken(lpToken).totalSupply();\r\n        // decimals of totalReserved == 8, lpDecimals == 8, decimals of rate == 8\r\n        currentExchangeRate = totalLPs == 0\r\n            ? currentExchangeRate\r\n            : (reserveA.add(reserveB)).mul(lpDecimals).div(\r\n                totalLPs.add(lockedLPTokensForNode)\r\n            );\r\n        return currentExchangeRate;\r\n    }\r\n\r\n    /// @dev _addFloat updates Float.\r\n    /// @param _token The address of target token.\r\n    /// @param _amount The amount of float.\r\n    function _addFloat(address _token, uint256 _amount) internal {\r\n        floatAmountOf[_token] = floatAmountOf[_token].add(_amount);\r\n        if (_token == WBTC_ADDR) {\r\n            activeWBTCBalances = activeWBTCBalances.add(_amount);\r\n        }\r\n    }\r\n\r\n    /// @dev _removeFloat remove Float.\r\n    /// @param _token The address of target token.\r\n    /// @param _amount The amount of float.\r\n    function _removeFloat(address _token, uint256 _amount) internal {\r\n        floatAmountOf[_token] = floatAmountOf[_token].sub(\r\n            _amount,\r\n            \"float amount insufficient\"\r\n        );\r\n        if (_token == WBTC_ADDR) {\r\n            activeWBTCBalances = activeWBTCBalances.sub(\r\n                _amount,\r\n                \"activeWBTCBalances insufficient\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev _rewardsCollection collects rewards.\r\n    /// @param _destToken The address of target token.\r\n    /// @param _rewardsAmount The amount of rewards.\r\n    function _rewardsCollection(address _destToken, uint256 _rewardsAmount)\r\n        internal\r\n    {\r\n        if (_destToken == lpToken) return;\r\n        if (_rewardsAmount == 0) return;\r\n        // The fee is always collected in the source token (it's left in the float on the origin chain).\r\n        address _feesToken = _destToken == WBTC_ADDR ? address(0) : WBTC_ADDR;\r\n        // Add all fees into pool\r\n        totalRewards[_feesToken] = totalRewards[_feesToken].add(_rewardsAmount);\r\n        uint256 amountForNodes = _rewardsAmount.mul(nodeRewardsRatio).div(100);\r\n        // Alloc LP tokens for nodes as fees\r\n        uint256 amountLPForNode = amountForNodes.mul(priceDecimals).div(\r\n            getCurrentPriceLP()\r\n        );\r\n        // Add minted LP tokens for Nodes\r\n        lockedLPTokensForNode = lockedLPTokensForNode.add(amountLPForNode);\r\n    }\r\n\r\n    /// @dev _addTxidUsed updates a spent txhash.\r\n    /// @param _txs The array of txid.\r\n    function _addTxidUsed(bytes32[] memory _txs) internal {\r\n        for (uint256 i = 0; i < _txs.length; i++) {\r\n            used[_txs[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev _addNode updates a Staker.\r\n    /// @param _addr The address of staker.\r\n    /// @param _data The data of staker.\r\n    /// @param _remove The flag for remove.\r\n    function _addNode(\r\n        address _addr,\r\n        bytes32 _data,\r\n        bool _remove\r\n    ) internal returns (bool) {\r\n        if (_remove) {\r\n            delete nodes[_addr];\r\n            return true;\r\n        }\r\n        if (!isInList[_addr]) {\r\n            nodeAddrs.push(_addr);\r\n            isInList[_addr] = true;\r\n        }\r\n        if (nodes[_addr] == 0x0) {\r\n            nodes[_addr] = _data;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev _splitToValues returns address and amount of stakes\r\n    /// @param _data The data of staker.\r\n    function _splitToValues(bytes32 _data)\r\n        internal\r\n        pure\r\n        returns (address, uint256)\r\n    {\r\n        return (\r\n            address(uint160(uint256(_data))),\r\n            uint256(uint96(bytes12(_data)))\r\n        );\r\n    }\r\n\r\n    /// @dev The contract doesn't allow receiving Ether.\r\n    fallback() external {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbtc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_existingBTCFloat\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfFloat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"BurnLPTokensForFloat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"IssueLPTokensForFloat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"addressesAndAmountOfFloat\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"RecordIncomingFloat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"addressesAndAmountOfLPtoken\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"RecordOutcomingFloat\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WBTC_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeWBTCBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_rewardAddressAndAmounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isRemoved\",\"type\":\"bool[]\"},{\"internalType\":\"uint8\",\"name\":\"_churnedInCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_tssThreshold\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_nodeRewardsRatio\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_withdrawalFeeBPS\",\"type\":\"uint8\"}],\"name\":\"churn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"churnedInCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_incomingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"name\":\"collectSwapFeesForBTC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeesBPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeNodeRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveNodes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfFloat\",\"type\":\"uint256\"}],\"name\":\"getDepositFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getFloatReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minerFees\",\"type\":\"uint256\"}],\"name\":\"getMinimumAmountOfLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"}],\"name\":\"isTxUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLPTokensForNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_addressesAndAmounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_totalSwapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_redeemedFloatTxIds\",\"type\":\"bytes32[]\"}],\"name\":\"multiTransferERC20TightlyPacked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeRewardsRatio\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_addressesAndAmountOfFloat\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_zerofee\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"}],\"name\":\"recordIncomingFloat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_addressesAndAmountOfLPtoken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"}],\"name\":\"recordOutcomingFloat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSwapped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_redeemedFloatTxIds\",\"type\":\"bytes32[]\"}],\"name\":\"singleTransferERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFeeBPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapContract","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000efcf527fdd2084de2ac9ba34463be4a245b45efa0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://591e16969ef6c1353ea14dc7f9015031aefdfce2b38f92cd81009f62c0923b7f"}]}