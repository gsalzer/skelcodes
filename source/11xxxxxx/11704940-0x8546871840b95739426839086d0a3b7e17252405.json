{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.7 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` reSPDX-License-Identifiers this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/Container.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract Container {\r\n\r\n    struct Item{\r\n        uint256 itemType;\r\n        uint256 status;\r\n        address[] addresses;\r\n    }\r\n\r\n    uint256 MaxItemAdressNum = 255;\r\n    mapping (bytes32 => Item) private container;\r\n    // bool private _nativePaused = false;\r\n\r\n\r\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\r\n        return container[_id].addresses;\r\n    }\r\n\r\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\r\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\r\n    }\r\n\r\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\r\n        return container[_id].addresses.length;\r\n    }\r\n\r\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\r\n        container[_id].itemType = _itemType;\r\n        container[_id].status = _status;\r\n    }\r\n\r\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\r\n        require(!itemAddressExists(_id, _oneAddress), \"dup address added\");\r\n        require(container[_id].addresses.length < MaxItemAdressNum, \"too many addresses\");\r\n        container[_id].addresses.push(_oneAddress);\r\n    }\r\n    function removeItemAddresses(bytes32 _id) internal {\r\n        delete container[_id].addresses;\r\n    }\r\n\r\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\r\n                container[_id].addresses.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeItem(bytes32 _id) internal{\r\n        delete container[_id];\r\n    }\r\n\r\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\r\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\r\n            if(container[_id].addresses[i] == _oneAddress){\r\n                container[_id].addresses[i] = _anotherAddress;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeStorage.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeStorage is Container {\r\n    string public constant name = \"BridgeStorage\";\r\n\r\n    address private caller;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller() {\r\n        require(msg.sender == caller, \"only use main contract to call\");\r\n        _;\r\n    }\r\n\r\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\r\n        return itemAddressExists(taskHash, user);\r\n    }\r\n\r\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\r\n        setItemInfo(taskHash, taskType, status);\r\n    }\r\n\r\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\r\n        return getItemInfo(taskHash);\r\n    }\r\n\r\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\r\n        addItemAddress(taskHash, oneAddress);\r\n    }\r\n\r\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\r\n        removeItemAddresses(taskHash);\r\n    }\r\n    function removeTask(bytes32 taskHash)external onlyCaller{\r\n        removeItem(taskHash);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeAdmin.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\ncontract BridgeAdmin is Container {\r\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\r\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\r\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\r\n    uint256 internal constant MAXUSERNUM = 255;\r\n    bytes32[] private classHashArray;\r\n\r\n    uint256 internal ownerRequireNum;\r\n    uint256 internal operatorRequireNum;\r\n\r\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\r\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\r\n    event AdminTaskDropped(bytes32 taskHash);\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        require(ownerCount <= MaxItemAdressNum\r\n        && _required <= ownerCount\r\n        && _required > 0\r\n            && ownerCount > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(itemAddressExists(OWNERHASH, msg.sender), \"only use owner to call\");\r\n        _;\r\n    }\r\n\r\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\r\n        for (uint i = 0; i < _owners.length; i++) {\r\n            addItemAddress(OWNERHASH, _owners[i]);\r\n        }\r\n        addItemAddress(PAUSERHASH,_owners[0]);// we need an init pauser\r\n        addItemAddress(LOGICHASH, address(0x0));\r\n        addItemAddress(STOREHASH, address(0x1));\r\n\r\n        classHashArray.push(OWNERHASH);\r\n        classHashArray.push(OPERATORHASH);\r\n        classHashArray.push(PAUSERHASH);\r\n        classHashArray.push(STOREHASH);\r\n        classHashArray.push(LOGICHASH);\r\n        ownerRequireNum = _ownerRequired;\r\n        operatorRequireNum = 2;\r\n    }\r\n\r\n    function classHashExist(bytes32 aHash) private view returns (bool) {\r\n        for (uint256 i = 0; i < classHashArray.length; i++)\r\n            if (classHashArray[i] == aHash) return true;\r\n        return false;\r\n    }\r\n\r\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\r\n        bytes32 classHash = getClassHash(class);\r\n        return getItemAddresses(classHash);\r\n    }\r\n\r\n    function getOwnerRequireNum() public view returns (uint256){\r\n        return ownerRequireNum;\r\n    }\r\n\r\n    function getOperatorRequireNum() public view returns (uint256){\r\n        return operatorRequireNum;\r\n    }\r\n\r\n    function resetRequiredNum(string memory class, uint256 requiredNum) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"resetRequiredNum\", class, requiredNum));\r\n        addItemAddress(taskHash, msg.sender);\r\n\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeItem(taskHash);\r\n            uint256 previousNum = 0;\r\n            if (classHash == OWNERHASH) {\r\n                previousNum = ownerRequireNum;\r\n                ownerRequireNum = requiredNum;\r\n            }\r\n            else if (classHash == OPERATORHASH) {\r\n                previousNum = operatorRequireNum;\r\n                operatorRequireNum = requiredNum;\r\n            } else {\r\n                revert(\"wrong class\");\r\n            }\r\n            emit AdminRequiredNumChanged(\"resetRequiredNum\", class, previousNum, requiredNum);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function modifyAddress(string memory class, address oldAddress, address newAddress) internal onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"modifyAddress\", class, oldAddress, newAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            replaceItemAddress(classHash, oldAddress, newAddress);\r\n            emit AdminChanged(\"modifyAddress\", class, oldAddress, newAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getClassHash(string memory class) private view returns (bytes32){\r\n        bytes32 classHash = keccak256(abi.encodePacked(class));\r\n        require(classHashExist(classHash), \"invalid class\");\r\n        return classHash;\r\n    }\r\n\r\n    function dropAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n        require(itemAddressExists(classHash, oneAddress), \"no such address exist\");\r\n\r\n        if (classHash == OWNERHASH)\r\n            require(getItemAddressCount(classHash) > ownerRequireNum, \"insuffience addresses\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"dropAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            removeOneItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"dropAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addAddress(string memory class, address oneAddress) public onlyOwner returns (bool){\r\n        bytes32 classHash = getClassHash(class);\r\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\r\n\r\n        bytes32 taskHash = keccak256(abi.encodePacked(\"addAddress\", class, oneAddress));\r\n        addItemAddress(taskHash, msg.sender);\r\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\r\n            addItemAddress(classHash, oneAddress);\r\n            emit AdminChanged(\"addAddress\", class, oneAddress, oneAddress);\r\n            removeItem(taskHash);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function dropTask(bytes32 taskHash) public onlyOwner returns (bool){\r\n        removeItem(taskHash);\r\n        emit AdminTaskDropped(taskHash);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BridgeLogic.sol\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\ncontract BridgeLogic {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"BridgeLogic\";\r\n\r\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\r\n    uint256 public constant TASKINIT = 0;\r\n    uint256 public constant TASKPROCESSING = 1;\r\n    uint256 public constant TASKCANCELLED = 2;\r\n    uint256 public constant TASKDONE = 3;\r\n    uint256 public constant WITHDRAWTASK = 1;\r\n\r\n    address private caller;\r\n    BridgeStorage private store;\r\n\r\n    constructor(address aCaller) {\r\n        caller = aCaller;\r\n    }\r\n\r\n    modifier onlyCaller(){\r\n        require(msg.sender == caller, \"only main contract can call\");\r\n        _;\r\n    }\r\n\r\n    modifier operatorExists(address operator) {\r\n        require(store.supporterExists(OPERATORHASH, operator), \"wrong operator\");\r\n        _;\r\n    }\r\n\r\n    function resetStoreLogic(address storeAddress) external onlyCaller {\r\n        store = BridgeStorage(storeAddress);\r\n    }\r\n\r\n    function getStoreAddress() public view returns(address) {\r\n        return address(store);\r\n    }\r\n\r\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\r\n        require(!store.supporterExists(taskHash, oneAddress), \"supporter already exists\");\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus < TASKDONE, \"wrong status\");\r\n\r\n        if (theTaskStatus != TASKINIT)\r\n            require(theTaskType == taskType, \"task type not match\");\r\n        store.addSupporter(taskHash, oneAddress);\r\n        theSupporterNum++;\r\n        if(theSupporterNum >= requireNum)\r\n            theTaskStatus = TASKDONE;\r\n        else\r\n            theTaskStatus = TASKPROCESSING;\r\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n\r\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\r\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\r\n        require(theTaskStatus == TASKPROCESSING, \"wrong status\");\r\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\r\n        theTaskStatus = TASKCANCELLED;\r\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\r\n        return theTaskStatus;\r\n    }\r\n    function removeTask(bytes32 taskHash)  external onlyCaller {\r\n        store.removeTask(taskHash);\r\n\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TASKCANCELLED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKDONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKINIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKPROCESSING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWTASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"removeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"}],\"name\":\"resetStoreLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requireNum\",\"type\":\"uint256\"}],\"name\":\"supportTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeLogic","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d6d2874415ff7e877f1cc22992ade13a3633061e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4d436c1f9355f3326021f502ba9c02620c525e468881d3698fccbff7dc47f8f"}]}