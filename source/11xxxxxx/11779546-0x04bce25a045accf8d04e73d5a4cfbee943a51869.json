{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ncontract Owned {\r\n    //address payable private Owner;\r\n    address payable internal Owner;\r\n    constructor() public{\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    function IsOwner(address addr) view public returns(bool)\r\n    {\r\n        return Owner == addr;\r\n    }\r\n\r\n    function TransferOwner(address payable newOwner) public onlyOwner\r\n    {\r\n        Owner = newOwner;\r\n    }\r\n\r\n    function Terminate() public onlyOwner\r\n    {\r\n        selfdestruct(Owner);\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract RR is ERC20 {\r\n    mapping(address => uint32) public creatorToSeason; \r\n    mapping(address => mapping(uint32 => address)) public creatorToSeasonToContract;\r\n    mapping(address => mapping(address => mapping(uint32 => uint256))) public staked;\r\n    mapping(address => uint256) public totalStaked;\r\n    \r\n    uint256 pricepertoken = 1 finney;\r\n    address payable saleaddress;\r\n    \r\n    constructor(uint256 initSupply, address payable a) public ERC20(\"Ruined Reign Token\", \"RR\") {\r\n        _mint(a, initSupply);\r\n        saleaddress = a;\r\n    }\r\n    \r\n    function purchaseTokens() external payable {\r\n        _transfer(saleaddress, msg.sender, msg.value/pricepertoken*1000000000000000000);\r\n        emit Purchased(msg.sender, msg.value/pricepertoken*1000000000000000000);\r\n    }\r\n    \r\n    function recoverEth() external {\r\n        require(msg.sender == saleaddress);\r\n        saleaddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function NewSeason(address _core) public{\r\n        creatorToSeason[msg.sender]++;\r\n        creatorToSeasonToContract[msg.sender][creatorToSeason[msg.sender]] = _core;\r\n        \r\n        emit SeasonStarted(msg.sender, creatorToSeason[msg.sender], _core);\r\n    }\r\n    function Stake(address creator, uint32 season, uint256 amt) public{\r\n        require(creatorToSeasonToContract[creator][season] != address(0), 'invalid season');\r\n        Eth_Risk_Core core = Eth_Risk_Core(creatorToSeasonToContract[creator][season]);\r\n        require(core.get_passable_threshold() == core.passable_threshold(), 'staking period has ended');\r\n        require(balanceOf(msg.sender) >= amt, 'Insufficient balance');\r\n        _transfer(msg.sender, creatorToSeasonToContract[creator][season], amt);\r\n        staked[msg.sender][creator][season] += amt;\r\n        totalStaked[creatorToSeasonToContract[creator][season]] += amt;\r\n        \r\n        emit Staked(msg.sender, creator, season, amt);\r\n    }\r\n    function Claim(address creator, uint32 season) public {\r\n        require(creatorToSeasonToContract[creator][season] != address(0), 'invalid season');\r\n        Eth_Risk_Core core = Eth_Risk_Core(creatorToSeasonToContract[creator][season]);\r\n        require(core.ending_balance() > 0, 'season has not yet ended');\r\n        require(staked[msg.sender][creator][season] > 0, 'no tokens staked');\r\n        _transfer(creatorToSeasonToContract[creator][season], msg.sender, staked[msg.sender][creator][season]);    \r\n        uint256 stake = staked[msg.sender][creator][season];\r\n        staked[msg.sender][creator][season] = 0;\r\n        \r\n        core.RRaward(msg.sender, core.ending_balance() * stake / totalStaked[creatorToSeasonToContract[creator][season]] / core.pool_div());\r\n        emit Claimed(msg.sender, creator, season, core.ending_balance() / core.pool_div() * stake / totalStaked[creatorToSeasonToContract[creator][season]]);\r\n    }\r\n    \r\n    event SeasonStarted(address indexed creator, uint32 season, address contract_address);\r\n    event Staked(address indexed staker, address indexed creator, uint32 season, uint256 amt);\r\n    event Claimed(address indexed, address indexed creator, uint32 season, uint256 award);\r\n    event Purchased(address indexed buyer, uint256 amt);\r\n}\r\n\r\ncontract Eth_Risk_Core is Owned{\r\n    uint256 land_wei_price = 1000000000000;\r\n    uint256 unit_wei_price = 10000000000;\r\n    uint256 unit_gold_price = 100000;\r\n\tuint256 blocks_per_round = 4000;\r\n\tuint256 deployed_at_block;\r\n\tuint256 public ending_balance;\r\n\tuint256 public pool_nom = 9;\r\n\tuint256 public pool_div = 10;\r\n\r\n    uint8 max_upgrades = 3;\r\n\tuint8 public passable_threshold = 121;\r\n\tuint8 victory_threshold = 169;\r\n\tuint8 threshold_increment = 6;\r\n\tuint8 max_units = 99;\r\n\tuint32 total_victory_tiles_owned;\r\n    uint32 treatyID;\r\n\tbool firstWithdraw = true;\r\n\taddress rraddress;\r\n    RR rr;\r\n    \r\n    mapping(uint8 => mapping(uint8 => uint8)) public tile_development_level;\r\n    mapping(uint8 => mapping(uint8 => address payable)) public tile_owner;\r\n    mapping(uint8 => mapping(uint8 => uint8)) public units_on_tile;\r\n    mapping(address => uint256) gold_balances;\r\n    mapping(address => uint256) public gold_per_second;\r\n\tmapping(address => uint256) last_GPH_update_time;\r\n\tmapping(address => uint32) public victory_tiles_owned;\r\n\tmapping(address => bool) public withdrew;\r\n\tmapping(uint8 => mapping(uint8 => uint256)) market_price;\r\n\r\n\tconstructor (address rrtoken) public {\r\n\t\tdeployed_at_block = block.number;\r\n\t\trr = RR(rrtoken);\r\n\t\trraddress = rrtoken;\r\n\t}\r\n\r\n    function set_land_wei_price(uint256 new_price) public onlyOwner {\r\n        land_wei_price = new_price;\r\n    }\r\n    function set_unit_wei_price(uint256 new_price) public onlyOwner {\r\n        unit_wei_price = new_price;\r\n    }\r\n    function set_unit_gold_price(uint256 new_price) public onlyOwner {\r\n        unit_gold_price = new_price;\r\n    }\r\n\r\n\tfunction dep() public view returns (uint256){\r\n\t\treturn deployed_at_block;\r\n\t}\r\n\r\n\tfunction get_passable_threshold() public view returns(uint8){\r\n\t\tif((block.number - deployed_at_block)/blocks_per_round > 8){return victory_threshold;}\r\n\t\treturn (passable_threshold + uint8((block.number - deployed_at_block)/blocks_per_round * threshold_increment));\r\n\t}\r\n\r\n\tfunction get_season_ended() public view returns(bool){\r\n\t\treturn get_passable_threshold() >= victory_threshold;\r\n\t}\r\n    \r\n\tfunction withdraw_winnings() public payable{\r\n\t\trequire(get_season_ended(), 'Season hasnt ended');\r\n\t\trequire(!withdrew[msg.sender], 'Already withdrew');\r\n\t\tif(firstWithdraw){\r\n\t\t\tfirstWithdraw = false;\r\n\t\t\tending_balance = address(this).balance;\r\n\t\t}\r\n\t\twithdrew[msg.sender] = true;\r\n\t\tmsg.sender.transfer(get_winnings());\r\n\t}\r\n\r\n\tfunction get_winnings() public view returns(uint256){\r\n\t\tif(total_victory_tiles_owned == 0){ return 0; }\r\n\t\tif(ending_balance == 0){ return address(this).balance*pool_nom/pool_div * victory_tiles_owned[msg.sender] / total_victory_tiles_owned; }\r\n\t\treturn ending_balance*pool_nom/pool_div * victory_tiles_owned[msg.sender] / total_victory_tiles_owned;\r\n\t}\r\n\t\r\n\tfunction RRaward(address payable a, uint256 amt) external {\r\n\t    require(msg.sender == rraddress, 'sender wasnt ruined reign token address');\r\n\t    a.transfer(amt);\r\n\t}\r\n\r\n\tfunction get_pool_total() public view returns(uint256){\r\n\t\tif(get_season_ended()){ return ending_balance*pool_nom/pool_div; }\r\n\t\treturn address(this).balance*pool_nom/pool_div;\r\n\t}\r\n\r\n    function get_gold_value_of_tile(uint8 x, uint8 y) public view returns(uint8){\r\n\t\tif(tile_development_level[x][y] == 0){return uint8(10000/get_tile(x,y));}\r\n        else{return uint8(60000/get_tile(x,y)) * tile_development_level[x][y];} //cityfactor = 6\r\n    }\r\n\tfunction get_gold(address a) public view returns(uint){\r\n\t\treturn gold_balances[a] + gold_per_second[a]*(block.timestamp - last_GPH_update_time[a]);\r\n\t}\r\n\tfunction get_land_price(uint8 x, uint8 y) public view returns(uint256){\r\n\t\treturn land_wei_price * uint256(get_tile(x, y)) * uint256(get_tile(x,y));\r\n\t}\r\n\tfunction get_unit_price(uint8 x, uint8 y) public view returns(uint256){\r\n\t\treturn unit_wei_price * uint256(get_tile(x, y)) * uint256(get_tile(x,y));\r\n\t}\r\n\tfunction get_height(uint8 x, uint8 y) public view returns(uint8){\r\n\t\treturn 1 + (uint8(get_tile(x, y)) - passable_threshold)/threshold_increment;\r\n\t}\r\n\r\n\tfunction market_sell(uint8 x, uint8 y, uint256 price) public {\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n\t\trequire(tile_owner[x][y] == msg.sender, 'Sender isnt owner');\r\n\t\trequire(get_tile(x, y) > get_passable_threshold(), 'Tile impassable');\r\n\t\trequire(price > 0, 'Invalid price');\r\n\t\tmarket_price[x][y] = price;\r\n\t\temit Market_Posted(x, y, msg.sender, price);\r\n\t}\r\n\r\n\tfunction market_buy(uint8 x, uint8 y) public payable{\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n\t\trequire(market_price[x][y] != 0, 'Land not for sale');\r\n\t\trequire(msg.value == market_price[x][y], 'Invalid purchase price');\r\n\t\taddress payable seller = tile_owner[x][y];\r\n\t\tmarket_price[x][y] = 0;\r\n\t\tif(get_tile(x, y) > victory_threshold){\r\n\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\r\n\t\t\tvictory_tiles_owned[seller]--; //underflow not possible\r\n\t\t}\r\n\t\ttile_owner[x][y] = msg.sender;\r\n\t\tseller.transfer(msg.value);\r\n\t\temit Market_Bought(x, y, msg.sender);\r\n\t}\r\n\r\n    function buy_land_with_wei(uint8 tile_x, uint8 tile_y, uint8 unit_count, uint8 dev_lev) public payable {\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n        require(msg.value == get_land_price(tile_x, tile_y)*dev_lev + unit_count*get_unit_price(tile_x, tile_y), 'Invalid payment');\r\n        require(tile_owner[tile_x][tile_y] == address(0) || tile_owner[tile_x][tile_y] == msg.sender, 'Tile already owned');\r\n\t\trequire(get_tile(tile_x, tile_y) > get_passable_threshold(), 'Tile impassable');\r\n\t\trequire(get_tile(tile_x, tile_y) <= get_passable_threshold() + threshold_increment, 'Tile inland'); \r\n\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Buying too many units');\r\n\t\trequire(unit_count >= 1, 'Buying too few units');\r\n\t\trequire(dev_lev <= max_upgrades, 'Development level over max');\r\n\t\t\r\n\t\ttile_development_level[tile_x][tile_y] = dev_lev;\r\n\t\tgold_balances[msg.sender] = get_gold(msg.sender);\r\n        gold_per_second[msg.sender] += get_gold_value_of_tile(tile_x, tile_y);\r\n\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\r\n        tile_owner[tile_x][tile_y] = msg.sender;\r\n        units_on_tile[tile_x][tile_y] = unit_count;\r\n\r\n        emit Land_Bought(tile_x, tile_y, msg.sender, units_on_tile[tile_x][tile_y], dev_lev);\r\n    }\r\n    function buy_units_with_wei(uint8 tile_x, uint8 tile_y, uint8 unit_count) public payable {\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n        require(msg.value >= get_unit_price(tile_x, tile_y) * unit_count, 'Insufficient payment');\r\n        require(tile_owner[tile_x][tile_y] == address(msg.sender), 'Sender isnt owner');\r\n\t\trequire(tile_development_level[tile_x][tile_y] > 0, 'Tile isnt colonized');\r\n\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Sum over max units');\r\n\t\trequire(units_on_tile[tile_x][tile_y] + unit_count > units_on_tile[tile_x][tile_y], 'Units zero or overflow');\r\n\r\n        units_on_tile[tile_x][tile_y] += unit_count;\r\n\t\temit New_Population(tile_x, tile_y, units_on_tile[tile_x][tile_y]);\r\n    }\r\n    function buy_units_with_gold(uint8 tile_x, uint8 tile_y, uint8 unit_count) public {\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n        require(tile_owner[tile_x][tile_y] == address(msg.sender), 'Sender isnt owner');\r\n        require(get_gold(msg.sender) >= (unit_gold_price*unit_count), 'Insufficient gold');\r\n\t\trequire(tile_development_level[tile_x][tile_y] > 0, 'Tile isnt colonized');\r\n\t\trequire(unit_count <= max_units, 'Buying too many units');\r\n\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Sum over max units');\r\n\t\trequire(units_on_tile[tile_x][tile_y] + unit_count > units_on_tile[tile_x][tile_y], 'Units zero or overflow');\r\n\r\n\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\r\n        gold_balances[msg.sender] = get_gold(msg.sender) - unit_gold_price*unit_count;\r\n        units_on_tile[tile_x][tile_y] += unit_count;\r\n\t\temit New_Population(tile_x, tile_y, units_on_tile[tile_x][tile_y]);\r\n    }\r\n\r\n    function transfer_gold(address to, uint256 gold) public {\r\n        //TODO: overflow check here\r\n        require(gold_balances[msg.sender] >= gold, 'Insufficient gold');\r\n        gold_balances[msg.sender] -= gold;\r\n        gold_balances[to] += gold;\r\n\t\temit Gold_Transferred(msg.sender, to, gold);\r\n    }\r\n\r\n    function transfer_land(uint8 tile_x, uint8 tile_y, address payable new_address) public {\r\n        require(tile_owner[tile_x][tile_y] == msg.sender);\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n\t\tif(get_tile(tile_x, tile_y) > victory_threshold){\r\n\t\t\tvictory_tiles_owned[msg.sender]--; //overflow not possible\r\n\t\t\tvictory_tiles_owned[new_address]++; //underflow not possible\r\n\t\t}\r\n\t\tmarket_price[tile_x][tile_y] = 0;\r\n        tile_owner[tile_x][tile_y] = new_address;\r\n        emit Land_Transferred(tile_x, tile_y, msg.sender);\r\n    }\r\n\r\n    function move(uint8 x_from, uint8 y_from, uint8 x_to, uint8 y_to, uint8 units) public {\r\n\t\trequire(units > 0, 'Moving zero units');\r\n\t\trequire(!get_season_ended(), 'Season has ended');\r\n        require(tile_owner[x_from][y_from] == msg.sender, 'Sender doesnt own from tile');\r\n        require(units_on_tile[x_from][y_from] - 1 >= units, 'Moving too many units'); //attacker must leave one unit in from tile\r\n        require(get_tile(x_to, y_to) > get_passable_threshold(), 'Tile impassable');\r\n\t\tif(y_from % 2 == 0)\r\n\t\t{\r\n\t\t\trequire((y_to == y_from + 1 && x_to == x_from) || \r\n\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from) ||\r\n\t\t\t\t\t(y_to == y_from && x_to == x_from + 1) ||\r\n\t\t\t\t\t(y_to == y_from && x_to == x_from - 1) ||\r\n\t\t\t\t\t(y_to == y_from + 1 && x_to == x_from - 1) ||\r\n\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from - 1), 'Tile not adjacent');\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\trequire((y_to == y_from + 1 && x_to == x_from) || \r\n\t\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from) ||\r\n\t\t\t\t\t\t(y_to == y_from && x_to == x_from + 1) ||\r\n\t\t\t\t\t\t(y_to == y_from && x_to == x_from - 1) ||\r\n\t\t\t\t\t\t(y_to == y_from + 1 && x_to == x_from + 1) ||\r\n\t\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from + 1), 'Tile not adjacent');\r\n\t\t}\r\n\r\n\t\tif(tile_owner[x_to][y_to] == address (0x00)){\r\n\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\t\t\t\tunits_on_tile[x_to][y_to] = units;\r\n\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\r\n\r\n\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\r\n\t\t\t\t\ttotal_victory_tiles_owned++;\r\n\t\t\t\t\tvictory_tiles_owned[msg.sender]++;\r\n\t\t\t\t}\r\n\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\r\n\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\r\n\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\r\n\r\n\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\r\n\t\t\t}\r\n        else if(tile_owner[x_to][y_to] == msg.sender){\r\n\t\t\trequire(units_on_tile[x_to][y_to] + units <= max_units, 'Moving too many units');\r\n            require(units_on_tile[x_to][y_to] + units > units_on_tile[x_to][y_to], 'Units overflow, or sent zero');\r\n\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n            units_on_tile[x_to][y_to] += units;\r\n        }\r\n        else {\t\t\t \r\n            //battle\r\n\t\t\tif(tile_development_level[x_to][y_to] > 0){\r\n\t\t\t\tif(units/tile_development_level[x_to][y_to] == units_on_tile[x_to][y_to]) { \r\n\t\t\t\t\t//defender advantage\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] = 1;\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\t\t\t\t}\r\n\t\t\t\telse if(units/tile_development_level[x_to][y_to] > units_on_tile[x_to][y_to]){\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] = units - units_on_tile[x_to][y_to]*tile_development_level[x_to][y_to];\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\r\n\t\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\r\n\t\t\t\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\r\n\t\t\t\t\t\tvictory_tiles_owned[tile_owner[x_to][y_to]]--; //underflow not possible\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgold_balances[tile_owner[x_to][y_to]] = get_gold(msg.sender);\r\n\t\t\t\t\tgold_per_second[tile_owner[x_to][y_to]] -= get_gold_value_of_tile(x_to,y_to);\r\n\t\t\t\t\tlast_GPH_update_time[tile_owner[x_to][y_to]] = block.timestamp;\r\n\t\t\t\t\r\n\t\t\t\t\ttile_development_level[x_to][y_to] = 0;\r\n\t\t\t\t\tmarket_price[x_to][y_to] = 0;\r\n\r\n\t\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\r\n\t\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\r\n\t\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\r\n\r\n\t\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\r\n\t\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] -= units/tile_development_level[x_to][y_to];\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(units == units_on_tile[x_to][y_to]) { \r\n\t\t\t\t\t//defender advantage\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] = 1;\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\t\t\t\t}\r\n\t\t\t\telse if(units > units_on_tile[x_to][y_to]){\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] = units - units_on_tile[x_to][y_to];\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\r\n\t\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\r\n\t\t\t\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\r\n\t\t\t\t\t\tvictory_tiles_owned[tile_owner[x_to][y_to]]--; //underflow not possible\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgold_balances[tile_owner[x_to][y_to]] = get_gold(msg.sender);\r\n\t\t\t\t\tgold_per_second[tile_owner[x_to][y_to]] -= get_gold_value_of_tile(x_to,y_to);\r\n\t\t\t\t\tlast_GPH_update_time[tile_owner[x_to][y_to]] = block.timestamp;\r\n\t\t\t\t\r\n\t\t\t\t\ttile_development_level[x_to][y_to] = 0;\r\n\t\t\t\t\tmarket_price[x_to][y_to] = 0;\r\n\r\n\t\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\r\n\t\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\r\n\t\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\r\n\r\n\t\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\r\n\t\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tunits_on_tile[x_to][y_to] -= units;\r\n\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        emit New_Population(x_from, y_from, units_on_tile[x_from][y_from]);\r\n        emit New_Population(x_to, y_to, units_on_tile[x_to][y_to]);\r\n    }\r\n\r\n\t//noise\r\n\tint64 constant max = 256;\r\n    function integer_noise(int64 n) public pure returns(int64) {\r\n        n = (n >> 13) ^ n;\r\n        int64 nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\r\n        return ((((nn * 100000)) / (1073741824)))%max;\r\n    }\r\n\r\n    function local_average_noise(uint8 x, uint8 y) public pure returns(int64) {\r\n        int64 xq = x + ((y-x)/3);\r\n        int64 yq = y - ((x+y)/3);\r\n\r\n        int64 result =\r\n        ((integer_noise(xq) + integer_noise(yq-1))) //uc\r\n        +   ((integer_noise(xq-1) + integer_noise(yq))) //cl\r\n        +   ((integer_noise(xq+1) + integer_noise(yq))) //cr\r\n        +   ((integer_noise(xq) + integer_noise(yq+1))); //lc\r\n\r\n        return result*1000/8;\r\n    }\r\n\r\n    int64 constant iterations = 5;\r\n\r\n    function stacked_squares(uint8 x, uint8 y) public pure returns(int64) {\r\n\r\n        int64 accumulator;\r\n        for(int64 iteration_idx = 0; iteration_idx < iterations; iteration_idx++){\r\n            accumulator +=  integer_noise((x * iteration_idx) + accumulator + y) +\r\n            integer_noise((y * iteration_idx) + accumulator - x);\r\n        }\r\n\r\n        return accumulator*1000/(iterations*2);\r\n\r\n    }\r\n\r\n    function get_tile(uint8 x, uint8 y) public pure returns (int64) {\r\n        return (local_average_noise(x/4,y/7) + stacked_squares(x/25,y/42))/2000;\r\n    }\r\n\r\n\tevent Land_Bought(uint8 indexed x, uint8 indexed y, address indexed new_owner, uint16 new_population, uint8 development_level);\r\n    event Land_Transferred(uint8 indexed x, uint8 indexed y, address indexed new_owner);\r\n\tevent Gold_Transferred(address from, address to, uint gold);\r\n    event New_Population(uint8 indexed x, uint8 indexed y, uint16 new_population);\t\r\n\tevent Market_Posted(uint8 indexed x, uint8 indexed y, address indexed poster, uint256 price);\r\n\tevent Market_Bought(uint8 indexed x, uint8 indexed y, address indexed buyer);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"a\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contract_address\",\"type\":\"address\"}],\"name\":\"SeasonStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"}],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"NewSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorToSeason\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"creatorToSeasonToContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RR","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000001fc3842bd1f071c0000000000000000000000000000005ab2cf5fd8247b3494cbce22b5ee178817168b4f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a3a9a1ce1288e56d1d5eac58e3a41c288c82ba92bb87b38aefc4d5c6186d5717"}]}