{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.4.16 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface Structs {\r\n    struct Val {\r\n        uint256 value;\r\n    }\r\n\r\n    enum ActionType {\r\n      Deposit,   // Supply tokens\r\n      Withdraw,  // Borrow tokens\r\n      Transfer,  // Transfer balance between accounts\r\n      Buy,       // Buy an amount of some token (externally)\r\n      Sell,      // Sell an amount of some token (externally)\r\n      Trade,     // Trade tokens against another account\r\n      Liquidate, // Liquidate an undercollateralized or expiring account\r\n      Vaporize,  // Use excess tokens to zero-out a completely negative account\r\n      Call       // Send arbitrary data to an address\r\n    }\r\n\r\n    enum AssetDenomination {\r\n        Wei // the amount is denominated in wei\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta // the amount is given as a delta from the current value\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct Info {\r\n        address owner;  // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nabstract contract DyDxPool is Structs {\r\n    function getAccountWei(Info memory account, uint256 marketId) public view virtual returns (Wei memory);\r\n    function operate(Info[] memory, ActionArgs[] memory) public virtual;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract DyDxFlashLoan is Structs {\r\n    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n\r\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\r\n    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    mapping(address => uint256) public currencies;\r\n\r\n    constructor()  {\r\n        currencies[WETH] = 1;\r\n        currencies[SAI] = 2;\r\n        currencies[USDC] = 3;\r\n        currencies[DAI] = 4;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(\r\n            msg.sender == address(pool),\r\n            \"FlashLoan: could be called by DyDx pool only\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function tokenToMarketId(address token) public view returns (uint256) {\r\n        uint256 marketId = currencies[token];\r\n        require(marketId != 0, \"FlashLoan: Unsupported token\");\r\n        return marketId - 1;\r\n    }\r\n\r\n    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\r\n    function flashloan(address token, uint256 amount, bytes memory data)\r\n        internal\r\n    {\r\n        IERC20(token).approve(address(pool), amount + 1);\r\n        Info[] memory infos = new Info[](1);\r\n        ActionArgs[] memory args = new ActionArgs[](3);\r\n\r\n        infos[0] = Info(address(this), 0);\r\n\r\n        AssetAmount memory wamt = AssetAmount(\r\n            false,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            amount\r\n        );\r\n        ActionArgs memory withdraw;\r\n        withdraw.actionType = ActionType.Withdraw;\r\n        withdraw.accountId = 0;\r\n        withdraw.amount = wamt;\r\n        withdraw.primaryMarketId = tokenToMarketId(token);\r\n        withdraw.otherAddress = address(this);\r\n\r\n        args[0] = withdraw;\r\n\r\n        ActionArgs memory call;\r\n        call.actionType = ActionType.Call;\r\n        call.accountId = 0;\r\n        call.otherAddress = address(this);\r\n        call.data = data;\r\n\r\n        args[1] = call;\r\n\r\n        ActionArgs memory deposit;\r\n        AssetAmount memory damt = AssetAmount(\r\n            true,\r\n            AssetDenomination.Wei,\r\n            AssetReference.Delta,\r\n            amount + 1\r\n        );\r\n        deposit.actionType = ActionType.Deposit;\r\n        deposit.accountId = 0;\r\n        deposit.amount = damt;\r\n        deposit.primaryMarketId = tokenToMarketId(token);\r\n        deposit.otherAddress = address(this);\r\n\r\n        args[2] = deposit;\r\n\r\n        pool.operate(infos, args);\r\n    }\r\n}\r\n/**\r\n* OneSplit Contract to call GetReturn and Swap functions\r\n*\r\n*/\r\n\r\nabstract contract IOneSplit {\r\n    function getExpectedReturn (\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 disableFlags\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 toToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 disableFlags\r\n    ) public virtual payable;\r\n}\r\n/**\r\n*@title AyMa\r\n*@dev The AyMa contract has an owner address, and provides....\r\n*\r\n*/\r\ncontract Ayma is DyDxFlashLoan {\r\n\tuint256 public loan;\r\n\t\r\n\t//Sender of the message (current call)\r\n\taddress payable _owner;\r\n\t\r\n\tevent OwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t\r\n\t//Constructor \r\n\tconstructor() payable{ \r\n\t\t_getWeth(msg.value);\r\n        _approveWeth(msg.value);\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\t/**\r\n\t*@return the address of the owner\r\n\t*/\r\n\tfunction owner() public view returns (address payable) {\r\n\t\treturn _owner;\r\n\t}\r\n\t/**\r\n\t*@dev Throw if called by any account other than the owner\r\n\t*/\r\n\tmodifier onlyOwner {\r\n        require(isOwner(),\"Only AyMa can call this function.\");\r\n        _;\r\n    }\r\n\t/**\r\n\t*@return true if 'msg.sender' is the owner of the contract\r\n\t*/\r\n\tfunction isOwner() public view returns (bool) {\r\n\t\treturn msg.sender == _owner;\r\n\t}\r\n\t/*\r\n\t*@dev Allows the current owner to transfer control of the contract to a newOwner\r\n\t*@param newOwner the address to transfer ownership to\r\n\t*/\r\n\tfunction transferOwnership(address payable newOwner) public onlyOwner {\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\tfunction _transferOwnership(address payable newOwner) internal {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnerShipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\t\r\n\t// OneSplit Config\r\n    address ONE_SPLIT_ADDRESS = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\r\n    uint256 PARTS = 100;\r\n    uint256 FLAGS = 0;\r\n\r\n    // 0X Config\r\n    address ZRX_EXCHANGE_ADDRESS = 0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef;\r\n    address ZRX_ERC20_PROXY_ADDRESS = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\r\n    address ZRX_STAKING_PROXY = 0xa26e80e7Dea86279c6d778D702Cc413E6CFfA777; // Fee collector\r\n\t\r\n\t\r\n\t// This contract keeps all Ether sent to it with no way\r\n\t// to get it back.\r\n\t// Allow the contract to receive Ether\r\n    event Received(address, uint);\r\n\treceive() external payable{\r\n\t\temit Received(msg.sender, msg.value);\r\n\t}\r\n\t\r\n\tfunction getFlashloan(address flashToken, uint256 flashAmount, address arbToken, bytes calldata zrxData, uint256 oneSplitMinReturn, uint256[] calldata oneSplitDistribution) external payable onlyOwner {\r\n        uint256 balanceBefore = IERC20(flashToken).balanceOf(address(this));\r\n        bytes memory data = abi.encode(flashToken, flashAmount, balanceBefore, arbToken, zrxData, oneSplitMinReturn, oneSplitDistribution);\r\n        flashloan(flashToken, flashAmount, data); // execution goes to `callFunction`\r\n\r\n        // and this point we have succefully paid the debt\r\n    }\r\n\t\r\n\tfunction callFunction(\r\n        address, /* sender */\r\n        Info calldata, /* accountInfo */\r\n        bytes calldata data\r\n    ) external onlyPool {\r\n        (address flashToken, uint256 flashAmount, uint256 balanceBefore, address arbToken, bytes memory zrxData, uint256 oneSplitMinReturn, uint256[] memory oneSplitDistribution) = abi\r\n            .decode(data, (address, uint256, uint256, address, bytes, uint256, uint256[]));\r\n        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));\r\n        require(\r\n            balanceAfter - balanceBefore == flashAmount,\r\n            \"contract did not get the loan.\"\r\n        );\r\n        loan = balanceAfter;\r\n\r\n        // do whatever you want with the money\r\n        // the dept will be automatically withdrawn from this contract at the end of execution\r\n        _arb(flashToken, arbToken, flashAmount, zrxData, oneSplitMinReturn, oneSplitDistribution);\r\n    }\r\n\tfunction arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {\r\n        _arb(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\r\n    }\r\n\t\r\n\tfunction _arb(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {\r\n        // Track original balance\r\n        uint256 _startBalance = IERC20(_fromToken).balanceOf(address(this));\r\n\r\n        // Perform the arb trade\r\n        _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\r\n\r\n        // Track result balance\r\n        uint256 _endBalance = IERC20(_fromToken).balanceOf(address(this));\r\n\r\n        // Require that arbitrage is profitable\r\n        require(_endBalance > _startBalance, \"End balance must exceed start balance.\");\r\n    }\r\n\t\r\n\tfunction trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) onlyOwner payable public {\r\n        _trade(_fromToken, _toToken, _fromAmount, _0xData, _1SplitMinReturn, _1SplitDistribution);\r\n    }\r\n\t\r\n\tfunction _trade(address _fromToken, address _toToken, uint256 _fromAmount, bytes memory _0xData, uint256 _1SplitMinReturn, uint256[] memory _1SplitDistribution) internal {\r\n        // Track the balance of the token RECEIVED from the trade\r\n        uint256 _beforeBalance = IERC20(_toToken).balanceOf(address(this));\r\n\r\n        // Swap on 0x: give _fromToken, receive _toToken\r\n        _zrxSwap(_fromToken, _fromAmount, _0xData);\r\n\r\n        // Calculate the how much of the token we received\r\n        uint256 _afterBalance = IERC20(_toToken).balanceOf(address(this));\r\n\r\n        // Read _toToken balance after swap\r\n        uint256 _toAmount = _afterBalance - _beforeBalance;\r\n\r\n        // Swap on 1Split: give _toToken, receive _fromToken\r\n        _oneSplitSwap(_toToken, _fromToken, _toAmount, _1SplitMinReturn, _1SplitDistribution);\r\n    }\r\n\t\r\n\t    function zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) onlyOwner public payable {\r\n        _zrxSwap(_from, _amount, _calldataHexString);\r\n    }\r\n\r\n    function _zrxSwap(address _from, uint256 _amount, bytes memory _calldataHexString) internal {\r\n        // Approve tokens\r\n        IERC20 _fromIERC20 = IERC20(_from);\r\n        _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, _amount);\r\n\r\n        // Swap tokens - Fill the Order\r\n        (bool success,) = address(ZRX_EXCHANGE_ADDRESS).call{value:msg.value}(_calldataHexString);\r\n        require(success,\"FillOrder failed!\");\r\n        // Reset approval\r\n        _fromIERC20.approve(ZRX_ERC20_PROXY_ADDRESS, 0);\r\n    }\r\n\r\n    function oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) onlyOwner public payable {\r\n        _oneSplitSwap(_from, _to, _amount, _minReturn, _distribution);\r\n    }\r\n\t\r\n\tfunction _oneSplitSwap(address _from, address _to, uint256 _amount, uint256 _minReturn, uint256[] memory _distribution) internal {\r\n        // Setup contracts\r\n        IERC20 _fromIERC20 = IERC20(_from);\r\n        IERC20 _toIERC20 = IERC20(_to);\r\n        IOneSplit _oneSplitContract = IOneSplit(ONE_SPLIT_ADDRESS);\r\n\r\n        // Approve tokens\r\n        _fromIERC20.approve(ONE_SPLIT_ADDRESS, _amount);\r\n\r\n        // Swap tokens: give _from, get _to\r\n        _oneSplitContract.swap(_fromIERC20, _toIERC20, _amount, _minReturn, _distribution, FLAGS);\r\n\r\n        // Reset approval\r\n        _fromIERC20.approve(ONE_SPLIT_ADDRESS, 0);\r\n    }\r\n\t\r\n\t function getWeth() public payable onlyOwner {\r\n        _getWeth(msg.value);\r\n    }\r\n\r\n    function _getWeth(uint256 _amount) internal {\r\n        (bool success, ) = WETH.call{value:_amount}(\"\");\r\n        require(success, \"failed to get weth\");\r\n    }\r\n\r\n    function approveWeth(uint256 _amount) public onlyOwner {\r\n        _approveWeth(_amount);\r\n    }\r\n\r\n    function _approveWeth(uint256 _amount) internal {\r\n        IERC20(WETH).approve(ZRX_STAKING_PROXY, _amount);\r\n    }\r\n\r\n\t//Deposit Ether\r\n\tfunction deposit(uint256 amount) payable public {\r\n\t\trequire(msg.value==amount);\r\n\t}\r\n\tfunction getBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t// KEEP THIS FUNCTION IN CASE THE CONTRACT RECEIVES TOKENS!\r\n\tfunction withdrawToken(address _tokenAddress) public onlyOwner {\r\n\t\tuint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n\t\tIERC20(_tokenAddress).transfer(_owner, balance);\r\n\t}\r\n\r\n    // KEEP THIS FUNCTION IN CASE THE CONTRACT KEEPS LEFTOVER ETHER!\r\n    function withdrawEther() public onlyOwner {\r\n        address self = address(this); // workaround for a possible solidity bug\r\n        uint256 balance = self.balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerShipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_0xData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_1SplitMinReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_1SplitDistribution\",\"type\":\"uint256[]\"}],\"name\":\"arb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flashToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"arbToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"zrxData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"oneSplitMinReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oneSplitDistribution\",\"type\":\"uint256[]\"}],\"name\":\"getFlashloan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_distribution\",\"type\":\"uint256[]\"}],\"name\":\"oneSplitSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenToMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_0xData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_1SplitMinReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_1SplitDistribution\",\"type\":\"uint256[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_calldataHexString\",\"type\":\"bytes\"}],\"name\":\"zrxSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Ayma","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59e79795dc5dc983351fc10048f5e8dcb4c4890a70f0a5a24215daac358680cb"}]}