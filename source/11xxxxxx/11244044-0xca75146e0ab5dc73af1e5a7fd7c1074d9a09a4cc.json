{"status":"1","message":"OK","result":[{"SourceCode":"// MEE Pair\r\npragma solidity 0.5.12;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract IMPool is IERC20 {\r\n    function isBound(address t) external view returns (bool);\r\n    function getFinalTokens() external view returns(address[] memory);\r\n    function getBalance(address token) external view returns (uint);\r\n    function setSwapFee(uint swapFee) external;\r\n    function setController(address controller) external;\r\n    function setPublicSwap(bool public_) external;\r\n    function finalize() external;\r\n    function bind(address token, uint balance, uint denorm) external;\r\n    function rebind(address token, uint balance, uint denorm) external;\r\n    function unbind(address token) external;\r\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\r\n    function joinswapExternAmountIn(\r\n        address tokenIn, uint tokenAmountIn, uint minPoolAmountOut\r\n    ) external returns (uint poolAmountOut);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract PairERC20 is IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = 'Mercurity Pair Token';\r\n    string public constant symbol = 'MPT';\r\n    uint8 public constant decimals = 18;\r\n    uint  public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function _mint(uint value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[address(this)] = balanceOf[address(this)].add(value);\r\n        emit Transfer(address(0), address(this), value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(balanceOf[from] >= value, \"ERR_INSUFFICIENT_BAL\");\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _move(address from, address to, uint value) internal {\r\n        _transfer(from, to, value);\r\n    }\r\n}\r\n\r\ncontract PairToken is PairERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;           // How many LP tokens or gp amount the user has provided.\r\n        uint256 rewardDebt;       // Reward debt. See explanation below.\r\n    }\r\n    // Controller.\r\n    address private _controller;\r\n    // Pair tokens created per block.\r\n    uint256 private _pairPerBlock;\r\n    // Set gp share reward rate 0%~15%\r\n    uint256 private _gpRate;\r\n    // Pool contract\r\n    IMPool private _pool;\r\n    // Info of each gp.\r\n    address[] private _gpInfo;\r\n    // Info of each user that stakes LP shares;\r\n    mapping(address => UserInfo) public lpInfoList;\r\n    // Info of each user that stakes GP shares;\r\n    mapping(address => UserInfo) public gpInfoList;\r\n\r\n    uint256 private _endBlock;\r\n    uint256 public _totalGpSupply;\r\n    uint256 public _totalLpSupply;\r\n    // Pool Status\r\n    uint256 public _poolLastRewardBlock;\r\n    uint256 public _poolAccPairPerShare;\r\n    uint256 public _poolAccPairGpPerShare;\r\n\r\n    event Deposit(bool isGp, address indexed user, uint256 amount);\r\n    event Withdraw(bool isGp, address indexed user, uint256 amount);\r\n\r\n    constructor(\r\n        address pool,\r\n        uint256 pairPerBlock,\r\n        uint256 rate\r\n    ) public {\r\n        _pool = IMPool(pool);\r\n        _controller = msg.sender;\r\n\r\n        _pairPerBlock = pairPerBlock;\r\n        _endBlock = block.number.add(12500000);\r\n        _poolLastRewardBlock = block.number;\r\n\r\n        require(rate < 100, \"ERR_OVER_MAXIMUM\");\r\n        _gpRate = rate;\r\n    }\r\n\r\n    function isGeneralPartner(address _user)\r\n    external view\r\n    returns (bool) {\r\n        return gpInfoList[_user].amount > 0;\r\n    }\r\n\r\n    // View function to see pending Pairs on frontend.\r\n    function pendingPair(bool gpReward, address _user) external view returns (uint256) {\r\n\r\n        UserInfo storage user = gpReward ? gpInfoList[_user] : lpInfoList[_user];\r\n\r\n        if (user.amount == 0) {return 0;}\r\n        uint256 rate = gpReward ? _gpRate : 100 - _gpRate;\r\n        uint256 accPerShare = gpReward ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\r\n        uint256 lpSupply = gpReward? _totalGpSupply: _totalLpSupply;\r\n\r\n        if (block.number > _poolLastRewardBlock && lpSupply != 0) {\r\n            uint256 blockNum = block.number.sub(_poolLastRewardBlock);\r\n            uint256 pairReward = blockNum.mul(_pairPerBlock);\r\n            if (_gpRate > 0) {\r\n                pairReward = pairReward.mul(rate).div(100);\r\n            }\r\n            accPerShare = accPerShare.add(pairReward.mul(1e12)).div(lpSupply);\r\n        }\r\n        return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables of the given user to be up-to-date.\r\n    function updatePool() public {\r\n        if (block.number <= _poolLastRewardBlock) {return;}\r\n\r\n        if (_totalLpSupply == 0) {\r\n            _poolLastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        if (_poolLastRewardBlock == _endBlock) {return;}\r\n\r\n        uint256 blockNum;\r\n        if (block.number < _endBlock) {\r\n            blockNum = block.number.sub(_poolLastRewardBlock);\r\n            _poolLastRewardBlock = block.number;\r\n        } else {\r\n            blockNum = _endBlock.sub(_poolLastRewardBlock);\r\n            _poolLastRewardBlock = _endBlock;\r\n        }\r\n\r\n        uint256 pairReward = blockNum.mul(_pairPerBlock);\r\n        _mint(pairReward);\r\n\r\n        uint256 lpPairReward;\r\n        if (_gpRate == 0) {\r\n            lpPairReward = pairReward;\r\n        } else {\r\n            uint256 gpReward = pairReward.mul(_gpRate).div(100);\r\n            _poolAccPairGpPerShare = _poolAccPairGpPerShare.add(gpReward.mul(1e12).div(_totalGpSupply));\r\n            lpPairReward = pairReward.sub(gpReward);\r\n        }\r\n\r\n        _poolAccPairPerShare = _poolAccPairPerShare.add(lpPairReward.mul(1e12).div(_totalLpSupply));\r\n    }\r\n\r\n    // add liquidity LP tokens to PairBar for Pair allocation.\r\n    function addLiquidity(bool isGp, address _user, uint256 _amount) external {\r\n        require(msg.sender == address(_pool), \"ERR_POOL_ONLY\");\r\n        _addLiquidity(isGp, _user, _amount);\r\n    }\r\n\r\n    function _addLiquidity(bool isGp, address _user, uint256 _amount) internal {\r\n        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\r\n\r\n        if (isGp) { require(_gpRate > 0, \"ERR_NO_GP_SHARE_REMAIN\"); }\r\n\r\n        updatePool();\r\n\r\n        uint256 accPerShare = isGp ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                _move(address(this), _user, pending);\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            if (isGp) {\r\n                _totalGpSupply += _amount;\r\n            } else {\r\n                _totalLpSupply += _amount;\r\n            }\r\n            emit Deposit(isGp, _user, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\r\n    }\r\n\r\n    function claimPair(bool isGp, address _user) external {\r\n        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\r\n\r\n        if (isGp) { require(_gpRate > 0, \"ERR_NO_GP_SHARE_REMAIN\"); }\r\n\r\n        updatePool();\r\n\r\n        uint256 accPerShare = isGp ? _poolAccPairGpPerShare: _poolAccPairPerShare ;\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                _move(address(this), _user, pending);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\r\n        return;\r\n    }\r\n\r\n    // remove liquidity LP tokens from PairBar.\r\n    function removeLiquidity(bool isGp, address _user, uint256 _amount) external {\r\n        require(msg.sender == address(_pool), \"ERR_POOL_ONLY\");\r\n        _removeLiquidity(isGp, _user, _amount);\r\n    }\r\n\r\n    function _removeLiquidity(bool isGp, address _user, uint256 _amount) internal {\r\n        UserInfo storage user = isGp ? gpInfoList[_user] : lpInfoList[_user];\r\n        require(user.amount >= _amount, \"ERR_UNDER_WITHDRAW_AMOUNT_LIMIT\");\r\n\r\n        updatePool();\r\n\r\n        uint256 accPerShare = isGp ? _poolAccPairGpPerShare : _poolAccPairPerShare;\r\n        uint256 totalSupply = isGp ? _totalGpSupply: _totalLpSupply ;\r\n\r\n        uint256 pending = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            _move(address(this), _user, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            totalSupply -= _amount;\r\n            emit Withdraw(isGp, _user, _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(accPerShare).div(1e12);\r\n    }\r\n\r\n    function updateGPInfo(address[] calldata gps, uint256[] calldata amounts) external {\r\n        require(msg.sender == address(_pool), \"ERR_POOL_ONLY\");\r\n        require(_gpRate > 0, \"ERR_NO_GP_SHARE_REMAIN\");\r\n        require(gps.length == amounts.length, \"ERR_INVALID_PARAM\");\r\n\r\n        // init setup\r\n        if (_totalGpSupply == 0) {\r\n            for (uint i = 0; i < gps.length; i++) {\r\n                UserInfo memory user = gpInfoList[gps[i]];\r\n                if (user.amount == 0) {\r\n                    _totalGpSupply += amounts[i];\r\n                    _gpInfo.push(gps[i]);\r\n                }\r\n            }\r\n            for (uint i = 0; i < gps.length; i++) {\r\n                _addLiquidity(true, gps[i], amounts[i]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        for (uint i = 0; i < gps.length; i++) {\r\n            if (gps[i] == address(0)) {\r\n                continue;\r\n            }\r\n            UserInfo memory user = gpInfoList[gps[i]];\r\n            // add new gp\r\n            if (user.amount == 0) {\r\n                _totalGpSupply += amounts[i];\r\n                _addLiquidity(true, gps[i], amounts[i]);\r\n                _gpInfo.push(gps[i]);\r\n            }else if (user.amount > amounts[i]) {\r\n                uint256 shareChange = user.amount.sub(amounts[i]);\r\n                _totalGpSupply -= shareChange;\r\n                _removeLiquidity(true, gps[i], shareChange);\r\n            }else if (user.amount < amounts[i]) {\r\n                uint256 shareChange = amounts[i].sub(user.amount);\r\n                _totalGpSupply += shareChange;\r\n                _addLiquidity(true, gps[i], shareChange);\r\n            }\r\n        }\r\n\r\n        // filter gpInfo find out which gp need to remove\r\n        for (uint i = 0; i < _gpInfo.length; i++) {\r\n            bool needRemove = true;\r\n            for (uint j = 0; j < gps.length; i++) {\r\n                if (gps[i] == _gpInfo[j]) {\r\n                    needRemove = false;\r\n                }\r\n            }\r\n            if (needRemove) {\r\n                UserInfo memory user = gpInfoList[gps[i]];\r\n                _removeLiquidity(true, gps[i], user.amount);\r\n                _totalGpSupply -= user.amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setController(address controller) public {\r\n        require(msg.sender == _controller, \"ERR_CONTROLLER_ONLY\");\r\n        _controller = controller;\r\n    }\r\n\r\n}\r\n\r\ncontract PairFactory {\r\n    address private _controller;\r\n\r\n    mapping(address => address) private _hasPair;\r\n\r\n    constructor() public {\r\n        _controller = msg.sender;\r\n    }\r\n\r\n    function newPair(address pool, uint256 perBlock, uint256 rate)\r\n    external\r\n    returns (PairToken pair)\r\n    {\r\n        require(_hasPair[address(pool)] == address(0), \"ERR_ALREADY_HAS_PAIR\");\r\n\r\n        pair = new PairToken(pool, perBlock, rate);\r\n        _hasPair[address(pool)] = address(pair);\r\n\r\n        pair.setController(msg.sender);\r\n        return pair;\r\n    }\r\n\r\n\r\n    function getPairToken(address pool)\r\n    external view\r\n    returns (address)\r\n    {\r\n        return _hasPair[pool];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"newPair\",\"outputs\":[{\"internalType\":\"contract PairToken\",\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PairFactory","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b47e26df21e569f74b71c2911dbedaea1c3271a11e7b5151bccaac4ac3b4e268"}]}