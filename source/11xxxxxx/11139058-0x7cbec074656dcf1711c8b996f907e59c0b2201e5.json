{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract SafeMath {\r\n\r\n \r\n   /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return safeSub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n  \r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function safeSub(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\r\n        require(b <= a, error);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return safeDiv(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function safeDiv(uint256 a, uint256 b, string memory error) internal pure returns (uint256) {\r\n        require(b > 0, error);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    \r\n    function safeExponent(uint256 a,uint256 b) internal pure returns (uint256) {\r\n      uint256 result;\r\n      assembly {\r\n          result:=exp(a, b)\t\r\n      }\r\n      return result;\r\n  }\r\n    \r\n    \r\n}\r\n\r\n// File: contracts/IERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    \r\n    address payable public owner;\r\n    \r\n    address payable public newOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _trasnferOwnership(msg.sender);\r\n    }\r\n    \r\n    function _trasnferOwnership(address payable _whom) internal {\r\n        emit OwnershipTransferred(owner,_whom);\r\n        owner = _whom;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"ERR_AUTHORIZED_ADDRESS_ONLY\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable _newOwner)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(_newOwner != address(0),\"ERR_ZERO_ADDRESS\");\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() external\r\n        virtual\r\n        returns (bool){\r\n            require(msg.sender == newOwner,\"ERR_ONLY_NEW_OWNER\");\r\n            owner = newOwner;\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            newOwner = address(0);\r\n            return true;\r\n        }\r\n    \r\n    \r\n}\r\n\r\n// File: contracts/YgfStake.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract YgfStaking is SafeMath, Ownable {\r\n    uint256 public constant DECIMAL_NOMINATOR = 10**18;\r\n\r\n    uint256 public totalStackAmount = 0;\r\n    uint256 public constant rewardBreakingPoint = 28;\r\n\r\n    // used in 100 mulitipliction\r\n    uint256 public constant beforeBreakPoint = 50;\r\n    // used in 100 mulitipliction\r\n    uint256 public constant aterBreakPoint = 100;\r\n    // used in 100 mulitipliction\r\n    uint256 public constant stakeFee = 1000;\r\n\r\n    uint256 public constant MIN_AMOUNT = 1 * DECIMAL_NOMINATOR;\r\n    uint256 public constant MAX_AMOUNT = 500 * DECIMAL_NOMINATOR;\r\n\r\n    address public token;\r\n\r\n    mapping(address => uint256) public stakedAmount;\r\n    mapping(address => uint256) public lastStack;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n\r\n    constructor(address _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    // To stake token user will call this method\r\n    // user can stake only once while\r\n    // 10% fee on stake is distrubuted among other staker\r\n    // store totalStackAmount based on calulation so we keep track record for number of staked token\r\n    function stake(uint256 amount) external returns (bool) {\r\n        require(\r\n            amount >= MIN_AMOUNT && amount <= MAX_AMOUNT,\r\n            \"ERR_MIN_MAX_CONDITION_NOT_FULLFILLED\"\r\n        );\r\n        require(stakedAmount[msg.sender] == 0, \"ERR_ALREADY_STACKED\");\r\n        bool isOk = IERC20(token).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        require(isOk, \"ERR_TOKEN_TRANSFER_FAIL\");\r\n        emit Staked(msg.sender, amount);\r\n        uint256 _fee = safeDiv(safeMul(amount, stakeFee), 10000);\r\n        stakedAmount[msg.sender] = safeSub(amount, _fee);\r\n        lastStack[msg.sender] = now;\r\n        totalStackAmount = safeAdd(totalStackAmount, safeSub(amount, _fee));\r\n        return true;\r\n    }\r\n\r\n    // all penalty is in 100 mulitipliction\r\n    function penalityChecker(uint256 _days) internal pure returns (uint256) {\r\n        if (_days > 84) {\r\n            return 0;\r\n        } else if (_days > 56) {\r\n            return 500;\r\n        } else if (_days > 28) {\r\n            return 1000;\r\n        } else {\r\n            return 2000;\r\n        }\r\n    }\r\n\r\n    // To unstake token user will call this method\r\n    // user will get penalty if they unstack before 84 days\r\n    // user get daily rewards according to calulation\r\n    // sub from totalStackAmount what user stacke erlier so if there is no stacke it wil become zero\r\n    //  for first 28 days we give 0.5 rewards per day\r\n    //  after 29 day reward is 1% per day\r\n    function unStake() external returns (bool) {\r\n        require(stakedAmount[msg.sender] != 0, \"ERR_NOT_STACKED\");\r\n        uint256 lastStackTime = lastStack[msg.sender];\r\n        uint256 amount = stakedAmount[msg.sender];\r\n        uint256 _days = safeDiv(safeSub(now, lastStackTime), 86400);\r\n\r\n        uint256 totalReward = 0;\r\n\r\n        if (_days > rewardBreakingPoint) {\r\n            totalReward = safeMul(\r\n                safeDiv(safeMul(amount, aterBreakPoint), 10000),\r\n                safeSub(_days, rewardBreakingPoint)\r\n            );\r\n            _days = rewardBreakingPoint;\r\n        }\r\n\r\n        totalReward = safeAdd(\r\n            totalReward,\r\n            safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days)\r\n        );\r\n\r\n        uint256 totalAmount = safeAdd(amount, totalReward);\r\n        uint256 penalty = penalityChecker(_days);\r\n\r\n        uint256 penaltyAmount = safeDiv(safeMul(totalAmount, penalty), 10000);\r\n        uint256 recivedAmount = safeSub(totalAmount, penaltyAmount);\r\n\r\n        emit Unstaked(msg.sender, recivedAmount);\r\n        IERC20(token).transfer(msg.sender, recivedAmount);\r\n\r\n        totalStackAmount = safeSub(totalStackAmount, amount);\r\n        stakedAmount[msg.sender] = 0;\r\n        lastStack[msg.sender] = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    // owner can take out token from stack if totalStackAmount amount is less then  DECIMAL_NOMINATOR\r\n    // we check decimal nominator if there is any\r\n    function transferToken(uint256 amount) external onlyOwner() returns (bool) {\r\n        require(totalStackAmount < DECIMAL_NOMINATOR, \"ERR_THERE_IS_STACKING\");\r\n        return IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    // user can check how many day passed untill they stake\r\n    function checkDays(address _whom) external view returns (uint256) {\r\n        uint256 lastStackTime = lastStack[_whom];\r\n        uint256 _days = safeDiv(safeSub(now, lastStackTime), 86400);\r\n        return _days;\r\n    }\r\n\r\n    // user can check how much penalty is there if they unstake now\r\n    function checkPenality(address _whom) external view returns (uint256) {\r\n        uint256 lastStackTime = lastStack[_whom];\r\n        uint256 _days = safeDiv(safeSub(now, lastStackTime), 86400);\r\n        uint256 penalty = penalityChecker(_days);\r\n        return penalty;\r\n    }\r\n\r\n    // user can check balance if they unstake now\r\n    function balanceOf(address _whom) external view returns (uint256) {\r\n        uint256 lastStackTime = lastStack[_whom];\r\n        uint256 amount = stakedAmount[_whom];\r\n        uint256 _days = safeDiv(safeSub(now, lastStackTime), 86400);\r\n        \r\n        uint256 totalReward = 0;\r\n        \r\n        if (_days > rewardBreakingPoint) {\r\n            totalReward = safeMul(\r\n                safeDiv(safeMul(amount, aterBreakPoint), 10000),\r\n                safeSub(_days, rewardBreakingPoint)\r\n            );\r\n            _days = rewardBreakingPoint;\r\n        }\r\n\r\n        totalReward = safeAdd(\r\n            totalReward,\r\n            safeMul(safeDiv(safeMul(amount, beforeBreakPoint), 10000), _days)\r\n        );\r\n\r\n        uint256 totalAmount = safeAdd(amount, totalReward);\r\n        uint256 penalty = penalityChecker(_days);\r\n        uint256 penaltyAmount = safeDiv(safeMul(totalAmount, penalty), 10000);\r\n        uint256 recivedAmount = safeSub(totalAmount, penaltyAmount);\r\n        return recivedAmount;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMAL_NOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aterBreakPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeBreakPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"checkDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"checkPenality\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBreakingPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YgfStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a08c1a3455e37ac6be0eae40f2a451d10529824","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0be3fa150dcbe8df70bec6184f5b2db54143d795942f0fe71bfe97548b4a03ec"}]}