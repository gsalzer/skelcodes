{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: contracts/DonFund.sol\r\n\r\ncontract DonFund is Ownable {\r\n  using SafeMath for uint256;\r\n  using Counters for Counters.Counter;\r\n\r\n  modifier causeExists(uint256 _causeId) {\r\n    require(\r\n      causes[_causeId].createdBy != address(0),\r\n      \"Cause with causeId provided does not exist\"\r\n    );\r\n\r\n    _;\r\n  }\r\n\r\n  struct Cause {\r\n    uint256 id;\r\n    address recipient;\r\n    bool isActive;\r\n    bool isVerified;\r\n    string title;\r\n    string website;\r\n    uint256 funded;\r\n    uint256 xDonAmount;\r\n    uint256 staked;\r\n    address createdBy;\r\n    mapping (address => Supporter) supporters;\r\n  }\r\n\r\n  struct Supporter {\r\n    uint256 donAmount;\r\n    uint256 xDonAmount;\r\n  }\r\n  \r\n  mapping (uint256 => Cause) public causes;\r\n  IERC20 public donCoin;\r\n  bool isDonCoinSet = false;\r\n  Counters.Counter public numCauses;\r\n  uint256 public totalStaked;\r\n  mapping (address => uint256) public stakedByAddress;\r\n  uint256 public minDonCoin;\r\n\r\n  event LogCauseCreated(address createdBy, uint256 causeId);\r\n  event LogEnter(address sender, uint256 causeId, uint256 amount);\r\n  event LogLeave(address sender, uint256 causeId, uint256 senderStaked, uint256 causeAmount);\r\n\r\n\r\n  constructor() public {\r\n    minDonCoin = 1000000000000000000000;\r\n  }\r\n\r\n  function setDonCoin(address _donCoin) public onlyOwner {\r\n    require(\r\n      !isDonCoinSet,\r\n      \"DonCoin already set\"\r\n    );\r\n\r\n    donCoin = IERC20(_donCoin);\r\n\r\n    isDonCoinSet = true;\r\n  }\r\n\r\n  function setMinDonCoin(uint256 _amount) public onlyOwner {\r\n    minDonCoin = _amount;\r\n  }\r\n\r\n  function getNumCauses() public view returns (uint256) {\r\n    return numCauses.current();\r\n  }\r\n\r\n  function createCause(\r\n    address _recipient,\r\n    string memory _title,\r\n    string memory _website\r\n  ) public {\r\n    require(\r\n      donCoin.balanceOf(msg.sender) > minDonCoin,\r\n      \"You do not have the minimum amount of DON to create a cause\"\r\n    );\r\n\r\n    require(\r\n      !isTextEmpty(_title),\r\n      \"The cause must have a title\"\r\n    );\r\n\r\n    require(\r\n      _recipient != address(0),\r\n      \"A recipient address must be provided\"\r\n    );\r\n\r\n    causes[numCauses.current()] = Cause({\r\n      id: numCauses.current(),\r\n      recipient: _recipient,\r\n      isActive: true,\r\n      isVerified: false,\r\n      title: _title,\r\n      website: _website,\r\n      funded: 0,\r\n      xDonAmount: 0,\r\n      staked: 0,\r\n      createdBy: msg.sender\r\n    });\r\n\r\n    emit LogCauseCreated(msg.sender, numCauses.current());\r\n\r\n    numCauses.increment();\r\n  }\r\n\r\n  function verifyCause(\r\n    uint256 _causeId,\r\n    bool _isVerified\r\n  ) public onlyOwner {\r\n    causes[_causeId].isVerified = _isVerified;\r\n  }\r\n\r\n  function setCauseIsActive(uint256 _causeId, bool _isActive) public {\r\n    Cause memory cause = causes[_causeId];\r\n\r\n    require(\r\n      msg.sender == owner() || cause.createdBy == msg.sender,\r\n      \"You do not have access to edit this cause\"\r\n    );\r\n\r\n    causes[_causeId].isActive = _isActive;\r\n  }\r\n\r\n  function causeSupporterDonAmount(\r\n    uint256 _causeId,\r\n    address _supporter\r\n  ) public view causeExists(_causeId) returns(uint256) {\r\n    return causes[_causeId].supporters[_supporter].donAmount;\r\n  }\r\n\r\n  function causeSupporterxDonAmount(\r\n    uint256 _causeId,\r\n    address _supporter\r\n  ) public view causeExists(_causeId) returns(uint256) {\r\n    return causes[_causeId].supporters[_supporter].xDonAmount;\r\n  }\r\n\r\n  function causexDon(\r\n    uint256 _causeId\r\n  ) public view causeExists(_causeId) returns(uint256) {\r\n    return causes[_causeId].xDonAmount;\r\n  }\r\n\r\n  function getxDonAmount(\r\n    uint256 _causeId,\r\n    uint256 _amount\r\n  ) public view causeExists(_causeId) returns(uint256) {\r\n    uint256 causeStaked = causes[_causeId].staked;\r\n    \r\n    uint256 _causexDon = causexDon(_causeId);\r\n    \r\n    if (_causexDon == 0 || causeStaked == 0) {\r\n      return _amount;\r\n    }\r\n\r\n    return _amount.mul(_causexDon).div(causeStaked);\r\n  }\r\n\r\n  function enter(\r\n    uint256 _causeId, uint256 _amount\r\n  ) public causeExists(_causeId) {\r\n    require(\r\n      _amount <= donCoin.allowance(msg.sender, address(this)),\r\n      \"You have not allowed the Don Fund to withdraw the requested of amount of DON\"\r\n    );\r\n\r\n    require(\r\n      causes[_causeId].isActive,\r\n      \"The cause must be active\"\r\n    );\r\n\r\n    uint256 xDonAmount = getxDonAmount(_causeId, _amount);\r\n\r\n    causes[_causeId].supporters[msg.sender].donAmount =\r\n      causes[_causeId].supporters[msg.sender].donAmount.add(_amount);\r\n    \r\n    causes[_causeId].supporters[msg.sender].xDonAmount =\r\n      causes[_causeId].supporters[msg.sender].xDonAmount.add(xDonAmount);\r\n\r\n    stakedByAddress[msg.sender] =\r\n      stakedByAddress[msg.sender].add(_amount);\r\n\r\n    causes[_causeId].staked =\r\n      causes[_causeId].staked.add(_amount);\r\n\r\n    totalStaked = totalStaked.add(_amount);\r\n\r\n    causes[_causeId].xDonAmount =\r\n      causes[_causeId].xDonAmount.add(xDonAmount);\r\n\r\n    // Lock the DON in the contract\r\n    donCoin.transferFrom(msg.sender, address(this), _amount);\r\n\r\n    emit LogEnter(msg.sender, _causeId, _amount);\r\n  }\r\n\r\n  function leave(uint256 _causeId) public causeExists(_causeId) {\r\n    uint256 share = causeSupporterxDonAmount(_causeId, msg.sender);\r\n\r\n    require(\r\n      share > 0,\r\n      \"Your balance is 0\"\r\n    );\r\n\r\n    uint256 causeShares = causes[_causeId].xDonAmount;\r\n\r\n    // Get proportion of total DON in DonFund attributable to this cause\r\n    uint256 causeStaked = causeStakedShare(_causeId);\r\n\r\n    uint256 fundedAmount = share.mul(causeStaked).div(causeShares);\r\n\r\n    uint256 senderStaked = causeSupporterDonAmount(\r\n      _causeId,\r\n      msg.sender\r\n    );\r\n\r\n    donCoin.transfer(msg.sender, senderStaked);\r\n\r\n    // Due to division imprecision for fundedAmount,\r\n    // we multiply causeAmount by 99%\r\n    uint256 causeAmount = (fundedAmount.sub(senderStaked))\r\n      .mul(90)\r\n      .div(100);\r\n\r\n    donCoin.transfer(causes[_causeId].recipient, causeAmount);\r\n\r\n    causes[_causeId].supporters[msg.sender].donAmount = 0;\r\n    causes[_causeId].supporters[msg.sender].xDonAmount = 0;\r\n\r\n    causes[_causeId].xDonAmount =\r\n      causes[_causeId].xDonAmount.sub(share);\r\n\r\n    causes[_causeId].funded =\r\n      causes[_causeId].funded.add(causeAmount);\r\n    \r\n    causes[_causeId].staked =\r\n      causes[_causeId].staked.sub(senderStaked);\r\n\r\n    stakedByAddress[msg.sender] =\r\n      stakedByAddress[msg.sender].sub(senderStaked);\r\n\r\n    totalStaked = totalStaked.sub(senderStaked);\r\n\r\n    emit LogLeave(msg.sender, _causeId, senderStaked, causeAmount);\r\n  }\r\n\r\n  function causeStakedShare(\r\n    uint256 _causeId\r\n  ) public view returns(uint256) {\r\n    Cause memory cause = causes[_causeId];\r\n\r\n    if (cause.staked == 0 || totalStaked == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return cause.staked\r\n      .mul(donCoin.balanceOf(address(this)))\r\n      .div(totalStaked);\r\n  }\r\n\r\n  function isTextEmpty(\r\n    string memory _string\r\n  ) public pure returns(bool) {\r\n    return bytes(_string).length == 0;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"}],\"name\":\"LogCauseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeAmount\",\"type\":\"uint256\"}],\"name\":\"LogLeave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"causeStakedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supporter\",\"type\":\"address\"}],\"name\":\"causeSupporterDonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supporter\",\"type\":\"address\"}],\"name\":\"causeSupporterxDonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"causes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"funded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xDonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"createdBy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"causexDon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"}],\"name\":\"createCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumCauses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getxDonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string\",\"type\":\"string\"}],\"name\":\"isTextEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDonCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numCauses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setCauseIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donCoin\",\"type\":\"address\"}],\"name\":\"setDonCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinDonCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"verifyCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DonFund","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b049dcffaff4bb541f00f565f19f0840196aaf99dac234088669543f1b002d83"}]}