{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.6;\r\n\r\n// File: contracts/bondPricer/Enums.sol\r\n\r\n\r\n\r\n/**\r\n    Pure SBT:\r\n        ___________\r\n       /\r\n      /\r\n     /\r\n    /\r\n\r\n    LBT Shape:\r\n              /\r\n             /\r\n            /\r\n           /\r\n    ______/\r\n\r\n    SBT Shape:\r\n              ______\r\n             /\r\n            /\r\n    _______/\r\n\r\n    Triangle:\r\n              /\\\r\n             /  \\\r\n            /    \\\r\n    _______/      \\________\r\n */\r\nenum BondType {NONE, PURE_SBT, SBT_SHAPE, LBT_SHAPE, TRIANGLE}\r\n\r\n// File: contracts/bondPricer/BondPricerInterface.sol\r\n\r\n\r\n\r\n\r\ninterface BondPricerInterface {\r\n    /**\r\n     * @notice Calculate bond price and leverage by black-scholes formula.\r\n     * @param bondType type of target bond.\r\n     * @param points coodinates of polyline which is needed for price calculation\r\n     * @param spotPrice is a oracle price.\r\n     * @param volatilityE8 is a oracle volatility.\r\n     * @param untilMaturity Remaining period of target bond in second\r\n     **/\r\n    function calcPriceAndLeverage(\r\n        BondType bondType,\r\n        uint256[] calldata points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) external view returns (uint256 price, uint256 leverageE8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Multiplies two signed integers, reverts on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two signed integers, reverts on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two signed integers, reverts on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: contracts/math/UseSafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice ((a - 1) / b) + 1 = (a + b -1) / b\r\n * for example a.add(10**18 -1).div(10**18) = a.sub(1).div(10**18) + 1\r\n */\r\n\r\nlibrary SafeMathDivRoundUp {\r\n    using SafeMath for uint256;\r\n\r\n    function divRoundUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        require(b > 0, errorMessage);\r\n        return ((a - 1) / b) + 1;\r\n    }\r\n\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divRoundUp(a, b, \"SafeMathDivRoundUp: modulo by zero\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title UseSafeMath\r\n * @dev One can use SafeMath for not only uint256 but also uin64 or uint16,\r\n * and also can use SafeCast for uint256.\r\n * For example:\r\n *   uint64 a = 1;\r\n *   uint64 b = 2;\r\n *   a = a.add(b).toUint64() // `a` become 3 as uint64\r\n * In addition, one can use SignedSafeMath and SafeCast.toUint256(int256) for int256.\r\n * In the case of the operation to the uint64 value, one needs to cast the value into int256 in\r\n * advance to use `sub` as SignedSafeMath.sub not SafeMath.sub.\r\n * For example:\r\n *   int256 a = 1;\r\n *   uint64 b = 2;\r\n *   int256 c = 3;\r\n *   a = a.add(int256(b).sub(c)); // `a` becomes 0 as int256\r\n *   b = a.toUint256().toUint64(); // `b` becomes 0 as uint64\r\n */\r\nabstract contract UseSafeMath {\r\n    using SafeMath for uint256;\r\n    using SafeMathDivRoundUp for uint256;\r\n    using SafeMath for uint64;\r\n    using SafeMathDivRoundUp for uint64;\r\n    using SafeMath for uint16;\r\n    using SignedSafeMath for int256;\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n}\r\n\r\n// File: contracts/math/AdvancedMath.sol\r\n\r\n\r\n\r\nabstract contract AdvancedMath {\r\n    /**\r\n     * @dev sqrt(2*PI) * 10^8\r\n     */\r\n    int256 internal constant SQRT_2PI_E8 = 250662827;\r\n    int256 internal constant PI_E8 = 314159265;\r\n    int256 internal constant E_E8 = 271828182;\r\n    int256 internal constant INV_E_E8 = 36787944; // 1/e\r\n    int256 internal constant LOG2_E8 = 30102999;\r\n    int256 internal constant LOG3_E8 = 47712125;\r\n\r\n    int256 internal constant p = 23164190;\r\n    int256 internal constant b1 = 31938153;\r\n    int256 internal constant b2 = -35656378;\r\n    int256 internal constant b3 = 178147793;\r\n    int256 internal constant b4 = -182125597;\r\n    int256 internal constant b5 = 133027442;\r\n\r\n    /**\r\n     * @dev Calcurate an approximate value of the square root of x by Babylonian method.\r\n     */\r\n    function _sqrt(int256 x) internal pure returns (int256 y) {\r\n        require(x >= 0, \"cannot calculate the square root of a negative number\");\r\n        int256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns log(x) for any positive x.\r\n     */\r\n    function _logTaylor(int256 inputE4) internal pure returns (int256 outputE4) {\r\n        require(inputE4 > 1, \"input should be positive number\");\r\n        int256 inputE8 = inputE4 * 10**4;\r\n        // input x for _logTayler1 is adjusted to 1/e < x < 1.\r\n        while (inputE8 < INV_E_E8) {\r\n            inputE8 = (inputE8 * E_E8) / 10**8;\r\n            outputE4 -= 10**4;\r\n        }\r\n        while (inputE8 > 10**8) {\r\n            inputE8 = (inputE8 * INV_E_E8) / 10**8;\r\n            outputE4 += 10**4;\r\n        }\r\n        outputE4 += _logTaylor1(inputE8 / 10**4 - 10**4);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate an approximate value of the logarithm of input value by\r\n     * Taylor expansion around 1.\r\n     * @dev log(x + 1) = x - 1/2 x^2 + 1/3 x^3 - 1/4 x^4 + 1/5 x^5\r\n     *                     - 1/6 x^6 + 1/7 x^7 - 1/8 x^8 + ...\r\n     */\r\n    function _logTaylor1(int256 inputE4) internal pure returns (int256 outputE4) {\r\n        outputE4 =\r\n            inputE4 -\r\n            inputE4**2 /\r\n            (2 * 10**4) +\r\n            inputE4**3 /\r\n            (3 * 10**8) -\r\n            inputE4**4 /\r\n            (4 * 10**12) +\r\n            inputE4**5 /\r\n            (5 * 10**16) -\r\n            inputE4**6 /\r\n            (6 * 10**20) +\r\n            inputE4**7 /\r\n            (7 * 10**24) -\r\n            inputE4**8 /\r\n            (8 * 10**28);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the cumulative distribution function of standard normal\r\n     * distribution.\r\n     * @dev Abramowitz and Stegun, Handbook of Mathematical Functions (1964)\r\n     * http://people.math.sfu.ca/~cbm/aands/\r\n     */\r\n    function _calcPnorm(int256 inputE4) internal pure returns (int256 outputE8) {\r\n        require(inputE4 < 440 * 10**4 && inputE4 > -440 * 10**4, \"input is too large\");\r\n        int256 _inputE4 = inputE4 > 0 ? inputE4 : inputE4 * (-1);\r\n        int256 t = 10**16 / (10**8 + (p * _inputE4) / 10**4);\r\n        int256 X2 = (inputE4 * inputE4) / 2;\r\n        int256 exp2X2 = 10**8 +\r\n            X2 +\r\n            (X2**2 / (2 * 10**8)) +\r\n            (X2**3 / (6 * 10**16)) +\r\n            (X2**4 / (24 * 10**24)) +\r\n            (X2**5 / (120 * 10**32)) +\r\n            (X2**6 / (720 * 10**40));\r\n        int256 Z = (10**24 / exp2X2) / SQRT_2PI_E8;\r\n        int256 y = (b5 * t) / 10**8;\r\n        y = ((y + b4) * t) / 10**8;\r\n        y = ((y + b3) * t) / 10**8;\r\n        y = ((y + b2) * t) / 10**8;\r\n        y = 10**8 - (Z * ((y + b1) * t)) / 10**16;\r\n        return inputE4 > 0 ? y : 10**8 - y;\r\n    }\r\n}\r\n\r\n// File: contracts/bondPricer/GeneralizedPricing.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev The decimals of price, point, spotPrice and strikePrice are all the same.\r\n */\r\ncontract GeneralizedPricing is UseSafeMath, AdvancedMath {\r\n    /**\r\n     * @dev sqrt(365*86400) * 10^8\r\n     */\r\n    int256 internal constant SQRT_YEAR_E8 = 5615.69229926 * 10**8;\r\n\r\n    int256 internal constant MIN_ND1_E8 = 0.0001 * 10**8;\r\n    int256 internal constant MAX_ND1_E8 = 0.9999 * 10**8;\r\n    uint256 internal constant MAX_LEVERAGE_E8 = 1000 * 10**8;\r\n\r\n    /**\r\n     * @notice Calculate bond price and leverage by black-scholes formula.\r\n     * @param bondType type of target bond.\r\n     * @param points coodinates of polyline which is needed for price calculation\r\n     * @param untilMaturity Remaining period of target bond in second\r\n     **/\r\n    function calcPriceAndLeverage(\r\n        BondType bondType,\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) public pure returns (uint256 price, uint256 leverageE8) {\r\n        if (bondType == BondType.LBT_SHAPE) {\r\n            (price, leverageE8) = _calcLbtShapePriceAndLeverage(\r\n                points,\r\n                spotPrice,\r\n                volatilityE8,\r\n                untilMaturity\r\n            );\r\n        } else if (bondType == BondType.SBT_SHAPE) {\r\n            (price, leverageE8) = _calcSbtShapePrice(\r\n                points,\r\n                spotPrice,\r\n                volatilityE8,\r\n                untilMaturity\r\n            );\r\n        } else if (bondType == BondType.TRIANGLE) {\r\n            (price, leverageE8) = _calcTrianglePrice(\r\n                points,\r\n                spotPrice,\r\n                volatilityE8,\r\n                untilMaturity\r\n            );\r\n        } else if (bondType == BondType.PURE_SBT) {\r\n            (price, leverageE8) = _calcPureSBTPrice(points, spotPrice, volatilityE8, untilMaturity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pure call option price and multiply incline of LBT.\r\n     **/\r\n\r\n    function _calcLbtShapePriceAndLeverage(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) internal pure returns (uint256 price, uint256 leverageE8) {\r\n        require(points.length == 3, \"3 coordinates is needed for LBT price calculation\");\r\n        uint256 inclineE8 = (points[2].mul(10**8)).div(points[1].sub(points[0]));\r\n        (uint256 callOptionPriceE8, int256 nd1E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[0]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        price = (callOptionPriceE8 * inclineE8) / 10**8;\r\n        leverageE8 = _calcLbtLeverage(\r\n            uint256(spotPrice),\r\n            price,\r\n            (nd1E8 * int256(inclineE8)) / 10**8\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate (etherPrice - call option price at strike price of SBT).\r\n     **/\r\n    function _calcPureSBTPrice(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) internal pure returns (uint256 price, uint256 leverageE8) {\r\n        require(points.length == 1, \"1 coordinate is needed for pure SBT price calculation\");\r\n        (uint256 callOptionPrice1, int256 nd1E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[0]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        price = uint256(spotPrice) > callOptionPrice1 ? (uint256(spotPrice) - callOptionPrice1) : 0;\r\n        leverageE8 = _calcLbtLeverage(uint256(spotPrice), price, 10**8 - nd1E8);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate (call option1  - call option2) * incline of SBT.\r\n\r\n              ______                 /\r\n             /                      /\r\n            /          =           /        -                   /\r\n    _______/               _______/                 ___________/\r\n    SBT SHAPE BOND         CALL OPTION 1            CALL OPTION 2\r\n     **/\r\n    function _calcSbtShapePrice(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) internal pure returns (uint256 price, uint256 leverageE8) {\r\n        require(points.length == 3, \"3 coordinates is needed for SBT price calculation\");\r\n        uint256 inclineE8 = (points[2].mul(10**8)).div(points[1].sub(points[0]));\r\n        (uint256 callOptionPrice1, int256 nd11E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[0]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        (uint256 callOptionPrice2, int256 nd12E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[1]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        price = callOptionPrice1 > callOptionPrice2\r\n            ? (inclineE8 * (callOptionPrice1 - callOptionPrice2)) / 10**8\r\n            : 0;\r\n        leverageE8 = _calcLbtLeverage(\r\n            uint256(spotPrice),\r\n            price,\r\n            (int256(inclineE8) * (nd11E8 - nd12E8)) / 10**8\r\n        );\r\n    }\r\n\r\n    /**\r\n      * @notice Calculate (call option1 * left incline) - (call option2 * (left incline + right incline)) + (call option3 * right incline).\r\n\r\n                                                                   /\r\n                                                                  /\r\n                                                                 /\r\n              /\\                            /                    \\\r\n             /  \\                          /                      \\\r\n            /    \\            =           /     -                  \\          +\r\n    _______/      \\________       _______/               _______    \\             __________________\r\n                                                                     \\                          \\\r\n                                                                      \\                          \\\r\n\r\n    **/\r\n    function _calcTrianglePrice(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) internal pure returns (uint256 price, uint256 leverageE8) {\r\n        require(\r\n            points.length == 4,\r\n            \"4 coordinates is needed for triangle option price calculation\"\r\n        );\r\n        uint256 incline1E8 = (points[2].mul(10**8)).div(points[1].sub(points[0]));\r\n        uint256 incline2E8 = (points[2].mul(10**8)).div(points[3].sub(points[1]));\r\n        (uint256 callOptionPrice1, int256 nd11E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[0]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        (uint256 callOptionPrice2, int256 nd12E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[1]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        (uint256 callOptionPrice3, int256 nd13E8) = calcCallOptionPrice(\r\n            spotPrice,\r\n            int256(points[3]),\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        int256 nd1E8 = ((nd11E8 * int256(incline1E8)) +\r\n            (nd13E8 * int256(incline2E8)) -\r\n            (int256(incline1E8 + incline2E8) * nd12E8)) / 10**8;\r\n\r\n        uint256 price12 = (callOptionPrice1 * incline1E8) + (callOptionPrice3 * incline2E8);\r\n        price = price12 > (incline1E8 + incline2E8) * callOptionPrice2\r\n            ? (price12 - ((incline1E8 + incline2E8) * callOptionPrice2)) / 10**8\r\n            : 0;\r\n        leverageE8 = _calcLbtLeverage(uint256(spotPrice), price, nd1E8);\r\n    }\r\n\r\n    /**\r\n     * @dev calcCallOptionPrice() imposes the restrictions of strikePrice, spotPrice, nd1E8 and nd2E8.\r\n     */\r\n    function _calcLbtPrice(\r\n        int256 spotPrice,\r\n        int256 strikePrice,\r\n        int256 nd1E8,\r\n        int256 nd2E8\r\n    ) internal pure returns (int256 lbtPrice) {\r\n        int256 lowestPrice = (spotPrice > strikePrice) ? spotPrice - strikePrice : 0;\r\n        lbtPrice = (spotPrice * nd1E8 - strikePrice * nd2E8) / 10**8;\r\n        if (lbtPrice < lowestPrice) {\r\n            lbtPrice = lowestPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev calcCallOptionPrice() imposes the restrictions of spotPrice, lbtPrice and nd1E8.\r\n     */\r\n    function _calcLbtLeverage(\r\n        uint256 spotPrice,\r\n        uint256 lbtPrice,\r\n        int256 nd1E8\r\n    ) internal pure returns (uint256 lbtLeverageE8) {\r\n        int256 modifiedNd1E8 = nd1E8 < MIN_ND1_E8 ? MIN_ND1_E8 : nd1E8 > MAX_ND1_E8\r\n            ? MAX_ND1_E8\r\n            : nd1E8;\r\n        return lbtPrice != 0 ? (uint256(modifiedNd1E8) * spotPrice) / lbtPrice : MAX_LEVERAGE_E8;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pure call option price and N(d1) by black-scholes formula.\r\n     * @param spotPrice is a oracle price.\r\n     * @param strikePrice Strike price of call option\r\n     * @param volatilityE8 is a oracle volatility.\r\n     * @param untilMaturity Remaining period of target bond in second\r\n     **/\r\n    function calcCallOptionPrice(\r\n        int256 spotPrice,\r\n        int256 strikePrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) public pure returns (uint256 price, int256 nd1E8) {\r\n        require(spotPrice > 0 && spotPrice < 10**13, \"oracle price should be between 0 and 10^13\");\r\n        require(\r\n            volatilityE8 > 0 && volatilityE8 < 10 * 10**8,\r\n            \"oracle volatility should be between 0% and 1000%\"\r\n        );\r\n        require(\r\n            untilMaturity > 0 && untilMaturity < 31536000,\r\n            \"the bond should not have expired and less than 1 year\"\r\n        );\r\n        require(\r\n            strikePrice > 0 && strikePrice < 10**13,\r\n            \"strike price should be between 0 and 10^13\"\r\n        );\r\n\r\n        int256 spotPerStrikeE4 = (spotPrice * 10**4) / strikePrice;\r\n        int256 sigE8 = (volatilityE8 * (_sqrt(untilMaturity)) * (10**8)) / SQRT_YEAR_E8;\r\n\r\n        int256 logSigE4 = _logTaylor(spotPerStrikeE4);\r\n        int256 d1E4 = ((logSigE4 * 10**8) / sigE8) + (sigE8 / (2 * 10**4));\r\n        nd1E8 = _calcPnorm(d1E4);\r\n\r\n        int256 d2E4 = d1E4 - (sigE8 / 10**4);\r\n        int256 nd2E8 = _calcPnorm(d2E4);\r\n        price = uint256(_calcLbtPrice(spotPrice, strikePrice, nd1E8, nd2E8));\r\n    }\r\n}\r\n\r\n// File: contracts/bondPricer/CustomGeneralizedPricing.sol\r\n\r\n\r\n\r\n\r\n\r\nabstract contract CustomGeneralizedPricing is BondPricerInterface {\r\n    using SafeMath for uint256;\r\n\r\n    GeneralizedPricing internal immutable _originalBondPricerAddress;\r\n\r\n    constructor(address originalBondPricerAddress) public {\r\n        _originalBondPricerAddress = GeneralizedPricing(originalBondPricerAddress);\r\n    }\r\n\r\n    function calcPriceAndLeverage(\r\n        BondType bondType,\r\n        uint256[] calldata points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity\r\n    ) external view override returns (uint256 price, uint256 leverageE8) {\r\n        (price, leverageE8) = _originalBondPricerAddress.calcPriceAndLeverage(\r\n            bondType,\r\n            points,\r\n            spotPrice,\r\n            volatilityE8,\r\n            untilMaturity\r\n        );\r\n        if (bondType == BondType.LBT_SHAPE) {\r\n            require(\r\n                _isAcceptableLbt(points, spotPrice, volatilityE8, untilMaturity, price, leverageE8),\r\n                \"the liquid bond is not acceptable\"\r\n            );\r\n        } else if (bondType == BondType.SBT_SHAPE) {\r\n            require(\r\n                _isAcceptableSbt(points, spotPrice, volatilityE8, untilMaturity, price, leverageE8),\r\n                \"the solid bond is not acceptable\"\r\n            );\r\n        } else if (bondType == BondType.TRIANGLE) {\r\n            require(\r\n                _isAcceptableTriangleBond(\r\n                    points,\r\n                    spotPrice,\r\n                    volatilityE8,\r\n                    untilMaturity,\r\n                    price,\r\n                    leverageE8\r\n                ),\r\n                \"the triangle bond is not acceptable\"\r\n            );\r\n        } else if (bondType == BondType.PURE_SBT) {\r\n            require(\r\n                _isAcceptablePureSbt(\r\n                    points,\r\n                    spotPrice,\r\n                    volatilityE8,\r\n                    untilMaturity,\r\n                    price,\r\n                    leverageE8\r\n                ),\r\n                \"the pure solid bond is not acceptable\"\r\n            );\r\n        } else {\r\n            require(\r\n                _isAcceptableOtherBond(\r\n                    points,\r\n                    spotPrice,\r\n                    volatilityE8,\r\n                    untilMaturity,\r\n                    price,\r\n                    leverageE8\r\n                ),\r\n                \"the bond is not acceptable\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function originalBondPricer() external view returns (address originalBondPricerAddress) {\r\n        originalBondPricerAddress = address(_originalBondPricerAddress);\r\n    }\r\n\r\n    function _isAcceptableLbt(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity,\r\n        uint256 bondPrice,\r\n        uint256 bondLeverageE8\r\n    ) internal view virtual returns (bool);\r\n\r\n    function _isAcceptableSbt(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity,\r\n        uint256 bondPrice,\r\n        uint256 bondLeverageE8\r\n    ) internal view virtual returns (bool);\r\n\r\n    function _isAcceptableTriangleBond(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity,\r\n        uint256 bondPrice,\r\n        uint256 bondLeverageE8\r\n    ) internal view virtual returns (bool);\r\n\r\n    function _isAcceptablePureSbt(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity,\r\n        uint256 bondPrice,\r\n        uint256 bondLeverageE8\r\n    ) internal view virtual returns (bool);\r\n\r\n    function _isAcceptableOtherBond(\r\n        uint256[] memory points,\r\n        int256 spotPrice,\r\n        int256 volatilityE8,\r\n        int256 untilMaturity,\r\n        uint256 bondPrice,\r\n        uint256 bondLeverageE8\r\n    ) internal view virtual returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/util/Time.sol\r\n\r\n\r\n\r\nabstract contract Time {\r\n    function _getBlockTimestampSec() internal view returns (uint256 unixtimesec) {\r\n        unixtimesec = block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n}\r\n\r\n// File: contracts/bondPricer/BondPricer.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BondPricer is CustomGeneralizedPricing, Time {\r\n    using SafeMath for uint256;\r\n\r\n    constructor(address originalBondPricerAddress)\r\n        public\r\n        CustomGeneralizedPricing(originalBondPricerAddress)\r\n    {}\r\n\r\n    function _isAcceptableLbt(\r\n        uint256[] memory,\r\n        int256 etherPriceE8,\r\n        int256 ethVolatilityE8,\r\n        int256 untilMaturity,\r\n        uint256,\r\n        uint256\r\n    ) internal view override returns (bool) {\r\n        return _isAcceptable(etherPriceE8, ethVolatilityE8, untilMaturity);\r\n    }\r\n\r\n    function _isAcceptableSbt(\r\n        uint256[] memory,\r\n        int256 etherPriceE8,\r\n        int256 ethVolatilityE8,\r\n        int256 untilMaturity,\r\n        uint256,\r\n        uint256\r\n    ) internal view override returns (bool) {\r\n        return _isAcceptable(etherPriceE8, ethVolatilityE8, untilMaturity);\r\n    }\r\n\r\n    function _isAcceptableTriangleBond(\r\n        uint256[] memory,\r\n        int256 etherPriceE8,\r\n        int256 ethVolatilityE8,\r\n        int256 untilMaturity,\r\n        uint256,\r\n        uint256\r\n    ) internal view override returns (bool) {\r\n        return _isAcceptable(etherPriceE8, ethVolatilityE8, untilMaturity);\r\n    }\r\n\r\n    function _isAcceptablePureSbt(\r\n        uint256[] memory,\r\n        int256 etherPriceE8,\r\n        int256 ethVolatilityE8,\r\n        int256 untilMaturity,\r\n        uint256,\r\n        uint256\r\n    ) internal view override returns (bool) {\r\n        return _isAcceptable(etherPriceE8, ethVolatilityE8, untilMaturity);\r\n    }\r\n\r\n    function _isAcceptableOtherBond(\r\n        uint256[] memory,\r\n        int256,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256\r\n    ) internal view override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function _isAcceptable(\r\n        int256 etherPriceE8,\r\n        int256 ethVolatilityE8,\r\n        int256 untilMaturity\r\n    ) internal pure returns (bool) {\r\n        require(etherPriceE8 < 100000 * 10**8, \"ETH price should be between $0 and $100000\");\r\n        require(ethVolatilityE8 < 10 * 10**8, \"ETH volatility should be between 0% and 1000%\");\r\n        require(untilMaturity <= 12 weeks, \"the bond maturity must be less than 12 weeks\");\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalBondPricerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum BondType\",\"name\":\"bondType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"},{\"internalType\":\"int256\",\"name\":\"spotPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"volatilityE8\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"untilMaturity\",\"type\":\"int256\"}],\"name\":\"calcPriceAndLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageE8\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalBondPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"originalBondPricerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BondPricer","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"0000000000000000000000001f204642e2a576210b466cc5cacfb3530c4750ca","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7e620c1798ddd5fc401907ded5ba612ea0d671fbcd282694bb4b2f26008da0f8"}]}