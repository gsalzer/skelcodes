{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/IFraxPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.5.7;\\n\\ninterface IFraxPool {\\n    function minting_fee() external returns (uint256);\\n    function redemption_fee() external returns (uint256);\\n    function buyback_fee() external returns (uint256);\\n    function recollat_fee() external returns (uint256);\\n    function collatDollarBalance() external returns (uint256);\\n    function availableExcessCollatDV() external returns (uint256);\\n    function getCollateralPrice() external returns (uint256);\\n    function setCollatETHOracle(address _collateral_weth_oracle_address, address _weth_address) external;\\n    function mint1t1FRAX(uint256 collateral_amount, uint256 FRAX_out_min) external;\\n    function mintAlgorithmicFRAX(uint256 fxs_amount_d18, uint256 FRAX_out_min) external;\\n    function mintFractionalFRAX(uint256 collateral_amount, uint256 fxs_amount, uint256 FRAX_out_min) external;\\n    function redeem1t1FRAX(uint256 FRAX_amount, uint256 COLLATERAL_out_min) external;\\n    function redeemFractionalFRAX(uint256 FRAX_amount, uint256 FXS_out_min, uint256 COLLATERAL_out_min) external;\\n    function redeemAlgorithmicFRAX(uint256 FRAX_amount, uint256 FXS_out_min) external;\\n    function collectRedemption() external;\\n    function recollateralizeFRAX(uint256 collateral_amount, uint256 FXS_out_min) external;\\n    function buyBackFXS(uint256 FXS_amount, uint256 COLLATERAL_out_min) external;\\n    function toggleMinting() external;\\n    function toggleRedeeming() external;\\n    function toggleRecollateralize() external;\\n    function toggleBuyBack() external;\\n    function toggleCollateralPrice(uint256 _new_price) external;\\n    function setPoolParameters(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee) external;\\n    function setTimelock(address new_timelock) external;\\n    function setOwner(address _owner_address) external;\\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/IOneSplit.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//\\n//  [ msg.sender ]\\n//       | |\\n//       | |\\n//       \\\\_/\\n// +---------------+ ________________________________\\n// | OneSplitAudit | _______________________________  \\\\\\n// +---------------+                                 \\\\ \\\\\\n//       | |                      ______________      | | (staticcall)\\n//       | |                    /  ____________  \\\\    | |\\n//       | | (call)            / /              \\\\ \\\\   | |\\n//       | |                  / /               | |   | |\\n//       \\\\_/                  | |               \\\\_/   \\\\_/\\n// +--------------+           | |           +----------------------+\\n// | OneSplitWrap |           | |           |   OneSplitViewWrap   |\\n// +--------------+           | |           +----------------------+\\n//       | |                  | |                     | |\\n//       | | (delegatecall)   | | (staticcall)        | | (staticcall)\\n//       \\\\_/                  | |                     \\\\_/\\n// +--------------+           | |             +------------------+\\n// |   OneSplit   |           | |             |   OneSplitView   |\\n// +--------------+           | |             +------------------+\\n//       | |                  / /\\n//        \\\\ \\\\________________/ /\\n//         \\\\__________________/\\n//\\n\\n\\ncontract IOneSplitConsts {\\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_BANCOR + ...\\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\\n    uint256 internal constant DEPRECATED_FLAG_DISABLE_KYBER = 0x02; // Deprecated\\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x800;\\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x10000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x20000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x40000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x80000000000000; // Turned off by default\\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_COMP = 0x100000000000000; // Deprecated, Turned off by default\\n    uint256 internal constant FLAG_DISABLE_KYBER_ALL = 0x200000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_1 = 0x400000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_2 = 0x800000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_3 = 0x1000000000000000;\\n    uint256 internal constant FLAG_DISABLE_KYBER_4 = 0x2000000000000000;\\n    uint256 internal constant FLAG_ENABLE_CHI_BURN_BY_ORIGIN = 0x4000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ALL = 0x8000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_ETH = 0x10000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_DAI = 0x20000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_USDC = 0x40000000000000000;\\n    uint256 internal constant FLAG_DISABLE_MOONISWAP_POOL_TOKEN = 0x80000000000000000;\\n}\\n\\n\\ncontract IOneSplit is IOneSplitConsts {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags\\n    )\\n        public\\n        payable\\n        returns(uint256 returnAmount);\\n}\\n\\n\\ncontract IOneSplitMulti is IOneSplit {\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256[] memory parts,\\n        uint256[] memory flags,\\n        uint256[] memory destTokenEthPriceTimesGasPrices\\n    )\\n        public\\n        view\\n        returns(\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swapMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256[] memory flags\\n    )\\n        public\\n        payable\\n        returns(uint256 returnAmount);\\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/IUniswapV2Exchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\n\\n\\ninterface IUniswapV2Exchange {\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\\n\\n\\nlibrary UniswapV2ExchangeLib {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    function getReturn(\\n        IUniswapV2Exchange exchange,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint amountIn\\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\n        if (fromToken > destToken) {\\n            (reserve0, reserve1) = (reserve1, reserve0);\\n        }\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\n\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(Math.min(reserveOut, reserve1));\\n        uint256 denominator = Math.min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\\n    }\\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/MintUtilities.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport './OneSplitAudit.sol';\\nimport './IFraxPool.sol';\\nimport './IWETH.sol';\\n\\n// 1inch stuff here\\n// https://github.com/1inch-exchange/1inchProtocol/tree/master/contracts/interface\\n// https://github.com/1inch-exchange/1inchProtocol/blob/master/contracts/IOneSplit.sol\\n// https://github.com/1inch-exchange/1inchProtocol\\n\\ncontract MintUtilities {\\n    using SafeMath for uint256;\\n    address constant private USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address constant private FRAX_ADDRESS = 0x853d955aCEf822Db058eb8505911ED77F175b99e;\\n    address constant private FXS_ADDRESS = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\\n    address payable constant public ONE_SPLIT_AUDIT_ADDRESS = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\\n\\n    IERC20 constant internal USDC_ERC20 = IERC20(USDC_ADDRESS);\\n    IERC20 constant internal WETH_ERC20 = IERC20(WETH_ADDRESS);\\n    IERC20 constant internal FRAX_ERC20 = IERC20(FRAX_ADDRESS);\\n    IERC20 constant internal FXS_ERC20 = IERC20(FXS_ADDRESS);\\n    IERC20 constant internal ETH_ERC20 = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    IWETH constant internal WETH_IWETH = IWETH(WETH_ADDRESS);\\n\\n    OneSplitAudit constant internal OneSplit_Inst = OneSplitAudit(ONE_SPLIT_AUDIT_ADDRESS);\\n\\n    address public owner_address;\\n    address payable public owner_address_payable;\\n    bool public is_paused;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner_address, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    modifier notPaused {\\n        require(is_paused == false, \\\"Contract is paused\\\");\\n        _;\\n    }\\n\\n    constructor () public {\\n        owner_address = msg.sender;\\n        owner_address_payable = msg.sender;\\n        is_paused = false;\\n    }\\n\\n    function _swapETHForUSDC(\\n        uint256 amountETH,\\n        uint256 usdc_out_min,\\n        uint256[] memory distribution_ETH_USDC\\n    ) internal notPaused returns (uint256) {\\n        // Swap some ETH for USDC\\n        (uint256 received_USDC) = OneSplit_Inst.swap.value(amountETH)(\\n            ETH_ERC20,\\n            USDC_ERC20,\\n            amountETH,\\n            usdc_out_min,\\n            distribution_ETH_USDC,\\n            0\\n        );\\n        \\n        // Make sure enough USDC was recieved\\n        require(received_USDC >= usdc_out_min, \\\"[_swapETHForUSDC]: Not enough USDC received from swap\\\");\\n\\n        return received_USDC;\\n    }\\n\\n    function _swapUSDCForFXS(\\n        uint256 received_USDC,\\n        uint256 fxs_out_min,\\n        uint256[] memory distribution_USDC_FXS\\n    ) internal notPaused returns (uint256) {\\n        // Approve the USDC for 1inch\\n        USDC_ERC20.approve(address(this), received_USDC);\\n\\n        // Swap some USDC for FXS\\n        (uint256 received_FXS) = OneSplit_Inst.swap(\\n            USDC_ERC20,\\n            FXS_ERC20,\\n            received_USDC,\\n            fxs_out_min,\\n            distribution_USDC_FXS,\\n            0\\n        );\\n\\n        // Make sure enough FXS was recieved\\n        require(received_FXS >= fxs_out_min, \\\"[_swapUSDCForFXS]: Not enough FXS received from swap\\\");\\n\\n        return received_FXS;\\n    }\\n\\n    function ethSwapToMintFF(\\n        uint256 amountETH,\\n        uint256 usdc_out_min,\\n        uint256[] calldata distribution_ETH_USDC,\\n        uint256 fxs_out_min,\\n        uint256[] calldata distribution_USDC_FXS,\\n        uint256 usdc_for_mint,\\n        uint256 frax_out_min,\\n        address _pool_address\\n    ) external payable notPaused {\\n        require(msg.value == amountETH, \\\"msg.value doesn't match amountETH\\\");\\n        // =================== ETH -> USDC via 1inch ===================\\n        (uint256 received_USDC) = _swapETHForUSDC(amountETH, usdc_out_min, distribution_ETH_USDC);\\n\\n        // =================== USDC -> FXS via 1inch ===================\\n        (uint256 received_FXS) = _swapUSDCForFXS(received_USDC, fxs_out_min, distribution_USDC_FXS);\\n\\n        // =================== USDC + FXS -> FRAX via FraxPool mint ===================\\n\\n        // Approve the Collat for the FraxPool\\n        USDC_ERC20.approve(_pool_address, (usdc_for_mint).mul(105).div(100));\\n\\n        // Approve the FXS for the FraxPool\\n        FXS_ERC20.approve(_pool_address, (received_FXS).mul(105).div(100));\\n\\n        // Mint\\n        IFraxPool(_pool_address).mintFractionalFRAX(usdc_for_mint, received_FXS, frax_out_min);\\n\\n        // Return FRAX to owner. Note that there may be crumbs left over...\\n        FRAX_ERC20.transfer(msg.sender, frax_out_min);\\n    }\\n\\n    // The smart contract should never end up having to need this as there should be no deposits. Just for emergency purposes\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        IERC20(tokenAddress).transfer(owner_address, tokenAmount);\\n    }\\n\\n    function withdraw() external onlyOwner\\n    {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function selfDestruct() external payable onlyOwner {\\n        selfdestruct(owner_address_payable);\\n    }\\n\\n    function togglePaused() external onlyOwner {\\n        is_paused = !is_paused;\\n    } \\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/OneSplitAudit.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IUniswapV2Exchange.sol\\\";\\nimport \\\"./IOneSplit.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\n\\n\\ncontract IFreeFromUpTo is IERC20 {\\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\\n}\\n\\ninterface IReferralGasSponsor {\\n    function makeGasDiscount(\\n        uint256 gasSpent,\\n        uint256 returnAmount,\\n        bytes calldata msgSenderCalldata\\n    ) external;\\n}\\n\\n\\nlibrary Array {\\n    function first(IERC20[] memory arr) internal pure returns(IERC20) {\\n        return arr[0];\\n    }\\n\\n    function last(IERC20[] memory arr) internal pure returns(IERC20) {\\n        return arr[arr.length - 1];\\n    }\\n}\\n\\n\\n//\\n// Security assumptions:\\n// 1. It is safe to have infinite approves of any tokens to this smart contract,\\n//    since it could only call `transferFrom()` with first argument equal to msg.sender\\n// 2. It is safe to call `swap()` with reliable `minReturn` argument,\\n//    if returning amount will not reach `minReturn` value whole swap will be reverted.\\n// 3. Additionally CHI tokens could be burned from caller in case of FLAG_ENABLE_CHI_BURN (0x10000000000)\\n//    presented in `flags` or from transaction origin in case of FLAG_ENABLE_CHI_BURN_BY_ORIGIN (0x4000000000000000)\\n//    presented in `flags`. Burned amount would refund up to 43% of gas fees.\\n//\\ncontract OneSplitAudit is IOneSplit, Ownable {\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n    using Array for IERC20[];\\n\\n    IWETH constant internal weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n\\n    IOneSplitMulti public oneSplitImpl;\\n\\n    event ImplementationUpdated(address indexed newImpl);\\n\\n    event Swapped(\\n        IERC20 indexed fromToken,\\n        IERC20 indexed destToken,\\n        uint256 fromTokenAmount,\\n        uint256 destTokenAmount,\\n        uint256 minReturn,\\n        uint256[] distribution,\\n        uint256[] flags,\\n        address referral,\\n        uint256 feePercent\\n    );\\n\\n    constructor(IOneSplitMulti impl) public {\\n        setNewImpl(impl);\\n    }\\n\\n    function() external payable {\\n        // solium-disable-next-line security/no-tx-origin\\n        require(msg.sender != tx.origin, \\\"OneSplit: do not send ETH directly\\\");\\n    }\\n\\n    function setNewImpl(IOneSplitMulti impl) public onlyOwner {\\n        oneSplitImpl = impl;\\n        emit ImplementationUpdated(address(impl));\\n    }\\n\\n    /// @notice Calculate expected returning amount of `destToken`\\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param parts (uint256) Number of pieces source volume could be splitted,\\n    /// works like granularity, higly affects gas usage. Should be called offchain,\\n    /// but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See contants in IOneSplit.sol\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        (returnAmount, , distribution) = getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            0\\n        );\\n    }\\n\\n    /// @notice Calculate expected returning amount of `destToken`\\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param parts (uint256) Number of pieces source volume could be splitted,\\n    /// works like granularity, higly affects gas usage. Should be called offchain,\\n    /// but could be called onchain if user swaps not his own funds, but this is still considered as not safe.\\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\\n    /// @param destTokenEthPriceTimesGasPrice (uint256) destToken price to ETH multiplied by gas price\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        public\\n        view\\n        returns(\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        return oneSplitImpl.getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            destTokenEthPriceTimesGasPrice\\n        );\\n    }\\n\\n    /// @notice Calculate expected returning amount of first `tokens` element to\\n    /// last `tokens` element through ann the middle tokens with corresponding\\n    /// `parts`, `flags` and `destTokenEthPriceTimesGasPrices` array values of each step\\n    /// @param tokens (IERC20[]) Address of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param parts (uint256[]) Number of pieces source volume could be splitted\\n    /// @param flags (uint256[]) Flags for enabling and disabling some features, default 0\\n    /// @param destTokenEthPriceTimesGasPrices (uint256[]) destToken price to ETH multiplied by gas price\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256[] memory parts,\\n        uint256[] memory flags,\\n        uint256[] memory destTokenEthPriceTimesGasPrices\\n    )\\n        public\\n        view\\n        returns(\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        )\\n    {\\n        return oneSplitImpl.getExpectedReturnWithGasMulti(\\n            tokens,\\n            amount,\\n            parts,\\n            flags,\\n            destTokenEthPriceTimesGasPrices\\n        );\\n    }\\n\\n    /// @notice Swap `amount` of `fromToken` to `destToken`\\n    /// @param fromToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param destToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param minReturn (uint256) Minimum expected return, else revert\\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags // See contants in IOneSplit.sol\\n    ) public payable returns(uint256) {\\n        return swapWithReferral(\\n            fromToken,\\n            destToken,\\n            amount,\\n            minReturn,\\n            distribution,\\n            flags,\\n            address(0),\\n            0\\n        );\\n    }\\n\\n    /// @notice Swap `amount` of `fromToken` to `destToken`\\n    /// param fromToken (IERC20) Address of token or `address(0)` for Ether\\n    /// param destToken (IERC20) Address of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param minReturn (uint256) Minimum expected return, else revert\\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\\n    /// @param flags (uint256) Flags for enabling and disabling some features, default 0\\n    /// @param referral (address) Address of referral\\n    /// @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)\\n    function swapWithReferral(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags, // See contants in IOneSplit.sol\\n        address referral,\\n        uint256 feePercent\\n    ) public payable returns(uint256) {\\n        IERC20[] memory tokens = new IERC20[](2);\\n        tokens[0] = fromToken;\\n        tokens[1] = destToken;\\n\\n        uint256[] memory flagsArray = new uint256[](1);\\n        flagsArray[0] = flags;\\n\\n        swapWithReferralMulti(\\n            tokens,\\n            amount,\\n            minReturn,\\n            distribution,\\n            flagsArray,\\n            referral,\\n            feePercent\\n        );\\n    }\\n\\n    /// @notice Swap `amount` of first element of `tokens` to the latest element of `destToken`\\n    /// @param tokens (IERC20[]) Addresses of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param minReturn (uint256) Minimum expected return, else revert\\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\\n    /// @param flags (uint256[]) Flags for enabling and disabling some features, default 0\\n    function swapMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256[] memory flags\\n    ) public payable returns(uint256) {\\n        swapWithReferralMulti(\\n            tokens,\\n            amount,\\n            minReturn,\\n            distribution,\\n            flags,\\n            address(0),\\n            0\\n        );\\n    }\\n\\n    /// @notice Swap `amount` of first element of `tokens` to the latest element of `destToken`\\n    /// @param tokens (IERC20[]) Addresses of token or `address(0)` for Ether\\n    /// @param amount (uint256) Amount for `fromToken`\\n    /// @param minReturn (uint256) Minimum expected return, else revert\\n    /// @param distribution (uint256[]) Array of weights for volume distribution returned by `getExpectedReturn`\\n    /// @param flags (uint256[]) Flags for enabling and disabling some features, default 0\\n    /// @param referral (address) Address of referral\\n    /// @param feePercent (uint256) Fees percents normalized to 1e18, limited to 0.03e18 (3%)\\n    function swapWithReferralMulti(\\n        IERC20[] memory tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256[] memory flags,\\n        address referral,\\n        uint256 feePercent\\n    ) public payable returns(uint256 returnAmount) {\\n        require(tokens.length >= 2 && amount > 0, \\\"OneSplit: swap makes no sense\\\");\\n        require(flags.length == tokens.length - 1, \\\"OneSplit: flags array length is invalid\\\");\\n        require((msg.value != 0) == tokens.first().isETH(), \\\"OneSplit: msg.value should be used only for ETH swap\\\");\\n        require(feePercent <= 0.03e18, \\\"OneSplit: feePercent out of range\\\");\\n\\n        uint256 gasStart = gasleft();\\n\\n        Balances memory beforeBalances = _getFirstAndLastBalances(tokens, true);\\n\\n        // Transfer From\\n        if (amount == uint256(-1)) {\\n            amount = Math.min(\\n                tokens.first().balanceOf(msg.sender),\\n                tokens.first().allowance(msg.sender, address(this))\\n            );\\n        }\\n        tokens.first().universalTransferFromSenderToThis(amount);\\n        uint256 confirmed = tokens.first().universalBalanceOf(address(this)).sub(beforeBalances.ofFromToken);\\n\\n        // Swap\\n        tokens.first().universalApprove(address(oneSplitImpl), confirmed);\\n        oneSplitImpl.swapMulti.value(tokens.first().isETH() ? confirmed : 0)(\\n            tokens,\\n            confirmed,\\n            minReturn,\\n            distribution,\\n            flags\\n        );\\n\\n        Balances memory afterBalances = _getFirstAndLastBalances(tokens, false);\\n\\n        // Return\\n        returnAmount = afterBalances.ofDestToken.sub(beforeBalances.ofDestToken);\\n        require(returnAmount >= minReturn, \\\"OneSplit: actual return amount is less than minReturn\\\");\\n        tokens.last().universalTransfer(referral, returnAmount.mul(feePercent).div(1e18));\\n        tokens.last().universalTransfer(msg.sender, returnAmount.sub(returnAmount.mul(feePercent).div(1e18)));\\n\\n        emit Swapped(\\n            tokens.first(),\\n            tokens.last(),\\n            amount,\\n            returnAmount,\\n            minReturn,\\n            distribution,\\n            flags,\\n            referral,\\n            feePercent\\n        );\\n\\n        // Return remainder\\n        if (afterBalances.ofFromToken > beforeBalances.ofFromToken) {\\n            tokens.first().universalTransfer(msg.sender, afterBalances.ofFromToken.sub(beforeBalances.ofFromToken));\\n        }\\n\\n        if ((flags[0] & (FLAG_ENABLE_CHI_BURN | FLAG_ENABLE_CHI_BURN_BY_ORIGIN)) > 0) {\\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n            _chiBurnOrSell(\\n                ((flags[0] & FLAG_ENABLE_CHI_BURN_BY_ORIGIN) > 0) ? tx.origin : msg.sender,\\n                (gasSpent + 14154) / 41947\\n            );\\n        }\\n        else if ((flags[0] & FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP) > 0) {\\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n            IReferralGasSponsor(referral).makeGasDiscount(gasSpent, returnAmount, msg.data);\\n        }\\n    }\\n\\n    function claimAsset(IERC20 asset, uint256 amount) public onlyOwner {\\n        asset.universalTransfer(msg.sender, amount);\\n    }\\n\\n    function _chiBurnOrSell(address payable sponsor, uint256 amount) internal {\\n        IUniswapV2Exchange exchange = IUniswapV2Exchange(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2);\\n        (uint256 sellRefund,,) = UniswapV2ExchangeLib.getReturn(exchange, chi, weth, amount);\\n        uint256 burnRefund = amount.mul(18_000).mul(tx.gasprice);\\n\\n        if (sellRefund < burnRefund.add(tx.gasprice.mul(36_000))) {\\n            chi.freeFromUpTo(sponsor, amount);\\n        }\\n        else {\\n            chi.transferFrom(sponsor, address(exchange), amount);\\n            exchange.swap(0, sellRefund, address(this), \\\"\\\");\\n            weth.withdraw(weth.balanceOf(address(this)));\\n            sponsor.transfer(address(this).balance);\\n        }\\n    }\\n\\n    struct Balances {\\n        uint256 ofFromToken;\\n        uint256 ofDestToken;\\n    }\\n\\n    function _getFirstAndLastBalances(IERC20[] memory tokens, bool subValue) internal view returns(Balances memory) {\\n        return Balances({\\n            ofFromToken: tokens.first().universalBalanceOf(address(this)).sub(subValue ? msg.value : 0),\\n            ofDestToken: tokens.last().universalBalanceOf(address(this))\\n        });\\n    }\\n}\"\r\n    },\r\n    \"/home/travis/Documents/Ubuntu_Shared/misc-frax-contracts/contracts/UniversalERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            address(uint160(to)).transfer(amount);\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                address(uint160(to)).transfer(amount);\\n            }\\n            if (msg.value > amount) {\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\\n        if (!isETH(token)) {\\n            if (amount == 0) {\\n                token.safeApprove(to, 0);\\n                return;\\n            }\\n\\n            uint256 allowance = token.allowance(address(this), to);\\n            if (allowance < amount) {\\n                if (allowance > 0) {\\n                    token.safeApprove(to, 0);\\n                }\\n                token.safeApprove(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall.gas(10000)(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        if (!success || data.length == 0) {\\n            (success, data) = address(token).staticcall.gas(10000)(\\n                abi.encodeWithSignature(\\\"DECIMALS()\\\")\\n            );\\n        }\\n\\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\\n    }\\n\\n    function eq(IERC20 a, IERC20 b) internal pure returns(bool) {\\n        return a == b || (isETH(a) && isETH(b));\\n    }\\n\\n    function notExist(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(-1));\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_SPLIT_AUDIT_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdc_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution_ETH_USDC\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"fxs_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution_USDC_FXS\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usdc_for_mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frax_out_min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool_address\",\"type\":\"address\"}],\"name\":\"ethSwapToMintFF\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_address_payable\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MintUtilities","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}