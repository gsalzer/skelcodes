{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.8;\n\n\n// \n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// \n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// \n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// \n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n *\n * Credit: https://github.com/OpenZeppelin/openzeppelin-upgrades/blob/master/packages/core/contracts/Initializable.sol\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// \n/**\n * @notice Interface for ERC20 token which supports minting new tokens.\n */\ninterface IERC20Mintable is IERC20 {\n    \n    function mint(address _user, uint256 _amount) external;\n\n}\n\n// \n/**\n * @notice Interface for ERC20 token which supports mint and burn.\n */\ninterface IERC20MintableBurnable is IERC20Mintable {\n    \n    function burn(uint256 _amount) external;\n\n    function burnFrom(address _user, uint256 _amount) external;\n}\n\n// \n/**\n * @notice ACoconut swap.\n */\ncontract ACoconutSwap is Initializable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Token swapped between two underlying tokens.\n     */\n    event TokenSwapped(address indexed buyer, address indexed tokenSold, address indexed tokenBought, uint256 amountSold, uint256 amountBought);\n    /**\n     * @dev New pool token is minted.\n     */\n    event Minted(address indexed provider, uint256 mintAmount, uint256[] amounts, uint256 feeAmount);\n    /**\n     * @dev Pool token is redeemed.\n     */\n    event Redeemed(address indexed provider, uint256 redeemAmount, uint256[] amounts, uint256 feeAmount);\n    /**\n     * @dev Fee is collected.\n     */\n    event FeeCollected(address indexed feeRecipient, uint256 feeAmount);\n\n    uint256 public constant feeDenominator = 10 ** 10;\n    address[] public tokens;\n    uint256[] public precisions; // 10 ** (18 - token decimals)\n    uint256[] public balances; // Converted to 10 ** 18\n    uint256 public mintFee; // Mint fee * 10**10\n    uint256 public swapFee; // Swap fee * 10**10\n    uint256 public redeemFee; // Redeem fee * 10**10\n    address public feeRecipient;\n    address public poolToken;\n    uint256 public totalSupply; // The total amount of pool token minted by the swap.\n                                // It might be different from the pool token supply as the pool token can have multiple minters.\n\n    address public governance;\n    mapping(address => bool) public admins;\n    bool public paused;\n\n    uint256 public initialA;\n\n    /**\n     * @dev Initialize the ACoconut Swap.\n     */\n    function initialize(address[] memory _tokens, uint256[] memory _precisions, uint256[] memory _fees,\n        address _poolToken, uint256 _A) public initializer {\n        require(_tokens.length == _precisions.length, \"input mismatch\");\n        require(_fees.length == 3, \"no fees\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            require(_tokens[i] != address(0x0), \"token not set\");\n            require(_precisions[i] != 0, \"precision not set\");\n            balances.push(0);\n        }\n        require(_poolToken != address(0x0), \"pool token not set\");\n\n        governance = msg.sender;\n        feeRecipient = msg.sender;\n        tokens = _tokens;\n        precisions = _precisions;\n        mintFee = _fees[0];\n        swapFee = _fees[1];\n        redeemFee = _fees[2];\n        poolToken = _poolToken;\n\n        initialA = _A;\n\n        // The swap must start with paused state!\n        paused = true;\n    }\n\n    /**\n     * @dev Returns the current value of A. This method might be updated in the future.\n     */\n    function getA() public view returns (uint256) {\n        return initialA;\n    }\n\n    /**\n     * @dev Computes D given token balances.\n     * @param _balances Normalized balance of each token.\n     * @param _A Amplification coefficient from getA()\n     */\n    function _getD(uint256[] memory _balances, uint256 _A) internal pure returns (uint256) {\n        uint256 sum = 0;\n        uint256 i = 0;\n        uint256 Ann = _A;\n        for (i = 0; i < _balances.length; i++) {\n            sum = sum.add(_balances[i]);\n            Ann = Ann.mul(_balances.length);\n        }\n        if (sum == 0)   return 0;\n\n        uint256 prevD = 0;\n        uint256 D = sum;\n        for (i = 0; i < 255; i++) {\n            uint256 pD = D;\n            for (uint256 j = 0; j < _balances.length; j++) {\n                // pD = pD * D / (_x * balance.length)\n                pD = pD.mul(D).div(_balances[j].mul(_balances.length));\n            }\n            prevD = D;\n            // D = (Ann * sum + pD * balance.length) * D / ((Ann - 1) * D + (balance.length + 1) * pD)\n            D = Ann.mul(sum).add(pD.mul(_balances.length)).mul(D).div(Ann.sub(1).mul(D).add(_balances.length.add(1).mul(pD)));\n            if (D > prevD) {\n                if (D - prevD <= 1) break;\n            } else {\n                if (prevD - D <= 1) break;\n            }\n        }\n\n        return D;\n    }\n\n    /**\n     * @dev Computes token balance given D.\n     * @param _balances Converted balance of each token except token with index _j.\n     * @param _j Index of the token to calculate balance.\n     * @param _D The target D value.\n     * @param _A Amplification coeffient.\n     * @return Converted balance of the token with index _j.\n     */\n    function _getY(uint256[] memory _balances, uint256 _j, uint256 _D, uint256 _A) internal pure returns (uint256) {\n        uint256 c = _D;\n        uint256 S_ = 0;\n        uint256 Ann = _A;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            Ann = Ann.mul(_balances.length);\n            if (i == _j) continue;\n            S_ = S_.add(_balances[i]);\n            // c = c * D / (_x * N)\n            c = c.mul(_D).div(_balances[i].mul(_balances.length));\n        }\n        // c = c * D / (Ann * N)\n        c = c.mul(_D).div(Ann.mul(_balances.length));\n        // b = S_ + D / Ann\n        uint256 b = S_.add(_D.div(Ann));\n        uint256 prevY = 0;\n        uint256 y = _D;\n\n        // 255 since the result is 256 digits\n        for (i = 0; i < 255; i++) {\n            prevY = y;\n            // y = (y * y + c) / (2 * y + b - D)\n            y = y.mul(y).add(c).div(y.mul(2).add(b).sub(_D));\n            if (y > prevY) {\n                if (y - prevY <= 1) break;\n            } else {\n                if (prevY - y <= 1) break;\n            }\n        }\n\n        return y;\n    }\n\n    /**\n     * @dev Compute the amount of pool token that can be minted.\n     * @param _amounts Unconverted token balances.\n     * @return The amount of pool token minted.\n     */\n    function getMintAmount(uint256[] calldata _amounts) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == _balances.length, \"invalid amount\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].add(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n        // newD should be bigger than or equal to oldD\n        uint256 mintAmount = newD.sub(oldD);\n        uint256 feeAmount = 0;\n\n        if (mintFee > 0) {\n            feeAmount = mintAmount.mul(mintFee).div(feeDenominator);\n            mintAmount = mintAmount.sub(feeAmount);\n        }\n\n        return (mintAmount, feeAmount);\n    }\n\n    /**\n     * @dev Mints new pool token.\n     * @param _amounts Unconverted token balances used to mint pool token.\n     * @param _minMintAmount Minimum amount of pool token to mint.\n     */\n    function mint(uint256[] calldata _amounts, uint256 _minMintAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can mint.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_balances.length == _amounts.length, \"invalid amounts\");\n\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0) {\n                // Initial deposit requires all tokens provided!\n                require(oldD > 0, \"zero amount\");\n                continue;\n            }\n            _balances[i] = _balances[i].add(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n        // newD should be bigger than or equal to oldD\n        uint256 mintAmount = newD.sub(oldD);\n\n        uint256 fee = mintFee;\n        uint256 feeAmount;\n        if (fee > 0) {\n            feeAmount = mintAmount.mul(fee).div(feeDenominator);\n            mintAmount = mintAmount.sub(feeAmount);\n        }\n        require(mintAmount >= _minMintAmount, \"fewer than expected\");\n\n        // Transfer tokens into the swap\n        for (i = 0; i < _amounts.length; i++) {\n            if (_amounts[i] == 0)    continue;\n            // Update the balance in storage\n            balances[i] = _balances[i];\n            IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\n        }\n        totalSupply = newD;\n        IERC20MintableBurnable(poolToken).mint(feeRecipient, feeAmount);\n        IERC20MintableBurnable(poolToken).mint(msg.sender, mintAmount);\n\n        emit Minted(msg.sender, mintAmount, _amounts, feeAmount);\n    }\n\n    /**\n     * @dev Computes the output amount after the swap.\n     * @param _i Token index to swap in.\n     * @param _j Token index to swap out.\n     * @param _dx Unconverted amount of token _i to swap in.\n     * @return Unconverted amount of token _j to swap out.\n     */\n    function getSwapAmount(uint256 _i, uint256 _j, uint256 _dx) external view returns (uint256) {\n        uint256[] memory _balances = balances;\n        require(_i != _j, \"same token\");\n        require(_i < _balances.length, \"invalid in\");\n        require(_j < _balances.length, \"invalid out\");\n        require(_dx > 0, \"invalid amount\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        // balance[i] = balance[i] + dx * precisions[i]\n        _balances[_i] = _balances[_i].add(_dx.mul(precisions[_i]));\n        uint256 y = _getY(_balances, _j, D, A);\n        // dy = (balance[j] - y - 1) / precisions[j] in case there was rounding errors\n        uint256 dy = _balances[_j].sub(y).sub(1).div(precisions[_j]);\n\n        if (swapFee > 0) {\n            dy = dy.sub(dy.mul(swapFee).div(feeDenominator));\n        }\n\n        return dy;\n    }\n\n    /**\n     * @dev Exchange between two underlying tokens.\n     * @param _i Token index to swap in.\n     * @param _j Token index to swap out.\n     * @param _dx Unconverted amount of token _i to swap in.\n     * @param _minDy Minimum token _j to swap out in converted balance.\n     */\n    function swap(uint256 _i, uint256 _j, uint256 _dx, uint256 _minDy) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can swap.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_i != _j, \"same token\");\n        require(_i < _balances.length, \"invalid in\");\n        require(_j < _balances.length, \"invalid out\");\n        require(_dx > 0, \"invalid amount\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        // balance[i] = balance[i] + dx * precisions[i]\n        _balances[_i] = _balances[_i].add(_dx.mul(precisions[_i]));\n        uint256 y = _getY(_balances, _j, D, A);\n        // dy = (balance[j] - y - 1) / precisions[j] in case there was rounding errors\n        uint256 dy = _balances[_j].sub(y).sub(1).div(precisions[_j]);\n        // Update token balance in storage\n        balances[_j] = y;\n        balances[_i] = _balances[_i];\n\n        uint256 fee = swapFee;\n        if (fee > 0) {\n            dy = dy.sub(dy.mul(fee).div(feeDenominator));\n        }\n        require(dy >= _minDy, \"fewer than expected\");\n\n        IERC20(tokens[_i]).safeTransferFrom(msg.sender, address(this), _dx);\n        // Important: When swap fee > 0, the swap fee is charged on the output token.\n        // Therefore, balances[j] < tokens[j].balanceOf(this)\n        // Since balances[j] is used to compute D, D is unchanged.\n        // collectFees() is used to convert the difference between balances[j] and tokens[j].balanceOf(this)\n        // into pool token as fees!\n        IERC20(tokens[_j]).safeTransfer(msg.sender, dy);\n\n        emit TokenSwapped(msg.sender, tokens[_i], tokens[_j], _dx, dy);\n    }\n\n    /**\n     * @dev Computes the amounts of underlying tokens when redeeming pool token.\n     * @param _amount Amount of pool tokens to redeem.\n     * @return Amounts of underlying tokens redeemed.\n     */\n    function getRedeemProportionAmount(uint256 _amount) external view returns (uint256[] memory, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amount > 0, \"zero amount\");\n\n        uint256 D = totalSupply;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            feeAmount = _amount.mul(redeemFee).div(feeDenominator);\n            // Redemption fee is charged with pool token before redemption.\n            _amount = _amount.sub(feeAmount);\n        }\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            // We might choose to use poolToken.totalSupply to compute the amount, but decide to use\n            // D in case we have multiple minters on the pool token.\n            amounts[i] = _balances[i].mul(_amount).div(D).div(precisions[i]);\n        }\n\n        return (amounts, feeAmount);\n    }\n\n    /**\n     * @dev Redeems pool token to underlying tokens proportionally.\n     * @param _amount Amount of pool token to redeem.\n     * @param _minRedeemAmounts Minimum amount of underlying tokens to get.\n     */\n    function redeemProportion(uint256 _amount, uint256[] calldata _minRedeemAmounts) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_amount > 0, \"zero amount\");\n        require(_balances.length == _minRedeemAmounts.length, \"invalid mins\");\n\n        uint256 D = totalSupply;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        uint256 fee = redeemFee;\n        uint256 feeAmount;\n        if (fee > 0) {\n            feeAmount = _amount.mul(fee).div(feeDenominator);\n            // Redemption fee is paid with pool token\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n            _amount = _amount.sub(feeAmount);\n        }\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            // We might choose to use poolToken.totalSupply to compute the amount, but decide to use\n            // D in case we have multiple minters on the pool token.\n            uint256 tokenAmount = _balances[i].mul(_amount).div(D);\n            // Important: Underlying tokens must convert back to original decimals!\n            amounts[i] = tokenAmount.div(precisions[i]);\n            require(amounts[i] >= _minRedeemAmounts[i], \"fewer than expected\");\n            // Updates the balance in storage\n            balances[i] = _balances[i].sub(tokenAmount);\n            IERC20(tokens[i]).safeTransfer(msg.sender, amounts[i]);\n        }\n\n        totalSupply = D.sub(_amount);\n        // After reducing the redeem fee, the remaining pool tokens are burned!\n        IERC20MintableBurnable(poolToken).burnFrom(msg.sender, _amount);\n\n        emit Redeemed(msg.sender, _amount.add(feeAmount), amounts, feeAmount);\n    }\n\n    /**\n     * @dev Computes the amount when redeeming pool token to one specific underlying token.\n     * @param _amount Amount of pool token to redeem.\n     * @param _i Index of the underlying token to redeem to.\n     * @return Amount of underlying token that can be redeem to.\n     */\n    function getRedeemSingleAmount(uint256 _amount, uint256 _i) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amount > 0, \"zero amount\");\n        require(_i < _balances.length, \"invalid token\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            feeAmount = _amount.mul(redeemFee).div(feeDenominator);\n            // Redemption fee is charged with pool token before redemption.\n            _amount = _amount.sub(feeAmount);\n        }\n        // The pool token amount becomes D - _amount\n        uint256 y = _getY(_balances, _i, D.sub(_amount), A);\n        // dy = (balance[i] - y - 1) / precisions[i] in case there was rounding errors\n        uint256 dy = _balances[_i].sub(y).sub(1).div(precisions[_i]);\n\n        return (dy, feeAmount);\n    }\n\n    /**\n     * @dev Redeem pool token to one specific underlying token.\n     * @param _amount Amount of pool token to redeem.\n     * @param _i Index of the token to redeem to.\n     * @param _minRedeemAmount Minimum amount of the underlying token to redeem to.\n     */\n    function redeemSingle(uint256 _amount, uint256 _i, uint256 _minRedeemAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        require(_amount > 0, \"zero amount\");\n        require(_i < _balances.length, \"invalid token\");\n\n        uint256 A = getA();\n        uint256 D = totalSupply;\n        uint256 fee = redeemFee;\n        uint256 feeAmount = 0;\n        if (fee > 0) {\n            // Redemption fee is charged with pool token before redemption.\n            feeAmount = _amount.mul(fee).div(feeDenominator);\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n            _amount = _amount.sub(feeAmount);\n        }\n\n        // y is converted(18 decimals)\n        uint256 y = _getY(_balances, _i, D.sub(_amount), A);\n        // dy is not converted\n        // dy = (balance[i] - y - 1) / precisions[i] in case there was rounding errors\n        uint256 dy = _balances[_i].sub(y).sub(1).div(precisions[_i]);\n        require(dy >= _minRedeemAmount, \"fewer than expected\");\n        // Updates token balance in storage\n        balances[_i] = y;\n        uint256[] memory amounts = new uint256[](_balances.length);\n        amounts[_i] = dy;\n        IERC20(tokens[_i]).safeTransfer(msg.sender, dy);\n\n        totalSupply = D.sub(_amount);\n        IERC20MintableBurnable(poolToken).burnFrom(msg.sender, _amount);\n\n        emit Redeemed(msg.sender, _amount.add(feeAmount), amounts, feeAmount);\n    }\n\n    /**\n     * @dev Compute the amount of pool token that needs to be redeemed.\n     * @param _amounts Unconverted token balances.\n     * @return The amount of pool token that needs to be redeemed.\n     */\n    function getRedeemMultiAmount(uint256[] calldata _amounts) external view returns (uint256, uint256) {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == balances.length, \"length not match\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        for (uint256 i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n\n        // newD should be smaller than or equal to oldD\n        uint256 redeemAmount = oldD.sub(newD);\n        uint256 feeAmount = 0;\n        if (redeemFee > 0) {\n            redeemAmount = redeemAmount.mul(feeDenominator).div(feeDenominator.sub(redeemFee));\n            feeAmount = redeemAmount.sub(oldD.sub(newD));\n        }\n\n        return (redeemAmount, feeAmount);\n    }\n\n    /**\n     * @dev Redeems underlying tokens.\n     * @param _amounts Amounts of underlying tokens to redeem to.\n     * @param _maxRedeemAmount Maximum of pool token to redeem.\n     */\n    function redeemMulti(uint256[] calldata _amounts, uint256 _maxRedeemAmount) external nonReentrant {\n        uint256[] memory _balances = balances;\n        require(_amounts.length == balances.length, \"length not match\");\n        // If swap is paused, only admins can redeem.\n        require(!paused || admins[msg.sender], \"paused\");\n        \n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n        uint256 i = 0;\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            // balance = balance + amount * precision\n            _balances[i] = _balances[i].sub(_amounts[i].mul(precisions[i]));\n        }\n        uint256 newD = _getD(_balances, A);\n\n        // newD should be smaller than or equal to oldD\n        uint256 redeemAmount = oldD.sub(newD);\n        uint256 fee = redeemFee;\n        uint256 feeAmount = 0;\n        if (fee > 0) {\n            redeemAmount = redeemAmount.mul(feeDenominator).div(feeDenominator.sub(fee));\n            feeAmount = redeemAmount.sub(oldD.sub(newD));\n            // No conversion is needed as the pool token has 18 decimals\n            IERC20(poolToken).safeTransferFrom(msg.sender, feeRecipient, feeAmount);\n        }\n        require(redeemAmount <= _maxRedeemAmount, \"more than expected\");\n\n        // Updates token balances in storage.\n        balances = _balances;\n        uint256 burnAmount = redeemAmount.sub(feeAmount);\n        totalSupply = oldD.sub(burnAmount);\n        IERC20MintableBurnable(poolToken).burnFrom(msg.sender, burnAmount);\n        for (i = 0; i < _balances.length; i++) {\n            if (_amounts[i] == 0)   continue;\n            IERC20(tokens[i]).safeTransfer(msg.sender, _amounts[i]);\n        }\n\n        emit Redeemed(msg.sender, redeemAmount, _amounts, feeAmount);\n    }\n\n    /**\n     * @dev Return the amount of fee that's not collected.\n     */\n    function getPendingFeeAmount() external view returns (uint256) {\n        uint256[] memory _balances = balances;\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            _balances[i] = IERC20(tokens[i]).balanceOf(address(this)).mul(precisions[i]);\n        }\n        uint256 newD = _getD(_balances, A);\n\n        return newD.sub(oldD);\n    }\n\n    /**\n     * @dev Collect fee based on the token balance difference.\n     */\n    function collectFee() external returns (uint256) {\n        require(admins[msg.sender], \"not admin\");\n        uint256[] memory _balances = balances;\n        uint256 A = getA();\n        uint256 oldD = totalSupply;\n\n        for (uint256 i = 0; i < _balances.length; i++) {\n            _balances[i] = IERC20(tokens[i]).balanceOf(address(this)).mul(precisions[i]);\n        }\n        uint256 newD = _getD(_balances, A);\n        uint256 feeAmount = newD.sub(oldD);\n        if (feeAmount == 0) return 0;\n\n        balances = _balances;\n        totalSupply = newD;\n        address _feeRecipient = feeRecipient;\n        IERC20MintableBurnable(poolToken).mint(_feeRecipient, feeAmount);\n\n        emit FeeCollected(_feeRecipient, feeAmount);\n\n        return feeAmount;\n    }\n\n    /**\n     * @dev Updates the govenance address.\n     */\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"not governance\");\n        governance = _governance;\n    }\n\n    /**\n     * @dev Updates the mint fee.\n     */\n    function setMintFee(uint256 _mintFee) external {\n        require(msg.sender == governance, \"not governance\");\n        mintFee = _mintFee;\n    }\n\n    /**\n     * @dev Updates the swap fee.\n     */\n    function setSwapFee(uint256 _swapFee) external {\n        require(msg.sender == governance, \"not governance\");\n        swapFee = _swapFee;\n    }\n\n    /**\n     * @dev Updates the redeem fee.\n     */\n    function setRedeemFee(uint256 _redeemFee) external {\n        require(msg.sender == governance, \"not governance\");\n        redeemFee = _redeemFee;\n    }\n\n    /**\n     * @dev Updates the recipient of mint/swap/redeem fees.\n     */\n    function setFeeRecipient(address _feeRecipient) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_feeRecipient != address(0x0), \"fee recipient not set\");\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Updates the pool token.\n     */\n    function setPoolToken(address _poolToken) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_poolToken != address(0x0), \"pool token not set\");\n        poolToken = _poolToken;\n    }\n\n    /**\n     * @dev Pause mint/swap/redeem actions. Can unpause later.\n     */\n    function pause() external {\n        require(msg.sender == governance, \"not governance\");\n        require(!paused, \"paused\");\n\n        paused = true;\n    }\n\n    /**\n     * @dev Unpause mint/swap/redeem actions.\n     */\n    function unpause() external {\n        require(msg.sender == governance, \"not governance\");\n        require(paused, \"not paused\");\n\n        paused = false;\n    }\n\n    /**\n     * @dev Updates the admin role for the address.\n     * @param _account Address to update admin role.\n     * @param _allowed Whether the address is granted the admin role.\n     */\n    function setAdmin(address _account, bool _allowed) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_account != address(0x0), \"account not set\");\n\n        admins[_account] = _allowed;\n    }\n}\n\n// \n/**\n * @notice Contract that collects transaction fees from ACoconutSwap.\n */\ncontract ACoconutMaker {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    event FeeCollected(address indexed token, uint256 feeAmount, uint256 feeRewarded, uint256 feeReserved);\n\n    address public constant acBtc = address(0xeF6e45af9a422c5469928F927ca04ed332322e2e);\n    address public constant acBtcVault = address(0x1eB47C01cfAb26D2346B449975b7BF20a34e0d45);\n    address public constant acSwap = address(0x73FddFb941c11d16C827169Bb94aCC227841C396);   // ACoconut Swap (proxy)\n\n    address public governance;\n    address public strategist;\n\n    address public reserve;\n    uint256 public reserveRate = 0;\n    uint256 public constant reserveRateMax = 10000;\n\n    constructor() public {\n        governance = msg.sender;\n        strategist = msg.sender;\n        reserve = msg.sender;\n    }\n\n    /**\n     * @dev Updates the govenance address.\n     */\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"not governance\");\n        governance = _governance;\n    }\n\n    /**\n     * @dev Updates the strategist address.\n     */\n    function setStrategist(address _strategist) public {\n        require(msg.sender == governance, \"not governance\");\n        strategist = _strategist;\n    }\n\n    /**\n     * @dev Updates the reserve rate.\n     */\n    function setReserveRate(uint256 _reserveRate) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_reserveRate <= reserveRateMax, \"invalid rate\");\n\n        reserveRate = _reserveRate;\n    } \n\n    /**\n     * @dev Updates the reserve address.\n     */\n    function setReserve(address _reserve) external {\n        require(msg.sender == governance, \"not governance\");\n        require(_reserve != address(0x0), \"reserve not set\");\n\n        reserve = _reserve;\n    }\n\n    /**\n     * @dev Allocates swap fees accured in the contract.\n     */\n    function allocateFees() public {\n        require(msg.sender == strategist || msg.sender == governance, \"not authorized\");\n        uint256 balance = IERC20(acBtc).balanceOf(address(this));\n        uint256 reserveAmount = 0;\n\n        if (balance > 0 && reserveRate > 0 && reserve != address(0x0)) {\n            reserveAmount = balance.mul(reserveRate).div(reserveRateMax);\n            IERC20(acBtc).safeTransfer(reserve, reserveAmount);\n            balance = balance.sub(reserveAmount);\n        }\n\n        IERC20(acBtc).safeTransfer(acBtcVault, balance);\n        emit FeeCollected(acBtc, balance.add(reserveAmount), balance, reserveAmount);\n    }\n    \n    /**\n     * @dev Collect fees from the ACoconut Swap.\n     * This contract must be an admin of ACoconut Swap in order to proceed.\n     */\n    function collectFees() public {\n        require(msg.sender == strategist || msg.sender == governance, \"not authorized\");\n        ACoconutSwap(acSwap).collectFee();\n        allocateFees();\n    }\n\n    /**\n     * @dev Used to salvage any token deposited into the contract by mistake.\n     * @param _tokenAddress Token address to salvage.\n     * @param _amount Amount of token to salvage.\n     */\n    function salvage(address _tokenAddress, uint256 _amount) public {\n        require(msg.sender == strategist || msg.sender == governance, \"not authorized\");\n        require(_tokenAddress != acBtc, \"cannot salvage\");\n        require(_amount > 0, \"zero amount\");\n        IERC20(_tokenAddress).safeTransfer(governance, _amount);\n    }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRewarded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeReserved\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acBtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acBtcVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"setReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveRate\",\"type\":\"uint256\"}],\"name\":\"setReserveRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ACoconutMaker","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}