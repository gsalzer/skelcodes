{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MPH88-Incentivizer/DaiLpPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n██████╗ ███████╗██████╗  █████╗ ███████╗███████╗\\n██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝██╔════╝\\n██║  ██║█████╗  ██████╔╝███████║███████╗█████╗  \\n██║  ██║██╔══╝  ██╔══██╗██╔══██║╚════██║██╔══╝  \\n██████╔╝███████╗██████╔╝██║  ██║███████║███████╗\\n╚═════╝ ╚══════╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝\\n                                               \\n\\n* Debase: DaiLpPool.sol\\n* Description:\\n* Farm DEBASE-DAI Uni V2 LP token to get DEBASE, DAI, MPH rewards.\\n* Coded by: Ryuhei Matsuda\\n*/\\n\\npragma solidity >=0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IDInterest.sol\\\";\\nimport \\\"./interfaces/IReward.sol\\\";\\n\\nstruct Vest {\\n    uint256 amount;\\n    uint256 vestPeriodInSeconds;\\n    uint256 creationTimestamp;\\n    uint256 withdrawnAmount;\\n}\\n\\ninterface IVesting {\\n    function withdrawVested(address account, uint256 vestIdx)\\n        external\\n        returns (uint256);\\n\\n    function getVestWithdrawableAmount(address account, uint256 vestIdx)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function accountVestList(address account, uint256 vestIdx)\\n        external\\n        view\\n        returns (Vest memory);\\n}\\n\\ncontract DaiLpPool is Ownable, IERC721Receiver, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event onDeposit(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 maturationTimestamp,\\n        uint256 depositId\\n    );\\n    event onWithdraw(address indexed user, uint256 amount, uint256 depositId);\\n    event onEmergencyWithdraw(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 depositId\\n    );\\n\\n    event LogSetDebaseRewardPercentage(uint256 debaseRewardPercentage_);\\n    event LogDebaseRewardIssued(uint256 rewardIssued, uint256 rewardsFinishBy);\\n    event LogSetBlockDuration(uint256 duration_);\\n    event LogSetPoolEnabled(bool poolEnabled_);\\n    event LogStartNewDistribtionCycle(\\n        uint256 poolShareAdded_,\\n        uint256 amount_,\\n        uint256 rewardRate_,\\n        uint256 periodFinish_\\n    );\\n\\n    struct DepositInfo {\\n        address owner;\\n        uint256 amount;\\n        uint256 daiAmount;\\n        uint256 debaseGonAmount;\\n        uint256 debaseReward;\\n        uint256 debaseRewardPerTokenPaid;\\n        uint256 daiDepositId;\\n        uint256 mphReward;\\n        uint256 mphVestingIdx;\\n        uint256 maturationTimestamp;\\n        bool withdrawed;\\n    }\\n\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1000000 * 10**18;\\n    uint256 private constant TOTAL_GONS =\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    IUniswapV2Pair public debaseDaiPair;\\n    IDInterest public daiFixedPool;\\n    IReward public mphStakePool;\\n    IVesting public mphVesting;\\n    IERC20 public dai;\\n    IERC20 public debase;\\n    IERC20 public mph;\\n    address public policy;\\n\\n    uint256 public maxDepositLimit;\\n    uint256 public totalLpLimit;\\n    uint256 public lockPeriod;\\n    bool public totalLpLimitEnabled;\\n    bool public maxDepositLimitEnabled;\\n\\n    uint256 public totalLpLocked;\\n\\n    mapping(uint256 => DepositInfo) public deposits;\\n    mapping(address => uint256[]) public depositIds;\\n\\n    mapping(address => uint256) public lpDeposits;\\n    mapping(uint256 => uint256) daiOffsetForMphStaking; // DAI reward offset, times 1e12.\\n    uint256 public depositLength;\\n    uint256 public daiFee = 300;\\n    uint256 public mphFee = 300;\\n    uint256 public totalMphStaked;\\n    address public treasury;\\n\\n    uint256 public periodFinish;\\n    uint256 public debaseRewardRate;\\n    uint256 public lastUpdateBlock;\\n    uint256 public debaseRewardPerTokenStored;\\n    uint256 public debaseRewardPercentage;\\n    uint256 public debaseRewardDistributed;\\n    uint256 accDaiPerMph; // Accumulated DAI reward per staked mph, times 1e12.\\n    uint256 lastVestingIdx;\\n    uint256 firstDepositForVesting;\\n\\n    // params for debase reward\\n    uint256 public blockDuration;\\n    bool public poolEnabled;\\n    bool public allowEmergencyWithdraw;\\n\\n    modifier enabled() {\\n        require(poolEnabled, \\\"Pool isn't enabled\\\");\\n        _;\\n    }\\n\\n    function _updateDebaseReward(uint256 depositId) internal {\\n        debaseRewardPerTokenStored = debaseRewardPerToken();\\n        lastUpdateBlock = _lastBlockRewardApplicable();\\n        if (depositId < depositLength) {\\n            deposits[depositId].debaseReward = earned(depositId);\\n            deposits[depositId]\\n                .debaseRewardPerTokenPaid = debaseRewardPerTokenStored;\\n        }\\n    }\\n\\n    constructor(\\n        IUniswapV2Pair _debaseDaiPair,\\n        IERC20 _dai,\\n        IERC20 _debase,\\n        IERC20 _mph,\\n        address _policy,\\n        IDInterest _daiFixedPool,\\n        IReward _mphStakePool,\\n        IVesting _mphVesting,\\n        uint256 _lockPeriod,\\n        address _treasury,\\n        uint256 _debaseRewardPercentage,\\n        uint256 _blockDuration\\n    ) public Ownable() {\\n        require(_treasury != address(0), \\\"Invalid addr\\\");\\n        debaseDaiPair = _debaseDaiPair;\\n        dai = _dai;\\n        debase = _debase;\\n        mph = _mph;\\n        policy = _policy;\\n        daiFixedPool = _daiFixedPool;\\n        mphStakePool = _mphStakePool;\\n        mphVesting = _mphVesting;\\n        lockPeriod = _lockPeriod;\\n        treasury = _treasury;\\n        debaseRewardPercentage = _debaseRewardPercentage;\\n        blockDuration = _blockDuration;\\n    }\\n\\n    function _depositLpToken(uint256 amount)\\n        internal\\n        returns (uint256 daiAmount, uint256 debaseAmount)\\n    {\\n        uint256 daiOldBalance = dai.balanceOf(address(this));\\n        uint256 debaseOldBalance = debase.balanceOf(address(this));\\n        debaseDaiPair.transferFrom(msg.sender, address(debaseDaiPair), amount);\\n        debaseDaiPair.burn(address(this));\\n        uint256 daiBalance = dai.balanceOf(address(this));\\n        uint256 debaseBalance = debase.balanceOf(address(this));\\n\\n        daiAmount = daiBalance.sub(daiOldBalance);\\n        debaseAmount = debaseBalance.sub(debaseOldBalance);\\n    }\\n\\n    function _depositDai(uint256 daiAmount)\\n        internal\\n        returns (uint256 daiDepositId, uint256 maturationTimestamp)\\n    {\\n        maturationTimestamp = block.timestamp.add(lockPeriod);\\n        dai.approve(address(daiFixedPool), daiAmount);\\n        daiFixedPool.deposit(daiAmount, maturationTimestamp);\\n        daiDepositId = daiFixedPool.depositsLength();\\n    }\\n\\n    function _updateMphReward() internal {\\n        if (totalMphStaked == 0) {\\n            return;\\n        }\\n        uint256 daiOldBalance = dai.balanceOf(address(this));\\n        mphStakePool.getReward();\\n        uint256 daiBalance = dai.balanceOf(address(this));\\n        uint256 daiReward = daiBalance.sub(daiOldBalance);\\n        accDaiPerMph = accDaiPerMph.add(\\n            daiReward.mul(1e12).div(totalMphStaked)\\n        );\\n    }\\n\\n    function _stakeMph(uint256 mphReward) internal {\\n        _updateMphReward();\\n        mph.approve(address(mphStakePool), mphReward);\\n        mphStakePool.stake(mphReward);\\n        totalMphStaked = totalMphStaked.add(mphReward);\\n    }\\n\\n    function _unstakeMph(uint256 depositId)\\n        internal\\n        returns (uint256 daiReward)\\n    {\\n        _updateMphReward();\\n        daiReward = accDaiPerMph\\n            .mul(deposits[depositId].mphReward)\\n            .sub(daiOffsetForMphStaking[depositId])\\n            .div(1e12);\\n        mphStakePool.withdraw(deposits[depositId].mphReward);\\n        totalMphStaked = totalMphStaked.sub(deposits[depositId].mphReward);\\n    }\\n\\n    function _getCurrentVestingIdx() internal view returns (uint256) {\\n        uint256 vestIdx = lastVestingIdx;\\n        Vest memory vest = mphVesting.accountVestList(address(this), vestIdx);\\n        while (vest.creationTimestamp < block.timestamp) {\\n            vestIdx = vestIdx.add(1);\\n            vest = mphVesting.accountVestList(address(this), vestIdx);\\n        }\\n        return vestIdx;\\n    }\\n\\n    function _withdrawMphVested() internal {\\n        uint256 totalMphVested = 0;\\n        for (\\n            uint256 depositId = firstDepositForVesting;\\n            depositId < depositLength;\\n            depositId += 1\\n        ) {\\n            uint256 vested =\\n                mphVesting.withdrawVested(\\n                    address(this),\\n                    deposits[depositId].mphVestingIdx\\n                );\\n            if (vested > 0) {\\n                totalMphVested = totalMphVested.add(vested);\\n                deposits[depositId].mphReward = deposits[depositId]\\n                    .mphReward\\n                    .add(vested);\\n                daiOffsetForMphStaking[depositId] = daiOffsetForMphStaking[\\n                    depositId\\n                ]\\n                    .add(accDaiPerMph.mul(vested));\\n            }\\n            if (block.timestamp >= deposits[depositId].maturationTimestamp) {\\n                firstDepositForVesting = depositId.add(1);\\n            }\\n        }\\n        if (totalMphVested > 0) {\\n            _stakeMph(totalMphVested);\\n        }\\n    }\\n\\n    function deposit(uint256 amount)\\n        external\\n        enabled\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(\\n            totalLpLimitEnabled == false ||\\n                totalLpLocked.add(amount) <= totalLpLimit,\\n            \\\"To much lp locked\\\"\\n        );\\n        require(\\n            maxDepositLimitEnabled == false ||\\n                lpDeposits[msg.sender].add(amount) <= maxDepositLimit,\\n            \\\"to much deposit for this user\\\"\\n        );\\n\\n        (uint256 daiAmount, uint256 debaseAmount) = _depositLpToken(amount);\\n        (uint256 daiDepositId, uint256 maturationTimestamp) =\\n            _depositDai(daiAmount);\\n\\n        lpDeposits[msg.sender] = lpDeposits[msg.sender].add(amount);\\n        totalLpLocked = totalLpLocked.add(amount);\\n\\n        _withdrawMphVested();\\n\\n        uint256 vestingIdx = _getCurrentVestingIdx();\\n\\n        deposits[depositLength] = DepositInfo({\\n            owner: msg.sender,\\n            amount: amount,\\n            daiAmount: daiAmount,\\n            debaseGonAmount: debaseAmount.mul(_gonsPerFragment()),\\n            debaseReward: 0,\\n            debaseRewardPerTokenPaid: 0,\\n            daiDepositId: daiDepositId,\\n            maturationTimestamp: maturationTimestamp,\\n            mphReward: 0,\\n            mphVestingIdx: vestingIdx,\\n            withdrawed: false\\n        });\\n        depositIds[msg.sender].push(depositLength);\\n\\n        lastVestingIdx = vestingIdx.add(1);\\n        depositLength = depositLength.add(1);\\n\\n        _updateDebaseReward(daiDepositId);\\n        emit onDeposit(\\n            msg.sender,\\n            amount,\\n            maturationTimestamp,\\n            depositLength.sub(1)\\n        );\\n        return depositLength.sub(1);\\n    }\\n\\n    function userDepositLength(address user) external view returns (uint256) {\\n        return depositIds[user].length;\\n    }\\n\\n    function _gonsPerFragment() internal view returns (uint256) {\\n        return TOTAL_GONS.div(debase.totalSupply());\\n    }\\n\\n    function _withdrawDai(uint256 depositId, uint256 fundingId) internal {\\n        DepositInfo storage depositInfo = deposits[depositId];\\n\\n        uint256 mphStakingDaiReward = _unstakeMph(depositId);\\n\\n        uint256 mphOldBalance = mph.balanceOf(address(this));\\n        mph.approve(address(daiFixedPool.mphMinter()), mphOldBalance);\\n        uint256 daiOldBalance = dai.balanceOf(address(this));\\n        daiFixedPool.withdraw(depositInfo.daiDepositId, fundingId);\\n        mph.approve(address(daiFixedPool.mphMinter()), 0);\\n        uint256 mphBalance = mph.balanceOf(address(this));\\n\\n        uint256 daiBalance = dai.balanceOf(address(this));\\n        uint256 daiAmount = daiBalance.sub(daiOldBalance);\\n        uint256 totalDaiReward =\\n            daiAmount.add(mphStakingDaiReward).sub(depositInfo.daiAmount);\\n\\n        uint256 mphReward =\\n            depositInfo.mphReward.add(mphBalance).sub(mphOldBalance);\\n        uint256 daiFeeAmount = totalDaiReward.mul(daiFee).div(1000);\\n        uint256 mphFeeAmount = mphReward.mul(mphFee).div(1000);\\n\\n        dai.transfer(\\n            depositInfo.owner,\\n            depositInfo.daiAmount.add(totalDaiReward.sub(daiFeeAmount))\\n        );\\n        mph.transfer(depositInfo.owner, mphReward.sub(mphFeeAmount));\\n\\n        dai.transfer(treasury, daiFeeAmount);\\n        mph.transfer(treasury, mphFeeAmount);\\n    }\\n\\n    function _emergencyWithdrawDai(uint256 depositId, uint256 fundingId)\\n        internal\\n    {\\n        DepositInfo storage depositInfo = deposits[depositId];\\n\\n        uint256 mphStakingDaiReward = _unstakeMph(depositId);\\n        daiFixedPool.earlyWithdraw(depositInfo.daiDepositId, fundingId);\\n        dai.transfer(depositInfo.owner, depositInfo.daiAmount);\\n        dai.transfer(treasury, mphStakingDaiReward);\\n    }\\n\\n    function _withdraw(\\n        address user,\\n        uint256 depositId,\\n        uint256 fundingId\\n    ) internal {\\n        require(depositId < depositLength, \\\"no deposit\\\");\\n        DepositInfo storage depositInfo = deposits[depositId];\\n        require(depositInfo.owner == user, \\\"not owner\\\");\\n        require(depositInfo.withdrawed == false, \\\"withdrawed already\\\");\\n        require(\\n            depositInfo.maturationTimestamp <= block.timestamp,\\n            \\\"still locked\\\"\\n        );\\n\\n        _withdrawDai(depositId, fundingId);\\n        _withdrawDebase(depositId);\\n        depositInfo.withdrawed = true;\\n        lpDeposits[user] = lpDeposits[user].sub(depositInfo.amount);\\n        totalLpLocked = totalLpLocked.sub(depositInfo.amount);\\n\\n        emit onWithdraw(user, depositInfo.amount, depositId);\\n    }\\n\\n    function withdraw(uint256 depositId, uint256 fundingId)\\n        external\\n        nonReentrant\\n    {\\n        _withdrawMphVested();\\n        _withdraw(msg.sender, depositId, fundingId);\\n    }\\n\\n    function multiWithdraw(\\n        uint256[] calldata depositIds,\\n        uint256[] calldata fundingIds\\n    ) external nonReentrant {\\n        require(depositIds.length == fundingIds.length, \\\"incorrect length\\\");\\n        _withdrawMphVested();\\n        for (uint256 i = 0; i < depositIds.length; i += 1) {\\n            _withdraw(msg.sender, depositIds[i], fundingIds[i]);\\n        }\\n    }\\n\\n    function emergencyWithdraw(uint256 depositId, uint256 fundingId)\\n        external\\n        nonReentrant\\n    {\\n        require(allowEmergencyWithdraw, \\\"emergency withdraw disabled\\\");\\n        require(depositId < depositLength, \\\"no deposit\\\");\\n        _withdrawMphVested();\\n        DepositInfo storage depositInfo = deposits[depositId];\\n        require(depositInfo.owner == msg.sender, \\\"not owner\\\");\\n        require(depositInfo.withdrawed == false, \\\"withdrawed already\\\");\\n\\n        _emergencyWithdrawDai(depositId, fundingId);\\n        _emergencyWithdrawDebase(depositId);\\n        depositInfo.withdrawed = true;\\n        lpDeposits[msg.sender] = lpDeposits[msg.sender].sub(depositInfo.amount);\\n        totalLpLocked = totalLpLocked.sub(depositInfo.amount);\\n\\n        emit onEmergencyWithdraw(msg.sender, depositInfo.amount, depositId);\\n    }\\n\\n    /**\\n     * @notice Function to set how much reward the stabilizer will request\\n     */\\n    function setRewardPercentage(uint256 debaseRewardPercentage_)\\n        external\\n        onlyOwner\\n    {\\n        debaseRewardPercentage = debaseRewardPercentage_;\\n        emit LogSetDebaseRewardPercentage(debaseRewardPercentage);\\n    }\\n\\n    /**\\n     * @notice Function to set reward drop period\\n     */\\n    function setBlockDuration(uint256 blockDuration_) external onlyOwner {\\n        require(blockDuration_ >= 1, \\\"invalid duration\\\");\\n        blockDuration = blockDuration_;\\n        emit LogSetBlockDuration(blockDuration);\\n    }\\n\\n    /**\\n     * @notice Function enabled or disable pool staking,withdraw\\n     */\\n    function setPoolEnabled(bool poolEnabled_) external onlyOwner {\\n        poolEnabled = poolEnabled_;\\n        emit LogSetPoolEnabled(poolEnabled);\\n    }\\n\\n    function setDaiFee(uint256 _daiFee) external onlyOwner {\\n        daiFee = _daiFee;\\n    }\\n\\n    function setMphFee(uint256 _mphFee) external onlyOwner {\\n        mphFee = _mphFee;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Invalid addr\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function setPolicy(address _policy) external onlyOwner {\\n        require(_policy != address(0), \\\"Invalid addr\\\");\\n        policy = _policy;\\n    }\\n\\n    function setMaxDepositLimit(uint256 _maxDepositLimit) external onlyOwner {\\n        maxDepositLimit = _maxDepositLimit;\\n    }\\n\\n    function setMaxDepositLimitEnabled(bool _maxDepositLimitEnabled)\\n        external\\n        onlyOwner\\n    {\\n        maxDepositLimitEnabled = _maxDepositLimitEnabled;\\n    }\\n\\n    function setTotalLpLimit(uint256 _totalLpLimit) external onlyOwner {\\n        totalLpLimit = _totalLpLimit;\\n    }\\n\\n    function setTotalLpLimitEnabled(bool _totalLpLimitEnabled)\\n        external\\n        onlyOwner\\n    {\\n        totalLpLimitEnabled = _totalLpLimitEnabled;\\n    }\\n\\n    function setLockPeriod(uint256 _lockPeriod) external onlyOwner {\\n        require(_lockPeriod > 0, \\\"invalid lock period\\\");\\n        lockPeriod = _lockPeriod;\\n    }\\n\\n    function setAllowEmergencyWithdraw(bool _allowEmergencyWithdraw)\\n        external\\n        onlyOwner\\n    {\\n        allowEmergencyWithdraw = _allowEmergencyWithdraw;\\n    }\\n\\n    function _lastBlockRewardApplicable() internal view returns (uint256) {\\n        return Math.min(block.number, periodFinish);\\n    }\\n\\n    function debaseRewardPerToken() public view returns (uint256) {\\n        if (totalLpLocked == 0) {\\n            return debaseRewardPerTokenStored;\\n        }\\n        return\\n            debaseRewardPerTokenStored.add(\\n                _lastBlockRewardApplicable()\\n                    .sub(lastUpdateBlock)\\n                    .mul(debaseRewardRate)\\n                    .mul(10**18)\\n                    .div(totalLpLocked)\\n            );\\n    }\\n\\n    function earned(uint256 depositId) public view returns (uint256) {\\n        require(depositId < depositLength, \\\"no deposit\\\");\\n        return\\n            deposits[depositId]\\n                .amount\\n                .mul(\\n                debaseRewardPerToken().sub(\\n                    deposits[depositId].debaseRewardPerTokenPaid\\n                )\\n            )\\n                .div(10**18)\\n                .add(deposits[depositId].debaseReward);\\n    }\\n\\n    function _withdrawDebase(uint256 depositId) internal {\\n        _updateDebaseReward(depositId);\\n        uint256 reward = earned(depositId);\\n        deposits[depositId].debaseReward = 0;\\n\\n        uint256 rewardToClaim = debase.totalSupply().mul(reward).div(10**18);\\n\\n        debase.safeTransfer(\\n            deposits[depositId].owner,\\n            rewardToClaim.add(\\n                deposits[depositId].debaseGonAmount.div(_gonsPerFragment())\\n            )\\n        );\\n        debaseRewardDistributed = debaseRewardDistributed.add(reward);\\n    }\\n\\n    function _emergencyWithdrawDebase(uint256 depositId) internal {\\n        _updateDebaseReward(depositId);\\n        uint256 reward = earned(depositId);\\n        if (reward > 0) {\\n            deposits[depositId].debaseReward = 0;\\n\\n            uint256 rewardToClaim =\\n                debase.totalSupply().mul(reward).div(10**18);\\n\\n            debase.safeTransfer(\\n                deposits[depositId].owner,\\n                deposits[depositId].debaseGonAmount.div(_gonsPerFragment())\\n            );\\n            debase.safeTransfer(treasury, rewardToClaim);\\n            debaseRewardDistributed = debaseRewardDistributed.add(reward);\\n        }\\n    }\\n\\n    function checkStabilizerAndGetReward(\\n        int256 supplyDelta_,\\n        int256 rebaseLag_,\\n        uint256 exchangeRate_,\\n        uint256 debasePolicyBalance\\n    ) external returns (uint256 rewardAmount_) {\\n        require(\\n            msg.sender == policy,\\n            \\\"Only debase policy contract can call this\\\"\\n        );\\n\\n        if (block.number > periodFinish) {\\n            uint256 rewardToClaim =\\n                debasePolicyBalance.mul(debaseRewardPercentage).div(10**18);\\n\\n            if (debasePolicyBalance >= rewardToClaim) {\\n                startNewDistribtionCycle(rewardToClaim);\\n                return rewardToClaim;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function startNewDistribtionCycle(uint256 amount) internal {\\n        _updateDebaseReward(depositLength);\\n        uint256 poolTotalShare = amount.mul(10**18).div(debase.totalSupply());\\n\\n        if (block.number >= periodFinish) {\\n            debaseRewardRate = poolTotalShare.div(blockDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.number);\\n            uint256 leftover = remaining.mul(debaseRewardRate);\\n            debaseRewardRate = poolTotalShare.add(leftover).div(blockDuration);\\n        }\\n        lastUpdateBlock = block.number;\\n        periodFinish = block.number.add(blockDuration);\\n\\n        emit LogStartNewDistribtionCycle(\\n            poolTotalShare,\\n            amount,\\n            debaseRewardRate,\\n            periodFinish\\n        );\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MPH88-Incentivizer/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/MPH88-Incentivizer/interfaces/IDInterest.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\n\\ninterface IDInterest {\\n    function deposit(uint256 amount, uint256 maturationTimestamp) external;\\n    function depositsLength() external view returns (uint256);\\n    function withdraw(uint256 depositID, uint256 fundingID) external;\\n    function earlyWithdraw(uint256 depositID, uint256 fundingID) external;\\n    function mphMinter() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/MPH88-Incentivizer/interfaces/IReward.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.6;\\n\\ninterface IReward {\\n    function stake(uint256 amount) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n    function balanceOf(address user) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_debaseDaiPair\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_debase\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_mph\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"contract IDInterest\",\"name\":\"_daiFixedPool\",\"type\":\"address\"},{\"internalType\":\"contract IReward\",\"name\":\"_mphStakePool\",\"type\":\"address\"},{\"internalType\":\"contract IVesting\",\"name\":\"_mphVesting\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debaseRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsFinishBy\",\"type\":\"uint256\"}],\"name\":\"LogDebaseRewardIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"}],\"name\":\"LogSetBlockDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debaseRewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"LogSetDebaseRewardPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"poolEnabled_\",\"type\":\"bool\"}],\"name\":\"LogSetPoolEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolShareAdded_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodFinish_\",\"type\":\"uint256\"}],\"name\":\"LogStartNewDistribtionCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"onEmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowEmergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"supplyDelta_\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rebaseLag_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debasePolicyBalance\",\"type\":\"uint256\"}],\"name\":\"checkStabilizerAndGetReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiFixedPool\",\"outputs\":[{\"internalType\":\"contract IDInterest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debase\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseDaiPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseRewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseRewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debaseRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debaseGonAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debaseReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debaseRewardPerTokenPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDepositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mphReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mphVestingIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mph\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mphFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mphStakePool\",\"outputs\":[{\"internalType\":\"contract IReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mphVesting\",\"outputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fundingIds\",\"type\":\"uint256[]\"}],\"name\":\"multiWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowEmergencyWithdraw\",\"type\":\"bool\"}],\"name\":\"setAllowEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDuration_\",\"type\":\"uint256\"}],\"name\":\"setBlockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiFee\",\"type\":\"uint256\"}],\"name\":\"setDaiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_maxDepositLimitEnabled\",\"type\":\"bool\"}],\"name\":\"setMaxDepositLimitEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mphFee\",\"type\":\"uint256\"}],\"name\":\"setMphFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"}],\"name\":\"setPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"poolEnabled_\",\"type\":\"bool\"}],\"name\":\"setPoolEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debaseRewardPercentage_\",\"type\":\"uint256\"}],\"name\":\"setRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLpLimit\",\"type\":\"uint256\"}],\"name\":\"setTotalLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_totalLpLimitEnabled\",\"type\":\"bool\"}],\"name\":\"setTotalLpLimitEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMphStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDepositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaiLpPool","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e98f89a2b3aecdbe2118202826478eb02434459a0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009248c485b0b80f76da451f167a8db30f33c709070000000000000000000000008888801af4d980682e47f1a9036e589479e835c5000000000000000000000000989edd2e87b1706ab25b2e8d9d9480de3cc383ed000000000000000000000000dc86ac6140026267e0873b27c8629efe748e714600000000000000000000000098df8d9e56b51e4ea8aa9b57f8a5df7a044234e10000000000000000000000008943eb8f104bcf826910e7d2f4d59edfe018e0e70000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000f038c1cfadace2c0e5963ab5c0794b9575e1d2c20000000000000000000000000000000000000000000000000001c6bf526340000000000000000000000000000000000000000000000000000000000000001964","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}