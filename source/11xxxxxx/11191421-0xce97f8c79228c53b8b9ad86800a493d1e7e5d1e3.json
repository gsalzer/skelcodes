{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/spec_interfaces/IGuardiansRegistration.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Guardian registration contract interface\r\ninterface IGuardiansRegistration {\r\n\tevent GuardianRegistered(address indexed guardian);\r\n\tevent GuardianUnregistered(address indexed guardian);\r\n\tevent GuardianDataUpdated(address indexed guardian, bool isRegistered, bytes4 ip, address orbsAddr, string name, string website, uint256 registrationTime);\r\n\tevent GuardianMetadataChanged(address indexed guardian, string key, string newValue, string oldValue);\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// Registers a new guardian\r\n    /// @dev called using the guardian's address that holds the guardian self-stake and used for delegation\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external;\r\n\r\n    /// Updates a registered guardian data\r\n    /// @dev may be called only by a registered guardian\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external;\r\n\r\n    /// Updates a registered guardian ip address\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction updateGuardianIp(bytes4 ip) external /* onlyWhenActive */;\r\n\r\n    /// Updates a guardian's metadata property\r\n    /// @dev called using the guardian's address\r\n    /// @dev any key may be updated to be used by Orbs platform and tools\r\n    /// @param key is the name of the property to update\r\n    /// @param value is the value of the property to update in a string format\r\n    function setMetadata(string calldata key, string calldata value) external;\r\n\r\n    /// Returns a guardian's metadata property\r\n    /// @dev a property that wasn't set returns an empty string\r\n    /// @param guardian is the guardian to query\r\n    /// @param key is the name of the metadata property to query\r\n    /// @return value is the value of the queried property in a string format\r\n    function getMetadata(address guardian, string calldata key) external view returns (string memory);\r\n\r\n    /// Unregisters a guardian\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev unregistering does not clear the guardian's metadata properties\r\n\tfunction unregisterGuardian() external;\r\n\r\n    /// Returns a guardian's data\r\n    /// @param guardian is the guardian to query\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string\r\n    /// @param registrationTime is the timestamp of the guardian's registration\r\n    /// @param lastUpdateTime is the timestamp of the guardian's last update\r\n\tfunction getGuardianData(address guardian) external view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, uint registrationTime, uint lastUpdateTime);\r\n\r\n    /// Returns the Orbs addresses of a list of guardians\r\n    /// @dev an unregistered guardian returns address(0) Orbs address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @return orbsAddrs is a list of the guardians' Orbs addresses \r\n\tfunction getGuardiansOrbsAddress(address[] calldata guardianAddrs) external view returns (address[] memory orbsAddrs);\r\n\r\n    /// Returns a guardian's ip\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardian is the guardian to query\r\n    /// @return ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction getGuardianIp(address guardian) external view returns (bytes4 ip);\r\n\r\n    /// Returns the ip of a list of guardians\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @param ips is a list of the guardians' node ipv4 addresses as a 32b numbers\r\n\tfunction getGuardianIps(address[] calldata guardianAddrs) external view returns (bytes4[] memory ips);\r\n\r\n    /// Checks if a guardian is registered\r\n    /// @param guardian is the guardian to query\r\n    /// @return registered is a bool indicating a guardian address is registered\r\n\tfunction isRegistered(address guardian) external view returns (bool);\r\n\r\n    /// Translates a list guardians Orbs addresses to guardian addresses\r\n    /// @dev an Orbs address that does not correspond to any registered guardian returns address(0)\r\n    /// @param orbsAddrs is a list of the guardians' Orbs addresses to query\r\n    /// @return guardianAddrs is a list of guardians' addresses that matches the Orbs addresses\r\n\tfunction getGuardianAddresses(address[] calldata orbsAddrs) external view returns (address[] memory guardianAddrs);\r\n\r\n    /// Resolves the guardian address for a guardian, given a Guardian/Orbs address\r\n    /// @dev revert if the address does not correspond to a registered guardian address or Orbs address\r\n    /// @dev designed to be used for contracts calls, validating a registered guardian\r\n    /// @dev should be used with caution when called by tools as the call may revert\r\n    /// @dev in case of a conflict matching both guardian and Orbs address, the Guardian address takes precedence\r\n    /// @param guardianOrOrbsAddress is the address to query representing a guardian address or Orbs address\r\n    /// @return guardianAddress is the guardian address that matches the queried address\r\n\tfunction resolveGuardianAddress(address guardianOrOrbsAddress) external view returns (address guardianAddress);\r\n\r\n\t/*\r\n\t * Governance functions\r\n\t */\r\n\r\n    /// Migrates a list of guardians from a previous guardians registration contract\r\n    /// @dev governance function called only by the initialization admin\r\n    /// @dev reads the migrated guardians data by calling getGuardianData in the previous contract\r\n    /// @dev imports also the guardians' registration time and last update\r\n    /// @dev emits a GuardianDataUpdated for each guardian to allow tracking by tools\r\n    /// @param guardiansToMigrate is a list of guardians' addresses to migrate\r\n    /// @param previousContract is the previous registration contract address\r\n\tfunction migrateGuardians(address[] calldata guardiansToMigrate, IGuardiansRegistration previousContract) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IElections.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Elections contract interface\r\ninterface IElections {\r\n\t\r\n\t// Election state change events\r\n\tevent StakeChanged(address indexed addr, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 effectiveStake);\r\n\tevent GuardianStatusUpdated(address indexed guardian, bool readyToSync, bool readyForCommittee);\r\n\r\n\t// Vote out / Vote unready\r\n\tevent GuardianVotedUnready(address indexed guardian);\r\n\tevent VoteUnreadyCasted(address indexed voter, address indexed subject, uint256 expiration);\r\n\tevent GuardianVotedOut(address indexed guardian);\r\n\tevent VoteOutCasted(address indexed voter, address indexed subject);\r\n\r\n\t/*\r\n\t * External functions\r\n\t */\r\n\r\n    /// Notifies that the guardian is ready to sync with other nodes\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev ready to sync state is not managed in the contract that only emits an event\r\n    /// @dev readyToSync clears the readyForCommittee state\r\n\tfunction readyToSync() external;\r\n\r\n    /// Notifies that the guardian is ready to join the committee\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @dev a qualified guardian calling readyForCommittee is added to the committee\r\n\tfunction readyForCommittee() external;\r\n\r\n    /// Checks if a guardian is qualified to join the committee\r\n    /// @dev when true, calling readyForCommittee() will result in adding the guardian to the committee\r\n    /// @dev called periodically by guardians to check if they are qualified to join the committee\r\n    /// @param guardian is the guardian to check\r\n    /// @return canJoin indicating that the guardian can join the current committee\r\n\tfunction canJoinCommittee(address guardian) external view returns (bool);\r\n\r\n    /// Returns an address effective stake\r\n    /// The effective stake is derived from a guardian delegate stake and selfs stake  \r\n    /// @return effectiveStake is the guardian's effective stake\r\n\tfunction getEffectiveStake(address guardian) external view returns (uint effectiveStake);\r\n\r\n    /// Returns the current committee along with the guardians' Orbs address and IP\r\n    /// @return committee is a list of the committee members' guardian addresses\r\n    /// @return weights is a list of the committee members' weight (effective stake)\r\n    /// @return orbsAddrs is a list of the committee members' orbs address\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return ips is a list of the committee members' ip\r\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n\r\n\t// Vote-unready\r\n\r\n    /// Casts an unready vote on a subject guardian\r\n    /// @dev Called by a guardian as part of the automatic vote-unready flow\r\n    /// @dev The transaction may be sent from the guardian or orbs address.\r\n    /// @param subject is the subject guardian to vote out\r\n    /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.\r\n\tfunction voteUnready(address subject, uint voteExpiration) external;\r\n\r\n    /// Returns the current vote unready vote for a voter and a subject pair\r\n    /// @param voter is the voting guardian address\r\n    /// @param subject is the subject guardian address\r\n    /// @return valid indicates whether there is a valid vote\r\n    /// @return expiration returns the votes expiration time\r\n\tfunction getVoteUnreadyVote(address voter, address subject) external view returns (bool valid, uint256 expiration);\r\n\r\n    /// Returns the current vote-unready status of a subject guardian.\r\n    /// @dev the committee and certification data is used to check the certified and committee threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return committee is a list of the current committee members\r\n    /// @return weights is a list of the current committee members weight\r\n    /// @return certification is a list of bool indicating the committee members certification\r\n    /// @return votes is a list of bool indicating the members that votes the subject unready\r\n    /// @return subjectInCommittee indicates that the subject is in the committee\r\n    /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee\r\n\tfunction getVoteUnreadyStatus(address subject) external view returns (\r\n\t\taddress[] memory committee,\r\n\t\tuint256[] memory weights,\r\n\t\tbool[] memory certification,\r\n\t\tbool[] memory votes,\r\n\t\tbool subjectInCommittee,\r\n\t\tbool subjectInCertifiedCommittee\r\n\t);\r\n\r\n\t// Vote-out\r\n\r\n    /// Casts a voteOut vote by the sender to the given address\r\n    /// @dev the transaction is sent from the guardian address\r\n    /// @param subject is the subject guardian address\r\n\tfunction voteOut(address subject) external;\r\n\r\n    /// Returns the subject address the addr has voted-out against\r\n    /// @param voter is the voting guardian address\r\n    /// @return subject is the subject the voter has voted out\r\n\tfunction getVoteOutVote(address voter) external view returns (address);\r\n\r\n    /// Returns the governance voteOut status of a guardian.\r\n    /// @dev A guardian is voted out if votedStake / totalDelegatedStake (in percent mille) > threshold\r\n    /// @param subject is the subject guardian address\r\n    /// @return votedOut indicates whether the subject was voted out\r\n    /// @return votedStake is the total stake voting against the subject\r\n    /// @return totalDelegatedStake is the total delegated stake\r\n\tfunction getVoteOutStatus(address subject) external view returns (bool votedOut, uint votedStake, uint totalDelegatedStake);\r\n\r\n\t/*\r\n\t * Notification functions from other PoS contracts\r\n\t */\r\n\r\n    /// Notifies a delegated stake change event\r\n    /// @dev Called by: delegation contract\r\n    /// @param delegate is the delegate to update\r\n    /// @param selfDelegatedStake is the delegate self stake (0 if not self-delegating)\r\n    /// @param delegatedStake is the delegate delegated stake (0 if not self-delegating)\r\n    /// @param totalDelegatedStake is the total delegated stake\r\n\tfunction delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external /* onlyDelegationsContract onlyWhenActive */;\r\n\r\n    /// Notifies a new guardian was unregistered\r\n    /// @dev Called by: guardian registration contract\r\n    /// @dev when a guardian unregisters its status is updated to not ready to sync and is removed from the committee\r\n    /// @param guardian is the address of the guardian that unregistered\r\n\tfunction guardianUnregistered(address guardian) external /* onlyGuardiansRegistrationContract */;\r\n\r\n    /// Notifies on a guardian certification change\r\n    /// @dev Called by: guardian registration contract\r\n    /// @param guardian is the address of the guardian to update\r\n    /// @param isCertified indicates whether the guardian is certified\r\n\tfunction guardianCertificationChanged(address guardian, bool isCertified) external /* onlyCertificationContract */;\r\n\r\n\r\n\t/*\r\n     * Governance functions\r\n\t */\r\n\r\n\tevent VoteUnreadyTimeoutSecondsChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteOutPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent VoteUnreadyPercentMilleThresholdChanged(uint32 newValue, uint32 oldValue);\r\n\tevent MinSelfStakePercentMilleChanged(uint32 newValue, uint32 oldValue);\r\n\r\n    /// Sets the minimum self stake requirement for the effective stake\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param minSelfStakePercentMille is the minimum self stake in percent-mille (0-100,000) \r\n\tfunction setMinSelfStakePercentMille(uint32 minSelfStakePercentMille) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the minimum self-stake required for the effective stake\r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille \r\n\tfunction getMinSelfStakePercentMille() external view returns (uint32);\r\n\r\n    /// Sets the vote-out threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteOutPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteOutPercentMilleThreshold(uint32 voteOutPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-out threshold\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteOutPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Sets the vote-unready threshold\r\n    /// @dev governance function called only by the functional manager\r\n    /// @param voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille (0-100,000)\r\n\tfunction setVoteUnreadyPercentMilleThreshold(uint32 voteUnreadyPercentMilleThreshold) external /* onlyFunctionalManager */;\r\n\r\n    /// Returns the vote-unready threshold\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getVoteUnreadyPercentMilleThreshold() external view returns (uint32);\r\n\r\n    /// Returns the contract's settings \r\n    /// @return minSelfStakePercentMille is the minimum self stake in percent-mille\r\n    /// @return voteUnreadyPercentMilleThreshold is the minimum threshold in percent-mille\r\n    /// @return voteOutPercentMilleThreshold is the minimum threshold in percent-mille\r\n\tfunction getSettings() external view returns (\r\n\t\tuint32 minSelfStakePercentMille,\r\n\t\tuint32 voteUnreadyPercentMilleThreshold,\r\n\t\tuint32 voteOutPercentMilleThreshold\r\n\t);\r\n\r\n    /// Initializes the ready for committee notification for the committee guardians\r\n    /// @dev governance function called only by the initialization admin during migration \r\n    /// @dev identical behaviour as if each guardian sent readyForCommittee() \r\n    /// @param guardians a list of guardians addresses to update\r\n\tfunction initReadyForCommittee(address[] calldata guardians) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title managed contract interface, used by the contracts registry to notify the contract on updates\r\ninterface IManagedContract /* is ILockable, IContractRegistryAccessor, Initializable */ {\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() external;\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistry.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title Contract registry contract interface\r\n/// @dev The contract registry holds Orbs PoS contracts and managers lists\r\n/// @dev The contract registry updates the managed contracts on changes in the contract list\r\n/// @dev Governance functions restricted to managers access the registry to retrieve the manager address \r\n/// @dev The contract registry represents the source of truth for Orbs Ethereum contracts \r\n/// @dev By tracking the registry events or query before interaction, one can access the up to date contracts \r\ninterface IContractRegistry {\r\n\r\n\tevent ContractAddressUpdated(string contractName, address addr, bool managedContract);\r\n\tevent ManagerChanged(string role, address newManager);\r\n\tevent ContractRegistryUpdated(address newContractRegistry);\r\n\r\n\t/*\r\n\t* External functions\r\n\t*/\r\n\r\n    /// Updates the contracts address and emits a corresponding event\r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @param addr is the contract updated address\r\n    /// @param managedContract indicates whether the contract is managed by the registry and notified on changes\r\n\tfunction setContract(string calldata contractName, address addr, bool managedContract) external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Returns the current address of the given contracts\r\n    /// @param contractName is the contract name, used to identify it\r\n    /// @return addr is the contract updated address\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n\r\n    /// Returns the list of contract addresses managed by the registry\r\n    /// @dev Managed contracts are updated on changes in the registry contracts addresses \r\n    /// @return addrs is the list of managed contracts\r\n\tfunction getManagedContracts() external view returns (address[] memory);\r\n\r\n    /// Locks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n    /// @dev When set all onlyWhenActive functions will revert\r\n\tfunction lockContracts() external /* onlyAdminOrMigrationManager */;\r\n\r\n    /// Unlocks all the managed contracts \r\n    /// @dev governance function called only by the migrationManager or registryAdmin\r\n\tfunction unlockContracts() external /* onlyAdminOrMigrationManager */;\r\n\t\r\n    /// Updates a manager address and emits a corresponding event\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev the managers list is a flexible list of role to the manager's address\r\n    /// @param role is the managers' role name, for example \"functionalManager\"\r\n    /// @param manager is the manager updated address\r\n\tfunction setManager(string calldata role, address manager) external /* onlyAdmin */;\r\n\r\n    /// Returns the current address of the given manager\r\n    /// @param role is the manager name, used to identify it\r\n    /// @return addr is the manager updated address\r\n\tfunction getManager(string calldata role) external view returns (address);\r\n\r\n    /// Sets a new contract registry to migrate to\r\n    /// @dev governance function called only by the registryAdmin\r\n    /// @dev updates the registry address record in all the managed contracts\r\n    /// @dev by tracking the emitted ContractRegistryUpdated, tools can track the up to date contracts\r\n    /// @param newRegistry is the new registry contract \r\n\tfunction setNewContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the previous contract registry address \r\n    /// @dev used when the setting the contract as a new registry to assure a valid registry\r\n    /// @return previousContractRegistry is the previous contract registry\r\n\tfunction getPreviousContractRegistry() external view returns (address);\r\n}\r\n\r\n// File: contracts/spec_interfaces/IContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IContractRegistryAccessor {\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newRegistry) external /* onlyAdmin */;\r\n\r\n    /// Returns the contract registry address\r\n    /// @return contractRegistry is the contract registry address\r\n    function getContractRegistry() external view returns (IContractRegistry contractRegistry);\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external /* onlyInitializationAdmin */;\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableRegistryManagement.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableRegistryManagement is Context {\r\n    address private _registryAdmin;\r\n    address private _pendingRegistryAdmin;\r\n\r\n    event RegistryManagementTransferred(address indexed previousRegistryAdmin, address indexed newRegistryAdmin);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial registryRegistryAdmin.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _registryAdmin = msgSender;\r\n        emit RegistryManagementTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current registryAdmin.\r\n     */\r\n    function registryAdmin() public view returns (address) {\r\n        return _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the registryAdmin.\r\n     */\r\n    modifier onlyRegistryAdmin() {\r\n        require(isRegistryAdmin(), \"WithClaimableRegistryManagement: caller is not the registryAdmin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current registryAdmin.\r\n     */\r\n    function isRegistryAdmin() public view returns (bool) {\r\n        return _msgSender() == _registryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without registryAdmin. It will not be possible to call\r\n     * `onlyManager` functions anymore. Can only be called by the current registryAdmin.\r\n     *\r\n     * NOTE: Renouncing registryManagement will leave the contract without an registryAdmin,\r\n     * thereby removing any functionality that is only available to the registryAdmin.\r\n     */\r\n    function renounceRegistryManagement() public onlyRegistryAdmin {\r\n        emit RegistryManagementTransferred(_registryAdmin, address(0));\r\n        _registryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers registryManagement of the contract to a new account (`newManager`).\r\n     */\r\n    function _transferRegistryManagement(address newRegistryAdmin) internal {\r\n        require(newRegistryAdmin != address(0), \"RegistryAdmin: new registryAdmin is the zero address\");\r\n        emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);\r\n        _registryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingManager.\r\n     */\r\n    modifier onlyPendingRegistryAdmin() {\r\n        require(msg.sender == _pendingRegistryAdmin, \"Caller is not the pending registryAdmin\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current registryAdmin to set the pendingManager address.\r\n     * @param newRegistryAdmin The address to transfer registryManagement to.\r\n     */\r\n    function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {\r\n        _pendingRegistryAdmin = newRegistryAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the _pendingRegistryAdmin address to finalize the transfer.\r\n     */\r\n    function claimRegistryManagement() external onlyPendingRegistryAdmin {\r\n        _transferRegistryManagement(_pendingRegistryAdmin);\r\n        _pendingRegistryAdmin = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current pendingRegistryAdmin\r\n    */\r\n    function pendingRegistryAdmin() public view returns (address) {\r\n       return _pendingRegistryAdmin;  \r\n    }\r\n}\r\n\r\n// File: contracts/Initializable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Initializable {\r\n\r\n    address private _initializationAdmin;\r\n\r\n    event InitializationComplete();\r\n\r\n    /// Constructor\r\n    /// Sets the initializationAdmin to the contract deployer\r\n    /// The initialization admin may call any manager only function until initializationComplete\r\n    constructor() public{\r\n        _initializationAdmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyInitializationAdmin() {\r\n        require(msg.sender == initializationAdmin(), \"sender is not the initialization admin\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the initializationAdmin address\r\n    function initializationAdmin() public view returns (address) {\r\n        return _initializationAdmin;\r\n    }\r\n\r\n    /// Finalizes the initialization and revokes the initializationAdmin role \r\n    function initializationComplete() external onlyInitializationAdmin {\r\n        _initializationAdmin = address(0);\r\n        emit InitializationComplete();\r\n    }\r\n\r\n    /// Checks if the initialization was completed\r\n    function isInitializationComplete() public view returns (bool) {\r\n        return _initializationAdmin == address(0);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ContractRegistryAccessor.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract ContractRegistryAccessor is IContractRegistryAccessor, WithClaimableRegistryManagement, Initializable {\r\n\r\n    IContractRegistry private contractRegistry;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {\r\n        require(address(_contractRegistry) != address(0), \"_contractRegistry cannot be 0\");\r\n        setContractRegistry(_contractRegistry);\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(isAdmin(), \"sender is not an admin (registryManger or initializationAdmin)\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyMigrationManager {\r\n        require(isMigrationManager(), \"sender is not the migration manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier onlyFunctionalManager {\r\n        require(isFunctionalManager(), \"sender is not the functional manager\");\r\n\r\n        _;\r\n    }\r\n\r\n    /// Checks whether the caller is Admin: either the contract registry, the registry admin, or the initialization admin\r\n    function isAdmin() internal view returns (bool) {\r\n        return msg.sender == address(contractRegistry) || msg.sender == registryAdmin() || msg.sender == initializationAdmin();\r\n    }\r\n\r\n    /// Checks whether the caller is a specific manager role or and Admin\r\n    /// @dev queries the registry contract for the up to date manager assignment\r\n    function isManager(string memory role) internal view returns (bool) {\r\n        IContractRegistry _contractRegistry = contractRegistry;\r\n        return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;\r\n    }\r\n\r\n    /// Checks whether the caller is the migration manager\r\n    function isMigrationManager() internal view returns (bool) {\r\n        return isManager('migrationManager');\r\n    }\r\n\r\n    /// Checks whether the caller is the functional manager\r\n    function isFunctionalManager() internal view returns (bool) {\r\n        return isManager('functionalManager');\r\n    }\r\n\r\n    /* \r\n     * Contract getters, return the address of a contract by calling the contract registry \r\n     */ \r\n\r\n    function getProtocolContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"protocol\");\r\n    }\r\n\r\n    function getStakingRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewards\");\r\n    }\r\n\r\n    function getFeesAndBootstrapRewardsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"feesAndBootstrapRewards\");\r\n    }\r\n\r\n    function getCommitteeContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"committee\");\r\n    }\r\n\r\n    function getElectionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"elections\");\r\n    }\r\n\r\n    function getDelegationsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"delegations\");\r\n    }\r\n\r\n    function getGuardiansRegistrationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"guardiansRegistration\");\r\n    }\r\n\r\n    function getCertificationContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certification\");\r\n    }\r\n\r\n    function getStakingContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"staking\");\r\n    }\r\n\r\n    function getSubscriptionsContract() internal view returns (address) {\r\n        return contractRegistry.getContract(\"subscriptions\");\r\n    }\r\n\r\n    function getStakingRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingRewardsWallet\");\r\n    }\r\n\r\n    function getBootstrapRewardsWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"bootstrapRewardsWallet\");\r\n    }\r\n\r\n    function getGeneralFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"generalFeesWallet\");\r\n    }\r\n\r\n    function getCertifiedFeesWallet() internal view returns (address) {\r\n        return contractRegistry.getContract(\"certifiedFeesWallet\");\r\n    }\r\n\r\n    function getStakingContractHandler() internal view returns (address) {\r\n        return contractRegistry.getContract(\"stakingContractHandler\");\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ContractRegistryAddressUpdated(address addr);\r\n\r\n    /// Sets the contract registry address\r\n    /// @dev governance function called only by an admin\r\n    /// @param newContractRegistry is the new registry contract \r\n    function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {\r\n        require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), \"new contract registry must provide the previous contract registry\");\r\n        contractRegistry = newContractRegistry;\r\n        emit ContractRegistryAddressUpdated(address(newContractRegistry));\r\n    }\r\n\r\n    /// Returns the contract registry that the contract is set to use\r\n    /// @return contractRegistry is the registry contract address\r\n    function getContractRegistry() public override view returns (IContractRegistry) {\r\n        return contractRegistry;\r\n    }\r\n\r\n    function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {\r\n        _transferRegistryManagement(_registryAdmin);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/spec_interfaces/ILockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @title lockable contract interface, allows to lock a contract\r\ninterface ILockable {\r\n\r\n    event Locked();\r\n    event Unlocked();\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external /* onlyMigrationManager */;\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external /* onlyMigrationManager */;\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() view external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/Lockable.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title lockable contract\r\ncontract Lockable is ILockable, ContractRegistryAccessor {\r\n\r\n    bool public locked;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Locks the contract to external non-governance function calls\r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon locking all managed contracts\r\n    /// @dev getters and migration functions remain active also for locked contracts\r\n    /// @dev checked by the onlyWhenActive modifier\r\n    function lock() external override onlyMigrationManager {\r\n        locked = true;\r\n        emit Locked();\r\n    }\r\n\r\n    /// Unlocks the contract \r\n    /// @dev governance function called only by the migration manager or an admin\r\n    /// @dev typically called by the registry contract upon unlocking all managed contracts\r\n    function unlock() external override onlyMigrationManager {\r\n        locked = false;\r\n        emit Unlocked();\r\n    }\r\n\r\n    /// Returns the contract locking status\r\n    /// @return isLocked is a bool indicating the contract is locked \r\n    function isLocked() external override view returns (bool) {\r\n        return locked;\r\n    }\r\n\r\n    modifier onlyWhenActive() {\r\n        require(!locked, \"contract is locked for this operation\");\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/ManagedContract.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/// @title managed contract\r\ncontract ManagedContract is IManagedContract, Lockable {\r\n\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n    constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n    function refreshContracts() virtual override external {}\r\n\r\n}\r\n\r\n// File: contracts/GuardiansRegistration.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ncontract GuardiansRegistration is IGuardiansRegistration, ManagedContract {\r\n\r\n\tstruct Guardian {\r\n\t\taddress orbsAddr;\r\n\t\tbytes4 ip;\r\n\t\tuint32 registrationTime;\r\n\t\tuint32 lastUpdateTime;\r\n\t\tstring name;\r\n\t\tstring website;\r\n\t}\r\n\tmapping(address => Guardian) guardians;\r\n\tmapping(address => address) orbsAddressToGuardianAddress;\r\n\tmapping(bytes4 => address) public ipToGuardian;\r\n\tmapping(address => mapping(string => string)) guardianMetadata;\r\n\r\n    /// Constructor\r\n    /// @param _contractRegistry is the contract registry address\r\n    /// @param _registryAdmin is the registry admin address\r\n\tconstructor(IContractRegistry _contractRegistry, address _registryAdmin) ManagedContract(_contractRegistry, _registryAdmin) public {}\r\n\r\n\tmodifier onlyRegisteredGuardian {\r\n\t\trequire(isRegistered(msg.sender), \"Guardian is not registered\");\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t/*\r\n     * External methods\r\n     */\r\n\r\n    /// Registers a new guardian\r\n    /// @dev called using the guardian's address that holds the guardian self-stake and used for delegation\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external override onlyWhenActive {\r\n\t\trequire(!isRegistered(msg.sender), \"registerGuardian: Guardian is already registered\");\r\n\r\n\t\tguardians[msg.sender].registrationTime = uint32(block.timestamp);\r\n\t\temit GuardianRegistered(msg.sender);\r\n\r\n\t\t_updateGuardian(msg.sender, ip, orbsAddr, name, website);\r\n\t}\r\n\r\n    /// Updates a registered guardian data\r\n    /// @dev may be called only by a registered guardian\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external override onlyRegisteredGuardian onlyWhenActive {\r\n\t\t_updateGuardian(msg.sender, ip, orbsAddr, name, website);\r\n\t}\r\n\r\n    /// Updates a registered guardian ip address\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev may be called with either the guardian address or the guardian's orbs address\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction updateGuardianIp(bytes4 ip) external override onlyWhenActive {\r\n\t\taddress guardianAddr = resolveGuardianAddress(msg.sender);\r\n\t\tGuardian memory data = guardians[guardianAddr];\r\n\t\t_updateGuardian(guardianAddr, ip, data.orbsAddr, data.name, data.website);\r\n\t}\r\n\r\n    /// Updates a guardian's metadata property\r\n    /// @dev called using the guardian's address\r\n    /// @dev any key may be updated to be used by Orbs platform and tools\r\n    /// @param key is the name of the property to update\r\n    /// @param value is the value of the property to update in a string format\r\n\tfunction setMetadata(string calldata key, string calldata value) external override onlyRegisteredGuardian onlyWhenActive {\r\n\t\t_setMetadata(msg.sender, key, value);\r\n\t}\r\n\r\n    /// Returns a guardian's metadata property\r\n    /// @dev a property that wasn't set returns an empty string\r\n    /// @param guardian is the guardian to query\r\n    /// @param key is the name of the metadata property to query\r\n    /// @return value is the value of the queried property in a string format\r\n\tfunction getMetadata(address guardian, string calldata key) external override view returns (string memory) {\r\n\t\treturn guardianMetadata[guardian][key];\r\n\t}\r\n\r\n    /// Unregisters a guardian\r\n    /// @dev may be called only by a registered guardian\r\n    /// @dev unregistering does not clear the guardian's metadata properties\r\n\tfunction unregisterGuardian() external override onlyRegisteredGuardian onlyWhenActive {\r\n\t\tdelete orbsAddressToGuardianAddress[guardians[msg.sender].orbsAddr];\r\n\t\tdelete ipToGuardian[guardians[msg.sender].ip];\r\n\t\tGuardian memory guardian = guardians[msg.sender];\r\n\t\tdelete guardians[msg.sender];\r\n\r\n\t\telectionsContract.guardianUnregistered(msg.sender);\r\n\t\temit GuardianDataUpdated(msg.sender, false, guardian.ip, guardian.orbsAddr, guardian.name, guardian.website, guardian.registrationTime);\r\n\t\temit GuardianUnregistered(msg.sender);\r\n\t}\r\n\r\n    /// Returns a guardian's data\r\n    /// @param guardian is the guardian to query\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string\r\n    /// @param registrationTime is the timestamp of the guardian's registration\r\n    /// @param lastUpdateTime is the timestamp of the guardian's last update\r\n\tfunction getGuardianData(address guardian) external override view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, uint registrationTime, uint lastUpdateTime) {\r\n\t\tGuardian memory v = guardians[guardian];\r\n\t\treturn (v.ip, v.orbsAddr, v.name, v.website, v.registrationTime, v.lastUpdateTime);\r\n\t}\r\n\r\n    /// Returns the Orbs addresses of a list of guardians\r\n    /// @dev an unregistered guardian returns address(0) Orbs address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @return orbsAddrs is a list of the guardians' Orbs addresses \r\n\tfunction getGuardiansOrbsAddress(address[] calldata guardianAddrs) external override view returns (address[] memory orbsAddrs) {\r\n\t\torbsAddrs = new address[](guardianAddrs.length);\r\n\t\tfor (uint i = 0; i < guardianAddrs.length; i++) {\r\n\t\t\torbsAddrs[i] = guardians[guardianAddrs[i]].orbsAddr;\r\n\t\t}\r\n\t}\r\n\r\n    /// Returns a guardian's ip\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardian is the guardian to query\r\n    /// @return ip is the guardian's node ipv4 address as a 32b number \r\n\tfunction getGuardianIp(address guardian) external override view returns (bytes4 ip) {\r\n\t\treturn guardians[guardian].ip;\r\n\t}\r\n\r\n    /// Returns the ip of a list of guardians\r\n    /// @dev an unregistered guardian returns 0 ip address\r\n    /// @param guardianAddrs is a list of guardians' addresses to query\r\n    /// @return ips is a list of the guardians' node ipv4 addresses as a 32b numbers\r\n\tfunction getGuardianIps(address[] calldata guardianAddrs) external override view returns (bytes4[] memory ips) {\r\n\t\tips = new bytes4[](guardianAddrs.length);\r\n\t\tfor (uint i = 0; i < guardianAddrs.length; i++) {\r\n\t\t\tips[i] = guardians[guardianAddrs[i]].ip;\r\n\t\t}\r\n\t}\r\n\r\n    /// Checks if a guardian is registered\r\n    /// @param guardian is the guardian to query\r\n    /// @return registered is a bool indicating a guardian address is registered\r\n\tfunction isRegistered(address guardian) public override view returns (bool) {\r\n\t\treturn guardians[guardian].registrationTime != 0;\r\n\t}\r\n\r\n    /// Translates a list guardians Orbs addresses to guardian addresses\r\n    /// @dev an Orbs address that does not correspond to any registered guardian returns address(0)\r\n    /// @param orbsAddrs is a list of the guardians' Orbs addresses to query\r\n    /// @return guardianAddrs is a list of guardians' addresses that matches the Orbs addresses\r\n\tfunction getGuardianAddresses(address[] calldata orbsAddrs) external override view returns (address[] memory guardianAddrs) {\r\n\t\tguardianAddrs = new address[](orbsAddrs.length);\r\n\t\tfor (uint i = 0; i < orbsAddrs.length; i++) {\r\n\t\t\tguardianAddrs[i] = orbsAddressToGuardianAddress[orbsAddrs[i]];\r\n\t\t}\r\n\t}\r\n\r\n    /// Resolves the guardian address for a guardian, given a Guardian/Orbs address\r\n    /// @dev revert if the address does not correspond to a registered guardian address or Orbs address\r\n    /// @dev designed to be used for contracts calls, validating a registered guardian\r\n    /// @dev should be used with caution when called by tools as the call may revert\r\n    /// @dev in case of a conflict matching both guardian and Orbs address, the Guardian address takes precedence\r\n    /// @param guardianOrOrbsAddress is the address to query representing a guardian address or Orbs address\r\n    /// @return guardianAddress is the guardian address that matches the queried address\r\n\tfunction resolveGuardianAddress(address guardianOrOrbsAddress) public override view returns (address guardianAddress) {\r\n\t\tif (isRegistered(guardianOrOrbsAddress)) {\r\n\t\t\tguardianAddress = guardianOrOrbsAddress;\r\n\t\t} else {\r\n\t\t\tguardianAddress = orbsAddressToGuardianAddress[guardianOrOrbsAddress];\r\n\t\t}\r\n\r\n\t\trequire(guardianAddress != address(0), \"Cannot resolve address\");\r\n\t}\r\n\r\n\t/*\r\n\t * Governance\r\n\t */\r\n\r\n    /// Migrates a list of guardians from a previous guardians registration contract\r\n    /// @dev governance function called only by the initialization admin\r\n    /// @dev reads the migrated guardians data by calling getGuardianData in the previous contract\r\n    /// @dev imports also the guardians' registration time and last update\r\n    /// @dev emits a GuardianDataUpdated for each guardian to allow tracking by tools\r\n    /// @param guardiansToMigrate is a list of guardians' addresses to migrate\r\n    /// @param previousContract is the previous registration contract address\r\n\tfunction migrateGuardians(address[] calldata guardiansToMigrate, IGuardiansRegistration previousContract) external override onlyInitializationAdmin {\r\n\t\trequire(previousContract != IGuardiansRegistration(0), \"previousContract must not be the zero address\");\r\n\r\n\t\tfor (uint i = 0; i < guardiansToMigrate.length; i++) {\r\n\t\t\trequire(guardiansToMigrate[i] != address(0), \"guardian must not be the zero address\");\r\n\t\t\tmigrateGuardianData(previousContract, guardiansToMigrate[i]);\r\n\t\t\tmigrateGuardianMetadata(previousContract, guardiansToMigrate[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Private methods\r\n\t */\r\n\r\n    /// Updates a registered guardian data\r\n    /// @dev used by external functions that register a guardian or update its data\r\n    /// @dev emits a GuardianDataUpdated event on any update to the registration  \r\n    /// @param guardianAddr is the address of the guardian to update\r\n    /// @param ip is the guardian's node ipv4 address as a 32b number \r\n    /// @param orbsAddr is the guardian's Orbs node address \r\n    /// @param name is the guardian's name as a string\r\n    /// @param website is the guardian's website as a string, publishing a name and website provide information for delegators\r\n\tfunction _updateGuardian(address guardianAddr, bytes4 ip, address orbsAddr, string memory name, string memory website) private {\r\n\t\trequire(orbsAddr != address(0), \"orbs address must be non zero\");\r\n\t\trequire(orbsAddr != guardianAddr, \"orbs address must be different than the guardian address\");\r\n\t\trequire(!isRegistered(orbsAddr), \"orbs address must not be a guardian address of a registered guardian\");\r\n\t\trequire(bytes(name).length != 0, \"name must be given\");\r\n\r\n\t\tGuardian memory guardian = guardians[guardianAddr];\r\n\r\n\t\tdelete ipToGuardian[guardian.ip];\r\n\t\trequire(ipToGuardian[ip] == address(0), \"ip is already in use\");\r\n\t\tipToGuardian[ip] = guardianAddr;\r\n\r\n\t\tdelete orbsAddressToGuardianAddress[guardian.orbsAddr];\r\n\t\trequire(orbsAddressToGuardianAddress[orbsAddr] == address(0), \"orbs address is already in use\");\r\n\t\torbsAddressToGuardianAddress[orbsAddr] = guardianAddr;\r\n\r\n\t\tguardian.orbsAddr = orbsAddr;\r\n\t\tguardian.ip = ip;\r\n\t\tguardian.name = name;\r\n\t\tguardian.website = website;\r\n\t\tguardian.lastUpdateTime = uint32(block.timestamp);\r\n\r\n\t\tguardians[guardianAddr] = guardian;\r\n\r\n        emit GuardianDataUpdated(guardianAddr, true, ip, orbsAddr, name, website, guardian.registrationTime);\r\n    }\r\n\r\n    /// Updates a guardian's metadata property\r\n    /// @dev used by setMetadata and migration functions\r\n    /// @dev any key may be updated to be used by Orbs platform and tools\r\n    /// @param key is the name of the property to update\r\n    /// @param value is the value of the property to update in a string format\r\n\tfunction _setMetadata(address guardian, string memory key, string memory value) private {\r\n\t\tstring memory oldValue = guardianMetadata[guardian][key];\r\n\t\tguardianMetadata[guardian][key] = value;\r\n\t\temit GuardianMetadataChanged(guardian, key, value, oldValue);\r\n\t}\r\n\r\n    /// Migrates a guardian data from a previous guardians registration contract\r\n    /// @dev used by migrateGuardians\r\n    /// @dev reads the migrated guardians data by calling getGuardianData in the previous contract\r\n    /// @dev imports also the guardians' registration time and last update\r\n    /// @dev emits a GuardianDataUpdated\r\n    /// @param previousContract is the previous registration contract address\r\n    /// @param guardianAddress is the address of the guardians to migrate\r\n\tfunction migrateGuardianData(IGuardiansRegistration previousContract, address guardianAddress) private {\r\n\t\t(bytes4 ip, address orbsAddr, string memory name, string memory website, uint registrationTime, uint lastUpdateTime) = previousContract.getGuardianData(guardianAddress);\r\n\t\tguardians[guardianAddress] = Guardian({\r\n\t\t\torbsAddr: orbsAddr,\r\n\t\t\tip: ip,\r\n\t\t\tname: name,\r\n\t\t\twebsite: website,\r\n\t\t\tregistrationTime: uint32(registrationTime),\r\n\t\t\tlastUpdateTime: uint32(lastUpdateTime)\r\n\t\t});\r\n\t\torbsAddressToGuardianAddress[orbsAddr] = guardianAddress;\r\n\t\tipToGuardian[ip] = guardianAddress;\r\n\r\n\t\temit GuardianRegistered(guardianAddress);\r\n\t\temit GuardianDataUpdated(guardianAddress, true, ip, orbsAddr, name, website, registrationTime);\r\n\t}\r\n\r\n\tstring public constant ID_FORM_URL_METADATA_KEY = \"ID_FORM_URL\";\r\n\r\n    /// Migrates a guardian metadata keys in use from a previous guardians registration contract\r\n    /// @dev the metadata used by the contract are hard-coded in the function\r\n    /// @dev used by migrateGuardians\r\n    /// @dev reads the migrated guardians metadata by calling getMetadata in the previous contract\r\n    /// @dev emits a GuardianMetadataChanged\r\n    /// @param previousContract is the previous registration contract address\r\n    /// @param guardianAddress is the address of the guardians to migrate\t\r\n\tfunction migrateGuardianMetadata(IGuardiansRegistration previousContract, address guardianAddress) private {\r\n\t\tstring memory rewardsFreqMetadata = previousContract.getMetadata(guardianAddress, ID_FORM_URL_METADATA_KEY);\r\n\t\tif (bytes(rewardsFreqMetadata).length > 0) {\r\n\t\t\t_setMetadata(guardianAddress, ID_FORM_URL_METADATA_KEY, rewardsFreqMetadata);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n     * Contracts topology / registry interface\r\n     */\r\n\r\n\tIElections electionsContract;\r\n\r\n    /// Refreshes the address of the other contracts the contract interacts with\r\n    /// @dev called by the registry contract upon an update of a contract in the registry\r\n\tfunction refreshContracts() external override {\r\n\t\telectionsContract = IElections(getElectionsContract());\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ContractRegistryAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orbsAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"}],\"name\":\"GuardianDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldValue\",\"type\":\"string\"}],\"name\":\"GuardianMetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitializationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRegistryAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"RegistryManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ID_FORM_URL_METADATA_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractRegistry\",\"outputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"orbsAddrs\",\"type\":\"address[]\"}],\"name\":\"getGuardianAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"guardianAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"getGuardianData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"orbsAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"getGuardianIp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardianAddrs\",\"type\":\"address[]\"}],\"name\":\"getGuardianIps\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"ips\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardianAddrs\",\"type\":\"address[]\"}],\"name\":\"getGuardiansOrbsAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"orbsAddrs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"ipToGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitializationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRegistryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guardiansToMigrate\",\"type\":\"address[]\"},{\"internalType\":\"contract IGuardiansRegistration\",\"name\":\"previousContract\",\"type\":\"address\"}],\"name\":\"migrateGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRegistryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"orbsAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"registerGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardianOrOrbsAddress\",\"type\":\"address\"}],\"name\":\"resolveGuardianAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardianAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractRegistry\",\"name\":\"newContractRegistry\",\"type\":\"address\"}],\"name\":\"setContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAdmin\",\"type\":\"address\"}],\"name\":\"setRegistryAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistryAdmin\",\"type\":\"address\"}],\"name\":\"transferRegistryManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unregisterGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"orbsAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"updateGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"ip\",\"type\":\"bytes4\"}],\"name\":\"updateGuardianIp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GuardiansRegistration","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"000000000000000000000000d859701c81119ab12a1e62af6270ad2ae05c7ab3000000000000000000000000f1fd5233e60e7ef797025fe9dd066d60d59bcb92","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ca92623e0c942dc1c338ce286ea6e30347aca15066ce9dc92121e43f6a4c615b"}]}