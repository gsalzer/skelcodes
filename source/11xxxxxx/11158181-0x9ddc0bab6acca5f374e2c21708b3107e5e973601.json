{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Govern.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"erc3k/contracts/IERC3000Executor.sol\\\";\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/bitmaps/BitmapLib.sol\\\";\\n\\ncontract Govern is AdaptativeERC165, IERC3000Executor, ACL {\\n    using BitmapLib for bytes32;\\n\\n    bytes4 internal constant EXEC_ROLE = this.exec.selector;\\n    bytes4 internal constant REGISTER_ROLE = this.registerStandardAndCallback.selector;\\n    uint256 internal constant MAX_ACTIONS = 256;\\n\\n    event ETHDeposited(address indexed sender, uint256 value);\\n\\n    constructor(address _initialExecutor) ACL(address(this)) public {\\n        initialize(_initialExecutor);\\n    }\\n\\n    function initialize(address _initialExecutor) public initACL(_initialExecutor) onlyInit(\\\"govern\\\") {\\n        _grant(EXEC_ROLE, address(_initialExecutor));\\n        _grant(REGISTER_ROLE, address(_initialExecutor));\\n        _registerStandard(ERC3000_EXEC_INTERFACE_ID);\\n    }\\n\\n    receive () external payable {\\n        emit ETHDeposited(msg.sender, msg.value);\\n    }\\n\\n    fallback () external {\\n        _handleCallback(msg.sig, msg.data); // WARN: does a low-level return, any code below would be unreacheable\\n    }\\n\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) override public auth(EXEC_ROLE) returns (bytes32, bytes[] memory) {\\n        require(actions.length <= MAX_ACTIONS, \\\"govern: too many\\\"); // need to limit since we use 256-bit bitmaps\\n        \\n        bytes[] memory execResults = new bytes[](actions.length);\\n        bytes32 failureMap = BitmapLib.empty; // start with an empty bitmap\\n\\n        for (uint256 i = 0; i < actions.length; i++) { // can use uint8 given the action limit\\n            // TODO: optimize with assembly\\n            (bool ok, bytes memory ret) = actions[i].to.call{value: actions[i].value}(actions[i].data);\\n            require(ok || allowFailuresMap.get(uint8(i)), \\\"govern: call\\\");\\n            // if a call fails, flip that bit to signal failure\\n            failureMap = ok ? failureMap : failureMap.flip(uint8(i));\\n            execResults[i] = ret;\\n        }\\n\\n        emit Executed(msg.sender, actions, memo, failureMap, execResults);\\n\\n        return (failureMap, execResults);\\n    }\\n\\n    function registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) external auth(REGISTER_ROLE) {\\n        _registerStandardAndCallback(_interfaceId, _callbackSig, _magicNumber);\\n    }\\n\\n    // TODO: ERC-1271\\n}\\n\"\r\n    },\r\n    \"erc3k/contracts/IERC3000Executor.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\nabstract contract IERC3000Executor {\\n    bytes4 internal constant ERC3000_EXEC_INTERFACE_ID = this.exec.selector;\\n\\n    /**\\n     * @notice Executes all given actions\\n     * @param actions A array of ERC3000Data.Action for later executing those\\n     * @param allowFailuresMap A map with the allowed failures\\n     * @param memo The hash of the ERC3000Data.Container\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function exec(ERC3000Data.Action[] memory actions, bytes32 allowFailuresMap, bytes32 memo) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(address indexed actor, ERC3000Data.Action[] actions, bytes32 memo, bytes32 failureMap, bytes[] execResults);\\n}\\n\"\r\n    },\r\n    \"erc3k/contracts/ERC3000Data.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IERC3000Executor.sol\\\";\\n\\nlibrary ERC3000Data {\\n    // TODO: come up with a non-shitty name\\n    struct Container {\\n        Payload payload;\\n        Config config;\\n    }\\n\\n    // WARN: Always remember to change the 'hash' function if modifying the struct\\n    struct Payload {\\n        uint256 nonce;\\n        uint256 executionTime;\\n        address submitter;\\n        IERC3000Executor executor;\\n        Action[] actions;\\n        bytes32 allowFailuresMap;\\n        bytes proof;\\n    }\\n\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct Config {\\n        uint256 executionDelay;\\n        Collateral scheduleDeposit;\\n        Collateral challengeDeposit;\\n        address resolver;\\n        bytes rules;\\n    }\\n\\n    struct Collateral {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    function containerHash(bytes32 payloadHash, bytes32 configHash) internal view returns (bytes32) {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        return keccak256(abi.encodePacked(\\\"erc3k-v1\\\", this, chainId, payloadHash, configHash));\\n    }\\n\\n    function hash(Container memory container) internal view returns (bytes32) {\\n        return containerHash(hash(container.payload), hash(container.config));\\n    }\\n\\n    function hash(Payload memory payload) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encodePacked(\\n                payload.nonce,\\n                payload.executionTime,\\n                payload.submitter,\\n                payload.executor,\\n                keccak256(abi.encode(payload.actions)),\\n                payload.allowFailuresMap,\\n                keccak256(payload.proof)\\n            )\\n        );\\n    }\\n\\n    function hash(Config memory config) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(config));\\n    }\\n}\\n\"\r\n    },\r\n    \"erc3k/contracts/IERC3000.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC3000Data.sol\\\";\\n\\ncontract ERC3000Interface {\\n    bytes4 internal constant ERC3000_INTERFACE_ID =\\n        IERC3000(0).schedule.selector\\n        ^ IERC3000(0).execute.selector\\n        ^ IERC3000(0).challenge.selector\\n        ^ IERC3000(0).resolve.selector\\n        ^ IERC3000(0).veto.selector\\n        ^ IERC3000(0).configure.selector\\n    ;\\n}\\n\\nabstract contract IERC3000 is ERC3000Interface {\\n    /**\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window\\n     * @param container A Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @return containerHash\\n     */\\n    function schedule(ERC3000Data.Container memory container) virtual public returns (bytes32 containerHash);\\n    event Scheduled(bytes32 indexed containerHash, ERC3000Data.Payload payload, ERC3000Data.Collateral collateral);\\n\\n    /**\\n     * @notice Executes an action after its execution delay has passed and its state hasn't been altered by a challenge or veto\\n     * @param container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * MUST be an ERC3000Executor call: payload.executor.exec(payload.actions)\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function execute(ERC3000Data.Container memory container) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Executed(bytes32 indexed containerHash, address indexed actor);\\n\\n    /**\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param reason Hint for case reviewers as to why the scheduled container is illegal\\n     * @return resolverId\\n     */\\n    function challenge(ERC3000Data.Container memory container, bytes memory reason) virtual public returns (uint256 resolverId);\\n    event Challenged(bytes32 indexed containerHash, address indexed actor, bytes reason, uint256 resolverId, ERC3000Data.Collateral collateral);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param container A ERC3000Data.Container struct holding both the payload being scheduled for execution and\\n       the current configuration of the system\\n     * @param resolverId disputeId in the arbitrator in which the dispute over the container was created\\n     * @return failureMap\\n     * @return execResults\\n     */\\n    function resolve(ERC3000Data.Container memory container, uint256 resolverId) virtual public returns (bytes32 failureMap, bytes[] memory execResults);\\n    event Resolved(bytes32 indexed containerHash, address indexed actor, bool approved);\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param containerHash Hash of the container being vetoed\\n     * @param reason Justification for the veto\\n     */\\n    function veto(bytes32 containerHash, bytes memory reason) virtual public;\\n    event Vetoed(bytes32 indexed containerHash, address indexed actor, bytes reason);\\n\\n    /**\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\n     * @param config A ERC3000Data.Config struct holding all the new params that will control the system\\n     * @return configHash\\n     */\\n    function configure(ERC3000Data.Config memory config) virtual public returns (bytes32 configHash);\\n    event Configured(bytes32 indexed containerHash, address indexed actor, ERC3000Data.Config config);\\n}\\n\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/acl/ACL.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../initializable/Initializable.sol\\\";\\n\\nlibrary ACLData {\\n    enum BulkOp { Grant, Revoke, Freeze }\\n\\n    struct BulkItem {\\n        BulkOp op;\\n        bytes4 role;\\n        address who;\\n    }\\n}\\n\\ncontract ACL is Initializable {\\n    bytes4 public constant ROOT_ROLE =\\n        this.grant.selector\\n        ^ this.revoke.selector\\n        ^ this.freeze.selector\\n        ^ this.bulk.selector\\n    ;\\n\\n    address internal constant FREEZE_FLAG = address(1);\\n    address internal constant ANY_ADDR = address(-1);\\n    \\n    mapping (bytes4 => mapping (address => bool)) public roles;\\n\\n    event Granted(bytes4 indexed role, address indexed actor, address indexed who);\\n    event Revoked(bytes4 indexed role, address indexed actor, address indexed who);\\n    event Frozen(bytes4 indexed role, address indexed actor);\\n\\n    modifier auth(bytes4 _role) {\\n        require(\\n            roles[_role][msg.sender] ||  // sender authorized\\n            roles[_role][ANY_ADDR],      // or anyone allowed\\n            \\\"acl: auth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier initACL(address _initialRoot) {\\n        // ACL might have been already initialized by constructors\\n        if (initBlocks[\\\"acl\\\"] == 0) {\\n            _initializeACL(_initialRoot);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _initialRoot) public initACL(_initialRoot) { }\\n\\n    function _initializeACL(address _initialRoot) internal onlyInit(\\\"acl\\\") {\\n        _grant(ROOT_ROLE, _initialRoot);\\n    }\\n\\n    function grant(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _grant(_role, _who);\\n    }\\n\\n    function revoke(bytes4 _role, address _who) external auth(ROOT_ROLE) {\\n        _revoke(_role, _who);\\n    }\\n\\n    function freeze(bytes4 _role) external auth(ROOT_ROLE) {\\n        _freeze(_role);\\n    }\\n\\n    function bulk(ACLData.BulkItem[] memory items) public auth(ROOT_ROLE) {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            ACLData.BulkItem memory item = items[i];\\n\\n            if (item.op == ACLData.BulkOp.Grant) _grant(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Revoke) _revoke(item.role, item.who);\\n            else if (item.op == ACLData.BulkOp.Freeze) _freeze(item.role);\\n        }\\n    }\\n\\n    function _grant(bytes4 _role, address _who) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n        require(_who != FREEZE_FLAG, \\\"acl: bad freeze\\\");\\n        \\n        roles[_role][_who] = true;\\n        emit Granted(_role, msg.sender, _who);\\n    }\\n\\n    function _revoke(bytes4 _role, address _who) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][_who] = false;\\n        emit Revoked(_role, msg.sender, _who);\\n    }\\n\\n    function _freeze(bytes4 _role) internal {\\n        require(!isFrozen(_role), \\\"acl: frozen\\\");\\n\\n        roles[_role][FREEZE_FLAG] = true;\\n\\n        emit Frozen(_role, msg.sender);\\n    }\\n\\n    function isFrozen(bytes4 _role) public view returns (bool) {\\n        return roles[_role][FREEZE_FLAG];\\n    }\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/initializable/Initializable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.6.8;\\n\\ncontract Initializable {\\n    mapping (string => uint256) public initBlocks;\\n\\n    event Initialized(string indexed key);\\n\\n    modifier onlyInit(string memory key) {\\n        require(initBlocks[key] == 0, \\\"initializable: already initialized\\\");\\n        initBlocks[key] = block.number;\\n        _;\\n        emit Initialized(key);\\n    }\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../erc165/ERC165.sol\\\";\\n\\ncontract AdaptativeERC165 is ERC165 {\\n    // erc165 interface ID -> whether it is supported\\n    mapping (bytes4 => bool) internal standardSupported;\\n    // callback function signature -> magic number to return\\n    mapping (bytes4 => bytes32) internal callbackMagicNumbers;\\n\\n    bytes32 internal constant UNREGISTERED_CALLBACK = bytes32(0);\\n\\n    event RegisteredStandard(bytes4 interfaceId);\\n    event RegisteredCallback(bytes4 sig, bytes4 magicNumber);\\n    event ReceivedCallback(bytes4 indexed sig, bytes data);\\n\\n    function supportsInterface(bytes4 _interfaceId) override virtual public view returns (bool) {\\n        return standardSupported[_interfaceId] || super.supportsInterface(_interfaceId);\\n    }\\n\\n    function _handleCallback(bytes4 _sig, bytes memory _data) internal {\\n        bytes32 magicNumber = callbackMagicNumbers[_sig];\\n        require(magicNumber != UNREGISTERED_CALLBACK, \\\"adap-erc165: unknown callback\\\");\\n\\n        emit ReceivedCallback(_sig, _data);\\n\\n        // low-level return magic number\\n        assembly {\\n            mstore(0x00, magicNumber)\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    function _registerStandardAndCallback(bytes4 _interfaceId, bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        _registerStandard(_interfaceId);\\n        _registerCallback(_callbackSig, _magicNumber);\\n    }\\n\\n    function _registerStandard(bytes4 _interfaceId) internal {\\n        // use a random magic number for standards without number\\n        standardSupported[_interfaceId] = true;\\n\\n        emit RegisteredStandard(_interfaceId);\\n    }\\n\\n    function _registerCallback(bytes4 _callbackSig, bytes4 _magicNumber) internal {\\n        callbackMagicNumbers[_callbackSig] = _magicNumber;\\n\\n        emit RegisteredCallback(_callbackSig, _magicNumber);\\n    }\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\n\\nabstract contract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) virtual public view returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID\\n          || block.timestamp == 1; // silence visibility warning needed for overrides\\n    }\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/bitmaps/BitmapLib.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nlibrary BitmapLib {\\n    bytes32 constant internal empty = bytes32(0);\\n    bytes32 constant internal allowAll = empty;\\n    bytes32 constant internal denyAll = bytes32(uint256(-1));\\n\\n    function flip(bytes32 map, uint8 index) internal pure returns (bytes32) {\\n        return bytes32(uint256(map) ^ uint256(1) << index);\\n    }\\n\\n    function get(bytes32 map, uint8 index) internal pure returns (bool) {\\n        return bool(uint256(map) >> index & 1 == 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GovernRegistry.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\nimport \\\"erc3k/contracts/IERC3000Executor.sol\\\";\\nimport \\\"erc3k/contracts/IERC3000Registry.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\\\";\\n\\ncontract GovernRegistry is IERC3000Registry {\\n    mapping(string => bool) public nameUsed;\\n\\n    function register(\\n        IERC3000Executor _executor,\\n        IERC3000 _queue,\\n        IERC20 _token,\\n        string calldata _name,\\n        bytes calldata _initialMetadata\\n    ) override external\\n    {\\n        require(!nameUsed[_name], \\\"registry: name used\\\");\\n\\n        nameUsed[_name] = true;\\n\\n        emit Registered(_executor, _queue, _token, msg.sender, _name);\\n        _setMetadata(_executor, _initialMetadata);\\n    }\\n\\n    function setMetadata(bytes memory _metadata) override public {\\n        _setMetadata(IERC3000Executor(msg.sender), _metadata);\\n    }\\n\\n    function _setMetadata(IERC3000Executor _executor, bytes memory _metadata) internal {\\n        emit SetMetadata(_executor, _metadata);\\n    }\\n}\\n\"\r\n    },\r\n    \"erc3k/contracts/IERC3000Registry.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"./IERC3000.sol\\\";\\nimport \\\"./IERC3000Executor.sol\\\";\\n\\nimport \\\"@aragon/govern-token/contracts/interfaces/IERC20.sol\\\";\\n\\nabstract contract IERC3000Registry is ERC3000Interface {\\n    /**\\n     * @notice Registers a IERC3000Executor and IERC3000 contract by a name and with his metadata\\n     * @param executor IERC3000Executor contract\\n     * @param queue IERC3000 contract\\n     * @param name The name of this DAO\\n     * @param token Governance token of the DAO\\n     * @param initialMetadata Additional data to store for this DAO\\n     */\\n    function register(IERC3000Executor executor, IERC3000 queue, IERC20 token, string calldata name, bytes calldata initialMetadata) virtual external;\\n    event Registered(IERC3000Executor indexed executor, IERC3000 queue, IERC20 indexed token, address indexed registrant, string name);\\n\\n    /**\\n     * @notice Sets or updates the metadata of a DAO\\n     * @param metadata Additional data to store for this DAO\\n     */\\n    function setMetadata(bytes memory metadata) virtual public;\\n    event SetMetadata(IERC3000Executor indexed executor, bytes metadata);\\n}\\n\"\r\n    },\r\n    \"@aragon/govern-token/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity ^0.6.8;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/pipelines/GovernQueue.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8; // TODO: reconsider compiler version before production release\\npragma experimental ABIEncoderV2; // required for passing structs in calldata (fairly secure at this point)\\n\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/protocol/IArbitrable.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/acl/ACL.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/adaptative-erc165/AdaptativeERC165.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol\\\";\\n\\nlibrary GovernQueueStateLib {\\n    enum State {\\n        None,\\n        Scheduled,\\n        Challenged,\\n        Approved,\\n        Rejected,\\n        Cancelled,\\n        Executed\\n    }\\n\\n    struct Item {\\n        State state;\\n    }\\n\\n    function checkState(Item storage _item, State _requiredState) internal view {\\n        require(_item.state == _requiredState, \\\"queue: bad state\\\");\\n    }\\n\\n    function setState(Item storage _item, State _state) internal {\\n        _item.state = _state;\\n    }\\n\\n    function checkAndSetState(Item storage _item, State _fromState, State _toState) internal {\\n        checkState(_item, _fromState);\\n        setState(_item, _toState);\\n    }\\n}\\n\\ncontract GovernQueue is IERC3000, AdaptativeERC165, IArbitrable, ACL {\\n    // Syntax sugar to enable method-calling syntax on types\\n    using ERC3000Data for *;\\n    using DepositLib for ERC3000Data.Collateral;\\n    using GovernQueueStateLib for GovernQueueStateLib.Item;\\n    using SafeERC20 for ERC20;\\n\\n    // Permanent state\\n    bytes32 public configHash; // keccak256 hash of the current ERC3000Data.Config\\n    uint256 public nonce; // number of scheduled payloads so far\\n    mapping (bytes32 => GovernQueueStateLib.Item) public queue; // container hash -> execution state\\n\\n    // Temporary state\\n    mapping (bytes32 => address) public challengerCache; // container hash -> challenger addr (used after challenging and before resolution implementation)\\n    mapping (IArbitrator => mapping (uint256 => bytes32)) public disputeItemCache; // arbitrator addr -> dispute id -> container hash (used between dispute creation and ruling)\\n\\n    /**\\n     * @param _aclRoot account that will be given root permissions on ACL (commonly given to factory)\\n     * @param _initialConfig initial configuration parameters\\n     */\\n    constructor(address _aclRoot, ERC3000Data.Config memory _initialConfig)\\n        public\\n        ACL(_aclRoot) // note that this contract directly derives from ACL (ACL is local to contract and not global to system in Govern)\\n    {\\n        initialize(_aclRoot, _initialConfig);\\n    }\\n\\n    function initialize(address _aclRoot, ERC3000Data.Config memory _initialConfig) public initACL(_aclRoot) onlyInit(\\\"queue\\\") {\\n        _setConfig(_initialConfig);\\n        _registerStandard(ARBITRABLE_INTERFACE_ID);\\n        _registerStandard(ERC3000_INTERFACE_ID);\\n    }\\n\\n     /**\\n     * @notice Schedules an action for execution, allowing for challenges and vetos on a defined time window. Pulls collateral from submitter into contract.\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     */\\n    function schedule(ERC3000Data.Container memory _container) // TO FIX: Container is in memory and function has to be public to avoid an unestrutable solidity crash\\n        public\\n        override\\n        auth(this.schedule.selector) // note that all functions in this contract are ACL protected (commonly some of them will be open for any addr to perform)\\n        returns (bytes32 containerHash)\\n    {   \\n        // prevent griefing by front-running (the same container is sent by two different people and one must be challenged)\\n        require(_container.payload.nonce == ++nonce, \\\"queue: bad nonce\\\");\\n        // hash using ERC3000Data.hash(ERC3000Data.Config)\\n        bytes32 _configHash = _container.config.hash();\\n        // ensure that the hash of the config passed in the container matches the current config (implicit agreement approval by scheduler)\\n        require(_configHash == configHash, \\\"queue: bad config\\\");\\n        // ensure that the time delta to the execution timestamp provided in the payload is at least after the config's execution delay\\n        require(_container.payload.executionTime >= block.timestamp + _container.config.executionDelay, \\\"queue: bad delay\\\");\\n        // ensure that the submitter of the payload is also the sender of this call\\n        require(_container.payload.submitter == msg.sender, \\\"queue: bad submitter\\\");\\n\\n        containerHash = ERC3000Data.containerHash(_container.payload.hash(), _configHash);\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.None, // ensure that the state for this container is None\\n            GovernQueueStateLib.State.Scheduled // and if so perform a state transition to Scheduled\\n        );\\n        // we don't need to save any more state about the container in storage\\n        // we just authenticate the hash and assign it a state, since all future\\n        // actions regarding the container will need to provide it as a witness\\n        // all witnesses are logged from this contract at least once, so the \\n        // trust assumption should be the same as storing all on-chain (move complexity to clients)\\n\\n        ERC3000Data.Collateral memory collateral = _container.config.scheduleDeposit;\\n        collateral.collectFrom(_container.payload.submitter); // pull collateral from submitter (requires previous approval)\\n\\n        // TODO: pay court tx fee\\n\\n        // emit an event to ensure data availability of all state that cannot be otherwise fetched (see how config isn't emitted since an observer should already have it)\\n        emit Scheduled(containerHash, _container.payload, collateral);\\n    }\\n\\n    /**\\n     * @notice Executes an action after its execution delayed has passed and its state hasn't been altered by a challenge or veto\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     */\\n    function execute(ERC3000Data.Container memory _container)\\n        public\\n        override\\n        auth(this.execute.selector) // in most instances this will be open for any addr, but leaving configurable for flexibility\\n        returns (bytes32 failureMap, bytes[] memory execResults)\\n    {\\n        // ensure enough time has passed\\n        require(uint64(block.timestamp) >= _container.payload.executionTime, \\\"queue: wait more\\\");\\n\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled, // note that we will revert here if the container wasn't previously scheduled\\n            GovernQueueStateLib.State.Executed\\n        );\\n\\n        _container.config.scheduleDeposit.releaseTo(_container.payload.submitter); // release collateral to executor\\n\\n        return _execute(_container.payload, containerHash);\\n    }\\n\\n    /**\\n     * @notice Challenge a container in case its scheduling is illegal as per Config.rules. Pulls collateral and dispute fees from sender into contract\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * @param _reason Hint for case reviewers as to why the scheduled container is illegal\\n     */\\n    function challenge(ERC3000Data.Container memory _container, bytes memory _reason) auth(this.challenge.selector) override public returns (uint256 disputeId) {\\n        bytes32 containerHash = _container.hash();\\n        challengerCache[containerHash] = msg.sender; // cache challenger address while it is needed\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled,\\n            GovernQueueStateLib.State.Challenged\\n        );\\n\\n        ERC3000Data.Collateral memory collateral = _container.config.challengeDeposit;\\n        collateral.collectFrom(msg.sender); // pull challenge collateral from sender\\n\\n        // create dispute on arbitrator\\n        IArbitrator arbitrator = IArbitrator(_container.config.resolver);\\n        (address recipient, ERC20 feeToken, uint256 feeAmount) = arbitrator.getDisputeFees();\\n        require(feeToken.safeTransferFrom(msg.sender, address(this), feeAmount), \\\"queue: bad fee pull\\\");\\n        require(feeToken.safeApprove(recipient, feeAmount), \\\"queue: bad approve\\\");\\n        disputeId = arbitrator.createDispute(2, abi.encode(_container)); // create dispute sending full container ABI encoded (could prob just send payload to save gas)\\n        require(feeToken.safeApprove(recipient, 0), \\\"queue: bad reset\\\"); // for security with non-compliant tokens (that fail on non-zero to non-zero approvals)\\n\\n        // submit both arguments as evidence and close evidence period. no more evidence can be submitted and a settlement can't happen (could happen off-protocol)\\n        emit EvidenceSubmitted(arbitrator, disputeId, _container.payload.submitter, _container.payload.proof, true);\\n        emit EvidenceSubmitted(arbitrator, disputeId, msg.sender, _reason, true);\\n        arbitrator.closeEvidencePeriod(disputeId);\\n\\n        disputeItemCache[arbitrator][disputeId] = containerHash; // cache a relation between disputeId and containerHash while needed\\n\\n        emit Challenged(containerHash, msg.sender, _reason, disputeId, collateral);\\n    }\\n\\n    /**\\n     * @notice Apply arbitrator's ruling over a challenge once it has come to a final ruling\\n     * @param _container A ERC3000Data.Container struct holding both the paylaod being scheduled for execution and\\n       the current configuration of the system\\n     * @param _disputeId disputeId in the arbitrator in which the dispute over the container was created\\n     */\\n    function resolve(ERC3000Data.Container memory _container, uint256 _disputeId) override public returns (bytes32 failureMap, bytes[] memory execResults) {\\n        bytes32 containerHash = _container.hash();\\n        if (queue[containerHash].state == GovernQueueStateLib.State.Challenged) {\\n            // will re-enter in `rule`, `rule` will perform state transition depending on ruling\\n            IArbitrator(_container.config.resolver).executeRuling(_disputeId);\\n        } // else continue, as we must \\n\\n        GovernQueueStateLib.State state = queue[containerHash].state;\\n\\n        emit Resolved(containerHash, msg.sender, state == GovernQueueStateLib.State.Approved);\\n\\n        if (state == GovernQueueStateLib.State.Approved) {\\n            return executeApproved(_container);\\n        }\\n\\n        require(state == GovernQueueStateLib.State.Rejected, \\\"queue: unresolved\\\");\\n        settleRejection(_container);\\n        return (bytes32(0), new bytes[](0));\\n    }\\n\\n    function veto(bytes32 _containerHash, bytes memory _reason) auth(this.veto.selector) override public {\\n        queue[_containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Scheduled,\\n            GovernQueueStateLib.State.Cancelled\\n        );\\n\\n        emit Vetoed(_containerHash, msg.sender, _reason);\\n    }\\n\\n    /**\\n     * @notice Apply a new configuration for all *new* containers to be scheduled\\n     * @param _config A ERC3000Data.Config struct holding all the new params that will control the queue\\n     */\\n    function configure(ERC3000Data.Config memory _config)\\n        public\\n        override\\n        auth(this.configure.selector)\\n        returns (bytes32)\\n    {\\n        return _setConfig(_config);\\n    }\\n\\n    // Finalization functions\\n    // In the happy path, they are not externally called (triggered from resolve -> rule -> executeApproved | settleRejection), but left public for security\\n\\n    function executeApproved(ERC3000Data.Container memory _container) public returns (bytes32 failureMap, bytes[] memory execResults) {\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Approved,\\n            GovernQueueStateLib.State.Executed\\n        );\\n\\n        // release all collateral to submitter\\n        _container.config.scheduleDeposit.releaseTo(_container.payload.submitter);\\n        _container.config.challengeDeposit.releaseTo(_container.payload.submitter);\\n\\n        challengerCache[containerHash] = address(0); // release state, refund gas, no longer needed in state\\n\\n        return _execute(_container.payload, containerHash);\\n    }\\n\\n    function settleRejection(ERC3000Data.Container memory _container) public {\\n        bytes32 containerHash = _container.hash();\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Rejected,\\n            GovernQueueStateLib.State.Cancelled\\n        );\\n\\n        address challenger = challengerCache[containerHash];\\n\\n        // release all collateral to challenger\\n        _container.config.scheduleDeposit.releaseTo(challenger);\\n        _container.config.challengeDeposit.releaseTo(challenger);\\n        challengerCache[containerHash] = address(0); // release state, refund gas, no longer needed in state\\n    }\\n\\n    // Arbitrable\\n\\n    function rule(uint256 _disputeId, uint256 _ruling) override external {\\n        // implicit check that msg.sender was actually arbitrating a dispute over this container\\n        IArbitrator arbitrator = IArbitrator(msg.sender);\\n        bytes32 containerHash = disputeItemCache[arbitrator][_disputeId];\\n        queue[containerHash].checkAndSetState(\\n            GovernQueueStateLib.State.Challenged,\\n            _ruling == ALLOW_RULING ? GovernQueueStateLib.State.Approved : GovernQueueStateLib.State.Rejected\\n        );\\n        disputeItemCache[arbitrator][_disputeId] = bytes32(0); // refund gas, no longer needed in state\\n\\n        emit Ruled(arbitrator, _disputeId, _ruling);\\n    }\\n\\n    function submitEvidence(\\n        uint256,\\n        bytes calldata,\\n        bool\\n    ) external override {\\n        revert(\\\"queue: evidence\\\");\\n    }\\n\\n    // Internal\\n\\n    function _execute(ERC3000Data.Payload memory _payload, bytes32 _containerHash) internal returns (bytes32, bytes[] memory) {\\n        emit Executed(_containerHash, msg.sender);\\n        return _payload.executor.exec(_payload.actions, _payload.allowFailuresMap, _containerHash);\\n    }\\n\\n    function _setConfig(ERC3000Data.Config memory _config)\\n        internal\\n        returns (bytes32)\\n    {\\n        configHash = _config.hash();\\n\\n        emit Configured(configHash, msg.sender, _config);\\n\\n        return configHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/protocol/IArbitrable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragon-court/blob/master/contracts/arbitration/IArbitrable.sol\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\nabstract contract IArbitrable {\\n    bytes4 internal constant ARBITRABLE_INTERFACE_ID = bytes4(0x88f3ee69);\\n    uint256 internal constant ALLOW_RULING = 4;\\n\\n    /**\\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\\n    * @param arbitrator IArbitrator instance ruling the dispute\\n    * @param disputeId Identification number of the dispute being ruled by the arbitrator\\n    * @param ruling Ruling given by the arbitrator\\n    */\\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\\n\\n    /**\\n    * @dev Emitted when new evidence is submitted for the IArbitrable instance's dispute\\n    * @param arbitrator IArbitrator submitting the evidence for\\n    * @param disputeId Identification number of the dispute receiving new evidence\\n    * @param submitter Address of the account submitting the evidence\\n    * @param evidence Data submitted for the evidence of the dispute\\n    * @param finished Whether or not the submitter has finished submitting evidence\\n    */\\n    event EvidenceSubmitted(IArbitrator indexed arbitrator, uint256 indexed disputeId, address indexed submitter, bytes evidence, bool finished);\\n\\n    /**\\n    * @dev Submit evidence for a dispute\\n    * @param _disputeId Id of the dispute in the Court\\n    * @param _evidence Data submitted for the evidence related to the dispute\\n    * @param _finished Whether or not the submitter has finished submitting evidence\\n    */\\n    function submitEvidence(uint256 _disputeId, bytes calldata _evidence, bool _finished) virtual external;\\n\\n    /**\\n    * @dev Give a ruling for a certain dispute, the account calling it must have rights to rule on the contract\\n    * @param _disputeId Identification number of the dispute to be ruled\\n    * @param _ruling Ruling given by the arbitrator, where 0 is reserved for \\\"refused to make a decision\\\"\\n    */\\n    function rule(uint256 _disputeId, uint256 _ruling) virtual external;\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/protocol/IArbitrator.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragon-court/blob/master/contracts/arbitration/IArbitrator.sol\\n\\npragma solidity ^0.6.8;\\n\\nimport \\\"../erc20/SafeERC20.sol\\\";\\n\\ninterface IArbitrator {\\n    /**\\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\n    * @return Dispute identification number\\n    */\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata) external returns (uint256);\\n\\n    /**\\n    * @dev Close the evidence period of a dispute\\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\\n    */\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Execute the Arbitrable associated to a dispute based on its final ruling\\n    * @param _disputeId Identification number of the dispute to be executed\\n    */\\n    function executeRuling(uint256 _disputeId) external;\\n\\n    /**\\n    * @dev Tell the dispute fees information to create a dispute\\n    * @return recipient Address where the corresponding dispute fees must be transferred to\\n    * @return feeToken ERC20 token used for the fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n\\n    /**\\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\\n    * @param _subscriber Address of the account paying the subscription fees for\\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\\n    * @return feeToken ERC20 token used for the subscription fees\\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\\n    */\\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/erc20/SafeERC20.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\n// From https://github.com/aragon/aragonOS/blob/next/contracts/common/SafeERC20.sol\\n\\n// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.6.8;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\nabstract contract ERC20 {\\n    function totalSupply() virtual public view returns (uint256);\\n\\n    function balanceOf(address _who) virtual public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        virtual public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) virtual public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        virtual public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        virtual public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeERC20 {\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas(),                // forward all \\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize()\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas(),                // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            _token.transfer.selector,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(address(_token), balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(address(_token), allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(address(_token), totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\"\r\n    },\r\n    \"@aragon/govern-contract-utils/contracts/deposits/DepositLib.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    GPL-3.0\\n */\\n\\npragma solidity 0.6.8;\\n\\nimport \\\"erc3k/contracts/ERC3000Data.sol\\\";\\n\\nimport \\\"../erc20/SafeERC20.sol\\\";\\n\\nlibrary DepositLib {\\n    using SafeERC20 for ERC20;\\n\\n    event Lock(address indexed token, address indexed from, uint256 amount);\\n    event Unlock(address indexed token, address indexed to, uint256 amount);\\n\\n    function collectFrom(ERC3000Data.Collateral memory _collateral, address _from) internal {\\n        if (_collateral.amount > 0) {\\n            ERC20 token = ERC20(_collateral.token);\\n            require(token.safeTransferFrom(_from, msg.sender, _collateral.amount), \\\"queue: bad get token\\\");\\n\\n            emit Lock(_collateral.token, _from, _collateral.amount);\\n        }\\n    }\\n\\n    function releaseTo(ERC3000Data.Collateral memory _collateral, address _to) internal {\\n        if (_collateral.amount > 0) {\\n            ERC20 token = ERC20(_collateral.token);\\n            require(token.safeTransfer(_to, _collateral.amount), \\\"queue: bad send token\\\");\\n\\n            emit Unlock(_collateral.token, _to, _collateral.amount);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/ERC3000ExecutorMock.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"erc3k/contracts/IERC3000Executor.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\\\";\\nimport \\\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\\\";\\n\\ncontract ERC3000ExecutorMock is IERC3000Executor, ERC165 {\\n    function exec(ERC3000Data.Action[] memory, bytes32, bytes32) override public returns (bytes32, bytes[] memory) {\\n\\n    }\\n\\n    function interfaceID() public pure returns (bytes4) {\\n        return ERC3000_EXEC_INTERFACE_ID;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override public view returns (bool) {\\n        return interfaceId == ERC3000_EXEC_INTERFACE_ID;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/ERC3000Mock.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"erc3k/contracts/IERC3000.sol\\\";\\n\\nimport \\\"@aragon/govern-contract-utils/contracts/erc165/ERC165.sol\\\";\\n\\ncontract ERC3000Mock is IERC3000, ERC165 {\\n    function schedule(ERC3000Data.Container memory) override public returns (bytes32) { }\\n\\n    function execute(ERC3000Data.Container memory) override public returns (bytes32, bytes[] memory) { }\\n\\n    function challenge(ERC3000Data.Container memory, bytes memory) override public returns (uint256 resolverId) { }\\n\\n    function resolve(ERC3000Data.Container memory, uint256) override public returns (bytes32, bytes[] memory) { }\\n\\n    function veto(bytes32, bytes memory) override public { }\\n\\n    function configure(ERC3000Data.Config memory) override public returns (bytes32) { }\\n\\n    function interfaceID() public pure returns (bytes4) {\\n        return ERC3000_INTERFACE_ID;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override public view returns (bool) {\\n        return interfaceId == ERC3000_INTERFACE_ID;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC3000\",\"name\":\"queue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC3000Executor\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"SetMetadata\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3000Executor\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract IERC3000\",\"name\":\"_queue\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_initialMetadata\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GovernRegistry","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}