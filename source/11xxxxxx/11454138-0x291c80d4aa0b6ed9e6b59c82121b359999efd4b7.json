{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is Initializable, IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/drafts/Counters.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is Initializable, IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    function initialize() public initializer {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Initializable, Context, ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    function initialize() public initializer {\r\n        ERC165.initialize();\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    function _hasBeenInitialized() internal view returns (bool) {\r\n        return supportsInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][to] = approved;\r\n        emit ApprovalForAll(_msgSender(), to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to].increment();\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * This is an internal detail of the `ERC721` contract and its use is deprecated.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is Initializable, IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Enumerable is Initializable, Context, ERC165, ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Constructor function.\r\n     */\r\n    function initialize() public initializer {\r\n        require(ERC721._hasBeenInitialized());\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    function _hasBeenInitialized() internal view returns (bool) {\r\n        return supportsInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract.\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens.\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to address the beneficiary that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Internal function to burn a specific token.\r\n    //  * Reverts if the token does not exist.\r\n    //  * Deprecated, use {ERC721-_burn} instead.\r\n    //  * @param owner owner of the token to burn\r\n    //  * @param tokenId uint256 ID of the token being burned\r\n    //  */\r\n    // function _burn(address owner, uint256 tokenId) internal {\r\n    //     super._burn(owner, tokenId);\r\n\r\n    //     _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n    //     // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n    //     _ownedTokensIndex[tokenId] = 0;\r\n\r\n    //     // _removeTokenFromAllTokensEnumeration(tokenId);\r\n    // }\r\n\r\n    /**\r\n     * @dev Gets the list of token IDs of the requested owner.\r\n     * @param owner address owning the tokens\r\n     * @return uint256[] List of token IDs owned by the requested address\r\n     */\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _ownedTokens[from].length--;\r\n\r\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n        // lastTokenId, or just over the end of the array if the token was the last one).\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    // function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n    //     // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    //     // then delete the last slot (swap and pop).\r\n\r\n    //     uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n    //     uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    //     // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n    //     // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n    //     // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    //     uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    //     _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    //     _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n    //     // This also deletes the contents at the last position of the array\r\n    //     _allTokens.length--;\r\n    //     _allTokensIndex[tokenId] = 0;\r\n    // }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is Initializable, IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/ERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC721Metadata is Initializable, Context, ERC165, ERC721, IERC721Metadata {\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    function initialize(string memory name, string memory symbol) public initializer {\r\n        require(ERC721._hasBeenInitialized());\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n\r\n    function _hasBeenInitialized() internal view returns (bool) {\r\n        return supportsInterface(_INTERFACE_ID_ERC721_METADATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token name.\r\n     * @return string representing the token name\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token symbol.\r\n     * @return string representing the token symbol\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an URI for a given token ID.\r\n     * Throws if the token ID does not exist. May return an empty string.\r\n     * @param tokenId uint256 ID of the token to query\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return _tokenURIs[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the token URI for a given token.\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to set its URI\r\n     * @param uri string URI to assign\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = uri;\r\n    }\r\n\r\n    // *\r\n    //  * @dev Internal function to burn a specific token.\r\n    //  * Reverts if the token does not exist.\r\n    //  * Deprecated, use _burn(uint256) instead.\r\n    //  * @param owner owner of the token to burn\r\n    //  * @param tokenId uint256 ID of the token being burned by the msg.sender\r\n     \r\n    // function _burn(address owner, uint256 tokenId) internal {\r\n    //     super._burn(owner, tokenId);\r\n\r\n    //     // Clear metadata (if any)\r\n    //     if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n    //         delete _tokenURIs[tokenId];\r\n    //     }\r\n    // }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/AsyncArtwork_v2.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n// interface for the v1 contract\r\ninterface AsyncArtwork_v1 {\r\n    function getControlToken(uint256 controlTokenId) external view returns (int256[] memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// Copyright (C) 2020 Asynchronous Art, Inc.\r\n// GNU General Public License v3.0\r\n// Full notice https://github.com/asyncart/async-contracts/blob/master/LICENSE\r\n\r\ncontract AsyncArtwork_v2 is Initializable, ERC721, ERC721Enumerable, ERC721Metadata {\r\n    // An event whenever the platform address is updated\r\n    event PlatformAddressUpdated(\r\n        address platformAddress\r\n    );\r\n\r\n    event PermissionUpdated(\r\n        uint256 tokenId,\r\n        address tokenOwner,\r\n        address permissioned\r\n    );\r\n\r\n    // An event whenever a creator is whitelisted with the token id and the layer count\r\n    event CreatorWhitelisted(\r\n        uint256 tokenId,\r\n        uint256 layerCount,\r\n        address creator\r\n    );\r\n\r\n    // An event whenever royalty amount for a token is updated\r\n    event PlatformSalePercentageUpdated (\r\n        uint256 tokenId,\r\n        uint256 platformFirstPercentage,\r\n        uint256 platformSecondPercentage        \r\n    );\r\n\r\n    // An event whenever artist secondary sale percentage is updated\r\n    event ArtistSecondSalePercentUpdated (\r\n        uint256 artistSecondPercentage\r\n    );\r\n\r\n    // An event whenever a bid is proposed\r\n    event BidProposed(\r\n        uint256 tokenId,\r\n        uint256 bidAmount,\r\n        address bidder\r\n    );\r\n\r\n    // An event whenever an bid is withdrawn\r\n    event BidWithdrawn(\r\n        uint256 tokenId\r\n    );\r\n\r\n    // An event whenever a buy now price has been set\r\n    event BuyPriceSet(\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    // An event when a token has been sold \r\n    event TokenSale(\r\n        // the id of the token\r\n        uint256 tokenId,\r\n        // the price that the token was sold for\r\n        uint256 salePrice,\r\n        // the address of the buyer\r\n        address buyer\r\n    );\r\n\r\n    // An event whenever a control token has been updated\r\n    event ControlLeverUpdated(\r\n        // the id of the token\r\n        uint256 tokenId,\r\n        // an optional amount that the updater sent to boost priority of the rendering\r\n        uint256 priorityTip,\r\n        // the number of times this control lever can now be updated\r\n        int256 numRemainingUpdates,\r\n        // the ids of the levers that were updated\r\n        uint256[] leverIds,        \r\n        // the previous values that the levers had before this update (for clients who want to animate the change)\r\n        int256[] previousValues,\r\n        // the new updated value\r\n        int256[] updatedValues\r\n    );\r\n\r\n    // struct for a token that controls part of the artwork\r\n    struct ControlToken {\r\n        // number that tracks how many levers there are\r\n        uint256 numControlLevers;\r\n        // The number of update calls this token has (-1 for infinite)\r\n        int256 numRemainingUpdates;\r\n        // false by default, true once instantiated\r\n        bool exists;\r\n        // false by default, true once setup by the artist\r\n        bool isSetup;\r\n        // the levers that this control token can use\r\n        mapping(uint256 => ControlLever) levers;\r\n    }\r\n\r\n    // struct for a lever on a control token that can be changed\r\n    struct ControlLever {\r\n        // // The minimum value this token can have (inclusive)\r\n        int256 minValue;\r\n        // The maximum value this token can have (inclusive)\r\n        int256 maxValue;\r\n        // The current value for this token\r\n        int256 currentValue;\r\n        // false by default, true once instantiated\r\n        bool exists;\r\n    }\r\n\r\n    // struct for a pending bid \r\n    struct PendingBid {\r\n        // the address of the bidder\r\n        address payable bidder;\r\n        // the amount that they bid\r\n        uint256 amount;\r\n        // false by default, true once instantiated\r\n        bool exists;\r\n    }\r\n\r\n    struct WhitelistReservation {\r\n        // the address of the creator\r\n        address creator;\r\n        // the amount of layers they're expected to mint\r\n        uint256 layerCount;\r\n    }\r\n\r\n    // track whether this token was sold the first time or not (used for determining whether to use first or secondary sale percentage)\r\n    mapping(uint256 => bool) public tokenDidHaveFirstSale;\r\n    // if a token's URI has been locked or not\r\n    mapping(uint256 => bool) public tokenURILocked;    \r\n    // map control token ID to its buy price\r\n    mapping(uint256 => uint256) public buyPrices;    \r\n    // mapping of addresses to credits for failed transfers\r\n    mapping(address => uint256) public failedTransferCredits;\r\n    // mapping of tokenId to percentage of sale that the platform gets on first sales\r\n    mapping(uint256 => uint256) public platformFirstSalePercentages;\r\n    // mapping of tokenId to percentage of sale that the platform gets on secondary sales\r\n    mapping(uint256 => uint256) public platformSecondSalePercentages;\r\n    // what tokenId creators are allowed to mint (and how many layers)\r\n    mapping(uint256 => WhitelistReservation) public creatorWhitelist;\r\n    // for each token, holds an array of the creator collaborators. For layer tokens it will likely just be [artist], for master tokens it may hold multiples\r\n    mapping(uint256 => address payable[]) public uniqueTokenCreators;    \r\n    // map a control token ID to its highest bid\r\n    mapping(uint256 => PendingBid) public pendingBids;\r\n    // map a control token id to a control token struct\r\n    mapping(uint256 => ControlToken) public controlTokenMapping;    \r\n    // mapping of addresses that are allowed to control tokens on your behalf\r\n    mapping(address => mapping(uint256 => address)) public permissionedControllers;\r\n    // the percentage of sale that an artist gets on secondary sales\r\n    uint256 public artistSecondSalePercentage;\r\n    // gets incremented to placehold for tokens not minted yet\r\n    uint256 public expectedTokenSupply;\r\n    // the minimum % increase for new bids coming\r\n    uint256 public minBidIncreasePercent;\r\n    // the address of the platform (for receving commissions and royalties)\r\n    address payable public platformAddress;\r\n    // the address of the contract that can upgrade from v1 to v2 tokens\r\n    address public upgraderAddress;\r\n    // the address of the contract that can whitelist artists to mint\r\n    address public minterAddress;\r\n\r\n    function initialize(string memory name, string memory symbol, uint256 initialExpectedTokenSupply, address _upgraderAddress) public initializer {\r\n        ERC721.initialize();\r\n        ERC721Enumerable.initialize();\r\n        ERC721Metadata.initialize(name, symbol);\r\n\r\n        // starting royalty amounts\r\n        artistSecondSalePercentage = 10;\r\n\r\n        // intitialize the minimum bid increase percent\r\n        minBidIncreasePercent = 1;\r\n\r\n        // by default, the platformAddress is the address that mints this contract\r\n        platformAddress = msg.sender;\r\n\r\n        // set the upgrader address\r\n        upgraderAddress = _upgraderAddress;\r\n\r\n        // set the initial expected token supply       \r\n        expectedTokenSupply = initialExpectedTokenSupply;\r\n\r\n        require(expectedTokenSupply > 0);\r\n    }\r\n\r\n    // modifier for only allowing the platform to make a call\r\n    modifier onlyPlatform() {\r\n        require(msg.sender == platformAddress);\r\n        _;\r\n    }\r\n\r\n    // modifier for only allowing the minter to make a call\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minterAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelistedCreator(uint256 masterTokenId, uint256 layerCount) {\r\n        require(creatorWhitelist[masterTokenId].creator == msg.sender);\r\n        require(creatorWhitelist[masterTokenId].layerCount == layerCount);\r\n        _;\r\n    }\r\n\r\n    function setExpectedTokenSupply(uint256 newExpectedTokenSupply) external onlyPlatform {\r\n        expectedTokenSupply = newExpectedTokenSupply;\r\n    }\r\n\r\n    // reserve a tokenID and layer count for a creator. Define a platform royalty percentage per art piece (some pieces have higher or lower amount)\r\n    function whitelistTokenForCreator(address creator, uint256 masterTokenId, uint256 layerCount, \r\n        uint256 platformFirstSalePercentage, uint256 platformSecondSalePercentage) external onlyMinter {\r\n        // the tokenID we're reserving must be the current expected token supply\r\n        require(masterTokenId == expectedTokenSupply);\r\n        // reserve the tokenID for this creator\r\n        creatorWhitelist[masterTokenId] = WhitelistReservation(creator, layerCount);\r\n        // increase the expected token supply\r\n        expectedTokenSupply = masterTokenId.add(layerCount).add(1);\r\n        // define the platform percentages for this token here\r\n        platformFirstSalePercentages[masterTokenId] = platformFirstSalePercentage;\r\n        platformSecondSalePercentages[masterTokenId] = platformSecondSalePercentage;\r\n\r\n        emit CreatorWhitelisted(masterTokenId, layerCount, creator);\r\n    }\r\n\r\n    // Allows the platform to change the minter address\r\n    function updateMinterAddress(address newMinterAddress) external onlyPlatform {\r\n        minterAddress = newMinterAddress;\r\n    }\r\n\r\n    // Allows the current platform address to update to something different\r\n    function updatePlatformAddress(address payable newPlatformAddress) external onlyPlatform {\r\n        platformAddress = newPlatformAddress;\r\n\r\n        emit PlatformAddressUpdated(newPlatformAddress);\r\n    }\r\n\r\n    // Allows platform to waive the first sale requirement for a token (for charity events, special cases, etc)\r\n    function waiveFirstSaleRequirement(uint256[] calldata tokenIds) external onlyPlatform {\r\n        // This allows the token sale proceeds to go to the current owner (rather than be distributed amongst the token's creators)\r\n        for (uint256 k = 0; k < tokenIds.length; k++) {\r\n            tokenDidHaveFirstSale[tokenIds[k]] = true;\r\n        }        \r\n    }\r\n    // Allows platform to change the royalty percentage for a specific token\r\n    function updatePlatformSalePercentage(uint256 tokenId, uint256 platformFirstSalePercentage, \r\n        uint256 platformSecondSalePercentage) external onlyPlatform {\r\n        // set the percentages for this token\r\n        platformFirstSalePercentages[tokenId] = platformFirstSalePercentage;\r\n        platformSecondSalePercentages[tokenId] = platformSecondSalePercentage;\r\n        // emit an event to notify that the platform percent for this token has changed\r\n        emit PlatformSalePercentageUpdated(tokenId, platformFirstSalePercentage, platformSecondSalePercentage);\r\n    }\r\n    // Allows the platform to change the minimum percent increase for incoming bids\r\n    function updateMinimumBidIncreasePercent(uint256 _minBidIncreasePercent) external onlyPlatform {\r\n        require((_minBidIncreasePercent > 0) && (_minBidIncreasePercent <= 50), \"Bid increases must be within 0-50%\");\r\n        // set the new bid increase percent\r\n        minBidIncreasePercent = _minBidIncreasePercent;\r\n    }\r\n    // Allow the platform to update a token's URI if it's not locked yet (for fixing tokens post mint process)\r\n    function updateTokenURI(uint256 tokenId, string calldata tokenURI) external onlyPlatform {\r\n        // ensure that this token exists\r\n        require(_exists(tokenId));\r\n        // ensure that the URI for this token is not locked yet\r\n        require(tokenURILocked[tokenId] == false);\r\n        // update the token URI\r\n        super._setTokenURI(tokenId, tokenURI);\r\n    }\r\n\r\n    // Locks a token's URI from being updated\r\n    function lockTokenURI(uint256 tokenId) external onlyPlatform {\r\n        // ensure that this token exists\r\n        require(_exists(tokenId));\r\n        // lock this token's URI from being changed\r\n        tokenURILocked[tokenId] = true;\r\n    }\r\n\r\n    // Allows platform to change the percentage that artists receive on secondary sales\r\n    function updateArtistSecondSalePercentage(uint256 _artistSecondSalePercentage) external onlyPlatform {\r\n        // update the percentage that artists get on secondary sales\r\n        artistSecondSalePercentage = _artistSecondSalePercentage;\r\n        // emit an event to notify that the artist second sale percent has updated\r\n        emit ArtistSecondSalePercentUpdated(artistSecondSalePercentage);\r\n    }\r\n\r\n    function setupControlToken(uint256 controlTokenId, string calldata controlTokenURI,\r\n        int256[] calldata leverMinValues,\r\n        int256[] calldata leverMaxValues,\r\n        int256[] calldata leverStartValues,\r\n        int256 numAllowedUpdates,\r\n        address payable[] calldata additionalCollaborators\r\n    ) external {\r\n        // Hard cap the number of levers a single control token can have\r\n        require (leverMinValues.length <= 500, \"Too many control levers.\");\r\n        // Hard cap the number of collaborators a single control token can have\r\n        require (additionalCollaborators.length <= 50, \"Too many collaborators.\");\r\n        // check that a control token exists for this token id\r\n        require(controlTokenMapping[controlTokenId].exists, \"No control token found\");\r\n        // ensure that this token is not setup yet\r\n        require(controlTokenMapping[controlTokenId].isSetup == false, \"Already setup\");\r\n        // ensure that only the control token artist is attempting this mint\r\n        require(uniqueTokenCreators[controlTokenId][0] == msg.sender, \"Must be control token artist\");\r\n        // enforce that the length of all the array lengths are equal\r\n        require((leverMinValues.length == leverMaxValues.length) && (leverMaxValues.length == leverStartValues.length), \"Values array mismatch\");\r\n        // require the number of allowed updates to be infinite (-1) or some finite number\r\n        require((numAllowedUpdates == -1) || (numAllowedUpdates > 0), \"Invalid allowed updates\");\r\n        // mint the control token here\r\n        super._safeMint(msg.sender, controlTokenId);\r\n        // set token URI\r\n        super._setTokenURI(controlTokenId, controlTokenURI);        \r\n        // create the control token\r\n        controlTokenMapping[controlTokenId] = ControlToken(leverStartValues.length, numAllowedUpdates, true, true);\r\n        // create the control token levers now\r\n        for (uint256 k = 0; k < leverStartValues.length; k++) {\r\n            // enforce that maxValue is greater than or equal to minValue\r\n            require(leverMaxValues[k] >= leverMinValues[k], \"Max val must >= min\");\r\n            // enforce that currentValue is valid\r\n            require((leverStartValues[k] >= leverMinValues[k]) && (leverStartValues[k] <= leverMaxValues[k]), \"Invalid start val\");\r\n            // add the lever to this token\r\n            controlTokenMapping[controlTokenId].levers[k] = ControlLever(leverMinValues[k],\r\n                leverMaxValues[k], leverStartValues[k], true);\r\n        }\r\n        // the control token artist can optionally specify additional collaborators on this layer\r\n        for (uint256 i = 0; i < additionalCollaborators.length; i++) {\r\n            // can't provide burn address as collaborator\r\n            require(additionalCollaborators[i] != address(0));\r\n\r\n            uniqueTokenCreators[controlTokenId].push(additionalCollaborators[i]);\r\n        }\r\n    }\r\n\r\n    // upgrade a token from the v1 contract to this v2 version\r\n    function upgradeV1Token(uint256 tokenId, address v1Address, bool isControlToken, address to, \r\n        uint256 platformFirstPercentageForToken, uint256 platformSecondPercentageForToken, bool hasTokenHadFirstSale,\r\n        address payable[] calldata uniqueTokenCreatorsForToken) external {\r\n        // get reference to v1 token contract\r\n        AsyncArtwork_v1 v1Token = AsyncArtwork_v1(v1Address);\r\n\r\n        // require that only the upgrader address is calling this method\r\n        require(msg.sender == upgraderAddress, \"Only upgrader can call.\");\r\n\r\n        // preserve the unique token creators\r\n        uniqueTokenCreators[tokenId] = uniqueTokenCreatorsForToken;\r\n\r\n        if (isControlToken) {\r\n            // preserve the control token details if it's a control token\r\n            int256[] memory controlToken = v1Token.getControlToken(tokenId);\r\n            // Require control token to be a valid size (multiple of 3)\r\n            require(controlToken.length % 3 == 0, \"Invalid control token.\");\r\n            // Require control token to have at least 1 lever\r\n            require(controlToken.length > 0, \"Control token must have levers\");            \r\n            // Setup the control token\r\n            // Use -1 for numRemainingUpdates since v1 tokens were infinite use\r\n            controlTokenMapping[tokenId] = ControlToken(controlToken.length / 3, -1, true, true);\r\n\r\n            // set each lever for the control token. getControlToken returns levers like:\r\n            // [minValue, maxValue, curValue, minValue, maxValue, curValue, ...] so they always come in groups of 3\r\n            for (uint256 k = 0; k < controlToken.length; k+=3) {\r\n                controlTokenMapping[tokenId].levers[k / 3] = ControlLever(controlToken[k],\r\n                    controlToken[k + 1], controlToken[k + 2], true);\r\n            }\r\n        }\r\n\r\n        // Set the royalty percentage for this token\r\n        platformFirstSalePercentages[tokenId] = platformFirstPercentageForToken;\r\n\r\n        platformSecondSalePercentages[tokenId] = platformSecondPercentageForToken;\r\n\r\n        // whether this token has already had its first sale\r\n        tokenDidHaveFirstSale[tokenId] = hasTokenHadFirstSale;\r\n\r\n        // Mint and transfer the token to the original v1 token owner\r\n        super._safeMint(to, tokenId);\r\n\r\n        // set the same token URI\r\n        super._setTokenURI(tokenId, v1Token.tokenURI(tokenId));\r\n    }\r\n\r\n    function mintArtwork(uint256 masterTokenId, string calldata artworkTokenURI, address payable[] calldata controlTokenArtists)\r\n        external onlyWhitelistedCreator(masterTokenId, controlTokenArtists.length) {\r\n        // Can't mint a token with ID 0 anymore\r\n        require(masterTokenId > 0);\r\n        // Mint the token that represents ownership of the entire artwork    \r\n        super._safeMint(msg.sender, masterTokenId);\r\n        // set the token URI for this art\r\n        super._setTokenURI(masterTokenId, artworkTokenURI);\r\n        // track the msg.sender address as the artist address for future royalties\r\n        uniqueTokenCreators[masterTokenId].push(msg.sender);\r\n        // iterate through all control token URIs (1 for each control token)\r\n        for (uint256 i = 0; i < controlTokenArtists.length; i++) {\r\n            // can't provide burn address as artist\r\n            require(controlTokenArtists[i] != address(0));\r\n            // determine the tokenID for this control token\r\n            uint256 controlTokenId = masterTokenId + i + 1;\r\n            // add this control token artist to the unique creator list for that control token\r\n            uniqueTokenCreators[controlTokenId].push(controlTokenArtists[i]);\r\n            // stub in an existing control token so exists is true\r\n            controlTokenMapping[controlTokenId] = ControlToken(0, 0, true, false);\r\n\r\n            // Layer control tokens use the same royalty percentage as the master token\r\n            platformFirstSalePercentages[controlTokenId] = platformFirstSalePercentages[masterTokenId];\r\n\r\n            platformSecondSalePercentages[controlTokenId] = platformSecondSalePercentages[masterTokenId];\r\n\r\n            if (controlTokenArtists[i] != msg.sender) {\r\n                bool containsControlTokenArtist = false;\r\n\r\n                for (uint256 k = 0; k < uniqueTokenCreators[masterTokenId].length; k++) {\r\n                    if (uniqueTokenCreators[masterTokenId][k] == controlTokenArtists[i]) {\r\n                        containsControlTokenArtist = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (containsControlTokenArtist == false) {\r\n                    uniqueTokenCreators[masterTokenId].push(controlTokenArtists[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Bidder functions\r\n    function bid(uint256 tokenId) external payable {\r\n        // don't allow bids of 0\r\n        require(msg.value > 0);\r\n        // don't let owners/approved bid on their own tokens\r\n        require(_isApprovedOrOwner(msg.sender, tokenId) == false);\r\n        // check if there's a high bid\r\n        if (pendingBids[tokenId].exists) {\r\n            // enforce that this bid is higher by at least the minimum required percent increase\r\n            require(msg.value >= (pendingBids[tokenId].amount.mul(minBidIncreasePercent.add(100)).div(100)), \"Bid must increase by min %\");\r\n            // Return bid amount back to bidder\r\n            safeFundsTransfer(pendingBids[tokenId].bidder, pendingBids[tokenId].amount);\r\n        }\r\n        // set the new highest bid\r\n        pendingBids[tokenId] = PendingBid(msg.sender, msg.value, true);\r\n        // Emit event for the bid proposal\r\n        emit BidProposed(tokenId, msg.value, msg.sender);\r\n    }\r\n    // allows an address with a pending bid to withdraw it\r\n    function withdrawBid(uint256 tokenId) external {\r\n        // check that there is a bid from the sender to withdraw (also allows platform address to withdraw a bid on someone's behalf)\r\n        require((pendingBids[tokenId].bidder == msg.sender) || (msg.sender == platformAddress));\r\n        // attempt to withdraw the bid\r\n        _withdrawBid(tokenId);        \r\n    }\r\n    function _withdrawBid(uint256 tokenId) internal {\r\n        require(pendingBids[tokenId].exists);\r\n        // Return bid amount back to bidder\r\n        safeFundsTransfer(pendingBids[tokenId].bidder, pendingBids[tokenId].amount);\r\n        // clear highest bid\r\n        pendingBids[tokenId] = PendingBid(address(0), 0, false);\r\n        // emit an event when the highest bid is withdrawn\r\n        emit BidWithdrawn(tokenId);\r\n    }\r\n\r\n    // Buy the artwork for the currently set price\r\n    // Allows the buyer to specify an expected remaining uses they'll accept\r\n    function takeBuyPrice(uint256 tokenId, int256 expectedRemainingUpdates) external payable {\r\n        // don't let owners/approved buy their own tokens\r\n        require(_isApprovedOrOwner(msg.sender, tokenId) == false);\r\n        // get the sale amount\r\n        uint256 saleAmount = buyPrices[tokenId];\r\n        // check that there is a buy price\r\n        require(saleAmount > 0);\r\n        // check that the buyer sent exact amount to purchase\r\n        require(msg.value == saleAmount);\r\n        // if this is a control token\r\n        if (controlTokenMapping[tokenId].exists) {\r\n            // ensure that the remaining uses on the token is equal to what buyer expects\r\n            require(controlTokenMapping[tokenId].numRemainingUpdates == expectedRemainingUpdates);\r\n        }\r\n        // Return all highest bidder's money\r\n        if (pendingBids[tokenId].exists) {\r\n            // Return bid amount back to bidder\r\n            safeFundsTransfer(pendingBids[tokenId].bidder, pendingBids[tokenId].amount);\r\n            // clear highest bid\r\n            pendingBids[tokenId] = PendingBid(address(0), 0, false);\r\n        }\r\n        onTokenSold(tokenId, saleAmount, msg.sender);\r\n    }\r\n\r\n    // Take an amount and distribute it evenly amongst a list of creator addresses\r\n    function distributeFundsToCreators(uint256 amount, address payable[] memory creators) private {\r\n        if (creators.length > 0) {\r\n            uint256 creatorShare = amount.div(creators.length);\r\n\r\n            for (uint256 i = 0; i < creators.length; i++) {\r\n                safeFundsTransfer(creators[i], creatorShare);\r\n            }\r\n        }\r\n    }\r\n\r\n    // When a token is sold via list price or bid. Distributes the sale amount to the unique token creators and transfer\r\n    // the token to the new owner\r\n    function onTokenSold(uint256 tokenId, uint256 saleAmount, address to) private {\r\n        // if the first sale already happened, then give the artist + platform the secondary royalty percentage\r\n        if (tokenDidHaveFirstSale[tokenId]) {\r\n            // give platform its secondary sale percentage\r\n            uint256 platformAmount = saleAmount.mul(platformSecondSalePercentages[tokenId]).div(100);\r\n            safeFundsTransfer(platformAddress, platformAmount);\r\n            // distribute the creator royalty amongst the creators (all artists involved for a base token, sole artist creator for layer )\r\n            uint256 creatorAmount = saleAmount.mul(artistSecondSalePercentage).div(100);\r\n            distributeFundsToCreators(creatorAmount, uniqueTokenCreators[tokenId]);\r\n            // cast the owner to a payable address\r\n            address payable payableOwner = address(uint160(ownerOf(tokenId)));\r\n            // transfer the remaining amount to the owner of the token\r\n            safeFundsTransfer(payableOwner, saleAmount.sub(platformAmount).sub(creatorAmount));\r\n        } else {\r\n            tokenDidHaveFirstSale[tokenId] = true;\r\n            // give platform its first sale percentage\r\n            uint256 platformAmount = saleAmount.mul(platformFirstSalePercentages[tokenId]).div(100);\r\n            safeFundsTransfer(platformAddress, platformAmount);\r\n            // this is a token first sale, so distribute the remaining funds to the unique token creators of this token\r\n            // (if it's a base token it will be all the unique creators, if it's a control token it will be that single artist)                      \r\n            distributeFundsToCreators(saleAmount.sub(platformAmount), uniqueTokenCreators[tokenId]);\r\n        }\r\n        // clear highest bid\r\n        pendingBids[tokenId] = PendingBid(address(0), 0, false);\r\n        // Transfer token to msg.sender\r\n        _transferFrom(ownerOf(tokenId), to, tokenId);\r\n        // Emit event\r\n        emit TokenSale(tokenId, saleAmount, to);\r\n    }\r\n\r\n    // Owner functions\r\n    // Allow owner to accept the highest bid for a token\r\n    function acceptBid(uint256 tokenId, uint256 minAcceptedAmount) external {\r\n        // check if sender is owner/approved of token        \r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        // check if there's a bid to accept\r\n        require(pendingBids[tokenId].exists);\r\n        // check that the current pending bid amount is at least what the accepting owner expects\r\n        require(pendingBids[tokenId].amount >= minAcceptedAmount);\r\n        // process the sale\r\n        onTokenSold(tokenId, pendingBids[tokenId].amount, pendingBids[tokenId].bidder);\r\n    }\r\n\r\n    // Allows owner of a control token to set an immediate buy price. Set to 0 to reset.\r\n    function makeBuyPrice(uint256 tokenId, uint256 amount) external {\r\n        // check if sender is owner/approved of token        \r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        // set the buy price\r\n        buyPrices[tokenId] = amount;\r\n        // emit event\r\n        emit BuyPriceSet(tokenId, amount);\r\n    }\r\n\r\n    // return the number of times that a control token can be used\r\n    function getNumRemainingControlUpdates(uint256 controlTokenId) external view returns (int256) {\r\n        require(controlTokenMapping[controlTokenId].exists, \"Token does not exist.\");\r\n\r\n        return controlTokenMapping[controlTokenId].numRemainingUpdates;\r\n    }\r\n\r\n    // return the min, max, and current value of a control lever\r\n    function getControlToken(uint256 controlTokenId) external view returns(int256[] memory) {\r\n        require(controlTokenMapping[controlTokenId].exists, \"Token does not exist.\");\r\n\r\n        ControlToken storage controlToken = controlTokenMapping[controlTokenId];\r\n\r\n        int256[] memory returnValues = new int256[](controlToken.numControlLevers.mul(3));\r\n        uint256 returnValIndex = 0;\r\n\r\n        // iterate through all the control levers for this control token\r\n        for (uint256 i = 0; i < controlToken.numControlLevers; i++) {\r\n            returnValues[returnValIndex] = controlToken.levers[i].minValue;\r\n            returnValIndex = returnValIndex.add(1);\r\n\r\n            returnValues[returnValIndex] = controlToken.levers[i].maxValue;\r\n            returnValIndex = returnValIndex.add(1);\r\n\r\n            returnValues[returnValIndex] = controlToken.levers[i].currentValue;\r\n            returnValIndex = returnValIndex.add(1);\r\n        }\r\n\r\n        return returnValues;\r\n    }\r\n\r\n    // anyone can grant permission to another address to control a specific token on their behalf. Set to Address(0) to reset.\r\n    function grantControlPermission(uint256 tokenId, address permissioned) external {\r\n        permissionedControllers[msg.sender][tokenId] = permissioned;\r\n\r\n        emit PermissionUpdated(tokenId, msg.sender, permissioned);\r\n    }\r\n\r\n    // Allows owner (or permissioned user) of a control token to update its lever values\r\n    // Optionally accept a payment to increase speed of rendering priority\r\n    function useControlToken(uint256 controlTokenId, uint256[] calldata leverIds, int256[] calldata newValues) external payable {\r\n        // check if sender is owner/approved of token OR if they're a permissioned controller for the token owner      \r\n        require(_isApprovedOrOwner(msg.sender, controlTokenId) || (permissionedControllers[ownerOf(controlTokenId)][controlTokenId] == msg.sender),\r\n            \"Owner or permissioned only\");\r\n        // check if control exists\r\n        require(controlTokenMapping[controlTokenId].exists, \"Token does not exist.\");\r\n        // get the control token reference\r\n        ControlToken storage controlToken = controlTokenMapping[controlTokenId];\r\n        // check that number of uses for control token is either infinite or is positive\r\n        require((controlToken.numRemainingUpdates == -1) || (controlToken.numRemainingUpdates > 0), \"No more updates allowed\");        \r\n        // collect the previous lever values for the event emit below\r\n        int256[] memory previousValues = new int256[](newValues.length);\r\n\r\n        for (uint256 i = 0; i < leverIds.length; i++) {\r\n            // get the control lever\r\n            ControlLever storage lever = controlTokenMapping[controlTokenId].levers[leverIds[i]];\r\n\r\n            // Enforce that the new value is valid        \r\n            require((newValues[i] >= lever.minValue) && (newValues[i] <= lever.maxValue), \"Invalid val\");\r\n\r\n            // Enforce that the new value is different\r\n            require(newValues[i] != lever.currentValue, \"Must provide different val\");\r\n\r\n            // grab previous value for the event emit\r\n            previousValues[i] = lever.currentValue;\r\n\r\n            // Update token current value\r\n            lever.currentValue = newValues[i];    \r\n        }\r\n\r\n        // if there's a payment then send it to the platform (for higher priority updates)\r\n        if (msg.value > 0) {\r\n            safeFundsTransfer(platformAddress, msg.value);\r\n        }\r\n\r\n        // if this control token is finite in its uses\r\n        if (controlToken.numRemainingUpdates > 0) {\r\n            // decrease it down by 1\r\n            controlToken.numRemainingUpdates = controlToken.numRemainingUpdates - 1;\r\n\r\n            // since we used one of those updates, withdraw any existing bid for this token if exists\r\n            if (pendingBids[controlTokenId].exists) {\r\n                _withdrawBid(controlTokenId);\r\n            }\r\n        }\r\n\r\n        // emit event\r\n        emit ControlLeverUpdated(controlTokenId, msg.value, controlToken.numRemainingUpdates, leverIds, previousValues, newValues);\r\n    }\r\n\r\n    // Allows a user to withdraw all failed transaction credits\r\n    function withdrawAllFailedCredits() external {\r\n        uint256 amount = failedTransferCredits[msg.sender];\r\n\r\n        require(amount != 0);\r\n        require(address(this).balance >= amount);\r\n\r\n        failedTransferCredits[msg.sender] = 0;\r\n\r\n        (bool successfulWithdraw, ) = msg.sender.call.value(amount)(\"\");\r\n        require(successfulWithdraw);\r\n    }\r\n\r\n    // Safely transfer funds and if fail then store that amount as credits for a later pull\r\n    function safeFundsTransfer(address payable recipient, uint256 amount) internal {\r\n        // attempt to send the funds to the recipient\r\n        (bool success, ) = recipient.call.value(amount).gas(2300)(\"\");\r\n        // if it failed, update their credit balance so they can pull it later\r\n        if (success == false) {\r\n            failedTransferCredits[recipient] = failedTransferCredits[recipient].add(amount);\r\n        }\r\n    }\r\n\r\n    // override the default transfer\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        // clear a buy now price\r\n        buyPrices[tokenId] = 0;\r\n        // transfer the token\r\n        super._transferFrom(from, to, tokenId);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artistSecondPercentage\",\"type\":\"uint256\"}],\"name\":\"ArtistSecondSalePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorityTip\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"numRemainingUpdates\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"leverIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"previousValues\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"updatedValues\",\"type\":\"int256[]\"}],\"name\":\"ControlLeverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"layerCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"permissioned\",\"type\":\"address\"}],\"name\":\"PermissionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"}],\"name\":\"PlatformAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFirstPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformSecondPercentage\",\"type\":\"uint256\"}],\"name\":\"PlatformSalePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TokenSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAcceptedAmount\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artistSecondSalePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"controlTokenMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numControlLevers\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"numRemainingUpdates\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSetup\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expectedTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"failedTransferCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controlTokenId\",\"type\":\"uint256\"}],\"name\":\"getControlToken\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controlTokenId\",\"type\":\"uint256\"}],\"name\":\"getNumRemainingControlUpdates\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"permissioned\",\"type\":\"address\"}],\"name\":\"grantControlPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialExpectedTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_upgraderAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"makeBuyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBidIncreasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"masterTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"artworkTokenURI\",\"type\":\"string\"},{\"internalType\":\"address payable[]\",\"name\":\"controlTokenArtists\",\"type\":\"address[]\"}],\"name\":\"mintArtwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionedControllers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformFirstSalePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"platformSecondSalePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExpectedTokenSupply\",\"type\":\"uint256\"}],\"name\":\"setExpectedTokenSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controlTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"controlTokenURI\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"leverMinValues\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"leverMaxValues\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"leverStartValues\",\"type\":\"int256[]\"},{\"internalType\":\"int256\",\"name\":\"numAllowedUpdates\",\"type\":\"int256\"},{\"internalType\":\"address payable[]\",\"name\":\"additionalCollaborators\",\"type\":\"address[]\"}],\"name\":\"setupControlToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"expectedRemainingUpdates\",\"type\":\"int256\"}],\"name\":\"takeBuyPrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDidHaveFirstSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURILocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueTokenCreators\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artistSecondSalePercentage\",\"type\":\"uint256\"}],\"name\":\"updateArtistSecondSalePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncreasePercent\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBidIncreasePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinterAddress\",\"type\":\"address\"}],\"name\":\"updateMinterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPlatformAddress\",\"type\":\"address\"}],\"name\":\"updatePlatformAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFirstSalePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformSecondSalePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlatformSalePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"v1Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isControlToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFirstPercentageForToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformSecondPercentageForToken\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasTokenHadFirstSale\",\"type\":\"bool\"},{\"internalType\":\"address payable[]\",\"name\":\"uniqueTokenCreatorsForToken\",\"type\":\"address[]\"}],\"name\":\"upgradeV1Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgraderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controlTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"leverIds\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"newValues\",\"type\":\"int256[]\"}],\"name\":\"useControlToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"waiveFirstSaleRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"layerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFirstSalePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformSecondSalePercentage\",\"type\":\"uint256\"}],\"name\":\"whitelistTokenForCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllFailedCredits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AsyncArtwork_v2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"petersburg","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://fdcc5146f7a0f333925d920b88505592574f557197d16e8e1165e3c0f4d8369b"}]}