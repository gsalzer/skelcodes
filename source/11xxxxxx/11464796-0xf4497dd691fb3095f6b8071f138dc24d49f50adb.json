{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-only\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/GVoting.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev An interface to extend gTokens with voting delegation capabilities.\r\n *      See GTokenType3.sol for further documentation.\r\n */\r\ninterface GVoting\r\n{\r\n\t// view functions\r\n\tfunction votes(address _candidate) external view returns (uint256 _votes);\r\n\tfunction candidate(address _voter) external view returns (address _candidate);\r\n\r\n\t// open functions\r\n\tfunction setCandidate(address _newCandidate) external;\r\n\r\n\t// emitted events\r\n\tevent ChangeCandidate(address indexed _voter, address indexed _oldCandidate, address indexed _newCandidate);\r\n\tevent ChangeVotes(address indexed _candidate, uint256 _oldVotes, uint256 _newVotes);\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/Gnosis.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface Enum\r\n{\r\n\tenum Operation { Call, DelegateCall }\r\n}\r\n\r\ninterface OwnerManager\r\n{\r\n\tfunction getOwners() external view returns (address[] memory _owners);\r\n\tfunction isOwner(address _owner) external view returns (bool _isOwner);\r\n}\r\n\r\ninterface ModuleManager\r\n{\r\n\tfunction execTransactionFromModule(address _to, uint256 _value, bytes calldata _data, Enum.Operation _operation) external returns (bool _success);\r\n}\r\n\r\ninterface Safe is OwnerManager, ModuleManager\r\n{\r\n}\r\n\r\n// File: contracts/GDAOModule.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GDAOModule is ReentrancyGuard\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\tstring public constant NAME = \"GrowthDeFi DAO Module\";\r\n\tstring public constant VERSION = \"0.0.1\";\r\n\r\n\tuint256 constant VOTING_ROUND_INTERVAL = 1 days;\r\n\r\n\tuint256 constant SIGNING_OWNERS = 7;\r\n\tuint256 constant SIGNING_THRESHOLD = 4;\r\n\r\n\taddress public immutable safe;\r\n\taddress public immutable votingToken;\r\n\r\n\tbool private synced = false;\r\n\tuint256 private votingRound = 0;\r\n\tEnumerableSet.AddressSet private candidates;\r\n\r\n\tconstructor (address _safe, address _votingToken) public\r\n\t{\r\n\t\tsafe = _safe;\r\n\t\tvotingToken = _votingToken;\r\n\r\n\t\taddress[] memory _owners = Safe(_safe).getOwners();\r\n\t\tuint256 _ownersCount = _owners.length;\r\n\t\tfor (uint256 _index = 0; _index < _ownersCount; _index++) {\r\n\t\t\taddress _owner = _owners[_index];\r\n\t\t\tbool _success = candidates.add(_owner);\r\n\t\t\tassert(_success);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction currentVotingRound() public view returns (uint256 _votingRound)\r\n\t{\r\n\t\treturn block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t}\r\n\r\n\tfunction timeToNextVotingRound() public view returns (uint256 _timeToNextVotingRound)\r\n\t{\r\n\t\treturn block.timestamp.div(VOTING_ROUND_INTERVAL).add(1).mul(VOTING_ROUND_INTERVAL);\r\n\t}\r\n\r\n\tfunction hasPendingTurnOver() internal view returns (bool _hasPendingTurnOver)\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\treturn _votingRound > votingRound && !synced;\r\n\t}\r\n\r\n\tfunction candidateCount() public view returns (uint256 _count)\r\n\t{\r\n\t\treturn candidates.length();\r\n\t}\r\n\r\n\tfunction candidateAt(uint256 _index) public view returns (address _candidate)\r\n\t{\r\n\t\treturn candidates.at(_index);\r\n\t}\r\n\r\n\tfunction appointCandidate() public nonReentrant\r\n\t{\r\n\t\taddress _candidate = msg.sender;\r\n\t\t_closeRound();\r\n\t\trequire(!candidates.contains(_candidate), \"candidate already eligible\");\r\n\t\trequire(_appointCandidate(_candidate), \"candidate not eligible\");\r\n\t}\r\n\r\n\tfunction turnOver() public nonReentrant\r\n\t{\r\n\t\trequire(_closeRound(), \"must wait next interval\");\r\n\t}\r\n\r\n\tfunction _findLeastVoted() internal view returns (address _leastVoted, uint256 _leastVotes)\r\n\t{\r\n\t\t_leastVoted = address(0);\r\n\t\t_leastVotes = uint256(-1);\r\n\t\tuint256 _candidateCount = candidates.length();\r\n\t\tfor (uint256 _index = 0; _index < _candidateCount; _index++) {\r\n\t\t\taddress _candidate = candidates.at(_index);\r\n\t\t\tuint256 _votes = GVoting(votingToken).votes(_candidate);\r\n\t\t\tif (_votes < _leastVotes) {\r\n\t\t\t\t_leastVoted = _candidate;\r\n\t\t\t\t_leastVotes = _votes;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (_leastVoted, _leastVotes);\r\n\t}\r\n\r\n\tfunction _closeRound() internal returns (bool _success)\r\n\t{\r\n\t\tuint256 _votingRound = block.timestamp.div(VOTING_ROUND_INTERVAL);\r\n\t\tif (_votingRound > votingRound) {\r\n\t\t\tvotingRound = _votingRound;\r\n\t\t\t_turnOver();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction _appointCandidate(address _candidate) internal returns(bool _success)\r\n\t{\r\n\t\tuint256 _candidateCount = candidates.length();\r\n\t\tif (_candidateCount == SIGNING_OWNERS) {\r\n\t\t\tuint256 _votes = GVoting(votingToken).votes(_candidate);\r\n\t\t\t(address _leastVoted, uint256 _leastVotes) = _findLeastVoted();\r\n\t\t\tif (_leastVotes >= _votes) return false;\r\n\t\t\tcandidates.remove(_leastVoted);\r\n\t\t}\r\n\t\tcandidates.add(_candidate);\r\n\t\tsynced = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _turnOver() internal\r\n\t{\r\n\t\tif (synced) return;\r\n\t\tuint256 _candidateCount = candidates.length();\r\n\t\tfor (uint256 _index = 0; _index < _candidateCount; _index++) {\r\n\t\t\taddress _candidate = candidates.at(_index);\r\n\t\t\tif (Safe(safe).isOwner(_candidate)) continue;\r\n\t\t\tbool _success = _addOwnerWithThreshold(_candidate, 1);\r\n\t\t\tassert(_success);\r\n\t\t}\r\n\t\taddress[] memory _owners = Safe(safe).getOwners();\r\n\t\tuint256 _ownersCount = _owners.length;\r\n\t\tfor (uint256 _index = 0; _index < _ownersCount; _index++) {\r\n\t\t\taddress _owner = _owners[_index];\r\n\t\t\tif (candidates.contains(_owner)) continue;\r\n\t\t\taddress _prevOwner = _index == 0 ? address(0x1) : _owners[_index - 1];\r\n\t\t\tbool _success = _removeOwner(_prevOwner, _owner, 1);\r\n\t\t\tassert(_success);\r\n\t\t}\r\n\t\tuint256 _threshold = Math._min(_candidateCount, SIGNING_THRESHOLD);\r\n\t\tbool _success = _changeThreshold(_threshold);\r\n\t\tassert(_success);\r\n\t\tsynced = true;\r\n\t}\r\n\r\n\tfunction _addOwnerWithThreshold(address _owner, uint256 _threshold) internal returns (bool _success)\r\n\t{\r\n\t\tbytes memory _data = abi.encodeWithSignature(\"addOwnerWithThreshold(address,uint256)\", _owner, _threshold);\r\n\t\treturn Safe(safe).execTransactionFromModule(safe, 0, _data, Enum.Operation.Call);\r\n\t}\r\n\r\n\tfunction _removeOwner(address _prevOwner, address _owner, uint256 _threshold) internal returns (bool _success)\r\n\t{\r\n\t\tbytes memory _data = abi.encodeWithSignature(\"removeOwner(address,address,uint256)\", _prevOwner, _owner, _threshold);\r\n\t\treturn Safe(safe).execTransactionFromModule(safe, 0, _data, Enum.Operation.Call);\r\n\t}\r\n\r\n\tfunction _changeThreshold(uint256 _threshold) internal returns (bool _success)\r\n\t{\r\n\t\tbytes memory _data = abi.encodeWithSignature(\"changeThreshold(uint256)\", _threshold);\r\n\t\treturn Safe(safe).execTransactionFromModule(safe, 0, _data, Enum.Operation.Call);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appointCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"candidateAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVotingRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToNextVotingRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeToNextVotingRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GDAOModule","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003e7ff81efbbadf5fca2810086b7f4c17a4f3682f000000000000000000000000d93f98b483cc2f9efe512696df8f5decb73f9497","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6a348bd0cdb07ae1e0d4d5dee81d6c07b5b2a13eda02b1b2fa79dadf526a5440"}]}