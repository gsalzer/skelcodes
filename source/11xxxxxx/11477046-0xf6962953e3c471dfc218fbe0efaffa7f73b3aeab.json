{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n*/\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint a, uint m) internal pure returns (uint r) {\r\n    return (a + m - 1) / m * m;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ninterface IToken {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract BKP_Sales is Owned {\r\n    \r\n    using SafeMath for uint256;\r\n    address public tokenAddress = 0xe1B3ecdf26aF3C631715b6a49A74470e306D455b;\r\n    uint256 unLockingDate = 1609531200; // 1 january 2021, 8pm UTC\r\n    \r\n    struct Users{\r\n        uint256 unClaimed;\r\n        uint256 invested;\r\n    }\r\n    mapping(address => Users) public usersTokens;\r\n    \r\n    uint256 tokenRatePerEth = 252;\r\n    uint256 maxTokensForSale = 240000 * 10 ** 18;\r\n    uint256 soldTokens = 0;\r\n    uint256 maxInvestment = 25 ether;\r\n    uint256 minInvestment = 0.5 ether;\r\n    uint256 startDate = 1608750000; // 23 december 2020, 7pm UTC\r\n    uint256 endDate = 1609441200; // 31 december 2020, 7pm UTC\r\n    \r\n    modifier unLockingOpen{\r\n        require(block.timestamp >= unLockingDate, \"unlocking will start by 1 january 8pm UTC\");\r\n        _;\r\n    }\r\n    \r\n    modifier saleOpen{\r\n        require(block.timestamp >= startDate && block.timestamp <= endDate, \"sale is closed\");\r\n        _;\r\n    }\r\n    \r\n    event CLAIMED(uint256 amount);\r\n    \r\n    constructor() public {\r\n        owner = 0xAfDE309b21922dc45f20aDFb659eF36ac984A454; \r\n    }\r\n    \r\n    receive() external payable saleOpen{\r\n        \r\n        usersTokens[msg.sender].invested = usersTokens[msg.sender].invested.add(msg.value);\r\n        \r\n        // presale\r\n        require(usersTokens[msg.sender].invested <= maxInvestment, \"Exceeds allowed max Investment\");\r\n        require(usersTokens[msg.sender].invested >= minInvestment, \"Lesser than allowed min Investment\");\r\n        \r\n        uint256 tokens = (msg.value.mul(tokenRatePerEth));\r\n        \r\n        // allocate tokens to the user\r\n        usersTokens[msg.sender].unClaimed = usersTokens[msg.sender].unClaimed.add(tokens);\r\n        \r\n        soldTokens = soldTokens.add(tokens);\r\n        \r\n        require(soldTokens <= maxTokensForSale, \"Insufficient tokens for sale\");\r\n        \r\n        // send received funds to the owner\r\n        owner.transfer(msg.value);\r\n    }\r\n    \r\n    function claimTokens() external unLockingOpen{\r\n        require(usersTokens[msg.sender].unClaimed > 0, \"nothing pending to claim\");\r\n        // the private sale purchasers will claim their tokens using this function\r\n        require(IToken(tokenAddress).transfer(msg.sender, usersTokens[msg.sender].unClaimed), \"Insufficient balance of sale contract!\");\r\n        \r\n        emit CLAIMED(usersTokens[msg.sender].unClaimed);\r\n        \r\n        usersTokens[msg.sender].unClaimed = 0;\r\n    }\r\n    \r\n    function getUnSoldTokens() external onlyOwner{\r\n        uint256 tokens = IToken(tokenAddress).balanceOf(address(this));\r\n        require(IToken(tokenAddress).transfer(owner, tokens), \"No tokens in contract\");\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CLAIMED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnSoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BKP_Sales","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b3ffb0084b7c3a1106fbb73840c0086363dfed7d59a24f1c951d08fce02d971"}]}