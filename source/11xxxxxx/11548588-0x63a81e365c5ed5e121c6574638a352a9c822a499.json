{"status":"1","message":"OK","result":[{"SourceCode":"{\"oraclizeAPI_0.5.sol\":{\"content\":\"// \\u003cORACLIZE_API\\u003e\\n/*\\nCopyright (c) 2015-2016 Oraclize SRL\\nCopyright (c) 2016 Oraclize LTD\\n\\n\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\n\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\n\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n*/\\n\\n// This api is currently targeted at 0.4.18, please import oraclizeAPI_pre0.4.sol or oraclizeAPI_0.4 where necessary\\npragma solidity ^0.4.18;\\n\\ncontract OraclizeI {\\n    address public cbAddress;\\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\\n    function getPrice(string _datasource) public returns (uint _dsprice);\\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\\n    function setProofType(byte _proofType) external;\\n    function setCustomGasPrice(uint _gasPrice) external;\\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\\n}\\ncontract OraclizeAddrResolverI {\\n    function getAddress() public returns (address _addr);\\n}\\ncontract usingOraclize {\\n    uint constant day = 60*60*24;\\n    uint constant week = 60*60*24*7;\\n    uint constant month = 60*60*24*30;\\n    byte constant proofType_NONE = 0x00;\\n    byte constant proofType_TLSNotary = 0x10;\\n    byte constant proofType_Android = 0x20;\\n    byte constant proofType_Ledger = 0x30;\\n    byte constant proofType_Native = 0xF0;\\n    byte constant proofStorage_IPFS = 0x01;\\n    uint8 constant networkID_auto = 0;\\n    uint8 constant networkID_mainnet = 1;\\n    uint8 constant networkID_testnet = 2;\\n    uint8 constant networkID_morden = 2;\\n    uint8 constant networkID_consensys = 161;\\n\\n    OraclizeAddrResolverI OAR;\\n\\n    OraclizeI oraclize;\\n    modifier oraclizeAPI {\\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\\n            oraclize_setNetwork(networkID_auto);\\n\\n        if(address(oraclize) != OAR.getAddress())\\n            oraclize = OraclizeI(OAR.getAddress());\\n\\n        _;\\n    }\\n    modifier coupon(string code){\\n        oraclize = OraclizeI(OAR.getAddress());\\n        _;\\n    }\\n\\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\\n      return oraclize_setNetwork();\\n      networkID; // silence the warning and remain backwards compatible\\n    }\\n    function oraclize_setNetwork() internal returns(bool){\\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)\\u003e0){ //mainnet\\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\\n            oraclize_setNetworkName(\\\"eth_mainnet\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)\\u003e0){ //ropsten testnet\\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\\n            oraclize_setNetworkName(\\\"eth_ropsten3\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)\\u003e0){ //kovan testnet\\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\\n            oraclize_setNetworkName(\\\"eth_kovan\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)\\u003e0){ //rinkeby testnet\\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\\n            oraclize_setNetworkName(\\\"eth_rinkeby\\\");\\n            return true;\\n        }\\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)\\u003e0){ //ethereum-bridge\\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\\n            return true;\\n        }\\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)\\u003e0){ //ether.camp ide\\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\\n            return true;\\n        }\\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)\\u003e0){ //browser-solidity\\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function __callback(bytes32 myid, string result) public {\\n        __callback(myid, result, new bytes(0));\\n    }\\n    function __callback(bytes32 myid, string result, bytes proof) public {\\n      return;\\n      myid; result; proof; // Silence compiler warnings\\n    }\\n\\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\\n        return oraclize.getPrice(datasource);\\n    }\\n\\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\\n        return oraclize.getPrice(datasource, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query.value(price)(0, datasource, arg);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query.value(price)(timestamp, datasource, arg);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN.value(price)(0, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = stra2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        string[] memory dynargs = new string[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN.value(price)(0, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource);\\n        if (price \\u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\\n        uint price = oraclize.getPrice(datasource, gaslimit);\\n        if (price \\u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\\n        bytes memory args = ba2cbor(argN);\\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](1);\\n        dynargs[0] = args[0];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](2);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](3);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](4);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs);\\n    }\\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\\n    }\\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\\n        bytes[] memory dynargs = new bytes[](5);\\n        dynargs[0] = args[0];\\n        dynargs[1] = args[1];\\n        dynargs[2] = args[2];\\n        dynargs[3] = args[3];\\n        dynargs[4] = args[4];\\n        return oraclize_query(datasource, dynargs, gaslimit);\\n    }\\n\\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\\n        return oraclize.cbAddress();\\n    }\\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\\n        return oraclize.setProofType(proofP);\\n    }\\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\\n        return oraclize.setCustomGasPrice(gasPrice);\\n    }\\n\\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\\n        return oraclize.randomDS_getSessionPubKeyHash();\\n    }\\n\\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\\n        assembly {\\n            _size := extcodesize(_addr)\\n        }\\n    }\\n\\n    function parseAddr(string _a) internal pure returns (address){\\n        bytes memory tmp = bytes(_a);\\n        uint160 iaddr = 0;\\n        uint160 b1;\\n        uint160 b2;\\n        for (uint i=2; i\\u003c2+2*20; i+=2){\\n            iaddr *= 256;\\n            b1 = uint160(tmp[i]);\\n            b2 = uint160(tmp[i+1]);\\n            if ((b1 \\u003e= 97)\\u0026\\u0026(b1 \\u003c= 102)) b1 -= 87;\\n            else if ((b1 \\u003e= 65)\\u0026\\u0026(b1 \\u003c= 70)) b1 -= 55;\\n            else if ((b1 \\u003e= 48)\\u0026\\u0026(b1 \\u003c= 57)) b1 -= 48;\\n            if ((b2 \\u003e= 97)\\u0026\\u0026(b2 \\u003c= 102)) b2 -= 87;\\n            else if ((b2 \\u003e= 65)\\u0026\\u0026(b2 \\u003c= 70)) b2 -= 55;\\n            else if ((b2 \\u003e= 48)\\u0026\\u0026(b2 \\u003c= 57)) b2 -= 48;\\n            iaddr += (b1*16+b2);\\n        }\\n        return address(iaddr);\\n    }\\n\\n    function strCompare(string _a, string _b) internal pure returns (int) {\\n        bytes memory a = bytes(_a);\\n        bytes memory b = bytes(_b);\\n        uint minLength = a.length;\\n        if (b.length \\u003c minLength) minLength = b.length;\\n        for (uint i = 0; i \\u003c minLength; i ++)\\n            if (a[i] \\u003c b[i])\\n                return -1;\\n            else if (a[i] \\u003e b[i])\\n                return 1;\\n        if (a.length \\u003c b.length)\\n            return -1;\\n        else if (a.length \\u003e b.length)\\n            return 1;\\n        else\\n            return 0;\\n    }\\n\\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\\n        bytes memory h = bytes(_haystack);\\n        bytes memory n = bytes(_needle);\\n        if(h.length \\u003c 1 || n.length \\u003c 1 || (n.length \\u003e h.length))\\n            return -1;\\n        else if(h.length \\u003e (2**128 -1))\\n            return -1;\\n        else\\n        {\\n            uint subindex = 0;\\n            for (uint i = 0; i \\u003c h.length; i ++)\\n            {\\n                if (h[i] == n[0])\\n                {\\n                    subindex = 1;\\n                    while(subindex \\u003c n.length \\u0026\\u0026 (i + subindex) \\u003c h.length \\u0026\\u0026 h[i + subindex] == n[subindex])\\n                    {\\n                        subindex++;\\n                    }\\n                    if(subindex == n.length)\\n                        return int(i);\\n                }\\n            }\\n            return -1;\\n        }\\n    }\\n\\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n        bytes memory babcde = bytes(abcde);\\n        uint k = 0;\\n        for (uint i = 0; i \\u003c _ba.length; i++) babcde[k++] = _ba[i];\\n        for (i = 0; i \\u003c _bb.length; i++) babcde[k++] = _bb[i];\\n        for (i = 0; i \\u003c _bc.length; i++) babcde[k++] = _bc[i];\\n        for (i = 0; i \\u003c _bd.length; i++) babcde[k++] = _bd[i];\\n        for (i = 0; i \\u003c _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string _a, string _b) internal pure returns (string) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    // parseInt\\n    function parseInt(string _a) internal pure returns (uint) {\\n        return parseInt(_a, 0);\\n    }\\n\\n    // parseInt(parseFloat*10^_b)\\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\\n        bytes memory bresult = bytes(_a);\\n        uint mint = 0;\\n        bool decimals = false;\\n        for (uint i=0; i\\u003cbresult.length; i++){\\n            if ((bresult[i] \\u003e= 48)\\u0026\\u0026(bresult[i] \\u003c= 57)){\\n                if (decimals){\\n                   if (_b == 0) break;\\n                    else _b--;\\n                }\\n                mint *= 10;\\n                mint += uint(bresult[i]) - 48;\\n            } else if (bresult[i] == 46) decimals = true;\\n        }\\n        if (_b \\u003e 0) mint *= 10**_b;\\n        return mint;\\n    }\\n\\n    function uint2str(uint i) internal pure returns (string){\\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint len;\\n        while (j != 0){\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0){\\n            bstr[k--] = byte(48 + i % 10);\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\\n            uint arrlen = arr.length;\\n\\n            // get correct cbor output length\\n            uint outputlen = 0;\\n            bytes[] memory elemArray = new bytes[](arrlen);\\n            for (uint i = 0; i \\u003c arrlen; i++) {\\n                elemArray[i] = (bytes(arr[i]));\\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\\n            }\\n            uint ctr = 0;\\n            uint cborlen = arrlen + 0x80;\\n            outputlen += byte(cborlen).length;\\n            bytes memory res = new bytes(outputlen);\\n\\n            while (byte(cborlen).length \\u003e ctr) {\\n                res[ctr] = byte(cborlen)[ctr];\\n                ctr++;\\n            }\\n            for (i = 0; i \\u003c arrlen; i++) {\\n                res[ctr] = 0x5F;\\n                ctr++;\\n                for (uint x = 0; x \\u003c elemArray[i].length; x++) {\\n                    // if there\\u0027s a bug with larger strings, this may be the culprit\\n                    if (x % 23 == 0) {\\n                        uint elemcborlen = elemArray[i].length - x \\u003e= 24 ? 23 : elemArray[i].length - x;\\n                        elemcborlen += 0x40;\\n                        uint lctr = ctr;\\n                        while (byte(elemcborlen).length \\u003e ctr - lctr) {\\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\\n                            ctr++;\\n                        }\\n                    }\\n                    res[ctr] = elemArray[i][x];\\n                    ctr++;\\n                }\\n                res[ctr] = 0xFF;\\n                ctr++;\\n            }\\n            return res;\\n        }\\n\\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\\n            uint arrlen = arr.length;\\n\\n            // get correct cbor output length\\n            uint outputlen = 0;\\n            bytes[] memory elemArray = new bytes[](arrlen);\\n            for (uint i = 0; i \\u003c arrlen; i++) {\\n                elemArray[i] = (bytes(arr[i]));\\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\\n            }\\n            uint ctr = 0;\\n            uint cborlen = arrlen + 0x80;\\n            outputlen += byte(cborlen).length;\\n            bytes memory res = new bytes(outputlen);\\n\\n            while (byte(cborlen).length \\u003e ctr) {\\n                res[ctr] = byte(cborlen)[ctr];\\n                ctr++;\\n            }\\n            for (i = 0; i \\u003c arrlen; i++) {\\n                res[ctr] = 0x5F;\\n                ctr++;\\n                for (uint x = 0; x \\u003c elemArray[i].length; x++) {\\n                    // if there\\u0027s a bug with larger strings, this may be the culprit\\n                    if (x % 23 == 0) {\\n                        uint elemcborlen = elemArray[i].length - x \\u003e= 24 ? 23 : elemArray[i].length - x;\\n                        elemcborlen += 0x40;\\n                        uint lctr = ctr;\\n                        while (byte(elemcborlen).length \\u003e ctr - lctr) {\\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\\n                            ctr++;\\n                        }\\n                    }\\n                    res[ctr] = elemArray[i][x];\\n                    ctr++;\\n                }\\n                res[ctr] = 0xFF;\\n                ctr++;\\n            }\\n            return res;\\n        }\\n\\n\\n    string oraclize_network_name;\\n    function oraclize_setNetworkName(string _network_name) internal {\\n        oraclize_network_name = _network_name;\\n    }\\n\\n    function oraclize_getNetworkName() internal view returns (string) {\\n        return oraclize_network_name;\\n    }\\n\\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\\n        require((_nbytes \\u003e 0) \\u0026\\u0026 (_nbytes \\u003c= 32));\\n        // Convert from seconds to ledger timer ticks\\n        _delay *= 10; \\n        bytes memory nbytes = new bytes(1);\\n        nbytes[0] = byte(_nbytes);\\n        bytes memory unonce = new bytes(32);\\n        bytes memory sessionKeyHash = new bytes(32);\\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\\n        assembly {\\n            mstore(unonce, 0x20)\\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\\n            mstore(sessionKeyHash, 0x20)\\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\\n        }\\n        bytes memory delay = new bytes(32);\\n        assembly { \\n            mstore(add(delay, 0x20), _delay) \\n        }\\n        \\n        bytes memory delay_bytes8 = new bytes(8);\\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\\n\\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\\n        bytes32 queryId = oraclize_query(\\\"random\\\", args, _customGasLimit);\\n        \\n        bytes memory delay_bytes8_left = new bytes(8);\\n        \\n        assembly {\\n            let x := mload(add(delay_bytes8, 0x20))\\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\\n\\n        }\\n        \\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\\n        return queryId;\\n    }\\n    \\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\\n        oraclize_randomDS_args[queryId] = commitment;\\n    }\\n\\n    mapping(bytes32=\\u003ebytes32) oraclize_randomDS_args;\\n    mapping(bytes32=\\u003ebool) oraclize_randomDS_sessionKeysHashVerified;\\n\\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\\n        bool sigok;\\n        address signer;\\n\\n        bytes32 sigr;\\n        bytes32 sigs;\\n\\n        bytes memory sigr_ = new bytes(32);\\n        uint offset = 4+(uint(dersig[3]) - 0x20);\\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\\n        bytes memory sigs_ = new bytes(32);\\n        offset += 32 + 2;\\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\\n\\n        assembly {\\n            sigr := mload(add(sigr_, 32))\\n            sigs := mload(add(sigs_, 32))\\n        }\\n\\n\\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\\n        if (address(keccak256(pubkey)) == signer) return true;\\n        else {\\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\\n            return (address(keccak256(pubkey)) == signer);\\n        }\\n    }\\n\\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\\n        bool sigok;\\n\\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\\n\\n        bytes memory appkey1_pubkey = new bytes(64);\\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\\n\\n        bytes memory tosign2 = new bytes(1+65+32);\\n        tosign2[0] = byte(1); //role\\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\\n        bytes memory CODEHASH = hex\\\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\\\";\\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\\n\\n        if (sigok == false) return false;\\n\\n\\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\\n        bytes memory LEDGERKEY = hex\\\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\\\";\\n\\n        bytes memory tosign3 = new bytes(1+65);\\n        tosign3[0] = 0xFE;\\n        copyBytes(proof, 3, 65, tosign3, 1);\\n\\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\\n\\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\\n\\n        return sigok;\\n    }\\n\\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\\n        // Step 1: the prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        require((_proof[0] == \\\"L\\\") \\u0026\\u0026 (_proof[1] == \\\"P\\\") \\u0026\\u0026 (_proof[2] == 1));\\n\\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\\n        require(proofVerified);\\n\\n        _;\\n    }\\n\\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\\n        // Step 1: the prefix has to match \\u0027LP\\\\x01\\u0027 (Ledger Proof version 1)\\n        if ((_proof[0] != \\\"L\\\")||(_proof[1] != \\\"P\\\")||(_proof[2] != 1)) return 1;\\n\\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\\n        if (proofVerified == false) return 2;\\n\\n        return 0;\\n    }\\n\\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\\n        bool match_ = true;\\n        \\n        require(prefix.length == n_random_bytes);\\n\\n        for (uint256 i=0; i\\u003c n_random_bytes; i++) {\\n            if (content[i] != prefix[i]) match_ = false;\\n        }\\n\\n        return match_;\\n    }\\n\\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\\n\\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\\n        bytes memory keyhash = new bytes(32);\\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\\n\\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\\n\\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if \\u0027result\\u0027 is the prefix of sha256(sig1)\\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\\n\\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\\n        // This is to verify that the computed args match with the ones specified in the query.\\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\\n\\n        bytes memory sessionPubkey = new bytes(64);\\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\\n\\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\\n            delete oraclize_randomDS_args[queryId];\\n        } else return false;\\n\\n\\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\\n        bytes memory tosign1 = new bytes(32+8+1+32);\\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\\n\\n        // verify if sessionPubkeyHash was verified already, if not.. let\\u0027s do it!\\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\\n        }\\n\\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\\n    }\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\\n        uint minLength = length + toOffset;\\n\\n        // Buffer too small\\n        require(to.length \\u003e= minLength); // Should be a better way?\\n\\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint i = 32 + fromOffset;\\n        uint j = 32 + toOffset;\\n\\n        while (i \\u003c (32 + fromOffset + length)) {\\n            assembly {\\n                let tmp := mload(add(from, i))\\n                mstore(add(to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n\\n        return to;\\n    }\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    // Duplicate Solidity\\u0027s ecrecover, but catching the CALL return value\\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\\n        // We do our own memory management here. Solidity uses memory offset\\n        // 0x40 to store the current end of memory. We write past it (as\\n        // writes are memory extensions), but don\\u0027t update the offset so\\n        // Solidity will reuse it. The memory used here is only needed for\\n        // this context.\\n\\n        // FIXME: inline assembly can\\u0027t access return values\\n        bool ret;\\n        address addr;\\n\\n        assembly {\\n            let size := mload(0x40)\\n            mstore(size, hash)\\n            mstore(add(size, 32), v)\\n            mstore(add(size, 64), r)\\n            mstore(add(size, 96), s)\\n\\n            // NOTE: we can reuse the request memory because we deal with\\n            //       the return code\\n            ret := call(3000, 1, 0, size, 128, size, 32)\\n            addr := mload(size)\\n        }\\n\\n        return (ret, addr);\\n    }\\n\\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        if (sig.length != 65)\\n          return (false, 0);\\n\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n\\n            // Here we are loading the last 32 bytes. We exploit the fact that\\n            // \\u0027mload\\u0027 will pad with zeroes if we overread.\\n            // There is no \\u0027mload8\\u0027 to do this, but that would be nicer.\\n            v := byte(0, mload(add(sig, 96)))\\n\\n            // Alternative solution:\\n            // \\u0027byte\\u0027 is not working due to the Solidity parser, so lets\\n            // use the second best option, \\u0027and\\u0027\\n            // v := and(mload(add(sig, 65)), 255)\\n        }\\n\\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\\n        // to match the YP range of [27, 28]\\n        //\\n        // geth uses [0, 1] and some clients have followed. This might change, see:\\n        //  https://github.com/ethereum/go-ethereum/issues/2053\\n        if (v \\u003c 27)\\n          v += 27;\\n\\n        if (v != 27 \\u0026\\u0026 v != 28)\\n            return (false, 0);\\n\\n        return safer_ecrecover(hash, v, r, s);\\n    }\\n\\n}\\n// \\u003c/ORACLIZE_API\\u003e\"},\"token.sol\":{\"content\":\"pragma solidity ^0.4.16;\\nimport \\\"./oraclizeAPI_0.5.sol\\\";\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\\n\\ncontract owned {\\n    address public owner;\\n\\n    function owned() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) onlyOwner public {\\n        owner = newOwner;\\n    }\\n}\\n\\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\\n\\ncontract TokenERC20 {\\n    \\n    using SafeMath for uint256;\\n    \\n    // Public variables of the token\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    // 18 decimals is the strongly suggested default, avoid changing it\\n    uint256 public totalSupply;\\n\\n    // This creates an array with all balances\\n    mapping (address =\\u003e uint256) public balanceOf;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance;\\n\\n    // This generates a public event on the blockchain that will notify clients\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    // This notifies clients about the amount burnt\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * Constrctor function\\n     *\\n     * Initializes contract with initial supply tokens to the creator of the contract\\n     */\\n    function TokenERC20() public {}\\n\\n    /**\\n     * Internal transfer, only can be called by this contract\\n     */\\n    function _transfer(address _from, address _to, uint _value) internal {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != 0x0);\\n        // Check if the sender has enough\\n        require(balanceOf[_from] \\u003e= _value);\\n        // Check for overflows\\n        require(balanceOf[_to].add(_value) \\u003e balanceOf[_to]);\\n        // Save this for an assertion in the future\\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\\n        // Subtract from the sender\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\n        // Add the same to the recipient\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\n        Transfer(_from, _to, _value);\\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send `_value` tokens to `_to` from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(address _to, uint256 _value) public {\\n        _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send `_value` tokens to `_to` in behalf of `_from`\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= allowance[_from][msg.sender]);     // Check allowance\\n        allowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(address _spender, uint256 _value) public\\n        returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        return true;\\n    }\\n\\n    /**\\n     * Set allowance for other address and notify\\n     *\\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     * @param _extraData some extra information to send to the approved contract\\n     */\\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\\n        public\\n        returns (bool success) {\\n        tokenRecipient spender = tokenRecipient(_spender);\\n        if (approve(_spender, _value)) {\\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * Destroy tokens\\n     *\\n     * Remove `_value` tokens from the system irreversibly\\n     *\\n     * @param _value the amount of money to burn\\n     */\\n    function burn(uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);   // Check if the sender has enough\\n        balanceOf[msg.sender] =balanceOf[msg.sender].sub(_value);            // Subtract from the sender\\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\\n        Burn(msg.sender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * Destroy tokens from other account\\n     *\\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\\n     *\\n     * @param _from the address of the sender\\n     * @param _value the amount of money to burn\\n     */\\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\\n        require(balanceOf[_from] \\u003e= _value);                // Check if the targeted balance is enough\\n        require(_value \\u003c= allowance[_from][msg.sender]);    // Check allowance\\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender\\u0027s allowance\\n        totalSupply = totalSupply.sub(_value);                              // Update totalSupply\\n        Burn(_from, _value);\\n        return true;\\n    }\\n}\\n\\n/******************************************/\\n/*       ADVANCED TOKEN STARTS HERE       */\\n/******************************************/\\n\\ncontract MyAdvancedToken is owned, TokenERC20, usingOraclize {\\n\\n    string public name = \\\"BuyPay\\\";\\n    string public symbol = \\\"WBPS\\\";\\n    uint8 public decimals = 18;\\n    \\n    uint256 public ethusd = 0;\\n    uint256 public tokenPrice = 2;\\n    uint public updatePriceFreq = 30 hours;\\n    uint256 public totalSupply = 2000000000e18;  \\n    \\n    event LogPriceUpdated(string price);\\n    event LogNewProvableQuery(string description);\\n    \\n    mapping (address =\\u003e bool) public frozenAccount;\\n\\n    /* This generates a public event on the blockchain that will notify clients */\\n    event FrozenFunds(address target, bool frozen);\\n\\n    /* Initializes contract with initial supply tokens to the creator of the contract */\\n    function MyAdvancedToken () public {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n    function () payable {\\n        require(msg.value \\u003e 0);\\n         uint amount = msg.value.mul(ethusd).div(tokenPrice);\\n        _transfer(owner, msg.sender, amount);              // makes the transfers\\n        // multisig.transfer(msg.value);\\n    }\\n    /* Internal transfer, only can be called by this contract */\\n    function _transfer(address _from, address _to, uint _value) internal {\\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\\n        require (balanceOf[_from] \\u003e _value);                // Check if the sender has enough\\n        require (balanceOf[_to].add(_value) \\u003e balanceOf[_to]); // Check for overflow\\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\\n        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\\n        Transfer(_from, _to, _value);\\n    }\\n\\n    /// @notice Create `mintedAmount` tokens and send it to `target`\\n    /// @param target Address to receive the tokens\\n    /// @param mintedAmount the amount of tokens it will receive\\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\\n        balanceOf[target] = balanceOf[target].add(mintedAmount);\\n        totalSupply = totalSupply.add(mintedAmount);\\n        Transfer(0, this, mintedAmount);\\n        Transfer(this, target, mintedAmount);\\n    }\\n\\n    /// @notice `freeze? Prevent | Allow` `target` from sending \\u0026 receiving tokens\\n    /// @param target Address to be frozen\\n    /// @param freeze either to freeze it or not\\n    function freezeAccount(address target, bool freeze) onlyOwner public {\\n        frozenAccount[target] = freeze;\\n        FrozenFunds(target, freeze);\\n    }\\n\\n    function setEthUsd(uint256 _ethusd) public onlyOwner {\\n        require(_ethusd \\u003e 0);\\n        ethusd = _ethusd;\\n    }\\n\\n    function setTokenPrice(uint256 _tokenPrice) public onlyOwner {\\n        require(_tokenPrice \\u003e 0);\\n        tokenPrice = _tokenPrice;\\n    }\\n    \\n    function __callback(bytes32 myid, string result) {\\n        require(msg.sender == oraclize_cbAddress());\\n        ethusd = parseInt(result, 2);\\n        updatePrice();\\n    }\\n\\n    function updatePrice() public payable {\\n        oraclize_query(updatePriceFreq, \\\"URL\\\", \\\"json(https://api.etherscan.io/api?module=stats\\u0026action=ethprice\\u0026apikey=YourApiKeyToken).result.ethusd\\\");\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updatePriceFreq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethusd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethusd\",\"type\":\"uint256\"}],\"name\":\"setEthUsd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"string\"}],\"name\":\"LogPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewProvableQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"MyAdvancedToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://28969edc55b586cac8c40131f475d36eaec3bcada82d1503415cc47547e03256"}]}