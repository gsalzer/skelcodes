{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n\"\"\"\r\n@title Synth Burner\r\n@notice Swaps non-USD denominated assets for synths, converts synths to sUSD,\r\n        and transfers to `UnderlyingBurner`\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface AddressProvider:\r\n    def get_registry() -> address: view\r\n    def get_address(_id: uint256) -> address: view\r\n\r\ninterface Synth:\r\n    def currencyKey() -> bytes32: nonpayable\r\n\r\ninterface Registry:\r\n    def find_pool_for_coins(_from: address, _to: address) -> address: view\r\n\r\ninterface RegistrySwap:\r\n    def exchange_with_best_rate(\r\n        _from: address,\r\n        _to: address,\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n    ) -> uint256: payable\r\n\r\ninterface UnderlyingBurner:\r\n    def convert_synth(_currency_key: bytes32, _amount: uint256) -> bool: nonpayable\r\n\r\n\r\nETH_ADDRESS: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nADDRESS_PROVIDER: constant(address) = 0x0000000022D53366457F9d5E68Ec105046FC4383\r\n\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\nswap_for: public(HashMap[address, address])\r\ncurrency_keys: public(HashMap[address, bytes32])\r\n\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\n\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an `UnderlyingBurner` deployment.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    # required to receive ether during intermediate swaps\r\n    pass\r\n\r\n\r\n@external\r\ndef set_swap_for(_coins: address[10], _targets: address[10]) -> bool:\r\n    \"\"\"\r\n    @notice Set target coins that will be swapped into\r\n    @dev If any target coin is not a synth, it must have already\r\n         had it's own target coin registered\r\n    @param _coins List of coins to be burned\r\n    @param _targets List of coins to be swapped for\r\n    @return bool success\r\n    \"\"\"\r\n    registry: address = AddressProvider(ADDRESS_PROVIDER).get_registry()\r\n    for i in range(10):\r\n        coin: address = _coins[i]\r\n        if coin == ZERO_ADDRESS:\r\n            break\r\n        target: address = _targets[i]\r\n        assert Registry(registry).find_pool_for_coins(coin, target) != ZERO_ADDRESS\r\n\r\n        if self.currency_keys[target] == EMPTY_BYTES32:\r\n            # if target is not a synth, ensure target already has a target set\r\n            assert self.swap_for[target] != ZERO_ADDRESS\r\n        self.swap_for[coin] = target\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef add_synths(_synths: address[10]) -> bool:\r\n    \"\"\"\r\n    @notice Registry synth token addresses\r\n    @param _synths List of synth tokens to register\r\n    @return bool success\r\n    \"\"\"\r\n    for synth in _synths:\r\n        if synth == ZERO_ADDRESS:\r\n            break\r\n        # this will revert if `_synth` is not actually a synth\r\n        self.currency_keys[synth] = Synth(synth).currencyKey()\r\n\r\n    return True\r\n\r\n\r\n@payable\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Receive `_coin` and convert to sUSD via sEUR\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = 0\r\n    if _coin == ETH_ADDRESS:\r\n        amount = self.balance\r\n    else:\r\n        amount = ERC20(_coin).balanceOf(msg.sender)\r\n        if amount != 0:\r\n            response: Bytes[32] = raw_call(\r\n                _coin,\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amount, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) != 0:\r\n                assert convert(response, bool)\r\n\r\n        # get actual balance in case of transfer fee or pre-existing balance\r\n        amount = ERC20(_coin).balanceOf(self)\r\n\r\n    if amount != 0:\r\n        currency_key: bytes32 = self.currency_keys[_coin]\r\n        if currency_key == EMPTY_BYTES32:\r\n            registry_swap: address = AddressProvider(ADDRESS_PROVIDER).get_address(2)\r\n            eth_amount: uint256 = 0\r\n            if _coin == ETH_ADDRESS:\r\n                eth_amount = amount\r\n            elif not self.is_approved[registry_swap][_coin]:\r\n                response: Bytes[32] = raw_call(\r\n                    _coin,\r\n                    concat(\r\n                        method_id(\"approve(address,uint256)\"),\r\n                        convert(registry_swap, bytes32),\r\n                        convert(MAX_UINT256, bytes32),\r\n                    ),\r\n                    max_outsize=32,\r\n                )\r\n                if len(response) != 0:\r\n                    assert convert(response, bool)\r\n                self.is_approved[registry_swap][_coin] = True\r\n\r\n            RegistrySwap(registry_swap).exchange_with_best_rate(\r\n                _coin,\r\n                self.swap_for[_coin],\r\n                amount,\r\n                0,\r\n                value=eth_amount\r\n            )\r\n        else:\r\n            target: address = self.receiver\r\n            ERC20(_coin).transfer(target, amount)\r\n            UnderlyingBurner(target).convert_synth(currency_key, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    if _coin == ETH_ADDRESS:\r\n        raw_call(self.recovery, b\"\", value=self.balance)\r\n    else:\r\n        amount: uint256 = ERC20(_coin).balanceOf(self)\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(self.recovery, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_receiver\"},{\"type\":\"address\",\"name\":\"_recovery\"},{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_emergency_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"name\":\"set_swap_for\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[10]\",\"name\":\"_coins\"},{\"type\":\"address[10]\",\"name\":\"_targets\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":379176},{\"name\":\"add_synths\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address[10]\",\"name\":\"_synths\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":439380},{\"name\":\"burn\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"payable\",\"type\":\"function\",\"gas\":159741},{\"name\":\"recover_balance\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_coin\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":39262},{\"name\":\"set_recovery\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_recovery\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36473},{\"name\":\"set_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bool\",\"name\":\"_is_killed\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37724},{\"name\":\"commit_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36533},{\"name\":\"accept_transfer_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36459},{\"name\":\"commit_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_future_owner\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36593},{\"name\":\"accept_transfer_emergency_ownership\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":36519},{\"name\":\"swap_for\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1666},{\"name\":\"currency_keys\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1696},{\"name\":\"receiver\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"recovery\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"is_killed\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1661},{\"name\":\"future_emergency_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1691}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000786b374b5eef874279f4b7b4de16940e57301a58000000000000000000000000ae9c8320a6394120ecb7b2b2678d9b4ac848d10600000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000669df67e4827fcc0e48a1838a8d5ab79281909","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}