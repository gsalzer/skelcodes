{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: No License (None)\\r\\npragma solidity ^0.6.9;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n *\\r\\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/ownership/Ownable.sol\\r\\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\\r\\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\\r\\n * build/artifacts folder) as well as the vanilla Ownable implementation from an openzeppelin version.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the address of the owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(),\\\"Not Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if `msg.sender` is the owner of the contract.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to relinquish control of the contract.\\r\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\r\\n     * It will not be possible to call the functions with the `onlyOwner`\\r\\n     * modifier anymore.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0),\\\"Zero address not allowed\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: No License (None)\\r\\npragma solidity ^0.6.9;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b \\u003e 0, errorMessage);\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts with custom message when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\"},\"SwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: No License (None)\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n//import \\\"./SafeMath.sol\\\";\\r\\n//import \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SwapPair.sol\\\";\\r\\n\\r\\n\\r\\ninterface IValidator {\\r\\n    // returns: user balance, native (foreign for us) encoded balance, foreign (native for us) encoded balance\\r\\n    function checkBalances(address pair, address foreignSwapPair, address user) external returns(uint256);\\r\\n    // returns: user balance\\r\\n    function checkBalance(address pair, address foreignSwapPair, address user) external returns(uint256);\\r\\n    // returns: oracle fee\\r\\n    function getOracleFee(uint256 req) external returns(uint256);  //req: 1 - cancel, 2 - claim, returns: value\\r\\n}\\r\\n\\r\\ninterface IGatewayVault {\\r\\n    function vaultTransfer(address token, address recipient, uint256 amount) external returns (bool);\\r\\n    function vaultApprove(address token, address spender, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n    function burnFrom(address account, uint256 amount) external returns(bool);\\r\\n}\\r\\n\\r\\ncontract SwapJNTRFactory is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e address payable)) public getPair;\\r\\n    mapping(address =\\u003e address) public foreignPair;\\r\\n    address[] public allPairs;\\r\\n    address public foreignFactory;\\r\\n\\r\\n    mapping(address =\\u003e bool) public canMint;  //if token we cen mint and burn token\\r\\n\\r\\n    uint256 public fee;\\r\\n    address payable public validator;\\r\\n    address public system;  // system address mey change fee amount\\r\\n    bool public paused;\\r\\n    address public gatewayVault; // GatewayVault contract\\r\\n\\r\\n    address public newFactory;            // new factory address to upgrade\\r\\n    event PairCreated(address indexed tokenA, address indexed tokenB, address pair, uint);\\r\\n    event SwapRequest(address indexed tokenA, address indexed tokenB, address indexed user, uint256 amount);\\r\\n    event Swap(address indexed tokenA, address indexed tokenB, address indexed user, uint256 amount);\\r\\n\\r\\n    event ClaimRequest(address indexed tokenA, address indexed tokenB, address indexed user);\\r\\n    event ClaimApprove(address indexed tokenA, address indexed tokenB, address indexed user, uint256 amount);\\r\\n\\r\\n    modifier notPaused() {\\r\\n        require(!paused,\\\"Swap paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Throws if called by any account other than the system.\\r\\n    */\\r\\n    modifier onlySystem() {\\r\\n        require(msg.sender == system, \\\"Caller is not the system\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (address _system, address _vault) public {\\r\\n        system = _system;\\r\\n        newFactory = address(this);\\r\\n        gatewayVault = _vault;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _fee) external onlySystem returns(bool) {\\r\\n        fee = _fee;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setSystem(address _system) external onlyOwner returns(bool) {\\r\\n        system = _system;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setValidator(address payable _validator) external onlyOwner returns(bool) {\\r\\n        validator = _validator;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setPause(bool pause) external onlyOwner returns(bool) {\\r\\n        paused = pause;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setForeignFactory(address _addr) external onlyOwner returns(bool) {\\r\\n        foreignFactory = _addr;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setNewFactory(address _addr) external onlyOwner returns(bool) {\\r\\n        newFactory = _addr;\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function setMintableToken(address _addr, bool _canMint) external onlyOwner returns(bool) {\\r\\n        canMint[_addr] = _canMint;\\r\\n        return true;\\r\\n    }\\r\\n    // TakenA should be JNTR token\\r\\n    // for local swap (tokens on the same chain): pair = address(1) when TokenA = JNTR, and address(2) when TokenB = JNTR\\r\\n    function createPair(address tokenA, address tokenB, bool local) public onlyOwner returns (address payable pair) {\\r\\n        require(getPair[tokenA][tokenB] == address(0), \\u0027PAIR_EXISTS\\u0027); // single check is sufficient\\r\\n        if (local) {\\r\\n            pair = payable(address(1));\\r\\n            getPair[tokenA][tokenB] = pair;\\r\\n            getPair[tokenB][tokenA] = pair;\\r\\n            emit PairCreated(tokenA, tokenB, pair, allPairs.length);\\r\\n            return pair;            \\r\\n        }\\r\\n\\r\\n        bytes memory bytecode = type(SwapJNTRPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        foreignPair[pair] = getForeignPair(tokenB, tokenA);\\r\\n        SwapJNTRPair(pair).initialize(foreignPair[pair], tokenA, tokenB);\\r\\n\\r\\n        getPair[tokenA][tokenB] = pair;\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(tokenA, tokenB, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function getForeignPair(address tokenA, address tokenB) internal view returns(address pair) {\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                foreignFactory,\\r\\n                keccak256(abi.encodePacked(tokenA, tokenB)),\\r\\n                hex\\u0027a79d0b2d0d229d9f2750acf6e4ca00b89da9065d62058701247d526ed6b3e65d\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // set already existed pairs in case of contract upgrade\\r\\n    function setPairs(address[] memory tokenA, address[] memory tokenB, address payable[] memory pair) external onlyOwner returns(bool) {\\r\\n        uint256 len = tokenA.length;\\r\\n        while (len \\u003e 0) {\\r\\n            len--;\\r\\n            getPair[tokenA[len]][tokenB[len]] = pair[len];\\r\\n            if (pair[len] \\u003e address(8)) // we can use address(0)- address(8) as special marker\\r\\n                foreignPair[pair[len]] = SwapJNTRPair(pair[len]).foreignSwapPair();\\r\\n            allPairs.push(pair[len]);\\r\\n            emit PairCreated(tokenA[len], tokenB[len], pair[len], allPairs.length);            \\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairAddressFor(address tokenA, address tokenB) external view returns (address pair, bytes32 bytecodeHash) {\\r\\n        bytes memory bytecode = type(SwapJNTRPair).creationCode;\\r\\n        bytecodeHash = keccak256(bytecode);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                address(this),\\r\\n                keccak256(abi.encodePacked(tokenA, tokenB)),\\r\\n                bytecodeHash    // hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    //user should approve tokens transfer before calling this function.\\r\\n    // for local swap (tokens on the same chain): pair = address(1) when TokenA = JNTR, and address(2) when TokenB = JNTR\\r\\n    function swap(address tokenA, address tokenB, uint256 amount) external payable notPaused returns (bool) {\\r\\n        require(amount != 0, \\\"Zero amount\\\");\\r\\n        address payable pair = getPair[tokenA][tokenB];\\r\\n        require(pair != address(0), \\u0027PAIR_NOT_EXISTS\\u0027);\\r\\n\\r\\n        if (canMint[tokenA])\\r\\n            IBEP20(tokenA).burnFrom(msg.sender, amount);\\r\\n        else {\\r\\n            require(gatewayVault != address(0), \\\"No vault address\\\");\\r\\n            IBEP20(tokenA).transferFrom(msg.sender, gatewayVault, amount);\\r\\n        }\\r\\n\\r\\n        if (pair == address(1)) { //local pair\\r\\n            if (canMint[tokenB])\\r\\n                IBEP20(tokenB).mint(msg.sender, amount);\\r\\n            else\\r\\n                IGatewayVault(gatewayVault).vaultTransfer(tokenB, msg.sender, amount);\\r\\n            emit Swap(tokenA, tokenB, msg.sender, amount);\\r\\n        }\\r\\n        else {  // foreign pair\\r\\n            require(msg.value \\u003e= fee,\\\"Insufficient fee\\\");\\r\\n            // transfer fee to validator. May be changed to request tokens for compensation\\r\\n            validator.transfer(msg.value);\\r\\n            SwapJNTRPair(pair).deposit(msg.sender, amount);\\r\\n            emit SwapRequest(tokenA, tokenB, msg.sender, amount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _claim(address tokenA, address tokenB, address user) internal {\\r\\n        address payable pair = getPair[tokenA][tokenB];\\r\\n        require(pair \\u003e address(9), \\u0027PAIR_NOT_EXISTS\\u0027);\\r\\n        IValidator(validator).checkBalance(pair, foreignPair[pair], user);\\r\\n        emit ClaimRequest(tokenA, tokenB, user);\\r\\n    }\\r\\n    // amountB - amount of foreign token to swap\\r\\n    function claimTokenBehalf(address tokenA, address tokenB, address user) external onlySystem notPaused returns (bool) {\\r\\n        _claim(tokenA, tokenB, user);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim(address tokenA, address tokenB) external payable notPaused returns (bool) {\\r\\n        uint256 claimFee = IValidator(validator).getOracleFee(1);\\r\\n        require (msg.value \\u003e= claimFee, \\\"Not enough fee\\\");\\r\\n        _claim(tokenA, tokenB, msg.sender);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // On both side (BEP and ERC) we accumulate user\\u0027s deposits (balance).\\r\\n    // If balance on one side it greater then on other, the difference means user deposit.\\r\\n    function balanceCallback(address payable pair, address user, uint256 balanceForeign) external returns(bool) {\\r\\n        require (validator == msg.sender, \\\"Not validator\\\");\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        address swapAddress = address(uint160(user)+1);\\r\\n        uint256 swappedBalance = SwapJNTRPair(pair).balanceOf(swapAddress);\\r\\n        require(balanceForeign \\u003e swappedBalance, \\\"No tokens deposit\\\");\\r\\n        uint256 amount = balanceForeign - swappedBalance;\\r\\n        (tokenA, tokenB) = SwapJNTRPair(pair).claimApprove(user, amount);\\r\\n        if (canMint[tokenA])\\r\\n            IBEP20(tokenA).mint(user, amount);\\r\\n        else\\r\\n            IGatewayVault(gatewayVault).vaultTransfer(tokenA, user, amount);        \\r\\n        emit ClaimApprove(tokenA, tokenB, user, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"SwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: No License (None)\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function newFactory() external view returns(address);\\r\\n}\\r\\n\\r\\ncontract SwapJNTRPair {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public token;               // token address\\r\\n    address public tokenForeign;        // Foreign token address\\r\\n    address public foreignSwapPair;     // foreign SwapPair contract address (on other blockchain)\\r\\n    address public factory;             // factory address\\r\\n\\r\\n\\r\\n    // balanceOf contain two types of balance:\\r\\n    // 1. balanceOf[user] - balance of tokens on native chain\\r\\n    // 2. balanceOf[user+1] - swapped balance of foreign tokens. I.e. on BSC chain it contain amount of ETH that was swapped.  \\r\\n    mapping (address =\\u003e uint256) public balanceOf;\\r\\n\\r\\n    modifier onlyFactory() {\\r\\n        require(msg.sender == factory, \\\"Caller is not the factory\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // swapAddress = user address + 1.\\r\\n    // balanceOf contain two types of balance:\\r\\n    // 1. balanceOf[user] - balance of tokens on native chain\\r\\n    // 2. balanceOf[user+1] - swapped balance of foreign tokens. I.e. on BSC chain it contain amount of ETH that was swapped.\\r\\n    function _swapAddress(address user) internal pure returns(address swapAddress) {\\r\\n        swapAddress = address(uint160(user)+1);\\r\\n    }\\r\\n\\r\\n    function initialize(address _foreignPair, address tokenA, address tokenB) public onlyFactory {\\r\\n        foreignSwapPair = _foreignPair;\\r\\n        token = tokenA;\\r\\n        tokenForeign = tokenB;\\r\\n    }\\r\\n\\r\\n    function update() public returns(bool) {\\r\\n        factory = ISwapFactory(factory).newFactory();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // user\\u0027s deposit to the pool, waiting for swap\\r\\n    function deposit(address user, uint256 amount) external onlyFactory returns(bool) {\\r\\n        balanceOf[user] = balanceOf[user].add(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // request to claim token after swap\\r\\n    function claimApprove(address user, uint256 amount) external onlyFactory returns(address, address) {\\r\\n        address userSwap = _swapAddress(user);\\r\\n        balanceOf[userSwap] = balanceOf[userSwap].add(amount);\\r\\n        return (token, tokenForeign);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ClaimRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceForeign\",\"type\":\"uint256\"}],\"name\":\"balanceCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimTokenBehalf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"local\",\"type\":\"bool\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foreignFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"foreignPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairAddressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setForeignFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canMint\",\"type\":\"bool\"}],\"name\":\"setMintableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setNewFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenB\",\"type\":\"address[]\"},{\"internalType\":\"address payable[]\",\"name\":\"pair\",\"type\":\"address[]\"}],\"name\":\"setPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_system\",\"type\":\"address\"}],\"name\":\"setSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"system\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SwapJNTRFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000f540ac274a95699c945014105c751baec93c8470000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://31386e50d8ebdb798d55f3e3b03c60df7a241c0460994f15f72a04ae727a9885"}]}