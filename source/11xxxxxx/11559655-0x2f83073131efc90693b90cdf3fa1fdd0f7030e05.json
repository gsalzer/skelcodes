{"status":"1","message":"OK","result":[{"SourceCode":"{\"AggregatorV3Interface.sol\":{\"content\":\"pragma solidity \\u003e=0.4.24;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"},\"ChainLink.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\nimport \\u0027./TestTokens.sol\\u0027;\\n\\ncontract ChainLink {\\n    \\n    mapping(address =\\u003e AggregatorV3Interface) internal priceContractMapping;\\n    mapping (address =\\u003e bool) public assetsWithPriceFeedBasedOnUSD;\\n    address public admin;\\n    bool public paused = false;\\n    address public wethAddress;\\n    AggregatorV3Interface public USDETHPriceFeed;\\n\\n    /**\\n     * Sets the initial assets and admin\\n     * Add assets and set Weth Address using their own functions\\n     */\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n    \\n    /**\\n     * Modifier to restrict functions only by admins\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin,\\\"Only the Admin can perform this operation\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * Event declarations for all the operations of this contract\\n     */\\n    event assetAdded(address assetAddress, address priceFeedContract);\\n    event assetRemoved(address assetAddress);\\n    event adminChanged(address oldAdmin, address newAdmin);\\n    event wethAddressSet(address wethAddress);\\n    event USDETHPriceFeedSet(address USDETHPriceFeed);\\n    event contractPausedOrUnpaused(bool currentStatus);\\n\\n    /**\\n     * Allows admin to add a new asset for price tracking\\n     */\\n    function addAsset(address assetAddress, address priceFeedContract, bool _assetWithPriceFeedBasedOnUSD) public onlyAdmin {\\n        if (_assetWithPriceFeedBasedOnUSD) {\\n            require(USDETHPriceFeed != address(0),\\\"USDETHPriceFeed not set\\\");\\n        }\\n        priceContractMapping[assetAddress] = AggregatorV3Interface(priceFeedContract);\\n        assetsWithPriceFeedBasedOnUSD[assetAddress] = _assetWithPriceFeedBasedOnUSD;\\n        emit assetAdded(assetAddress, priceFeedContract);\\n    }\\n    \\n    /**\\n     * Allows admin to remove an existing asset from price tracking\\n     */\\n    function removeAsset(address assetAddress) public onlyAdmin {\\n        priceContractMapping[assetAddress] = AggregatorV3Interface(address(0));\\n        emit assetRemoved(assetAddress);\\n    }\\n    \\n    /**\\n     * Allows admin to change the admin of the contract\\n     */\\n    function changeAdmin(address newAdmin) public onlyAdmin {\\n        emit adminChanged(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * Allows admin to set the weth address\\n     */\\n    function setWethAddress(address _wethAddress) public onlyAdmin {\\n        wethAddress = _wethAddress;\\n        emit wethAddressSet(_wethAddress);\\n    }\\n\\n    /**\\n     * Allows admin to set the weth address\\n     */\\n    function setUSDETHPriceFeedAddress(AggregatorV3Interface _USDETHPriceFeed) public onlyAdmin {\\n        USDETHPriceFeed = _USDETHPriceFeed;\\n        emit USDETHPriceFeedSet(_USDETHPriceFeed);\\n    }\\n\\n    /**\\n     * Allows admin to pause and unpause the contract\\n     */\\n    function togglePause() public onlyAdmin {\\n        if (paused) {\\n            paused = false;\\n            emit contractPausedOrUnpaused(false);\\n        }\\n        else {\\n            paused = true;\\n            emit contractPausedOrUnpaused(true);\\n        }\\n    }\\n\\n    /**\\n     * Returns the latest price\\n     */\\n    function getAssetPrice(address asset) public view returns (uint) {\\n        // Return 1 * 10^18 for WETH, otherwise return actual price\\n        if(!paused \\u0026\\u0026 asset == wethAddress) {\\n            return 1000000000000000000;\\n        }\\n        // Capture the decimals in the ERC20 token\\n        uint8 assetDecimals = TestTokens(asset).decimals();\\n        if(!paused \\u0026\\u0026 priceContractMapping[asset] != address(0)) {\\n            (\\n                uint80 roundID, \\n                int price,\\n                uint startedAt,\\n                uint timeStamp,\\n                uint80 answeredInRound\\n            ) = priceContractMapping[asset].latestRoundData();\\n            // If the round is not complete yet, timestamp is 0\\n            require(timeStamp \\u003e 0, \\\"Round not complete\\\");\\n            // Calculate USD/ETH price for contracts using USD based price feed\\n            if(assetsWithPriceFeedBasedOnUSD[asset]) {\\n                int priceUSD;\\n                (\\n                    roundID, \\n                    priceUSD,\\n                    startedAt,\\n                    timeStamp,\\n                    answeredInRound\\n                ) = USDETHPriceFeed.latestRoundData();\\n                // If the round is not complete yet, timestamp is 0\\n                require(timeStamp \\u003e 0, \\\"Round not complete\\\");\\n                uint returnedPrice = uint(price) * uint(priceUSD) / (10 ** 8);\\n                return returnedPrice;\\n            } else {\\n                if(price \\u003e0) {\\n                // Magnify the result based on decimals\\n                return (uint(price) * (10 ** (18 - uint(assetDecimals))));\\n            }\\n            else {\\n                return 0;\\n            }\\n            }\\n        }\\n        else {\\n            return 0;\\n        }\\n    }\\n\\n    function fallback() public payable {\\n        require(msg.sender.send(msg.value),\\\"Fallback function initiated but refund failed\\\");\\n    }\\n}\"},\"TestTokens.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\ncontract TestTokens {\\n//Variables\\nstring public name;\\nstring public symbol; // Usually is 3 or 4 letters long\\nuint8 public decimals; // maximum is 18 decimals\\nuint256 public supply;\\n\\nmapping(address =\\u003e uint) public balances;\\nmapping(address =\\u003e mapping(address =\\u003e uint)) public allowed;\\n//Events\\nevent Transfer(address sender, address receiver, uint256 tokens);\\nevent Approval(address sender, address delegate, uint256 tokens);\\n//constructor\\nconstructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _supply) public {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n    supply = _supply * 10**18;\\n    balances[msg.sender] = _supply * 10**18;\\n}\\n//Functions\\n//return the total number of tokens that you have\\nfunction totalSupply() external view returns (uint256){\\n    return supply;\\n} \\n\\n//How many tokens does this person have\\nfunction balanceOf(address tokenOwner) external view returns (uint){\\n    return balances[tokenOwner];\\n} \\n\\n//helps in transferring from your account to another person\\nfunction transfer(address receiver, uint numTokens) external returns (bool){\\n    require(msg.sender != receiver,\\\"Sender and receiver can\\u0027t be the same\\\");\\n    require(balances[msg.sender] \\u003e= numTokens,\\\"Not enough balance\\\");\\n    balances[msg.sender] -= numTokens;\\n    balances[receiver] += numTokens;\\n    emit Transfer(msg.sender,receiver,numTokens);\\n    return true;\\n} \\n\\n// Used to delegate authority to send tokens without my approval\\nfunction approve(address delegate, uint numTokens) external returns (bool){\\n    require(msg.sender != delegate,\\\"Sender and delegate can\\u0027t be the same\\\");\\n    allowed[msg.sender][delegate] = numTokens;\\n    emit Approval(msg.sender,delegate,numTokens);\\n    return true;\\n} \\n\\n// How much has the owner delegated/approved to the delegate\\nfunction allowance(address owner, address delegate) external view returns (uint){\\n    return allowed[owner][delegate];\\n} \\n\\n// Used by exchanges to send money from owner to buyer\\nfunction transferFrom(address owner, address buyer, uint numTokens) external returns (bool){\\n    require(owner != buyer,\\\"Owner and Buyer can\\u0027t be the same\\\");\\n    require(balances[owner] \\u003e= numTokens,\\\"Not enough balance\\\");\\n    require(allowed[owner][msg.sender] \\u003e= numTokens,\\\"Not enough allowance\\\");\\n    balances[owner] -= numTokens;\\n    balances[buyer] += numTokens;\\n    allowed[owner][msg.sender] -= numTokens;\\n    emit Transfer(owner,buyer,numTokens);\\n    return true;\\n}\\n\\n// Should not be used in production\\n// Only to allocate testnet tokens to user for testing purposes\\nfunction allocateTo(address _owner, uint256 value) public {\\n        balances[_owner] += value;\\n        supply += value;\\n        emit Transfer(address(this), _owner, value);\\n    }\\n}\"}}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetsWithPriceFeedBasedOnUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_USDETHPriceFeed\",\"type\":\"address\"}],\"name\":\"setUSDETHPriceFeedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fallback\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDETHPriceFeed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetAddress\",\"type\":\"address\"},{\"name\":\"priceFeedContract\",\"type\":\"address\"},{\"name\":\"_assetWithPriceFeedBasedOnUSD\",\"type\":\"bool\"}],\"name\":\"addAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceFeedContract\",\"type\":\"address\"}],\"name\":\"assetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"assetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"adminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wethAddress\",\"type\":\"address\"}],\"name\":\"wethAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"USDETHPriceFeed\",\"type\":\"address\"}],\"name\":\"USDETHPriceFeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentStatus\",\"type\":\"bool\"}],\"name\":\"contractPausedOrUnpaused\",\"type\":\"event\"}]","ContractName":"ChainLink","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a0fc612867a88c95f7d29f8fb4723c68dc118f50d43bb22dac4ae06a13d465cb"}]}