{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/LiquidityProviderFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../errors/LibLiquidityProviderRichErrors.sol\\\";\\nimport \\\"../external/ILiquidityProviderSandbox.sol\\\";\\nimport \\\"../external/LiquidityProviderSandbox.sol\\\";\\nimport \\\"../fixins/FixinCommon.sol\\\";\\nimport \\\"../fixins/FixinTokenSpender.sol\\\";\\nimport \\\"../migrations/LibMigrate.sol\\\";\\nimport \\\"./IFeature.sol\\\";\\nimport \\\"./ILiquidityProviderFeature.sol\\\";\\n\\n\\ncontract LiquidityProviderFeature is\\n    IFeature,\\n    ILiquidityProviderFeature,\\n    FixinCommon,\\n    FixinTokenSpender\\n{\\n    using LibSafeMathV06 for uint256;\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Name of this feature.\\n    string public constant override FEATURE_NAME = \\\"LiquidityProviderFeature\\\";\\n    /// @dev Version of this feature.\\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 2);\\n\\n    /// @dev ETH pseudo-token address.\\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev The sandbox contract address.\\n    ILiquidityProviderSandbox public immutable sandbox;\\n\\n    /// @dev Event for data pipeline.\\n    event LiquidityProviderSwap(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        address provider,\\n        address recipient\\n    );\\n\\n    constructor(LiquidityProviderSandbox sandbox_, bytes32 greedyTokensBloomFilter)\\n        public\\n        FixinCommon()\\n        FixinTokenSpender(greedyTokensBloomFilter)\\n    {\\n        sandbox = sandbox_;\\n    }\\n\\n    /// @dev Initialize and register this feature.\\n    ///      Should be delegatecalled by `Migrate.migrate()`.\\n    /// @return success `LibMigrate.SUCCESS` on success.\\n    function migrate()\\n        external\\n        returns (bytes4 success)\\n    {\\n        _registerFeatureFunction(this.sellToLiquidityProvider.selector);\\n        return LibMigrate.MIGRATE_SUCCESS;\\n    }\\n\\n    /// @dev Sells `sellAmount` of `inputToken` to the liquidity provider\\n    ///      at the given `provider` address.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param provider The address of the on-chain liquidity provider\\n    ///        to trade with.\\n    /// @param recipient The recipient of the bought tokens. If equal to\\n    ///        address(0), `msg.sender` is assumed to be the recipient.\\n    /// @param sellAmount The amount of `inputToken` to sell.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to\\n    ///        buy. Reverts if this amount is not satisfied.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellToLiquidityProvider(\\n        address inputToken,\\n        address outputToken,\\n        address payable provider,\\n        address recipient,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        override\\n        payable\\n        returns (uint256 boughtAmount)\\n    {\\n        if (recipient == address(0)) {\\n            recipient = msg.sender;\\n        }\\n\\n        // Forward all attached ETH to the provider.\\n        if (msg.value > 0) {\\n            provider.transfer(msg.value);\\n        }\\n\\n        if (inputToken != ETH_TOKEN_ADDRESS) {\\n            // Transfer input ERC20 tokens to the provider.\\n            _transferERC20Tokens(\\n                IERC20TokenV06(inputToken),\\n                msg.sender,\\n                provider,\\n                sellAmount\\n            );\\n        }\\n\\n        if (inputToken == ETH_TOKEN_ADDRESS) {\\n            uint256 balanceBefore = IERC20TokenV06(outputToken).balanceOf(recipient);\\n            sandbox.executeSellEthForToken(\\n                provider,\\n                outputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = IERC20TokenV06(outputToken).balanceOf(recipient).safeSub(balanceBefore);\\n        } else if (outputToken == ETH_TOKEN_ADDRESS) {\\n            uint256 balanceBefore = recipient.balance;\\n            sandbox.executeSellTokenForEth(\\n                provider,\\n                inputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = recipient.balance.safeSub(balanceBefore);\\n        } else {\\n            uint256 balanceBefore = IERC20TokenV06(outputToken).balanceOf(recipient);\\n            sandbox.executeSellTokenForToken(\\n                provider,\\n                inputToken,\\n                outputToken,\\n                recipient,\\n                minBuyAmount,\\n                auxiliaryData\\n            );\\n            boughtAmount = IERC20TokenV06(outputToken).balanceOf(recipient).safeSub(balanceBefore);\\n        }\\n\\n        if (boughtAmount < minBuyAmount) {\\n            LibLiquidityProviderRichErrors.LiquidityProviderIncompleteSellError(\\n                provider,\\n                outputToken,\\n                inputToken,\\n                sellAmount,\\n                boughtAmount,\\n                minBuyAmount\\n            ).rrevert();\\n        }\\n\\n        emit LiquidityProviderSwap(\\n            inputToken,\\n            outputToken,\\n            sellAmount,\\n            boughtAmount,\\n            provider,\\n            recipient\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IERC20TokenV06 {\\n\\n    // solhint-disable no-simple-event-func-name\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @dev send `value` token to `to` from `msg.sender`\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transfer(address to, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param value The amount of token to be transferred\\n    /// @return True if transfer was successful\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @param value The amount of wei to be approved for transfer\\n    /// @return Always true if the call has enough gas to complete execution\\n    function approve(address spender, uint256 value)\\n        external\\n        returns (bool);\\n\\n    /// @dev Query total supply of token\\n    /// @return Total supply of token\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the balance of `owner`.\\n    /// @param owner The address from which the balance will be retrieved\\n    /// @return Balance of owner\\n    function balanceOf(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the allowance for `spender` to spend from `owner`.\\n    /// @param owner The address of the account owning tokens\\n    /// @param spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Get the number of decimals this token has.\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibSafeMathRichErrorsV06.sol\\\";\\n\\n\\nlibrary LibSafeMathV06 {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeMul128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint128 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b == 0) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint128 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (b > a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        uint128 c = a + b;\\n        if (c < a) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min128(uint128 a, uint128 b)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        return a < b ? a : b;\\n    }\\n\\n    function safeDowncastToUint128(uint256 a)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        if (a > type(uint128).max) {\\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\\n                a\\n            ));\\n        }\\n        return uint128(a);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSafeMathRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibLiquidityProviderRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibLiquidityProviderRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function LiquidityProviderIncompleteSellError(\\n        address providerAddress,\\n        address makerToken,\\n        address takerToken,\\n        uint256 sellAmount,\\n        uint256 boughtAmount,\\n        uint256 minBuyAmount\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"LiquidityProviderIncompleteSellError(address,address,address,uint256,uint256,uint256)\\\")),\\n            providerAddress,\\n            makerToken,\\n            takerToken,\\n            sellAmount,\\n            boughtAmount,\\n            minBuyAmount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/external/ILiquidityProviderSandbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface ILiquidityProviderSandbox {\\n\\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForToken(\\n        address provider,\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n\\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellEthForToken(\\n        address provider,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n\\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForEth(\\n        address provider,\\n        address inputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/external/LiquidityProviderSandbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n  Copyright 2020 ZeroEx Intl.\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\\\";\\nimport \\\"../vendor/ILiquidityProvider.sol\\\";\\nimport \\\"../vendor/v3/IERC20Bridge.sol\\\";\\nimport \\\"./ILiquidityProviderSandbox.sol\\\";\\n\\n\\n/// @dev A permissionless contract through which the ZeroEx contract can\\n///      safely trigger a trade on an external `ILiquidityProvider` contract.\\ncontract LiquidityProviderSandbox is\\n    ILiquidityProviderSandbox\\n{\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Store the owner as an immutable.\\n    address public immutable owner;\\n\\n    constructor(address owner_)\\n        public\\n    {\\n        owner = owner_;\\n    }\\n\\n    /// @dev Allows only the (immutable) owner to call a function.\\n    modifier onlyOwner() virtual {\\n        if (msg.sender != owner) {\\n            LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForToken(\\n        address provider,\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        ILiquidityProvider(provider).sellTokenForToken(\\n            inputToken,\\n            outputToken,\\n            recipient,\\n            minBuyAmount,\\n            auxiliaryData\\n        );\\n    }\\n\\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellEthForToken(\\n        address provider,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        ILiquidityProvider(provider).sellEthForToken(\\n            outputToken,\\n            recipient,\\n            minBuyAmount,\\n            auxiliaryData\\n        );\\n    }\\n\\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\\n    ///      trigger a trade.\\n    /// @param provider The address of the on-chain liquidity provider.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    function executeSellTokenForEth(\\n        address provider,\\n        address inputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        onlyOwner\\n        override\\n    {\\n        ILiquidityProvider(provider).sellTokenForEth(\\n            inputToken,\\n            payable(recipient),\\n            minBuyAmount,\\n            auxiliaryData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\"))\\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\\n        0x1de45ad1;\\n\\n    // bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\\n        hex\\\"e69edc3e\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            ONLY_OWNER_ERROR_SELECTOR,\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/vendor/ILiquidityProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface ILiquidityProvider {\\n\\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\\n    ///      to sell must be transferred to the contract prior to calling this\\n    ///      function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellTokenForToken(\\n        address inputToken,\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades ETH for token. ETH must either be attached to this function\\n    ///      call or sent to the contract prior to calling this function to\\n    ///      trigger the trade.\\n    /// @param outputToken The token being bought.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellEthForToken(\\n        address outputToken,\\n        address recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\\n    ///      to calling this function to trigger the trade.\\n    /// @param inputToken The token being sold.\\n    /// @param recipient The recipient of the bought tokens.\\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\\n    /// @return boughtAmount The amount of ETH bought.\\n    function sellTokenForEth(\\n        address inputToken,\\n        address payable recipient,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        returns (uint256 boughtAmount);\\n\\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\\n    ///      selling `sellAmount` of `inputToken`.\\n    /// @param inputToken Address of the taker token (what to sell). Use\\n    ///        the wETH address if selling ETH.\\n    /// @param outputToken Address of the maker token (what to buy). Use\\n    ///        the wETH address if buying ETH.\\n    /// @param sellAmount Amount of `inputToken` to sell.\\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\\n    function getSellQuote(\\n        address inputToken,\\n        address outputToken,\\n        uint256 sellAmount\\n    )\\n        external\\n        view\\n        returns (uint256 outputTokenAmount);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/vendor/v3/IERC20Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IERC20Bridge {\\n\\n    /// @dev Emitted when a trade occurs.\\n    /// @param inputToken The token the bridge is converting from.\\n    /// @param outputToken The token the bridge is converting to.\\n    /// @param inputTokenAmount Amount of input token.\\n    /// @param outputTokenAmount Amount of output token.\\n    /// @param from The `from` address in `bridgeTransferFrom()`\\n    /// @param to The `to` address in `bridgeTransferFrom()`\\n    event ERC20BridgeTransfer(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputTokenAmount,\\n        uint256 outputTokenAmount,\\n        address from,\\n        address to\\n    );\\n\\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\\n    /// @param tokenAddress The address of the ERC20 token to transfer.\\n    /// @param from Address to transfer asset from.\\n    /// @param to Address to transfer asset to.\\n    /// @param amount Amount of asset to transfer.\\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\\n    /// @return success The magic bytes `0xdc1600f3` if successful.\\n    function bridgeTransferFrom(\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata bridgeData\\n    )\\n        external\\n        returns (bytes4 success);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/fixins/FixinCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibCommonRichErrors.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\nimport \\\"../features/IOwnableFeature.sol\\\";\\nimport \\\"../features/ISimpleFunctionRegistryFeature.sol\\\";\\n\\n\\n/// @dev Common feature utilities.\\nabstract contract FixinCommon {\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev The implementation address of this feature.\\n    address internal immutable _implementation;\\n\\n    /// @dev The caller must be this contract.\\n    modifier onlySelf() virtual {\\n        if (msg.sender != address(this)) {\\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\\n        }\\n        _;\\n    }\\n\\n    /// @dev The caller of this function must be the owner.\\n    modifier onlyOwner() virtual {\\n        {\\n            address owner = IOwnableFeature(address(this)).owner();\\n            if (msg.sender != owner) {\\n                LibOwnableRichErrors.OnlyOwnerError(\\n                    msg.sender,\\n                    owner\\n                ).rrevert();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor() internal {\\n        // Remember this feature's original address.\\n        _implementation = address(this);\\n    }\\n\\n    /// @dev Registers a function implemented by this feature at `_implementation`.\\n    ///      Can and should only be called within a `migrate()`.\\n    /// @param selector The selector of the function whose implementation\\n    ///        is at `_implementation`.\\n    function _registerFeatureFunction(bytes4 selector)\\n        internal\\n    {\\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\\n    }\\n\\n    /// @dev Encode a feature version as a `uint256`.\\n    /// @param major The major version number of the feature.\\n    /// @param minor The minor version number of the feature.\\n    /// @param revision The revision number of the feature.\\n    /// @return encodedVersion The encoded version number.\\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\\n        internal\\n        pure\\n        returns (uint256 encodedVersion)\\n    {\\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibCommonRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibCommonRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyCallableBySelfError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyCallableBySelfError(address)\\\")),\\n            sender\\n        );\\n    }\\n\\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"IllegalReentrancyError(bytes4,uint256)\\\")),\\n            selector,\\n            reentrancyFlags\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibOwnableRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibOwnableRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function OnlyOwnerError(\\n        address sender,\\n        address owner\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"OnlyOwnerError(address,address)\\\")),\\n            sender,\\n            owner\\n        );\\n    }\\n\\n    function TransferOwnerToZeroError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"TransferOwnerToZeroError()\\\"))\\n        );\\n    }\\n\\n    function MigrateCallFailedError(address target, bytes memory resultData)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"MigrateCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/IOwnableFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\n/// @dev Owner management and migration features.\\ninterface IOwnableFeature is\\n    IOwnableV06\\n{\\n    /// @dev Emitted when `migrate()` is called.\\n    /// @param caller The caller of `migrate()`.\\n    /// @param migrator The migration contract.\\n    /// @param newOwner The address of the new owner.\\n    event Migrated(address caller, address migrator, address newOwner);\\n\\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\\n    ///      The result of the function being called should be the magic bytes\\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\\n    ///      The owner will be temporarily set to `address(this)` inside the call.\\n    ///      Before returning, the owner will be set to `newOwner`.\\n    /// @param target The migrator contract address.\\n    /// @param newOwner The address of the new owner.\\n    /// @param data The call data.\\n    function migrate(address target, bytes calldata data, address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\ninterface IOwnableV06 {\\n\\n    /// @dev Emitted by Ownable when ownership is transferred.\\n    /// @param previousOwner The previous owner of the contract.\\n    /// @param newOwner The new owner of the contract.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @dev Transfers ownership of the contract to a new address.\\n    /// @param newOwner The address that will become the owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @dev The owner of this contract.\\n    /// @return ownerAddress The owner address.\\n    function owner() external view returns (address ownerAddress);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/ISimpleFunctionRegistryFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic registry management features.\\ninterface ISimpleFunctionRegistryFeature {\\n\\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\\n    /// @param selector The function selector.\\n    /// @param oldImpl The implementation contract address being replaced.\\n    /// @param newImpl The replacement implementation contract address.\\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\\n\\n    /// @dev Roll back to a prior implementation of a function.\\n    /// @param selector The function selector.\\n    /// @param targetImpl The address of an older implementation of the function.\\n    function rollback(bytes4 selector, address targetImpl) external;\\n\\n    /// @dev Register or replace a function.\\n    /// @param selector The function selector.\\n    /// @param impl The implementation contract for the function.\\n    function extend(bytes4 selector, address impl) external;\\n\\n    /// @dev Retrieve the length of the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @return rollbackLength The number of items in the rollback history for\\n    ///         the function.\\n    function getRollbackLength(bytes4 selector)\\n        external\\n        view\\n        returns (uint256 rollbackLength);\\n\\n    /// @dev Retrieve an entry in the rollback history for a function.\\n    /// @param selector The function selector.\\n    /// @param idx The index in the rollback history.\\n    /// @return impl An implementation address for the function at\\n    ///         index `idx`.\\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\\n        external\\n        view\\n        returns (address impl);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/fixins/FixinTokenSpender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\\\";\\nimport \\\"../features/ITokenSpenderFeature.sol\\\";\\nimport \\\"../errors/LibSpenderRichErrors.sol\\\";\\nimport \\\"../external/FeeCollector.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n\\n/// @dev Helpers for moving tokens around.\\nabstract contract FixinTokenSpender {\\n    using LibRichErrorsV06 for bytes;\\n\\n    // Mask of the lower 20 bytes of a bytes32.\\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    /// @dev A bloom filter for tokens that consume all gas when `transferFrom()` fails.\\n    bytes32 public immutable GREEDY_TOKENS_BLOOM_FILTER;\\n\\n    /// @param greedyTokensBloomFilter The bloom filter for all greedy tokens.\\n    constructor(bytes32 greedyTokensBloomFilter)\\n        internal\\n    {\\n        GREEDY_TOKENS_BLOOM_FILTER = greedyTokensBloomFilter;\\n    }\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _transferERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        bool success;\\n        bytes memory revertData;\\n\\n        require(address(token) != address(this), \\\"FixinTokenSpender/CANNOT_INVOKE_SELF\\\");\\n\\n        // If the token eats all gas when failing, we do not want to perform\\n        // optimistic fall through to the old AllowanceTarget contract if the\\n        // direct transferFrom() fails.\\n        if (_isTokenPossiblyGreedy(token)) {\\n            // If the token does not have a direct allowance on us then we use\\n            // the allowance target.\\n            if (token.allowance(owner, address(this)) < amount) {\\n                _transferFromLegacyAllowanceTarget(\\n                    token,\\n                    owner,\\n                    to,\\n                    amount,\\n                    \\\"\\\"\\n                );\\n                return;\\n            }\\n        }\\n\\n        assembly {\\n            let ptr := mload(0x40) // free memory pointer\\n\\n            // selector for transferFrom(address,address,uint256)\\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\\n            mstore(add(ptr, 0x44), amount)\\n\\n            success := call(\\n                gas(),\\n                and(token, ADDRESS_MASK),\\n                0,\\n                ptr,\\n                0x64,\\n                0,\\n                0\\n            )\\n\\n            let rdsize := returndatasize()\\n\\n            returndatacopy(add(ptr, 0x20), 0, rdsize) // reuse memory\\n\\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\\n            // but some don't. We accept 0-length return data as success, or at\\n            // least 32 bytes that starts with a 32-byte boolean true.\\n            success := and(\\n                success,                             // call itself succeeded\\n                or(\\n                    iszero(rdsize),                  // no return data, or\\n                    and(\\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\\n                        eq(mload(add(ptr, 0x20)), 1) // starts with uint256(1)\\n                    )\\n                )\\n            )\\n\\n            if iszero(success) {\\n                // revertData is a bytes, so length-prefixed data\\n                mstore(ptr, rdsize)\\n                revertData := ptr\\n\\n                // update free memory pointer (ptr + 32-byte length + return data)\\n                mstore(0x40, add(add(ptr, 0x20), rdsize))\\n            }\\n        }\\n\\n        if (!success) {\\n            _transferFromLegacyAllowanceTarget(\\n                token,\\n                owner,\\n                to,\\n                amount,\\n                revertData\\n            );\\n        }\\n    }\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner` by this address.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function _getSpendableERC20BalanceOf(\\n        IERC20TokenV06 token,\\n        address owner\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return LibSafeMathV06.min256(\\n            token.allowance(owner, address(this)),\\n            token.balanceOf(owner)\\n        );\\n    }\\n\\n    /// @dev Check if a token possibly belongs to the `GREEDY_TOKENS_BLOOM_FILTER`\\n    ///      bloom filter.\\n    function _isTokenPossiblyGreedy(IERC20TokenV06 token)\\n        internal\\n        view\\n        returns (bool isPossiblyGreedy)\\n    {\\n        // The hash is given by:\\n        // (1 << (keccak256(token) % 256)) | (1 << (token % 256))\\n        bytes32 h;\\n        assembly {\\n            mstore(0, token)\\n            h := or(shl(mod(keccak256(0, 32), 256), 1), shl(mod(token, 256), 1))\\n        }\\n        return (h & GREEDY_TOKENS_BLOOM_FILTER) == h;\\n    }\\n\\n    /// @dev Transfer tokens using the legacy allowance target instead of\\n    ///      allowances directly set on the exchange proxy.\\n    function _transferFromLegacyAllowanceTarget(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        bytes memory initialRevertData\\n    )\\n        private\\n    {\\n        // Try the old AllowanceTarget.\\n        try ITokenSpenderFeature(address(this))._spendERC20Tokens(\\n                token,\\n                owner,\\n                to,\\n                amount\\n            ) {\\n        } catch (bytes memory revertData) {\\n            // Bubble up the first error message. (In general, the fallback to the\\n            // allowance target is opportunistic. We ignore the specific error\\n            // message if it fails.)\\n            LibSpenderRichErrors.SpenderERC20TransferFromFailedError(\\n                address(token),\\n                owner,\\n                to,\\n                amount,\\n                initialRevertData.length != 0 ? initialRevertData : revertData\\n            ).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IERC20TokenV06.sol\\\";\\n\\n\\ninterface IEtherTokenV06 is\\n    IERC20TokenV06\\n{\\n    /// @dev Wrap ether.\\n    function deposit() external payable;\\n\\n    /// @dev Unwrap ether.\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/ITokenSpenderFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\\\";\\n\\n\\n/// @dev Feature that allows spending token allowances.\\ninterface ITokenSpenderFeature {\\n\\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\\n    ///      Only callable from within.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @param to The recipient of the tokens.\\n    /// @param amount The amount of `token` to transfer.\\n    function _spendERC20Tokens(\\n        IERC20TokenV06 token,\\n        address owner,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n\\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\\n    ///      pulled from `owner`.\\n    /// @param token The token to spend.\\n    /// @param owner The owner of the tokens.\\n    /// @return amount The amount of tokens that can be pulled.\\n    function getSpendableERC20BalanceOf(IERC20TokenV06 token, address owner)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /// @dev Get the address of the allowance target.\\n    /// @return target The target of token allowances.\\n    function getAllowanceTarget() external view returns (address target);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/errors/LibSpenderRichErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibSpenderRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function SpenderERC20TransferFromFailedError(\\n        address token,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        bytes memory errorData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"SpenderERC20TransferFromFailedError(address,address,address,uint256,bytes)\\\")),\\n            token,\\n            owner,\\n            to,\\n            amount,\\n            errorData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/external/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\\\";\\nimport \\\"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\\\";\\nimport \\\"../vendor/v3/IStaking.sol\\\";\\n\\n/// @dev The collector contract for protocol fees\\ncontract FeeCollector is AuthorizableV06 {\\n    /// @dev Allow ether transfers to the collector.\\n    receive() external payable { }\\n\\n    constructor() public {\\n        _addAuthorizedAddress(msg.sender);\\n    }\\n\\n    /// @dev   Approve the staking contract and join a pool. Only an authority\\n    ///        can call this.\\n    /// @param weth The WETH contract.\\n    /// @param staking The staking contract.\\n    /// @param poolId The pool ID this contract is collecting fees for.\\n    function initialize(\\n        IEtherTokenV06 weth,\\n        IStaking staking,\\n        bytes32 poolId\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        weth.approve(address(staking), type(uint256).max);\\n        staking.joinStakingPoolAsMaker(poolId);\\n    }\\n\\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\\n    /// @param weth The WETH contract.\\n    function convertToWeth(\\n        IEtherTokenV06 weth\\n    )\\n        external\\n        onlyAuthorized\\n    {\\n        if (address(this).balance > 0) {\\n            weth.deposit{value: address(this).balance}();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IAuthorizableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibAuthorizableRichErrorsV06.sol\\\";\\nimport \\\"./OwnableV06.sol\\\";\\n\\n\\n// solhint-disable no-empty-blocks\\ncontract AuthorizableV06 is\\n    OwnableV06,\\n    IAuthorizableV06\\n{\\n    /// @dev Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized {\\n        _assertSenderIsAuthorized();\\n        _;\\n    }\\n\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Address to query.\\n    // @return 0 Whether the address is authorized.\\n    mapping (address => bool) public override authorized;\\n    // @dev Whether an address is authorized to call privileged functions.\\n    // @param 0 Index of authorized address.\\n    // @return 0 Authorized address.\\n    address[] public override authorities;\\n\\n    /// @dev Initializes the `owner` address.\\n    constructor()\\n        public\\n        OwnableV06()\\n    {}\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _addAuthorizedAddress(target);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        for (uint256 i = 0; i < authorities.length; i++) {\\n            if (authorities[i] == target) {\\n                _removeAuthorizedAddressAtIndex(target, i);\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _removeAuthorizedAddressAtIndex(target, index);\\n    }\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        override\\n        view\\n        returns (address[] memory)\\n    {\\n        return authorities;\\n    }\\n\\n    /// @dev Reverts if msg.sender is not authorized.\\n    function _assertSenderIsAuthorized()\\n        internal\\n        view\\n    {\\n        if (!authorized[msg.sender]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\\n        }\\n    }\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function _addAuthorizedAddress(address target)\\n        internal\\n    {\\n        // Ensure that the target is not the zero address.\\n        if (target == address(0)) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\\n        }\\n\\n        // Ensure that the target is not already authorized.\\n        if (authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\\n        }\\n\\n        authorized[target] = true;\\n        authorities.push(target);\\n        emit AuthorizedAddressAdded(target, msg.sender);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function _removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        internal\\n    {\\n        if (!authorized[target]) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\\n        }\\n        if (index >= authorities.length) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\\n                index,\\n                authorities.length\\n            ));\\n        }\\n        if (authorities[index] != target) {\\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\\n                authorities[index],\\n                target\\n            ));\\n        }\\n\\n        delete authorized[target];\\n        authorities[index] = authorities[authorities.length - 1];\\n        authorities.pop();\\n        emit AuthorizedAddressRemoved(target, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./IOwnableV06.sol\\\";\\n\\n\\ninterface IAuthorizableV06 is\\n    IOwnableV06\\n{\\n    // Event logged when a new address is authorized.\\n    event AuthorizedAddressAdded(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    // Event logged when a currently authorized address is unauthorized.\\n    event AuthorizedAddressRemoved(\\n        address indexed target,\\n        address indexed caller\\n    );\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        external;\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    /// @param index Index of target in authorities array.\\n    function removeAuthorizedAddressAtIndex(\\n        address target,\\n        uint256 index\\n    )\\n        external;\\n\\n    /// @dev Gets all authorized addresses.\\n    /// @return authorizedAddresses Array of authorized addresses.\\n    function getAuthorizedAddresses()\\n        external\\n        view\\n        returns (address[] memory authorizedAddresses);\\n\\n    /// @dev Whether an adderss is authorized to call privileged functions.\\n    /// @param addr Address to query.\\n    /// @return isAuthorized Whether the address is authorized.\\n    function authorized(address addr) external view returns (bool isAuthorized);\\n\\n    /// @dev All addresseses authorized to call privileged functions.\\n    /// @param idx Index of authorized address.\\n    /// @return addr Authorized address.\\n    function authorities(uint256 idx) external view returns (address addr);\\n\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\n\\nlibrary LibAuthorizableRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"AuthorizedAddressMismatchError(address,address)\\\"))\\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\\n        0x140a84db;\\n\\n    // bytes4(keccak256(\\\"IndexOutOfBoundsError(uint256,uint256)\\\"))\\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\\n        0xe9f83771;\\n\\n    // bytes4(keccak256(\\\"SenderNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xb65a25b9;\\n\\n    // bytes4(keccak256(\\\"TargetAlreadyAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\\n        0xde16f1a0;\\n\\n    // bytes4(keccak256(\\\"TargetNotAuthorizedError(address)\\\"))\\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\\n        0xeb5108a2;\\n\\n    // bytes4(keccak256(\\\"ZeroCantBeAuthorizedError()\\\"))\\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\\n        hex\\\"57654fe4\\\";\\n\\n    // solhint-disable func-name-mixedcase\\n    function AuthorizedAddressMismatchError(\\n        address authorized,\\n        address target\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\\n            authorized,\\n            target\\n        );\\n    }\\n\\n    function IndexOutOfBoundsError(\\n        uint256 index,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\\n            index,\\n            length\\n        );\\n    }\\n\\n    function SenderNotAuthorizedError(address sender)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            sender\\n        );\\n    }\\n\\n    function TargetAlreadyAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function TargetNotAuthorizedError(address target)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\\n            target\\n        );\\n    }\\n\\n    function ZeroCantBeAuthorizedError()\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils/contracts/src/v06/OwnableV06.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./interfaces/IOwnableV06.sol\\\";\\nimport \\\"./errors/LibRichErrorsV06.sol\\\";\\nimport \\\"./errors/LibOwnableRichErrorsV06.sol\\\";\\n\\n\\ncontract OwnableV06 is\\n    IOwnableV06\\n{\\n    /// @dev The owner of this contract.\\n    /// @return 0 The owner address.\\n    address public override owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        _assertSenderIsOwner();\\n        _;\\n    }\\n\\n    /// @dev Change the owner of this contract.\\n    /// @param newOwner New owner address.\\n    function transferOwnership(address newOwner)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        if (newOwner == address(0)) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\\n        } else {\\n            owner = newOwner;\\n            emit OwnershipTransferred(msg.sender, newOwner);\\n        }\\n    }\\n\\n    function _assertSenderIsOwner()\\n        internal\\n        view\\n    {\\n        if (msg.sender != owner) {\\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\\n                msg.sender,\\n                owner\\n            ));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/vendor/v3/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\n\\ninterface IStaking {\\n    function joinStakingPoolAsMaker(bytes32) external;\\n    function payProtocolFee(address, address, uint256) external payable;\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/migrations/LibMigrate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\\\";\\nimport \\\"../errors/LibOwnableRichErrors.sol\\\";\\n\\n\\nlibrary LibMigrate {\\n\\n    /// @dev Magic bytes returned by a migrator to indicate success.\\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\\n\\n    using LibRichErrorsV06 for bytes;\\n\\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\\n    /// @param target The call target.\\n    /// @param data The call data.\\n    function delegatecallMigrateFunction(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n    {\\n        (bool success, bytes memory resultData) = target.delegatecall(data);\\n        if (!success ||\\n            resultData.length != 32 ||\\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\\n        {\\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/IFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Basic interface for a feature contract.\\ninterface IFeature {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    /// @dev The name of this feature set.\\n    function FEATURE_NAME() external view returns (string memory name);\\n\\n    /// @dev The version of this feature set.\\n    function FEATURE_VERSION() external view returns (uint256 version);\\n}\\n\"\r\n    },\r\n    \"/home/cluracan/code/0x-protocol/contracts/zero-ex/contracts/src/features/ILiquidityProviderFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n/*\\n\\n  Copyright 2020 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n/// @dev Feature to swap directly with an on-chain liquidity provider.\\ninterface ILiquidityProviderFeature {\\n\\n    /// @dev Sells `sellAmount` of `inputToken` to the liquidity provider\\n    ///      at the given `provider` address.\\n    /// @param inputToken The token being sold.\\n    /// @param outputToken The token being bought.\\n    /// @param provider The address of the on-chain liquidity provider\\n    ///        to trade with.\\n    /// @param recipient The recipient of the bought tokens. If equal to\\n    ///        address(0), `msg.sender` is assumed to be the recipient.\\n    /// @param sellAmount The amount of `inputToken` to sell.\\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to\\n    ///        buy. Reverts if this amount is not satisfied.\\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\\n    /// @return boughtAmount The amount of `outputToken` bought.\\n    function sellToLiquidityProvider(\\n        address inputToken,\\n        address outputToken,\\n        address payable provider,\\n        address recipient,\\n        uint256 sellAmount,\\n        uint256 minBuyAmount,\\n        bytes calldata auxiliaryData\\n    )\\n        external\\n        payable\\n        returns (uint256 boughtAmount);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@0x/contracts-utils=/home/cluracan/code/0x-protocol/node_modules/@0x/contracts-utils\",\r\n      \"@0x/contracts-erc20=/home/cluracan/code/0x-protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\"\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract LiquidityProviderSandbox\",\"name\":\"sandbox_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"greedyTokensBloomFilter\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityProviderSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEATURE_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GREEDY_TOKENS_BLOOM_FILTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"success\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sandbox\",\"outputs\":[{\"internalType\":\"contract ILiquidityProviderSandbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellToLiquidityProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"LiquidityProviderFeature","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000407b4128e9ecad8769b2332312a9f655cb9f5f3a0000100800000480002c00401000000820000000000000020000001010800001","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}