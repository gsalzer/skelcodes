{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.6;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract LimitOrders {\r\n  using SafeMath for uint256;\r\n  address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n  IUniswapV2Router02 public uniswapRouter;\r\n  mapping(string => Order) public orders;\r\n  mapping(address => Order) public findOrderByWallet;\r\n  uint timeVault = now;\r\n  address owner;\r\n  address newOwner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\r\n  }\r\n  \r\n modifier onlyOwner(){\r\n      require(msg.sender == owner, \"permission failed\");\r\n      _;\r\n }\r\n \r\n event orderEvent (\r\n     string indexed orderId,\r\n     uint indexed targetPrice,\r\n     uint indexed timeLimit,\r\n     uint amount,\r\n     address walletAddress\r\n  );\r\n  \r\n  event orderCancelled (\r\n     string indexed orderId,\r\n     uint indexed timeLimit,\r\n     address walletAddress,\r\n     uint amount\r\n  );\r\n  \r\n   event transEvent (\r\n     address indexed tokenA,\r\n     address tokenB\r\n  );\r\n\r\n struct Order {\r\n     string orderId;\r\n     uint amount;\r\n     uint amountWithFees;\r\n     uint targetPrice;\r\n     uint stopLossPrice;\r\n     uint timeLimit;\r\n     address walletAddress;\r\n     address tokenAddress;\r\n     string status;\r\n     bool sellOrder;\r\n     bool isCompleted;\r\n     bool isValue;\r\n }\r\n \r\n struct OrdersList {\r\n     string orderId;\r\n     uint amount;\r\n     uint amountOutMin;\r\n     uint gasPrice;\r\n     bool sellOrder;\r\n }\r\n\r\n\r\n// CREATE A NEW ORDER\r\n function createOrder(\r\n     string calldata _orderId,\r\n     uint _amount, \r\n     uint _amountWithFees, \r\n     uint _targetPrice,\r\n     uint _stopLossPrice,\r\n     uint _timeLimit,\r\n     address _tokenAddress,\r\n     bool _sellOrder\r\n     ) external payable returns (bool) {\r\n     require(!orders[_orderId].isValue, \"orderid should be unique\");\r\n     Order memory _order = Order(_orderId, _amount, _amountWithFees, _targetPrice,_stopLossPrice,_timeLimit,msg.sender,_tokenAddress,\"pending\",_sellOrder,false,true);\r\n     orders[_orderId] = _order;\r\n     findOrderByWallet[msg.sender] = _order;\r\n     if(_sellOrder){\r\n         require(_amount >= _amountWithFees, \"invalid amount\");\r\n         transferFromUserAccount(_amount, _tokenAddress);\r\n     }else {\r\n         require(msg.value >= _amount, \"invalid amount\");\r\n         address(this).transfer(_amount);\r\n     }\r\n     emit orderEvent(_orderId, _targetPrice, _timeLimit, _amount, msg.sender);\r\n  }\r\n  \r\n  \r\n  //EXECUTES ALL PENDING ORDERS \r\n  function executeOrders(string calldata _orderId, uint _amountOutMin, uint _allowedAmount, address payable _feesWallet) \r\n        external onlyOwner {\r\n        require(!orders[_orderId].isCompleted, \"order is already processed\");\r\n        Order memory _order = orders[_orderId];\r\n            if(!_order.sellOrder){\r\n               swapEthToToken(_order.timeLimit, _order.amount, _amountOutMin, _order.amountWithFees, _order.tokenAddress, _feesWallet);\r\n               orders[_orderId].status = \"success\";\r\n               orders[_orderId].isCompleted = true;\r\n            }else {\r\n               swapTokenToETH(_order.timeLimit, _order.amount, _amountOutMin, _order.tokenAddress, _allowedAmount, _order.amountWithFees, _feesWallet); \r\n               orders[_orderId].status = \"success\";\r\n               orders[_orderId].isCompleted = true;\r\n            }\r\n            emit orderEvent(_orderId, _order.targetPrice, _order.timeLimit, _order.amount, _order.walletAddress);\r\n\r\n  }\r\n  \r\n \r\n //USER CANCEL OR RETRIVE AN ORDER\r\n function cancelOrder(string calldata _orderId, string calldata _status) external {\r\n     require(orders[_orderId].isValue);\r\n     Order memory _order = orders[_orderId];\r\n     require(!_order.isCompleted && msg.sender == _order.walletAddress, \"cancel condition not met\");\r\n     ERC20 token = ERC20(_order.tokenAddress);\r\n     if(_order.sellOrder){\r\n         token.transfer(_order.walletAddress, _order.amount);\r\n         orders[_orderId].status = _status;\r\n         orders[_orderId].isCompleted = true;\r\n     }else{\r\n         msg.sender.transfer(_order.amount);\r\n         orders[_orderId].status = _status;\r\n         orders[_orderId].isCompleted = true;\r\n     }\r\n     emit orderCancelled(_order.orderId, _order.timeLimit, _order.walletAddress, _order.amount);\r\n }\r\n \r\n \r\n //GET AN ORDER STATUS\r\n function getOrderStatus(string calldata _orderId) \r\n      external view returns(string memory){\r\n      return orders[_orderId].status;\r\n }\r\n \r\n \r\n //UPDATE ORDER STATUS ON EXPIRATION OF IF FAIL TO FULLFILL\r\n function updateOrderStatus(string calldata _orderId, string calldata _status) \r\n      external onlyOwner returns(string memory){\r\n      require(!orders[_orderId].isCompleted, \"update condition not met\");\r\n      orders[_orderId].status = _status;\r\n      orders[_orderId].isCompleted = true;\r\n      return _status;\r\n }\r\n \r\n //...............................................................................\r\n \r\n function convertEthToToken(uint deadline, uint _amountIn, uint _amountOutMin, \r\n   uint _amountWithFees, address _tokenAddress, address payable _feesWallet) external payable \r\n    returns(uint[] memory) {\r\n    require(msg.value >= _amountIn, \"invalid amount\");\r\n    uint[] memory result = uniswapRouter.swapExactETHForTokens{value: _amountWithFees}(_amountOutMin, getPathForETHtoToken(_tokenAddress), msg.sender, deadline);\r\n    uint fees = _amountIn.sub(_amountWithFees);\r\n    transferToWallet(fees, _feesWallet);\r\n    return result;\r\n}\r\n\r\n \r\n function convertTokenToETH(uint deadline, uint _amountIn, uint _amountOutMin, \r\n    address _tokenAddress, uint _allowedAmount, uint _amountWithFees, address _feesWallet) external \r\n    returns(uint){\r\n    require(_amountIn >= _amountWithFees , \"invalid amount\");\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    uint allowance = token.allowance(address(this), UNISWAP_ROUTER_ADDRESS);\r\n    if (allowance < _amountIn) {\r\n        transferFromUserAccount(_amountIn, _tokenAddress);\r\n        token.approve(UNISWAP_ROUTER_ADDRESS, _allowedAmount);\r\n        uniswapRouter.swapExactTokensForETH(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddress);\r\n    } else {\r\n        transferFromUserAccount(_amountIn, _tokenAddress);\r\n        uniswapRouter.swapExactTokensForETH(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddress);\r\n    }\r\n }\r\n\r\n \r\n function convertTokenToEthSupportTokensWithFees(uint deadline, uint _amountIn, uint _amountOutMin,\r\n address _tokenAddress, uint _allowedAmount, uint _amountWithFees) public payable returns(bool) {\r\n    require(_amountIn >= _amountWithFees , \"invalid amount\");\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    uint allowance = token.allowance(address(this), UNISWAP_ROUTER_ADDRESS);\r\n    if (allowance < _amountIn) {\r\n        transferFromUserAccount(_amountIn, _tokenAddress);\r\n        token.approve(UNISWAP_ROUTER_ADDRESS, _allowedAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n    } else {\r\n        transferFromUserAccount(_amountIn, _tokenAddress);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n    }\r\n}\r\n \r\n  \r\n\r\n function getEstimatedETHforToken(uint _amount, address _tokenAddress) public view returns (uint[] memory) {\r\n    return uniswapRouter.getAmountsOut(_amount, getPathForETHtoToken(_tokenAddress));\r\n  }\r\n \r\n  \r\nfunction getPathForETHtoToken(address _tokenAddress) public view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = uniswapRouter.WETH();\r\n    path[1] = _tokenAddress;\r\n    return path;\r\n  }\r\n \r\n  \r\nfunction swapEthToToken(uint deadline, uint _amountIn, uint _amountOutMin,\r\n    uint _amountWithFees, address _tokenAddress, address payable _feesWallet) private returns(uint[] memory) {\r\n    uint[] memory result = uniswapRouter.swapExactETHForTokens{value: _amountWithFees}(_amountOutMin, getPathForETHtoToken(_tokenAddress), msg.sender, deadline);\r\n    uint fees = _amountIn.sub(_amountWithFees);\r\n    transferToWallet(fees, _feesWallet);\r\n    return result;\r\n}\r\n\r\n\r\nfunction swapTokenToETH(uint deadline, uint _amountIn, uint _amountOutMin, \r\n   address _tokenAddress, uint _allowedAmount, uint _amountWithFees, address _feesWallet) private \r\n    returns(uint){\r\n    require(_amountIn >= _amountWithFees , \"invalid amount\");\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    uint allowance = token.allowance(address(this), UNISWAP_ROUTER_ADDRESS);\r\n    if (allowance < _amountIn) {\r\n        token.approve(UNISWAP_ROUTER_ADDRESS, _allowedAmount);\r\n        uniswapRouter.swapExactTokensForETH(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddress);\r\n    } else {\r\n        uniswapRouter.swapExactTokensForETH(_amountWithFees, _amountOutMin, getPathForTokenToETH(_tokenAddress), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddress);\r\n    }\r\n    \r\n }\r\n \r\n //........................................................................................\r\n \r\n function swap(uint deadline, uint _amountIn, uint _amountOutMin, \r\n    address _tokenAddressA, address _tokenAddressB, \r\n    uint _allowedAmount, uint _amountWithFees, address _feesWallet) external{\r\n    require(_amountIn >= _amountWithFees , \"invalid amount\");\r\n    ERC20 token = ERC20(_tokenAddressA);\r\n    uint allowance = token.allowance(address(this), UNISWAP_ROUTER_ADDRESS);\r\n    if (allowance < _amountIn) {\r\n        transferFromUserAccount(_amountIn, _tokenAddressA);\r\n        token.approve(UNISWAP_ROUTER_ADDRESS, _allowedAmount);\r\n        uniswapRouter.swapExactTokensForTokens(_amountWithFees, _amountOutMin, getPathForTokenToToken(_tokenAddressA,_tokenAddressB), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddressA);\r\n    } else {\r\n        transferFromUserAccount(_amountIn, _tokenAddressA);\r\n        uniswapRouter.swapExactTokensForTokens(_amountWithFees, _amountOutMin, getPathForTokenToToken(_tokenAddressA,_tokenAddressB), msg.sender, deadline);\r\n        uint fees = _amountIn.sub(_amountWithFees);\r\n        transferToWalletTokens(fees, _feesWallet, _tokenAddressA);\r\n    }\r\n }\r\n \r\n //.....................................................................................\r\n\r\n function getPathForTokenToToken(address _tokenAddressA, address _tokenAddressB) public view returns (address[] memory) {\r\n    address[] memory path = new address[](3);\r\n    path[0] = _tokenAddressA;\r\n    path[1] = uniswapRouter.WETH();\r\n    path[2] = _tokenAddressB;\r\n    return path;\r\n  }\r\n  \r\n function getPathForTokenToETH(address _tokenAddress) public view returns (address[] memory) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = _tokenAddress;\r\n    path[1] = uniswapRouter.WETH();\r\n    return path;\r\n  }\r\n \r\n \r\n function getEstimatedTokenToETH(uint _amount, address _tokenAddress) public view returns (uint[] memory) {\r\n    return uniswapRouter.getAmountsOut(_amount, getPathForTokenToETH(_tokenAddress));\r\n }\r\n\r\n\r\n\r\nfunction transferFromUserAccount(uint _amountIn, address _tokenAddress) private returns(bool){\r\n  ERC20 token = ERC20(_tokenAddress);\r\n  token.transferFrom(msg.sender, address(this), _amountIn);\r\n  return true;\r\n  }\r\n  \r\n function checkAllowance(address _spender, address _tokenAddress) external view returns(uint){\r\n   ERC20 token = ERC20(_tokenAddress);\r\n   uint allowed = token.allowance(msg.sender, _spender);\r\n   return allowed;\r\n }\r\n \r\n function assignOwner(address _newOwner) external onlyOwner returns(address){\r\n     newOwner = _newOwner;\r\n     return newOwner;\r\n }\r\n \r\n function acceptOwnership() external returns(address){\r\n     require(msg.sender == newOwner, \"msg.sender should match newOwner\");\r\n     owner = newOwner;\r\n     return owner;\r\n }\r\n \r\n function transferToWallet(uint _amount, address payable _receipient) \r\n      private returns(bool){\r\n     _receipient.transfer(_amount);\r\n      return true;\r\n }\r\n \r\n  function transferToWalletTokens(uint _amount, address _receipient, address _tokenAddress) \r\n     private returns(bool){\r\n     ERC20 token = ERC20(_tokenAddress);\r\n     token.transfer(_receipient, _amount);\r\n     return true;\r\n     \r\n }\r\n \r\n \r\n  receive() payable external {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"orderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"orderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"transEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"assignOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"checkAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"convertEthToToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"convertTokenToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithFees\",\"type\":\"uint256\"}],\"name\":\"convertTokenToEthSupportTokensWithFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_sellOrder\",\"type\":\"bool\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"executeOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"findOrderByWallet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"sellOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getEstimatedETHforToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getEstimatedTokenToETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"getOrderStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPathForETHtoToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPathForTokenToETH\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddressB\",\"type\":\"address\"}],\"name\":\"getPathForTokenToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"sellOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isValue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddressB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"name\":\"updateOrderStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LimitOrders","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://73417ca9a750e4a56a26c55e39fa6ac17f6f40f6b70a8ce3a8368b12ab1d55ba"}]}