{"status":"1","message":"OK","result":[{"SourceCode":"{\"HDS.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract HDS {\\n\\tusing SafeMath for uint256;\\n\\n\\t/// @notice EIP-20 token name for this token\\n\\tstring public constant name = \\\"Hades governance token\\\";\\n\\n\\t/// @notice EIP-20 token symbol for this token\\n\\tstring public constant symbol = \\\"HDS\\\";\\n\\n\\t/// @notice EIP-20 token decimals for this token\\n\\tuint8 public constant decimals = 8;\\n\\n\\t/// @notice Total number of tokens in circulation\\n\\tuint256 public totalSupply;\\n\\n\\t/// @notice Max supply of tokens\\n\\tuint256 public constant maxSupply = 21000000e8; // 21 million\\n\\n\\t/// @notice Allowance amounts on behalf of others\\n\\tmapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowances;\\n\\n\\t/// @notice Official record of token balances for each account\\n\\tmapping(address =\\u003e uint256) internal balances;\\n\\n\\t/// @notice A record of each accounts delegate\\n\\tmapping(address =\\u003e address) public delegates;\\n\\n\\t/// @notice A checkpoint for marking number of votes from a given block\\n\\tstruct Checkpoint {\\n\\t\\tuint32 fromBlock;\\n\\t\\tuint256 votes;\\n\\t}\\n\\n\\t/// @notice A record of votes checkpoints for each account, by index\\n\\tmapping(address =\\u003e mapping(uint32 =\\u003e Checkpoint)) public checkpoints;\\n\\n\\t/// @notice The number of checkpoints for each account\\n\\tmapping(address =\\u003e uint32) public numCheckpoints;\\n\\n\\t/// @notice The admin address that have the auth to initialize the superior\\n\\taddress public admin;\\n\\n\\t/// @notice The distributor address that have the auth to mint or burn tokens\\n\\taddress public superior;\\n\\n\\t/// @notice The EIP-712 typehash for the contract\\u0027s domain\\n\\tbytes32 public constant DOMAIN_TYPEHASH = keccak256(\\n\\t\\t\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n\\t);\\n\\n\\t/// @notice The EIP-712 typehash for the delegation struct used by the contract\\n\\tbytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n\\t/// @notice A record of states for signing / validating signatures\\n\\tmapping(address =\\u003e uint256) public nonces;\\n\\n\\t/// @notice An event thats emitted when an account changes its delegate\\n\\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n\\t/// @notice An event thats emitted when a delegate account\\u0027s vote balance changes\\n\\tevent DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n\\t/// @notice The standard EIP-20 transfer event\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/// @notice The standard EIP-20 approval event\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/// @notice For safety auditor: the superior should be the deployed MarketController contract address\\n\\tmodifier onlySuperior {\\n\\t\\trequire(superior == msg.sender, \\\"HDS/permission denied\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() public {\\n\\t\\tadmin = msg.sender;\\n\\t\\tuint256 initialSupply = 4200000e8; // 4.2 million\\n\\t\\tbalances[admin] = initialSupply;\\n\\t\\ttotalSupply = initialSupply;\\n\\t}\\n\\n\\tfunction initialize(address _superior) external {\\n\\t\\trequire(admin == msg.sender, \\\"HDS/permission denied\\\");\\n\\t\\trequire(superior == address(0), \\\"HDS/Already initialized\\\");\\n\\t\\tsuperior = _superior;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n\\t * @param account The address of the account holding the funds\\n\\t * @param spender The address of the account spending the funds\\n\\t * @return The number of tokens approved\\n\\t */\\n\\tfunction allowance(address account, address spender) external view returns (uint256) {\\n\\t\\treturn allowances[account][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approve `spender` to transfer up to `amount` from `src`\\n\\t * @dev This will overwrite the approval amount for `spender`\\n\\t *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n\\t * @param spender The address of the account which may transfer tokens\\n\\t * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n\\t * @return Whether or not the approval succeeded\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool) {\\n\\t\\taddress owner = msg.sender;\\n\\t\\trequire(spender != address(0), \\\"HDS/approve to zero address\\\");\\n\\t\\tallowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get the number of tokens held by the `account`\\n\\t * @param account The address of the account to get the balance of\\n\\t * @return The number of tokens held\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256) {\\n\\t\\treturn balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to transfer\\n\\t * @return Whether or not the transfer succeeded\\n\\t */\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool) {\\n\\t\\treturn transferFrom(msg.sender, dst, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer `amount` tokens from `src` to `dst`\\n\\t * @param src The address of the source account\\n\\t * @param dst The address of the destination account\\n\\t * @param amount The number of tokens to transfer\\n\\t * @return Whether or not the transfer succeeded\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) public returns (bool) {\\n\\t\\trequire(balances[src] \\u003e= amount, \\\"HDS/insufficient-balance\\\");\\n\\t\\trequire(src != address(0), \\\"HDS/transfer from zero address\\\");\\n\\t\\trequire(dst != address(0), \\\"HDS/transfer to zero address\\\");\\n\\n\\t\\taddress sender = msg.sender;\\n\\t\\tuint256 allowed = allowances[src][sender];\\n\\t\\tif (sender != src \\u0026\\u0026 allowed != uint256(-1)) {\\n\\t\\t\\trequire(allowed \\u003e= amount, \\\"HDS/insufficient-allowance\\\");\\n\\t\\t\\tallowances[src][sender] = allowed.sub(amount);\\n\\t\\t\\temit Approval(src, sender, allowances[src][sender]);\\n\\t\\t}\\n\\t\\tbalances[src] = balances[src].sub(amount);\\n\\t\\tbalances[dst] = balances[dst].add(amount);\\n\\t\\temit Transfer(src, dst, amount);\\n\\n\\t\\t_moveDelegates(delegates[src], delegates[dst], amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mint `amount` tokens for \\u0027src\\u0027\\n\\t * @param src The address to receive the mint tokens\\n\\t * @param amount The number of tokens to mint\\n\\t */\\n\\tfunction mint(address src, uint256 amount) external onlySuperior {\\n\\t\\trequire(totalSupply.add(amount) \\u003c= maxSupply, \\\"HDS/Max supply exceeded\\\");\\n\\t\\trequire(src != address(0), \\\"HDS/mint to zero address\\\");\\n\\n\\t\\tbalances[src] = balances[src].add(amount);\\n\\t\\ttotalSupply = totalSupply.add(amount);\\n\\t\\temit Transfer(address(0), src, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Burn `amount` tokens for \\u0027src\\u0027\\n\\t * @param src The address to burn tokens\\n\\t * @param amount The number of tokens to burn\\n\\t */\\n\\tfunction burn(address src, uint256 amount) external {\\n\\t\\trequire(balances[src] \\u003e= amount, \\\"HDS/insufficient-balance\\\");\\n\\t\\trequire(src != address(0), \\\"HDS/burn from zero address\\\");\\n\\n\\t\\taddress sender = msg.sender;\\n\\t\\tuint256 allowed = allowances[src][sender];\\n\\t\\tif (src != sender \\u0026\\u0026 allowed != uint256(-1)) {\\n\\t\\t\\trequire(allowed \\u003e= amount, \\\"HDS/insufficient-allowance\\\");\\n\\t\\t\\tallowances[src][sender] = allowed.sub(amount);\\n\\t\\t\\temit Approval(src, sender, allowances[src][sender]);\\n\\t\\t}\\n\\t\\tbalances[src] = balances[src].sub(amount);\\n\\t\\ttotalSupply = totalSupply.sub(amount);\\n\\t\\temit Transfer(src, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegate votes from `msg.sender` to `delegatee`\\n\\t * @param delegatee The address to delegate votes to\\n\\t */\\n\\tfunction delegate(address delegatee) public {\\n\\t\\treturn _delegate(msg.sender, delegatee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates votes from signatory to `delegatee`\\n\\t * @param delegatee The address to delegate votes to\\n\\t * @param nonce The contract state required to match the signature\\n\\t * @param expiry The time at which to expire the signature\\n\\t * @param v The recovery byte of the signature\\n\\t * @param r Half of the ECDSA signature pair\\n\\t * @param s Half of the ECDSA signature pair\\n\\t */\\n\\tfunction delegateBySig(\\n\\t\\taddress delegatee,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 expiry,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public {\\n\\t\\tbytes32 domainSeparator = keccak256(\\n\\t\\t\\tabi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n\\t\\t);\\n\\t\\tbytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t\\taddress signatory = ecrecover(digest, v, r, s);\\n\\t\\trequire(signatory != address(0), \\\"HDS/ invalid signature\\\");\\n\\t\\trequire(nonce == nonces[signatory]++, \\\"HDS/ invalid nonce\\\");\\n\\t\\trequire(now \\u003c= expiry, \\\"HDS/signature expired\\\");\\n\\t\\treturn _delegate(signatory, delegatee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets the current votes balance for `account`\\n\\t * @param account The address to get votes balance\\n\\t * @return The number of current votes for `account`\\n\\t */\\n\\tfunction getCurrentVotes(address account) external view returns (uint256) {\\n\\t\\tuint32 nCheckpoints = numCheckpoints[account];\\n\\t\\treturn nCheckpoints \\u003e 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determine the prior number of votes for an account as of a block number\\n\\t * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n\\t * @param account The address of the account to check\\n\\t * @param blockNumber The block number to get the vote balance at\\n\\t * @return The number of votes the account had as of the given block\\n\\t */\\n\\tfunction getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n\\t\\trequire(blockNumber \\u003c block.number, \\\"HDS/not yet determined\\\");\\n\\n\\t\\tuint32 nCheckpoints = numCheckpoints[account];\\n\\t\\tif (nCheckpoints == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// First check most recent balance\\n\\t\\tif (checkpoints[account][nCheckpoints - 1].fromBlock \\u003c= blockNumber) {\\n\\t\\t\\treturn checkpoints[account][nCheckpoints - 1].votes;\\n\\t\\t}\\n\\n\\t\\t// Next check implicit zero balance\\n\\t\\tif (checkpoints[account][0].fromBlock \\u003e blockNumber) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint32 lower = 0;\\n\\t\\tuint32 upper = nCheckpoints - 1;\\n\\t\\twhile (upper \\u003e lower) {\\n\\t\\t\\tuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n\\t\\t\\tCheckpoint memory cp = checkpoints[account][center];\\n\\t\\t\\tif (cp.fromBlock == blockNumber) {\\n\\t\\t\\t\\treturn cp.votes;\\n\\t\\t\\t} else if (cp.fromBlock \\u003c blockNumber) {\\n\\t\\t\\t\\tlower = center;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupper = center - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn checkpoints[account][lower].votes;\\n\\t}\\n\\n\\tfunction _delegate(address delegator, address delegatee) internal {\\n\\t\\taddress currentDelegate = delegates[delegator];\\n\\t\\tdelegates[delegator] = delegatee;\\n\\t\\temit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\t\\t_moveDelegates(currentDelegate, delegatee, balances[delegator]);\\n\\t}\\n\\n\\tfunction _moveDelegates(\\n\\t\\taddress srcRep,\\n\\t\\taddress dstRep,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tif (srcRep != dstRep \\u0026\\u0026 amount \\u003e 0) {\\n\\t\\t\\tif (srcRep != address(0)) {\\n\\t\\t\\t\\tuint32 srcRepNum = numCheckpoints[srcRep];\\n\\t\\t\\t\\tuint256 srcRepOld = srcRepNum \\u003e 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n\\t\\t\\t\\tuint256 srcRepNew = srcRepOld.sub(amount);\\n\\t\\t\\t\\t_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (dstRep != address(0)) {\\n\\t\\t\\t\\tuint32 dstRepNum = numCheckpoints[dstRep];\\n\\t\\t\\t\\tuint256 dstRepOld = dstRepNum \\u003e 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n\\t\\t\\t\\tuint256 dstRepNew = dstRepOld.add(amount);\\n\\t\\t\\t\\t_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _writeCheckpoint(\\n\\t\\taddress delegatee,\\n\\t\\tuint32 nCheckpoints,\\n\\t\\tuint256 oldVotes,\\n\\t\\tuint256 newVotes\\n\\t) internal {\\n\\t\\tuint32 blockNumber = safe32(block.number, \\\"HDS/Block number overflow\\\");\\n\\n\\t\\tif (nCheckpoints \\u003e 0 \\u0026\\u0026 checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n\\t\\t\\tcheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n\\t\\t} else {\\n\\t\\t\\tcheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n\\t\\t\\tnumCheckpoints[delegatee] = nCheckpoints + 1;\\n\\t\\t}\\n\\n\\t\\temit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n\\t}\\n\\n\\tfunction safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n\\t\\trequire(n \\u003c 2**32, errorMessage);\\n\\t\\treturn uint32(n);\\n\\t}\\n\\n\\tfunction getChainId() internal pure returns (uint256) {\\n\\t\\tuint256 chainId;\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\t\\treturn chainId;\\n\\t}\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c \\u003e= a, errorMessage);\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Subtraction cannot underflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Subtraction cannot underflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b \\u003c= a, errorMessage);\\n\\t\\tuint256 c = a - b;\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\t// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n\\t\\t// benefit is lost if \\u0027b\\u0027 is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\t// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n\\t\\t// benefit is lost if \\u0027b\\u0027 is also tested.\\n\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, errorMessage);\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers.\\n\\t * Reverts on division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers.\\n\\t * Reverts with custom message on division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\t// Solidity only automatically asserts when dividing by 0\\n\\t\\trequire(b \\u003e 0, errorMessage);\\n\\t\\tuint256 c = a / b;\\n\\t\\t// assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * Reverts with custom message when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, errorMessage);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superior\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superior\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HDS","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25fb98aa0f6e37843a36d2d4182d4db6092e0edb4c41a04773925b5b1a7eab22"}]}