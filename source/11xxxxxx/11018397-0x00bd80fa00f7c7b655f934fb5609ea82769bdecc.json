{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract IOneSplitConsts {\r\n    // flags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_BANCOR + ...\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP = 0x01;\r\n    uint256 internal constant DEPRECATED_FLAG_DISABLE_KYBER = 0x02; // Deprecated\r\n    uint256 internal constant FLAG_DISABLE_BANCOR = 0x04;\r\n    uint256 internal constant FLAG_DISABLE_OASIS = 0x08;\r\n    uint256 internal constant FLAG_DISABLE_COMPOUND = 0x10;\r\n    uint256 internal constant FLAG_DISABLE_FULCRUM = 0x20;\r\n    uint256 internal constant FLAG_DISABLE_CHAI = 0x40;\r\n    uint256 internal constant FLAG_DISABLE_AAVE = 0x80;\r\n    uint256 internal constant FLAG_DISABLE_SMART_TOKEN = 0x100;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_BDAI = 0x400;\r\n    uint256 internal constant FLAG_DISABLE_IEARN = 0x800;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_USDT = 0x2000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_Y = 0x4000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\r\n    uint256 internal constant FLAG_DISABLE_WETH = 0x80000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH<>DAI or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\r\n    uint256 internal constant FLAG_DISABLE_IDLE = 0x800000;\r\n    uint256 internal constant FLAG_DISABLE_MOONISWAP = 0x1000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2 = 0x2000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ETH = 0x4000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_DAI = 0x8000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_USDC = 0x10000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_SPLIT_SOURCES = 0x20000000;\r\n    uint256 internal constant FLAG_DISABLE_ALL_WRAP_SOURCES = 0x40000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_PAX = 0x80000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_RENBTC = 0x100000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_TBTC = 0x200000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_USDT = 0x400000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_WBTC = 0x800000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_TBTC = 0x1000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_RENBTC = 0x2000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_DFORCE_SWAP = 0x4000000000;\r\n    uint256 internal constant FLAG_DISABLE_SHELL = 0x8000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN = 0x10000000000;\r\n    uint256 internal constant FLAG_DISABLE_MSTABLE_MUSD = 0x20000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_SBTC = 0x40000000000;\r\n    uint256 internal constant FLAG_DISABLE_DMM = 0x80000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_ALL = 0x100000000000;\r\n    uint256 internal constant FLAG_DISABLE_CURVE_ALL = 0x200000000000;\r\n    uint256 internal constant FLAG_DISABLE_UNISWAP_V2_ALL = 0x400000000000;\r\n    uint256 internal constant FLAG_DISABLE_SPLIT_RECALCULATION = 0x800000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_ALL = 0x1000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_1 = 0x2000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_2 = 0x4000000000000;\r\n    uint256 internal constant FLAG_DISABLE_BALANCER_3 = 0x8000000000000;\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x10000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x20000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x40000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_ENABLE_REFERRAL_GAS_SPONSORSHIP = 0x80000000000000; // Turned off by default\r\n    uint256 internal constant DEPRECATED_FLAG_ENABLE_MULTI_PATH_COMP = 0x100000000000000; // Deprecated, Turned off by default\r\n    uint256 internal constant FLAG_DISABLE_KYBER_ALL = 0x200000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_1 = 0x400000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_2 = 0x800000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_3 = 0x1000000000000000;\r\n    uint256 internal constant FLAG_DISABLE_KYBER_4 = 0x2000000000000000;\r\n    uint256 internal constant FLAG_ENABLE_CHI_BURN_BY_ORIGIN = 0x4000000000000000;\r\n}\r\n\r\n\r\ncontract IOneSplit is IOneSplitConsts {\r\n    function getExpectedReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function getExpectedReturnWithGas(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags, // See constants in IOneSplit.sol\r\n        uint256 destTokenEthPriceTimesGasPrice\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256 returnAmount,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256 flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n\r\ncontract IOneSplitMulti is IOneSplit {\r\n    function getExpectedReturnWithGasMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256[] memory parts,\r\n        uint256[] memory flags,\r\n        uint256[] memory destTokenEthPriceTimesGasPrices\r\n    )\r\n        public\r\n        view\r\n        returns(\r\n            uint256[] memory returnAmounts,\r\n            uint256 estimateGasAmount,\r\n            uint256[] memory distribution\r\n        );\r\n\r\n    function swapMulti(\r\n        IERC20[] memory tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] memory distribution,\r\n        uint256[] memory flags\r\n    )\r\n        public\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }\r\n}\r\n\r\n\r\ncontract Pool {\r\n    \r\n    using SafeMath for uint;\r\n\r\n\taddress public constant EXCHANGE_CONTRACT = 0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e;\r\n\taddress public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n\tuint[] public holders;\r\n\r\n\r\n\r\n\taddress[] public tokens; \r\n\tuint[] public weights;\r\n\tuint totalWeight;\r\n\r\n\tmapping(address => uint) public tokenBalances;\r\n\r\n// \tbool public active = true; \r\n\t\r\n\tmapping(address => bool) public systemAddresses;\r\n\t\r\n\tmodifier systemOnly {\r\n\t    require(systemAddresses[msg.sender], \"system only\");\r\n\t    _;\r\n\t}\r\n\r\n// \tmodifier isActive() { \r\n// \t\trequire (active); \r\n// \t\t_; \r\n// \t}\r\n\t\r\n// \tevent Withdrawn(address indexed from, uint value);\r\n// \tevent WithdrawnToken(address indexed from, address indexed token, uint amount);\r\n\t\r\n// \tfunction addSystemAddress(address newSystemAddress) public systemOnly {\r\n// \t    systemAddresses[newSystemAddress] = true;\r\n// \t}\r\n\t\r\n// \tconstructor(string memory name, string memory symbol, address _TMTTokenAddress, address[] memory _tokens, uint[] memory _weights) public ERC20(name, symbol) payable {\r\n// \t\trequire (_tokens.length == _weights.length, \"invalid config length\");\r\n\t\t\r\n// \t\tsystemAddresses[msg.sender] = true;\r\n\r\n// \t\tTMTTokenAddress = _TMTTokenAddress;\r\n\t\t\r\n// \t\tuint _totalWeight;\r\n\r\n// \t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n// \t\t\ttokens.push(_tokens[i]);\r\n// \t\t\tweights.push(_weights[i]);\r\n// \t\t\t_totalWeight += _weights[i];\r\n// \t\t}\r\n\r\n// \t\ttotalWeight = _totalWeight;\r\n\t\t\r\n\t\t\r\n// \t\taddress[] memory t1;\r\n// \t\tuint[] memory t2;\r\n// \t\tpoolIn(t1, t2);\r\n\t\t\r\n// \t\t_weights[0] = 5;\r\n// \t\t_weights[1] = 19;\r\n// \t\tupdatePool(_tokens, _weights);\r\n// \t}\r\n    \r\n    // address public USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    // address public BALANCER_ADDRESS = 0xba100000625a3754423978a60c9317c58a424e3D;\r\n\r\n//     constructor(string memory name, string memory symbol, address _TMTTokenAddress, address[] memory _tokens, uint[] memory _weights) public ERC20(name, symbol) payable {\r\n// \t\tIERC20(USDC_ADDRESS).transferFrom(msg.se)\r\n// \t}\r\n\r\n\tconstructor(address[] memory _tokens, uint[] memory _weights) public payable {\r\n\t\trequire (_tokens.length == _weights.length, \"invalid config length\");\r\n\t\t\r\n\t\tsystemAddresses[msg.sender] = true;\r\n\r\n// \t\tTMTTokenAddress = _TMTTokenAddress;\r\n\t\t\r\n\t\tuint _totalWeight;\r\n\r\n\t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n\t\t\ttokens.push(_tokens[i]);\r\n\t\t\tweights.push(_weights[i]);\r\n\t\t\t_totalWeight += _weights[i];\r\n\t\t}\r\n\r\n\t\ttotalWeight = _totalWeight;\r\n\t\t\r\n\t\taddress[] memory t1;\r\n\t\tuint[] memory t2;\r\n\t\tpoolIn(t1, t2);\r\n\t\t\r\n// \t\t_weights[0] = 5;\r\n// \t\t_weights[1] = 19;\r\n// \t\t_tokens[0] = USDC_ADDRESS;\r\n// \t\t_tokens[0] = BALANCER_ADDRESS;\r\n// \t\tupdatePool(_tokens, _weights);\r\n// \t\trequire(IERC20(BALANCER_ADDRESS).balanceOf(address(this)) > 0);\r\n\t}\r\n\r\n\tfunction poolIn(address[] memory _tokens, uint[] memory _values) public payable {\r\n\t\t// require(IERC20(TMTTokenAddress).balanceOf(msg.sender) > 0, \"TMTToken balance must be greater then 0\");\r\n\t\taddress[] memory returnedTokens;\r\n\t\tuint[] memory returnedAmounts;\r\n\t\tuint ethValue;\r\n\t\t\r\n\t\tif(_tokens.length == 0) {\r\n\t\t\trequire (msg.value > 0.0001 ether, \"0.0001 ether min pool in\");\r\n\t\t\tethValue = msg.value;\r\n\r\n\t\t\t(returnedTokens, returnedAmounts) = swap(ETH_ADDRESS, ethValue, tokens, weights, totalWeight);\r\n\t\t} else if(_tokens.length == 1) {\r\n\t\t\tethValue = calculateTokensForEther(_tokens, _values);\r\n\t\t\tassert(ethValue > 0.0001 ether);\r\n\r\n\t\t\t(returnedTokens, returnedAmounts) = swap(_tokens[0], _values[0], tokens, weights, totalWeight);\r\n\t\t} else {\r\n\t\t\tethValue = sellTokensForEther(_tokens, _values);\r\n\t\t\tassert(ethValue > 0.0001 ether);\r\n\r\n\t\t\t(returnedTokens, returnedAmounts) = swap(ETH_ADDRESS, ethValue, tokens, weights, totalWeight);\r\n\t\t}\r\n\r\n\t\tfor (uint i = 0; i < returnedTokens.length; i++) {\r\n\t\t\ttokenBalances[returnedTokens[i]] += returnedAmounts[i];\r\n\t\t}\r\n\r\n// \t\t_mint(msg.sender, ethValue);\r\n\t}\r\n\r\n\tfunction withdraw() public systemOnly{\r\n// \t\tuint _balance = balanceOf(msg.sender);\r\n// \t\tuint localWeight = _balance.mul(1 ether).div(totalSupply());\r\n// \t\trequire(localWeight > 0, \"no balance in this pool\");\r\n\r\n// \t\t_burn(msg.sender, _balance);\r\n\r\n\t\tfor (uint i = 0; i < tokens.length; i++) {\r\n\t\t\tuint withdrawBalance = tokenBalances[tokens[i]];\r\n\t\t\ttokenBalances[tokens[i]] = tokenBalances[tokens[i]].sub(withdrawBalance);\r\n\t\t\tIERC20(tokens[i]).transfer(msg.sender, withdrawBalance);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t//@TODO\r\n\t//-----------------------------\r\n\tuint[] buf; \r\n\taddress[] newTokens;\r\n\tuint[] newWeights;\r\n\r\n\tuint newTotalWeight;\r\n\t//-----------------------------\r\n\t\r\n\r\n\tfunction updatePool(address[] memory _tokens, uint[] memory _weights) public systemOnly {\r\n\t\trequire (_tokens.length == _weights.length, \"invalid config length\");\r\n\t\t\r\n\t\tuint _newTotalWeight;\r\n\r\n\t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n\t\t\t_newTotalWeight += _weights[i];\r\n\t\t}\r\n\t\t\r\n\t\tnewTokens = _tokens;\r\n\t\tnewWeights = _weights;\r\n\t\tnewTotalWeight = _newTotalWeight;\r\n\r\n\t\trebalance();\r\n\t}\r\n\r\n// \tfunction setPoolStatus(bool _active) public systemOnly {\r\n// \t\tactive = _active;\r\n// \t}\r\n\r\n\tfunction calculateTokensForEther(address[] memory _tokens, uint[] memory _amounts) internal returns(uint) {\r\n\t\tuint _amount;\r\n\t\tuint _totalAmount;\r\n\t\tuint[] memory _distribution;\r\n\t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n\t\t\t(_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(_tokens[i]), IERC20(ETH_ADDRESS), _amounts[i], 1, 0);\r\n\t\t\t_totalAmount += _amount;\r\n\t\t}\r\n\r\n\t\treturn _totalAmount;\r\n\t}\r\n\t\r\n    address public DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\t/*\r\n\t * @dev sell array of tokens for ether\r\n\t */\r\n\tfunction sellTokensForEther(address[] memory _tokens, uint[] memory _amounts) internal returns(uint) {\r\n\t\tuint _amount;\r\n\t\tuint _totalAmount;\r\n\t\tuint[] memory _distribution;\r\n\t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n\t\t    if (_amounts[i] == 0) {\r\n\t\t        continue;\r\n\t\t    }\r\n\t\t    \r\n\t\t    if (_tokens[i] == WETH_ADDRESS) {\r\n\t\t        _totalAmount += _amounts[i];\r\n\t\t        continue;\r\n\t\t    }\r\n\t\t    IERC20(_tokens[i]).approve(EXCHANGE_CONTRACT, _amounts[i]);\r\n\t\t    \r\n\t\t  //  require(IERC20(DAI_ADDRESS).allowance(address(this), EXCHANGE_CONTRACT) != uint(-1), \"!!!!!\");\r\n\t\t\t(_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(_tokens[i]), IERC20(WETH_ADDRESS), _amounts[i], 1, 0);\r\n\t\t\tif (_amount == 0) {\r\n\t\t        continue;\r\n\t\t    }\r\n\t\t\tIOneSplit(EXCHANGE_CONTRACT).swap(IERC20(_tokens[i]), IERC20(WETH_ADDRESS), _amounts[i], _amount, _distribution, 0);\r\n\r\n\t\t\t_totalAmount += _amount;\r\n\t\t}\r\n\r\n\t\treturn _totalAmount;\r\n\t}\r\n\r\n\tfunction rebalance() internal {\r\n\t    \r\n\t\tuint[] memory buf2;\r\n\t\tbuf = buf2;\r\n\r\n\t\tfor (uint i = 0; i < tokens.length; i++) {\r\n\t\t\tbuf.push(tokenBalances[tokens[i]]);\r\n\t\t\ttokenBalances[tokens[i]] = 0;\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\tuint ethValue = sellTokensForEther(tokens, buf);\r\n\r\n\t\t\r\n\t\ttokens = newTokens;\r\n\t\tweights = newWeights;\r\n\t\ttotalWeight = newTotalWeight;\r\n\t\t\t\r\n\t\t\r\n// \t\trequire(ethValue > 0, \"selling value = 0\");\r\n// \t\trequire(ethValue == address(this).balance);\r\n\t\t\r\n\t\tbuf = buf2;\r\n\t\t\r\n\t\t\r\n\t\tswap2(WETH_ADDRESS, ethValue);\r\n\r\n\t\tfor(uint i = 0; i < tokens.length; i++) {\r\n\t\t\ttokenBalances[tokens[i]] = buf[i];\r\n\t\t}\r\n\t\t\r\n\t\t\r\n// \t\trequire(IERC20(USDC_ADDRESS).balanceOf(address(this)) > 0);\r\n// \t\trequire(IERC20(BALANCER_ADDRESS).balanceOf(address(this)) > 0);\r\n\t}\r\n\r\n\tfunction swap(address _token, uint _value, address[] memory _tokens, uint[] memory _weights, uint _totalWeight) internal returns(address[] memory, uint[] memory) {\r\n\r\n\t\tuint _tokenPart;\r\n\t\tuint _amount;\r\n\t\tuint[] memory _distribution;\r\n\r\n\t\tfor(uint i = 0; i < _tokens.length; i++) {\r\n\t\t\t_tokenPart = _value.mul(_weights[i]).div(_totalWeight);\r\n\r\n\t\t\t(_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(_token), IERC20(_tokens[i]), _tokenPart, 1, 0);\r\n\r\n\t\t\tif (_token == ETH_ADDRESS) {\r\n\t\t\t\tIOneSplit(EXCHANGE_CONTRACT).swap.value(_tokenPart)(IERC20(_token), IERC20(_tokens[i]), _tokenPart, _amount, _distribution, 0);\r\n\t\t\t} else {\r\n\t\t\t    IERC20(_tokens[i]).approve(EXCHANGE_CONTRACT, _tokenPart);\r\n\t\t\t\tIOneSplit(EXCHANGE_CONTRACT).swap(IERC20(_token), IERC20(_tokens[i]), _tokenPart, _amount, _distribution, 0);\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t_weights[i] = _amount;\r\n\t\t}\r\n\t\t\r\n\t\treturn (_tokens, _weights);\r\n\t}\r\n\t\r\n\tfunction swap2(address _token, uint _value) internal {\r\n\t    \r\n\t\tuint _tokenPart;\r\n\t\tuint _amount;\r\n\t\t\r\n\t\tuint[] memory _distribution;\r\n\t\t\r\n\t\tIERC20(_token).approve(EXCHANGE_CONTRACT, _value);\r\n\t\t\r\n\t\t\r\n        \r\n\t\tfor(uint i = 0; i < newTokens.length; i++) {\r\n            \r\n\t\t\t_tokenPart = _value.mul(newWeights[i]).div(newTotalWeight);\r\n\t\t\t\r\n\t\t\tif(_tokenPart == 0) {\r\n\t\t\t    buf.push(0);\r\n\t\t\t    continue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t(_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(_token), IERC20(newTokens[i]), _tokenPart, 1, 0);\r\n\t\t\t\r\n\r\n\t\t\tIOneSplit(EXCHANGE_CONTRACT).swap(IERC20(_token), IERC20(newTokens[i]), _tokenPart, _amount, _distribution, 0);\r\n\r\n            buf.push(_amount);\r\n            \r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateAmountsViaWeights(uint _ethAmount) public view returns(uint[] memory res) {\r\n\t\tfor(uint i = 1; i <= tokens.length; i++) {\r\n\t\t\tres[i] = _ethAmount.mul(weights[i]).div(totalWeight);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXCHANGE_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateAmountsViaWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"poolIn\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"systemAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Pool","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://77a535ec18210ce1e5d7130511e1e829c11b8e85e125632f15518ff2f7da54b0"}]}