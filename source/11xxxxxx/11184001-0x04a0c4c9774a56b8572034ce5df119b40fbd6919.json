{"status":"1","message":"OK","result":[{"SourceCode":"{\"ContactCoinToken.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract ContactCoinToken is IERC20 {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowed;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /**\\r\\n    * @dev Public parameters to define the token\\r\\n    */\\r\\n\\r\\n    // Token symbol (short)\\r\\n    string public symbol;\\r\\n\\r\\n    // Token name (Long)\\r\\n    string public  name;\\r\\n\\r\\n    // Decimals (18 maximum)\\r\\n    uint8 public decimals;\\r\\n\\r\\n    /**\\r\\n    * @dev Public functions to make the contract accesible\\r\\n    */\\r\\n    constructor (address initialAccount, string memory _tokenSymbol, string memory _tokenName, uint256 initialBalance) public {\\r\\n\\r\\n        // Initialize Contract Parameters\\r\\n        symbol = _tokenSymbol;\\r\\n        name = _tokenName;\\r\\n        decimals = 18;  // default decimals is going to be 18 always\\r\\n\\r\\n        _mint(initialAccount, initialBalance);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner) public view returns (uint256) {\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) public returns (bool) {\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = value;\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\r\\n        _transfer(from, to, value);\\r\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\r\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 value) internal {\\r\\n        require(to != address(0));\\r\\n\\r\\n        _balances[from] = _balances[from].sub(value);\\r\\n        _balances[to] = _balances[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        _balances[account] = _balances[account].add(value);\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0));\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\r\\n        _burn(account, value);\\r\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Burnable Token Contract\\r\\n * @dev Token that can be irreversibly burned (destroyed).\\r\\n */\\r\\ncontract ERC20Burnable is ContactCoinToken {\\r\\n\\r\\n    bool private _burnableActive;\\r\\n\\r\\n    function burn(uint256 value) public whenBurnableActive {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address from, uint256 value) public whenBurnableActive {\\r\\n        _burnFrom(from, value);\\r\\n    }\\r\\n\\r\\n    function _setBurnableActive(bool _active) internal {\\r\\n        _burnableActive = _active;\\r\\n    }\\r\\n\\r\\n    modifier whenBurnableActive() {\\r\\n        require(_burnableActive);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(!has(role, account));\\r\\n\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(account != address(0));\\r\\n        require(has(role, account));\\r\\n\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0));\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MinterRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(isMinter(msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    function addMinter(address account) public onlyMinter {\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    function renounceMinter() public {\\r\\n        _removeMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addMinter(address account) internal {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removeMinter(address account) internal {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Mintable is ContactCoinToken, MinterRole {\\r\\n\\r\\n    bool private _mintableActive;\\r\\n    \\r\\n    function mint(address to, uint256 value) public onlyMinter whenMintableActive returns (bool) {\\r\\n        _mint(to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _setMintableActive(bool _active) internal {\\r\\n        _mintableActive = _active;\\r\\n    }\\r\\n\\r\\n    modifier whenMintableActive() {\\r\\n        require(_mintableActive);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract PauserRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyPauser {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Pausable is PauserRole {\\r\\n    event Paused(address account);\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _pausableActive;\\r\\n    bool private _paused;\\r\\n\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return true if the contract is paused, false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused whenPausableActive {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused whenPausableActive {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Options to activate or deactivate Pausable ability\\r\\n     */\\r\\n\\r\\n    function _setPausableActive(bool _active) internal {\\r\\n        _pausableActive = _active;\\r\\n    }\\r\\n\\r\\n    modifier whenPausableActive() {\\r\\n        require(_pausableActive);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n}\"},\"ERC20AUX.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\nimport \\\"./ContactCoinToken.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Advanced ERC20 token which complements the main token\\r\\n *\\r\\n * @dev Implementation of the basic standard token plus mint and burn public functions.\\r\\n */\\r\\ncontract ERC20AUX is ContactCoinToken, ERC20Burnable, ERC20Mintable, Pausable {\\r\\n\\r\\n    // maximum capital, if defined \\u003e 0\\r\\n    uint256 private _cap;\\r\\n\\r\\n    constructor (\\r\\n        address initialAccount, string memory _tokenSymbol, string memory _tokenName, uint256 initialBalance, uint256 cap,\\r\\n        bool _burnableOption, bool _mintableOption, bool _pausableOption\\r\\n    ) public \\r\\n        ContactCoinToken(initialAccount, _tokenSymbol, _tokenName, initialBalance) {\\r\\n\\r\\n        // we must add customer account as the first minter\\r\\n        addMinter(initialAccount);\\r\\n\\r\\n        // and this contract must renounce minter role\\r\\n        renounceMinter();\\r\\n\\r\\n        // same with pauser\\r\\n        addPauser(initialAccount);\\r\\n        renouncePauser();\\r\\n\\r\\n        if (cap \\u003e 0) {\\r\\n            _cap = cap; // maximum capitalization limited\\r\\n        } else {\\r\\n            _cap = 0; // unlimited capitalization\\r\\n        }\\r\\n    \\r\\n        // activate or deactivate options\\r\\n        _setBurnableActive(_burnableOption);\\r\\n        _setMintableActive(_mintableOption);\\r\\n        _setPausableActive(_pausableOption);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the cap for the token minting.\\r\\n     */\\r\\n    function cap() public view returns (uint256) {\\r\\n        return _cap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * limit the mint to a maximum cap only if cap is defined\\r\\n     */\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        if (_cap \\u003e 0) {\\r\\n            require(totalSupply().add(value) \\u003c= _cap);\\r\\n        }\\r\\n        super._mint(account, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pausable options\\r\\n     */\\r\\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.transfer(to, value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from,address to, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.transferFrom(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\\r\\n        return super.approve(spender, value);\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\\r\\n        return super.increaseAllowance(spender, addedValue);\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\\r\\n        return super.decreaseAllowance(spender, subtractedValue);\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.7;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.5.7;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    \\r\\n    int256 constant private INT256_MIN = -2**255;\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        require(!(a == -1 \\u0026\\u0026 b == INT256_MIN)); // This is the only case of overflow not detected by the check below\\r\\n\\r\\n        int256 c = a * b;\\r\\n        require(c / a == b);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\\r\\n        require(!(b == -1 \\u0026\\u0026 a == INT256_MIN)); // This is the only case of overflow\\r\\n\\r\\n        int256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two signed integers, reverts on overflow.\\r\\n    */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two unsigned integers, reverts on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two signed integers, reverts on overflow.\\r\\n    */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n    * reverts when dividing by zero.\\r\\n    */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n// AktiViti\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialAccount\",\"type\":\"address\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ContactCoinToken","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d258cb3015078c3e36323d2b4420fd61a50135ec000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000000000000000000000034354430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b436f6e74616374436f696e000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c834b7d6a764ae5979774562c36b4eaecf33c95dc4111d810976a9d979868301"}]}