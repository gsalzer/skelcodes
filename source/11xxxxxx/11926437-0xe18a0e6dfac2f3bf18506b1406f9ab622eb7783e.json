{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin\\contracts\\math\\SafeMath.sol\r\n\r\n// SPDX-License-Identifier: SimPL-2.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\IStakingV2.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\nabstract contract IStakingV2 {\r\n    event Staked(address indexed user, uint256 amount, uint256 total, address referrer);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\r\n\r\n    function stake(uint256 amount, address referrer) external virtual;\r\n    function stakeFor(address user, uint256 amount, address referrer) external virtual;\r\n    function unstake(uint256 amount) external virtual;\r\n    function totalStakedFor(address addr) public virtual view returns (uint256);\r\n    function totalStaked() public virtual view returns (uint256);\r\n    function token() external virtual view returns (address);\r\n\r\n    /**\r\n     * @return False. This application does not support staking history.\r\n     */\r\n    function supportsHistory() external pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\n// File: contracts\\TokenPool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title A simple holder of tokens.\r\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\r\n * needs to hold multiple distinct pools of the same token.\r\n */\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\r\n        return token.transfer(to, value);\r\n    }\r\n\r\n    function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {\r\n        require(address(token) != tokenToRescue, 'TokenPool: Cannot claim token held by the contract');\r\n\r\n        return IERC20(tokenToRescue).transfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\IReferrerBook.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferrerBook {\r\n    function affirmReferrer(address user, address referrer) external returns (bool);\r\n    function getUserReferrer(address user) external view returns (address);\r\n    function getUserTopNode(address user) external view returns (address);\r\n    function getUserNormalNode(address user) external view returns (address);\r\n}\r\n\r\n\r\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20Burnable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\DelegateERC20.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\nabstract contract DelegateERC20 is ERC20Burnable {\r\n    // @notice A record of each accounts delegate\r\n    mapping(address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    // support delegates mint\r\n    function _mint(address account, uint256 amount) internal virtual override {\r\n        super._mint(account, amount);\r\n\r\n        // add delegates to the minter\r\n        _moveDelegates(address(0), _delegates[account], amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._transfer(sender, recipient, amount);\r\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\r\n    }\r\n\r\n    // support delegates burn\r\n    function burn(uint256 amount) public virtual override {\r\n        super.burn(amount);\r\n\r\n        // del delegates to backhole\r\n        _moveDelegates(_delegates[_msgSender()], address(0), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual override {\r\n        super.burnFrom(account, amount);\r\n\r\n        // del delegates to the backhole\r\n        _moveDelegates(_delegates[account], address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 domainSeparator =\r\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\r\n\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n\r\n        bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), 'Governance::delegateBySig: invalid signature');\r\n        require(nonce == nonces[signatory]++, 'Governance::delegateBySig: invalid nonce');\r\n        require(now <= expiry, 'Governance::delegateBySig: signature expired');\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\r\n        require(blockNumber < block.number, 'Governance::getPriorVotes: not yet determined');\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2;\r\n            // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator);\r\n        // balance of underlying balances (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(block.number, 'Governance::_writeCheckpoint: block number exceeds 32 bits');\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        return chainId;\r\n    }\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n}\r\n\r\n// File: contracts\\DSAGovToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract DSAGovToken is DelegateERC20, Ownable {\r\n    constructor() public ERC20(\"DSBTC\", \"DSBTC\") {}\r\n\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\GovTokenPool.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ninterface IOracle {\r\n    function getData() external returns (uint256, bool);\r\n}\r\n\r\ncontract GovTokenPool is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct PoolInfo {\r\n        uint256 allocPoint;\r\n        uint256 lastRewardBlock;\r\n        uint256 accTokenPerShare;\r\n    }\r\n\r\n    mapping(address => PoolInfo) public poolInfo;\r\n    mapping(address => mapping(address => uint256)) public userDebt;\r\n\r\n    DSAGovToken public token;\r\n    IOracle public cpiOracle;\r\n    IOracle public marketOracle;\r\n    uint256 public totalAllocPoint;\r\n    uint256 public startBlock;\r\n\r\n    address public governance;\r\n\r\n    uint256 public priceRate;\r\n\r\n    uint256 constant BASE_CPI = 100 * 10**18;\r\n    uint256 public constant BASE_REWARD_PER_BLOCK = 111 * 10**16;\r\n\r\n    uint256 constant MAX_GAP_BLOCKS = 6500;\r\n    uint256 constant BLOCKS_4YEARS = 2372500 * 4;\r\n\r\n    uint256 constant ONE = 10**18;\r\n    uint256 constant ZERO_PT_ONE = 10**17;\r\n\r\n    uint256 constant PERFECT_RATE = 1 * ONE; //100%\r\n    uint256 constant HIGH_RATE_D = 3 * ZERO_PT_ONE;\r\n    uint256 constant HIGH_RATE = PERFECT_RATE + HIGH_RATE_D; //130%\r\n    uint256 constant LOW_RATE_D = 9 * ZERO_PT_ONE;\r\n    uint256 constant LOW_RATE = PERFECT_RATE - LOW_RATE_D; //10%\r\n\r\n    constructor(\r\n        DSAGovToken _token,\r\n        IOracle _cpiOracle,\r\n        IOracle _marketOracle,\r\n        uint256 _startBlock\r\n    ) public {\r\n        token = _token;\r\n        cpiOracle = _cpiOracle;\r\n        marketOracle = _marketOracle;\r\n        startBlock = _startBlock;\r\n\r\n        governance = _msgSender();\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(governance == _msgSender(), \"Only governance\");\r\n        _;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function syncRate() external {\r\n        uint256 cpi;\r\n        bool cpiValid;\r\n        (cpi, cpiValid) = cpiOracle.getData();\r\n        if (!cpiValid) {\r\n            priceRate = 0;\r\n            return;\r\n        }\r\n\r\n        uint256 rate;\r\n        bool exRateValid;\r\n        (rate, exRateValid) = marketOracle.getData();\r\n        if (!exRateValid) {\r\n            priceRate = 0;\r\n            return;\r\n        }\r\n        uint256 targetRate = cpi.mul(10**18).div(BASE_CPI);\r\n\r\n        priceRate = rate.mul(ONE).div(targetRate);\r\n    }\r\n\r\n    function addPool(address _addr, uint256 _allocPoint)\r\n        external\r\n        onlyGovernance()\r\n    {\r\n        uint256 lastRewardBlock =\r\n            block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n\r\n        require(poolInfo[_addr].lastRewardBlock == 0, \"pool exists\");\r\n\r\n        poolInfo[_addr] = PoolInfo({\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accTokenPerShare: 0\r\n        });\r\n    }\r\n\r\n    function removePool(address _addr) external onlyGovernance() {\r\n        delete poolInfo[_addr];\r\n    }\r\n\r\n    function setPool(address _addr, uint256 _allocPoint)\r\n        external\r\n        onlyGovernance()\r\n    {\r\n        require(poolInfo[_addr].lastRewardBlock != 0, \"pool not exists\");\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_addr].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_addr].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function transferGovernance(address _newAddr) external onlyGovernance() {\r\n        require(_newAddr != address(0), \"zero address\");\r\n\r\n        governance = _newAddr;\r\n    }\r\n\r\n    function calcRatedReward(\r\n        uint256 _initReward,\r\n        uint256 r\r\n    ) internal pure returns (uint256) {\r\n\r\n        uint256 f;\r\n\r\n        if(r == PERFECT_RATE) {\r\n            return _initReward;\r\n        }\r\n        \r\n        if(r > PERFECT_RATE && r < HIGH_RATE) {\r\n            f = HIGH_RATE.sub(r).mul(ONE).div(HIGH_RATE_D);\r\n        } else if(r < PERFECT_RATE && r > LOW_RATE) {\r\n            f = r.sub(LOW_RATE).mul(ONE).div(LOW_RATE_D);\r\n        }\r\n\r\n        return f.mul(f).div(ONE).mul(_initReward).div(ONE);\r\n    }\r\n\r\n    function _updatePool(PoolInfo storage pool, uint256 _lpSupply) private {\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (_lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        if (priceRate == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        if (priceRate >= HIGH_RATE || priceRate <= LOW_RATE) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n\r\n        if (blocks > MAX_GAP_BLOCKS) {\r\n            blocks = MAX_GAP_BLOCKS;\r\n        }\r\n\r\n        uint256 halveTimes = block.number.sub(startBlock).div(BLOCKS_4YEARS);\r\n\r\n        uint256 perfectReward =\r\n            blocks\r\n                .mul(BASE_REWARD_PER_BLOCK)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoint)\r\n                .div(2**halveTimes);\r\n\r\n        uint256 reward =\r\n            calcRatedReward(perfectReward, priceRate);\r\n\r\n        if (reward > 0) {\r\n            token.mint(address(this), reward);\r\n            pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                reward.mul(1e12).div(_lpSupply)\r\n            );\r\n        }\r\n\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function updatePool(uint256 _lpSupply) external {\r\n        address poolAddr = _msgSender();\r\n        PoolInfo storage pool = poolInfo[poolAddr];\r\n        require(pool.lastRewardBlock != 0, 'Pool not exists');\r\n\r\n        _updatePool(pool, _lpSupply);\r\n    }\r\n\r\n    function updateAndClaim(\r\n        address _userAddr,\r\n        uint256 _userAmount,\r\n        uint256 _lpSupply\r\n    ) external {\r\n        address poolAddr = _msgSender();\r\n        PoolInfo storage pool = poolInfo[poolAddr];\r\n        require(pool.lastRewardBlock != 0, 'Pool not exists');\r\n\r\n        _updatePool(pool, _lpSupply);\r\n\r\n        uint256 toClaim =\r\n            _userAmount.mul(pool.accTokenPerShare).div(1e12).sub(\r\n                userDebt[poolAddr][_userAddr]\r\n            );\r\n\r\n        if(toClaim > 0) {\r\n            require(token.transfer(_userAddr, toClaim), 'transfer dbtc error');\r\n        } \r\n    }\r\n\r\n    function updateDebt(address _userAddr, uint256 _userAmount) external {\r\n        address poolAddr = _msgSender();\r\n        PoolInfo memory pool = poolInfo[poolAddr];\r\n        require(pool.lastRewardBlock != 0, 'Pool not exists');\r\n        userDebt[poolAddr][_userAddr] = _userAmount.mul(pool.accTokenPerShare).div(1e12);\r\n    }\r\n\r\n    function pendingReward(\r\n        address _poolAddr,\r\n        uint256 _userAmount,\r\n        address _userAddr\r\n    ) external view returns (uint256) {\r\n        PoolInfo memory pool = poolInfo[_poolAddr];\r\n        return\r\n            _userAmount.mul(pool.accTokenPerShare).div(1e12).sub(\r\n                userDebt[_poolAddr][_userAddr]\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts\\TokenGeyserV2.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenGeyserV2 is IStakingV2, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        address referrer\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total\r\n    );\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    // amount: Unlocked tokens, total: Total locked tokens\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n    GovTokenPool public govTokenPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public constant BONUS_DECIMALS = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedShares = 0;\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 private _totalStakingShareSeconds = 0;\r\n    uint256 private _lastAccountingTimestampSec = now;\r\n    uint256 private _maxUnlockSchedules = 0;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    address public referrerBook;\r\n\r\n    //share percent below: user + referrer + topNode == 100% == 10000\r\n    uint256 public constant USER_SHARE_PCT = 8000;\r\n    uint256 public constant REF_SHARE_PCT = 1500;\r\n    uint256 public constant NODE_SHARE_PCT = 500;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedShares;\r\n        uint256 unlockedShares;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\r\n     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     */\r\n    constructor(\r\n        IERC20 stakingToken,\r\n        IERC20 distributionToken,\r\n        GovTokenPool _govTokenPool,\r\n        uint256 maxUnlockSchedules,\r\n        uint256 startBonus_,\r\n        uint256 bonusPeriodSec_,\r\n        uint256 initialSharesPerToken,\r\n        address referrerBook_\r\n    ) public {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(\r\n            startBonus_ <= 10**BONUS_DECIMALS,\r\n            \"TokenGeyser: start bonus too high\"\r\n        );\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ != 0, \"TokenGeyser: bonus period is zero\");\r\n        require(\r\n            initialSharesPerToken > 0,\r\n            \"TokenGeyser: initialSharesPerToken is zero\"\r\n        );\r\n        require(\r\n            referrerBook_ != address(0),\r\n            \"TokenGeyser: referrer book is zero\"\r\n        );\r\n\r\n        require(\r\n            address(_govTokenPool) != address(0),\r\n            \"TokenGeyser: govTokenPool is zero\"\r\n        );\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        govTokenPool = _govTokenPool;\r\n        startBonus = startBonus_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _maxUnlockSchedules = maxUnlockSchedules;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n\r\n        referrerBook = referrerBook_;\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users receive as they unstake.\r\n     */\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        assert(_unlockedPool.token() == _lockedPool.token());\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the user.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param referrer User's Referrer\r\n     */\r\n    function stake(uint256 amount, address referrer) external override {\r\n        _stakeFor(msg.sender, msg.sender, amount, referrer);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\r\n     * @param user User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     * @param referrer User's Referrer\r\n     */\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount,\r\n        address referrer\r\n    ) external override onlyOwner {\r\n        _stakeFor(msg.sender, user, amount, referrer);\r\n    }\r\n\r\n    /**\r\n     * @dev Private implementation of staking methods.\r\n     * @param staker User address who deposits tokens to stake.\r\n     * @param beneficiary User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function _stakeFor(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount,\r\n        address referrer\r\n    ) private {\r\n        require(amount > 0, \"TokenGeyser: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"TokenGeyser: beneficiary is zero address\"\r\n        );\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do\"\r\n        );\r\n\r\n        uint256 mintedStakingShares = (totalStakingShares > 0)\r\n            ? totalStakingShares.mul(amount).div(totalStaked())\r\n            : amount.mul(_initialSharesPerToken);\r\n        require(\r\n            mintedStakingShares > 0,\r\n            \"TokenGeyser: Stake amount is too small\"\r\n        );\r\n\r\n        updateAccounting();\r\n\r\n        govTokenPool.updateAndClaim(beneficiary, totalStakedFor(beneficiary), totalStaked());\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, now);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n        // Already set in updateAccounting()\r\n        // _lastAccountingTimestampSec = now;\r\n\r\n        \r\n        // interactions\r\n        require(\r\n            _stakingPool.token().transferFrom(\r\n                staker,\r\n                address(_stakingPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into staking pool failed\"\r\n        );\r\n\r\n        govTokenPool.updateDebt(beneficiary, totalStakedFor(beneficiary));\r\n\r\n        if (referrer != address(0) && referrer != staker) {\r\n            IReferrerBook(referrerBook).affirmReferrer(staker, referrer);\r\n        }\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), referrer);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     */\r\n    function unstake(uint256 amount) external override{\r\n        _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeQuery(uint256 amount) public returns (uint256) {\r\n        return _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstake(uint256 amount) private returns (uint256) {\r\n        updateAccounting();\r\n\r\n        // checks\r\n        require(amount > 0, \"TokenGeyser: unstake amount is zero\");\r\n        require(\r\n            totalStakedFor(msg.sender) >= amount,\r\n            \"TokenGeyser: unstake amount is greater than total user stakes\"\r\n        );\r\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\r\n            totalStaked()\r\n        );\r\n        require(\r\n            stakingSharesToBurn > 0,\r\n            \"TokenGeyser: Unable to unstake amount this small\"\r\n        );\r\n\r\n        govTokenPool.updateAndClaim(msg.sender, totalStakedFor(msg.sender), totalStaked());\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(\r\n                    lastStake.stakingShares\r\n                );\r\n                accountStakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(\r\n                    sharesLeftToBurn\r\n                );\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // totals.lastAccountingTimestampSec = now;\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // _lastAccountingTimestampSec = now;\r\n        // interactions\r\n        require(\r\n            _stakingPool.transfer(msg.sender, amount),\r\n            \"TokenGeyser: transfer out of staking pool failed\"\r\n        );\r\n\r\n        govTokenPool.updateDebt(msg.sender, totalStakedFor(msg.sender));\r\n\r\n        uint256 userRewardAmount = _rewardUserAndReferrers(\r\n            msg.sender,\r\n            rewardAmount\r\n        );\r\n\r\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender));\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\r\n        );\r\n        return userRewardAmount;\r\n    }\r\n\r\n    function _rewardUserAndReferrers(address user, uint256 rewardAmount)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        //0. reward user\r\n        uint256 userAmount = rewardAmount.mul(USER_SHARE_PCT).div(10000);\r\n        require(\r\n            _unlockedPool.transfer(user, userAmount),\r\n            \"TokenGeyser: transfer out of unlocked pool failed(user)\"\r\n        );\r\n\r\n        IReferrerBook refBook = IReferrerBook(referrerBook);\r\n\r\n        //1. reward referrer\r\n        uint256 amount = rewardAmount.mul(REF_SHARE_PCT).div(10000);\r\n        address referrer = refBook.getUserReferrer(user);\r\n        if (amount > 0 && referrer != address(0)) {\r\n            _unlockedPool.transfer(referrer, amount);\r\n        }\r\n\r\n        //2. reward top node\r\n        amount = rewardAmount.mul(NODE_SHARE_PCT).div(10000);\r\n        address topNode = refBook.getUserTopNode(user);\r\n        if (amount > 0 && topNode != address(0)) {\r\n            _unlockedPool.transfer(topNode, amount);\r\n        }\r\n\r\n        return userAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\r\n     *      encourage long-term deposits instead of constant unstake/restakes.\r\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\r\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\r\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\r\n     *                            unstake op. Any bonuses are already applied.\r\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\r\n     *                            distribution tokens.\r\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\r\n     *                     the time-bonus.\r\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\r\n     *         newly added tokens.\r\n     */\r\n    function computeNewReward(\r\n        uint256 currentRewardTokens,\r\n        uint256 stakingShareSeconds,\r\n        uint256 stakeTimeSec\r\n    ) private view returns (uint256) {\r\n        uint256 newRewardTokens = totalUnlocked().mul(stakingShareSeconds).div(\r\n            _totalStakingShareSeconds\r\n        );\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**BONUS_DECIMALS;\r\n        uint256 bonusedReward = startBonus\r\n            .add(\r\n            oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec)\r\n        )\r\n            .mul(newRewardTokens)\r\n            .div(oneHundredPct);\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    /**\r\n     * @param addr The user to look up staking information for.\r\n     * @return The number of staking tokens deposited for addr.\r\n     */\r\n    function totalStakedFor(address addr) public override view returns (uint256) {\r\n        return\r\n            totalStakingShares > 0\r\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\r\n                    totalStakingShares\r\n                )\r\n                : 0;\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public override view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Note that this application has a staking token as well as a distribution token, which\r\n     * may be different. This function is required by EIP-900.\r\n     * @return The deposit token used for staking.\r\n     */\r\n    function token() external override view returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to update the accounting state of the system.\r\n     *      Global state and state for the caller are updated.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function updateAccounting()\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds = now\r\n            .sub(_lastAccountingTimestampSec)\r\n            .mul(totalStakingShares);\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\r\n            newStakingShareSeconds\r\n        );\r\n        _lastAccountingTimestampSec = now;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserStakingShareSeconds = now\r\n            .sub(totals.lastAccountingTimestampSec)\r\n            .mul(totals.stakingShares);\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\r\n            newUserStakingShareSeconds\r\n        );\r\n        totals.lastAccountingTimestampSec = now;\r\n\r\n        uint256 totalUserRewards = (_totalStakingShareSeconds > 0)\r\n            ? totalUnlocked().mul(totals.stakingShareSeconds).div(\r\n                _totalStakingShareSeconds\r\n            )\r\n            : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Total number of locked distribution tokens.\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Total number of unlocked distribution tokens.\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Number of unlock schedules.\r\n     */\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    /**\r\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\r\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\r\n     *      linearly over the duraction of durationSec timeframe.\r\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\r\n     * @param durationSec Length of time to linear unlock the tokens.\r\n     */\r\n    function lockTokens(uint256 amount, uint256 durationSec)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            unlockSchedules.length < _maxUnlockSchedules,\r\n            \"TokenGeyser: reached maximum unlock schedules\"\r\n        );\r\n\r\n        // Update lockedTokens amount before using it in computations after.\r\n        updateAccounting();\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares = (lockedTokens > 0)\r\n            ? totalLockedShares.mul(amount).div(lockedTokens)\r\n            : amount.mul(_initialSharesPerToken);\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedShares = mintedLockedShares;\r\n        schedule.lastUnlockTimestampSec = now;\r\n        schedule.endAtSec = now.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        require(\r\n            _lockedPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_lockedPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into locked pool failed\"\r\n        );\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\r\n     *      previously defined unlock schedules. Publicly callable.\r\n     * @return Number of newly unlocked distribution tokens.\r\n     */\r\n    function unlockTokens() public returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            unlockedTokens = lockedTokens;\r\n        } else {\r\n            uint256 unlockedShares = 0;\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\r\n            }\r\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(\r\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                \"TokenGeyser: transfer out of locked pool failed\"\r\n            );\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\r\n     *      depends on the time since the last unlock. This function updates schedule accounting,\r\n     *      but does not actually transfer any tokens.\r\n     * @param s Index of the unlock schedule.\r\n     * @return The number of unlocked shares.\r\n     */\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (now >= schedule.endAtSec) {\r\n            sharesToUnlock = (\r\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\r\n            );\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = now\r\n                .sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedShares)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = now;\r\n        }\r\n\r\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\r\n     * @param tokenToRescue Address of the token to be rescued.\r\n     * @param to Address to which the rescued funds are to be sent.\r\n     * @param amount Amount of tokens to be rescued.\r\n     * @return Transfer success.\r\n     */\r\n    function rescueFundsFromStakingPool(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n\r\n    function setReferrerBook(address referrerBook_) external onlyOwner {\r\n        require(referrerBook_ != address(0), \"referrerBook == 0\");\r\n        referrerBook = referrerBook_;\r\n    }\r\n\r\n    function claimGovToken() external {\r\n        address beneficiary = msg.sender;\r\n        govTokenPool.updateAndClaim(beneficiary,  totalStakedFor(beneficiary), totalStaked());\r\n        govTokenPool.updateDebt(beneficiary,  totalStakedFor(beneficiary));\r\n    }\r\n\r\n    function pendingGovToken(address _user) external view returns(uint256) {\r\n        return govTokenPool.pendingReward(address(this), totalStakedFor(_user), _user);\r\n    }\r\n\r\n    function updateGovTokenPool() external {\r\n        govTokenPool.updatePool(totalStaked());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"contract GovTokenPool\",\"name\":\"_govTokenPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUnlockSchedules\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBonus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriodSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSharesPerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerBook_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_SHARE_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_SHARE_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_SHARE_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govTokenPool\",\"outputs\":[{\"internalType\":\"contract GovTokenPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingGovToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFundsFromStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerBook_\",\"type\":\"address\"}],\"name\":\"setReferrerBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccounting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateGovTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenGeyserV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008d553f9ca5fe1b749b1e2a5d9999dc2ab59e6ef70000000000000000000000002f7098696aac7c114a013229c3c752e41b07e80f00000000000000000000000016e3b86e01276809f8870d18903e19763b312c7f000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000004f1a0000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000044f1669a0b9cc7224e4ee25d6b50e1139ebb90d9","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d468a5853bba1191f181204aa0102bd71fdd88ccdd319cce3f402c9e381832b7"}]}