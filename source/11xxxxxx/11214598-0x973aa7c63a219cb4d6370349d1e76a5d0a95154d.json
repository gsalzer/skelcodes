{"status":"1","message":"OK","result":[{"SourceCode":"{\"DyDxFlashLoan.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface Structs {\\r\\n    struct Val {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    enum ActionType {\\r\\n      Deposit,   // supply tokens\\r\\n      Withdraw,  // borrow tokens\\r\\n      Transfer,  // transfer balance between accounts\\r\\n      Buy,       // buy an amount of some token (externally)\\r\\n      Sell,      // sell an amount of some token (externally)\\r\\n      Trade,     // trade tokens against another account\\r\\n      Liquidate, // liquidate an undercollateralized or expiring account\\r\\n      Vaporize,  // use excess tokens to zero-out a completely negative account\\r\\n      Call       // send arbitrary data to an address\\r\\n    }\\r\\n\\r\\n    enum AssetDenomination {\\r\\n        Wei // the amount is denominated in wei\\r\\n    }\\r\\n\\r\\n    enum AssetReference {\\r\\n        Delta // the amount is given as a delta from the current value\\r\\n    }\\r\\n\\r\\n    struct AssetAmount {\\r\\n        bool sign; // true if positive\\r\\n        AssetDenomination denomination;\\r\\n        AssetReference ref;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct ActionArgs {\\r\\n        ActionType actionType;\\r\\n        uint256 accountId;\\r\\n        AssetAmount amount;\\r\\n        uint256 primaryMarketId;\\r\\n        uint256 secondaryMarketId;\\r\\n        address otherAddress;\\r\\n        uint256 otherAccountId;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct Info {\\r\\n        address owner;  // The address that owns the account\\r\\n        uint256 number; // A nonce that allows a single address to control many accounts\\r\\n    }\\r\\n\\r\\n    struct Wei {\\r\\n        bool sign; // true if positive\\r\\n        uint256 value;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DyDxPool is Structs {\\r\\n    function getAccountWei(Info memory account, uint256 marketId) public view returns (Wei memory);\\r\\n    function operate(Info[] memory, ActionArgs[] memory) public;\\r\\n}\\r\\n\\r\\ncontract DyDxFlashLoan is Structs {\\r\\n    DyDxPool pool = DyDxPool(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e); //this is dydx solo margin sc\\r\\n\\r\\n    // token address\\r\\n    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address public SAI = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\\r\\n    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\r\\n    address public DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\r\\n    mapping(address =\\u003e uint256) public currencies;\\r\\n\\r\\n    constructor() public {\\r\\n        currencies[WETH] = 1;\\r\\n        currencies[SAI] = 2;\\r\\n        currencies[USDC] = 3;\\r\\n        currencies[DAI] = 4;\\r\\n    }\\r\\n\\r\\n    modifier onlyPool() {\\r\\n        require(\\r\\n            msg.sender == address(pool),\\r\\n            \\\"FlashLoan: could be called by DyDx pool only\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function tokenToMarketId(address token) public view returns (uint256) {\\r\\n        uint256 marketId = currencies[token];\\r\\n        require(marketId != 0, \\\"FlashLoan: Unsupported token\\\");\\r\\n        return marketId - 1;\\r\\n    }\\r\\n\\r\\n    // the DyDx will call `callFunction(address sender, Info memory accountInfo, bytes memory data) public` after during `operate` call\\r\\n    // token: erc20 token for flashloan from dydx\\r\\n    function flashloan(\\r\\n      address token,\\r\\n      uint256 amount,\\r\\n      bytes memory data\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        // approve dydx solo pool\\r\\n        IERC20(token).approve(address(pool), amount + 1);\\r\\n\\r\\n        Info[] memory _infos = new Info[](1);\\r\\n        ActionArgs[] memory _args = new ActionArgs[](3);\\r\\n\\r\\n        _infos[0] = Info(address(this), 0);\\r\\n\\r\\n        AssetAmount memory _withdrawAmt = AssetAmount(\\r\\n            false,\\r\\n            AssetDenomination.Wei,\\r\\n            AssetReference.Delta,\\r\\n            amount\\r\\n        );\\r\\n        ActionArgs memory _withdraw;\\r\\n        _withdraw.actionType = ActionType.Withdraw;\\r\\n        _withdraw.accountId = 0;\\r\\n        _withdraw.amount = _withdrawAmt;\\r\\n        _withdraw.primaryMarketId = tokenToMarketId(token);\\r\\n        _withdraw.otherAddress = address(this);\\r\\n\\r\\n        _args[0] = _withdraw;\\r\\n\\r\\n        ActionArgs memory _call;\\r\\n        _call.actionType = ActionType.Call;\\r\\n        _call.accountId = 0;\\r\\n        _call.otherAddress = address(this);\\r\\n        _call.data = data;\\r\\n\\r\\n        _args[1] = _call;\\r\\n\\r\\n        ActionArgs memory _deposit;\\r\\n        AssetAmount memory _depositAmt = AssetAmount(\\r\\n            true,\\r\\n            AssetDenomination.Wei,\\r\\n            AssetReference.Delta,\\r\\n            amount + 1\\r\\n        );\\r\\n        _deposit.actionType = ActionType.Deposit;\\r\\n        _deposit.accountId = 0;\\r\\n        _deposit.amount = _depositAmt;\\r\\n        _deposit.primaryMarketId = tokenToMarketId(token);\\r\\n        _deposit.otherAddress = address(this);\\r\\n\\r\\n        _args[2] = _deposit;\\r\\n\\r\\n        pool.operate(_infos, _args);\\r\\n    }\\r\\n}\"},\"DyDxFlashloanArbMulti.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./DyDxFlashLoan.sol\\\";\\r\\nimport \\\"./IOneSplitMulti.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract DyDxFlashloanArbMulti is DyDxFlashLoan {\\r\\n    using SafeMath for uint256;\\r\\n    address arbOwner;\\r\\n    address constant OneSplitAddress =  0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e;\\r\\n    address constant RetAddress1 = 0xE365CEf2A7b4B0e4821453570De3A5D8149A32BE;//reward\\r\\n    address constant RetAddress2 = 0x37fb57eFFa51dDee798E948A05C6b3AC77846b70;//reward\\r\\n\\r\\n    constructor() public payable {\\r\\n        arbOwner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner () {\\r\\n        require(msg.sender == arbOwner, \\\"fail 0\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function () external payable {}\\r\\n\\r\\n    function getFlashloan(address _flashToken, uint256 _flashAmount, address _token, uint256 _returnAmount, uint256[] calldata _distribution, uint256 _flag) external onlyOwner {\\r\\n        bytes memory _data = abi.encode(_flashToken, _flashAmount, _token, _returnAmount, _distribution, _flag);\\r\\n        \\r\\n        flashloan(_flashToken, _flashAmount, _data); //callFunction\\r\\n    }\\r\\n    \\r\\n    function callFunction(address, Info calldata, bytes calldata _data) external onlyPool {\\r\\n        (address flashToken, uint256 flashAmount, address token, uint256 returnAmount, uint256[] memory distribution, uint256 flag)\\r\\n        = abi.decode(_data, (address, uint256, address, uint256, uint256[], uint256));\\r\\n        \\r\\n        uint256 balanceAfter = IERC20(flashToken).balanceOf(address(this));\\r\\n        require(balanceAfter \\u003e= flashAmount, \\\"fail 00\\\");\\r\\n        \\r\\n        swap1(flashToken, token, flashAmount, returnAmount, distribution, flag);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function swap1(address from, address token, uint256 amountWei, uint256 returnAmount, uint256[] memory distribution, uint256 flag) internal {\\r\\n        IERC20 fromERC20 = IERC20(from);\\r\\n        IERC20 tokenERC20 = IERC20(token);\\r\\n        \\r\\n        require(fromERC20.approve(OneSplitAddress, amountWei.add(amountWei)), \\\"fail 1\\\");\\r\\n        require(tokenERC20.approve(OneSplitAddress, returnAmount.add(returnAmount)), \\\"fail 2\\\");\\r\\n        \\r\\n        IERC20[] memory tokensArray = new IERC20[](3);\\r\\n        tokensArray[0] = fromERC20;\\r\\n        tokensArray[1] = tokenERC20;\\r\\n        tokensArray[2] = fromERC20;\\r\\n        \\r\\n        uint256[] memory flagsArray = new uint256[](2);\\r\\n        flagsArray[0] = flag;\\r\\n        flagsArray[1] = flag;\\r\\n        \\r\\n        IOneSplitMulti(OneSplitAddress).swapMulti(tokensArray, amountWei, 0, distribution, flagsArray);\\r\\n        \\r\\n        uint256 retval = fromERC20.balanceOf(address(this));\\r\\n        require(retval \\u003e amountWei, \\\"fail 3\\\");\\r\\n        \\r\\n        uint256 divval = retval.sub(amountWei.add(1)).div(2);\\r\\n        fromERC20.transfer(RetAddress1, divval);\\r\\n        fromERC20.transfer(RetAddress2, divval);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IOneSplitMulti.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract IOneSplitConsts {\\r\\n    // disableFlags = FLAG_DISABLE_UNISWAP + FLAG_DISABLE_KYBER + ...\\r\\n    uint256 public constant FLAG_DISABLE_UNISWAP = 0x01;\\r\\n    uint256 public constant FLAG_DISABLE_KYBER = 0x02;\\r\\n    uint256 public constant FLAG_ENABLE_KYBER_UNISWAP_RESERVE = 0x100000000; // Turned off by default\\r\\n    uint256 public constant FLAG_ENABLE_KYBER_OASIS_RESERVE = 0x200000000; // Turned off by default\\r\\n    uint256 public constant FLAG_ENABLE_KYBER_BANCOR_RESERVE = 0x400000000; // Turned off by default\\r\\n    uint256 public constant FLAG_DISABLE_BANCOR = 0x04;\\r\\n    uint256 public constant FLAG_DISABLE_OASIS = 0x08;\\r\\n    uint256 public constant FLAG_DISABLE_COMPOUND = 0x10;\\r\\n    uint256 public constant FLAG_DISABLE_FULCRUM = 0x20;\\r\\n    uint256 public constant FLAG_DISABLE_CHAI = 0x40;\\r\\n    uint256 public constant FLAG_DISABLE_AAVE = 0x80;\\r\\n    uint256 public constant FLAG_DISABLE_SMART_TOKEN = 0x100;\\r\\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_ETH = 0x200; // Turned off by default\\r\\n    uint256 public constant FLAG_DISABLE_BDAI = 0x400;\\r\\n    uint256 public constant FLAG_DISABLE_IEARN = 0x800;\\r\\n    uint256 public constant FLAG_DISABLE_CURVE_COMPOUND = 0x1000;\\r\\n    uint256 public constant FLAG_DISABLE_CURVE_USDT = 0x2000;\\r\\n    uint256 public constant FLAG_DISABLE_CURVE_Y = 0x4000;\\r\\n    uint256 public constant FLAG_DISABLE_CURVE_BINANCE = 0x8000;\\r\\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_DAI = 0x10000; // Turned off by default\\r\\n    uint256 public constant FLAG_ENABLE_MULTI_PATH_USDC = 0x20000; // Turned off by default\\r\\n    uint256 public constant FLAG_DISABLE_CURVE_SYNTHETIX = 0x40000;\\r\\n    uint256 public constant FLAG_DISABLE_WETH = 0x80000;\\r\\n    uint256 public constant FLAG_ENABLE_UNISWAP_COMPOUND = 0x100000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\r\\n    uint256 public constant FLAG_ENABLE_UNISWAP_CHAI = 0x200000; // Works only when ETH\\u003c\\u003eDAI or FLAG_ENABLE_MULTI_PATH_ETH\\r\\n    uint256 public constant FLAG_ENABLE_UNISWAP_AAVE = 0x400000; // Works only when one of assets is ETH or FLAG_ENABLE_MULTI_PATH_ETH\\r\\n    uint256 public constant FLAG_DISABLE_IDLE = 0x800000;\\r\\n}\\r\\n\\r\\ncontract IOneSplit is IOneSplitConsts {\\r\\n    function swap(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] memory distribution,\\r\\n        uint256 disableFlags\\r\\n    ) public payable;\\r\\n}\\r\\n\\r\\ncontract IOneSplitMulti is IOneSplit {\\r\\n    function swapMulti(\\r\\n        IERC20[] memory tokens,\\r\\n        uint256 amount,\\r\\n        uint256 minReturn,\\r\\n        uint256[] memory distribution,\\r\\n        uint256[] memory flags\\r\\n    ) public payable;\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flashAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_flag\",\"type\":\"uint256\"}],\"name\":\"getFlashloan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenToMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DyDxFlashloanArbMulti","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://951fe4a326e18e51878566b0c9c4b3af69974e206e1c6fc6c007552847f2e5ed"}]}