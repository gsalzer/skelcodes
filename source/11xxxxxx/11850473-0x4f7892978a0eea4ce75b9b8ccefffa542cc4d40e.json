{"status":"1","message":"OK","result":[{"SourceCode":"{\"Commune.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"SafeMath.sol\\\";\\n\\nimport \\u0027IERC20.sol\\u0027;\\nimport \\u0027ICommune.sol\\u0027;\\n\\ncontract Commune is ICommune {\\n    using SafeMath for uint256;\\n\\n    struct aCommune {\\n        bool allowsJoining;\\n        bool allowsRemoving;\\n        bool allowsOutsideContribution;\\n        address asset;\\n        uint256 proratedTotal;\\n        uint256 memberCount;\\n        address controller;\\n        string uri;\\n    }\\n\\n    mapping (uint256 =\\u003e aCommune) public getCommune;\\n\\n    // maybe we should rather use \\n    // mapping (address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\n    // like https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L33\\n    mapping (uint256 =\\u003e mapping(address =\\u003e bool)) private _isCommuneMember;\\n    \\n    // commune -\\u003e address -\\u003e balance\\n    mapping (uint256 =\\u003e mapping (address =\\u003e uint256)) private _balanceAtJoin;\\n\\n    // commune -\\u003e address -\\u003e balance \\n    mapping (uint256 =\\u003e mapping (address =\\u003e uint256)) private _spentBalance;\\n\\n    // in basis points, 0 through 500, i.e. max take 5%\\n    uint256 private _feeRate = 100;\\n\\n    // where fee goes to\\n    address private _treasuryAddress;\\n\\n    // for creating new commune IDs\\n    uint256 private _nonce;\\n\\n    // can update treasury address and fee rate \\n    address private _controllerAddress;\\n\\n\\n    // Getters /// \\n\\n    function numberOfCommunes() external override view returns (uint256){\\n        return _nonce;\\n    }\\n\\n    function isCommuneMember(uint256 commune, address account) external communeExists(commune) override view returns (bool){\\n        return _isCommuneMember[commune][account];\\n    }\\n\\n    function feeRate() external override view returns (uint256){\\n        return _feeRate;\\n    }\\n\\n    function treasuryAddress() external override view returns (address){\\n        return _treasuryAddress;\\n    }\\n\\n    function controller() external override view returns (address){\\n        return _controllerAddress;\\n    }\\n    \\n\\n    // modifiers \\n    modifier controllerOnly(){\\n        require(msg.sender == _controllerAddress, \\\"Commune: only contract controller can do this\\\");\\n        _;\\n    }\\n\\n    modifier communeControllerOnly(uint256 commune){\\n        require(getCommune[commune].controller == msg.sender, \\\"Commune: only the commune controller can do this\\\");\\n        _;\\n    }\\n\\n    modifier communeExists(uint256 commune){\\n        require(commune \\u003c= _nonce, \\\"Commune: commune does not exists\\\");\\n        _;\\n    }\\n\\n    function contribute(uint256 amount, uint256 commune) external communeExists(commune) override { \\n        require(_isCommuneMember[commune][msg.sender] || getCommune[commune].allowsOutsideContribution, \\\"Commune: Must be a member to contribute\\\");\\n        require(getCommune[commune].memberCount \\u003e 0, \\\"Commune: commune has no members, cannot accept contributions\\\");\\n\\n        address assetAddress = getCommune[commune].asset;\\n        IERC20 asset = IERC20(assetAddress);\\n\\n        uint256 fee = amount\\n            .mul(_feeRate)\\n            .div(10000);\\n        \\n        uint256 amountToCommune = amount\\n            .sub(fee)\\n            .div(getCommune[commune].memberCount);\\n\\n        asset.transferFrom(msg.sender, address(this), amountToCommune);\\n        asset.transferFrom(msg.sender, _treasuryAddress, fee);\\n\\n        getCommune[commune].proratedTotal = getCommune[commune].proratedTotal.add(amountToCommune);\\n\\n        emit Contribute(msg.sender, commune, amount);\\n    }\\n\\n    /**\\n        @dev _uri should link to a JSON file of the form \\n        {\\n            \\\"title\\\": \\\"Commune Title\\\",\\n            \\\"description\\\": \\\"Commune description\\\"\\n        }\\n    */\\n    function createCommune(string memory _uri, address asset, bool allowJoining, bool allowRemoving, bool allowOutsideContribution) external override returns(uint256 _id) {  \\n        require((!allowJoining \\u0026\\u0026 allowRemoving) || (allowJoining \\u0026\\u0026 !allowRemoving) || (!allowJoining \\u0026\\u0026 !allowRemoving), \\\"Commune: cannot both allow joining and removing\\\");\\n\\n        _id = ++_nonce;\\n\\n        getCommune[_id].controller = msg.sender;\\n        getCommune[_id].allowsJoining = allowJoining;\\n        getCommune[_id].allowsRemoving = allowRemoving;\\n        getCommune[_id].allowsOutsideContribution = allowOutsideContribution;\\n        getCommune[_id].asset = asset;\\n        getCommune[_id].uri = _uri;\\n\\n        emit URI(_uri, _id);\\n    }\\n\\n    //Join/Add Functions\\n    function joinCommune(uint256 commune) external override {\\n        require(getCommune[commune].allowsJoining, \\\"Commune: commune does not allow joining\\\");\\n        _addCommuneMember(msg.sender, commune);\\n    }\\n\\n    function addCommuneMember(address account, uint256 commune) external communeControllerOnly(commune) override {\\n        _addCommuneMember(account, commune);\\n    }\\n\\n    function _addCommuneMember(address account, uint256 commune) private communeExists(commune) {\\n        require(!_isCommuneMember[commune][account], \\\"Commune: account is already in commune\\\");\\n\\n        _isCommuneMember[commune][account] = true;\\n        ++getCommune[commune].memberCount;\\n        _balanceAtJoin[commune][account] = getCommune[commune].proratedTotal;\\n\\n        emit AddCommuneMember(account, commune);\\n    }\\n\\n\\n    // Leave/Remove Functions\\n    function leaveCommune(uint256 commune) external override {\\n        _removeCommuneMember(msg.sender, commune);\\n    }\\n\\n    function removeCommuneMember(address account, uint256 commune) external communeControllerOnly(commune) override {\\n        require(getCommune[commune].allowsRemoving, \\\"Commune: commune does not allow removing\\\");\\n\\n        _removeCommuneMember(account, commune);\\n    }\\n\\n    function _removeCommuneMember(address account, uint256 commune) private communeExists(commune) {\\n        require(_isCommuneMember[commune][account], \\\"Commune: account is not in commune\\\");\\n\\n        _isCommuneMember[commune][account] = false;\\n        getCommune[commune].memberCount = getCommune[commune].memberCount.sub(1);\\n        // we reset the spent balance, incase they\\u0027e added back later, to prevent a negative number \\n         _spentBalance[commune][account] = 0;\\n\\n        emit RemoveCommuneMember(account, commune);\\n    }\\n\\n\\n\\n    constructor(address _controller) {\\n        _setURI(\\\"your-uri-here\\\");\\n\\n        _controllerAddress = _controller;\\n        _treasuryAddress = _controller;\\n    }\\n\\n    /// controller functions ///\\n\\n    function updateCommuneController(address account, uint256 commune) external communeControllerOnly(commune) override {\\n        getCommune[commune].controller = account;\\n\\n        emit UpdateCommuneController(account, commune);\\n    }\\n\\n    function updateCommuneURI(string memory _uri, uint256 commune) external communeControllerOnly(commune) override {\\n        getCommune[commune].uri = _uri;\\n\\n        emit URI(_uri, commune);\\n    }\\n\\n    function updateController(address account) external controllerOnly override {\\n        _controllerAddress = account;\\n\\n        emit UpdateController(account);\\n    }\\n\\n    function updateFee(uint256 rate) external controllerOnly override {\\n        // max fee is 5%\\n        require(rate \\u003c= 500 \\u0026\\u0026 rate \\u003e= 0, \\\"Commune: fee rate must be between 0 and 500\\\");\\n        _feeRate = rate;\\n\\n        emit UpdateFee(rate);\\n    }\\n\\n    function setTreasuryAddress(address newTreasury) external controllerOnly override {\\n        _treasuryAddress = newTreasury;\\n\\n        emit UpdateTreasuryAddress(newTreasury);\\n    }\\n\\n    // boiler, mostly ripped from ERC1155 then modified\\n\\n    // Mapping from account to operator approvals\\n    mapping (address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    string private _uri;\\n    \\n    function uri(uint256 commune) communeExists(commune) external view  returns (string memory) {\\n\\n        string memory _communeURI = getCommune[commune].uri;\\n\\n        // if the commune URI is set, return it. Note, might still need to replace `\\\\{id\\\\}`\\n        if (bytes(_communeURI).length \\u003e 0) {\\n            return _communeURI;\\n        } \\n\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return _uri;\\n    }\\n\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    function balanceOf(address account, uint256 commune) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"Commune: balance query for the zero address\\\");\\n        if(!_isCommuneMember[commune][account]){\\n            return 0;\\n        }\\n        return getCommune[commune].proratedTotal\\n            .sub(_balanceAtJoin[commune][account])\\n            .sub(_spentBalance[commune][account]);\\n    }\\n\\n    /**\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"Commune: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i \\u003c accounts.length; ++i) {\\n            require(accounts[i] != address(0), \\\"Commune: batch balance query for the zero address\\\");\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        require(msg.sender != operator, \\\"Commune: setting approval status for self\\\");\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n\\n    function isApprovedForAll(address account, address operator) public view returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function withdraw(address account, address to, uint256 commune, uint256 amount) public override {\\n        require(to != address(0), \\\"Commune: Cannot withdraw to the zero address\\\");\\n        require(\\n            account == msg.sender || isApprovedForAll(account, msg.sender),\\n            \\\"Commune: Caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = msg.sender;\\n\\n        balanceOf(account, commune).sub(amount, \\\"Commune: withdraw amount exceeds balance\\\");\\n        _spentBalance[commune][account] = _spentBalance[commune][account].add(amount);\\n\\n        IERC20(getCommune[commune].asset).transfer(to, amount);\\n\\n        emit Withdraw(operator, account, to, commune, amount);\\n    }\\n\\n    function withdrawBatch(address account, address to, uint256[] memory communes, uint256[] memory amounts) public override {\\n        require(to != address(0), \\\"Commune: Cannot withdraw to the zero address\\\");\\n        require(\\n            account == msg.sender || isApprovedForAll(account, msg.sender),\\n            \\\"Commune: Caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = msg.sender;\\n\\n        for (uint i = 0; i \\u003c communes.length; i++) {\\n            balanceOf(account, communes[i]).sub(amounts[i], \\\"Commune: withdraw amount exceeds balance\\\");\\n            _spentBalance[communes[i]][account] = _spentBalance[communes[i]][account].add(amounts[i]);\\n            IERC20(getCommune[communes[i]].asset).transfer(to, amounts[i]);\\n        }\\n\\n        emit WithdrawBatch(operator, account, to, communes, amounts);\\n    }\\n    \\n}\"},\"ICommune.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ninterface ICommune {\\n\\n\\tfunction numberOfCommunes() external view returns (uint256);\\n\\tfunction isCommuneMember(uint256 commune, address account) external view returns (bool);\\n\\tfunction feeRate() external view returns (uint256);\\n\\tfunction treasuryAddress() external view returns (address);\\n\\tfunction controller() external view returns (address);\\n\\n\\tfunction createCommune(string memory _uri, address asset, bool allowJoining, bool allowRemoving, bool allowOutsideContribution) external returns(uint256 _id);\\n\\tfunction contribute(uint256 amount, uint256 commune) external;\\n\\tfunction joinCommune(uint256 commune) external;\\n\\tfunction addCommuneMember(address account, uint256 commune) external;\\n\\tfunction leaveCommune(uint256 commune) external;\\n\\tfunction removeCommuneMember(address account, uint256 commune) external;\\n\\tfunction balanceOf(address account, uint256 commune) external view returns (uint256);\\n\\tfunction balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\\n\\tfunction withdraw(address account, address to, uint256 commune, uint256 amount) external;\\n\\tfunction withdrawBatch(address account, address to, uint256[] memory communes, uint256[] memory amounts) external;\\n\\n\\tfunction updateCommuneController(address account, uint256 commune) external;\\n\\tfunction updateCommuneURI(string memory _uri, uint256 commune) external;\\n\\tfunction updateController(address account) external;\\n\\tfunction updateFee(uint256 rate) external;\\n\\tfunction setTreasuryAddress(address newTreasury) external;\\n\\n\\n\\n\\tevent AddCommuneMember(address indexed account, uint256 indexed commune);\\n    event RemoveCommuneMember(address indexed account, uint256 indexed commune);\\n    event Withdraw(address indexed operator, address indexed account, address to, uint256 indexed commune, uint256 amount);\\n    event WithdrawBatch(address indexed operator, address indexed account, address indexed to, uint256[] communes, uint256[] amounts);\\n    event URI(string value, uint256 indexed commune);\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n    event Contribute(address indexed account, uint256 indexed commune, uint256 amount);\\n    event UpdateCommuneController(address indexed account, uint256 indexed commune);\\n    event UpdateController(address indexed account);\\n    event UpdateFee(uint256 basisPoints);\\n    event UpdateTreasuryAddress(address indexed account);\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"AddCommuneMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"RemoveCommuneMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"UpdateCommuneController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"communes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"addCommuneMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowJoining\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowRemoving\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowOutsideContribution\",\"type\":\"bool\"}],\"name\":\"createCommune\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCommune\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowsJoining\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowsRemoving\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowsOutsideContribution\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proratedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCommuneMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"joinCommune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"leaveCommune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCommunes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"removeCommuneMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"updateCommuneController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"updateCommuneURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commune\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"communes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Commune","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dfc395a710a7f680d6e900664450b57cfa66bf18","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b94e99684d24b8c95813b89bd6a236b00bcbd816e2a127637e8d07dfbf17d216"}]}