{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface GoveranceInterface {\r\n\r\n       struct Proposal {\r\n        uint id;\r\n        address proposer;\r\n        uint eta;\r\n        uint startBlock;\r\n        uint endBlock;\r\n        uint forVotes;\r\n        uint againstVotes;\r\n        bool canceled;\r\n        bool executed;\r\n    }\r\n\r\n    struct Receipt {\r\n        bool hasVoted;\r\n        bool support;\r\n        uint96 votes;\r\n    }\r\n\r\n     enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    function proposals(uint) external view returns (Proposal memory);\r\n    function proposalCount() external view returns (uint);\r\n\r\n    function state(uint) external view returns (ProposalState);\r\n\r\n    function quorumVotes() external view returns (uint) ;\r\n    function proposalThreshold() external view returns (uint);\r\n    function timelock() external view returns (TimeLockInterface);\r\n    function votingDelay() external pure returns (uint);\r\n    function votingPeriod() external view returns (uint);\r\n    function proposalMaxOperations() external view returns (uint);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function mintingAllowedAfter() external pure returns (uint);\r\n    function minimumTimeBetweenMints() external pure returns (uint);\r\n    function mintCap() external pure returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function minter() external view returns (address);\r\n    function transferPaused() external view returns (bool);\r\n}\r\ninterface TimeLockInterface {\r\n    function admin() external view returns (address);\r\n    function delay() external view returns (uint);\r\n    function GRACE_PERIOD() external view returns (uint);\r\n    function acceptAdmin() external;\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\r\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\r\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\r\n}\r\n\r\n\r\ncontract Resolver {\r\n    struct ProposalState {\r\n        uint forVotes;\r\n        uint againstVotes;\r\n        bool isFailed;\r\n        bool isEnded;\r\n        GoveranceInterface.ProposalState currentState;\r\n    }\r\n\r\n    struct GovernanceData {\r\n        address governanceAddress;\r\n        address timelockAddress;\r\n        uint quorumVotes;\r\n        uint proposalThreshold;\r\n        uint votingDelay;\r\n        uint votingPeriod;\r\n        uint proposalMaxOperations;\r\n        uint proposalCount;\r\n        uint timelock_gracePeriod;\r\n        uint timelock_delay;\r\n        string name;\r\n    }\r\n\r\n    struct TokenData {\r\n        address tokenAddress;\r\n        uint mintingAllowedAfter;\r\n        uint minimumTimeBetweenMints;\r\n        uint mintCap;\r\n        bool transferPaused;\r\n        uint totalSupply;\r\n        string symbol;\r\n        string name;\r\n    }\r\n\r\n    function getProposalStates(address govAddr, uint256[] memory ids) public view returns (ProposalState[] memory) {\r\n        ProposalState[] memory proposalStates = new ProposalState[](ids.length);\r\n        GoveranceInterface govContract = GoveranceInterface(govAddr);\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            uint id = ids[i];\r\n            GoveranceInterface.Proposal memory proposal = govContract.proposals(id);\r\n            bool isEnded = proposal.endBlock <= block.number;\r\n            bool isFailed = proposal.forVotes <= proposal.againstVotes || proposal.forVotes < govContract.quorumVotes();\r\n            proposalStates[i] = ProposalState({\r\n                forVotes: proposal.forVotes,\r\n                againstVotes: proposal.againstVotes,\r\n                isFailed: isEnded && isFailed,\r\n                isEnded: isEnded,\r\n                currentState: govContract.state(id)\r\n            });\r\n        }\r\n        return proposalStates;\r\n    }\r\n\r\n    function getGovernanceData(address[] memory govAddress) public view returns (GovernanceData[] memory) {\r\n        GovernanceData[] memory governanceDatas = new GovernanceData[](govAddress.length);\r\n        for (uint i = 0; i < govAddress.length; i++) {\r\n            GoveranceInterface govContract = GoveranceInterface(govAddress[i]);\r\n            TimeLockInterface timelockContract = govContract.timelock();\r\n            governanceDatas[i] = GovernanceData({\r\n                governanceAddress: govAddress[i],\r\n                timelockAddress: address(timelockContract),\r\n                quorumVotes: govContract.quorumVotes(),\r\n                proposalThreshold: govContract.proposalThreshold(),\r\n                votingDelay: govContract.votingDelay(),\r\n                votingPeriod: govContract.votingPeriod(),\r\n                proposalMaxOperations: govContract.proposalMaxOperations(),\r\n                proposalCount: govContract.proposalCount(),\r\n                timelock_gracePeriod: timelockContract.GRACE_PERIOD(),\r\n                timelock_delay: timelockContract.delay(),\r\n                name: govContract.name()\r\n            });\r\n        }\r\n        return governanceDatas;\r\n    }\r\n\r\n    function getTokenData(address[] memory tokens) public view returns (TokenData[] memory) {\r\n        TokenData[] memory tokenDatas = new TokenData[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            TokenInterface tokenContract = TokenInterface(tokens[i]);\r\n            uint mintingAllowedAfter;\r\n            uint minimumTimeBetweenMints;\r\n            uint mintCap;\r\n            bool transferPaused;\r\n            try tokenContract.mintCap()\r\n            {\r\n                mintingAllowedAfter = tokenContract.mintingAllowedAfter();\r\n                minimumTimeBetweenMints = tokenContract.minimumTimeBetweenMints();\r\n                mintCap = tokenContract.mintCap();\r\n                transferPaused = tokenContract.transferPaused();\r\n            } catch {\r\n                mintingAllowedAfter = 0;\r\n                minimumTimeBetweenMints = 0;\r\n                mintCap = 100;\r\n                transferPaused = false;\r\n            }\r\n            tokenDatas[i] = TokenData({\r\n                tokenAddress: tokens[i],\r\n                mintingAllowedAfter: mintingAllowedAfter,\r\n                minimumTimeBetweenMints: minimumTimeBetweenMints,\r\n                mintCap: mintCap,\r\n                transferPaused: transferPaused,\r\n                totalSupply: tokenContract.totalSupply(),\r\n                symbol: tokenContract.symbol(),\r\n                name: tokenContract.name()\r\n            });\r\n        }\r\n        return tokenDatas;\r\n    }\r\n\r\n    function getDaoData(address[] memory tokens, address[] memory govAddress) public view returns (TokenData[] memory, GovernanceData[] memory) {\r\n        address[] memory _govAddr = new address[](tokens.length);\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (govAddress[i] == address(0)) {\r\n                _govAddr[i] = TimeLockInterface(TokenInterface(tokens[i]).minter()).admin();\r\n            } else {\r\n                _govAddr[i] = govAddress[i];\r\n            }\r\n        }\r\n        return (getTokenData(tokens), getGovernanceData(_govAddr));\r\n    }\r\n}\r\n\r\ncontract AtlasGovResolver is Resolver {\r\n\r\n    string public constant name = \"Atlas-Governance-Resolver-v1.0\";\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"govAddress\",\"type\":\"address[]\"}],\"name\":\"getDaoData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTimeBetweenMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Resolver.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalMaxOperations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock_gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock_delay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Resolver.GovernanceData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"govAddress\",\"type\":\"address[]\"}],\"name\":\"getGovernanceData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalMaxOperations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock_gracePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock_delay\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Resolver.GovernanceData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"govAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getProposalStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFailed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"},{\"internalType\":\"enum GoveranceInterface.ProposalState\",\"name\":\"currentState\",\"type\":\"uint8\"}],\"internalType\":\"struct Resolver.ProposalState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumTimeBetweenMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Resolver.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AtlasGovResolver","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://43eab1aa0557a8008c7b4c22cba54c092b8f1d8012627e92b72973534dfeae0a"}]}