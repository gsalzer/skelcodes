{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.6 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract DigiExchange {\r\n    using SafeMath for *;\r\n\r\n    struct Roadmap {\r\n        uint256 supply;\r\n        uint256 startPrice;\r\n        uint256 incPrice;\r\n    }\r\n\r\n    string constant public _name = \"Digi Exchange\";\r\n    string constant public _symbol = \"DIGIX\";\r\n    uint8 constant public _decimals = 0;\r\n    uint256 public _totalSupply = 1600000;\r\n    uint256 public _rewardsSupply = 240000;\r\n    uint256 public circulatingSupply = 514538;\r\n\r\n    mapping(address => bool) private administrators;\r\n\r\n    address commissionHolder;\r\n    address stakeHolder;\r\n    uint256 commissionFunds = 0;\r\n    uint256 public commissionPercent = 400;\r\n    uint256 public sellCommission = 600;\r\n    uint256 public tokenCommissionPercent = 250;\r\n    uint256 public buyPrice;\r\n    uint256 public sellPrice;\r\n    uint8 public currentRoadmap = 3;\r\n    uint8 public sellRoadmap = 3;\r\n    uint8 constant public LAST_ROADMAP = 18;\r\n    uint256 public currentRoadmapUsedSupply = 14538;\r\n    uint256 public sellRoadmapUsedSupply = 14538;\r\n    uint256 public totalStakeTokens = 0;\r\n    uint256 public totalLockInTokens = 0;\r\n    uint256 public locakablePercent = 750;\r\n    bool buyLimit = true;\r\n    uint256 buyLimitToken = 2100;\r\n    uint256 minBuyToken = 10;\r\n\r\n    address dev; //Backend Operation\r\n    address dev1; //  Operations\r\n    address dev2; // Research Funds\r\n    address dev3; //Marketing\r\n    address dev4; // Development\r\n    address dev5; //Compliance\r\n\r\n    uint256 dev1Com;\r\n    uint256 dev2Com;\r\n    uint256 dev3Com;\r\n    uint256 dev4Com;\r\n    uint256 dev5Com;\r\n\r\n\r\n    mapping(address => uint256) commissionOf;\r\n    mapping(address => uint256) userIncomes;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) public stakeBalanceOf;\r\n    mapping(uint8 => Roadmap) public priceRoadmap;\r\n    mapping(address => uint256) public _lockInBalances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Stake(address indexed staker, uint256 value, uint256 totalInStake);\r\n    event UnStake(address indexed staker, uint256 value, uint256 totalInStake);\r\n    event CommissionWithdraw(address indexed user, uint256 amount);\r\n    event WithdrawTokenCommission(address indexed user, uint256 amount, uint256 nonce);\r\n    event WithdrawStakingCommission(address indexed user, uint256 amount, uint256 nonce);\r\n    event Price(uint256 buyPrice, uint256 sellPrice, uint256 circulatingSupply);\r\n    event StakeUser(address indexed user, uint256 value, uint256 totalInStake, uint256 nonce);\r\n    event LockIn(address indexed from, address indexed to, uint256 value);\r\n    event TransactionFees(address to, uint256 totalValue);\r\n\r\n    constructor(address _commissionHolder, address _stakeHolder) public {\r\n        administrators[msg.sender] = true;\r\n        administrators[_commissionHolder] = true;\r\n        dev = msg.sender;\r\n        commissionHolder = _commissionHolder;\r\n        stakeHolder = _stakeHolder;\r\n        createRoadmap();\r\n        buyPrice = 867693750000000;\r\n        sellPrice = 867688750000000;\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    modifier onlyAdministrators{\r\n        require(administrators[msg.sender], \"Only administrators can execute this function\");\r\n        _;\r\n    }\r\n\r\n    function upgradeContract(address[] memory users) public onlyAdministrators {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            _balances[users[i]] += 500;\r\n            _lockInBalances[users[i]] += 1500;\r\n            _balances[commissionHolder] += 666;\r\n            emit Transfer(address(this), users[i], _balances[users[i]]);\r\n            emit LockIn(users[i], address(this), _lockInBalances[users[i]]);\r\n        }\r\n    }\r\n\r\n    function upgradeDetails(uint256 _bp, uint256 _sp, uint256 _circSup, uint8 _currentRp, uint8 _sellRp, uint256 _crs, uint256 _srs, uint256 _commFunds) public onlyAdministrators {\r\n        buyPrice = _bp;\r\n        sellPrice = _sp;\r\n        circulatingSupply = _circSup;\r\n        currentRoadmap = _currentRp;\r\n        sellRoadmap = _sellRp;\r\n        currentRoadmapUsedSupply = _crs;\r\n        sellRoadmapUsedSupply = _srs;\r\n        commissionFunds = _commFunds;\r\n    }\r\n\r\n    function stake(address _user, uint256 _tokens, uint256 nonce) public onlyAdministrators {\r\n        require(_tokens <= _balances[_user], \"User dont have enough tokens to stake\");\r\n        _balances[_user] -= _tokens;\r\n        stakeBalanceOf[_user] += _tokens;\r\n        totalStakeTokens += _tokens;\r\n        emit StakeUser(_user, _tokens, totalStakeTokens, nonce);\r\n    }\r\n\r\n    function stakeExt(address _user, uint256 _tokens) private {\r\n        require(_tokens <= _balances[_user], \"You dont have enough tokens to stake\");\r\n        _balances[_user] -= _tokens;\r\n        stakeBalanceOf[_user] += _tokens;\r\n        totalStakeTokens += _tokens;\r\n        emit Stake(_user, _tokens, totalStakeTokens);\r\n    }\r\n\r\n    function unStake(address _user, uint256 _tokens) public onlyAdministrators {\r\n        require(_tokens <= stakeBalanceOf[_user], \"User doesnt have amount of token in stake\");\r\n        stakeBalanceOf[_user] -= _tokens;\r\n        totalStakeTokens -= _tokens;\r\n        _balances[_user] += _tokens;\r\n        emit UnStake(_user, _tokens, totalStakeTokens);\r\n    }\r\n\r\n    function lockInExt(address _user, uint256 _tokens) private {\r\n        _lockInBalances[_user] += _tokens;\r\n        totalLockInTokens += _tokens;\r\n    }\r\n\r\n    function releaseLockIn(address _user, uint256 _tokens) public onlyAdministrators {\r\n        require(_tokens <= _lockInBalances[_user], \"User dont have enough balance in Tokens\");\r\n        _lockInBalances[_user] = _lockInBalances[_user] - _tokens;\r\n        _balances[_user] = _balances[_user] + _tokens;\r\n\r\n        totalLockInTokens = totalLockInTokens - _tokens;\r\n        emit LockIn(address(this), _user, _tokens);\r\n    }\r\n\r\n    function addLiquidity() external payable returns (bool){\r\n        return true;\r\n    }\r\n\r\n    function purchase(uint256 tokens) external payable {\r\n        purchaseExt(msg.sender, tokens, msg.value);\r\n    }\r\n\r\n    function sell(uint256 _tokens) public {\r\n        require(_tokens > 0, \"Tokens can not be zero\");\r\n        require(_tokens <= _balances[msg.sender], \"You dont have enough amount of token\");\r\n        sellExt(msg.sender, _tokens);\r\n\r\n    }\r\n\r\n    function sellExt(address _user, uint256 _tokens) private {\r\n        uint256 saleAmount = updateSale(_tokens);\r\n        _balances[_user] -= _tokens;\r\n        uint256 _commission = saleAmount.mul(sellCommission).div(10000);\r\n        uint256 _balanceAfterCommission = saleAmount.sub(_commission);\r\n        uint256 txnFees = _commission * 200 / 1000;\r\n        commissionOf[dev] += txnFees;\r\n        uint256 userInc = _commission * 50 / 10000;\r\n        userIncomes[commissionHolder] += userInc;\r\n        commissionFunds += (_commission - txnFees) - userInc;\r\n\r\n        emit Transfer(_user, address(this), _tokens);\r\n        emit Price(buyPrice, sellPrice, circulatingSupply);\r\n        emit TransactionFees(address(this), _commission);\r\n        sendBalanceAmount(_user, _balanceAfterCommission);\r\n    }\r\n\r\n    function purchaseExt(address _user, uint256 _tokens, uint256 _amountInEth) private {\r\n        require(_tokens >= minBuyToken, \"Minimum tokens should be buy\");\r\n        require(_tokens + circulatingSupply <= _totalSupply, \"All tokens has purchased\");\r\n        require(_amountInEth > 0 ether, \"amount can not be zero\");\r\n\r\n\r\n        if (buyLimit) {\r\n            uint256 tokenWithoutComm = _tokens.sub(_tokens.mul(tokenCommissionPercent).div(1000));\r\n            require(_balances[_user] + stakeBalanceOf[_user] + tokenWithoutComm + _lockInBalances[_user] <= buyLimitToken, \"Exceeding buy Limit\");\r\n        }\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_user)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n\r\n        uint256 _commission = _amountInEth.mul(commissionPercent).div(10000);\r\n        uint256 _balanceEthAfterCommission = _amountInEth - _commission;\r\n        uint256 purchaseAmount = updatePurchase(_tokens, _balanceEthAfterCommission);\r\n        uint256 txnFees = _commission * 200 / 1000;\r\n        uint256 userInc = _commission * 100 / 10000;\r\n        commissionOf[dev] += txnFees;\r\n        userIncomes[commissionHolder] += userInc;\r\n        commissionFunds += (_commission - txnFees) - userInc;\r\n        uint256 _tokenCommission = _tokens.mul(tokenCommissionPercent).div(1000);\r\n        uint256 _tokensAfterCommission = _tokens - _tokenCommission;\r\n        if (buyLimit) {\r\n            uint256 lockableTokens = _tokensAfterCommission.mul(locakablePercent).div(1000);\r\n            _balances[commissionHolder] += _tokenCommission;\r\n            _balances[_user] += _tokensAfterCommission - lockableTokens;\r\n            lockInExt(_user, lockableTokens);\r\n\r\n            emit Transfer(address(this), _user, _tokensAfterCommission.sub(lockableTokens));\r\n            emit Price(buyPrice, sellPrice, circulatingSupply);\r\n            emit LockIn(_user, address(this), lockableTokens);\r\n\r\n\r\n        } else {\r\n            _balances[commissionHolder] += _tokenCommission;\r\n            _balances[_user] += _tokens - _tokenCommission;\r\n\r\n            emit Transfer(address(this), _user, _tokens.sub(_tokenCommission));\r\n            emit Price(buyPrice, sellPrice, circulatingSupply);\r\n        }\r\n        emit TransactionFees(address(this), _commission);\r\n\r\n        if (purchaseAmount < _balanceEthAfterCommission) {\r\n            sendBalanceAmount(_user, _balanceEthAfterCommission - purchaseAmount);\r\n        }\r\n    }\r\n\r\n\r\n    function updateSale(uint256 _tokens) private returns (uint256 saleAmount){\r\n        uint256 _saleAmount = uint256(0);\r\n\r\n        Roadmap memory _roadmap = priceRoadmap[sellRoadmap];\r\n\r\n        uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;\r\n\r\n        uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\r\n\r\n        _roadmap = priceRoadmap[sellRoadmap];\r\n        if (_tokens < _balanceSupplyInCurrentRoadmap) {\r\n            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n\r\n            sellPrice = _roadmap.startPrice + ((_balanceSupplyInCurrentRoadmap - _tokens) * _roadmap.incPrice) - _roadmap.incPrice;\r\n            buyPrice = _roadmap.startPrice + (((_balanceSupplyInCurrentRoadmap + 1) - _tokens) * _roadmap.incPrice) - _roadmap.incPrice;\r\n            sellRoadmapUsedSupply -= _tokens;\r\n            currentRoadmapUsedSupply = sellRoadmapUsedSupply;\r\n            circulatingSupply -= _tokens;\r\n            currentRoadmap = sellRoadmap;\r\n            return _saleAmount;\r\n\r\n        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\r\n            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            if (sellRoadmap == 1) {\r\n                sellPrice = priceRoadmap[1].startPrice;\r\n                buyPrice = priceRoadmap[1].startPrice;\r\n                currentRoadmap = 1;\r\n                sellRoadmapUsedSupply = 0;\r\n                currentRoadmapUsedSupply = 0;\r\n            } else {\r\n                sellPrice = priceRoadmap[sellRoadmap - 1].startPrice + (priceRoadmap[sellRoadmap - 1].supply * priceRoadmap[sellRoadmap - 1].incPrice) - priceRoadmap[sellRoadmap - 1].incPrice;\r\n                buyPrice = priceRoadmap[sellRoadmap].startPrice;\r\n                currentRoadmap = sellRoadmap;\r\n                sellRoadmap -= 1;\r\n                sellRoadmapUsedSupply = priceRoadmap[sellRoadmap].supply;\r\n                currentRoadmapUsedSupply = 0;\r\n            }\r\n            circulatingSupply -= _tokens;\r\n            return _saleAmount;\r\n        }\r\n\r\n        uint256 noOfTokensToSell = _tokens;\r\n        uint256 _sellPrice = uint256(0);\r\n        for (uint8 i = sellRoadmap; i > 0; i--) {\r\n            _roadmap = priceRoadmap[i];\r\n            _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\r\n            if (i == sellRoadmap) {\r\n                _sellPrice = sellPrice;\r\n            } else {\r\n                _sellPrice = _roadmap.startPrice + (_roadmap.supply * _roadmap.incPrice) - _roadmap.incPrice;\r\n            }\r\n            if (noOfTokensToSell > _balanceSupplyInCurrentRoadmap) {\r\n                _saleAmount += ((2 * _sellPrice * _balanceSupplyInCurrentRoadmap) - (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\r\n                noOfTokensToSell -= _balanceSupplyInCurrentRoadmap;\r\n                _sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\r\n            } else if (noOfTokensToSell < _balanceSupplyInCurrentRoadmap) {\r\n                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\r\n\r\n                sellPrice = _roadmap.startPrice + ((_balanceSupplyInCurrentRoadmap - noOfTokensToSell) * _roadmap.incPrice) - _roadmap.incPrice;\r\n                buyPrice = _roadmap.startPrice + (((_balanceSupplyInCurrentRoadmap + 1) - noOfTokensToSell) * _roadmap.incPrice) - _roadmap.incPrice;\r\n                sellRoadmapUsedSupply = _balanceSupplyInCurrentRoadmap - noOfTokensToSell;\r\n                currentRoadmapUsedSupply = sellRoadmapUsedSupply;\r\n\r\n                circulatingSupply -= _tokens;\r\n                currentRoadmap = i;\r\n                sellRoadmap = i;\r\n                return _saleAmount;\r\n\r\n            } else {\r\n                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\r\n\r\n                sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;\r\n                buyPrice = priceRoadmap[i].startPrice;\r\n                sellRoadmap = i - 1;\r\n                sellRoadmapUsedSupply = priceRoadmap[sellRoadmap].supply;\r\n                currentRoadmapUsedSupply = 0;\r\n                circulatingSupply -= _tokens;\r\n                currentRoadmap = i;\r\n                return _saleAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function updatePurchase(uint256 _tokens, uint256 _userEthAmount) private returns (uint256 purchaseAmount){\r\n        uint256 _purchaseAmount = uint256(0);\r\n\r\n        Roadmap memory _roadmap = priceRoadmap[currentRoadmap];\r\n\r\n        uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;\r\n\r\n        uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\r\n        if (_tokens < _balanceSupplyInCurrentRoadmap) {\r\n            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            require(_purchaseAmount <= _userEthAmount, \"Dont have sufficient balance to purchase\");\r\n\r\n            sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;\r\n            buyPrice = buyPrice + (_tokens * _roadmap.incPrice);\r\n\r\n            currentRoadmapUsedSupply += _tokens;\r\n            sellRoadmapUsedSupply = currentRoadmapUsedSupply;\r\n            circulatingSupply += _tokens;\r\n            sellRoadmap = currentRoadmap;\r\n            return _purchaseAmount;\r\n\r\n        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\r\n            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            require(_purchaseAmount <= _userEthAmount, \"Dont have sufficient balance to purchase\");\r\n\r\n            sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;\r\n            buyPrice = priceRoadmap[currentRoadmap + 1].startPrice;\r\n            currentRoadmapUsedSupply = 0;\r\n            sellRoadmapUsedSupply = priceRoadmap[currentRoadmap].supply;\r\n            currentRoadmap += 1;\r\n            sellRoadmap = currentRoadmap;\r\n            circulatingSupply += _tokens;\r\n            return _purchaseAmount;\r\n        }\r\n\r\n\r\n        uint256 noOfTokensToBuy = _tokens;\r\n        uint256 _buyPrice = uint256(0);\r\n        for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {\r\n            _roadmap = priceRoadmap[i];\r\n            _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\r\n            if (i == currentRoadmap) {\r\n                _buyPrice = buyPrice;\r\n            } else {\r\n                _buyPrice = _roadmap.startPrice;\r\n            }\r\n            if (noOfTokensToBuy > _balanceSupplyInCurrentRoadmap) {\r\n                _purchaseAmount += ((2 * _buyPrice * _balanceSupplyInCurrentRoadmap) + (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\r\n                require(_purchaseAmount <= _userEthAmount, \"Dont have sufficient balance to purchase\");\r\n                noOfTokensToBuy -= _balanceSupplyInCurrentRoadmap;\r\n                _currentRoadmapUsedSupply = 0;\r\n\r\n            } else if (noOfTokensToBuy < _balanceSupplyInCurrentRoadmap) {\r\n                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\r\n                require(_purchaseAmount <= _userEthAmount, \"Dont have sufficient balance to purchase\");\r\n                if (noOfTokensToBuy == 1) {\r\n                    sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;\r\n                    buyPrice = priceRoadmap[i].startPrice + (noOfTokensToBuy * priceRoadmap[i].incPrice);\r\n                    sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\r\n                    sellRoadmap = i - 1;\r\n                } else {\r\n                    sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;\r\n                    buyPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice);\r\n                    sellRoadmapUsedSupply = noOfTokensToBuy;\r\n                    sellRoadmap = i;\r\n\r\n                }\r\n\r\n                currentRoadmap = i;\r\n                currentRoadmapUsedSupply = noOfTokensToBuy;\r\n                circulatingSupply += _tokens;\r\n                return _purchaseAmount;\r\n            } else {\r\n                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\r\n                require(_purchaseAmount <= _userEthAmount, \"Dont have sufficient balance to purchase\");\r\n                sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;\r\n                buyPrice = priceRoadmap[i + 1].startPrice;\r\n                currentRoadmapUsedSupply = 0;\r\n                sellRoadmapUsedSupply = priceRoadmap[i].supply;\r\n                circulatingSupply += _tokens;\r\n                currentRoadmap = i + 1;\r\n                sellRoadmap = i;\r\n                return _purchaseAmount;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function releaseUserIncome(address _user, uint256 _etherAmount) public onlyAdministrators {\r\n        require(_etherAmount <= userIncomes[commissionHolder], \"Not enough amount\");\r\n        commissionOf[_user] += _etherAmount;\r\n    }\r\n\r\n    function addCommissionFunds(uint256 _amount) private {\r\n        commissionFunds += _amount;\r\n    }\r\n\r\n    function getSaleSummary(uint256 _tokens) public view returns (uint256 saleAmount){\r\n        uint256 _saleAmount = uint256(0);\r\n\r\n        Roadmap memory _roadmap = priceRoadmap[sellRoadmap];\r\n\r\n        uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;\r\n\r\n        uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\r\n\r\n        _roadmap = priceRoadmap[sellRoadmap];\r\n        if (_tokens < _balanceSupplyInCurrentRoadmap) {\r\n            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            return _saleAmount;\r\n\r\n\r\n        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\r\n            _saleAmount += ((2 * sellPrice * _tokens) - (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            return _saleAmount;\r\n        }\r\n\r\n        uint256 noOfTokensToSell = _tokens;\r\n        uint256 _sellPrice = uint256(0);\r\n        for (uint8 i = sellRoadmap; i > 0; i--) {\r\n            _roadmap = priceRoadmap[i];\r\n            _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;\r\n            if (i == sellRoadmap) {\r\n                _sellPrice = sellPrice;\r\n            } else {\r\n                _sellPrice = _roadmap.startPrice + (_roadmap.supply * _roadmap.incPrice) - _roadmap.incPrice;\r\n            }\r\n            if (noOfTokensToSell > _balanceSupplyInCurrentRoadmap) {\r\n                _saleAmount += ((2 * _sellPrice * _balanceSupplyInCurrentRoadmap) - (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\r\n                noOfTokensToSell -= _balanceSupplyInCurrentRoadmap;\r\n                _sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;\r\n            } else if (noOfTokensToSell < _balanceSupplyInCurrentRoadmap) {\r\n                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\r\n                return _saleAmount;\r\n\r\n            } else {\r\n                _saleAmount += ((2 * _sellPrice * noOfTokensToSell) - (noOfTokensToSell * noOfTokensToSell * _roadmap.incPrice) - (noOfTokensToSell * _roadmap.incPrice)) / 2;\r\n                return _saleAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPurchaseSummary(uint256 _tokens) public view returns (uint256){\r\n        uint256 _purchaseAmount = uint256(0);\r\n\r\n        Roadmap memory _roadmap = priceRoadmap[currentRoadmap];\r\n\r\n        uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;\r\n\r\n        uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\r\n        if (_tokens < _balanceSupplyInCurrentRoadmap) {\r\n            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            return _purchaseAmount;\r\n\r\n        } else if (_tokens == _balanceSupplyInCurrentRoadmap) {\r\n            _purchaseAmount += ((2 * buyPrice * _tokens) + (_tokens * _tokens * _roadmap.incPrice) - (_tokens * _roadmap.incPrice)) / 2;\r\n            return _purchaseAmount;\r\n        }\r\n\r\n\r\n        uint256 noOfTokensToBuy = _tokens;\r\n        uint256 _buyPrice = uint256(0);\r\n        for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {\r\n            _roadmap = priceRoadmap[i];\r\n            _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;\r\n            if (i == currentRoadmap) {\r\n                _buyPrice = buyPrice;\r\n            } else {\r\n                _buyPrice = _roadmap.startPrice;\r\n            }\r\n            if (noOfTokensToBuy > _balanceSupplyInCurrentRoadmap) {\r\n                _purchaseAmount += ((2 * _buyPrice * _balanceSupplyInCurrentRoadmap) + (_balanceSupplyInCurrentRoadmap * _balanceSupplyInCurrentRoadmap * _roadmap.incPrice) - (_balanceSupplyInCurrentRoadmap * _roadmap.incPrice)) / 2;\r\n                noOfTokensToBuy -= _balanceSupplyInCurrentRoadmap;\r\n                _currentRoadmapUsedSupply = 0;\r\n\r\n            } else if (noOfTokensToBuy < _balanceSupplyInCurrentRoadmap) {\r\n                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\r\n                return _purchaseAmount;\r\n            } else {\r\n                _purchaseAmount += ((2 * _buyPrice * noOfTokensToBuy) + (noOfTokensToBuy * noOfTokensToBuy * _roadmap.incPrice) - (noOfTokensToBuy * _roadmap.incPrice)) / 2;\r\n                return _purchaseAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function kill(address payable addr) public onlyAdministrators {\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    function totalCommissionFunds() public onlyAdministrators view returns (uint256){\r\n        return commissionFunds;\r\n    }\r\n\r\n    function addAdministrator(address admin) public onlyAdministrators {\r\n        require(administrators[admin] != true, \"address already exists\");\r\n        administrators[admin] = true;\r\n    }\r\n\r\n    function removeAdministrator(address admin) public onlyAdministrators {\r\n        require(administrators[admin] == true, \"address not exists\");\r\n        administrators[admin] = false;\r\n    }\r\n\r\n    function updateCommissionHolders(address _dev1, address _dev2, address _dev3, address _dev4, address _dev5) public onlyAdministrators {\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        dev3 = _dev3;\r\n        dev4 = _dev4;\r\n        dev5 = _dev5;\r\n    }\r\n\r\n    function updateCommissionPercent(uint256 _percent) public onlyAdministrators {\r\n        commissionPercent = _percent;\r\n    }\r\n\r\n    function updateSellCommissionPercentage(uint256 _percent) public onlyAdministrators {\r\n        sellCommission = _percent;\r\n    }\r\n\r\n    function updateTokenCommissionPercent(uint256 _percent) public onlyAdministrators {\r\n        tokenCommissionPercent = _percent;\r\n    }\r\n\r\n    function getCommBalance() public view returns (uint256){\r\n        return commissionOf[msg.sender];\r\n    }\r\n\r\n    function getCommBalanceAdmin(address _address) public onlyAdministrators view returns (uint256){\r\n        return commissionOf[_address];\r\n    }\r\n\r\n    function distributeCommission(uint256 _amount) public onlyAdministrators {\r\n        require(_amount <= commissionFunds, \"Dont have enough funds to distribute\");\r\n        uint256 totalComPer = dev1Com + dev2Com + dev3Com + dev4Com + dev5Com;\r\n        require(totalComPer == 1000, \"Invalid Percent structure\");\r\n\r\n\r\n        commissionOf[dev1] += (_amount * dev1Com) / 1000;\r\n        commissionOf[dev2] += (_amount * dev2Com) / 1000;\r\n        commissionOf[dev3] += (_amount * dev3Com) / 1000;\r\n        commissionOf[dev4] += (_amount * dev4Com) / 1000;\r\n        commissionOf[dev5] += (_amount * dev5Com) / 1000;\r\n\r\n        commissionFunds -= _amount;\r\n\r\n    }\r\n\r\n    function upgradeContract(uint256 _dev1, uint256 _dev2, uint256 _dev3, uint256 _dev4, uint256 _dev5) public onlyAdministrators {\r\n        dev1Com = _dev1;\r\n        dev2Com = _dev2;\r\n        dev3Com = _dev3;\r\n        dev4Com = _dev4;\r\n        dev5Com = _dev5;\r\n    }\r\n\r\n    function updateTransFeesAdd(address _address) public onlyAdministrators {\r\n        require(dev != _address, \"Address already added\");\r\n        dev = _address;\r\n    }\r\n\r\n    function withdrawCommission(uint256 _amount) public {\r\n        require(_amount <= commissionOf[msg.sender], \"Dont have funds to withdraw\");\r\n        commissionOf[msg.sender] -= _amount;\r\n        sendBalanceAmount(msg.sender, _amount);\r\n        emit CommissionWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawTokenCommission(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {\r\n        require(_amount <= _balances[commissionHolder], \"Dont have enough tokens\");\r\n        _balances[commissionHolder] -= _amount;\r\n        _balances[_user] += _amount;\r\n        emit WithdrawTokenCommission(_user, _amount, nonce);\r\n    }\r\n\r\n    function withdrawStakeEarning(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {\r\n        require(_amount <= _balances[stakeHolder], \"Dont have enough tokens\");\r\n        _balances[_user] += _amount;\r\n        _balances[stakeHolder] -= _amount;\r\n        emit WithdrawStakingCommission(_user, _amount, nonce);\r\n    }\r\n\r\n    function updateTokenCommHolder(address _address) public onlyAdministrators {\r\n        require(commissionHolder != _address, \"Holder already exist\");\r\n        _balances[_address] = _balances[commissionHolder];\r\n        _balances[commissionHolder] -= _balances[_address];\r\n\r\n    }\r\n\r\n    function updateStakeHolder(address _address) public onlyAdministrators {\r\n        require(stakeHolder != _address, \"Holder already exist\");\r\n        _balances[_address] = _balances[stakeHolder];\r\n        _balances[stakeHolder] -= _balances[_address];\r\n    }\r\n\r\n    function createRoadmap() private {\r\n\r\n\r\n        Roadmap memory roadmap = Roadmap({\r\n        supply : 100000,\r\n        startPrice : 0.00027 ether,\r\n        incPrice : 0.00000000125 ether\r\n        });\r\n\r\n        priceRoadmap[1] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 400000,\r\n        startPrice : 0.00039499975 ether,\r\n        incPrice : 0.000000001 ether\r\n        });\r\n\r\n        priceRoadmap[2] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 100000,\r\n        startPrice : 0.00079500375 ether,\r\n        incPrice : 0.000000005 ether\r\n        });\r\n\r\n        priceRoadmap[3] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 100000,\r\n        startPrice : 0.00129500875 ether,\r\n        incPrice : 0.00000001 ether\r\n        });\r\n\r\n        priceRoadmap[4] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 100000,\r\n        startPrice : 0.00229501875 ether,\r\n        incPrice : 0.00000002 ether\r\n        });\r\n\r\n        priceRoadmap[5] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 90000,\r\n        startPrice : 0.00429504375 ether,\r\n        incPrice : 0.000000045 ether\r\n        });\r\n\r\n        priceRoadmap[6] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 90000,\r\n        startPrice : 0.00834507875 ether,\r\n        incPrice : 0.00000008 ether\r\n        });\r\n\r\n        priceRoadmap[7] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 70000,\r\n        startPrice : 0.01554517875 ether,\r\n        incPrice : 0.00000018 ether\r\n        });\r\n\r\n        priceRoadmap[8] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 70000,\r\n        startPrice : 0.02814534875 ether,\r\n        incPrice : 0.00000035 ether\r\n        });\r\n\r\n        priceRoadmap[9] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 70000,\r\n        startPrice : 0.052645748750 ether,\r\n        incPrice : 0.00000075 ether\r\n        });\r\n\r\n        priceRoadmap[10] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 60000,\r\n        startPrice : 0.10514679875 ether,\r\n        incPrice : 0.0000018 ether\r\n        });\r\n\r\n        priceRoadmap[11] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 60000,\r\n        startPrice : 0.21314779875 ether,\r\n        incPrice : 0.0000028 ether\r\n        });\r\n\r\n        priceRoadmap[12] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 60000,\r\n        startPrice : 0.38115099875 ether,\r\n        incPrice : 0.000006 ether\r\n        });\r\n\r\n        priceRoadmap[13] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 50000,\r\n        startPrice : 0.74115699875 ether,\r\n        incPrice : 0.000012 ether\r\n        });\r\n\r\n        priceRoadmap[14] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 50000,\r\n        startPrice : 1.34116999875 ether,\r\n        incPrice : 0.000025 ether\r\n        });\r\n\r\n        priceRoadmap[15] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 50000,\r\n        startPrice : 2.59118999875 ether,\r\n        incPrice : 0.000045 ether\r\n        });\r\n\r\n        priceRoadmap[16] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 40000,\r\n        startPrice : 4.841234998750 ether,\r\n        incPrice : 0.00009 ether\r\n        });\r\n\r\n        priceRoadmap[17] = roadmap;\r\n\r\n        roadmap = Roadmap({\r\n        supply : 40000,\r\n        startPrice : 8.44126499875 ether,\r\n        incPrice : 0.00012 ether\r\n        });\r\n\r\n        priceRoadmap[18] = roadmap;\r\n\r\n    }\r\n\r\n    function sendBalanceAmount(address _receiver, uint256 _amount) private {\r\n        if (!address(uint160(_receiver)).send(_amount)) {\r\n            address(uint160(_receiver)).transfer(_amount);\r\n        }\r\n    }\r\n\r\n    function getBuyPrice() public view returns (uint256){\r\n        return buyPrice;\r\n    }\r\n\r\n    function getSellPrice() public view returns (uint256){\r\n        return sellPrice;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalEthBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function updateBuyLimit(bool limit) public onlyAdministrators {\r\n        buyLimit = limit;\r\n    }\r\n\r\n    function updateBuyLimitToken(uint256 _noOfTokens) public onlyAdministrators {\r\n        buyLimitToken = _noOfTokens;\r\n    }\r\n\r\n    function updateMinBuyToken(uint256 _tokens) public onlyAdministrators {\r\n        minBuyToken = _tokens;\r\n    }\r\n\r\n    function updateLockablePercent(uint256 _percent) public onlyAdministrators {\r\n        locakablePercent = _percent;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockInBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTransFeesAdd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTokenCommHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"updateMinBuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rewardsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCommissionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoadmapUsedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateSellCommissionPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCommissionFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateCommissionPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"priceRoadmap\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"startPrice\",\"type\":\"uint256\"},{\"name\":\"incPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locakablePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoadmap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dev1\",\"type\":\"address\"},{\"name\":\"_dev2\",\"type\":\"address\"},{\"name\":\"_dev3\",\"type\":\"address\"},{\"name\":\"_dev4\",\"type\":\"address\"},{\"name\":\"_dev5\",\"type\":\"address\"}],\"name\":\"updateCommissionHolders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRoadmapUsedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dev1\",\"type\":\"uint256\"},{\"name\":\"_dev2\",\"type\":\"uint256\"},{\"name\":\"_dev3\",\"type\":\"uint256\"},{\"name\":\"_dev4\",\"type\":\"uint256\"},{\"name\":\"_dev5\",\"type\":\"uint256\"}],\"name\":\"upgradeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"releaseLockIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateTokenCommissionPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateLockablePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getPurchaseSummary\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"getSaleSummary\",\"outputs\":[{\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bp\",\"type\":\"uint256\"},{\"name\":\"_sp\",\"type\":\"uint256\"},{\"name\":\"_circSup\",\"type\":\"uint256\"},{\"name\":\"_currentRp\",\"type\":\"uint8\"},{\"name\":\"_sellRp\",\"type\":\"uint8\"},{\"name\":\"_crs\",\"type\":\"uint256\"},{\"name\":\"_srs\",\"type\":\"uint256\"},{\"name\":\"_commFunds\",\"type\":\"uint256\"}],\"name\":\"upgradeDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCommBalanceAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_noOfTokens\",\"type\":\"uint256\"}],\"name\":\"updateBuyLimitToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockInTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"releaseUserIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"bool\"}],\"name\":\"updateBuyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRoadmap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateStakeHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_ROADMAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_commissionHolder\",\"type\":\"address\"},{\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInStake\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInStake\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokenCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"circulatingSupply\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalInStake\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"StakeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LockIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"TransactionFees\",\"type\":\"event\"}]","ContractName":"DigiExchange","CompilerVersion":"v0.5.6+commit.b259423e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af7c5ddcdc350261ebc8c3cc1aaa2b8295c54c78000000000000000000000000c8a233ef0fb30fe8954851e9ac0bde45b7cda66e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2107ca4d623de56dad972d0d196ccc3076db7dada87df55252bf6fe6ff9b5238"}]}