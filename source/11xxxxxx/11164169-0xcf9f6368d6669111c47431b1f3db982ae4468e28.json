{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.17;\r\n\r\ninterface IKeep3rV1 {\r\n    function isKeeper(address) external returns (bool);\r\n    function worked(address keeper) external;\r\n}\r\n\r\ninterface ISushiswapV2Factory {\r\n    function allPairsLength() external view returns (uint);\r\n    function allPairs(uint) external view returns (address pair);\r\n}\r\n\r\ninterface ISushiswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\ninterface ISushiswapV2Maker {\r\n    function convert(address token0, address token1) external;\r\n}\r\n\r\ncontract SushiswapV2Keep3r {\r\n    \r\n    modifier upkeep() {\r\n        require(KP3R.isKeeper(msg.sender), \"SushiswapV2Keep3r::isKeeper: keeper is not registered\");\r\n        _;\r\n        KP3R.worked(msg.sender);\r\n    }\r\n    \r\n    IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n    ISushiswapV2Factory public constant SV2F = ISushiswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\r\n    ISushiswapV2Maker public constant SV2M = ISushiswapV2Maker(0x6684977bBED67e101BB80Fc07fCcfba655c0a64F);\r\n    \r\n    function count() public view returns (uint) {\r\n        uint _count = 0;\r\n        for (uint i = 0; i < SV2F.allPairsLength(); i++) {\r\n            if (haveBalance(SV2F.allPairs(i))) {\r\n                _count++;\r\n            }\r\n        }\r\n        return _count;\r\n    }\r\n    \r\n    function workableAll(uint _count) external view returns (address[] memory) {\r\n        return (workable(_count, 0, SV2F.allPairsLength()));\r\n    }\r\n    \r\n    function workable(uint _count, uint start, uint end) public view returns (address[] memory) {\r\n        address[] memory _workable = new address[](_count);\r\n        uint index = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            if (haveBalance(SV2F.allPairs(i))) {\r\n                _workable[index] = SV2F.allPairs(i);\r\n                index++;\r\n            }\r\n        }\r\n        return _workable;\r\n    }\r\n    \r\n    function haveBalance(address pair) public view returns (bool) {\r\n        return ISushiswapV2Pair(pair).balanceOf(address(SV2M)) > 0;\r\n    }\r\n    \r\n    function batch(ISushiswapV2Pair[] calldata pair) external {\r\n        bool _worked = true;\r\n        for (uint i = 0; i < pair.length; i++) {\r\n            if (haveBalance(address(pair[i]))) {\r\n                (bool success, bytes memory message) = address(SV2M).delegatecall(abi.encodeWithSignature(\"convert(address,address)\", pair[i].token0(), pair[i].token1()));\r\n                require(success, string(abi.encodePacked(\"SushiswapV2Keep3r::convert: failed [\", message, \"]\")));\r\n            } else {\r\n                _worked = false;\r\n            }\r\n        }\r\n        require(_worked, \"SushiswapV2Keep3r::batch: job(s) failed\");\r\n    }\r\n    \r\n    function work(ISushiswapV2Pair pair) external {\r\n        require(haveBalance(address(pair)), \"SushiswapV2Keep3r::work: invalid pair\");\r\n        (bool success, bytes memory message) = address(SV2M).delegatecall(abi.encodeWithSignature(\"convert(address,address)\", pair.token0(), pair.token1()));\r\n        require(success,  string(abi.encodePacked(\"SushiswapV2Keep3r::convert: failed [\", message, \"]\")));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SV2F\",\"outputs\":[{\"internalType\":\"contract ISushiswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SV2M\",\"outputs\":[{\"internalType\":\"contract ISushiswapV2Maker\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISushiswapV2Pair[]\",\"name\":\"pair\",\"type\":\"address[]\"}],\"name\":\"batch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"haveBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ISushiswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"workableAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SushiswapV2Keep3r","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ed96a56ee60a2274928a37667febeae9a834d149c165da92a4d1d6d5ce68f725"}]}