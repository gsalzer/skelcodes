{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/all/ethereum/bxftoken/contracts/AccountStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract AccountStorage is StandardToken {\\r\\n\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct AccountData {\\r\\n        address sponsor;\\r\\n        uint256 balance;\\r\\n        uint256 selfBuy;\\r\\n        uint256 directBonus;\\r\\n        uint256 reinvestedAmount;\\r\\n        uint256 withdrawnAmount;\\r\\n        int256 stakingValue;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct MigrationData {\\r\\n        address account;\\r\\n        address sponsor;\\r\\n        uint256 tokensToMint;\\r\\n        uint256 selfBuy;\\r\\n    }\\r\\n\\r\\n\\r\\n    bool private _accountsMigrated = false;\\r\\n\\r\\n    EnumerableSet.AddressSet private _accounts;\\r\\n    mapping (address => AccountData) private _accountsData;\\r\\n\\r\\n    bytes32 constant public ACCOUNT_MANAGER_ROLE = keccak256(\\\"ACCOUNT_MANAGER_ROLE\\\");\\r\\n\\r\\n    event AccountCreation(address indexed account, address indexed sponsor);\\r\\n    event AccountMigrationFinished();\\r\\n    event DirectBonusPaid(address indexed account, address indexed fromAccount, uint256 amountOfEthereum);\\r\\n    event AccountSponsorUpdated(address indexed account, address indexed oldSponsor, address indexed newSponsor);\\r\\n\\r\\n\\r\\n    modifier isRegistered(address account) {\\r\\n        require(_accountsMigrated, \\\"AccountStorage: account data isn't migrated yet, try later\\\");\\r\\n        require(hasAccount(account), \\\"AccountStorage: account must be registered first\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier hasEnoughBalance(uint256 amount) {\\r\\n        require(amount <= balanceOf(msg.sender), \\\"AccountStorage: insufficient account balance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier hasEnoughAvailableEther(uint256 amount) {\\r\\n        uint256 totalBonus = totalBonusOf(msg.sender);\\r\\n        require(totalBonus > 0, \\\"AccountStorage: you don't have any available ether\\\");\\r\\n        require(amount <= totalBonus, \\\"AccountStorage: you don't have enough available ether to perform operation\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        addAccountData(address(this), address(0));\\r\\n    }\\r\\n\\r\\n\\r\\n    function migrateAccount(address account, address sponsor, uint256 tokensToMint, uint256 selfBuy) public {\\r\\n        MigrationData[] memory data = new MigrationData[](1);\\r\\n        data[0] = MigrationData(account, sponsor, tokensToMint, selfBuy);\\r\\n        migrateAccountsInBatch(data);\\r\\n    }\\r\\n\\r\\n\\r\\n    function migrateAccountsInBatch(MigrationData[] memory data) public {\\r\\n        require(hasRole(ACCOUNT_MANAGER_ROLE, msg.sender), \\\"AccountStorage: must have account manager role to migrate data\\\");\\r\\n        require(!_accountsMigrated, \\\"AccountStorage: account data migration method is no more available\\\");\\r\\n\\r\\n        for (uint i = 0; i < data.length; i += 1) {\\r\\n            address curAddress = data[i].account;\\r\\n            address curSponsorAddress = data[i].sponsor;\\r\\n            uint256 tokensToMint = data[i].tokensToMint;\\r\\n            uint256 selfBuy = data[i].selfBuy;\\r\\n            if (curSponsorAddress == address(0)) {\\r\\n                curSponsorAddress = address(this);\\r\\n            }\\r\\n            addAccountData(curAddress, curSponsorAddress);\\r\\n            _accounts.add(curAddress);\\r\\n\\r\\n            increaseTotalSupply(tokensToMint);\\r\\n            increaseBalanceOf(curAddress, tokensToMint);\\r\\n            increaseSelfBuyOf(curAddress, selfBuy);\\r\\n            emit AccountCreation(curAddress, curSponsorAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isDataMigrated() public view returns(bool) {\\r\\n        return _accountsMigrated;\\r\\n    }\\r\\n\\r\\n\\r\\n    function finishAccountMigration() public {\\r\\n        require(hasRole(ACCOUNT_MANAGER_ROLE, msg.sender), \\\"AccountStorage: must have account manager role to migrate data\\\");\\r\\n        require(!_accountsMigrated, \\\"AccountStorage: account data migration method is no more available\\\");\\r\\n\\r\\n        _accountsMigrated = true;\\r\\n        emit AccountMigrationFinished();\\r\\n    }\\r\\n\\r\\n\\r\\n    function createAccount(address sponsor) public returns(bool) {\\r\\n        require(_accountsMigrated, \\\"AccountStorage: account data isn't migrated yet, try later\\\");\\r\\n        require(!hasAccount(msg.sender), \\\"AccountStorage: account already exists\\\");\\r\\n\\r\\n        address account = msg.sender;\\r\\n\\r\\n        if (sponsor == address(0)) {\\r\\n            sponsor = address(this);\\r\\n        }\\r\\n\\r\\n        addAccountData(account, sponsor);\\r\\n        _accounts.add(account);\\r\\n\\r\\n        emit AccountCreation(account, sponsor);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setSponsorFor(address account, address newSponsor) public {\\r\\n        require(hasRole(ACCOUNT_MANAGER_ROLE, msg.sender), \\\"AccountStorage: must have account manager role to change sponsor for account\\\");\\r\\n        address oldSponsor = _accountsData[account].sponsor;\\r\\n        _accountsData[account].sponsor = newSponsor;\\r\\n        emit AccountSponsorUpdated(account, oldSponsor, newSponsor);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAccountsCount() public view returns(uint256) {\\r\\n        return _accounts.length();\\r\\n    }\\r\\n\\r\\n\\r\\n    function hasAccount(address account) public view returns(bool) {\\r\\n        return _accounts.contains(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function sponsorOf(address account) public view returns(address) {\\r\\n        return _accountsData[account].sponsor;\\r\\n    }\\r\\n\\r\\n\\r\\n    function selfBuyOf(address account) public view returns(uint256) {\\r\\n        return _accountsData[account].selfBuy;\\r\\n    }\\r\\n\\r\\n\\r\\n    function balanceOf(address account) public override view returns(uint256) {\\r\\n        return _accountsData[account].balance;\\r\\n    }\\r\\n\\r\\n\\r\\n    function directBonusOf(address account) public view returns(uint256) {\\r\\n        return _accountsData[account].directBonus;\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawnAmountOf(address account) public view returns(uint256) {\\r\\n        return _accountsData[account].withdrawnAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function reinvestedAmountOf(address account) public view returns(uint256) {\\r\\n        return _accountsData[account].reinvestedAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function stakingBonusOf(address account) public virtual view returns(uint256);\\r\\n\\r\\n\\r\\n    function totalBonusOf(address account) public view returns(uint256) {\\r\\n        return directBonusOf(account) + stakingBonusOf(account) - withdrawnAmountOf(account) - reinvestedAmountOf(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseSelfBuyOf(address account, uint256 amount) internal {\\r\\n        _accountsData[account].selfBuy =_accountsData[account].selfBuy.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseBalanceOf(address account, uint256 amount) internal {\\r\\n        _accountsData[account].balance = _accountsData[account].balance.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseBalanceOf(address account, uint256 amount) internal {\\r\\n        _accountsData[account].balance = _accountsData[account].balance.sub(amount, \\\"AccountStorage: amount exceeds balance\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function addDirectBonusTo(address account, uint256 amount) internal {\\r\\n        _accountsData[account].directBonus = _accountsData[account].directBonus.add(amount);\\r\\n        emit DirectBonusPaid(account, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addWithdrawnAmountTo(address account, uint256 amount) internal {\\r\\n        _accountsData[account].withdrawnAmount = _accountsData[account].withdrawnAmount.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addReinvestedAmountTo(address account, uint256 amount) internal {\\r\\n        _accountsData[account].reinvestedAmount = _accountsData[account].reinvestedAmount.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function stakingValueOf(address account) internal view returns(int256) {\\r\\n        return _accountsData[account].stakingValue;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseStakingValueFor(address account, int256 amount) internal {\\r\\n        _accountsData[account].stakingValue += amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseStakingValueFor(address account, int256 amount) internal {\\r\\n        _accountsData[account].stakingValue -= amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addAccountData(address account, address sponsor) private {\\r\\n        AccountData memory accountData = AccountData({\\r\\n            sponsor: sponsor,\\r\\n            balance: 0,\\r\\n            selfBuy: 0,\\r\\n            directBonus: 0,\\r\\n            reinvestedAmount: 0,\\r\\n            withdrawnAmount: 0,\\r\\n            stakingValue: 0\\r\\n        });\\r\\n        _accountsData[account] = accountData;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/BXFToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./Company.sol\\\";\\r\\nimport \\\"./Staking.sol\\\";\\r\\nimport \\\"./Founder.sol\\\";\\r\\nimport \\\"./Sale.sol\\\";\\r\\nimport \\\"./DirectBonus.sol\\\";\\r\\nimport \\\"./Emergency.sol\\\";\\r\\n\\r\\n\\r\\ncontract BXFToken is Staking, Company, Sale, DirectBonus, Emergency {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event BXFBuy(address indexed account, uint256 ethereumInvested, uint256 taxedEthereum, uint256 tokensMinted);\\r\\n    event BXFSell(address indexed account, uint256 tokenBurned, uint256 ethereumGot);\\r\\n    event BXFReinvestment(address indexed account, uint256 ethereumReinvested, uint256 tokensMinted);\\r\\n    event Withdraw(address indexed account, uint256 ethereumWithdrawn);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\r\\n    constructor(string memory name, string memory symbol) StandardToken(name, symbol) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    fallback() external payable {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"BXFToken: you're not allowed to do this\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function buy() public payable isRegistered(msg.sender) {\\r\\n        (uint256 taxedEthereum, uint256 amountOfTokens) = purchaseTokens(msg.sender, msg.value);\\r\\n\\r\\n        emit Transfer(address(0), msg.sender, amountOfTokens);\\r\\n        emit BXFBuy(msg.sender, msg.value, taxedEthereum, amountOfTokens);\\r\\n    }\\r\\n\\r\\n\\r\\n    function sell(uint256 amountOfTokens) public isRegistered(msg.sender) hasEnoughBalance(amountOfTokens) {\\r\\n        address account = msg.sender;\\r\\n\\r\\n        decreaseTotalSupply(amountOfTokens);\\r\\n        decreaseBalanceOf(account, amountOfTokens);\\r\\n\\r\\n        if (isFounder(account)) dropFounderOnSell(account);\\r\\n\\r\\n        uint256 taxedEthereum = processStakingOnSell(account, amountOfTokens);\\r\\n\\r\\n        msg.sender.transfer(taxedEthereum);\\r\\n\\r\\n        emit Transfer(account, address(0), amountOfTokens);\\r\\n        emit BXFSell(account, amountOfTokens, taxedEthereum);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw(uint256 amountToWithdraw) public isRegistered(msg.sender) hasEnoughAvailableEther(amountToWithdraw) {\\r\\n        require(amountToWithdraw <= address(this).balance, \\\"BXFToken: insufficient contract balance\\\");\\r\\n\\r\\n        address account = msg.sender;\\r\\n        addWithdrawnAmountTo(account, amountToWithdraw);\\r\\n        msg.sender.transfer(amountToWithdraw);\\r\\n\\r\\n        emit Withdraw(account, amountToWithdraw);\\r\\n    }\\r\\n\\r\\n\\r\\n    function reinvest(uint256 amountToReinvest) public isRegistered(msg.sender) hasEnoughAvailableEther(amountToReinvest) {\\r\\n        address account = msg.sender;\\r\\n\\r\\n        addReinvestedAmountTo(account, amountToReinvest);\\r\\n        (uint256 taxedEthereum, uint256 amountOfTokens) = purchaseTokens(account, amountToReinvest);\\r\\n\\r\\n        emit Transfer(address(0), account, amountOfTokens);\\r\\n        emit BXFReinvestment(account, amountToReinvest, amountOfTokens);\\r\\n    }\\r\\n\\r\\n\\r\\n    function exit() public isRegistered(msg.sender) {\\r\\n        address account = msg.sender;\\r\\n        if (balanceOf(account) > 0) {\\r\\n            sell(balanceOf(account));\\r\\n        }\\r\\n        if (totalBonusOf(account) > 0) {\\r\\n            withdraw(totalBonusOf(account));\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override hasEnoughBalance(amount) returns(bool) {\\r\\n        address sender = msg.sender;\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 stakingFee = calculateStakingFee(amount);\\r\\n        uint256 taxedTokens = SafeMath.sub(amount, stakingFee);\\r\\n\\r\\n        decreaseTotalSupply(stakingFee);\\r\\n\\r\\n        decreaseBalanceOf(sender, amount);\\r\\n        increaseBalanceOf(recipient, taxedTokens);\\r\\n\\r\\n        processDistributionOnTransfer(sender, amount, recipient, taxedTokens);\\r\\n\\r\\n        emit Transfer(sender, address(0), stakingFee);\\r\\n        emit Transfer(sender, recipient, taxedTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function purchaseTokens(address senderAccount, uint256 amountOfEthereum) internal canInvest(amountOfEthereum) returns(uint256, uint256) {\\r\\n        uint256 taxedEthereum = amountOfEthereum;\\r\\n\\r\\n        uint256 companyFee = calculateCompanyFee(amountOfEthereum);\\r\\n        uint256 directBonus = calculateDirectBonus(amountOfEthereum);\\r\\n        uint256 stakingFee = calculateStakingFee(amountOfEthereum);\\r\\n\\r\\n        taxedEthereum = taxedEthereum.sub(companyFee);\\r\\n        increaseCompanyBalance(companyFee);\\r\\n\\r\\n        address account = senderAccount;\\r\\n        address sponsor = sponsorOf(account);\\r\\n        increaseSelfBuyOf(account, amountOfEthereum);\\r\\n\\r\\n\\r\\n        if (sponsor == address(this)) {\\r\\n            increaseCompanyBalance(directBonus);\\r\\n            taxedEthereum = taxedEthereum.sub(directBonus);\\r\\n        } else if (isEligibleForDirectBonus(sponsor)) {\\r\\n            addDirectBonusTo(sponsor, directBonus);\\r\\n            taxedEthereum = taxedEthereum.sub(directBonus);\\r\\n        }\\r\\n\\r\\n        taxedEthereum = taxedEthereum.sub(stakingFee);\\r\\n\\r\\n        uint256 amountOfTokens = ethereumToTokens(taxedEthereum);\\r\\n\\r\\n        processStakingOnBuy(senderAccount, amountOfTokens, stakingFee);\\r\\n        increaseBalanceOf(senderAccount, amountOfTokens);\\r\\n\\r\\n        return (taxedEthereum, amountOfTokens);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Company.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract Company is AccessControl {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private COMPANY_FEE = 41;\\r\\n    uint256 private _companyBalance = 0;\\r\\n\\r\\n    event CompanyWithdraw(address indexed account, uint256 amount);\\r\\n    event CompanyFeeUpdate(uint256 fee);\\r\\n\\r\\n    bytes32 public constant COMPANY_MANAGER_ROLE = keccak256(\\\"COMPANY_MANAGER_ROLE\\\");\\r\\n\\r\\n\\r\\n    function companyBalance() public view returns(uint256) {\\r\\n        return _companyBalance;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getCompanyFee() public view returns(uint256) {\\r\\n        return COMPANY_FEE;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setCompanyFee(uint256 fee) public {\\r\\n        require(hasRole(COMPANY_MANAGER_ROLE, msg.sender), \\\"Company: must have company manager role\\\");\\r\\n        COMPANY_FEE = fee;\\r\\n\\r\\n        emit CompanyFeeUpdate(fee);\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdrawCompanyBalance(uint256 amount) public {\\r\\n        require(hasRole(COMPANY_MANAGER_ROLE, msg.sender), \\\"Company: must have company manager role\\\");\\r\\n        require(amount <= _companyBalance, \\\"Company: insufficient company balance\\\");\\r\\n        require(amount <= address(this).balance, \\\"Company: insufficient contract balance\\\");\\r\\n\\r\\n        msg.sender.transfer(amount);\\r\\n        _companyBalance = _companyBalance.add(amount);\\r\\n\\r\\n        emit CompanyWithdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseCompanyBalance(uint256 amount) internal {\\r\\n        _companyBalance = _companyBalance.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function calculateCompanyFee(uint256 amount) internal view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(amount, COMPANY_FEE), 100);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/DirectBonus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./AccountStorage.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract DirectBonus is AccountStorage {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private DIRECT_BONUS_FEE = 10;\\r\\n    uint256 private MINIMUM_SELF_BUY_FOR_DIRECT_BONUS = 0.001 ether;\\r\\n\\r\\n    bytes32 public constant DIRECT_BONUS_MANAGER_ROLE = keccak256(\\\"DIRECT_BONUS_MANAGER_ROLE\\\");\\r\\n\\r\\n    event MinimumSelfBuyForDirectBonusUpdate(uint256 amount);\\r\\n    event DirectBonusFeeUpdate(uint256 fee);\\r\\n\\r\\n\\r\\n    function getDirectBonusFee() public view returns(uint256) {\\r\\n        return DIRECT_BONUS_FEE;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setDirectBonusFee(uint256 fee) public {\\r\\n        require(hasRole(DIRECT_BONUS_MANAGER_ROLE, msg.sender), \\\"DirectBonus: must have direct bonus manager role to set direct bonus fee\\\");\\r\\n        DIRECT_BONUS_FEE = fee;\\r\\n\\r\\n        emit DirectBonusFeeUpdate(fee);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getMinimumSelfBuyForDirectBonus() public view returns(uint256) {\\r\\n        return MINIMUM_SELF_BUY_FOR_DIRECT_BONUS;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setMinimumSelfBuyForDirectBonus(uint256 amount) public {\\r\\n        require(hasRole(DIRECT_BONUS_MANAGER_ROLE, msg.sender), \\\"DirectBonus: must have direct bonus manager role to set minimum self buy for direct bonus\\\");\\r\\n        MINIMUM_SELF_BUY_FOR_DIRECT_BONUS = amount;\\r\\n\\r\\n        emit MinimumSelfBuyForDirectBonusUpdate(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function calculateDirectBonus(uint256 amount) internal view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(amount, DIRECT_BONUS_FEE), 100);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isEligibleForDirectBonus(address sponsor) internal view returns(bool) {\\r\\n        return (selfBuyOf(sponsor) >= MINIMUM_SELF_BUY_FOR_DIRECT_BONUS);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Emergency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./Founder.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Emergency is Founder {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bytes32 constant public EMERGENCY_MANAGER_ROLE = keccak256(\\\"EMERGENCY_MANAGER_ROLE\\\");\\r\\n\\r\\n    EnumerableSet.AddressSet private _emergencyVotes;\\r\\n\\r\\n    uint256 private _emergencyThresholdCount;\\r\\n    bool private _emergencyVotingStarted = false;\\r\\n\\r\\n    event EmergencyVotingStarted();\\r\\n    event EmergencyWithdraw(address account, uint256 amount);\\r\\n\\r\\n\\r\\n    function isEmergencyCase() public view returns(bool) {\\r\\n        return _emergencyVotingStarted;\\r\\n    }\\r\\n\\r\\n\\r\\n    function emergencyContractBalanceWithdraw() public {\\r\\n        require(hasRole(EMERGENCY_MANAGER_ROLE, msg.sender), \\\"Emergency: you're not allowed to do this\\\");\\r\\n        require(emergencyVotesCount() >= emergencyVotingThresholdCount(), \\\"Emergency: not enough votes for performing emergency withdraw\\\");\\r\\n\\r\\n        msg.sender.transfer(address(this).balance);\\r\\n        emit EmergencyWithdraw(msg.sender, address(this).balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    function voteForEmergencyCase() public returns(bool) {\\r\\n        require(_emergencyVotingStarted, \\\"Emergency: emergency voting is not activated\\\");\\r\\n        require(isFounder(msg.sender), \\\"Emergency: only founders have right to vote for emergency cases\\\");\\r\\n\\r\\n        return _emergencyVotes.add(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    function emergencyVotesCount() public view returns(uint256) {\\r\\n        return _emergencyVotes.length();\\r\\n    }\\r\\n\\r\\n\\r\\n    function emergencyVotingThresholdCount() public view returns(uint256) {\\r\\n        return _emergencyThresholdCount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function hasVotedForEmergency(address account) public view returns(bool) {\\r\\n        return _emergencyVotes.contains(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function startEmergencyVote(uint256 thresholdCount) public {\\r\\n        require(hasRole(EMERGENCY_MANAGER_ROLE, msg.sender), \\\"Emergency: you're not allowed to start emergency vote\\\");\\r\\n        require(0 < thresholdCount && thresholdCount <= getFoundersCount(), \\\"Emergency: please set right threshold\\\");\\r\\n\\r\\n        _emergencyVotingStarted = true;\\r\\n        _emergencyThresholdCount = thresholdCount;\\r\\n\\r\\n        emit EmergencyVotingStarted();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Founder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"./DirectBonus.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Founder is AccountStorage {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    uint256 private FOUNDER_INVESTMENT_CAP_BONUS = 20 ether;\\r\\n    bytes32 constant public FOUNDER_MANAGER_ROLE = keccak256(\\\"FOUNDER_MANAGER_ROLE\\\");\\r\\n\\r\\n    EnumerableSet.AddressSet private _founderAccounts;\\r\\n\\r\\n    event FounderInvestmentCapBonusUpdate(uint256 newInvestmentCapBonus);\\r\\n\\r\\n\\r\\n    function isFounder(address account) public view returns(bool) {\\r\\n        return _founderAccounts.contains(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getFoundersCount() public view returns(uint256) {\\r\\n        return _founderAccounts.length();\\r\\n    }\\r\\n\\r\\n\\r\\n    function setFounderInvestmentCapBonus(uint256 investmentCapBonus) public {\\r\\n        require(hasRole(FOUNDER_MANAGER_ROLE, msg.sender), \\\"Founder: must have founder manager role set investment cap bonus for founders\\\");\\r\\n        FOUNDER_INVESTMENT_CAP_BONUS = investmentCapBonus;\\r\\n\\r\\n        emit FounderInvestmentCapBonusUpdate(investmentCapBonus);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getFounderInvestmentCapBonus() public view returns(uint256){\\r\\n        return FOUNDER_INVESTMENT_CAP_BONUS;\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFounder(address account) public returns(bool) {\\r\\n        require(hasRole(FOUNDER_MANAGER_ROLE, msg.sender), \\\"Founder: must have founder manager role to add founder\\\");\\r\\n        return _founderAccounts.add(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeFounder(address account) public returns(bool) {\\r\\n        require(hasRole(FOUNDER_MANAGER_ROLE, msg.sender), \\\"Founder: must have founder manager role to remove founder\\\");\\r\\n        return _founderAccounts.remove(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function dropFounderOnSell(address account) internal returns(bool) {\\r\\n        return _founderAccounts.remove(account);\\r\\n    }\\r\\n\\r\\n\\r\\n    function founderInvestmentBonusCapFor(address account) internal view returns(uint256) {\\r\\n        return isFounder(account) ? getFounderInvestmentCapBonus() : 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Price.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Price is StandardToken {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 constant private INITIAL_TOKEN_PRICE = 0.0000001 ether;\\r\\n    uint256 constant private INCREMENT_TOKEN_PRICE = 0.00000001 ether;\\r\\n\\r\\n\\r\\n    function tokenPrice() public view returns(uint256) {\\r\\n        return tokensToEthereum(1 ether);\\r\\n    }\\r\\n\\r\\n\\r\\n    function ethereumToTokens(uint256 _ethereum) internal view returns(uint256) {\\r\\n        uint256 _tokenPriceInitial = INITIAL_TOKEN_PRICE * 1e18;\\r\\n        uint256 _tokensReceived =\\r\\n        (\\r\\n        (\\r\\n        // underflow attempts BTFO\\r\\n        SafeMath.sub(\\r\\n            (sqrt\\r\\n        (\\r\\n            (_tokenPriceInitial**2)\\r\\n            +\\r\\n            (2*(INCREMENT_TOKEN_PRICE * 1e18)*(_ethereum * 1e18))\\r\\n            +\\r\\n            (((INCREMENT_TOKEN_PRICE)**2)*(totalSupply()**2))\\r\\n            +\\r\\n            (2*(INCREMENT_TOKEN_PRICE)*_tokenPriceInitial*totalSupply())\\r\\n        )\\r\\n            ), _tokenPriceInitial\\r\\n        )\\r\\n        )/(INCREMENT_TOKEN_PRICE)\\r\\n        )-(totalSupply())\\r\\n        ;\\r\\n\\r\\n        return _tokensReceived;\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokensToEthereum(uint256 _tokens) internal view returns(uint256) {\\r\\n        uint256 tokens_ = (_tokens + 1e18);\\r\\n        uint256 _tokenSupply = (totalSupply() + 1e18);\\r\\n        uint256 _etherReceived =\\r\\n        (\\r\\n        // underflow attempts BTFO\\r\\n        SafeMath.add(\\r\\n            (\\r\\n            (\\r\\n            (\\r\\n            INITIAL_TOKEN_PRICE + (INCREMENT_TOKEN_PRICE * (_tokenSupply / 1e18))\\r\\n            ) - INCREMENT_TOKEN_PRICE\\r\\n            ) * (tokens_ - 1e18)\\r\\n            ), (INCREMENT_TOKEN_PRICE * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\\r\\n        )\\r\\n        /1e18);\\r\\n        return _etherReceived;\\r\\n    }\\r\\n\\r\\n\\r\\n    function sqrt(uint x) internal pure returns(uint y) {\\r\\n        uint z = (x + 1) / 2;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Sale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./Founder.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Sale is Founder {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint private _saleStartBlockNumber = 0;\\r\\n    bytes32 public constant SALE_MANAGER_ROLE = keccak256(\\\"SALE_MANAGER_ROLE\\\");\\r\\n\\r\\n    event SaleStarted(uint atBlockNumber, uint atTimestamp);\\r\\n    event NewSaleStartBlock(uint atBlockNumber, uint atTimestamp);\\r\\n\\r\\n\\r\\n    modifier canInvest(uint256 amount) {\\r\\n        require(selfBuyOf(msg.sender) + amount <= getInvestmentCap() + founderInvestmentBonusCapFor(msg.sender), \\\"Sale: you can't invest more than current investment cap\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getInvestmentCap() public view returns(uint256) {\\r\\n        if (_saleStartBlockNumber == 0)\\r\\n            return 0 ether;\\r\\n        uint256 currentBlockNumberFromSaleStart = block.number - _saleStartBlockNumber;\\r\\n        if (currentBlockNumberFromSaleStart <= 1250000)\\r\\n            return 31680000 * (currentBlockNumberFromSaleStart**2) + 1 ether;\\r\\n        if (currentBlockNumberFromSaleStart <= 2500000)\\r\\n            return 100 ether - 31680000 * (currentBlockNumberFromSaleStart - 2500000)**2;\\r\\n        return 100 ether;\\r\\n    }\\r\\n\\r\\n\\r\\n    function startSale() public {\\r\\n        require(hasRole(SALE_MANAGER_ROLE, msg.sender), \\\"Sale: must have sale manager role\\\");\\r\\n        require(_saleStartBlockNumber == 0, \\\"Sale: start sale method is no more available\\\");\\r\\n\\r\\n        _saleStartBlockNumber = block.number;\\r\\n\\r\\n        emit SaleStarted(block.number, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    function moveSaleForwardBy(uint256 blocks) public {\\r\\n        require(hasRole(SALE_MANAGER_ROLE, msg.sender), \\\"Sale: must have sale manager role\\\");\\r\\n        require(_saleStartBlockNumber > 0, \\\"Sale: sale forward move method is not available yet, start sale first\\\");\\r\\n        require(blocks < _saleStartBlockNumber, \\\"Sale: you can't move sale start from zero block\\\");\\r\\n\\r\\n        _saleStartBlockNumber = _saleStartBlockNumber.sub(blocks);\\r\\n        emit NewSaleStartBlock(_saleStartBlockNumber, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./AccountStorage.sol\\\";\\r\\nimport \\\"./Price.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Staking is AccountStorage, Price {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private _stakingProfitPerShare;\\r\\n\\r\\n    bytes32 public constant STAKING_MANAGER_ROLE = keccak256(\\\"STAKING_MANAGER_ROLE\\\");\\r\\n    bytes32 public constant LOYALTY_BONUS_MANAGER_ROLE = keccak256(\\\"LOYALTY_BONUS_MANAGER_ROLE\\\");\\r\\n\\r\\n    uint256 constant private MAGNITUDE = 2 ** 64;\\r\\n    uint256 private STAKING_FEE = 8;\\r\\n\\r\\n    event StakingFeeUpdate(uint256 fee);\\r\\n    event LoyaltyBonusStaked(uint256 amount);\\r\\n\\r\\n\\r\\n    function getStakingFee() public view returns(uint256) {\\r\\n        return STAKING_FEE;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setStakingFee(uint256 fee) public {\\r\\n        require(hasRole(STAKING_MANAGER_ROLE, msg.sender), \\\"Staking: must have staking manager role to set staking fee\\\");\\r\\n        STAKING_FEE = fee;\\r\\n\\r\\n        emit StakingFeeUpdate(fee);\\r\\n    }\\r\\n\\r\\n\\r\\n    function stakeLoyaltyBonus() public payable {\\r\\n        require(hasRole(LOYALTY_BONUS_MANAGER_ROLE, msg.sender), \\\"Staking: must have loyalty bonus manager role to stake bonuses\\\");\\r\\n        increaseStakingProfitPerShare(msg.value);\\r\\n\\r\\n        emit LoyaltyBonusStaked(msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function stakingBonusOf(address account) public override view returns(uint256) {\\r\\n        return (uint256) ((int256)(_stakingProfitPerShare * balanceOf(account)) - stakingValueOf(account)) / MAGNITUDE;\\r\\n    }\\r\\n\\r\\n\\r\\n    function calculateStakingFee(uint256 amount) internal view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(amount, STAKING_FEE), 100);\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseStakingProfitPerShare(uint256 stakingBonus) internal {\\r\\n        _stakingProfitPerShare += (stakingBonus * MAGNITUDE / totalSupply());\\r\\n    }\\r\\n\\r\\n\\r\\n    function processStakingOnBuy(address account, uint256 amountOfTokens, uint256 stakingBonus) internal {\\r\\n        uint256 stakingFee = stakingBonus * MAGNITUDE;\\r\\n\\r\\n        if (totalSupply() > 0) {\\r\\n            increaseTotalSupply(amountOfTokens);\\r\\n            increaseStakingProfitPerShare(stakingBonus);\\r\\n            stakingFee = amountOfTokens * (stakingBonus * MAGNITUDE / totalSupply());\\r\\n        } else {\\r\\n            setTotalSupply(amountOfTokens);\\r\\n        }\\r\\n\\r\\n        int256 stakingPayout = (int256) (_stakingProfitPerShare * amountOfTokens - stakingFee);\\r\\n        increaseStakingValueFor(account, stakingPayout);\\r\\n    }\\r\\n\\r\\n\\r\\n    function processStakingOnSell(address account, uint256 amountOfTokens) internal returns(uint256) {\\r\\n        uint256 ethereum = tokensToEthereum(amountOfTokens);\\r\\n        uint256 stakingFee = calculateStakingFee(ethereum);\\r\\n        uint256 taxedEthereum = SafeMath.sub(ethereum, stakingFee);\\r\\n\\r\\n        int256 stakingValueUpdate = (int256) (_stakingProfitPerShare * amountOfTokens);\\r\\n        decreaseStakingValueFor(account, stakingValueUpdate);\\r\\n\\r\\n        if (totalSupply() > 0) {\\r\\n            increaseStakingProfitPerShare(stakingFee);\\r\\n        }\\r\\n        return taxedEthereum;\\r\\n    }\\r\\n\\r\\n\\r\\n    function processDistributionOnTransfer(address sender, uint256 amountOfTokens, address recipient, uint256 taxedTokens) internal {\\r\\n        uint256 stakedBonus = tokensToEthereum(SafeMath.sub(amountOfTokens, taxedTokens));\\r\\n\\r\\n        decreaseStakingValueFor(sender, (int256) (_stakingProfitPerShare * amountOfTokens));\\r\\n        increaseStakingValueFor(recipient, (int256) (_stakingProfitPerShare * taxedTokens));\\r\\n\\r\\n        increaseStakingProfitPerShare(stakedBonus);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/all/ethereum/bxftoken/contracts/StandardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract StandardToken is Context, AccessControl, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    uint256 private _totalSupply = 0;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    bytes32 public constant PAUSE_MANAGER_ROLE = keccak256(\\\"PAUSE_MANAGER_ROLE\\\");\\r\\n\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n\\r\\n    function name() public view returns(string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n\\r\\n    function symbol() public view returns(string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decimals() public view returns(uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view returns(uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n\\r\\n    function balanceOf(address account) public virtual view returns(uint256);\\r\\n\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual returns(bool);\\r\\n\\r\\n\\r\\n    function pause() public {\\r\\n        require(hasRole(PAUSE_MANAGER_ROLE, msg.sender), \\\"StandardToken: must have pauser manager role to pause\\\");\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n\\r\\n    function unpause() public {\\r\\n        require(hasRole(PAUSE_MANAGER_ROLE, msg.sender), \\\"StandardToken: must have pauser manager role to unpause\\\");\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal view {\\r\\n        require(!paused(), \\\"StandardToken: token transfer while paused\\\");\\r\\n        require(from != address(0), \\\"StandardToken: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"StandardToken: transfer to the zero address\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function setTotalSupply(uint256 amount) internal {\\r\\n        _totalSupply = amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseTotalSupply(uint256 amount) internal {\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseTotalSupply(uint256 amount) internal {\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"AccountCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccountMigrationFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSponsor\",\"type\":\"address\"}],\"name\":\"AccountSponsorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumInvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxedEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"BXFBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"BXFReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumGot\",\"type\":\"uint256\"}],\"name\":\"BXFSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CompanyFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DirectBonusFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfEthereum\",\"type\":\"uint256\"}],\"name\":\"DirectBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyVotingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInvestmentCapBonus\",\"type\":\"uint256\"}],\"name\":\"FounderInvestmentCapBonusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoyaltyBonusStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinimumSelfBuyForDirectBonusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"}],\"name\":\"NewSaleStartBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"}],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"StakingFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ACCOUNT_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPANY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIRECT_BONUS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOYALTY_BONUS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"directBonusOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyContractBalanceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyVotesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyVotingThresholdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAccountMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompanyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectBonusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFounderInvestmentCapBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestmentCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumSelfBuyForDirectBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVotedForEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDataMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergencyCase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBuy\",\"type\":\"uint256\"}],\"name\":\"migrateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBuy\",\"type\":\"uint256\"}],\"internalType\":\"struct AccountStorage.MigrationData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"migrateAccountsInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"moveSaleForwardBy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToReinvest\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reinvestedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFounder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"selfBuyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCompanyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDirectBonusFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentCapBonus\",\"type\":\"uint256\"}],\"name\":\"setFounderInvestmentCapBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumSelfBuyForDirectBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newSponsor\",\"type\":\"address\"}],\"name\":\"setSponsorFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sponsorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLoyaltyBonus\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakingBonusOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdCount\",\"type\":\"uint256\"}],\"name\":\"startEmergencyVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalBonusOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForEmergencyCase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCompanyBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BXFToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f426c61636b466f727420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034258460000000000000000000000000000000000000000000000000000000000","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}