{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DssExecLib.sol\r\npragma solidity >=0.6.11 <0.7.0;\r\n\r\n////// src/MathLib.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n//\r\n// MathLib.sol -- Math Functions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.11; */\r\n\r\nlibrary MathLib {\r\n\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n\r\n    // --- SafeMath Functions ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n}\r\n\r\n////// src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.11; */\r\n\r\n/* import \"./MathLib.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike_2 {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n\r\nlibrary DssExecLib {\r\n\r\n    using MathLib for *;\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set an address in the MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _key Access key for the address (e.g. \"MCD_VAT\")\r\n        @param _val The address associated with the _key\r\n    */\r\n    function setChangelogAddress(address _log, bytes32 _key, address _val) public {\r\n        ChainlogLike(_log).setAddress(_key, _val);\r\n    }\r\n\r\n    /**\r\n        @dev Set version in the MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _version Changelog version (e.g. \"1.1.2\")\r\n    */\r\n    function setChangelogVersion(address _log, string memory _version) public {\r\n        ChainlogLike(_log).setVersion(_version);\r\n    }\r\n    /**\r\n        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _ipfsHash IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")\r\n    */\r\n    function setChangelogIPFS(address _log, string memory _ipfsHash) public {\r\n        ChainlogLike(_log).setIPFS(_ipfsHash);\r\n    }\r\n    /**\r\n        @dev Set SHA256 hash in MCD on-chain changelog.\r\n        @param _log Address of the chainlog contract\r\n        @param _SHA256Sum SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")\r\n    */\r\n    function setChangelogSHA256(address _log, string memory _SHA256Sum) public {\r\n        ChainlogLike(_log).setSha256sum(_SHA256Sum);\r\n    }\r\n\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract where the authorization will be set\r\n        @param _ward   Address to be authorized\r\n    */\r\n    function authorize(address _base, address _ward) public {\r\n        Authorizable(_base).rely(_ward);\r\n    }\r\n    /**\r\n        @dev Revoke contract authorization from an address.\r\n        @param _base   The address of the contract where the authorization will be revoked\r\n        @param _ward   Address to be deauthorized\r\n    */\r\n    function deauthorize(address _base, address _ward) public {\r\n        Authorizable(_base).deny(_ward);\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    /**\r\n        @dev Update rate accumulation for the Dai Savings Rate (DSR).\r\n        @param _pot   Address of the MCD_POT core contract\r\n    */\r\n    function accumulateDSR(address _pot) public {\r\n        Drippable(_pot).drip();\r\n    }\r\n    /**\r\n        @dev Update rate accumulation for the stability fees of a given collateral type.\r\n        @param _jug   Address of the MCD_JUG core contract\r\n        @param _ilk   Collateral type\r\n    */\r\n    function accumulateCollateralStabilityFees(address _jug, bytes32 _ilk) public {\r\n        Drippable(_jug).drip(_ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    /**\r\n        @dev Update price of a given collateral type.\r\n        @param _spot  Spotter contract address\r\n        @param _ilk   Collateral type\r\n    */\r\n    function updateCollateralPrice(address _spot, bytes32 _ilk) public {\r\n        Pricing(_spot).poke(_ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_ilk, _what, _addr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\r\n    /**\r\n        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-global-Line-precision\"\r\n        Fileable(_vat).file(\"Line\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function increaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-Line-increase-precision\"\r\n        Fileable(_vat).file(\"Line\", MathLib.add(DssVat(_vat).Line(), _amount * MathLib.RAD));\r\n    }\r\n    /**\r\n        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function decreaseGlobalDebtCeiling(address _vat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-Line-decrease-precision\"\r\n        Fileable(_vat).file(\"Line\", MathLib.sub(DssVat(_vat).Line(), _amount * MathLib.RAD));\r\n    }\r\n    /**\r\n        @dev Set the Dai Savings Rate. See: docs/rates.txt\r\n        @param _pot    The address of the Pot core contract\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setDSR(address _pot, uint256 _rate) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/dsr-out-of-bounds\"\r\n        Fileable(_pot).file(\"dsr\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusAuctionAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-bump-precision\"\r\n        Fileable(_vow).file(\"bump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusBuffer(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-hump-precision\"\r\n        Fileable(_vow).file(\"hump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flap    The address of the Flapper core contract\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinSurplusAuctionBidIncrease(address _flap, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(_flap).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for surplus auctions.\r\n        @param _flap   The address of the Flapper core contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setSurplusAuctionBidDuration(address _flap, uint256 _duration) public {\r\n        Fileable(_flap).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for surplus auctions.\r\n        @param _flap   The address of the Flapper core contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setSurplusAuctionDuration(address _flap, uint256 _duration) public {\r\n        Fileable(_flap).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _duration Duration in seconds\r\n    */\r\n    function setDebtAuctionDelay(address _vow, uint256 _duration) public {\r\n        Fileable(_vow).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setDebtAuctionDAIAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-sump-precision\"\r\n        Fileable(_vow).file(\"sump\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\r\n        @param _vow    The address of the Vow core contract\r\n        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\r\n    */\r\n    function setDebtAuctionMKRAmount(address _vow, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(_vow).file(\"dump\", _amount * MathLib.WAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinDebtAuctionBidIncrease(address _flop, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        Fileable(_flop).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for debt auctions.\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setDebtAuctionBidDuration(address _flop, uint256 _duration) public {\r\n        Fileable(_flop).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for debt auctions.\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setDebtAuctionDuration(address _flop, uint256 _duration) public {\r\n        Fileable(_flop).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flop   The address of the Flopper core contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setDebtAuctionMKRIncreaseRate(address _flop, uint256 _pct_bps) public {\r\n        Fileable(_flop).file(\"pad\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _cat    The address of the Cat core contract\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmount(address _cat, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        Fileable(_cat).file(\"box\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\r\n        @param _end    The address of the End core contract\r\n        @param _duration Time in seconds to set for ES processing time\r\n    */\r\n    function setEmergencyShutdownProcessingTime(address _end, uint256 _duration) public {\r\n        Fileable(_end).file(\"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the global stability fee (is not typically used, currently is 0).\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n        @param _jug    The address of the Jug core accounting contract\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n    */\r\n    function setGlobalStabilityFee(address _jug, uint256 _rate) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/global-stability-fee-out-of-bounds\"\r\n        Fileable(_jug).file(\"base\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is value * RAY / 1000\r\n        @param _spot   The address of the Spot core contract\r\n        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\r\n    */\r\n    function setDAIReferenceValue(address _spot, uint256 _value) public {\r\n        require(_value < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(_spot).file(\"par\", MathLib.rdiv(_value, 1000));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    /**\r\n        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        Fileable(_vat).file(_ilk, \"line\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, increases the global debt ceiling by _amount\r\n    */\r\n    function increaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", MathLib.add(line_, _amount * MathLib.RAD));\r\n        if (_global) { increaseGlobalDebtCeiling(_vat, _amount); }\r\n    }\r\n    /**\r\n        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, decreases the global debt ceiling by _amount\r\n    */\r\n    function decreaseIlkDebtCeiling(address _vat, bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        Fileable(_vat).file(_ilk, \"line\", MathLib.sub(line_, _amount * MathLib.RAD));\r\n        if (_global) { decreaseGlobalDebtCeiling(_vat, _amount); }\r\n    }\r\n    /**\r\n        @dev Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _iam    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\r\n        @param _ttl    The amount of time (in seconds)\r\n    */\r\n    function setIlkAutoLineParameters(address _iam, bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-auto-line-amount-precision\"\r\n        require(_gap < MathLib.WAD);  // \"LibDssExec/incorrect-auto-line-gap-precision\"\r\n        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, _gap * MathLib.RAD, _ttl);\r\n    }\r\n    /**\r\n        @dev Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values\r\n        @param _iam    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkAutoLineDebtCeiling(address _iam, bytes32 _ilk, uint256 _amount) public {\r\n        (, uint256 gap, uint48 ttl,,) = IAMLike(_iam).ilks(_ilk);\r\n        require(gap != 0 && ttl != 0);  // \"LibDssExec/auto-line-not-configured\"\r\n        IAMLike(_iam).setIlk(_ilk, _amount * MathLib.RAD, uint256(gap), uint256(ttl));\r\n    }\r\n    /**\r\n        @dev Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _iam    The address of the MCD_IAM_AUTO_LINE core accounting contract\r\n        @param _ilk    The ilk to remove (ex. bytes32(\"ETH-A\"))\r\n    */\r\n    function removeIlkFromAutoLine(address _iam, bytes32 _ilk) public {\r\n        IAMLike(_iam).remIlk(_ilk);\r\n    }\r\n    /**\r\n        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\r\n        @param _vat    The address of the Vat core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMinVaultAmount(address _vat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dust-precision\"\r\n        Fileable(_vat).file(_ilk, \"dust\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\r\n    */\r\n    function setIlkLiquidationPenalty(address _cat, bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(_cat).file(_ilk, \"chop\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\r\n        @param _cat    The address of the Cat core accounting contract (will need to revisit for LIQ-2.0)\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMaxLiquidationAmount(address _cat, bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount < MathLib.WAD);  // \"LibDssExec/incorrect-ilk-dunk-precision\"\r\n        Fileable(_cat).file(_ilk, \"dunk\", _amount * MathLib.RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _spot   The address of the Spot core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\r\n    */\r\n    function setIlkLiquidationRatio(address _spot, bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps < 10 * MathLib.BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if pct >= 1000%\r\n        require(_pct_bps >= MathLib.BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\r\n        Fileable(_spot).file(_ilk, \"mat\", MathLib.rdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setIlkMinAuctionBidIncrease(address _flip, uint256 _pct_bps) public {\r\n        require(_pct_bps < MathLib.BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        Fileable(_flip).file(\"beg\", MathLib.add(MathLib.WAD, MathLib.wdiv(_pct_bps, MathLib.BPS_ONE_HUNDRED_PCT)));\r\n    }\r\n    /**\r\n        @dev Set bid duration for a collateral type.\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _duration Amount of time for bids.\r\n    */\r\n    function setIlkBidDuration(address _flip, uint256 _duration) public {\r\n        Fileable(_flip).file(\"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set auction duration for a collateral type.\r\n        @param _flip   The address of the ilk's flip core accounting contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setIlkAuctionDuration(address _flip, uint256 _duration) public {\r\n        Fileable(_flip).file(\"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the stability fee for a given ilk.\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n\r\n        @param _jug    The address of the Jug core accounting contract\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\") )\r\n        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate stability fees for the collateral\r\n    */\r\n    function setIlkStabilityFee(address _jug, bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n        require((_rate >= MathLib.RAY) && (_rate <= MathLib.RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/ilk-stability-fee-out-of-bounds\"\r\n        if (_doDrip) Drippable(_jug).drip(_ilk);\r\n\r\n        Fileable(_jug).file(_ilk, \"duty\", _rate);\r\n    }\r\n\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    /**\r\n        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to add to whitelist\r\n    */\r\n    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike(_median).lift(_feeds);\r\n    }\r\n    /**\r\n        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\r\n        @param _median Median core contract address\r\n        @param _feeds      Array of oracle feed addresses to remove from whitelist\r\n    */\r\n    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\r\n        OracleLike(_median).drop(_feeds);\r\n    }\r\n    /**\r\n        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to add to whitelist\r\n    */\r\n    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike(_median).kiss(_readers);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike(_median).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _readers    Array of addresses to remove from whitelist\r\n    */\r\n    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\r\n        OracleLike(_median).diss(_readers);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\r\n        @param _median Median core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\r\n        OracleLike(_median).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\r\n        @param _median Median core contract address\r\n        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\r\n    */\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n        OracleLike(_median).setBar(_minQuorum);\r\n    }\r\n    /**\r\n        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike(_osm).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\r\n        OracleLike(_osm).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\r\n        @param _osmMom     OSM Mom core contract address\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _ilk        Collateral type using OSM\r\n    */\r\n    function allowOSMFreeze(address _osmMom, address _osm, bytes32 _ilk) public {\r\n        MomLike(_osmMom).setOsm(_ilk, _osm);\r\n    }\r\n\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\r\n        @param _vat      MCD_VAT\r\n        @param _cat      MCD_CAT\r\n        @param _jug      MCD_JUG\r\n        @param _end      MCD_END\r\n        @param _spot     MCD_SPOT\r\n        @param _reg      ILK_REGISTRY\r\n        @param _ilk      Collateral type key code [Ex. \"ETH-A\"]\r\n        @param _gem      Address of token contract\r\n        @param _join     Address of join adapter\r\n        @param _flip     Address of flipper\r\n        @param _pip      Address of price feed\r\n    */\r\n    function addCollateralBase(\r\n        address _vat,\r\n        address _cat,\r\n        address _jug,\r\n        address _end,\r\n        address _spot,\r\n        address _reg,\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _flip,\r\n        address _pip\r\n    ) public {\r\n        // Sanity checks\r\n        require(JoinLike_2(_join).vat() == _vat);     // \"join-vat-not-match\"\r\n        require(JoinLike_2(_join).ilk() == _ilk);     // \"join-ilk-not-match\"\r\n        require(JoinLike_2(_join).gem() == _gem);     // \"join-gem-not-match\"\r\n        require(JoinLike_2(_join).dec() ==\r\n                   ERC20(_gem).decimals());         // \"join-dec-not-match\"\r\n        require(AuctionLike(_flip).vat() == _vat);  // \"flip-vat-not-match\"\r\n        require(AuctionLike(_flip).cat() == _cat);  // \"flip-cat-not-match\"\r\n        require(AuctionLike(_flip).ilk() == _ilk);  // \"flip-ilk-not-match\"\r\n\r\n        // Set the token PIP in the Spotter\r\n        setContract(_spot, _ilk, \"pip\", _pip);\r\n\r\n        // Set the ilk Flipper in the Cat\r\n        setContract(_cat, _ilk, \"flip\", _flip);\r\n\r\n        // Init ilk in Vat & Jug\r\n        Initializable(_vat).init(_ilk);  // Vat\r\n        Initializable(_jug).init(_ilk);  // Jug\r\n\r\n        // Allow ilk Join to modify Vat registry\r\n        authorize(_vat, _join);\r\n\t\t// Allow the ilk Flipper to reduce the Cat litterbox on deal()\r\n        authorize(_cat, _flip);\r\n        // Allow Cat to kick auctions in ilk Flipper\r\n        authorize(_flip, _cat);\r\n        // Allow End to yank auctions in ilk Flipper\r\n        authorize(_flip, _end);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        RegistryLike(_reg).add(_join);\r\n    }\r\n}","ABI":"[]","ContractName":"DssExecLib","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f78377fda093df9908eece5a9906e926160ed8e64c81adf20bf710d742144314"}]}