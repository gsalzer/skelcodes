{"status":"1","message":"OK","result":[{"SourceCode":"//////////DEFI product for staking Your YOP tokens and getting rewards\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\npragma solidity ^0.8.0;\r\n\r\n//Version 1.3\r\n\r\n//THE smart contract for staking RAMP tokens and claiming the rewards\r\n//Fully fair and simple. Enjoy ;)\r\n\r\n\r\ncontract HopOnYop\r\n{\r\n    \r\n    IERC20 public YOP;\r\n    \r\n    uint256 public RewardPool;\r\n    uint256 public AllTimeStaked;\r\n    uint256 public TVL;\r\n    uint256 public RewardsOwed;\r\n    uint256 private constant minStake = 88  * (10 ** 8);\r\n    uint256 private constant maxStake = 33333  * (10 ** 8);\r\n    uint8 constant public reward1 = 6; uint256 constant public stakedFor1 = 30 days; //6% reward for 30 days lock\r\n    uint8 constant public reward2 = 15; uint256 constant public stakedFor2 = 60 days; //15% reward for 60 days lock\r\n    uint8 constant public reward3 = 33; uint256 constant public stakedFor3 = 90 days; //33% reward for 90 days lock\r\n    \r\n    \r\n    constructor (address addr)\r\n    {\r\n        YOP = IERC20(addr);\r\n    }\r\n    \r\n    enum options {d30, d60, d90}\r\n    struct stake\r\n    {\r\n        uint256 amount;\r\n        uint256 stakingTime;\r\n        options option;\r\n        bool rewardTaken;\r\n    }\r\n    \r\n    mapping(address => stake) private stakes;    \r\n    \r\n    \r\n    /**\r\n     * @dev Adds more tokens to the pool, but first we needs to add allowance for this contract\r\n     */\r\n    function feedRewardPool() public\r\n    {\r\n         uint256 tokenAmount = YOP.allowance(msg.sender, address(this));\r\n         RewardPool += tokenAmount;\r\n         require(YOP.transferFrom(msg.sender, address(this), tokenAmount)); //Transfers the tokens to smart contract\r\n    }\r\n\r\n    function stakeYOP(options option) public\r\n    {\r\n       \r\n        require(stakes[msg.sender].stakingTime == 0, \"Error: Only one staking per address!!!\");\r\n        uint256 tokenAmount = YOP.allowance(msg.sender, address(this));\r\n        require(tokenAmount > 0, \"Error: Need to increase allowance first\");\r\n        require(tokenAmount >= minStake && tokenAmount <= maxStake ,\"Error: You should stake from 33 to 88888 tokens.\");\r\n        stakes[msg.sender].amount = tokenAmount;\r\n        stakes[msg.sender].option = option;\r\n        stakes[msg.sender].stakingTime = block.timestamp;\r\n        \r\n        uint256 reward = calculateReward(msg.sender);\r\n        require(RewardPool >= reward + RewardsOwed, \"Error: No enough rewards for You, shouldve thought about this before it went moon\");\r\n        \r\n        TVL += tokenAmount;\r\n        RewardsOwed += reward;\r\n        AllTimeStaked += tokenAmount;\r\n        require(YOP.transferFrom(msg.sender, address(this), tokenAmount)); //Transfers the tokens to smart contract\r\n        \r\n\r\n    }\r\n\r\n    /**\r\n     * @dev claims the rewards and stake for the stake, can be only called by the user\r\n     * doesnt work if the campaign isnt finished yet\r\n     */\r\n    function claimRewards() public\r\n    {\r\n        require(stakes[msg.sender].rewardTaken == false,\"Error: You already took the reward\");\r\n        uint256 stakedFor;\r\n        options option = stakes[msg.sender].option;\r\n        \r\n        if(option == options.d30)\r\n        stakedFor = stakedFor1;\r\n        \r\n        if(option == options.d60)\r\n        stakedFor = stakedFor2;\r\n        \r\n        if(option == options.d90)\r\n        stakedFor = stakedFor3;\r\n        \r\n        require(stakes[msg.sender].stakingTime + stakedFor <= block.timestamp, \"Error: Too soon to unstake\");\r\n        uint256 reward = calculateReward(msg.sender);\r\n        uint256 amount = stakes[msg.sender].amount;\r\n        TVL -= amount;\r\n        RewardsOwed -= reward;\r\n        RewardPool -= reward;\r\n        stakes[msg.sender].rewardTaken = true;\r\n        \r\n        _withdraw(reward + amount);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev calculates the rewards+stake for the given staker\r\n     * @param staker is the staker we want the info for\r\n     */\r\n    function calculateReward(address staker) public view returns(uint256)\r\n    {\r\n        uint256 reward;\r\n        options option = stakes[staker].option;\r\n        \r\n        if(option == options.d30)\r\n        reward = reward1;\r\n        \r\n        if(option == options.d60)\r\n        reward = reward2;\r\n        \r\n        if(option == options.d90)\r\n        reward = reward3;\r\n        \r\n        return ((stakes[staker].amount * reward) / 100);\r\n    }\r\n    \r\n    \r\n    function getStakerInfo(address addr) public view returns(uint256, uint256, options, bool)\r\n    {\r\n        return(stakes[addr].amount,stakes[addr].stakingTime,stakes[addr].option,stakes[addr].rewardTaken);\r\n    }\r\n    \r\n    \r\n    function _withdraw(uint256 amount) internal\r\n    {\r\n        require(YOP.transfer(msg.sender, amount));\r\n        emit withdrawHappened(msg.sender, amount);\r\n    }\r\n    \r\n    event withdrawHappened(address indexed to, uint256 amount);\r\n   \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHappened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AllTimeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YOP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum HopOnYop.options\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward2\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward3\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum HopOnYop.options\",\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"stakeYOP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedFor1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedFor2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedFor3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HopOnYop","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ae1eaae3f627aaca434127644371b67b18444051","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://95607db5cb6478aeb6cf06eca7353c600e951b15cd3c3a704d07f948cf4432e2"}]}