{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n    \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n        /**\r\n        * @dev Multiplies two numbers, throws on overflow.\r\n        */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n    \r\n        /**\r\n        * @dev Integer division of two numbers, truncating the quotient.\r\n        */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            // uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return a / b;\r\n        }\r\n    \r\n        /**\r\n        * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n        */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b;\r\n        }\r\n    \r\n        /**\r\n        * @dev Adds two numbers, throws on overflow.\r\n        */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n            c = a + b;\r\n            assert(c >= a);\r\n            return c;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @title ERC20Basic\r\n     * @dev Simpler version of ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/179\r\n     */\r\n    contract ERC20Basic {\r\n        uint256 public totalSupply;\r\n    \r\n        function balanceOf(address who) public view returns (uint256);\r\n    \r\n        function _transfer(address to, uint256 value) internal returns (bool);\r\n    \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    }\r\n    \r\n    /**\r\n     * @title Basic token\r\n     * @dev Basic version of StandardToken, with no allowances.\r\n     */\r\n    contract BasicToken is ERC20Basic {\r\n        using SafeMath for uint256;\r\n    \r\n        mapping(address => uint256) balances;\r\n    \r\n        /**\r\n        * @dev transfer token for a specified address\r\n        * @param _to The address to transfer to.\r\n        * @param _value The amount to be transferred.\r\n        */\r\n        function _transfer(address _to, uint256 _value) internal returns (bool) {\r\n            require(_to != address(0));\r\n    \r\n            // SafeMath.sub will throw if there is not enough balance.\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n        * @dev Gets the balance of the specified address.\r\n        * @param _owner The address to query the the balance of.\r\n        * @return An uint256 representing the amount owned by the passed address.\r\n        */\r\n        function balanceOf(address _owner) public view returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @title ERC20 interface\r\n     * @dev see https://github.com/ethereum/EIPs/issues/20\r\n     */\r\n    contract ERC20 is ERC20Basic {\r\n        function allowance(address owner, address spender) public view returns (uint256);\r\n    \r\n        function _transferFrom(address from, address to, uint256 value) internal returns (bool);\r\n    \r\n        function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n    /**\r\n     * @title Standard ERC20 token\r\n     *\r\n     * @dev Implementation of the basic standard token.\r\n     * @dev https://github.com/ethereum/EIPs/issues/20\r\n     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n     */\r\n    contract StandardToken is ERC20, BasicToken {\r\n        mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n        /**\r\n         * @dev Transfer tokens from one address to another\r\n         * @param _from address The address which you want to send tokens from\r\n         * @param _to address The address which you want to transfer to\r\n         * @param _value uint256 the amount of tokens to be transferred\r\n         */\r\n        function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\r\n            require(_to != address(0));\r\n    \r\n            uint256 _allowance = allowed[_from][msg.sender];\r\n    \r\n            // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n            // require (_value <= _allowance);\r\n    \r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n           emit Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n         *\r\n         * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n         * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n         * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n         * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n         * @param _spender The address which will spend the funds.\r\n         * @param _value The amount of tokens to be spent.\r\n         */\r\n        function approve(address _spender, uint256 _value) public returns (bool) {\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n         * @param _owner address The address which owns the funds.\r\n         * @param _spender address The address which will spend the funds.\r\n         * @return A uint256 specifying the amount of tokens still available for the spender.\r\n         */\r\n        function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n            return allowed[_owner][_spender];\r\n        }\r\n    \r\n        /**\r\n         * approve should be called when allowed[_spender] == 0. To increment\r\n         * allowed value is better to use this function to avoid 2 calls (and wait until\r\n         * the first transaction is mined)\r\n         * From MonolithDAO Token.sol\r\n         */\r\n        function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n           emit  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n        }\r\n    \r\n        function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n            uint oldValue = allowed[msg.sender][_spender];\r\n            if (_subtractedValue > oldValue) {\r\n                allowed[msg.sender][_spender] = 0;\r\n            } else {\r\n                allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n            }\r\n            emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @title Ownable\r\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n     * functions, this simplifies the implementation of \"user permissions\".\r\n     */\r\n    contract Ownable {\r\n        address internal owner;\r\n    \r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n        /**\r\n         * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n         * account.\r\n         */\r\n        constructor() public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        /**\r\n         * @dev Throws if called by any account other than the owner.\r\n         */\r\n        modifier onlyOwner() {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        /**\r\n         * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n         * @param newOwner The address to transfer ownership to.\r\n         */\r\n        function transferOwnership(address newOwner) onlyOwner public returns (bool) {\r\n            require(newOwner != address(0x0));\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n    \r\n            return true;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * @title Mintable token\r\n     * @dev Simple ERC20 Token example, with mintable token creation\r\n     * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n     * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n     */\r\n    contract MintableToken is StandardToken, Ownable {\r\n        event Mint(address indexed to, uint256 amount);\r\n    \r\n        /**\r\n         * @dev Function to mint tokens\r\n         * @param _to The address that will receive the minted tokens.\r\n         * @param _amount The amount of tokens to mint.\r\n         * @return A boolean that indicates if the operation was successful.\r\n         */\r\n    \r\n        function _mint(address _to, uint256 _amount)  internal returns (bool) {\r\n            totalSupply = SafeMath.add(totalSupply, _amount);\r\n            balances[_to] = balances[_to].add(_amount);\r\n            emit Mint(_to, _amount);\r\n            emit Transfer(0x0000000000000000000000000000000000000000, _to, _amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    contract CANADU is MintableToken {\r\n        string public name =  \"CANADU COIN\";\r\n        string public symbol = \"CNC\";\r\n        uint8 public decimals =  18;\r\n        \r\n        uint256 public totalSupply;\r\n        \r\n        uint256 public ownerLockedValue;\r\n        \r\n        uint256 public partner1LockedValue;\r\n        uint256 public partner2LockedValue;\r\n        uint256 public partner3LockedValue;\r\n\r\n        uint256 public exchangeLockedValue;\r\n        uint256 public marketingLockedValue;\r\n\r\n        uint256 public generalLockedValue;\r\n\r\n        // address public ownerWallet= 0x2294779BA68534D6D83fC33bDE6d73bFaf1658bb;\r\n        address public partner1Wallet = 0xc402f820330cf93771daCb0E2D09A65F71b29e39;\r\n        address public partner2Wallet= 0x393c4671Eeb0ec4977f33700Bce47569f8049E62;\r\n        address public partner3Wallet = 0xF381F3669260C696a1B1193Dc476316C92Ff46De;\r\n        \r\n        address public exchangeWallet = 0xA4df2866465b9Fb61530f7b247641dD33b7b97B0;\r\n        address public marketingWallet= 0x92Da581E0660cc0568dd032FB6eAE6D85D23e4b1;\r\n\r\n        uint256 public ownerTimeLock;\r\n        uint256 public partner1TimeLock;\r\n        uint256 public generalTimeLock;\r\n        \r\n        uint256 public startTime;\r\n\r\n        constructor() public {\r\n\r\n               totalSupply =   100000000 * (10 ** 18) ;\r\n           \r\n           startTime = now;\r\n           \r\n        //   ownerLockedValue =  SafeMath.div(SafeMath.mul(totalSupply,30),100);\r\n           partner1LockedValue =  SafeMath.div(SafeMath.mul(totalSupply,14),100);\r\n           partner2LockedValue =  SafeMath.div(SafeMath.mul(totalSupply,14),100);\r\n           partner3LockedValue =  SafeMath.div(SafeMath.mul(totalSupply,7),100);\r\n\r\n           exchangeLockedValue =  SafeMath.div(SafeMath.mul(totalSupply,25),100);\r\n           marketingLockedValue =  SafeMath.div(SafeMath.mul(totalSupply,10),100);\r\n\r\n           generalLockedValue =  SafeMath.div(SafeMath.mul(totalSupply,30),100);\r\n           \r\n           generalTimeLock = startTime + 1 years;\r\n           partner1TimeLock = startTime +  5 years;\r\n           \r\n            \r\n            super._mint(owner, generalLockedValue);\r\n            // super._mint(ownerWallet, ownerLockedValue);\r\n            super._mint(partner1Wallet, partner1LockedValue);\r\n            super._mint(partner2Wallet, partner2LockedValue);\r\n            super._mint(partner3Wallet, partner3LockedValue);\r\n            super._mint(exchangeWallet, exchangeLockedValue);\r\n            super._mint(marketingWallet, marketingLockedValue);\r\n\r\n        }\r\n\r\n        function transfer(address _to, uint256 _amount) public returns (bool) {\r\n         address fromAddress = msg.sender;\r\n         \r\n          if (fromAddress == owner || fromAddress == marketingWallet || fromAddress == exchangeWallet) {\r\n                return super._transfer(_to, _amount);\r\n            } else if (fromAddress == partner1Wallet || fromAddress == partner2Wallet || fromAddress == partner3Wallet) {\r\n                 require(now >= partner1TimeLock, \"Partners Time Lock is not open\");\r\n                 return super._transfer(_to, _amount);\r\n            } else {\r\n                 require(now >= generalTimeLock, \"General Time Lock is not open\");\r\n                 return super._transfer(_to, _amount);\r\n            }\r\n            \r\n        }\r\n            \r\n    \r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n          if (_from == owner || _from == marketingWallet || _from == exchangeWallet) {\r\n                return super._transferFrom(_from, _to, _value);\r\n            }  else if (_from == partner1Wallet || _from == partner2Wallet || _from == partner3Wallet) {\r\n                 require(now >= partner1TimeLock, \"Partners Time Lock is not open\");\r\n                 return super._transferFrom(_from, _to, _value);\r\n            } else {\r\n                 require(now >= generalTimeLock, \"General Time Lock is not open\");\r\n                 return super._transferFrom(_from, _to, _value);\r\n            }\r\n        \r\n        }\r\n        \r\n        function mint(address _to , uint256 _value) public onlyOwner {\r\n            super._mint(_to, _value);\r\n        }\r\n      \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"generalTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerLockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeLockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2LockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner3Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1TimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1LockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1Wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generalLockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner3LockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingLockedValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CANADU","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://36df8f220ccb95bdf3d59f9de11a4c62a66184b45cae7b8e59caf5385ccc16b2"}]}