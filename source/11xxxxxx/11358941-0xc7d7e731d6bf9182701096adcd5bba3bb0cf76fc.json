{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/DrillLuckyBox.sol\r\npragma solidity >0.4.13 >=0.4.23 >=0.6.0 <0.7.0 >=0.6.7 <0.7.0;\r\n\r\n////// lib/ds-auth/src/auth.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\ninterface DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) external view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-math/src/math.sol\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >0.4.13; */\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    //rounds to zero if x*y < WAD / 2\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    //rounds to zero if x*y < RAY / 2\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/lib/ds-note/src/note.sol\r\n/// note.sol -- the `note' modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint256           wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n        uint256 wad;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n            wad := callvalue()\r\n        }\r\n\r\n        _;\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\r\n    }\r\n}\r\n\r\n////// lib/ds-stop/src/stop.sol\r\n/// stop.sol -- mixin for enable/disable functionality\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.4.23; */\r\n\r\n/* import \"ds-auth/auth.sol\"; */\r\n/* import \"ds-note/note.sol\"; */\r\n\r\ncontract DSStop is DSNote, DSAuth {\r\n    bool public stopped;\r\n\r\n    modifier stoppable {\r\n        require(!stopped, \"ds-stop-is-stopped\");\r\n        _;\r\n    }\r\n    function stop() public auth note {\r\n        stopped = true;\r\n    }\r\n    function start() public auth note {\r\n        stopped = false;\r\n    }\r\n\r\n}\r\n\r\n////// lib/zeppelin-solidity/src/token/ERC20/IERC20.sol\r\n// SPDX-License-Identifier: MIT\r\n\r\n/* pragma solidity ^0.6.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// src/DrillBoxPrice.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\ncontract DrillBoxPrice {\r\n\tuint256 public constant DECIMALS = 10**18;\r\n\r\n\tuint256 public constant GOLD_BOX_BASE_PRICE = 1000;\r\n\tuint256 public constant GOLD_BOX_MAX_PRICE = 10000;\r\n\tuint256 public constant SILVER_BOX_BASE_PRICE = 100;\r\n\tuint256 public constant SILVER_BOX_MAX_PRICE = 1000;\r\n\r\n\t// solhint-disable-next-line var-name-mixedcase\r\n\tuint16[91] public GOLD_BOX_PRICE = [\r\n\t\t1000,\r\n\t\t1026,\r\n\t\t1052,\r\n\t\t1080,\r\n\t\t1108,\r\n\t\t1136,\r\n\t\t1166,\r\n\t\t1196,\r\n\t\t1227,\r\n\t\t1259,\r\n\t\t1292,\r\n\t\t1326,\r\n\t\t1360,\r\n\t\t1396,\r\n\t\t1432,\r\n\t\t1469,\r\n\t\t1507,\r\n\t\t1547,\r\n\t\t1587,\r\n\t\t1628,\r\n\t\t1670,\r\n\t\t1714,\r\n\t\t1758,\r\n\t\t1804,\r\n\t\t1851,\r\n\t\t1899,\r\n\t\t1949,\r\n\t\t1999,\r\n\t\t2051,\r\n\t\t2105,\r\n\t\t2159,\r\n\t\t2216,\r\n\t\t2273,\r\n\t\t2332,\r\n\t\t2393,\r\n\t\t2455,\r\n\t\t2519,\r\n\t\t2585,\r\n\t\t2652,\r\n\t\t2721,\r\n\t\t2791,\r\n\t\t2864,\r\n\t\t2938,\r\n\t\t3015,\r\n\t\t3093,\r\n\t\t3174,\r\n\t\t3256,\r\n\t\t3341,\r\n\t\t3428,\r\n\t\t3517,\r\n\t\t3608,\r\n\t\t3702,\r\n\t\t3798,\r\n\t\t3897,\r\n\t\t3999,\r\n\t\t4103,\r\n\t\t4209,\r\n\t\t4319,\r\n\t\t4431,\r\n\t\t4546,\r\n\t\t4664,\r\n\t\t4786,\r\n\t\t4910,\r\n\t\t5038,\r\n\t\t5169,\r\n\t\t5303,\r\n\t\t5441,\r\n\t\t5583,\r\n\t\t5728,\r\n\t\t5877,\r\n\t\t6030,\r\n\t\t6186,\r\n\t\t6347,\r\n\t\t6512,\r\n\t\t6682,\r\n\t\t6855,\r\n\t\t7034,\r\n\t\t7216,\r\n\t\t7404,\r\n\t\t7597,\r\n\t\t7794,\r\n\t\t7997,\r\n\t\t8205,\r\n\t\t8418,\r\n\t\t8637,\r\n\t\t8861,\r\n\t\t9092,\r\n\t\t9328,\r\n\t\t9571,\r\n\t\t9820,\r\n\t\t10000\r\n\t];\r\n\r\n\t// solhint-disable-next-line var-name-mixedcase\r\n\tuint16[91] public SILVER_BOX_PRICE = [\r\n\t\t100,\r\n\t\t102,\r\n\t\t105,\r\n\t\t108,\r\n\t\t110,\r\n\t\t113,\r\n\t\t116,\r\n\t\t119,\r\n\t\t122,\r\n\t\t126,\r\n\t\t129,\r\n\t\t132,\r\n\t\t136,\r\n\t\t139,\r\n\t\t143,\r\n\t\t147,\r\n\t\t150,\r\n\t\t154,\r\n\t\t158,\r\n\t\t162,\r\n\t\t167,\r\n\t\t171,\r\n\t\t175,\r\n\t\t180,\r\n\t\t185,\r\n\t\t190,\r\n\t\t194,\r\n\t\t200,\r\n\t\t205,\r\n\t\t210,\r\n\t\t216,\r\n\t\t221,\r\n\t\t227,\r\n\t\t233,\r\n\t\t239,\r\n\t\t245,\r\n\t\t251,\r\n\t\t258,\r\n\t\t265,\r\n\t\t272,\r\n\t\t279,\r\n\t\t286,\r\n\t\t293,\r\n\t\t301,\r\n\t\t309,\r\n\t\t317,\r\n\t\t325,\r\n\t\t334,\r\n\t\t342,\r\n\t\t351,\r\n\t\t360,\r\n\t\t370,\r\n\t\t379,\r\n\t\t389,\r\n\t\t399,\r\n\t\t410,\r\n\t\t421,\r\n\t\t431,\r\n\t\t443,\r\n\t\t454,\r\n\t\t466,\r\n\t\t478,\r\n\t\t491,\r\n\t\t503,\r\n\t\t516,\r\n\t\t530,\r\n\t\t544,\r\n\t\t558,\r\n\t\t572,\r\n\t\t587,\r\n\t\t603,\r\n\t\t618,\r\n\t\t634,\r\n\t\t651,\r\n\t\t668,\r\n\t\t685,\r\n\t\t703,\r\n\t\t721,\r\n\t\t740,\r\n\t\t759,\r\n\t\t779,\r\n\t\t799,\r\n\t\t820,\r\n\t\t841,\r\n\t\t863,\r\n\t\t886,\r\n\t\t909,\r\n\t\t932,\r\n\t\t957,\r\n\t\t982,\r\n\t\t1000\r\n\t];\r\n}\r\n\r\n////// src/interfaces/IERC223Recipient.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\n /*\r\n * Contract that is working with ERC223 tokens\r\n * https://github.com/ethereum/EIPs/issues/223\r\n */\r\n\r\n/// @title IERC223Recipient - Standard contract implementation for compatibility with ERC223 tokens.\r\ninterface IERC223Recipient {\r\n\r\n    /// @dev Function that is called when a user or another contract wants to transfer funds.\r\n    /// @param _from Transaction initiator, analogue of msg.sender\r\n    /// @param _value Number of tokens to transfer.\r\n    /// @param _data Data containig a function signature and/or parameters\r\n    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\r\n\r\n}\r\n\r\n////// src/interfaces/ISettingsRegistry.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\ninterface ISettingsRegistry {\r\n    enum SettingsValueTypes { NONE, UINT, STRING, ADDRESS, BYTES, BOOL, INT }\r\n\r\n    function uintOf(bytes32 _propertyName) external view returns (uint256);\r\n\r\n    function stringOf(bytes32 _propertyName) external view returns (string memory);\r\n\r\n    function addressOf(bytes32 _propertyName) external view returns (address);\r\n\r\n    function bytesOf(bytes32 _propertyName) external view returns (bytes memory);\r\n\r\n    function boolOf(bytes32 _propertyName) external view returns (bool);\r\n\r\n    function intOf(bytes32 _propertyName) external view returns (int);\r\n\r\n    function setUintProperty(bytes32 _propertyName, uint _value) external;\r\n\r\n    function setStringProperty(bytes32 _propertyName, string calldata _value) external;\r\n\r\n    function setAddressProperty(bytes32 _propertyName, address _value) external;\r\n\r\n    function setBytesProperty(bytes32 _propertyName, bytes calldata _value) external;\r\n\r\n    function setBoolProperty(bytes32 _propertyName, bool _value) external;\r\n\r\n    function setIntProperty(bytes32 _propertyName, int _value) external;\r\n\r\n    function getValueTypeOf(bytes32 _propertyName) external view returns (uint /* SettingsValueTypes */ );\r\n\r\n    event ChangeProperty(bytes32 indexed _propertyName, uint256 _type);\r\n}\r\n\r\n////// src/DrillLuckyBox.sol\r\n/* pragma solidity ^0.6.7; */\r\n\r\n/* import \"ds-stop/stop.sol\"; */\r\n/* import \"ds-math/math.sol\"; */\r\n/* import \"zeppelin-solidity/token/ERC20/IERC20.sol\"; */\r\n/* import \"./interfaces/IERC223Recipient.sol\"; */\r\n/* import \"./interfaces/ISettingsRegistry.sol\"; */\r\n/* import \"./DrillBoxPrice.sol\"; */\r\n\r\ncontract DrillLuckyBox is DSMath, DSStop, IERC223Recipient, DrillBoxPrice {\r\n\tevent GoldBoxSale(address indexed buyer, uint256 amount, uint256 price);\r\n\tevent SilverBoxSale(address indexed buyer, uint256 amount, uint256 price);\r\n\tevent RingRefunded(address indexed buyer, uint256 value);\r\n\tevent ClaimedTokens(\r\n\t\taddress indexed token,\r\n\t\taddress indexed to,\r\n\t\tuint256 amount\r\n\t);\r\n\r\n\t// 0x434f4e54524143545f52494e475f45524332305f544f4b454e00000000000000\r\n\tbytes32 public constant CONTRACT_RING_ERC20_TOKEN =\r\n\t\t\"CONTRACT_RING_ERC20_TOKEN\";\r\n\r\n\taddress payable public wallet;\r\n\r\n\tuint256 public priceIncreaseBeginTime;\r\n\r\n\tISettingsRegistry public registry;\r\n\r\n\tconstructor(\r\n\t\taddress _registry,\r\n\t\taddress payable _wallet,\r\n\t\tuint256 _priceIncreaseBeginTime\r\n\t) public {\r\n\t\trequire(_wallet != address(0), \"Need a good wallet to store fund\");\r\n\r\n\t\tregistry = ISettingsRegistry(_registry);\r\n\t\twallet = _wallet;\r\n\t\tpriceIncreaseBeginTime = _priceIncreaseBeginTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev ERC223 fallback function, make sure to check the msg.sender is from target token contracts\r\n\t * @param _from - person who transfer token in for buying box.\r\n\t * @param _amount - amount of token.\r\n\t * @param _data - data which the gold box amount and silver box amount arrange.\r\n\t */\r\n\tfunction tokenFallback(\r\n\t\taddress _from,\r\n\t\tuint256 _amount,\r\n\t\tbytes calldata _data\r\n\t) external override stoppable {\r\n\t\trequire(_data.length == 64, \"Transfer data length invalied.\");\r\n\t\t(uint256 goldBoxAmount, uint256 silverBoxAmount) =\r\n\t\t\tabi.decode(_data, (uint256, uint256));\r\n\t\t(uint256 priceGoldBox, uint256 priceSilverBox) = getPrice();\r\n\t\tuint256 chargeGoldBox = mul(goldBoxAmount, priceGoldBox);\r\n\t\tuint256 chargeSilverBox = mul(silverBoxAmount, priceSilverBox);\r\n\t\tuint256 charge = add(chargeGoldBox, chargeSilverBox);\r\n\t\t//  Only supported tokens can be called\r\n\t\taddress ring = registry.addressOf(CONTRACT_RING_ERC20_TOKEN);\r\n\t\trequire(msg.sender == ring, \"Only support ring.\");\r\n\t\trequire(\r\n\t\t\tgoldBoxAmount > 0 || silverBoxAmount > 0,\r\n\t\t\t\"Buy gold or silver box\"\r\n\t\t);\r\n\t\trequire(_amount >= charge, \"No enough ring for buying lucky boxes.\");\r\n\r\n\t\tIERC20(ring).transfer(wallet, charge);\r\n\r\n\t\tif (goldBoxAmount > 0) {\r\n\t\t\temit GoldBoxSale(_from, goldBoxAmount, priceGoldBox);\r\n\t\t}\r\n\t\tif (silverBoxAmount > 0) {\r\n\t\t\temit SilverBoxSale(_from, silverBoxAmount, priceSilverBox);\r\n\t\t}\r\n\t\tif (_amount > charge) {\r\n\t\t\tuint256 ringToRefund = sub(_amount, charge);\r\n\t\t\tIERC20(ring).transfer(_from, ringToRefund);\r\n\t\t\temit RingRefunded(_from, ringToRefund);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getPrice()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 priceGoldBox, uint256 priceSilverBox)\r\n\t{\r\n\t\t// solhint-disable-next-line not-rely-on-time\r\n\t\tif (now <= priceIncreaseBeginTime) {\r\n\t\t\tpriceGoldBox = GOLD_BOX_BASE_PRICE;\r\n\t\t\tpriceSilverBox = SILVER_BOX_BASE_PRICE;\r\n\t\t} else {\r\n\t\t\t// solhint-disable-next-line not-rely-on-time\r\n\t\t\tuint256 numDays = sub(now, priceIncreaseBeginTime) / 1 days;\r\n\t\t\tif (numDays > 90) {\r\n\t\t\t\tpriceGoldBox = GOLD_BOX_MAX_PRICE;\r\n\t\t\t\tpriceSilverBox = SILVER_BOX_MAX_PRICE;\r\n\t\t\t} else {\r\n\t\t\t\tpriceGoldBox = uint256(GOLD_BOX_PRICE[numDays]);\r\n\t\t\t\tpriceSilverBox = uint256(SILVER_BOX_PRICE[numDays]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tpriceGoldBox = mul(priceGoldBox, DECIMALS);\r\n\t\tpriceSilverBox = mul(priceSilverBox, DECIMALS);\r\n\t}\r\n\r\n\t//////////\r\n\t// Safety Methods\r\n\t//////////\r\n\r\n\t/// @notice This method can be used by the controller to extract mistakenly\r\n\t///  sent tokens to this contract.\r\n\t/// @param _token The address of the token contract that you want to recover\r\n\t///  set to 0 in case you want to extract ether.\r\n\tfunction claimTokens(address _token) public auth {\r\n\t\tif (_token == address(0)) {\r\n\t\t\t_makePayable(owner).transfer(address(this).balance);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIERC20 token = IERC20(_token);\r\n\t\tuint256 balance = token.balanceOf(address(this));\r\n\t\ttoken.transfer(owner, balance);\r\n\t\temit ClaimedTokens(_token, owner, balance);\r\n\t}\r\n\r\n\tfunction _makePayable(address x) internal pure returns (address payable) {\r\n\t\treturn address(uint160(x));\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceIncreaseBeginTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"GoldBoxSale\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RingRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SilverBoxSale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_RING_ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_BOX_BASE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_BOX_MAX_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GOLD_BOX_PRICE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_BOX_BASE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_BOX_MAX_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SILVER_BOX_PRICE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceGoldBox\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceSilverBox\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceIncreaseBeginTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ISettingsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DSAuthority\",\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DrillLuckyBox","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b0940772516b69088904564a56d09cfe6bb3d850000000000000000000000008d7af9d2310016712b8f269df266f957cb12a27b000000000000000000000000000000000000000000000000000000005fc61420","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ed74377b25d93cc1c8d010b559730c6a2a09c779e0868bfd330082774b24902"}]}