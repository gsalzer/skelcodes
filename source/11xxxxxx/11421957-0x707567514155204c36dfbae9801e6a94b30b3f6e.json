{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/contracts/BaseStrategyNew.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nstruct StrategyParams {\\n    uint256 performanceFee;\\n    uint256 activation;\\n    uint256 debtLimit;\\n    uint256 rateLimit;\\n    uint256 lastReport;\\n    uint256 totalDebt;\\n    uint256 totalGain;\\n    uint256 totalLoss;\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function apiVersion() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function is used in the scenario where there is a newer Strategy\\n     * that would hold the same positions as this one, and those positions are\\n     * easily transferrable to the newer Strategy. These positions must be able\\n     * to be transferred at the moment this call is made, if any prep is\\n     * required to execute a full transfer in one transaction, that must be\\n     * accounted for separately from this call.\\n     */\\n    function migrateStrategy(address _newStrategy) external;\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n}\\n\\n/**\\n * This interface is here for the keeper bot to use.\\n */\\ninterface StrategyAPI {\\n    function apiVersion() external pure returns (string memory);\\n\\n    function name() external pure returns (string memory);\\n\\n    function vault() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function tendTrigger(uint256 callCost) external view returns (bool);\\n\\n    function tend() external;\\n\\n    function harvestTrigger(uint256 callCost) external view returns (bool);\\n\\n    function harvest() external;\\n\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n}\\n\\n/**\\n * @title Yearn Base Strategy\\n * @author yearn.finance\\n * @notice\\n *  BaseStrategy implements all of the required functionality to interoperate\\n *  closely with the Vault contract. This contract should be inherited and the\\n *  abstract methods implemented to adapt the Strategy to the particular needs\\n *  it has to create a return.\\n *\\n *  Of special interest is the relationship between `harvest()` and\\n *  `vault.report()'. `harvest()` may be called simply because enough time has\\n *  elapsed since the last report, and not because any funds need to be moved\\n *  or positions adjusted. This is critical so that the Vault may maintain an\\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\\n *  `harvest()`, and `harvestTrigger()` for further details.\\n */\\nabstract contract BaseStrategy {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice\\n     *  Used to track which version of `StrategyAPI` this Strategy\\n     *  implements.\\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\\n     * @return A string which holds the current API version of this contract.\\n     */\\n    function apiVersion() public pure returns (string memory) {\\n        return \\\"0.2.2\\\";\\n    }\\n\\n    /**\\n     * @notice This Strategy's name.\\n     * @dev\\n     *  You can use this field to manage the \\\"version\\\" of this Strategy, e.g.\\n     *  `StrategySomethingOrOtherV1`. However, \\\"API Version\\\" is managed by\\n     *  `apiVersion()` function above.\\n     * @return This Strategy's name.\\n     */\\n    function name() external virtual pure returns (string memory);\\n\\n    VaultAPI public vault;\\n    address public strategist;\\n    address public rewards;\\n    address public keeper;\\n\\n    IERC20 public want;\\n\\n    // So indexers can keep track of this\\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\\n\\n    event UpdatedStrategist(address newStrategist);\\n\\n    event UpdatedKeeper(address newKeeper);\\n\\n    event UpdatedRewards(address rewards);\\n\\n    event UpdatedReportDelay(uint256 delay);\\n\\n    event UpdatedProfitFactor(uint256 profitFactor);\\n\\n    event UpdatedDebtThreshold(uint256 debtThreshold);\\n\\n    // The minimum number of seconds between harvest calls. See\\n    // `setMinReportDelay()` for more details.\\n    uint256 public minReportDelay = 86400; // ~ once a day\\n\\n    // The minimum multiple that `callCost` must be above the credit/profit to\\n    // be \\\"justifiable\\\". See `setProfitFactor()` for more details.\\n    uint256 public profitFactor = 100;\\n\\n    // Use this to adjust the threshold at which running a debt causes a\\n    // harvest trigger. See `setDebtThreshold()` for more details.\\n    uint256 public debtThreshold = 0;\\n\\n    // See note on `setEmergencyExit()`.\\n    bool public emergencyExit;\\n\\n    // modifiers\\n    modifier onlyAuthorized() {\\n        require(msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategist() {\\n        require(msg.sender == strategist, \\\"!strategist\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeepers() {\\n        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Initializes the Strategy, this is called only once, when the\\n     *  contract is deployed.\\n     * @dev `_vault` should implement `VaultAPI`.\\n     * @param _vault The address of the Vault responsible for this Strategy.\\n     */\\n    constructor(address _vault) public {\\n        vault = VaultAPI(_vault);\\n        want = IERC20(vault.token());\\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\\n        strategist = msg.sender;\\n        rewards = msg.sender;\\n        keeper = msg.sender;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `strategist`.\\n     *\\n     *  This may only be called by governance or the existing strategist.\\n     * @param _strategist The new address to assign as `strategist`.\\n     */\\n    function setStrategist(address _strategist) external onlyAuthorized {\\n        strategist = _strategist;\\n        emit UpdatedStrategist(_strategist);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `keeper`.\\n     *\\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\\n     *  other than `governance()` or `strategist`. However, unlike\\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\\n     *  and `harvest()`, and no other authorized functions, following the\\n     *  principle of least privilege.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _keeper The new address to assign as `keeper`.\\n     */\\n    function setKeeper(address _keeper) external onlyAuthorized {\\n        keeper = _keeper;\\n        emit UpdatedKeeper(_keeper);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `rewards`. Any distributed rewards will cease flowing\\n     *  to the old address and begin flowing to this address once the change\\n     *  is in effect.\\n     *\\n     *  This will not change any Strategy reports in progress, only\\n     *  new reports made after this change goes into effect.\\n     *\\n     *  This may only be called by the strategist.\\n     * @param _rewards The address to use for collecting rewards.\\n     */\\n    function setRewards(address _rewards) external onlyStrategist {\\n        rewards = _rewards;\\n        emit UpdatedRewards(_rewards);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\\n     *  of blocks that should pass before `harvest()` is called.\\n     *\\n     *  For external keepers (such as the Keep3r network), this is the minimum\\n     *  time between jobs, to prevent excessive costs. (see `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _delay The minimum number of blocks to wait between harvests.\\n     */\\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\\n        minReportDelay = _delay;\\n        emit UpdatedReportDelay(_delay);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\\n     *  for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _profitFactor A ratio to multiply anticipated\\n     * `harvest()` gas cost against.\\n     */\\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\\n        profitFactor = _profitFactor;\\n        emit UpdatedProfitFactor(_profitFactor);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Sets how far the Strategy can go into loss without a harvest and report\\n     *  being required.\\n     *\\n     *  By default this is 0, meaning any losses would cause a harvest which\\n     *  will subsequently report the loss to the Vault for tracking. (See\\n     *  `harvestTrigger()` for more details.)\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @param _debtThreshold How big of a loss this Strategy may carry without\\n     * being required to report to the Vault.\\n     */\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\\n        debtThreshold = _debtThreshold;\\n        emit UpdatedDebtThreshold(_debtThreshold);\\n    }\\n\\n    /**\\n     * Resolve governance address from Vault contract, used to make assertions\\n     * on protected functions in the Strategy.\\n     */\\n    function governance() internal view returns (address) {\\n        return vault.governance();\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Strategy is currently managing,\\n     *  denominated in terms of `want` tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Strategy if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Strategy relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Strategy and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function estimatedTotalAssets() public virtual view returns (uint256);\\n\\n    /**\\n     * Perform any Strategy unwinding or other calls necessary to capture the\\n     * \\\"free return\\\" this Strategy has generated since the last time its core\\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\\n     * This call is only used during \\\"normal operation\\\" of a Strategy, and\\n     * should be optimized to minimize losses as much as possible.\\n     *\\n     * This method returns any realized profits and/or realized losses\\n     * incurred, and should return the total amounts of profits/losses/debt\\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\\n     *\\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\\n     * debt limit, otherwise its value will be how far past the debt limit\\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\\n     *\\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\\n     *       It is okay for it to be less than `_debtOutstanding`, as that\\n     *       should only used as a guide for how much is left to pay back.\\n     *       Payments should be made to minimize loss from slippage, debt,\\n     *       withdrawal fees, etc.\\n     *\\n     * See `vault.debtOutstanding()`.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /**\\n     * Perform any adjustments to the core position(s) of this Strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * Strategy. Note that all \\\"free capital\\\" in the Strategy after the report\\n     * was made is available for reinvestment. Also note that this number\\n     * could be 0, and you should handle that scenario accordingly.\\n     *\\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\\n\\n    /**\\n     * Make as much capital as possible \\\"free\\\" for the Vault to take. Some\\n     * slippage is allowed, since when this method is called the strategist is\\n     * no longer receiving their performance fee. The goal is for the Strategy\\n     * to divest as quickly as possible while not suffering exorbitant losses.\\n     * This function is used during emergency exit instead of\\n     * `prepareReturn()`. This method returns any realized losses incurred,\\n     * and should also return the amount of `want` tokens available to repay\\n     * outstanding debt to the Vault.\\n     */\\n    function exitPosition(uint256 _debtOutstanding)\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        );\\n\\n    /**\\n     *  `Harvest()` calls this function after shares are created during\\n     *  `vault.report()`. You can customize this function to any share\\n     *  distribution mechanism you want.\\n     *\\n     *   See `vault.report()` for further details.\\n     */\\n    function distributeRewards() internal virtual {\\n        // Transfer 100% of newly-minted shares awarded to this contract to the rewards address.\\n        uint256 balance = vault.balanceOf(address(this));\\n        if (balance > 0) {\\n            vault.transfer(rewards, balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `tend()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `tend()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `tend()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be\\n     *  \\\"at a loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `harvestTrigger()` should never return `true` at the same\\n     *  time.\\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\\n     * @return `true` if `tend()` should be called, `false` otherwise.\\n     */\\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\\n        // We usually don't need tend, but if there are positions that need\\n        // active maintainence, overriding this function is how you would\\n        // signal for that.\\n        return false;\\n    }\\n\\n    /**\\n     * @notice\\n     *  Adjust the Strategy's position. The purpose of tending isn't to\\n     *  realize gains, but to maximize yield by reinvesting any returns.\\n     *\\n     *  See comments on `adjustPosition()`.\\n     *\\n     *  This may only be called by governance, the strategist, or the keeper.\\n     */\\n    function tend() external onlyKeepers {\\n        // Don't take profits with this call, but adjust for better gains\\n        adjustPosition(vault.debtOutstanding());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Provide a signal to the keeper that `harvest()` should be called. The\\n     *  keeper will provide the estimated gas cost that they would pay to call\\n     *  `harvest()`, and this function should use that estimate to make a\\n     *  determination if calling it is \\\"worth it\\\" for the keeper. This is not\\n     *  the only consideration into issuing this trigger, for example if the\\n     *  position would be negatively affected if `harvest()` is not called\\n     *  shortly, then this can return `true` even if the keeper might be \\\"at a\\n     *  loss\\\" (keepers are always reimbursed by Yearn).\\n     * @dev\\n     *  `callCost` must be priced in terms of `want`.\\n     *\\n     *  This call and `tendTrigger` should never return `true` at the\\n     *  same time.\\n     *\\n     *  See `minReportDelay`, `profitFactor`, `debtThreshold` to adjust the\\n     *  strategist-controlled parameters that will influence whether this call\\n     *  returns `true` or not. These parameters will be used in conjunction\\n     *  with the parameters reported to the Vault (see `params`) to determine\\n     *  if calling `harvest()` is merited.\\n     *\\n     *  It is expected that an external system will check `harvestTrigger()`.\\n     *  This could be a script run off a desktop or cloud bot (e.g.\\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\\n     *  or via an integration with the Keep3r network (e.g.\\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\\n     * @return `true` if `harvest()` should be called, `false` otherwise.\\n     */\\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\\n        StrategyParams memory params = vault.strategies(address(this));\\n\\n        // Should not trigger if Strategy is not activated\\n        if (params.activation == 0) return false;\\n\\n        // Should trigger if hasn't been called in a while\\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\\n\\n        // If some amount is owed, pay it back\\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropriate\\n        //       to always trigger here, because the resulting change should be\\n        //       large (might not always be the case).\\n        uint256 outstanding = vault.debtOutstanding();\\n        if (outstanding > 0) return true;\\n\\n        // Check for profits and losses\\n        uint256 total = estimatedTotalAssets();\\n        // Trigger if we have a loss to report\\n        if (total.add(debtThreshold) < params.totalDebt) return true;\\n\\n        uint256 profit = 0;\\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\\n\\n        // Otherwise, only trigger if it \\\"makes sense\\\" economically (gas cost\\n        // is <N% of value moved)\\n        uint256 credit = vault.creditAvailable();\\n        return (profitFactor.mul(callCost) < credit.add(profit));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\\n     *  the Strategy's position.\\n     *\\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\\n     *  the Strategy's position.\\n     *\\n     *  This may only be called by governance, the strategist, or the keeper.\\n     * @dev\\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\\n     *  to take in profits, to borrow newly available funds from the Vault, or\\n     *  otherwise adjust its position. In other cases `harvest()` must be\\n     *  called to report to the Vault on the Strategy's position, especially if\\n     *  any losses have occurred.\\n     */\\n    function harvest() external onlyKeepers {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtPayment = 0;\\n        if (emergencyExit) {\\n            // Free up as much capital as possible\\n            // NOTE: Don't take performance fee in this scenario\\n            (profit, loss, debtPayment) = exitPosition(vault.debtOutstanding());\\n        } else {\\n            // Free up returns for Vault to pull\\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\\n        }\\n\\n        // Allow Vault to take up to the \\\"harvested\\\" balance of this contract,\\n        // which is the amount it has earned since the last time it reported to\\n        // the Vault.\\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\\n\\n        // Distribute any reward shares earned by the strategy on this report\\n        distributeRewards();\\n\\n        // Check if free returns are left, and re-invest them\\n        adjustPosition(debtOutstanding);\\n\\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\\n    }\\n\\n    /**\\n     * Liquidate as many assets as possible to `want`, irregardless of\\n     * slippage, up to `_amountNeeded`. Any excess should be re-invested\\n     * here as well.\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\\n\\n    /**\\n     * @notice\\n     *  Withdraws `_amountNeeded` to `vault`.\\n     *\\n     *  This may only be called by the Vault.\\n     * @param _amountNeeded How much `want` to withdraw.\\n     */\\n    function withdraw(uint256 _amountNeeded) external {\\n        require(msg.sender == address(vault), \\\"!vault\\\");\\n        // Liquidate as much as possible to `want`, up to `_amount`\\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\\n        want.transfer(msg.sender, amountFreed);\\n    }\\n\\n    /**\\n     * Do anything necessary to prepare this Strategy for migration, such as\\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\\n     * value.\\n     */\\n    function prepareMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     * @notice\\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\\n     *\\n     *  This may only be called by governance or the Vault.\\n     * @dev\\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\\n     * @param _newStrategy The Strategy to migrate to.\\n     */\\n    function migrate(address _newStrategy) external {\\n        require(msg.sender == address(vault) || msg.sender == governance());\\n        require(BaseStrategy(_newStrategy).vault() == vault);\\n        prepareMigration(_newStrategy);\\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Activates emergency exit. Once activated, the Strategy will exit its\\n     *  position upon the next harvest, depositing all funds into the Vault as\\n     *  quickly as is reasonable given on-chain conditions.\\n     *\\n     *  This may only be called by governance or the strategist.\\n     * @dev\\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\\n     */\\n    function setEmergencyExit() external onlyAuthorized {\\n        emergencyExit = true;\\n        vault.revokeStrategy();\\n    }\\n\\n    /**\\n     * Override this to add all tokens/tokenized positions this contract\\n     * manages on a *persistent* basis (e.g. not just for swapping back to\\n     * want ephemerally).\\n     *\\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\\n     *\\n     * Example:\\n     *\\n     *    function protectedTokens() internal override view returns (address[] memory) {\\n     *      address[] memory protected = new address[](3);\\n     *      protected[0] = tokenA;\\n     *      protected[1] = tokenB;\\n     *      protected[2] = tokenC;\\n     *      return protected;\\n     *    }\\n     */\\n    function protectedTokens() internal virtual view returns (address[] memory);\\n\\n    /**\\n     * @notice\\n     *  Removes tokens from this Strategy that are not the type of tokens\\n     *  managed by this Strategy. This may be used in case of accidentally\\n     *  sending the wrong kind of token to this Strategy.\\n     *\\n     *  Tokens will be sent to `governance()`.\\n     *\\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\\n     *  that are protected by this Strategy.\\n     *\\n     *  This may only be called by governance.\\n     * @dev\\n     *  Implement `protectedTokens()` to specify any additional tokens that\\n     *  should be protected from sweeping in addition to `want`.\\n     * @param _token The token to transfer out of this vault.\\n     */\\n    function sweep(address _token) external onlyGovernance {\\n        require(_token != address(want), \\\"!want\\\");\\n        require(_token != address(vault), \\\"!shares\\\");\\n\\n        address[] memory _protectedTokens = protectedTokens();\\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \\\"!protected\\\");\\n\\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/contracts/strategies/StrategyIdle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n// Feel free to change the license, but this is what we use\\n\\n// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// These are the core Yearn libraries\\nimport {BaseStrategy, StrategyParams} from \\\"../BaseStrategyNew.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../../interfaces/Idle/IIdleTokenV3_1.sol\\\";\\nimport \\\"../../interfaces/Idle/IdleReservoir.sol\\\";\\nimport \\\"../../interfaces/Uniswap/IUniswapRouter.sol\\\";\\n\\ncontract StrategyIdle is BaseStrategy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public immutable uniswapRouterV2;\\n    address public immutable comp;\\n    address public immutable idle;\\n    address public immutable weth;\\n    address public immutable idleReservoir;\\n    address public immutable idleYieldToken;\\n    address public immutable referral;\\n\\n    address[] public uniswapCompPath;\\n    address[] public uniswapIdlePath;\\n\\n    bool public checkVirtualPrice;\\n    uint256 public lastVirtualPrice;\\n\\n    modifier updateVirtualPrice() {\\n        if (checkVirtualPrice) {\\n            require(\\n                lastVirtualPrice <= IIdleTokenV3_1(idleYieldToken).tokenPrice(),\\n                \\\"Virtual price is increasing from the last time, potential losses\\\"\\n            );\\n        }\\n        _;\\n        lastVirtualPrice = IIdleTokenV3_1(idleYieldToken).tokenPrice();\\n    }\\n\\n    constructor(\\n        address _vault,\\n        address _comp,\\n        address _idle,\\n        address _weth,\\n        address _idleReservoir,\\n        address _idleYieldToken,\\n        address _referral,\\n        address _uniswapRouterV2\\n    ) public BaseStrategy(_vault) {\\n        comp = _comp;\\n        idle = _idle;\\n        weth = _weth;\\n        idleReservoir = _idleReservoir;\\n        idleYieldToken = _idleYieldToken;\\n        referral = _referral;\\n\\n        uniswapRouterV2 = _uniswapRouterV2;\\n        uniswapCompPath = [_comp, _weth, address(want)];\\n        uniswapIdlePath = [_idle, _weth, address(want)];\\n\\n        checkVirtualPrice = true;\\n        lastVirtualPrice = IIdleTokenV3_1(_idleYieldToken).tokenPrice();\\n    }\\n\\n    function setCheckVirtualPrice(bool _checkVirtualPrice) public onlyGovernance {\\n        checkVirtualPrice = _checkVirtualPrice;\\n    }\\n\\n    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************\\n\\n    function name() external virtual override pure returns (string memory) {\\n        return \\\"StrategyIdle\\\";\\n    }\\n\\n    function estimatedTotalAssets() public override view returns (uint256) {\\n        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`\\n        return want.balanceOf(address(this)).add(balanceOnIdle()); //TODO: estimate COMP+IDLE value\\n    }\\n\\n    /*\\n     * Perform any strategy unwinding or other calls necessary to capture the \\\"free return\\\"\\n     * this strategy has generated since the last time it's core position(s) were adjusted.\\n     * Examples include unwrapping extra rewards. This call is only used during \\\"normal operation\\\"\\n     * of a Strategy, and should be optimized to minimize losses as much as possible. This method\\n     * returns any realized profits and/or realized losses incurred, and should return the total\\n     * amounts of profits/losses/debt payments (in `want` tokens) for the Vault's accounting\\n     * (e.g. `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\\n     *\\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`. It is okay for it\\n     *       to be less than `_debtOutstanding`, as that should only used as a guide for how much\\n     *       is left to pay back. Payments should be made to minimize loss from slippage, debt,\\n     *       withdrawal fees, etc.\\n     */\\n    function prepareReturn(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        // Assure IdleController has IDLE tokens\\n        IdleReservoir(idleReservoir).drip();\\n\\n        // Try to pay debt asap\\n        if (_debtOutstanding > 0) {\\n            uint256 _amountFreed = liquidatePosition(_debtOutstanding);\\n            // Using Math.min() since we might free more than needed\\n            _debtPayment = Math.min(_amountFreed, _debtOutstanding);\\n        }\\n\\n        // Claim always is cheaper. In the worst case we already claimed in the prev step\\n        // and the gas cost will be higher\\n        IIdleTokenV3_1(idleYieldToken).redeemIdleToken(0);\\n\\n        // If we have IDLE or COMP, let's convert them!\\n        // This is done in a separate step since there might have been\\n        // a migration or an exitPosition\\n\\n        // 1. COMP => IDLE via ETH\\n        // 2. total IDLE => underlying via ETH\\n        // This might be > 0 because of a strategy migration\\n        uint256 balanceOfWantBeforeSwap = balanceOfWant();\\n        _liquidateComp();\\n        _liquidateIdle();\\n        _profit = balanceOfWant().sub(balanceOfWantBeforeSwap);\\n    }\\n\\n    /*\\n     * Perform any adjustments to the core position(s) of this strategy given\\n     * what change the Vault made in the \\\"investable capital\\\" available to the\\n     * strategy. Note that all \\\"free capital\\\" in the strategy after the report\\n     * was made is available for reinvestment. Also note that this number could\\n     * be 0, and you should handle that scenario accordingly.\\n     */\\n    function adjustPosition(uint256 _debtOutstanding) internal override updateVirtualPrice {\\n        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions\\n        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)\\n\\n        //emergency exit is dealt with in prepareReturn\\n        if (emergencyExit) {\\n            return;\\n        }\\n\\n        uint256 _wantAvailable = balanceOfWant().sub(_debtOutstanding);\\n        if (_wantAvailable > 0) {\\n            want.safeApprove(idleYieldToken, 0);\\n            want.safeApprove(idleYieldToken, _wantAvailable);\\n            IIdleTokenV3_1(idleYieldToken).mintIdleToken(_wantAvailable, true, referral);\\n        }\\n    }\\n\\n    /*\\n     * Make as much capital as possible \\\"free\\\" for the Vault to take. Some\\n     * slippage is allowed. The goal is for the strategy to divest as quickly as possible\\n     * while not suffering exorbitant losses. This function is used during emergency exit\\n     * instead of `prepareReturn()`. This method returns any realized losses incurred, and\\n     * should also return the amount of `want` tokens available to repay outstanding debt\\n     * to the Vault.\\n     */\\n    function exitPosition(uint256 _debtOutstanding)\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        )\\n    {\\n        if (checkVirtualPrice) {\\n            // Temporarily suspend virtual price check\\n            checkVirtualPrice = false;\\n            (_profit, _loss, _debtPayment) = prepareReturn(_debtOutstanding);\\n            checkVirtualPrice = true;\\n        } else {\\n            return prepareReturn(_debtOutstanding);\\n        }\\n    }\\n\\n    /*\\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\\n     * up to `_amountNeeded`. Any excess should be re-invested here as well.\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) internal override updateVirtualPrice returns (uint256 _amountFreed) {\\n        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`\\n        // NOTE: Return `_amountFreed`, which should be `<= _amountNeeded`\\n\\n        if (balanceOfWant() < _amountNeeded) {\\n            uint256 currentVirtualPrice = IIdleTokenV3_1(idleYieldToken).tokenPrice();\\n\\n            // Note: potential drift by 1 wei, reduce to max balance in the case approx is rounded up\\n            uint256 valueToRedeemApprox = (_amountNeeded.sub(balanceOfWant())).mul(1e18).div(currentVirtualPrice) + 1;\\n            uint256 valueToRedeem = Math.min(valueToRedeemApprox, IERC20(idleYieldToken).balanceOf(address(this)));\\n\\n            IIdleTokenV3_1(idleYieldToken).redeemIdleToken(valueToRedeem);\\n        }\\n\\n        _amountFreed = balanceOfWant();\\n    }\\n\\n    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary\\n\\n    function harvestTrigger(uint256 callCost) public override view returns (bool) {\\n        return super.harvestTrigger(ethToWant(callCost));\\n    }\\n\\n    function prepareMigration(address _newStrategy) internal override {\\n        // TODO: Transfer any non-`want` tokens to the new strategy\\n        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one\\n\\n        uint256 balance = IERC20(idleYieldToken).balanceOf(address(this));\\n\\n        // this automatically claims the COMP and IDLE gov tokens\\n        IIdleTokenV3_1(idleYieldToken).redeemIdleToken(balance);\\n\\n        // Transfer COMP and IDLE to new strategy\\n        IERC20(comp).transfer(_newStrategy, IERC20(comp).balanceOf(address(this)));\\n        IERC20(idle).transfer(_newStrategy, IERC20(idle).balanceOf(address(this)));\\n    }\\n\\n    function protectedTokens() internal override view returns (address[] memory) {\\n        address[] memory protected = new address[](3);\\n\\n        protected[0] = idleYieldToken;\\n        protected[1] = idle;\\n        protected[2] = comp;\\n\\n        return protected;\\n    }\\n\\n    function balanceOnIdle() public view returns (uint256) {\\n        uint256 currentVirtualPrice = IIdleTokenV3_1(idleYieldToken).tokenPrice();\\n        return IERC20(idleYieldToken).balanceOf(address(this)).mul(currentVirtualPrice).div(1e18);\\n    }\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function ethToWant(uint256 _amount) public view returns (uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(weth);\\n        path[1] = address(want);\\n        uint256[] memory amounts = IUniswapRouter(uniswapRouterV2).getAmountsOut(_amount, path);\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _liquidateComp() internal {\\n        uint256 compBalance = IERC20(comp).balanceOf(address(this));\\n        if (compBalance > 0) {\\n            IERC20(comp).safeApprove(uniswapRouterV2, 0);\\n            IERC20(comp).safeApprove(uniswapRouterV2, compBalance);\\n            IUniswapRouter(uniswapRouterV2).swapExactTokensForTokens(compBalance, 1, uniswapCompPath, address(this), block.timestamp);\\n        }\\n    }\\n\\n    function _liquidateIdle() internal {\\n        uint256 idleBalance = IERC20(idle).balanceOf(address(this));\\n        if (idleBalance > 0) {\\n            IERC20(idle).safeApprove(uniswapRouterV2, 0);\\n            IERC20(idle).safeApprove(uniswapRouterV2, idleBalance);\\n\\n            IUniswapRouter(uniswapRouterV2).swapExactTokensForTokens(idleBalance, 1, uniswapIdlePath, address(this), block.timestamp);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/contracts/strategies/StrategyIdleUSDC_BY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./StrategyIdle.sol\\\";\\n\\n/**\\n * Adds the mainnet addresses to the StrategyIdle\\n * BY = Best-Yield\\n */\\ncontract StrategyIdleUSDC_BY is StrategyIdle {\\n    address public constant __comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n    address public constant __idle = address(0x875773784Af8135eA0ef43b5a374AaD105c5D39e);\\n    address public constant __weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    address public constant __idleReservoir = address(0x031f71B5369c251a6544c41CE059e6b3d61e42C6);\\n\\n    address public constant __idleYieldToken = address(0x5274891bEC421B39D23760c04A6755eCB444797C);\\n    address public constant __referral = address(0x652c1c23780d1A015938dD58b4a65a5F9eFBA653);\\n    address public constant __uniswapRouterV2 = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    constructor(address _vault)\\n        public\\n        StrategyIdle(_vault, __comp, __idle, __weth, __idleReservoir, __idleYieldToken, __referral, __uniswapRouterV2)\\n    {}\\n\\n    function name() external override pure returns (string memory) {\\n        return \\\"StrategyIdleUSDC_BY\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/interfaces/Idle/IIdleTokenV3_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IIdleTokenV3_1 {\\n    // view\\n    /**\\n     * IdleToken price calculation, in underlying\\n     *\\n     * @return price : price in underlying token\\n     */\\n    function tokenPrice() external view returns (uint256 price);\\n\\n    /**\\n     * @return underlying : underlying token address\\n     */\\n    function token() external view returns (address underlying);\\n\\n    /**\\n     * Get APR of every ILendingProtocol\\n     *\\n     * @return addresses : array of token addresses\\n     * @return aprs : array of aprs (ordered in respect to the `addresses` array)\\n     */\\n    function getAPRs() external view returns (address[] memory addresses, uint256[] memory aprs);\\n\\n    // external\\n    // We should save the amount one has deposited to calc interests\\n\\n    /**\\n     * Used to mint IdleTokens, given an underlying amount (eg. DAI).\\n     * This method triggers a rebalance of the pools if needed\\n     * NOTE: User should 'approve' _amount of tokens before calling mintIdleToken\\n     * NOTE 2: this method can be paused\\n     *\\n     * @param _amount : amount of underlying token to be lended\\n     * @param _skipRebalance : flag for skipping rebalance for lower gas price\\n     * @param _referral : referral address\\n     * @return mintedTokens : amount of IdleTokens minted\\n     */\\n    function mintIdleToken(\\n        uint256 _amount,\\n        bool _skipRebalance,\\n        address _referral\\n    ) external returns (uint256 mintedTokens);\\n\\n    /**\\n     * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n     * This method triggers a rebalance of the pools if needed\\n     * NOTE: If the contract is paused or iToken price has decreased one can still redeem but no rebalance happens.\\n     * NOTE 2: If iToken price has decresed one should not redeem (but can do it) otherwise he would capitalize the loss.\\n     *         Ideally one should wait until the black swan event is terminated\\n     *\\n     * @param _amount : amount of IdleTokens to be burned\\n     * @return redeemedTokens : amount of underlying tokens redeemed\\n     */\\n    function redeemIdleToken(uint256 _amount) external returns (uint256 redeemedTokens);\\n\\n    /**\\n     * Here we calc the pool share one can withdraw given the amount of IdleToken they want to burn\\n     * and send interest-bearing tokens (eg. cDAI/iDAI) directly to the user.\\n     * Underlying (eg. DAI) is not redeemed here.\\n     *\\n     * @param _amount : amount of IdleTokens to be burned\\n     */\\n    function redeemInterestBearingTokens(uint256 _amount) external;\\n\\n    /**\\n     * @return : whether has rebalanced or not\\n     */\\n    function rebalance() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/interfaces/Idle/IdleReservoir.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.6.12;\\n\\ninterface IdleReservoir {\\n    function drip() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/dougmolina/Apps/projects/yearn/yearn-verify/interfaces/Uniswap/IUniswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__idle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__idleReservoir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__idleYieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__referral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOnIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVirtualPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ethToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleReservoir\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleYieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_checkVirtualPrice\",\"type\":\"bool\"}],\"name\":\"setCheckVirtualPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapCompPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapIdlePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyIdleUSDC_BY","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033bd0f9618cf38fea8f7f01e1514ab63b9bde64b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}