{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.10;\r\n/*\r\n * date: 10/6/2020\r\n * title: CryptoBoard - Simple smart contract billboard that charges users a set price to update the image, the price to update is then increased by a set amount (25% markup in this example)\r\n *\t\t\t\t\t\tThe received funds are then split between the developer and a charity\r\n * author: Crypto [Neo] - Check me out on twitter! (@neoaikon), if you like my work feel free to send me a tip at 0x5E294C8db9FdE66C19665ed42c6cb4552B0f5e73\r\n */\r\ncontract CryptoBoard {\r\n\taddress private owner;\t\t\r\n\t// Billboard parameters\r\n\tstring public urlCharity;\r\n\tstring public nameCharity;\t\r\n\tstring public urlBillboard;\r\n\tstring public lcdMessage;\r\n\t// Payment parameters\t\r\n\taddress payable public payeeDev;\r\n\taddress payable public payeeCharity;\r\n\tuint256 public minCost;\r\n\tuint256 public lastEpoch;\r\n\tuint256 public updateCost;\r\n\tuint8 public split;\r\n\tuint8 public markup;\r\n\t\r\n\t/// Modifier so only the owner can change the Minimum Cost, Markup and Split amounds, as well as the Dev and Charity addresses\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t// Constructor\r\n\tconstructor(address payable initDevPayee, string memory initCharityName, address payable initCharityPayee, string memory initCharityUrl) public {\r\n\t\t// Set owner, developer, and charity addresses\r\n\t\towner = msg.sender;\r\n\t\tpayeeDev = initDevPayee;\r\n\t\tpayeeCharity = initCharityPayee;\r\n\t\t// Initialize the initial image, charity name and icon\r\n\t\tnameCharity = initCharityName;\r\n\t\turlCharity = initCharityUrl;\r\n\t\t// Initialize the billboard\r\n\t\turlBillboard = \"https://ipfs.io/ipfs/Qmej3Wu3NxqaHCJ1wdDuQUu3PWwLoPoA6mX9ts5YjPGgrJ\";\r\n\t\t// Initialize the LCD message\r\n\t\tlcdMessage = \"Cryptoboard - The interwebs Ethereum powered billboard!\";\r\n\t\t// Initialize the last updated time\r\n\t\tlastEpoch = now;\r\n\t\t// Initialze the price variables\r\n\t\tmarkup = 125; // 25%\r\n\t\tsplit = 5; // 5%\r\n\t\tminCost = .01 ether;\r\n\t\tupdateCost = minCost;\r\n\t}\r\n\r\n\t// Update the image displayed on the billboard\t\r\n\tfunction updateBillboard(string memory newBillboardUrl) public payable {\r\n\t    require(bytes(newBillboardUrl).length != 0, \"Billboard URL cannot be blank\");\r\n\t\trequire(msg.value > 0, \"You need to actually send ETH!\");\r\n\t\t// Get the cost of the update\r\n\t\tupdateCost = getCost();\r\n\t\t// Make sure the amount of ETH sent matches the update cost\r\n\t\trequire(msg.value >= updateCost, \"You didn't send enough wei, check getCost()\");\r\n\t\t// Update the LUT, image URL, and increase the cos by 10%\r\n\t\tlastEpoch = now;\r\n\t\turlBillboard = newBillboardUrl;\t\t\r\n\t\tupdateCost = updateCost * markup / 100;\r\n\t\t\r\n\t\tperformDonation(msg.value);\r\n\t}\r\n\t\r\n\t// Update the message displayed under the billboard\t\r\n\tfunction updateLcdMessage(string memory newLcdMessage) public payable {\r\n\t    require(bytes(newLcdMessage).length != 0, \"LCD message cannot be blank\");\r\n\t\trequire(msg.value > 0, \"You need to actually send ETH!\");\t\t\t\t\r\n\t\trequire(msg.value >= minCost/2, \"You didn't send enough wei, cost=mincost/2\");\r\n\t\tlcdMessage = newLcdMessage;\t\t\r\n\t\tperformDonation(msg.value);\t\t\r\n\t}\r\n\t\r\n\t// Owner Only - Change the Developer payout address\r\n\tfunction setDevData(address payable newPayeeDev) public onlyOwner {\r\n\t\trequire(newPayeeDev != address(0), \"Developer payout cannot be burned\");\r\n\t\tpayeeDev = newPayeeDev;\r\n\t}\r\n\t\r\n\t// Owner Only - Change the Charity name, payout address and display icon\r\n\tfunction setCharityData(string memory newCharityName, address payable newPayeeCharity, string memory newCharityUrl) public onlyOwner {\r\n\t\trequire(bytes(newCharityName).length != 0, \"Charity name cannot be blank\");\r\n\t\trequire(bytes(newCharityUrl).length != 0, \"Charity URL cannot be blank\");\r\n\t\trequire(newPayeeCharity != address(0), \"Charity payout cannot be burned! Are you crazy?!\");\r\n\t\tnameCharity = newCharityName;\r\n\t\tpayeeCharity = newPayeeCharity;\r\n\t\turlCharity = newCharityUrl;\r\n\t}\r\n\r\n\t// Owner Only - Change the minimum cost to set the billboard, as well as the markup and split parameters\r\n\tfunction setCostData(uint256 newMinCost, uint8 newMarkup, uint8 newSplit) public onlyOwner {\r\n\t    require(newMinCost != 0 && newMarkup != 0 && newSplit != 0, \"All cost parameters must be > 0\");\r\n\t\tminCost = newMinCost;\r\n\t\tmarkup = newMarkup;\r\n\t\tsplit = newSplit;\r\n\t}\r\n\t\r\n\t// Calculate the payment split and send it to the Dev and Charity\r\n\tfunction performDonation(uint256 v) private {\r\n\t\tuint256 devSplit = v * split / 100;\r\n\t\t// Send payouts to the developer and a charity\r\n\t\tpayeeDev.transfer(devSplit);\r\n\t\tpayeeCharity.transfer(msg.value-devSplit);\r\n\t}\r\n\t\r\n\t// Use this function when fetching the cost as it returns the calculated depreceated value\r\n\tfunction getCost() public view returns (uint256) {\r\n\t\t// Get number of days since last update\r\n\t\tuint256 updateDelta = (now - lastEpoch) / 1 days;\r\n\t\t// Over time the update cost will return to the minCost value\r\n\t\t// at a rate of 10% per day\tsince last update\r\n\t\tuint256 tmpCost = updateCost;\r\n\t\tfor(uint256 i = 0; i < updateDelta; i++)\r\n\t\t{\r\n\t\t\ttmpCost -= tmpCost * 10 / 100;\r\n\t\t\tif(tmpCost < minCost) {\r\n\t\t\t\ttmpCost = minCost;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tmpCost;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"initDevPayee\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"initCharityName\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"initCharityPayee\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"initCharityUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lcdMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"markup\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameCharity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payeeCharity\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payeeDev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newCharityName\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"newPayeeCharity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newCharityUrl\",\"type\":\"string\"}],\"name\":\"setCharityData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinCost\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newMarkup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSplit\",\"type\":\"uint8\"}],\"name\":\"setCostData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayeeDev\",\"type\":\"address\"}],\"name\":\"setDevData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBillboardUrl\",\"type\":\"string\"}],\"name\":\"updateBillboard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLcdMessage\",\"type\":\"string\"}],\"name\":\"updateLcdMessage\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"urlBillboard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"urlCharity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CryptoBoard","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArgumentsersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://54f0b3e93118cdcb36499a5b08908a79ff3284d19c610994ed06e2790c3dbbaa"}]}