{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{ value : amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract pVaultEthV2 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    struct Reward {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 totalDeposit;\r\n    }\r\n\r\n    mapping(address => uint256) public _lastCheckTime;\r\n    mapping(address => uint256) public _rewardBalance;\r\n    mapping(address => uint256) public _depositBalances;\r\n\r\n    uint256 public _totalDeposit;\r\n\r\n    Reward[] public _rewards;\r\n\r\n    string public _vaultName;\r\n\r\n    IERC20 public token1;\r\n    address payable public feeAddress;\r\n    address payable public vaultAddress;\r\n    uint32 public feePermill = 5;\r\n    uint256 public delayDuration = 7 days;\r\n    bool public withdrawable;\r\n    \r\n    address public gov;\r\n\r\n    uint256 public _rewardCount;\r\n\r\n    event SentReward(uint256 amount);\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event ClaimedReward(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    constructor (address _token1, address payable _feeAddress, address payable _vaultAddress, string memory name) {\r\n        token1 = IERC20(_token1);\r\n        feeAddress = _feeAddress;\r\n        vaultAddress = _vaultAddress;\r\n        _vaultName = name;\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address _gov)\r\n        external\r\n        onlyGov\r\n    {\r\n        gov = _gov;\r\n    }\r\n\r\n    function setToken1(address _token)\r\n        external\r\n        onlyGov\r\n    {\r\n        token1 = IERC20(_token);\r\n    }\r\n\r\n    function setFeeAddress(address payable _feeAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setVaultAddress(address payable _vaultAddress)\r\n        external\r\n        onlyGov\r\n    {\r\n        vaultAddress = _vaultAddress;\r\n    }\r\n\r\n    function setFeePermill(uint32 _feePermill)\r\n        external\r\n        onlyGov\r\n    {\r\n        feePermill = _feePermill;\r\n    }\r\n\r\n    function setDelayDuration(uint32 _delayDuration)\r\n        external\r\n        onlyGov\r\n    {\r\n        delayDuration = _delayDuration;\r\n    }\r\n\r\n    function setWithdrawable(bool _withdrawable)\r\n        external\r\n        onlyGov\r\n    {\r\n        withdrawable = _withdrawable;\r\n    }\r\n\r\n    function setVaultName(string memory name)\r\n        external\r\n        onlyGov\r\n    {\r\n        _vaultName = name;\r\n    }\r\n\r\n    function balance0()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function balance1()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return token1.balanceOf(address(this));\r\n    }\r\n\r\n    function getReward(address userAddress)\r\n        internal \r\n    {\r\n        uint256 lastCheckTime = _lastCheckTime[userAddress];\r\n        uint256 rewardBalance = _rewardBalance[userAddress];\r\n        if (lastCheckTime > 0 && _rewards.length > 0) {\r\n            for (uint i = _rewards.length - 1; lastCheckTime < _rewards[i].timestamp; i--) {\r\n                rewardBalance = rewardBalance.add(_rewards[i].amount.mul(_depositBalances[userAddress]).div(_rewards[i].totalDeposit));\r\n                if (i == 0) break;\r\n            }\r\n        }\r\n        _rewardBalance[userAddress] = rewardBalance;\r\n        _lastCheckTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        require(msg.value > 0, \"can't deposit 0\");\r\n        uint256 amount = msg.value;\r\n        getReward(msg.sender);\r\n\r\n        uint256 feeAmount = amount.mul(feePermill).div(1000);\r\n        uint256 realAmount = amount.sub(feeAmount);\r\n        \r\n        if ( ! feeAddress.send(feeAmount)) {\r\n            feeAddress.transfer(feeAmount);\r\n        }\r\n        if ( ! vaultAddress.send(realAmount)) {\r\n            vaultAddress.transfer(realAmount);\r\n        }\r\n\r\n        _depositBalances[msg.sender] = _depositBalances[msg.sender].add(realAmount);\r\n        _totalDeposit = _totalDeposit.add(realAmount);\r\n        emit Deposited(msg.sender, realAmount);\r\n    }\r\n\r\n    function sendReward(uint256 amount) external {\r\n        require(amount > 0, \"can't reward 0\");\r\n        require(_totalDeposit > 0, \"totalDeposit must bigger than 0\");\r\n        token1.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        Reward memory reward;\r\n        reward = Reward(amount, block.timestamp, _totalDeposit);\r\n        _rewards.push(reward);\r\n        emit SentReward(amount);\r\n    }\r\n\r\n    function claimReward(uint256 amount) external {\r\n        getReward(msg.sender);\r\n\r\n        uint256 rewardLimit = getRewardAmount(msg.sender);\r\n\r\n        if (amount > rewardLimit) {\r\n            amount = rewardLimit;\r\n        }\r\n        _rewardBalance[msg.sender] = _rewardBalance[msg.sender].sub(amount);\r\n        token1.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function claimRewardAll() external {\r\n        getReward(msg.sender);\r\n        \r\n        uint256 rewardLimit = getRewardAmount(msg.sender);\r\n        \r\n        _rewardBalance[msg.sender] = _rewardBalance[msg.sender].sub(rewardLimit);\r\n        token1.safeTransfer(msg.sender, rewardLimit);\r\n    }\r\n    \r\n    function getRewardAmount(address userAddress) public view returns (uint256) {\r\n        uint256 lastCheckTime = _lastCheckTime[userAddress];\r\n        uint256 rewardBalance = _rewardBalance[userAddress];\r\n        if (_rewards.length > 0) {\r\n            if (lastCheckTime > 0) {\r\n                for (uint i = _rewards.length - 1; lastCheckTime < _rewards[i].timestamp; i--) {\r\n                    rewardBalance = rewardBalance.add(_rewards[i].amount.mul(_depositBalances[userAddress]).div(_rewards[i].totalDeposit));\r\n                    if (i == 0) break;\r\n                }\r\n            }\r\n            \r\n            for (uint j = _rewards.length - 1; block.timestamp < _rewards[j].timestamp.add(delayDuration); j--) {\r\n                uint256 timedAmount = _rewards[j].amount.mul(_depositBalances[userAddress]).div(_rewards[j].totalDeposit);\r\n                timedAmount = timedAmount.mul(_rewards[j].timestamp.add(delayDuration).sub(block.timestamp)).div(delayDuration);\r\n                rewardBalance = rewardBalance.sub(timedAmount);\r\n                if (j == 0) break;\r\n            }\r\n        }\r\n        return rewardBalance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_depositBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastCheckTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vaultName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePermill\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_delayDuration\",\"type\":\"uint32\"}],\"name\":\"setDelayDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feePermill\",\"type\":\"uint32\"}],\"name\":\"setFeePermill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setVaultName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"name\":\"setWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"pVaultEthV2","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d7b7d3c0bda57723fb54ab95fd8f9ea033af37f2000000000000000000000000d319d5a9d039f06858263e95235575bb0bd630bc0000000000000000000000001073975d25f95ec76132a5c8b51fe75b112ea6ed000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000084554485661756c74000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a27f8fc0a819960894d79559af932e942b4179487f394ba6588e55b7fa61e6b0"}]}