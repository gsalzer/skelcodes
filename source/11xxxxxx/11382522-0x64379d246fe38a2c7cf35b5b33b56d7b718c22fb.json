{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol@v3.0.0\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol@v3.0.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n\r\n\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/v612/ICOREGlobals.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// COPYRIGHT cVault.finance TEAM\r\n// NO COPY\r\n// COPY = BAD\r\n// This code is provided with no assurances or guarantees of any kind. Use at your own responsibility.\r\n\r\ninterface ICOREGlobals {\r\n    function CORETokenAddress() external view returns (address);\r\n    function COREGlobalsAddress() external view returns (address);\r\n    function COREDelegatorAddress() external view returns (address);\r\n    function COREVaultAddress() external returns (address);\r\n    function COREWETHUniPair() external view returns (address);\r\n    function UniswapFactory() external view returns (address);\r\n    function TransferHandler() external view returns (address);\r\n    function addDelegatorStateChangePermission(address that, bool status) external;\r\n    function isStateChangeApprovedContract(address that)  external view returns (bool);\r\n    function FannyTokenAddress() external view returns (address); \r\n    function FannyVaultAddress() external view returns (address); \r\n    function isContract(address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/v612/TransferHandler01.sol\r\n\r\n\r\n\r\n\r\n/// Transfer handler v0.1\r\n// The basic needed for double coins to work\r\n// While we wait for TransferHandler 1.0 to be properly tested.\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface Uniswap {\r\n    function token0() external returns (address);\r\n    function token1() external returns (address);\r\n}\r\n\r\ncontract TransferHandler01 is OwnableUpgradeSafe {\r\n\r\n    using SafeMath for uint256;\r\n    ICOREGlobals coreGlobals;\r\n    address tokenUniswapPairCORE;\r\n    address[] public trackedPairs;\r\n    uint8 public feePercentX100;  // max 255 = 25.5% artificial clamp\r\n    bool public transfersPaused;\r\n    mapping (address => bool) public noFeeList;\r\n    mapping (address => bool) public isPair;\r\n    mapping (address => bool) public noFeeRecipent;\r\n\r\n    function initialize(\r\n        address _coreGlobals\r\n    ) public initializer {\r\n        require(tx.origin == address(0x5A16552f59ea34E44ec81E58b3817833E9fD5436));\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n        coreGlobals = ICOREGlobals(_coreGlobals);\r\n\r\n        feePercentX100 = 10; //1%\r\n        transfersPaused = true;  // pause transfers until we change the contract address to this one\r\n                                // Then unpause will sync all pairs\r\n        tokenUniswapPairCORE = coreGlobals.COREWETHUniPair();\r\n        _editNoFeeList(coreGlobals.COREVaultAddress(), true); // corevault proxy needs to have no sender fee\r\n        _addPairToTrack(coreGlobals.COREWETHUniPair());\r\n\r\n        // minFinney = 5000;\r\n    }\r\n\r\n    // No need to remove pairs\r\n    function addPairToTrack(address pair) onlyOwner public {\r\n        _addPairToTrack(pair);\r\n    }\r\n\r\n    function _addPairToTrack(address pair) internal {\r\n\r\n        uint256 length = trackedPairs.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(trackedPairs[i] != pair, \"Pair already tracked\");\r\n        }\r\n        // we sync\r\n        sync(pair);\r\n        // we add to array so we can loop over it\r\n        trackedPairs.push(pair);\r\n        // we add pair to no fee sender list\r\n        _editNoFeeList(pair, true);\r\n        // we add it to pair mapping to lookups\r\n        isPair[pair] = true;\r\n\r\n    }\r\n\r\n\r\n    // CORE token is pausable \r\n    function setPaused(bool _pause) public onlyOwner {\r\n\r\n        transfersPaused = _pause;\r\n\r\n        // Sync all tracked pairs\r\n        uint256 length = trackedPairs.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            sync(trackedPairs[i]);\r\n        }\r\n    \r\n    }\r\n\r\n    function setFeeMultiplier(uint8 _feeMultiplier) public onlyOwner {\r\n        feePercentX100 = _feeMultiplier;\r\n    }\r\n\r\n    function editNoFeeList(address _address, bool noFee) public onlyOwner {\r\n        _editNoFeeList(_address,noFee);\r\n    }\r\n    function _editNoFeeList(address _address, bool noFee) internal{\r\n        noFeeList[_address] = noFee;\r\n    }\r\n\r\n    function editNoFeeRecipentList(address _address, bool noFee) public onlyOwner {\r\n        _editNoFeeRecipentList(_address,noFee);\r\n    }\r\n    function _editNoFeeRecipentList(address _address, bool noFee) internal{\r\n        noFeeRecipent[_address] = noFee;\r\n    }\r\n\r\n    // uint minFinney; // 2x for $ liq amount\r\n\r\n    // function setMinimumLiquidityToTriggerStop(uint finneyAmnt) public onlyOwner{ // 1000 = 1eth\r\n    //     minFinney = finneyAmnt;\r\n    // }\r\n\r\n\r\n    // Old sync for backwards compatibility - syncs COREtokenEthPair\r\n    function sync() public returns (bool lastIsMint, bool lpTokenBurn) {\r\n\r\n        (lastIsMint,  lpTokenBurn) = sync(tokenUniswapPairCORE);\r\n\r\n        // This will update the state of lastIsMint, when called publically\r\n        // So we have to sync it before to the last LP token value.\r\n\r\n        // uint256 _balanceWETH = IERC20(WETHAddress).balanceOf(tokenUniswapPair);\r\n        // uint256 _balanceCORE = IERC20(coreTokenAddress).balanceOf(tokenUniswapPair);\r\n\r\n        // Do not block after small liq additions\r\n        // you can only withdraw 350$ now with front running\r\n        // And cant front run buys with liq add ( adversary drain )\r\n\r\n        // lastIsMint = _balanceCORE > lastSupplyOfCoreInPair && _balanceWETH > lastSupplyOfWETHInPair.add(minFinney.mul(1 finney));\r\n\r\n\r\n        // lastSupplyOfCoreInPair = _balanceCORE;\r\n        // lastSupplyOfWETHInPair = _balanceWETH;\r\n    }\r\n\r\n    mapping(address => uint256) private lpSupplyOfPair;\r\n\r\n    function sync(address pair) public returns (bool lastIsMint, bool lpTokenBurn) {\r\n        // This will update the state of lastIsMint, when called publically\r\n        // So we have to sync it before to the last LP token value.\r\n        uint256 _LPSupplyOfPairNow = IERC20(pair).totalSupply();\r\n\r\n        lpTokenBurn = lpSupplyOfPair[pair] > _LPSupplyOfPairNow;\r\n        lpSupplyOfPair[pair] = _LPSupplyOfPairNow;\r\n\r\n        lastIsMint = false;\r\n    }\r\n\r\n\r\n    // Called by ERC95\r\n    // They are not pausable\r\n    //  or have a fee\r\n    // at least right now\r\n    // Note ERC95 will make it impossible to withdraw liq at all\r\n    // Because CORE will sync, or it will sync while the transfer is happening\r\n    // and revert\r\n    // Note 2 : it would be cool to have own WETH but that woudnt be supported by uniswap \r\n    function handleTransfer\r\n        (address sender, \r\n        address recipient, \r\n        uint256 amount\r\n        ) public {\r\n            \r\n            // If the pair is sender it might be a burn\r\n            // So we sync and then check\r\n        \r\n            if(isPair[sender]) {\r\n                (bool lastIsMint, bool lpTokenBurn) = sync(sender);\r\n                require(lastIsMint == false, \"CORE TransferHandler v0.1 : Liquidity withdrawals forbidden\");\r\n                require(lpTokenBurn == false, \"CORE TransferHandler v0.1 : Liquidity withdrawals forbidden\");\r\n            }\r\n            // If recipent is pair we just sync\r\n            else if(isPair[recipient]) {\r\n               sync(recipient);\r\n            }\r\n\r\n        }\r\n\r\n    bool pairSentOutCORE;\r\n    function calculateAmountsAfterFee(        \r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n        ) public  returns (uint256 transferToAmount, uint256 transferToFeeDistributorAmount) \r\n        {\r\n            require(transfersPaused == false, \"CORE TransferHandler v0.1 : Transfers Paused\");\r\n\r\n\r\n            // If the sender is pair\r\n            // We sync and check for a burn happening\r\n            if(isPair[sender]) {\r\n                (bool lastIsMint, bool lpTokenBurn) = sync(sender);\r\n                require(lastIsMint == false, \"CORE TransferHandler v0.1 : Liquidity withdrawals forbidden\");\r\n                require(lpTokenBurn == false, \"CORE TransferHandler v0.1 : Liquidity withdrawals forbidden\");\r\n            }\r\n            // If recipient is pair we just sync\r\n            else if(isPair[recipient]) {\r\n               sync(recipient);\r\n            }\r\n            \r\n            // Because CORE isn't double controlled we should sync it on normal transfers as well\r\n            if(!isPair[recipient] && !isPair[sender])\r\n                sync();\r\n\r\n\r\n            if(noFeeList[sender]) { // Dont have a fee when corevault is sending, or infinite loop  // And when pair is sending ( buys are happening, no tax on it)\r\n                transferToFeeDistributorAmount = 0;\r\n                transferToAmount = amount;\r\n            } \r\n            else {\r\n                transferToFeeDistributorAmount = amount.mul(feePercentX100).div(1000);\r\n                transferToAmount = amount.sub(transferToFeeDistributorAmount);\r\n            }\r\n\r\n            if(noFeeRecipent[recipient]) {\r\n                transferToFeeDistributorAmount = 0;\r\n                transferToAmount = amount;\r\n            }\r\n        }\r\n\r\n\r\n        function handleRestrictedTokenTransfer(address _from, address _to, uint256 _amount) public {\r\n                // Exceptions include fanny vault and when claiming the token itself\r\n\r\n                    // this will fail ungracefully if its any other contract\r\n                    if(coreGlobals.isContract(_to)) {\r\n                        try Uniswap(_to).token0() {\r\n                            address token0 = Uniswap(_to).token0(); \r\n                            address token1 = Uniswap(_to).token1();\r\n\r\n                            require(token1 == coreGlobals.CORETokenAddress() ||\r\n                            token0 == coreGlobals.CORETokenAddress() , \"Pairs only against CORE allowed.\");\r\n                        } \r\n                        catch {}\r\n                    }\r\n        }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addPairToTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateAmountsAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferToFeeDistributorAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFee\",\"type\":\"bool\"}],\"name\":\"editNoFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFee\",\"type\":\"bool\"}],\"name\":\"editNoFeeRecipentList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentX100\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handleRestrictedTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreGlobals\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeRecipent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feeMultiplier\",\"type\":\"uint8\"}],\"name\":\"setFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lastIsMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lpTokenBurn\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lastIsMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lpTokenBurn\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trackedPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TransferHandler01","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9e920123a6900c42f23bd9183f7a6c6b63e7e8bc523c228aecfe7bd5d024deb4"}]}