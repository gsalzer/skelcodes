{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n/**\r\n * @title SafeMath \r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplie two unsigned integers, revert on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, revert on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtract two unsigned integers, revert on underflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Add two unsigned integers, revert on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool); \r\n\r\n    function approve(address spender, uint256 value) external returns (bool); \r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool); \r\n\r\n    function totalSupply() external view returns (uint256); \r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256); \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value); \r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable  {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PairFeeDistribution is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    struct PairInfo {\r\n        uint256 totalfee;\r\n        uint256 unclaimedfee;\r\n        uint256 accpreshare;\r\n    }\r\n \r\n    struct UserInfo {\r\n        uint256 claimedfee;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    address public factoryContract;\r\n    address[] public pairs;\r\n    address[] public users;\r\n    mapping(address => PairInfo) public pairInfo;\r\n\r\n    mapping(address =>mapping(address => UserInfo)) public userInfo;\r\n    mapping(address => bool) public userStatus;\r\n    mapping(address => uint256) public userIndex;\r\n    uint256 public pairUpdateIdx;\r\n    mapping(address => uint256) public withdrawIdx;\r\n    event AddInvestors(address user, bool update);\r\n    event RemoveInvestors(address user);\r\n    event UpdateInvestorPairPerShare(uint256 times);\r\n    event Withdrawfee(address pair, address account, uint256 amount);\r\n    event SetFactory(address preFactory, address newFactory);\r\n\r\n    function setFactory(address _factoryContract) public onlyOwner returns(bool) {\r\n        require(_factoryContract != address(0) , \"The _factoryContract address cannot be zero address\");\r\n        require(_factoryContract != factoryContract , \"Repeated _factoryContract address\");\r\n        emit SetFactory(factoryContract, _factoryContract);\r\n        factoryContract = _factoryContract;\r\n        return true;\r\n    }\r\n\r\n    modifier olnyFactory() {\r\n        require(msg.sender == factoryContract, \"Caller is not the factoryContract\");\r\n        _;\r\n    }\r\n\r\n    function addpair(address pair) public olnyFactory {\r\n        pairs.push(pair);\r\n    }\r\n\r\n    function addInvestors(address user, bool update) public onlyOwner returns(uint256){\r\n        require(user != address(0), \"Investor address cannot be zero address\");\r\n        require(!userStatus[user],\"The user already exist\");\r\n        require(pairUpdateIdx == 0);\r\n        uint256 length = pairs.length;\r\n        if (update) {\r\n            updateInvestorPairPerShare(length);\r\n        }\r\n        for (uint256 i = 0; i < length; i++) {\r\n             userInfo[user][pairs[i]].rewardDebt = pairInfo[pairs[i]].accpreshare.div(10000);\r\n        }\r\n        userStatus[user] = true;\r\n        users.push(user);\r\n        userIndex[user] = users.length.sub(1);\r\n        emit AddInvestors(user, update);\r\n        return users.length;\r\n    }\r\n\r\n    function removeInvestors(address user) public onlyOwner returns (uint256){\r\n        require(userStatus[user],\"The user doesn't exist\");\r\n        userStatus[user] = false;\r\n        userIndex[users[users.length.sub(1)]] = userIndex[user];\r\n        users[userIndex[user]] = users[users.length.sub(1)];\r\n        users.length--;\r\n        emit RemoveInvestors(user);\r\n        return users.length;\r\n    }\r\n\r\n    function updateInvestorPairPerShare(uint256 number) public onlyOwner {\r\n        uint256 userLength = users.length;\r\n        uint256 pairLength = pairs.length;\r\n        uint256 processCount;\r\n        uint256 index = pairUpdateIdx;\r\n        processCount = pairLength.sub(pairUpdateIdx) <= number ? pairLength.sub(pairUpdateIdx) : number;\r\n        for (uint256 i = pairUpdateIdx; i < processCount.add(pairUpdateIdx); i++) {\r\n            uint256 amount = IERC20(pairs[i]).balanceOf(address(this)).sub(pairInfo[pairs[i]].unclaimedfee);\r\n            if (amount > 0) {\r\n                pairInfo[pairs[i]].unclaimedfee = pairInfo[pairs[i]].unclaimedfee.add(amount);\r\n                pairInfo[pairs[i]].totalfee = pairInfo[pairs[i]].totalfee.add(amount);\r\n                pairInfo[pairs[i]].accpreshare = pairInfo[pairs[i]].accpreshare.add(amount.mul(10000).div(userLength));\r\n            }\r\n            index += 1;\r\n            if (index == pairLength) {\r\n                index = 0;\r\n                break;\r\n            }  \r\n        }\r\n        pairUpdateIdx = index;\r\n        emit UpdateInvestorPairPerShare(processCount);\r\n    }\r\n    \r\n    function withdrawfee(address paird, address account) public {\r\n        require(userStatus[msg.sender],\"The caller doesn't exist\");\r\n        PairInfo storage pair = pairInfo[paird];\r\n        UserInfo storage user = userInfo[msg.sender][paird];\r\n        uint256 amount = pair.accpreshare.div(10000).sub(user.rewardDebt);\r\n        if (amount >0) {\r\n            IERC20(paird).transfer(account,amount);\r\n            pair.unclaimedfee = pair.unclaimedfee.sub(amount);\r\n            user.rewardDebt = pair.accpreshare.div(10000);\r\n            user.claimedfee = user.claimedfee.add(amount);\r\n        }\r\n        emit Withdrawfee(paird, account, amount);\r\n    }\r\n\r\n    function batchwithdrawfee(address account, uint256 number) public {\r\n        require(userStatus[msg.sender],\"The caller doesn't exist\");\r\n        uint256 pairLength = pairs.length;\r\n        uint256 index = withdrawIdx[account];\r\n        uint256 processCount = pairLength.sub(index) <= number ? pairLength.sub(index) : number;\r\n        for (uint256 i = withdrawIdx[account]; i < processCount.add(withdrawIdx[account]); i++) {\r\n            uint256 amount = pairInfo[pairs[i]].accpreshare.div(10000).sub(userInfo[msg.sender][pairs[i]].rewardDebt);\r\n            if (amount >0) {\r\n                IERC20(pairs[i]).transfer(account,amount);\r\n                pairInfo[pairs[i]].unclaimedfee = pairInfo[pairs[i]].unclaimedfee.sub(amount);\r\n                userInfo[msg.sender][pairs[i]].rewardDebt = pairInfo[pairs[i]].accpreshare.div(10000);\r\n                userInfo[msg.sender][pairs[i]].claimedfee = userInfo[msg.sender][pairs[i]].claimedfee.add(amount);\r\n                emit Withdrawfee(pairs[i], account, amount);\r\n            }\r\n            index += 1;\r\n            if (index == pairLength) {\r\n                index = 0;\r\n                break;\r\n            }\r\n        }\r\n        withdrawIdx[account] = index;\r\n    }\r\n\r\n    function getpendingfee(address account,  address paird) public view returns(uint256){\r\n        PairInfo storage pair = pairInfo[paird];\r\n        UserInfo storage user = userInfo[account][paird];\r\n        uint256 amount = pair.accpreshare.div(10000).sub(user.rewardDebt);\r\n        if (!userStatus[account]){\r\n            return 0;\r\n        }else{\r\n            return amount;\r\n        }\r\n        \r\n    }\r\n\r\n    function getpairlength() public view returns(uint256){\r\n        return pairs.length;\r\n    }\r\n         \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"AddInvestors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemoveInvestors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"UpdateInvestorPairPerShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawfee\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"addInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addpair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"batchwithdrawfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpairlength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paird\",\"type\":\"address\"}],\"name\":\"getpendingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accpreshare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairUpdateIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"updateInvestorPairPerShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"paird\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PairFeeDistribution","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://eac479e01ff4094febeb72832634afd1a0311258274166e69581a57bbc28a241"}]}