{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n}\n\ninterface ItokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \n}\n\ninterface IstakeContract { \n    function createStake(address _wallet, uint8 _timeFrame, uint256 _value) external returns (bool); \n}\n\ninterface IERC20Token {\n    function totalSupply() external view returns (uint256 supply);\n    function transfer(address _to, uint256 _value) external  returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n}\n\ncontract Ownable {\n\n    address private owner;\n    \n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n\n    function changeOwner(address newOwner) public onlyOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n\ncontract Vault {\n    \n    address public tokenAddress;\n    address public beneficiary;\n    uint256 public releaseTime;\n    \n    constructor(address _tokenAddress, address _beneficiary, uint256 _releasetime) {\n        tokenAddress = _tokenAddress;\n        beneficiary = _beneficiary;\n        releaseTime = _releasetime;\n    }\n    \n    function release() public {\n        require(block.timestamp >= releaseTime, \"TokenTimelock: current time is before release time\");\n        IERC20Token token = IERC20Token(tokenAddress);\n        uint256 amount = token.balanceOf(address(this));\n        require(amount > 0, \"Tokens already released\");\n        token.transfer(beneficiary, amount);\n    }\n    \n    \n}\n\ncontract StandardToken is IERC20Token {\n    \n    using SafeMath for uint256;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public _totalSupply;\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    function totalSupply() override public view returns (uint256 supply) {\n        return _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_value >= 0, \"Invalid amount\"); \n\t\trequire(balances[msg.sender] >= _value, \"Not enough balance\");\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\n        require(_to != address(0x0), \"Use burn function instead\");                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_value >= 0, \"Invalid amount\"); \n\t\trequire(balances[_from] >= _value, \"Not enough balance\");\n\t\trequire(allowed[_from][msg.sender] >= _value, \"You need to increase allowance\");\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) override public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) override public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n}\n\ncontract YUIToken is Ownable, StandardToken {\n\n    using SafeMath for uint256;\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    address public stakeContract;\n    address public crowdSaleContract;\n    bool public txUnlocked; \n    mapping (address => uint256) frozenBalances;\n    event Burn(address indexed from, uint256 value);\n    event StakeContractSet(address indexed contractAddress);\n    event VaultCreated(address indexed _vault, address indexed _beneficiary, uint256 _releaseTime);\n    \n    constructor(address _crowdSaleContract) {\n        name = \"YUI Token\";\n        decimals = 18;\n        symbol = \"YUI\";\n        stakeContract = address(0x0);\n        crowdSaleContract = _crowdSaleContract;                // contract for ICO tokens\n        address teamWallet =  0x07B8DcbDF4d52B9C1f4251373A289D803Cc670f8;               // wallet for team tokens\n        address privateSaleWallet = 0xd60194A475DC6D36CE2251A5FDfE8CAB2eF65aB4;        // wallet for private sale tokens\n        address marketingWallet = 0x28fb41B469f5BE5f21571FCC93A510E95e73e538;          // wallet for marketing\n        address exchangesLiquidity = 0x158924281bb9729469d2534aa59c1EdDba10a32f;       // add liquidity to exchanges\n        address stakeWallet = 0x1919d8c9113b95BC1cD3909DECA90713aFfAADcd;              // tokens for the stake contract\n        uint256 teamReleaseTime = 1620324000;                                      // lock team tokens for 6 months\n        uint256 marketingReleaseTime = 1612548000;                                  // lock marketing tokens - 1k tokens for 3 months\n        Vault teamVault = new Vault(address(this), teamWallet, teamReleaseTime);               // team vault contract\n        emit VaultCreated(address(teamVault), teamWallet, teamReleaseTime);\n        Vault marketingVault = new Vault(address(this), marketingWallet, marketingReleaseTime);   // marketing vault contract\n        emit VaultCreated(address(marketingVault), marketingWallet, marketingReleaseTime);\n        \n        balances[address(teamVault)] = 3000 ether;\n        emit Transfer(address(0x0), address(teamVault), (3000 ether));\n        balances[privateSaleWallet] = 1500 ether;\n        emit Transfer(address(0x0), address(privateSaleWallet), (1500 ether));\n        balances[crowdSaleContract] = 5000 ether;\n        emit Transfer(address(0x0), address(crowdSaleContract), (5000 ether));\n        balances[marketingWallet] = 1000 ether;\n        emit Transfer(address(0x0), address(marketingWallet), (1000 ether));\n        balances[address(marketingVault)] = 1000 ether;\n        emit Transfer(address(0x0), address(marketingVault), (1000 ether));\n        balances[exchangesLiquidity] = 9000 ether;\n        emit Transfer(address(0x0), address(exchangesLiquidity), (9000 ether));\n        balances[stakeWallet] = 7500 ether;\n        emit Transfer(address(0x0), address(stakeWallet), (7500 ether));\n        _totalSupply = 28000 ether;\n        txUnlocked = false;\n    }\n    \n    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\n        return frozenBalances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) override public  returns (bool success) {\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\n        return super.transfer(_to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n        require(txAllowed(msg.sender, _value), \"Crowdsale tokens are still frozen\");\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    function setStakeContract(address _contractAddress) onlyOwner public {\n        stakeContract = _contractAddress;\n        emit StakeContractSet(_contractAddress);\n    }\n    \n        // Tokens sold by crowdsale contract will be frozen ultil crowdsale ends\n    function txAllowed(address sender, uint256 amount) private view returns (bool isAllowed) {\n        if (txUnlocked) {\n            return true;\n        } else {\n            if (amount <= (balances[sender] - frozenBalances[sender])) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n    \n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value, \"Not enough balance\");\n\t\trequire(_value >= 0, \"Invalid amount\"); \n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        _totalSupply = _totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function approveStake(uint8 _timeFrame, uint256 _value) public returns (bool success) {\n        require(stakeContract != address(0x0));\n        allowed[msg.sender][stakeContract] = _value;\n        emit Approval(msg.sender, stakeContract, _value);\n        IstakeContract recipient = IstakeContract(stakeContract);\n        require(recipient.createStake(msg.sender, _timeFrame, _value));\n        return true;\n    }\n    \n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        ItokenRecipient recipient = ItokenRecipient(_spender);\n        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\n        return true;\n    }\n    \n    function tokensSold(address buyer, uint256 amount) public returns (bool success) {\n        require(msg.sender == crowdSaleContract);\n        frozenBalances[buyer] += amount;\n        return super.transfer(buyer, amount);\n    }\n    \n    function unlockTX() onlyOwner public {\n        txUnlocked = true;\n    }\n    \n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdSaleContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"StakeContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_timeFrame\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSaleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"frozenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YUIToken","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004672d660ae2bc4e9c8d8eb5918f1564d4bbf18e8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}