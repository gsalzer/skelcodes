{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"cache/solpp-generated-contracts/ZkSync.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeMathUInt128.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./Config.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nimport \\\"./Bytes.sol\\\";\\nimport \\\"./Operations.sol\\\";\\n\\nimport \\\"./UpgradeableMaster.sol\\\";\\n\\n/// @title zkSync main contract\\n/// @author Matter Labs\\ncontract ZkSync is UpgradeableMaster, Storage, Config, Events, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeMathUInt128 for uint128;\\n\\n    bytes32 private constant EMPTY_STRING_KECCAK = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n    /// @notice Data needed to process onchain operation from block public data.\\n    /// @notice Onchain operations is operations that need some processing on L1: Deposits, Withdrawals, ChangePubKey.\\n    /// @param ethWitness Some external data that can be needed for operation processing\\n    /// @param publicDataOffset Byte offset in public data for onchain operation\\n    struct OnchainOperationData {\\n        bytes ethWitness;\\n        uint32 publicDataOffset;\\n    }\\n\\n    /// @notice Data needed to commit new block\\n    struct CommitBlockInfo {\\n        bytes32 newStateHash;\\n        bytes publicData;\\n        uint256 timestamp;\\n        OnchainOperationData[] onchainOperations;\\n        uint32 blockNumber;\\n        uint32 feeAccount;\\n    }\\n\\n    /// @notice Data needed to execute committed and verified block\\n    /// @param commitmentsInSlot verified commitments in one slot\\n    /// @param commitmentIdx index such that commitmentsInSlot[commitmentIdx] is current block commitment\\n    struct ExecuteBlockInfo {\\n        StoredBlockInfo storedBlock;\\n        bytes[] pendingOnchainOpsPubdata;\\n    }\\n\\n    /// @notice Recursive proof input data (individual commitments are constructed onchain)\\n    struct ProofInput {\\n        uint256[] recursiveInput;\\n        uint256[] proof;\\n        uint256[] commitments;\\n        uint8[] vkIndexes;\\n        uint256[16] subproofsLimbs;\\n    }\\n\\n    // Upgrade functional\\n\\n    /// @notice Notice period before activation preparation status of upgrade mode\\n    function getNoticePeriod() external pure override returns (uint256) {\\n        return UPGRADE_NOTICE_PERIOD;\\n    }\\n\\n    /// @notice Notification that upgrade notice period started\\n    /// @dev Can be external because Proxy contract intercepts illegal calls of this function\\n    function upgradeNoticePeriodStarted() external override {}\\n\\n    /// @notice Notification that upgrade preparation status is activated\\n    /// @dev Can be external because Proxy contract intercepts illegal calls of this function\\n    function upgradePreparationStarted() external override {\\n        upgradePreparationActive = true;\\n        upgradePreparationActivationTime = block.timestamp;\\n    }\\n\\n    /// @notice Notification that upgrade canceled\\n    /// @dev Can be external because Proxy contract intercepts illegal calls of this function\\n    function upgradeCanceled() external override {\\n        upgradePreparationActive = false;\\n        upgradePreparationActivationTime = 0;\\n    }\\n\\n    /// @notice Notification that upgrade finishes\\n    /// @dev Can be external because Proxy contract intercepts illegal calls of this function\\n    function upgradeFinishes() external override {\\n        upgradePreparationActive = false;\\n        upgradePreparationActivationTime = 0;\\n    }\\n\\n    /// @notice Checks that contract is ready for upgrade\\n    /// @return bool flag indicating that contract is ready for upgrade\\n    function isReadyForUpgrade() external view override returns (bool) {\\n        return !exodusMode;\\n    }\\n\\n    /// @notice zkSync contract initialization. Can be external because Proxy contract intercepts illegal calls of this function.\\n    /// @param initializationParameters Encoded representation of initialization parameters:\\n    /// @dev _governanceAddress The address of Governance contract\\n    /// @dev _verifierAddress The address of Verifier contract\\n    /// @dev _genesisStateHash Genesis blocks (first block) state tree root hash\\n    function initialize(bytes calldata initializationParameters) external {\\n        initializeReentrancyGuard();\\n\\n        (address _governanceAddress, address _verifierAddress, bytes32 _genesisStateHash) =\\n            abi.decode(initializationParameters, (address, address, bytes32));\\n\\n        verifier = Verifier(_verifierAddress);\\n        governance = Governance(_governanceAddress);\\n\\n        // We need initial state hash because it is used in the commitment of the next block\\n        StoredBlockInfo memory storedBlockZero =\\n            StoredBlockInfo(0, 0, EMPTY_STRING_KECCAK, 0, _genesisStateHash, bytes32(0));\\n\\n        storedBlockHashes[0] = hashStoredBlockInfo(storedBlockZero);\\n    }\\n\\n    /// @notice zkSync contract upgrade. Can be external because Proxy contract intercepts illegal calls of this function.\\n    /// @param upgradeParameters Encoded representation of upgrade parameters\\n    function upgrade(bytes calldata upgradeParameters) external nonReentrant {\\n        // NOTE: this line does not have any effect in contracts-4 upgrade since we require priority queue to be empty,\\n        // but this should be enabled in future upgrades.\\n        activateExodusMode();\\n\\n        require(upgradeParameters.length == 0, \\\"0\\\"); // upgrade parameters should be empty\\n\\n        // Convert last verified block from old format to new format\\n        require(totalBlocksCommitted == totalBlocksExecuted, \\\"1\\\"); // all blocks should be verified\\n        require(numberOfPendingWithdrawals_DEPRECATED == 0, \\\"2\\\"); // pending withdrawal is not used anymore\\n        require(totalOpenPriorityRequests == 0, \\\"3\\\"); // no uncommitted priority requests\\n\\n        Block_DEPRECATED memory lastBlock = blocks_DEPRECATED[totalBlocksExecuted];\\n        require(lastBlock.priorityOperations == 0, \\\"4\\\"); // last block should not contain priority operations\\n\\n        StoredBlockInfo memory rehashedLastBlock =\\n            StoredBlockInfo(\\n                totalBlocksExecuted,\\n                lastBlock.priorityOperations,\\n                EMPTY_STRING_KECCAK,\\n                0,\\n                lastBlock.stateRoot,\\n                lastBlock.commitment\\n            );\\n        storedBlockHashes[totalBlocksExecuted] = hashStoredBlockInfo(rehashedLastBlock);\\n        totalBlocksProven = totalBlocksExecuted;\\n    }\\n\\n    /// @notice Sends tokens\\n    /// @dev NOTE: will revert if transfer call fails or rollup balance difference (before and after transfer) is bigger than _maxAmount\\n    /// @dev This function is used to allow tokens to spend zkSync contract balance up to amount that is requested\\n    /// @param _token Token address\\n    /// @param _to Address of recipient\\n    /// @param _amount Amount of tokens to transfer\\n    /// @param _maxAmount Maximum possible amount of tokens to transfer to this account\\n    function _transferERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint128 _amount,\\n        uint128 _maxAmount\\n    ) external returns (uint128 withdrawnAmount) {\\n        require(msg.sender == address(this), \\\"5\\\"); // wtg10 - can be called only from this contract as one \\\"external\\\" call (to revert all this function state changes if it is needed)\\n\\n        uint256 balanceBefore = _token.balanceOf(address(this));\\n        require(Utils.sendERC20(_token, _to, _amount), \\\"6\\\"); // wtg11 - ERC20 transfer fails\\n        uint256 balanceAfter = _token.balanceOf(address(this));\\n        uint256 balanceDiff = balanceBefore.sub(balanceAfter);\\n        require(balanceDiff <= _maxAmount, \\\"7\\\"); // wtg12 - rollup balance difference (before and after transfer) is bigger than _maxAmount\\n\\n        return SafeCast.toUint128(balanceDiff);\\n    }\\n\\n    /// @notice Accrues users balances from deposit priority requests in Exodus mode\\n    /// @dev WARNING: Only for Exodus mode\\n    /// @dev Canceling may take several separate transactions to be completed\\n    /// @param _n number of requests to process\\n    function cancelOutstandingDepositsForExodusMode(uint64 _n, bytes[] memory _depositsPubdata) external nonReentrant {\\n        require(exodusMode, \\\"8\\\"); // exodus mode not active\\n        uint64 toProcess = Utils.minU64(totalOpenPriorityRequests, _n);\\n        require(toProcess == _depositsPubdata.length, \\\"A\\\");\\n        require(toProcess > 0, \\\"9\\\"); // no deposits to process\\n        uint64 currentDepositIdx = 0;\\n        for (uint64 id = firstPriorityRequestId; id < firstPriorityRequestId + toProcess; id++) {\\n            if (priorityRequests[id].opType == Operations.OpType.Deposit) {\\n                bytes memory depositPubdata = _depositsPubdata[currentDepositIdx];\\n                require(Utils.hashBytesToBytes20(depositPubdata) == priorityRequests[id].hashedPubData, \\\"a\\\");\\n                ++currentDepositIdx;\\n\\n                Operations.Deposit memory op = Operations.readDepositPubdata(depositPubdata);\\n                bytes22 packedBalanceKey = packAddressAndTokenId(op.owner, op.tokenId);\\n                pendingBalances[packedBalanceKey].balanceToWithdraw += op.amount;\\n            }\\n            delete priorityRequests[id];\\n        }\\n        firstPriorityRequestId += toProcess;\\n        totalOpenPriorityRequests -= toProcess;\\n    }\\n\\n    /// @notice Deposit ETH to Layer 2 - transfer ether from user into contract, validate it, register deposit\\n    /// @param _zkSyncAddress The receiver Layer 2 address\\n    function depositETH(address _zkSyncAddress) external payable {\\n        requireActive();\\n        registerDeposit(0, SafeCast.toUint128(msg.value), _zkSyncAddress);\\n    }\\n\\n    /// @notice Deposit ERC20 token to Layer 2 - transfer ERC20 tokens from user into contract, validate it, register deposit\\n    /// @param _token Token address\\n    /// @param _amount Token amount\\n    /// @param _zkSyncAddress Receiver Layer 2 address\\n    function depositERC20(\\n        IERC20 _token,\\n        uint104 _amount,\\n        address _zkSyncAddress\\n    ) external nonReentrant {\\n        requireActive();\\n\\n        // Get token id by its address\\n        uint16 tokenId = governance.validateTokenAddress(address(_token));\\n        require(!governance.pausedTokens(tokenId), \\\"b\\\"); // token deposits are paused\\n\\n        uint256 balanceBefore = _token.balanceOf(address(this));\\n        require(Utils.transferFromERC20(_token, msg.sender, address(this), SafeCast.toUint128(_amount)), \\\"c\\\"); // token transfer failed deposit\\n        uint256 balanceAfter = _token.balanceOf(address(this));\\n        uint128 depositAmount = SafeCast.toUint128(balanceAfter.sub(balanceBefore));\\n\\n        registerDeposit(tokenId, depositAmount, _zkSyncAddress);\\n    }\\n\\n    /// @notice Returns amount of tokens that can be withdrawn by `address` from zkSync contract\\n    /// @param _address Address of the tokens owner\\n    /// @param _token Address of token, zero address is used for ETH\\n    function getPendingBalance(address _address, address _token) public view returns (uint128) {\\n        uint16 tokenId = 0;\\n        if (_token != address(0)) {\\n            tokenId = governance.validateTokenAddress(_token);\\n        }\\n        return pendingBalances[packAddressAndTokenId(_address, tokenId)].balanceToWithdraw;\\n    }\\n\\n    /// @notice Returns amount of tokens that can be withdrawn by `address` from zkSync contract\\n    /// @notice DEPRECATED: to be removed in future,  use getPendingBalance instead\\n    /// @param _address Address of the tokens owner\\n    /// @param _tokenId token id, 0 is used for ETH\\n    function getBalanceToWithdraw(address _address, uint16 _tokenId) public view returns (uint128) {\\n        return pendingBalances[packAddressAndTokenId(_address, _tokenId)].balanceToWithdraw;\\n    }\\n\\n    /// @notice  Withdraws tokens from zkSync contract to the owner\\n    /// @param _owner Address of the tokens owner\\n    /// @param _token Address of tokens, zero address is used for ETH\\n    /// @param _amount Amount to withdraw to request.\\n    ///         NOTE: We will call ERC20.transfer(.., _amount), but if according to internal logic of ERC20 token zkSync contract\\n    ///         balance will be decreased by value more then _amount we will try to subtract this value from user pending balance\\n    function withdrawPendingBalance(\\n        address payable _owner,\\n        address _token,\\n        uint128 _amount\\n    ) external nonReentrant {\\n        if (_token == address(0)) {\\n            registerWithdrawal(0, _amount, _owner);\\n            (bool success, ) = _owner.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"d\\\"); // ETH withdraw failed\\n        } else {\\n            uint16 tokenId = governance.validateTokenAddress(_token);\\n            bytes22 packedBalanceKey = packAddressAndTokenId(_owner, tokenId);\\n            uint128 balance = pendingBalances[packedBalanceKey].balanceToWithdraw;\\n            // We will allow withdrawals of `value` such that:\\n            // `value` <= user pending balance\\n            // `value` can be bigger then `_amount` requested if token takes fee from sender in addition to `_amount` requested\\n            uint128 withdrawnAmount = this._transferERC20(IERC20(_token), _owner, _amount, balance);\\n            registerWithdrawal(tokenId, withdrawnAmount, _owner);\\n        }\\n    }\\n\\n    /// @notice Withdraw ERC20 token to Layer 1 - register withdrawal and transfer ERC20 to sender\\n    /// @notice DEPRECATED: use withdrawPendingBalance instead\\n    /// @param _token Token address\\n    /// @param _amount amount to withdraw\\n    function withdrawERC20(IERC20 _token, uint128 _amount) external nonReentrant {\\n        uint16 tokenId = governance.validateTokenAddress(address(_token));\\n        bytes22 packedBalanceKey = packAddressAndTokenId(msg.sender, tokenId);\\n        uint128 balance = pendingBalances[packedBalanceKey].balanceToWithdraw;\\n        uint128 withdrawnAmount = this._transferERC20(_token, msg.sender, _amount, balance);\\n        registerWithdrawal(tokenId, withdrawnAmount, msg.sender);\\n    }\\n\\n    /// @notice Withdraw ETH to Layer 1 - register withdrawal and transfer ether to sender\\n    /// @notice DEPRECATED: use withdrawPendingBalance instead\\n    /// @param _amount Ether amount to withdraw\\n    function withdrawETH(uint128 _amount) external nonReentrant {\\n        registerWithdrawal(0, _amount, msg.sender);\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"D\\\"); // ETH withdraw failed\\n    }\\n\\n    /// @notice Register full exit request - pack pubdata, add priority request\\n    /// @param _accountId Numerical id of the account\\n    /// @param _token Token address, 0 address for ether\\n    function requestFullExit(uint32 _accountId, address _token) public nonReentrant {\\n        requireActive();\\n        require(_accountId <= MAX_ACCOUNT_ID, \\\"e\\\");\\n\\n        uint16 tokenId;\\n        if (_token == address(0)) {\\n            tokenId = 0;\\n        } else {\\n            tokenId = governance.validateTokenAddress(_token);\\n        }\\n\\n        // Priority Queue request\\n        Operations.FullExit memory op =\\n            Operations.FullExit({\\n                accountId: _accountId,\\n                owner: msg.sender,\\n                tokenId: tokenId,\\n                amount: 0 // unknown at this point\\n            });\\n        bytes memory pubData = Operations.writeFullExitPubdataForPriorityQueue(op);\\n        addPriorityRequest(Operations.OpType.FullExit, pubData);\\n\\n        // User must fill storage slot of balancesToWithdraw(msg.sender, tokenId) with nonzero value\\n        // In this case operator should just overwrite this slot during confirming withdrawal\\n        bytes22 packedBalanceKey = packAddressAndTokenId(msg.sender, tokenId);\\n        pendingBalances[packedBalanceKey].gasReserveValue = FILLED_GAS_RESERVE_VALUE;\\n    }\\n\\n    /// @notice Register full exit request - pack pubdata, add priority request\\n    /// @notice DEPRECATED: use requestFullExit instead.\\n    /// @param _accountId Numerical id of the account\\n    /// @param _token Token address, 0 address for ether\\n    function fullExit(uint32 _accountId, address _token) external {\\n        requestFullExit(_accountId, _token);\\n    }\\n\\n    /// @dev Process one block commit using previous block StoredBlockInfo,\\n    /// @dev returns new block StoredBlockInfo\\n    /// @dev NOTE: Does not change storage (except events, so we can't mark it view)\\n    function commitOneBlock(StoredBlockInfo memory _previousBlock, CommitBlockInfo memory _newBlock)\\n        internal\\n        view\\n        returns (StoredBlockInfo memory storedNewBlock)\\n    {\\n        require(_newBlock.blockNumber == _previousBlock.blockNumber + 1, \\\"f\\\"); // only commit next block\\n\\n        // Check timestamp of the new block\\n        {\\n            require(_newBlock.timestamp >= _previousBlock.timestamp, \\\"g\\\"); // Block should be after previous block\\n            bool timestampNotTooSmall = block.timestamp.sub(COMMIT_TIMESTAMP_NOT_OLDER) <= _newBlock.timestamp;\\n            bool timestampNotTooBig = _newBlock.timestamp <= block.timestamp.add(COMMIT_TIMESTAMP_APPROXIMATION_DELTA);\\n            require(timestampNotTooSmall && timestampNotTooBig, \\\"h\\\"); // New block timestamp is not valid\\n        }\\n\\n        // Check onchain operations\\n        (bytes32 pendingOnchainOpsHash, uint64 priorityReqCommitted, bytes memory onchainOpsOffsetCommitment) =\\n            collectOnchainOps(_newBlock);\\n\\n        // Create block commitment for verification proof\\n        bytes32 commitment = createBlockCommitment(_previousBlock, _newBlock, onchainOpsOffsetCommitment);\\n\\n        return\\n            StoredBlockInfo(\\n                _newBlock.blockNumber,\\n                priorityReqCommitted,\\n                pendingOnchainOpsHash,\\n                _newBlock.timestamp,\\n                _newBlock.newStateHash,\\n                commitment\\n            );\\n    }\\n\\n    /// @notice Commit block\\n    /// @notice 1. Checks onchain operations, timestamp.\\n    /// @notice 2. Store block commitments\\n    function commitBlocks(StoredBlockInfo memory _lastCommittedBlockData, CommitBlockInfo[] memory _newBlocksData)\\n        external\\n        nonReentrant\\n    {\\n        requireActive();\\n        governance.requireActiveValidator(msg.sender);\\n        // Check that we commit blocks after last committed block\\n        require(storedBlockHashes[totalBlocksCommitted] == hashStoredBlockInfo(_lastCommittedBlockData), \\\"i\\\"); // incorrect previous block data\\n\\n        for (uint32 i = 0; i < _newBlocksData.length; ++i) {\\n            _lastCommittedBlockData = commitOneBlock(_lastCommittedBlockData, _newBlocksData[i]);\\n\\n            totalCommittedPriorityRequests += _lastCommittedBlockData.priorityOperations;\\n            storedBlockHashes[_lastCommittedBlockData.blockNumber] = hashStoredBlockInfo(_lastCommittedBlockData);\\n\\n            emit BlockCommit(_lastCommittedBlockData.blockNumber);\\n        }\\n\\n        totalBlocksCommitted += uint32(_newBlocksData.length);\\n\\n        require(totalCommittedPriorityRequests <= totalOpenPriorityRequests, \\\"j\\\");\\n    }\\n\\n    /// @dev 1. Try to send token to _recipients\\n    /// @dev 2. On failure: Increment _recipients balance to withdraw.\\n    function withdrawOrStore(\\n        uint16 _tokenId,\\n        address _recipient,\\n        uint128 _amount\\n    ) internal {\\n        bytes22 packedBalanceKey = packAddressAndTokenId(_recipient, _tokenId);\\n\\n        bool sent = false;\\n        if (_tokenId == 0) {\\n            address payable toPayable = address(uint160(_recipient));\\n            sent = sendETHNoRevert(toPayable, _amount);\\n        } else {\\n            address tokenAddr = governance.tokenAddresses(_tokenId);\\n            // We use `_transferERC20` here to check that `ERC20` token indeed transferred `_amount`\\n            // and fail if token subtracted from zkSync balance more then `_amount` that was requested.\\n            // This can happen if token subtracts fee from sender while transferring `_amount` that was requested to transfer.\\n            try this._transferERC20{gas: WITHDRAWAL_GAS_LIMIT}(IERC20(tokenAddr), _recipient, _amount, _amount) {\\n                sent = true;\\n            } catch {\\n                sent = false;\\n            }\\n        }\\n        if (sent) {\\n            emit Withdrawal(_tokenId, _amount);\\n        } else {\\n            increaseBalanceToWithdraw(packedBalanceKey, _amount);\\n        }\\n    }\\n\\n    /// @dev Executes one block\\n    /// @dev 1. Processes all pending operations (Send Exits, Complete priority requests)\\n    /// @dev 2. Finalizes block on Ethereum\\n    /// @dev _executedBlockIdx is index in the array of the blocks that we want to execute together\\n    function executeOneBlock(ExecuteBlockInfo memory _blockExecuteData, uint32 _executedBlockIdx) internal {\\n        // Ensure block was committed\\n        require(\\n            hashStoredBlockInfo(_blockExecuteData.storedBlock) ==\\n                storedBlockHashes[_blockExecuteData.storedBlock.blockNumber],\\n            \\\"exe10\\\" // executing block should be committed\\n        );\\n        require(_blockExecuteData.storedBlock.blockNumber == totalBlocksExecuted + _executedBlockIdx + 1, \\\"k\\\"); // Execute blocks in order\\n\\n        bytes32 pendingOnchainOpsHash = EMPTY_STRING_KECCAK;\\n        for (uint32 i = 0; i < _blockExecuteData.pendingOnchainOpsPubdata.length; ++i) {\\n            bytes memory pubData = _blockExecuteData.pendingOnchainOpsPubdata[i];\\n\\n            Operations.OpType opType = Operations.OpType(uint8(pubData[0]));\\n\\n            if (opType == Operations.OpType.PartialExit) {\\n                Operations.PartialExit memory op = Operations.readPartialExitPubdata(pubData);\\n                withdrawOrStore(op.tokenId, op.owner, op.amount);\\n            } else if (opType == Operations.OpType.ForcedExit) {\\n                Operations.ForcedExit memory op = Operations.readForcedExitPubdata(pubData);\\n                withdrawOrStore(op.tokenId, op.target, op.amount);\\n            } else if (opType == Operations.OpType.FullExit) {\\n                Operations.FullExit memory op = Operations.readFullExitPubdata(pubData);\\n                withdrawOrStore(op.tokenId, op.owner, op.amount);\\n            } else {\\n                revert(\\\"l\\\"); // unsupported op in block execution\\n            }\\n\\n            pendingOnchainOpsHash = Utils.concatHash(pendingOnchainOpsHash, pubData);\\n        }\\n        require(pendingOnchainOpsHash == _blockExecuteData.storedBlock.pendingOnchainOperationsHash, \\\"m\\\"); // incorrect onchain ops executed\\n    }\\n\\n    /// @notice Execute blocks, completing priority operations and processing withdrawals.\\n    /// @notice 1. Processes all pending operations (Send Exits, Complete priority requests)\\n    /// @notice 2. Finalizes block on Ethereum\\n    function executeBlocks(ExecuteBlockInfo[] memory _blocksData) external nonReentrant {\\n        requireActive();\\n        governance.requireActiveValidator(msg.sender);\\n\\n        uint64 priorityRequestsExecuted = 0;\\n        uint32 nBlocks = uint32(_blocksData.length);\\n        for (uint32 i = 0; i < nBlocks; ++i) {\\n            executeOneBlock(_blocksData[i], i);\\n            priorityRequestsExecuted += _blocksData[i].storedBlock.priorityOperations;\\n            emit BlockVerification(_blocksData[i].storedBlock.blockNumber);\\n        }\\n\\n        firstPriorityRequestId += priorityRequestsExecuted;\\n        totalCommittedPriorityRequests -= priorityRequestsExecuted;\\n        totalOpenPriorityRequests -= priorityRequestsExecuted;\\n\\n        totalBlocksExecuted += nBlocks;\\n        require(totalBlocksExecuted <= totalBlocksProven, \\\"n\\\"); // Can't execute blocks more then committed and proven currently.\\n    }\\n\\n    /// @notice Blocks commitment verification.\\n    /// @notice Only verifies block commitments without any other processing\\n    function proveBlocks(StoredBlockInfo[] memory _committedBlocks, ProofInput memory _proof) external nonReentrant {\\n        uint32 currentTotalBlocksProven = totalBlocksProven;\\n        for (uint256 i = 0; i < _committedBlocks.length; ++i) {\\n            require(hashStoredBlockInfo(_committedBlocks[i]) == storedBlockHashes[currentTotalBlocksProven + 1], \\\"o1\\\");\\n            ++currentTotalBlocksProven;\\n\\n            require(_proof.commitments[i] & INPUT_MASK == uint256(_committedBlocks[i].commitment) & INPUT_MASK, \\\"o\\\"); // incorrect block commitment in proof\\n        }\\n\\n        bool success =\\n            verifier.verifyAggregatedBlockProof(\\n                _proof.recursiveInput,\\n                _proof.proof,\\n                _proof.vkIndexes,\\n                _proof.commitments,\\n                _proof.subproofsLimbs\\n            );\\n        require(success, \\\"p\\\"); // Aggregated proof verification fail\\n\\n        require(currentTotalBlocksProven <= totalBlocksCommitted, \\\"q\\\");\\n        totalBlocksProven = currentTotalBlocksProven;\\n    }\\n\\n    /// @notice Reverts unverified blocks\\n    function revertBlocks(StoredBlockInfo[] memory _blocksToRevert) external nonReentrant {\\n        governance.requireActiveValidator(msg.sender);\\n\\n        uint32 blocksCommitted = totalBlocksCommitted;\\n        uint32 blocksToRevert = Utils.minU32(uint32(_blocksToRevert.length), blocksCommitted - totalBlocksExecuted);\\n        uint64 revertedPriorityRequests = 0;\\n\\n        for (uint32 i = 0; i < blocksToRevert; ++i) {\\n            StoredBlockInfo memory storedBlockInfo = _blocksToRevert[i];\\n            require(storedBlockHashes[blocksCommitted] == hashStoredBlockInfo(storedBlockInfo), \\\"r\\\"); // incorrect stored block info\\n\\n            delete storedBlockHashes[blocksCommitted];\\n\\n            --blocksCommitted;\\n            revertedPriorityRequests += storedBlockInfo.priorityOperations;\\n        }\\n\\n        totalBlocksCommitted = blocksCommitted;\\n        totalCommittedPriorityRequests -= revertedPriorityRequests;\\n        if (totalBlocksCommitted < totalBlocksProven) {\\n            totalBlocksProven = totalBlocksCommitted;\\n        }\\n\\n        emit BlocksRevert(totalBlocksExecuted, blocksCommitted);\\n    }\\n\\n    /// @notice Checks if Exodus mode must be entered. If true - enters exodus mode and emits ExodusMode event.\\n    /// @dev Exodus mode must be entered in case of current ethereum block number is higher than the oldest\\n    /// @dev of existed priority requests expiration block number.\\n    /// @return bool flag that is true if the Exodus mode must be entered.\\n    function activateExodusMode() public returns (bool) {\\n        bool trigger =\\n            block.number >= priorityRequests[firstPriorityRequestId].expirationBlock &&\\n                priorityRequests[firstPriorityRequestId].expirationBlock != 0;\\n        if (trigger) {\\n            if (!exodusMode) {\\n                exodusMode = true;\\n                emit ExodusMode();\\n            }\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Withdraws token from ZkSync to root chain in case of exodus mode. User must provide proof that he owns funds\\n    /// @param _storedBlockInfo Last verified block\\n    /// @param _owner Owner of the account\\n    /// @param _accountId Id of the account in the tree\\n    /// @param _proof Proof\\n    /// @param _tokenId Verified token id\\n    /// @param _amount Amount for owner (must be total amount, not part of it)\\n    function performExodus(\\n        StoredBlockInfo memory _storedBlockInfo,\\n        address _owner,\\n        uint32 _accountId,\\n        uint16 _tokenId,\\n        uint128 _amount,\\n        uint256[] memory _proof\\n    ) external nonReentrant {\\n        bytes22 packedBalanceKey = packAddressAndTokenId(_owner, _tokenId);\\n        require(exodusMode, \\\"s\\\"); // must be in exodus mode\\n        require(!performedExodus[_accountId][_tokenId], \\\"t\\\"); // already exited\\n        require(storedBlockHashes[totalBlocksExecuted] == hashStoredBlockInfo(_storedBlockInfo), \\\"u\\\"); // incorrect sotred block info\\n\\n        bool proofCorrect =\\n            verifier.verifyExitProof(_storedBlockInfo.stateHash, _accountId, _owner, _tokenId, _amount, _proof);\\n        require(proofCorrect, \\\"x\\\");\\n\\n        increaseBalanceToWithdraw(packedBalanceKey, _amount);\\n        performedExodus[_accountId][_tokenId] = true;\\n    }\\n\\n    /// @notice Set data for changing pubkey hash using onchain authorization.\\n    ///         Transaction author (msg.sender) should be L2 account address\\n    /// @notice New pubkey hash can be reset, to do that user should send two transactions:\\n    ///         1) First `setAuthPubkeyHash` transaction for already used `_nonce` will set timer.\\n    ///         2) After `AUTH_FACT_RESET_TIMELOCK` time is passed second `setAuthPubkeyHash` transaction will reset pubkey hash for `_nonce`.\\n    /// @param _pubkey_hash New pubkey hash\\n    /// @param _nonce Nonce of the change pubkey L2 transaction\\n    function setAuthPubkeyHash(bytes calldata _pubkey_hash, uint32 _nonce) external {\\n        require(_pubkey_hash.length == PUBKEY_HASH_BYTES, \\\"y\\\"); // PubKeyHash should be 20 bytes.\\n        if (authFacts[msg.sender][_nonce] == bytes32(0)) {\\n            authFacts[msg.sender][_nonce] = keccak256(_pubkey_hash);\\n        } else {\\n            uint256 currentResetTimer = authFactsResetTimer[msg.sender][_nonce];\\n            if (currentResetTimer == 0) {\\n                authFactsResetTimer[msg.sender][_nonce] = block.timestamp;\\n            } else {\\n                require(block.timestamp.sub(currentResetTimer) >= AUTH_FACT_RESET_TIMELOCK, \\\"z\\\");\\n                authFactsResetTimer[msg.sender][_nonce] = 0;\\n                authFacts[msg.sender][_nonce] = keccak256(_pubkey_hash);\\n            }\\n        }\\n    }\\n\\n    /// @notice Register deposit request - pack pubdata, add priority request and emit OnchainDeposit event\\n    /// @param _tokenId Token by id\\n    /// @param _amount Token amount\\n    /// @param _owner Receiver\\n    function registerDeposit(\\n        uint16 _tokenId,\\n        uint128 _amount,\\n        address _owner\\n    ) internal {\\n        // Priority Queue request\\n        Operations.Deposit memory op =\\n            Operations.Deposit({\\n                accountId: 0, // unknown at this point\\n                owner: _owner,\\n                tokenId: _tokenId,\\n                amount: _amount\\n            });\\n        bytes memory pubData = Operations.writeDepositPubdataForPriorityQueue(op);\\n        addPriorityRequest(Operations.OpType.Deposit, pubData);\\n        emit Deposit(_tokenId, _amount);\\n    }\\n\\n    /// @notice Register withdrawal - update user balance and emit OnchainWithdrawal event\\n    /// @param _token - token by id\\n    /// @param _amount - token amount\\n    /// @param _to - address to withdraw to\\n    function registerWithdrawal(\\n        uint16 _token,\\n        uint128 _amount,\\n        address payable _to\\n    ) internal {\\n        bytes22 packedBalanceKey = packAddressAndTokenId(_to, _token);\\n        uint128 balance = pendingBalances[packedBalanceKey].balanceToWithdraw;\\n        pendingBalances[packedBalanceKey].balanceToWithdraw = balance.sub(_amount);\\n        emit Withdrawal(_token, _amount);\\n    }\\n\\n    /// @dev Gets operations packed in bytes array. Unpacks it and stores onchain operations.\\n    /// @dev Priority operations must be committed in the same order as they are in the priority queue.\\n    /// @dev NOTE: does not change storage! (only emits events)\\n    /// @dev processableOperationsHash - hash of the all operations that needs to be executed  (Deposit, Exits, ChangPubKey)\\n    /// @dev priorityOperationsProcessed - number of priority operations processed in this block (Deposits, FullExits)\\n    /// @dev offsetsCommitment - array where 1 is stored in chunk where onchainOperation begins and other are 0 (used in commitments)\\n    function collectOnchainOps(CommitBlockInfo memory _newBlockData)\\n        internal\\n        view\\n        returns (\\n            bytes32 processableOperationsHash,\\n            uint64 priorityOperationsProcessed,\\n            bytes memory offsetsCommitment\\n        )\\n    {\\n        bytes memory pubData = _newBlockData.publicData;\\n\\n        uint64 uncommittedPriorityRequestsOffset = firstPriorityRequestId + totalCommittedPriorityRequests;\\n        priorityOperationsProcessed = 0;\\n        processableOperationsHash = EMPTY_STRING_KECCAK;\\n\\n        require(pubData.length % CHUNK_BYTES == 0, \\\"A\\\"); // pubdata length must be a multiple of CHUNK_BYTES\\n        offsetsCommitment = new bytes(pubData.length / CHUNK_BYTES);\\n        for (uint256 i = 0; i < _newBlockData.onchainOperations.length; ++i) {\\n            OnchainOperationData memory onchainOpData = _newBlockData.onchainOperations[i];\\n\\n            uint256 pubdataOffset = onchainOpData.publicDataOffset;\\n            require(pubdataOffset < pubData.length, \\\"A1\\\");\\n            require(pubdataOffset % CHUNK_BYTES == 0, \\\"B\\\"); // offsets should be on chunks boundaries\\n            uint256 chunkId = pubdataOffset / CHUNK_BYTES;\\n            require(offsetsCommitment[chunkId] == 0x00, \\\"C\\\"); // offset commitment should be empty\\n            offsetsCommitment[chunkId] = bytes1(0x01);\\n\\n            Operations.OpType opType = Operations.OpType(uint8(pubData[pubdataOffset]));\\n\\n            if (opType == Operations.OpType.Deposit) {\\n                bytes memory opPubData = Bytes.slice(pubData, pubdataOffset, DEPOSIT_BYTES);\\n\\n                Operations.Deposit memory depositData = Operations.readDepositPubdata(opPubData);\\n\\n                checkPriorityOperation(depositData, uncommittedPriorityRequestsOffset + priorityOperationsProcessed);\\n                priorityOperationsProcessed++;\\n            } else if (opType == Operations.OpType.ChangePubKey) {\\n                bytes memory opPubData = Bytes.slice(pubData, pubdataOffset, CHANGE_PUBKEY_BYTES);\\n\\n                Operations.ChangePubKey memory op = Operations.readChangePubKeyPubdata(opPubData);\\n\\n                if (onchainOpData.ethWitness.length != 0) {\\n                    bool valid = verifyChangePubkey(onchainOpData.ethWitness, op);\\n                    require(valid, \\\"D\\\"); // failed to verify change pubkey hash signature\\n                } else {\\n                    bool valid = authFacts[op.owner][op.nonce] == keccak256(abi.encodePacked(op.pubKeyHash));\\n                    require(valid, \\\"E\\\"); // new pub key hash is not authenticated properly\\n                }\\n            } else {\\n                bytes memory opPubData;\\n\\n                if (opType == Operations.OpType.PartialExit) {\\n                    opPubData = Bytes.slice(pubData, pubdataOffset, PARTIAL_EXIT_BYTES);\\n                } else if (opType == Operations.OpType.ForcedExit) {\\n                    opPubData = Bytes.slice(pubData, pubdataOffset, FORCED_EXIT_BYTES);\\n                } else if (opType == Operations.OpType.FullExit) {\\n                    opPubData = Bytes.slice(pubData, pubdataOffset, FULL_EXIT_BYTES);\\n\\n                    Operations.FullExit memory fullExitData = Operations.readFullExitPubdata(opPubData);\\n\\n                    checkPriorityOperation(\\n                        fullExitData,\\n                        uncommittedPriorityRequestsOffset + priorityOperationsProcessed\\n                    );\\n                    priorityOperationsProcessed++;\\n                } else {\\n                    revert(\\\"F\\\"); // unsupported op\\n                }\\n\\n                processableOperationsHash = Utils.concatHash(processableOperationsHash, opPubData);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks that change operation is correct\\n    function verifyChangePubkey(bytes memory _ethWitness, Operations.ChangePubKey memory _changePk)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        Operations.ChangePubkeyType changePkType = Operations.ChangePubkeyType(uint8(_ethWitness[0]));\\n        if (changePkType == Operations.ChangePubkeyType.ECRECOVER) {\\n            return verifyChangePubkeyECRECOVER(_ethWitness, _changePk);\\n        } else if (changePkType == Operations.ChangePubkeyType.CREATE2) {\\n            return verifyChangePubkeyCREATE2(_ethWitness, _changePk);\\n        } else if (changePkType == Operations.ChangePubkeyType.OldECRECOVER) {\\n            return verifyChangePubkeyOldECRECOVER(_ethWitness, _changePk);\\n        } else {\\n            revert(\\\"G\\\"); // Incorrect ChangePubKey type\\n        }\\n    }\\n\\n    /// @notice Checks that signature is valid for pubkey change message\\n    /// @param _ethWitness Signature (65 bytes) + 32 bytes of the arbitrary signed data\\n    /// @param _changePk Parsed change pubkey operation\\n    function verifyChangePubkeyECRECOVER(bytes memory _ethWitness, Operations.ChangePubKey memory _changePk)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (, bytes memory signature) = Bytes.read(_ethWitness, 1, 65); // offset is 1 because we skip type of ChangePubkey\\n        //        (, bytes32 additionalData) = Bytes.readBytes32(_ethWitness, offset);\\n        bytes32 messageHash =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n60\\\",\\n                    _changePk.pubKeyHash,\\n                    _changePk.nonce,\\n                    _changePk.accountId,\\n                    bytes32(0)\\n                )\\n            );\\n        address recoveredAddress = Utils.recoverAddressFromEthSignature(signature, messageHash);\\n        return recoveredAddress == _changePk.owner && recoveredAddress != address(0);\\n    }\\n\\n    /// @notice Checks that signature is valid for pubkey change message, old version differs by form of the signed message.\\n    /// @param _ethWitness Signature (65 bytes)\\n    /// @param _changePk Parsed change pubkey operation\\n    function verifyChangePubkeyOldECRECOVER(bytes memory _ethWitness, Operations.ChangePubKey memory _changePk)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        (, bytes memory signature) = Bytes.read(_ethWitness, 1, 65); // offset is 1 because we skip type of ChangePubkey\\n        bytes32 messageHash =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n152\\\",\\n                    \\\"Register zkSync pubkey:\\\\n\\\\n\\\",\\n                    Bytes.bytesToHexASCIIBytes(abi.encodePacked(_changePk.pubKeyHash)),\\n                    \\\"\\\\n\\\",\\n                    \\\"nonce: 0x\\\",\\n                    Bytes.bytesToHexASCIIBytes(Bytes.toBytesFromUInt32(_changePk.nonce)),\\n                    \\\"\\\\n\\\",\\n                    \\\"account id: 0x\\\",\\n                    Bytes.bytesToHexASCIIBytes(Bytes.toBytesFromUInt32(_changePk.accountId)),\\n                    \\\"\\\\n\\\\n\\\",\\n                    \\\"Only sign this message for a trusted client!\\\"\\n                )\\n            );\\n        address recoveredAddress = Utils.recoverAddressFromEthSignature(signature, messageHash);\\n        return recoveredAddress == _changePk.owner && recoveredAddress != address(0);\\n    }\\n\\n    /// @notice Checks that signature is valid for pubkey change message\\n    /// @param _ethWitness Create2 deployer address, saltArg, codeHash\\n    /// @param _changePk Parsed change pubkey operation\\n    function verifyChangePubkeyCREATE2(bytes memory _ethWitness, Operations.ChangePubKey memory _changePk)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        address creatorAddress;\\n        bytes32 saltArg; // salt arg is additional bytes that are encoded in the CREATE2 salt\\n        bytes32 codeHash;\\n        uint256 offset = 1; // offset is 1 because we skip type of ChangePubkey\\n        (offset, creatorAddress) = Bytes.readAddress(_ethWitness, offset);\\n        (offset, saltArg) = Bytes.readBytes32(_ethWitness, offset);\\n        (offset, codeHash) = Bytes.readBytes32(_ethWitness, offset);\\n        // salt from CREATE2 specification\\n        bytes32 salt = keccak256(abi.encodePacked(saltArg, _changePk.pubKeyHash));\\n        // Address computation according to CREATE2 definition: https://eips.ethereum.org/EIPS/eip-1014\\n        address recoveredAddress =\\n            address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), creatorAddress, salt, codeHash)))));\\n        // This type of change pubkey can be done only once\\n        return recoveredAddress == _changePk.owner && _changePk.nonce == 0;\\n    }\\n\\n    /// @dev Creates block commitment from its data\\n    /// @dev _offsetCommitment - hash of the array where 1 is stored in chunk where onchainOperation begins and 0 for other chunks\\n    function createBlockCommitment(\\n        StoredBlockInfo memory _previousBlock,\\n        CommitBlockInfo memory _newBlockData,\\n        bytes memory _offsetCommitment\\n    ) internal view returns (bytes32 commitment) {\\n        bytes32 hash = sha256(abi.encodePacked(uint256(_newBlockData.blockNumber), uint256(_newBlockData.feeAccount)));\\n        hash = sha256(abi.encodePacked(hash, _previousBlock.stateHash));\\n        hash = sha256(abi.encodePacked(hash, _newBlockData.newStateHash));\\n        hash = sha256(abi.encodePacked(hash, uint256(_newBlockData.timestamp)));\\n\\n        bytes memory pubdata = abi.encodePacked(_newBlockData.publicData, _offsetCommitment);\\n\\n        /// The code below is equivalent to `commitment = sha256(abi.encodePacked(hash, _publicData))`\\n\\n        /// We use inline assembly instead of this concise and readable code in order to avoid copying of `_publicData` (which saves ~90 gas per transfer operation).\\n\\n        /// Specifically, we perform the following trick:\\n        /// First, replace the first 32 bytes of `_publicData` (where normally its length is stored) with the value of `hash`.\\n        /// Then, we call `sha256` precompile passing the `_publicData` pointer and the length of the concatenated byte buffer.\\n        /// Finally, we put the `_publicData.length` back to its original location (to the first word of `_publicData`).\\n        assembly {\\n            let hashResult := mload(0x40)\\n            let pubDataLen := mload(pubdata)\\n            mstore(pubdata, hash)\\n            // staticcall to the sha256 precompile at address 0x2\\n            let success := staticcall(gas(), 0x2, pubdata, add(pubDataLen, 0x20), hashResult, 0x20)\\n            mstore(pubdata, pubDataLen)\\n\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n                case 0 {\\n                    invalid()\\n                }\\n\\n            commitment := mload(hashResult)\\n        }\\n    }\\n\\n    /// @notice Checks that deposit is same as operation in priority queue\\n    /// @param _deposit Deposit data\\n    /// @param _priorityRequestId Operation's id in priority queue\\n    function checkPriorityOperation(Operations.Deposit memory _deposit, uint64 _priorityRequestId) internal view {\\n        Operations.OpType priorReqType = priorityRequests[_priorityRequestId].opType;\\n        require(priorReqType == Operations.OpType.Deposit, \\\"H\\\"); // incorrect priority op type\\n\\n        bytes20 hashedPubdata = priorityRequests[_priorityRequestId].hashedPubData;\\n        require(Operations.checkDepositInPriorityQueue(_deposit, hashedPubdata), \\\"I\\\");\\n    }\\n\\n    /// @notice Checks that FullExit is same as operation in priority queue\\n    /// @param _fullExit FullExit data\\n    /// @param _priorityRequestId Operation's id in priority queue\\n    function checkPriorityOperation(Operations.FullExit memory _fullExit, uint64 _priorityRequestId) internal view {\\n        Operations.OpType priorReqType = priorityRequests[_priorityRequestId].opType;\\n        require(priorReqType == Operations.OpType.FullExit, \\\"J\\\"); // incorrect priority op type\\n\\n        bytes20 hashedPubdata = priorityRequests[_priorityRequestId].hashedPubData;\\n        require(Operations.checkFullExitInPriorityQueue(_fullExit, hashedPubdata), \\\"K\\\");\\n    }\\n\\n    /// @notice Checks that current state not is exodus mode\\n    function requireActive() internal view {\\n        require(!exodusMode, \\\"L\\\"); // exodus mode activated\\n    }\\n\\n    // Priority queue\\n\\n    /// @notice Saves priority request in storage\\n    /// @dev Calculates expiration block for request, store this request and emit NewPriorityRequest event\\n    /// @param _opType Rollup operation type\\n    /// @param _pubData Operation pubdata\\n    function addPriorityRequest(Operations.OpType _opType, bytes memory _pubData) internal {\\n        // Expiration block is: current block number + priority expiration delta\\n        uint64 expirationBlock = uint64(block.number + PRIORITY_EXPIRATION);\\n\\n        uint64 nextPriorityRequestId = firstPriorityRequestId + totalOpenPriorityRequests;\\n\\n        bytes20 hashedPubData = Utils.hashBytesToBytes20(_pubData);\\n\\n        priorityRequests[nextPriorityRequestId] = PriorityOperation({\\n            hashedPubData: hashedPubData,\\n            expirationBlock: expirationBlock,\\n            opType: _opType\\n        });\\n\\n        emit NewPriorityRequest(msg.sender, nextPriorityRequestId, _opType, _pubData, uint256(expirationBlock));\\n\\n        totalOpenPriorityRequests++;\\n    }\\n\\n    /// @notice Deletes processed priority requests\\n    /// @param _number The number of requests\\n    function deleteRequests(uint64 _number) internal {\\n        require(_number <= totalOpenPriorityRequests, \\\"M\\\"); // number is higher than total priority requests number\\n\\n        uint64 numberOfRequestsToClear = Utils.minU64(_number, MAX_PRIORITY_REQUESTS_TO_DELETE_IN_VERIFY);\\n        uint64 startIndex = firstPriorityRequestId;\\n        for (uint64 i = startIndex; i < startIndex + numberOfRequestsToClear; i++) {\\n            delete priorityRequests[i];\\n        }\\n\\n        totalOpenPriorityRequests -= _number;\\n        firstPriorityRequestId += _number;\\n        totalCommittedPriorityRequests -= _number;\\n    }\\n\\n    function increaseBalanceToWithdraw(bytes22 _packedBalanceKey, uint128 _amount) internal {\\n        uint128 balance = pendingBalances[_packedBalanceKey].balanceToWithdraw;\\n        pendingBalances[_packedBalanceKey] = PendingBalance(balance.add(_amount), FILLED_GAS_RESERVE_VALUE);\\n    }\\n\\n    /// @notice Sends ETH\\n    /// @param _to Address of recipient\\n    /// @param _amount Amount of tokens to transfer\\n    /// @return bool flag indicating that transfer is successful\\n    function sendETHNoRevert(address payable _to, uint256 _amount) internal returns (bool) {\\n        (bool callSuccess, ) = _to.call{gas: WITHDRAWAL_GAS_LIMIT, value: _amount}(\\\"\\\");\\n        return callSuccess;\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    /// @dev Address of lock flag variable.\\n    /// @dev Flag is placed at random memory location to not interfere with Storage contract.\\n    uint256 private constant LOCK_FLAG_ADDRESS = 0x8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4; // keccak256(\\\"ReentrancyGuard\\\") - 1;\\n\\n    function initializeReentrancyGuard() internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        assembly {\\n            sstore(LOCK_FLAG_ADDRESS, 1)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bool notEntered;\\n        assembly {\\n            notEntered := sload(LOCK_FLAG_ADDRESS)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(notEntered, \\\"1b\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(LOCK_FLAG_ADDRESS, 0)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(LOCK_FLAG_ADDRESS, 1)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"14\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"v\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"15\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"x\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"y\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/SafeMathUInt128.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUInt128 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"12\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return sub(a, b, \\\"aa\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b <= a, errorMessage);\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint128 c = a * b;\\n        require(c / a == b, \\\"13\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return div(a, b, \\\"ac\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint128 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return mod(a, b, \\\"ad\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/SafeCast.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and then downcasting.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"16\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"17\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"18\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"19\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"1a\\\");\\n        return uint8(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Utils.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Bytes.sol\\\";\\n\\nlibrary Utils {\\n    /// @notice Returns lesser of two values\\n    function minU32(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice Returns lesser of two values\\n    function minU64(uint64 a, uint64 b) internal pure returns (uint64) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice Sends tokens\\n    /// @dev NOTE: this function handles tokens that have transfer function not strictly compatible with ERC20 standard\\n    /// @dev NOTE: call `transfer` to this token may return (bool) or nothing\\n    /// @param _token Token address\\n    /// @param _to Address of recipient\\n    /// @param _amount Amount of tokens to transfer\\n    /// @return bool flag indicating that transfer is successful\\n    function sendERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        (bool callSuccess, bytes memory callReturnValueEncoded) =\\n            address(_token).call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _amount));\\n        // `transfer` method may return (bool) or nothing.\\n        bool returnedSuccess = callReturnValueEncoded.length == 0 || abi.decode(callReturnValueEncoded, (bool));\\n        return callSuccess && returnedSuccess;\\n    }\\n\\n    /// @notice Transfers token from one address to another\\n    /// @dev NOTE: this function handles tokens that have transfer function not strictly compatible with ERC20 standard\\n    /// @dev NOTE: call `transferFrom` to this token may return (bool) or nothing\\n    /// @param _token Token address\\n    /// @param _from Address of sender\\n    /// @param _to Address of recipient\\n    /// @param _amount Amount of tokens to transfer\\n    /// @return bool flag indicating that transfer is successful\\n    function transferFromERC20(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        (bool callSuccess, bytes memory callReturnValueEncoded) =\\n            address(_token).call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from, _to, _amount));\\n        // `transferFrom` method may return (bool) or nothing.\\n        bool returnedSuccess = callReturnValueEncoded.length == 0 || abi.decode(callReturnValueEncoded, (bool));\\n        return callSuccess && returnedSuccess;\\n    }\\n\\n    /// @notice Recovers signer's address from ethereum signature for given message\\n    /// @param _signature 65 bytes concatenated. R (32) + S (32) + V (1)\\n    /// @param _messageHash signed message hash.\\n    /// @return address of the signer\\n    function recoverAddressFromEthSignature(bytes memory _signature, bytes32 _messageHash)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_signature.length == 65, \\\"P\\\"); // incorrect signature length\\n\\n        bytes32 signR;\\n        bytes32 signS;\\n        uint8 signV;\\n        assembly {\\n            signR := mload(add(_signature, 32))\\n            signS := mload(add(_signature, 64))\\n            signV := byte(0, mload(add(_signature, 96)))\\n        }\\n\\n        return ecrecover(_messageHash, signV, signR, signS);\\n    }\\n\\n    /// @notice Returns new_hash = hash(old_hash + bytes)\\n    function concatHash(bytes32 _hash, bytes memory _bytes) internal pure returns (bytes32) {\\n        bytes32 result;\\n        assembly {\\n            let bytesLen := add(mload(_bytes), 32)\\n            mstore(_bytes, _hash)\\n            result := keccak256(_bytes, bytesLen)\\n        }\\n        return result;\\n    }\\n\\n    function hashBytesToBytes20(bytes memory _bytes) internal pure returns (bytes20) {\\n        return bytes20(uint160(uint256(keccak256(_bytes))));\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Storage.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"./Verifier.sol\\\";\\nimport \\\"./Operations.sol\\\";\\n\\n/// @title zkSync storage contract\\n/// @author Matter Labs\\ncontract Storage {\\n    /// @dev Flag indicates that upgrade preparation status is active\\n    /// @dev Will store false in case of not active upgrade mode\\n    bool internal upgradePreparationActive;\\n\\n    /// @dev Upgrade preparation activation timestamp (as seconds since unix epoch)\\n    /// @dev Will be equal to zero in case of not active upgrade mode\\n    uint256 internal upgradePreparationActivationTime;\\n\\n    /// @dev Verifier contract. Used to verify block proof and exit proof\\n    Verifier public verifier;\\n\\n    /// @dev Governance contract. Contains the governor (the owner) of whole system, validators list, possible tokens list\\n    Governance public governance;\\n\\n    uint8 internal constant FILLED_GAS_RESERVE_VALUE = 0xff; // we use it to set gas revert value so slot will not be emptied with 0 balance\\n    struct PendingBalance {\\n        uint128 balanceToWithdraw;\\n        uint8 gasReserveValue; // gives user opportunity to fill storage slot with nonzero value\\n    }\\n\\n    /// @dev Root-chain balances (per owner and token id, see packAddressAndTokenId) to withdraw\\n    mapping(bytes22 => PendingBalance) internal pendingBalances;\\n\\n    // @dev Pending withdrawals are not used in this version\\n    struct PendingWithdrawal_DEPRECATED {\\n        address to;\\n        uint16 tokenId;\\n    }\\n    mapping(uint32 => PendingWithdrawal_DEPRECATED) internal pendingWithdrawals_DEPRECATED;\\n    uint32 internal firstPendingWithdrawalIndex_DEPRECATED;\\n    uint32 internal numberOfPendingWithdrawals_DEPRECATED;\\n\\n    /// @notice Total number of executed blocks i.e. blocks[totalBlocksExecuted] points at the latest executed block (block 0 is genesis)\\n    uint32 public totalBlocksExecuted;\\n\\n    /// @notice Total number of committed blocks i.e. blocks[totalBlocksCommitted] points at the latest committed block\\n    uint32 public totalBlocksCommitted;\\n\\n    /// @Old rollup block stored data - not used in current version\\n    /// @member validator Block producer\\n    /// @member committedAtBlock ETH block number at which this block was committed\\n    /// @member cumulativeOnchainOperations Total number of operations in this and all previous blocks\\n    /// @member priorityOperations Total number of priority operations for this block\\n    /// @member commitment Hash of the block circuit commitment\\n    /// @member stateRoot New tree root hash\\n    ///\\n    /// Consider memory alignment when changing field order: https://solidity.readthedocs.io/en/v0.4.21/miscellaneous.html\\n    struct Block_DEPRECATED {\\n        uint32 committedAtBlock;\\n        uint64 priorityOperations;\\n        uint32 chunks;\\n        bytes32 withdrawalsDataHash; // can be restricted to 16 bytes to reduce number of required storage slots\\n        bytes32 commitment;\\n        bytes32 stateRoot;\\n    }\\n    mapping(uint32 => Block_DEPRECATED) internal blocks_DEPRECATED;\\n\\n    /// @notice Flag indicates that a user has exited in the exodus mode certain token balance (per account id and tokenId)\\n    mapping(uint32 => mapping(uint16 => bool)) public performedExodus;\\n\\n    /// @notice Flag indicates that exodus (mass exit) mode is triggered\\n    /// @notice Once it was raised, it can not be cleared again, and all users must exit\\n    bool public exodusMode;\\n\\n    /// @notice User authenticated fact hashes for some nonce.\\n    mapping(address => mapping(uint32 => bytes32)) public authFacts;\\n\\n    /// @notice Old Priority Operation container\\n    /// @member opType Priority operation type\\n    /// @member pubData Priority operation public data\\n    /// @member expirationBlock Expiration block number (ETH block) for this request (must be satisfied before)\\n    struct PriorityOperation_DEPRECATED {\\n        Operations.OpType opType;\\n        bytes pubData;\\n        uint256 expirationBlock;\\n    }\\n\\n    /// @dev Priority Requests mapping (request id - operation)\\n    /// @dev Contains op type, pubdata and expiration block of unsatisfied requests.\\n    /// @dev Numbers are in order of requests receiving\\n    mapping(uint64 => PriorityOperation_DEPRECATED) internal priorityRequests_DEPRECATED;\\n\\n    /// @notice First open priority request id\\n    uint64 public firstPriorityRequestId;\\n\\n    /// @notice Total number of requests\\n    uint64 public totalOpenPriorityRequests;\\n\\n    /// @notice Total number of committed requests.\\n    /// @dev Used in checks: if the request matches the operation on Rollup contract and if provided number of requests is not too big\\n    uint64 public totalCommittedPriorityRequests;\\n\\n    /// @notice Packs address and token id into single word to use as a key in balances mapping\\n    function packAddressAndTokenId(address _address, uint16 _tokenId) internal pure returns (bytes22) {\\n        return bytes22((uint176(_address) | (uint176(_tokenId) << 160)));\\n    }\\n\\n    /// @Rollup block stored data\\n    /// @member blockNumber Rollup block number\\n    /// @member priorityOperations Number of priority operations processed\\n    /// @member pendingOnchainOperationsHash Hash of all operations that must be processed after verify\\n    /// @member timestamp Rollup block timestamp, have the same format as Ethereum block constant\\n    /// @member stateHash Root hash of the rollup state\\n    /// @member commitment Verified input for the zkSync circuit\\n    struct StoredBlockInfo {\\n        uint32 blockNumber;\\n        uint64 priorityOperations;\\n        bytes32 pendingOnchainOperationsHash;\\n        uint256 timestamp;\\n        bytes32 stateHash;\\n        bytes32 commitment;\\n    }\\n\\n    /// @notice Returns the keccak hash of the ABI-encoded StoredBlockInfo\\n    function hashStoredBlockInfo(StoredBlockInfo memory _storedBlockInfo) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_storedBlockInfo));\\n    }\\n\\n    /// @dev Stored hashed StoredBlockInfo for some block number\\n    mapping(uint32 => bytes32) internal storedBlockHashes;\\n\\n    /// @notice Total blocks proven.\\n    uint32 public totalBlocksProven;\\n\\n    /// @notice Priority Operation container\\n    /// @member hashedPubData Hashed priority operation public data\\n    /// @member expirationBlock Expiration block number (ETH block) for this request (must be satisfied before)\\n    /// @member opType Priority operation type\\n    struct PriorityOperation {\\n        bytes20 hashedPubData;\\n        uint64 expirationBlock;\\n        Operations.OpType opType;\\n    }\\n\\n    /// @dev Priority Requests mapping (request id - operation)\\n    /// @dev Contains op type, pubdata and expiration block of unsatisfied requests.\\n    /// @dev Numbers are in order of requests receiving\\n    mapping(uint64 => PriorityOperation) internal priorityRequests;\\n\\n    /// @dev Timer for authFacts entry reset (address, nonce -> timer).\\n    /// @dev Used when user wants to reset `authFacts` for some nonce.\\n    mapping(address => mapping(uint32 => uint256)) internal authFactsResetTimer;\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Config.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/// @title zkSync configuration constants\\n/// @author Matter Labs\\ncontract Config {\\n    /// @dev ERC20 tokens and ETH withdrawals gas limit, used only for complete withdrawals\\n    uint256 constant WITHDRAWAL_GAS_LIMIT = 100000;\\n\\n    /// @dev Bytes in one chunk\\n    uint8 constant CHUNK_BYTES = 9;\\n\\n    /// @dev zkSync address length\\n    uint8 constant ADDRESS_BYTES = 20;\\n\\n    uint8 constant PUBKEY_HASH_BYTES = 20;\\n\\n    /// @dev Public key bytes length\\n    uint8 constant PUBKEY_BYTES = 32;\\n\\n    /// @dev Ethereum signature r/s bytes length\\n    uint8 constant ETH_SIGN_RS_BYTES = 32;\\n\\n    /// @dev Success flag bytes length\\n    uint8 constant SUCCESS_FLAG_BYTES = 1;\\n\\n    /// @dev Max amount of tokens registered in the network (excluding ETH, which is hardcoded as tokenId = 0)\\n    uint16 constant MAX_AMOUNT_OF_REGISTERED_TOKENS = 127;\\n\\n    /// @dev Max account id that could be registered in the network\\n    uint32 constant MAX_ACCOUNT_ID = (2**24) - 1;\\n\\n    /// @dev Expected average period of block creation\\n    uint256 constant BLOCK_PERIOD = 15 seconds;\\n\\n    /// @dev ETH blocks verification expectation\\n    /// @dev Blocks can be reverted if they are not verified for at least EXPECT_VERIFICATION_IN.\\n    /// @dev If set to 0 validator can revert blocks at any time.\\n    uint256 constant EXPECT_VERIFICATION_IN = 0 hours / BLOCK_PERIOD;\\n\\n    uint256 constant NOOP_BYTES = 1 * CHUNK_BYTES;\\n    uint256 constant DEPOSIT_BYTES = 6 * CHUNK_BYTES;\\n    uint256 constant TRANSFER_TO_NEW_BYTES = 6 * CHUNK_BYTES;\\n    uint256 constant PARTIAL_EXIT_BYTES = 6 * CHUNK_BYTES;\\n    uint256 constant TRANSFER_BYTES = 2 * CHUNK_BYTES;\\n    uint256 constant FORCED_EXIT_BYTES = 6 * CHUNK_BYTES;\\n\\n    /// @dev Full exit operation length\\n    uint256 constant FULL_EXIT_BYTES = 6 * CHUNK_BYTES;\\n\\n    /// @dev ChangePubKey operation length\\n    uint256 constant CHANGE_PUBKEY_BYTES = 6 * CHUNK_BYTES;\\n\\n    /// @dev Expiration delta for priority request to be satisfied (in seconds)\\n    /// @dev NOTE: Priority expiration should be > (EXPECT_VERIFICATION_IN * BLOCK_PERIOD)\\n    /// @dev otherwise incorrect block with priority op could not be reverted.\\n    uint256 constant PRIORITY_EXPIRATION_PERIOD = 3 days;\\n\\n    /// @dev Expiration delta for priority request to be satisfied (in ETH blocks)\\n    uint256 constant PRIORITY_EXPIRATION =\\n        PRIORITY_EXPIRATION_PERIOD/BLOCK_PERIOD;\\n\\n    /// @dev Maximum number of priority request to clear during verifying the block\\n    /// @dev Cause deleting storage slots cost 5k gas per each slot it's unprofitable to clear too many slots\\n    /// @dev Value based on the assumption of ~750k gas cost of verifying and 5 used storage slots per PriorityOperation structure\\n    uint64 constant MAX_PRIORITY_REQUESTS_TO_DELETE_IN_VERIFY = 6;\\n\\n    /// @dev Reserved time for users to send full exit priority operation in case of an upgrade (in seconds)\\n    uint256 constant MASS_FULL_EXIT_PERIOD = 9 days;\\n\\n    /// @dev Reserved time for users to withdraw funds from full exit priority operation in case of an upgrade (in seconds)\\n    uint256 constant TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT = 2 days;\\n\\n    /// @dev Notice period before activation preparation status of upgrade mode (in seconds)\\n    /// @dev NOTE: we must reserve for users enough time to send full exit operation, wait maximum time for processing this operation and withdraw funds from it.\\n    uint256 constant UPGRADE_NOTICE_PERIOD =\\n        MASS_FULL_EXIT_PERIOD+PRIORITY_EXPIRATION_PERIOD+TIME_TO_WITHDRAW_FUNDS_FROM_FULL_EXIT;\\n\\n    /// @dev Timestamp - seconds since unix epoch\\n    uint256 constant COMMIT_TIMESTAMP_NOT_OLDER = 24 hours;\\n\\n    /// @dev Maximum available error between real commit block timestamp and analog used in the verifier (in seconds)\\n    /// @dev Must be used cause miner's `block.timestamp` value can differ on some small value (as we know - 15 seconds)\\n    uint256 constant COMMIT_TIMESTAMP_APPROXIMATION_DELTA = 15 minutes;\\n\\n    /// @dev Bit mask to apply for verifier public input before verifying.\\n    uint256 constant INPUT_MASK = 14474011154664524427946373126085988481658748083205070504932198000989141204991;\\n\\n    /// @dev Auth fact reset timelock\\n    uint256 constant AUTH_FACT_RESET_TIMELOCK = 1 days;\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\nimport \\\"./Upgradeable.sol\\\";\\nimport \\\"./Operations.sol\\\";\\n\\n/// @title zkSync events\\n/// @author Matter Labs\\ninterface Events {\\n    /// @notice Event emitted when a block is committed\\n    event BlockCommit(uint32 indexed blockNumber);\\n\\n    /// @notice Event emitted when a block is verified\\n    event BlockVerification(uint32 indexed blockNumber);\\n\\n    /// @notice Event emitted when user funds are withdrawn from the zkSync contract\\n    event Withdrawal(uint16 indexed tokenId, uint128 amount);\\n\\n    /// @notice Event emitted when user funds are deposited to the zkSync contract\\n    event Deposit(uint16 indexed tokenId, uint128 amount);\\n\\n    /// @notice Event emitted when user sends a authentication fact (e.g. pub-key hash)\\n    event FactAuth(address indexed sender, uint32 nonce, bytes fact);\\n\\n    /// @notice Event emitted when blocks are reverted\\n    event BlocksRevert(uint32 totalBlocksVerified, uint32 totalBlocksCommitted);\\n\\n    /// @notice Exodus mode entered event\\n    event ExodusMode();\\n\\n    /// @notice New priority request event. Emitted when a request is placed into mapping\\n    event NewPriorityRequest(\\n        address sender,\\n        uint64 serialId,\\n        Operations.OpType opType,\\n        bytes pubData,\\n        uint256 expirationBlock\\n    );\\n\\n    /// @notice Deposit committed event.\\n    event DepositCommit(\\n        uint32 indexed zkSyncBlockId,\\n        uint32 indexed accountId,\\n        address owner,\\n        uint16 indexed tokenId,\\n        uint128 amount\\n    );\\n\\n    /// @notice Full exit committed event.\\n    event FullExitCommit(\\n        uint32 indexed zkSyncBlockId,\\n        uint32 indexed accountId,\\n        address owner,\\n        uint16 indexed tokenId,\\n        uint128 amount\\n    );\\n}\\n\\n/// @title Upgrade events\\n/// @author Matter Labs\\ninterface UpgradeEvents {\\n    /// @notice Event emitted when new upgradeable contract is added to upgrade gatekeeper's list of managed contracts\\n    event NewUpgradable(uint256 indexed versionId, address indexed upgradeable);\\n\\n    /// @notice Upgrade mode enter event\\n    event NoticePeriodStart(\\n        uint256 indexed versionId,\\n        address[] newTargets,\\n        uint256 noticePeriod // notice period (in seconds)\\n    );\\n\\n    /// @notice Upgrade mode cancel event\\n    event UpgradeCancel(uint256 indexed versionId);\\n\\n    /// @notice Upgrade mode preparation status event\\n    event PreparationStart(uint256 indexed versionId);\\n\\n    /// @notice Upgrade mode complete event\\n    event UpgradeComplete(uint256 indexed versionId, address[] newTargets);\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Bytes.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n// Functions named bytesToX, except bytesToBytes20, where X is some type of size N < 32 (size of one word)\\n// implements the following algorithm:\\n// f(bytes memory input, uint offset) -> X out\\n// where byte representation of out is N bytes from input at the given offset\\n// 1) We compute memory location of the word W such that last N bytes of W is input[offset..offset+N]\\n// W_address = input + 32 (skip stored length of bytes) + offset - (32 - N) == input + offset + N\\n// 2) We load W from memory into out, last N bytes of W are placed into out\\n\\nlibrary Bytes {\\n    function toBytesFromUInt16(uint16 self) internal pure returns (bytes memory _bts) {\\n        return toBytesFromUIntTruncated(uint256(self), 2);\\n    }\\n\\n    function toBytesFromUInt24(uint24 self) internal pure returns (bytes memory _bts) {\\n        return toBytesFromUIntTruncated(uint256(self), 3);\\n    }\\n\\n    function toBytesFromUInt32(uint32 self) internal pure returns (bytes memory _bts) {\\n        return toBytesFromUIntTruncated(uint256(self), 4);\\n    }\\n\\n    function toBytesFromUInt128(uint128 self) internal pure returns (bytes memory _bts) {\\n        return toBytesFromUIntTruncated(uint256(self), 16);\\n    }\\n\\n    // Copies 'len' lower bytes from 'self' into a new 'bytes memory'.\\n    // Returns the newly created 'bytes memory'. The returned bytes will be of length 'len'.\\n    function toBytesFromUIntTruncated(uint256 self, uint8 byteLength) private pure returns (bytes memory bts) {\\n        require(byteLength <= 32, \\\"Q\\\");\\n        bts = new bytes(byteLength);\\n        // Even though the bytes will allocate a full word, we don't want\\n        // any potential garbage bytes in there.\\n        uint256 data = self << ((32 - byteLength) * 8);\\n        assembly {\\n            mstore(\\n                add(bts, 32), // BYTES_HEADER_SIZE\\n                data\\n            )\\n        }\\n    }\\n\\n    // Copies 'self' into a new 'bytes memory'.\\n    // Returns the newly created 'bytes memory'. The returned bytes will be of length '20'.\\n    function toBytesFromAddress(address self) internal pure returns (bytes memory bts) {\\n        bts = toBytesFromUIntTruncated(uint256(self), 20);\\n    }\\n\\n    // See comment at the top of this file for explanation of how this function works.\\n    // NOTE: theoretically possible overflow of (_start + 20)\\n    function bytesToAddress(bytes memory self, uint256 _start) internal pure returns (address addr) {\\n        uint256 offset = _start + 20;\\n        require(self.length >= offset, \\\"R\\\");\\n        assembly {\\n            addr := mload(add(self, offset))\\n        }\\n    }\\n\\n    // Reasoning about why this function works is similar to that of other similar functions, except NOTE below.\\n    // NOTE: that bytes1..32 is stored in the beginning of the word unlike other primitive types\\n    // NOTE: theoretically possible overflow of (_start + 20)\\n    function bytesToBytes20(bytes memory self, uint256 _start) internal pure returns (bytes20 r) {\\n        require(self.length >= (_start + 20), \\\"S\\\");\\n        assembly {\\n            r := mload(add(add(self, 0x20), _start))\\n        }\\n    }\\n\\n    // See comment at the top of this file for explanation of how this function works.\\n    // NOTE: theoretically possible overflow of (_start + 0x2)\\n    function bytesToUInt16(bytes memory _bytes, uint256 _start) internal pure returns (uint16 r) {\\n        uint256 offset = _start + 0x2;\\n        require(_bytes.length >= offset, \\\"T\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // See comment at the top of this file for explanation of how this function works.\\n    // NOTE: theoretically possible overflow of (_start + 0x3)\\n    function bytesToUInt24(bytes memory _bytes, uint256 _start) internal pure returns (uint24 r) {\\n        uint256 offset = _start + 0x3;\\n        require(_bytes.length >= offset, \\\"U\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_start + 0x4)\\n    function bytesToUInt32(bytes memory _bytes, uint256 _start) internal pure returns (uint32 r) {\\n        uint256 offset = _start + 0x4;\\n        require(_bytes.length >= offset, \\\"V\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_start + 0x10)\\n    function bytesToUInt128(bytes memory _bytes, uint256 _start) internal pure returns (uint128 r) {\\n        uint256 offset = _start + 0x10;\\n        require(_bytes.length >= offset, \\\"W\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // See comment at the top of this file for explanation of how this function works.\\n    // NOTE: theoretically possible overflow of (_start + 0x14)\\n    function bytesToUInt160(bytes memory _bytes, uint256 _start) internal pure returns (uint160 r) {\\n        uint256 offset = _start + 0x14;\\n        require(_bytes.length >= offset, \\\"X\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_start + 0x20)\\n    function bytesToBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32 r) {\\n        uint256 offset = _start + 0x20;\\n        require(_bytes.length >= offset, \\\"Y\\\");\\n        assembly {\\n            r := mload(add(_bytes, offset))\\n        }\\n    }\\n\\n    // Original source code: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol#L228\\n    // Get slice from bytes arrays\\n    // Returns the newly created 'bytes memory'\\n    // NOTE: theoretically possible overflow of (_start + _length)\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_bytes.length >= (_start + _length), \\\"Z\\\"); // bytes length is less then start byte + length bytes\\n\\n        bytes memory tempBytes = new bytes(_length);\\n\\n        if (_length != 0) {\\n            assembly {\\n                let slice_curr := add(tempBytes, 0x20)\\n                let slice_end := add(slice_curr, _length)\\n\\n                for {\\n                    let array_current := add(_bytes, add(_start, 0x20))\\n                } lt(slice_curr, slice_end) {\\n                    slice_curr := add(slice_curr, 0x20)\\n                    array_current := add(array_current, 0x20)\\n                } {\\n                    mstore(slice_curr, mload(array_current))\\n                }\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    /// Reads byte stream\\n    /// @return new_offset - offset + amount of bytes read\\n    /// @return data - actually read data\\n    // NOTE: theoretically possible overflow of (_offset + _length)\\n    function read(\\n        bytes memory _data,\\n        uint256 _offset,\\n        uint256 _length\\n    ) internal pure returns (uint256 new_offset, bytes memory data) {\\n        data = slice(_data, _offset, _length);\\n        new_offset = _offset + _length;\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 1)\\n    function readBool(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, bool r) {\\n        new_offset = _offset + 1;\\n        r = uint8(_data[_offset]) != 0;\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 1)\\n    function readUint8(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint8 r) {\\n        new_offset = _offset + 1;\\n        r = uint8(_data[_offset]);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 2)\\n    function readUInt16(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint16 r) {\\n        new_offset = _offset + 2;\\n        r = bytesToUInt16(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 3)\\n    function readUInt24(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint24 r) {\\n        new_offset = _offset + 3;\\n        r = bytesToUInt24(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 4)\\n    function readUInt32(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint32 r) {\\n        new_offset = _offset + 4;\\n        r = bytesToUInt32(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 16)\\n    function readUInt128(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint128 r) {\\n        new_offset = _offset + 16;\\n        r = bytesToUInt128(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 20)\\n    function readUInt160(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, uint160 r) {\\n        new_offset = _offset + 20;\\n        r = bytesToUInt160(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 20)\\n    function readAddress(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, address r) {\\n        new_offset = _offset + 20;\\n        r = bytesToAddress(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 20)\\n    function readBytes20(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, bytes20 r) {\\n        new_offset = _offset + 20;\\n        r = bytesToBytes20(_data, _offset);\\n    }\\n\\n    // NOTE: theoretically possible overflow of (_offset + 32)\\n    function readBytes32(bytes memory _data, uint256 _offset) internal pure returns (uint256 new_offset, bytes32 r) {\\n        new_offset = _offset + 32;\\n        r = bytesToBytes32(_data, _offset);\\n    }\\n\\n    /// Trim bytes into single word\\n    function trim(bytes memory _data, uint256 _new_length) internal pure returns (uint256 r) {\\n        require(_new_length <= 0x20, \\\"10\\\"); // new_length is longer than word\\n        require(_data.length >= _new_length, \\\"11\\\"); // data is to short\\n\\n        uint256 a;\\n        assembly {\\n            a := mload(add(_data, 0x20)) // load bytes into uint256\\n        }\\n\\n        return a >> ((0x20 - _new_length) * 8);\\n    }\\n\\n    // Helper function for hex conversion.\\n    function halfByteToHex(bytes1 _byte) internal pure returns (bytes1 _hexByte) {\\n        require(uint8(_byte) < 0x10, \\\"hbh11\\\"); // half byte's value is out of 0..15 range.\\n\\n        // \\\"FEDCBA9876543210\\\" ASCII-encoded, shifted and automatically truncated.\\n        return bytes1(uint8(0x66656463626139383736353433323130 >> (uint8(_byte) * 8)));\\n    }\\n\\n    // Convert bytes to ASCII hex representation\\n    function bytesToHexASCIIBytes(bytes memory _input) internal pure returns (bytes memory _output) {\\n        bytes memory outStringBytes = new bytes(_input.length * 2);\\n\\n        // code in `assembly` construction is equivalent of the next code:\\n        // for (uint i = 0; i < _input.length; ++i) {\\n        //     outStringBytes[i*2] = halfByteToHex(_input[i] >> 4);\\n        //     outStringBytes[i*2+1] = halfByteToHex(_input[i] & 0x0f);\\n        // }\\n        assembly {\\n            let input_curr := add(_input, 0x20)\\n            let input_end := add(input_curr, mload(_input))\\n\\n            for {\\n                let out_curr := add(outStringBytes, 0x20)\\n            } lt(input_curr, input_end) {\\n                input_curr := add(input_curr, 0x01)\\n                out_curr := add(out_curr, 0x02)\\n            } {\\n                let curr_input_byte := shr(0xf8, mload(input_curr))\\n                // here outStringByte from each half of input byte calculates by the next:\\n                //\\n                // \\\"FEDCBA9876543210\\\" ASCII-encoded, shifted and automatically truncated.\\n                // outStringByte = byte (uint8 (0x66656463626139383736353433323130 >> (uint8 (_byteHalf) * 8)))\\n                mstore(\\n                    out_curr,\\n                    shl(0xf8, shr(mul(shr(0x04, curr_input_byte), 0x08), 0x66656463626139383736353433323130))\\n                )\\n                mstore(\\n                    add(out_curr, 0x01),\\n                    shl(0xf8, shr(mul(and(0x0f, curr_input_byte), 0x08), 0x66656463626139383736353433323130))\\n                )\\n            }\\n        }\\n        return outStringBytes;\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Operations.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\n\\nimport \\\"./Bytes.sol\\\";\\nimport \\\"./Utils.sol\\\";\\n\\n/// @title zkSync operations tools\\nlibrary Operations {\\n    // Circuit ops and their pubdata (chunks * bytes)\\n\\n    /// @notice zkSync circuit operation type\\n    enum OpType {\\n        Noop,\\n        Deposit,\\n        TransferToNew,\\n        PartialExit,\\n        _CloseAccount, // used for correct op id offset\\n        Transfer,\\n        FullExit,\\n        ChangePubKey,\\n        ForcedExit,\\n        TransferFrom\\n    }\\n\\n    // Byte lengths\\n\\n    uint8 constant OP_TYPE_BYTES = 1;\\n\\n    uint8 constant TOKEN_BYTES = 2;\\n\\n    uint8 constant PUBKEY_BYTES = 32;\\n\\n    uint8 constant NONCE_BYTES = 4;\\n\\n    uint8 constant PUBKEY_HASH_BYTES = 20;\\n\\n    uint8 constant ADDRESS_BYTES = 20;\\n\\n    /// @dev Packed fee bytes lengths\\n    uint8 constant FEE_BYTES = 2;\\n\\n    /// @dev zkSync account id bytes lengths\\n    uint8 constant ACCOUNT_ID_BYTES = 4;\\n\\n    uint8 constant AMOUNT_BYTES = 16;\\n\\n    /// @dev Signature (for example full exit signature) bytes length\\n    uint8 constant SIGNATURE_BYTES = 64;\\n\\n    // Deposit pubdata\\n    struct Deposit {\\n        // uint8 opType\\n        uint32 accountId;\\n        uint16 tokenId;\\n        uint128 amount;\\n        address owner;\\n    }\\n\\n    uint256 public constant PACKED_DEPOSIT_PUBDATA_BYTES =\\n        OP_TYPE_BYTES + ACCOUNT_ID_BYTES + TOKEN_BYTES + AMOUNT_BYTES + ADDRESS_BYTES;\\n\\n    /// Deserialize deposit pubdata\\n    function readDepositPubdata(bytes memory _data) internal pure returns (Deposit memory parsed) {\\n        // NOTE: there is no check that variable sizes are same as constants (i.e. TOKEN_BYTES), fix if possible.\\n        uint256 offset = OP_TYPE_BYTES;\\n        (offset, parsed.accountId) = Bytes.readUInt32(_data, offset); // accountId\\n        (offset, parsed.tokenId) = Bytes.readUInt16(_data, offset); // tokenId\\n        (offset, parsed.amount) = Bytes.readUInt128(_data, offset); // amount\\n        (offset, parsed.owner) = Bytes.readAddress(_data, offset); // owner\\n\\n        require(offset == PACKED_DEPOSIT_PUBDATA_BYTES, \\\"N\\\"); // reading invalid deposit pubdata size\\n    }\\n\\n    /// Serialize deposit pubdata\\n    function writeDepositPubdataForPriorityQueue(Deposit memory op) internal pure returns (bytes memory buf) {\\n        buf = abi.encodePacked(\\n            uint8(OpType.Deposit),\\n            bytes4(0), // accountId (ignored) (update when ACCOUNT_ID_BYTES is changed)\\n            op.tokenId, // tokenId\\n            op.amount, // amount\\n            op.owner // owner\\n        );\\n    }\\n\\n    /// @notice Write deposit pubdata for priority queue check.\\n    function checkDepositInPriorityQueue(Deposit memory op, bytes20 hashedPubdata) internal pure returns (bool) {\\n        return Utils.hashBytesToBytes20(writeDepositPubdataForPriorityQueue(op)) == hashedPubdata;\\n    }\\n\\n    // FullExit pubdata\\n\\n    struct FullExit {\\n        // uint8 opType\\n        uint32 accountId;\\n        address owner;\\n        uint16 tokenId;\\n        uint128 amount;\\n    }\\n\\n    uint256 public constant PACKED_FULL_EXIT_PUBDATA_BYTES =\\n        OP_TYPE_BYTES + ACCOUNT_ID_BYTES + ADDRESS_BYTES + TOKEN_BYTES + AMOUNT_BYTES;\\n\\n    function readFullExitPubdata(bytes memory _data) internal pure returns (FullExit memory parsed) {\\n        // NOTE: there is no check that variable sizes are same as constants (i.e. TOKEN_BYTES), fix if possible.\\n        uint256 offset = OP_TYPE_BYTES;\\n        (offset, parsed.accountId) = Bytes.readUInt32(_data, offset); // accountId\\n        (offset, parsed.owner) = Bytes.readAddress(_data, offset); // owner\\n        (offset, parsed.tokenId) = Bytes.readUInt16(_data, offset); // tokenId\\n        (offset, parsed.amount) = Bytes.readUInt128(_data, offset); // amount\\n\\n        require(offset == PACKED_FULL_EXIT_PUBDATA_BYTES, \\\"O\\\"); // reading invalid full exit pubdata size\\n    }\\n\\n    function writeFullExitPubdataForPriorityQueue(FullExit memory op) internal pure returns (bytes memory buf) {\\n        buf = abi.encodePacked(\\n            uint8(OpType.FullExit),\\n            op.accountId, // accountId\\n            op.owner, // owner\\n            op.tokenId, // tokenId\\n            uint128(0) // amount -- ignored\\n        );\\n    }\\n\\n    function checkFullExitInPriorityQueue(FullExit memory op, bytes20 hashedPubdata) internal pure returns (bool) {\\n        return Utils.hashBytesToBytes20(writeFullExitPubdataForPriorityQueue(op)) == hashedPubdata;\\n    }\\n\\n    // PartialExit pubdata\\n\\n    struct PartialExit {\\n        //uint8 opType; -- present in pubdata, ignored at serialization\\n        //uint32 accountId; -- present in pubdata, ignored at serialization\\n        uint16 tokenId;\\n        uint128 amount;\\n        //uint16 fee; -- present in pubdata, ignored at serialization\\n        address owner;\\n    }\\n\\n    function readPartialExitPubdata(bytes memory _data) internal pure returns (PartialExit memory parsed) {\\n        // NOTE: there is no check that variable sizes are same as constants (i.e. TOKEN_BYTES), fix if possible.\\n        uint256 offset = OP_TYPE_BYTES + ACCOUNT_ID_BYTES; // opType + accountId (ignored)\\n        (offset, parsed.tokenId) = Bytes.readUInt16(_data, offset); // tokenId\\n        (offset, parsed.amount) = Bytes.readUInt128(_data, offset); // amount\\n        offset += FEE_BYTES; // fee (ignored)\\n        (offset, parsed.owner) = Bytes.readAddress(_data, offset); // owner\\n    }\\n\\n    // ForcedExit pubdata\\n\\n    struct ForcedExit {\\n        //uint8 opType; -- present in pubdata, ignored at serialization\\n        //uint32 initiatorAccountId; -- present in pubdata, ignored at serialization\\n        //uint32 targetAccountId; -- present in pubdata, ignored at serialization\\n        uint16 tokenId;\\n        uint128 amount;\\n        //uint16 fee; -- present in pubdata, ignored at serialization\\n        address target;\\n    }\\n\\n    function readForcedExitPubdata(bytes memory _data) internal pure returns (ForcedExit memory parsed) {\\n        // NOTE: there is no check that variable sizes are same as constants (i.e. TOKEN_BYTES), fix if possible.\\n        uint256 offset = OP_TYPE_BYTES + ACCOUNT_ID_BYTES * 2; // opType + initiatorAccountId + targetAccountId (ignored)\\n        (offset, parsed.tokenId) = Bytes.readUInt16(_data, offset); // tokenId\\n        (offset, parsed.amount) = Bytes.readUInt128(_data, offset); // amount\\n        offset += FEE_BYTES; // fee (ignored)\\n        (offset, parsed.target) = Bytes.readAddress(_data, offset); // target\\n    }\\n\\n    // ChangePubKey\\n\\n    enum ChangePubkeyType {ECRECOVER, CREATE2, OldECRECOVER}\\n\\n    struct ChangePubKey {\\n        // uint8 opType; -- present in pubdata, ignored at serialization\\n        uint32 accountId;\\n        bytes20 pubKeyHash;\\n        address owner;\\n        uint32 nonce;\\n        //uint16 tokenId; -- present in pubdata, ignored at serialization\\n        //uint16 fee; -- present in pubdata, ignored at serialization\\n    }\\n\\n    function readChangePubKeyPubdata(bytes memory _data) internal pure returns (ChangePubKey memory parsed) {\\n        uint256 offset = OP_TYPE_BYTES;\\n        (offset, parsed.accountId) = Bytes.readUInt32(_data, offset); // accountId\\n        (offset, parsed.pubKeyHash) = Bytes.readBytes20(_data, offset); // pubKeyHash\\n        (offset, parsed.owner) = Bytes.readAddress(_data, offset); // owner\\n        (offset, parsed.nonce) = Bytes.readUInt32(_data, offset); // nonce\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/UpgradeableMaster.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/// @title Interface of the upgradeable master contract (defines notice period duration and allows finish upgrade during preparation of it)\\n/// @author Matter Labs\\ninterface UpgradeableMaster {\\n    /// @notice Notice period before activation preparation status of upgrade mode\\n    function getNoticePeriod() external returns (uint256);\\n\\n    /// @notice Notifies contract that notice period started\\n    function upgradeNoticePeriodStarted() external;\\n\\n    /// @notice Notifies contract that upgrade preparation status is activated\\n    function upgradePreparationStarted() external;\\n\\n    /// @notice Notifies contract that upgrade canceled\\n    function upgradeCanceled() external;\\n\\n    /// @notice Notifies contract that upgrade finishes\\n    function upgradeFinishes() external;\\n\\n    /// @notice Checks that contract is ready for upgrade\\n    /// @return bool flag indicating that contract is ready for upgrade\\n    function isReadyForUpgrade() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: UNLICENSED\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Governance.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\nimport \\\"./Config.sol\\\";\\n\\n/// @title Governance Contract\\n/// @author Matter Labs\\ncontract Governance is Config {\\n    /// @notice Token added to Franklin net\\n    event NewToken(address indexed token, uint16 indexed tokenId);\\n\\n    /// @notice Governor changed\\n    event NewGovernor(address newGovernor);\\n\\n    /// @notice Validator's status changed\\n    event ValidatorStatusUpdate(address indexed validatorAddress, bool isActive);\\n\\n    event TokenPausedUpdate(address indexed token, bool paused);\\n\\n    /// @notice Address which will exercise governance over the network i.e. add tokens, change validator set, conduct upgrades\\n    address public networkGovernor;\\n\\n    /// @notice Total number of ERC20 tokens registered in the network (excluding ETH, which is hardcoded as tokenId = 0)\\n    uint16 public totalTokens;\\n\\n    /// @notice List of registered tokens by tokenId\\n    mapping(uint16 => address) public tokenAddresses;\\n\\n    /// @notice List of registered tokens by address\\n    mapping(address => uint16) public tokenIds;\\n\\n    /// @notice List of permitted validators\\n    mapping(address => bool) public validators;\\n\\n    /// @notice Paused tokens list, deposits are impossible to create for paused tokens\\n    mapping(uint16 => bool) public pausedTokens;\\n\\n    /// @notice Governance contract initialization. Can be external because Proxy contract intercepts illegal calls of this function.\\n    /// @param initializationParameters Encoded representation of initialization parameters:\\n    ///     _networkGovernor The address of network governor\\n    function initialize(bytes calldata initializationParameters) external {\\n        address _networkGovernor = abi.decode(initializationParameters, (address));\\n\\n        networkGovernor = _networkGovernor;\\n    }\\n\\n    /// @notice Governance contract upgrade. Can be external because Proxy contract intercepts illegal calls of this function.\\n    /// @param upgradeParameters Encoded representation of upgrade parameters\\n    function upgrade(bytes calldata upgradeParameters) external {}\\n\\n    /// @notice Change current governor\\n    /// @param _newGovernor Address of the new governor\\n    function changeGovernor(address _newGovernor) external {\\n        requireGovernor(msg.sender);\\n        if (networkGovernor != _newGovernor) {\\n            networkGovernor = _newGovernor;\\n            emit NewGovernor(_newGovernor);\\n        }\\n    }\\n\\n    /// @notice Add token to the list of networks tokens\\n    /// @param _token Token address\\n    function addToken(address _token) external {\\n        requireGovernor(msg.sender);\\n        require(tokenIds[_token] == 0, \\\"1e\\\"); // token exists\\n        require(totalTokens < MAX_AMOUNT_OF_REGISTERED_TOKENS, \\\"1f\\\"); // no free identifiers for tokens\\n\\n        totalTokens++;\\n        uint16 newTokenId = totalTokens; // it is not `totalTokens - 1` because tokenId = 0 is reserved for eth\\n\\n        tokenAddresses[newTokenId] = _token;\\n        tokenIds[_token] = newTokenId;\\n        emit NewToken(_token, newTokenId);\\n    }\\n\\n    /// @notice Pause token deposits for the given token\\n    /// @param _tokenAddr Token address\\n    /// @param _tokenPaused Token paused status\\n    function setTokenPaused(address _tokenAddr, bool _tokenPaused) external {\\n        requireGovernor(msg.sender);\\n\\n        uint16 tokenId = this.validateTokenAddress(_tokenAddr);\\n        if (pausedTokens[tokenId] != _tokenPaused) {\\n            pausedTokens[tokenId] = _tokenPaused;\\n            emit TokenPausedUpdate(_tokenAddr, _tokenPaused);\\n        }\\n    }\\n\\n    /// @notice Change validator status (active or not active)\\n    /// @param _validator Validator address\\n    /// @param _active Active flag\\n    function setValidator(address _validator, bool _active) external {\\n        requireGovernor(msg.sender);\\n        if (validators[_validator] != _active) {\\n            validators[_validator] = _active;\\n            emit ValidatorStatusUpdate(_validator, _active);\\n        }\\n    }\\n\\n    /// @notice Check if specified address is is governor\\n    /// @param _address Address to check\\n    function requireGovernor(address _address) public view {\\n        require(_address == networkGovernor, \\\"1g\\\"); // only by governor\\n    }\\n\\n    /// @notice Checks if validator is active\\n    /// @param _address Validator address\\n    function requireActiveValidator(address _address) external view {\\n        require(validators[_address], \\\"1h\\\"); // validator is not active\\n    }\\n\\n    /// @notice Validate token id (must be less than or equal to total tokens amount)\\n    /// @param _tokenId Token id\\n    /// @return bool flag that indicates if token id is less than or equal to total tokens amount\\n    function isValidTokenId(uint16 _tokenId) external view returns (bool) {\\n        return _tokenId <= totalTokens;\\n    }\\n\\n    /// @notice Validate token address\\n    /// @param _tokenAddr Token address\\n    /// @return tokens id\\n    function validateTokenAddress(address _tokenAddr) external view returns (uint16) {\\n        uint16 tokenId = tokenIds[_tokenAddr];\\n        require(tokenId != 0, \\\"1i\\\"); // 0 is not a valid token\\n        return tokenId;\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Verifier.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\nimport \\\"./KeysWithPlonkVerifier.sol\\\";\\nimport \\\"./Config.sol\\\";\\n\\n// Hardcoded constants to avoid accessing store\\ncontract Verifier is KeysWithPlonkVerifier, KeysWithPlonkVerifierOld, Config {\\n    function initialize(bytes calldata) external {}\\n\\n    /// @notice Verifier contract upgrade. Can be external because Proxy contract intercepts illegal calls of this function.\\n    /// @param upgradeParameters Encoded representation of upgrade parameters\\n    function upgrade(bytes calldata upgradeParameters) external {}\\n\\n    function verifyAggregatedBlockProof(\\n        uint256[] memory _recursiveInput,\\n        uint256[] memory _proof,\\n        uint8[] memory _vkIndexes,\\n        uint256[] memory _individual_vks_inputs,\\n        uint256[16] memory _subproofs_limbs\\n    ) external view returns (bool) {\\n        for (uint256 i = 0; i < _individual_vks_inputs.length; ++i) {\\n            uint256 commitment = _individual_vks_inputs[i];\\n            _individual_vks_inputs[i] = commitment & INPUT_MASK;\\n        }\\n        VerificationKey memory vk = getVkAggregated(uint32(_vkIndexes.length));\\n\\n        return\\n            verify_serialized_proof_with_recursion(\\n                _recursiveInput,\\n                _proof,\\n                VK_TREE_ROOT,\\n                VK_MAX_INDEX,\\n                _vkIndexes,\\n                _individual_vks_inputs,\\n                _subproofs_limbs,\\n                vk\\n            );\\n    }\\n\\n    function verifyExitProof(\\n        bytes32 _rootHash,\\n        uint32 _accountId,\\n        address _owner,\\n        uint16 _tokenId,\\n        uint128 _amount,\\n        uint256[] calldata _proof\\n    ) external view returns (bool) {\\n        bytes32 commitment =\\n            sha256(abi.encodePacked(uint256(_rootHash) & INPUT_MASK, _accountId, _owner, _tokenId, _amount));\\n\\n        uint256[] memory inputs = new uint256[](1);\\n        inputs[0] = uint256(commitment) & INPUT_MASK;\\n        ProofOld memory proof = deserialize_proof_old(inputs, _proof);\\n        VerificationKeyOld memory vk = getVkExit();\\n        require(vk.num_inputs == inputs.length);\\n        return verify_old(proof, vk);\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/KeysWithPlonkVerifier.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\n\\nimport \\\"./PlonkCore.sol\\\";\\n\\n// Hardcoded constants to avoid accessing store\\ncontract KeysWithPlonkVerifier is VerifierWithDeserialize {\\n\\n    uint256 constant VK_TREE_ROOT = 0x1825df40e06d0cfbb08aac99147e93d292664bcea723f28f2112688d96833fa5;\\n    uint8 constant VK_MAX_INDEX = 5;\\n\\n    function getVkAggregated(uint32 _proofs) internal pure returns (VerificationKey memory vk) {\\n        if (_proofs == uint32(1)) { return getVkAggregated1(); }\\n        else if (_proofs == uint32(4)) { return getVkAggregated4(); }\\n        else if (_proofs == uint32(8)) { return getVkAggregated8(); }\\n        else if (_proofs == uint32(18)) { return getVkAggregated18(); }\\n    }\\n\\n    \\n    function getVkAggregated1() internal pure returns(VerificationKey memory vk) {\\n        vk.domain_size = 4194304;\\n        vk.num_inputs = 1;\\n        vk.omega = PairingsBn254.new_fr(0x18c95f1ae6514e11a1b30fd7923947c5ffcec5347f16e91b4dd654168326bede);\\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\\n            0x1b2d28f346ba6302090869b58c0ccf45994c8aaee54101d489e4605b9b9d69a5,\\n            0x05b254b5537aede870276a46ae3046ae4cb36a5e41b1a1208355a4b2de0fc3c4\\n        );\\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\\n            0x0e111faf12e663d8e6aa9b7c434376e13fb4ae52bb597bcc23f2044710daa60a,\\n            0x16505d91104cdf110698ebe99f0abd162630e4b108356640d1abd8596c4680d2\\n        );\\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\\n            0x0e6aaf4f2ceb4d0b781ccbcb8c6b235d6c74df0079e8db8eefc9539b6ca2d920,\\n            0x0779a9706bd1a8315662914928188f51a2081d1bbeb863a1f6945ab6e1752513\\n        );\\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\\n            0x12f8cc0d6eaa884fa1fa6ec2c23cd21892dff4298c67451f6c234293a85d977b,\\n            0x165d8106e03536fcf8c66391ee31e97b00664932d63d61a008108d68f8da2dcd\\n        );\\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\\n            0x282ab78735c94c7d4fe2b134e7cee6bf967921c744b2df5b1ac7980ca39a6ef4,\\n            0x0f627a1b42661cca9fa1e2de44d78413a1817b0ea44506de524f3aeb43b00c69\\n        );\\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\\n            0x0f1abdaaea6fc0c841cbdbb84315392c7de7270704d2bd990f3205f06f3c2e72,\\n            0x18e32227065587b5814b4d1f8d7f78689af94f711d0521575c2ad723706403ac\\n        );\\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\\n            0x2e43a380b145f473c7b76c29110fa2a54d29e39e4c3e7a0667656f5d7c6fa783,\\n            0x0c56e0e6679b4b71113d073ad16a405c62f1154a37202dcefce83ab2aa2bfd99\\n        );\\n        vk.gate_selector_commitments[0] = PairingsBn254.new_g1(\\n            0x287f80f33b27cac8c1d7ea38e3f38b9547fc64241f369332ced9f13255f02a11,\\n            0x0019b4dfa8d1fa5172b3609a3ee75532a8fcdd946df313edb466502baec90916\\n        );\\n        vk.gate_selector_commitments[1] = PairingsBn254.new_g1(\\n            0x262c679d64425eba4718852094935ed36c916c8e58970723ab56a6edfec8ee53,\\n            0x11512b535dcd41a87ff8fe16b944b0fc33a13b6ab82bed1e1fef9f887fb8bd17\\n        );\\n        vk.copy_permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x06e470b8f5828b55b7c2a1c25879f07c2e60ff3936de7c7a9a1d0cf11c7154cb,\\n            0x0183d6431267f015d722e1e47fae0d8f6a66b1b75c271f6f2f7a19fd9bde0deb\\n        );\\n        vk.copy_permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x2c42b01e3e994120ebbc941def201a6242ceca9d24a5b0c21c1e00267126eb03,\\n            0x2b3ee88ed3e1550605d061cb8db20ff97560e735f23e3234b32b875b2b0af854\\n        );\\n        vk.copy_permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x20f62698b7f1defcc8da79330979c7d176d2c9b72d031dac96e1db91c7596f22,\\n            0x0ff81068a3a7706205893199514f4bbf06aa644ba08591b2b5cf315136fbbe89\\n        );\\n        vk.copy_permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x1645e6c282336dfd4ec70d4ebb71050390f70927a887dcfd6527070659f3a7e7,\\n            0x1c93ca29a27a931a34482db88bed589951aa7d406b5583da235bf618fb4d048e\\n        );\\n        vk.copy_permutation_non_residues[0] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000005\\n        );\\n        vk.copy_permutation_non_residues[1] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000007\\n        );\\n        vk.copy_permutation_non_residues[2] = PairingsBn254.new_fr(\\n            0x000000000000000000000000000000000000000000000000000000000000000a\\n        );\\n\\n        vk.g2_x = PairingsBn254.new_g2(\\n            [0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\\n            0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0],\\n            [0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\\n            0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55]\\n        );\\n    }\\n    \\n    function getVkAggregated4() internal pure returns(VerificationKey memory vk) {\\n        vk.domain_size = 8388608;\\n        vk.num_inputs = 1;\\n        vk.omega = PairingsBn254.new_fr(0x1283ba6f4b7b1a76ba2008fe823128bea4adb9269cbfd7c41c223be65bc60863);\\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\\n            0x003afae7b782054ff6a437e54aff5e1086b8674197d2b93ac0a18251d4e6dc22,\\n            0x285c4b07c20db3cdd7359d980fce202cd3a203e6068409ac8d0d4d024323e78d\\n        );\\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\\n            0x1752602c8accc76f98e15d68a5d590621d7b5e2ed2c67c11fb240e5851654c72,\\n            0x11fc0e19e71835f2da8c52ed7296b45994e26f8605251ae67a96df49fa0d724f\\n        );\\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\\n            0x2d0e2a1ef38fafe5f9d0ca83acdf70c2bd673d7615618fd3929e4414a8cfd726,\\n            0x0776082cc19f77461dc2fdf16fc6cc189b4c9b5fafa860fbbac7228fabd72ccb\\n        );\\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\\n            0x20afbdefb66bdcbe14ac2f75c3d5354f5cc9d4e371cd955ed5ff08f9225f3afe,\\n            0x17b87b9d12adae345353ef2affaf5d9d090c56dea25c57856d32a5f617e46c55\\n        );\\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\\n            0x20b82ee5bfc5fc4bcc522d639f7f2be16e62c992818b0f84a7caeef7b1cc1393,\\n            0x0a10054e23a03d9c5e8b4a751ef82ad389f5e6af1959eeb23dd36536a8e9f845\\n        );\\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\\n            0x21bffb88353357100e5537b55ad0739dc81c5b2a2224411de8df9b73a56e9cc4,\\n            0x269be6640e56d2a33033c333c9786eee0b078cbc5319e067b305a7501309fca9\\n        );\\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\\n            0x02f1a1df9628c5c83e5abe3af36b032366d7ef9cb9d96f97dd402aa01f054d6b,\\n            0x0f8b5b237dda5bd4fd08282c988c75334a1dcd6e6ba75a09703d88b76d3a49a9\\n        );\\n        vk.gate_selector_commitments[0] = PairingsBn254.new_g1(\\n            0x058a6b76530a3263918d1a6b3a34a8828f9d14de3480f96a83572977d485bad3,\\n            0x1aac6b86abfb9413d699a339b2eb675a849e7ab8e62bda5b109e45f3d98c7e78\\n        );\\n        vk.gate_selector_commitments[1] = PairingsBn254.new_g1(\\n            0x06dda5991f13700cce7f714116b1d4da183b09ff7ba87b3a0baab284e273b6f4,\\n            0x0df202a06cfdf124ca73029570bdc8b27d0adc6f9c66183e5dead5ea692b9d33\\n        );\\n        vk.copy_permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x087ba5945331b19901b5ff79ee6798405d60ad235f259a5370ff11b7abb02fb6,\\n            0x2abc220d6c5493187c235fd362495435734cae30a62f55380079ce49402ec9ec\\n        );\\n        vk.copy_permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x2c76802cf99e8110e9bf6a04e3f2f044f935fe5146e420b62cf33c9471c6ee8d,\\n            0x06ea23ae66f93a5a52a0bd033f2a8dde6d12dc19cb3c7b0df1441b1cecbc2676\\n        );\\n        vk.copy_permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x054f7e5bcb8de6145e77eba1dfa0a7a7041caf3f6c888f97758e51d86527871b,\\n            0x2698bfa2800eab77b6be534b9e1f36089888f453eff641be4905098500332f96\\n        );\\n        vk.copy_permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x2fc493b05505bbea2ca1204c63ec3efe304ccbf55939727a2c120dd036f8f669,\\n            0x01c6c6ba67415f5976a90046e80b783b8381f112a6b5dc0f9549e559888edf44\\n        );\\n        vk.copy_permutation_non_residues[0] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000005\\n        );\\n        vk.copy_permutation_non_residues[1] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000007\\n        );\\n        vk.copy_permutation_non_residues[2] = PairingsBn254.new_fr(\\n            0x000000000000000000000000000000000000000000000000000000000000000a\\n        );\\n\\n        vk.g2_x = PairingsBn254.new_g2(\\n            [0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\\n            0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0],\\n            [0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\\n            0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55]\\n        );\\n    }\\n    \\n    function getVkAggregated8() internal pure returns(VerificationKey memory vk) {\\n        vk.domain_size = 16777216;\\n        vk.num_inputs = 1;\\n        vk.omega = PairingsBn254.new_fr(0x1951441010b2b95a6e47a6075066a50a036f5ba978c050f2821df86636c0facb);\\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\\n            0x2aed0f7587fb53228b56996fc5c68c786e94ea85e39cee07ea6ab88c790fd599,\\n            0x0d95c66c1009c7835683905d6172794b84b76c06c3eb50364a3d5403124ad583\\n        );\\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\\n            0x1ebe365381011f2d968d31f27492c35b236cb24eb764ce3487350a9479b8ba2c,\\n            0x07c060531b8cd5848909e9a033331b49841582c5b1dd9212fd36daf4f080b458\\n        );\\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\\n            0x0bb638c14c24e76f14579ec75e8ca051e1cb4c51eb22c5db10251381677e222b,\\n            0x2f535ad57b1f4379299d3e1eacb6a44652e4aeb11d17378e8f86e3f89aceece5\\n        );\\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\\n            0x22b2486cc041273ca7a97849818580eed4a7bac30bccec181074ceb116463458,\\n            0x03d9210b8ab88ed4727ebdbd0f454acd29abc39cf02288c46ee48ab4fdf03eaf\\n        );\\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\\n            0x18b200063185c5d001b1d0e6ddd51e197bb8548886873b1a9724161302f80216,\\n            0x1a301ae3e1b9ed496a9ba20c390827c707dd9ec7e79502b2f1f112ca72fea83d\\n        );\\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\\n            0x130bb188892b683c412ae8a0414236e5406a12593e637cdd7aea58fcbfe642bb,\\n            0x018ff5fe5d3b7183a3ebb561977328ffea2a3ffbe65519e68601237f93d8d44c\\n        );\\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\\n            0x117124dcfb53862da15b26b3106d5413a027f5a1bc692197de9d232756702dfb,\\n            0x1090cb8a5f2250bdae1ce9d5036cdbafcb18aae7984280f3a5f7953186603afc\\n        );\\n        vk.gate_selector_commitments[0] = PairingsBn254.new_g1(\\n            0x1249c67168759250ff084478c93e08ef95f773a5af9f2c64771aa613cee8647a,\\n            0x0df71e2c6cf6f92ad48a4ad30f835b4e8f55d958fbc9aea3fd288118143952b5\\n        );\\n        vk.gate_selector_commitments[1] = PairingsBn254.new_g1(\\n            0x0f3a4a415e0a8bd5cf8e9ae28581a761a3c6ba2a06f7342411d89104eb826b02,\\n            0x19b31211cf50a00ef9517c441a97de8f230262bad13c87de3b7867ab02607984\\n        );\\n        vk.copy_permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x2e4a28f471265095e61964d3bbaecf3426c334c4dcf77cd8587baae110b121a0,\\n            0x0b59a19d813da05115de4762bd9ab51c966f5e24fd3ca6755ff055fef8072ca5\\n        );\\n        vk.copy_permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x2599b11f211d5317e20d0af3124b681280fa0cbdaf6e8de417e3e55798685caf,\\n            0x2088ce807239d036cb626a7da17adafe31ee3550acd61c4d8701376b3b24fb51\\n        );\\n        vk.copy_permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x1da84959795544b67e074658448ec3a46f68ad19ad1a4a6724bc664591d20575,\\n            0x259c29eb06ebd9e9d4061b52efdb7c64e1855329433e7ff41e9ff822723e0f34\\n        );\\n        vk.copy_permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x1e6a691f593d98ee939c4ed04b468dfe554478d476ece3775eb9126f814a27dc,\\n            0x080b9ef5f9ca7f5a999c6a43bcc5bc67007e74ed0d90882a9bf04fb890384a05\\n        );\\n        vk.copy_permutation_non_residues[0] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000005\\n        );\\n        vk.copy_permutation_non_residues[1] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000007\\n        );\\n        vk.copy_permutation_non_residues[2] = PairingsBn254.new_fr(\\n            0x000000000000000000000000000000000000000000000000000000000000000a\\n        );\\n\\n        vk.g2_x = PairingsBn254.new_g2(\\n            [0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\\n            0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0],\\n            [0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\\n            0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55]\\n        );\\n    }\\n    \\n    function getVkAggregated18() internal pure returns(VerificationKey memory vk) {\\n        vk.domain_size = 33554432;\\n        vk.num_inputs = 1;\\n        vk.omega = PairingsBn254.new_fr(0x0d94d63997367c97a8ed16c17adaae39262b9af83acb9e003f94c217303dd160);\\n        vk.gate_setup_commitments[0] = PairingsBn254.new_g1(\\n            0x22c34e87db1c7cabe05c260f4b1ab56b9df3a16f8f065132fca08188878b6846,\\n            0x01092dce64969094387268ee9a1f059720b3420f855453570a34910299b02430\\n        );\\n        vk.gate_setup_commitments[1] = PairingsBn254.new_g1(\\n            0x10b491895d3666b4b9bbb18ea3fbcc6607831c153279d0554a956c8247f49fc4,\\n            0x01a40cf9fdb32f138825d023ae655b135713d24015bc6b629a16d35a68537657\\n        );\\n        vk.gate_setup_commitments[2] = PairingsBn254.new_g1(\\n            0x221de6ef2222bbcd694daa876c2e3adf34cff223cf58dbeebf6def38342d1664,\\n            0x0d982c940317ac66632a0354f441a4be3408e6db272114d79a4834b7a4a20113\\n        );\\n        vk.gate_setup_commitments[3] = PairingsBn254.new_g1(\\n            0x017ee0bd160be4a3b261f16cdb5eb4c95cacc8c04b7c033142e93ecca7220ba2,\\n            0x05cde74e73348375b0e47f1f4f3d894fef90633fe475967f0243cda1643151cf\\n        );\\n        vk.gate_setup_commitments[4] = PairingsBn254.new_g1(\\n            0x073e38b4cdf00627dc9074ba9f941fe6a132787bc5f07ba39d3601c19e0f3019,\\n            0x15584337ede2fd27d04a740870c5a4614bf0b30f6d05efffbad120c61f356021\\n        );\\n        vk.gate_setup_commitments[5] = PairingsBn254.new_g1(\\n            0x2560e1faeb4e0cd62c699909621bc1be4a2fa8ce8eaef4dacfafd9b93e32c37c,\\n            0x28ffa10037d7e86024b4ebc8d38b51db9b8d449c41ffd7cc531bfc7e8639f93a\\n        );\\n        vk.gate_setup_commitments[6] = PairingsBn254.new_g1(\\n            0x0ab4fd76ade54d1ecb9557227abc595ea8321a78bb238c156404e6dfe909330c,\\n            0x205ef99a7bd497f9930dfda6f1d6b5b7cf1c1c11dba92cc7ddd1bfeead925692\\n        );\\n        vk.gate_selector_commitments[0] = PairingsBn254.new_g1(\\n            0x0f4bbf1c063eafceab5db36646f088b653904d98e8db6557a5481723ee03e63f,\\n            0x0c28d0481d372199db93cd2624b4590cfbc85ccbdd4b4617bf143913805dad1e\\n        );\\n        vk.gate_selector_commitments[1] = PairingsBn254.new_g1(\\n            0x09cdf995f6b1aa7117c78d61b05983748233b4cd3215f11ce90d68403f8e919a,\\n            0x1f2e6ca97ca6beb393e87ef1e8729cc9239726b592e62be5eb3e91ea1b013066\\n        );\\n        vk.copy_permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x2b6ac30a4cf20339f38ebdbe4e49e86755cf0d01d4cae3cd4b917ae04d42da60,\\n            0x00d48d03dd23ba2dfa883b33153442fd723dc480e8164309c0cbdcafb6b03756\\n        );\\n        vk.copy_permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x17bdb5fac2a956ab5c8212a241fa7f5ef39538fb2280228d08baab796070961e,\\n            0x25e7d5d7fa542aa861aad4e70a34c0994aa9e118404c23ef8b4606f39297a775\\n        );\\n        vk.copy_permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x1072c13ae46914f859d815c7b116e227ed6baf5b3e9a8f301e5bfbbc52a85c2a,\\n            0x1fafa2dbeed434ff1a24d63e3768c9ee4953a83a8a05503bf616412871af4e95\\n        );\\n        vk.copy_permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x1e5fd3f86f7f6a66ada15c059dfda371f0cbd4647592be9e4c5fb00f9f85fcbe,\\n            0x2e3fd2f0c02d7c2d748f05338b1b34b9cd3d7ddb2dde4504b7865ce84690526f\\n        );\\n        vk.copy_permutation_non_residues[0] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000005\\n        );\\n        vk.copy_permutation_non_residues[1] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000007\\n        );\\n        vk.copy_permutation_non_residues[2] = PairingsBn254.new_fr(\\n            0x000000000000000000000000000000000000000000000000000000000000000a\\n        );\\n\\n        vk.g2_x = PairingsBn254.new_g2(\\n            [0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1,\\n            0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0],\\n            [0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4,\\n            0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55]\\n        );\\n    }\\n    \\n\\n}\\n\\n// Hardcoded constants to avoid accessing store\\ncontract KeysWithPlonkVerifierOld is VerifierWithDeserializeOld {\\n\\n    \\n    function getVkExit() internal pure returns(VerificationKeyOld memory vk) {\\n        vk.domain_size = 262144;\\n        vk.num_inputs = 1;\\n        vk.omega = PairingsBn254.new_fr(0x0f60c8fe0414cb9379b2d39267945f6bd60d06a05216231b26a9fcf88ddbfebe);\\n        vk.selector_commitments[0] = PairingsBn254.new_g1(\\n            0x117ebe939b7336d17b69b05d5530e30326af39da45a989b078bb3d607707bf3e,\\n            0x18b16095a1c814fe2980170ff34490f1fd454e874caa87df2f739fb9c8d2e902\\n        );\\n        vk.selector_commitments[1] = PairingsBn254.new_g1(\\n            0x05ac70a10fc569cc8358bfb708c184446966c6b6a3e0d7c25183ded97f9e7933,\\n            0x0f6152282854e153588d45e784d216a423a624522a687741492ee0b807348e71\\n        );\\n        vk.selector_commitments[2] = PairingsBn254.new_g1(\\n            0x03cfa9d8f9b40e565435bee3c5b0e855c8612c5a89623557cc30f4588617d7bd,\\n            0x2292bb95c2cc2da55833b403a387e250a9575e32e4ce7d6caa954f12e6ce592a\\n        );\\n        vk.selector_commitments[3] = PairingsBn254.new_g1(\\n            0x04d04f495c69127b6cc6ecbfd23f77f178e7f4e2d2de3eab3e583a4997744cd9,\\n            0x09dcf5b3db29af5c5eef2759da26d3b6959cb8d80ada9f9b086f7cc39246ad2b\\n        );\\n        vk.selector_commitments[4] = PairingsBn254.new_g1(\\n            0x01ebab991522d407cfd4e8a1740b64617f0dfca50479bba2707c2ec4159039fc,\\n            0x2c8bd00a44c6120bbf8e57877013f2b5ee36b53eef4ea3b6748fd03568005946\\n        );\\n        vk.selector_commitments[5] = PairingsBn254.new_g1(\\n            0x07a7124d1fece66bd5428fcce25c22a4a9d5ceaa1e632565d9a062c39f005b5e,\\n            0x2044ae5306f0e114c48142b9b97001d94e3f2280db1b01a1e47ac1cf6bd5f99e\\n        );\\n\\n        // we only have access to value of the d(x) witness polynomial on the next\\n        // trace step, so we only need one element here and deal with it in other places\\n        // by having this in mind\\n        vk.next_step_selector_commitments[0] = PairingsBn254.new_g1(\\n            0x1dd1549a639f052c4fbc95b7b7a40acf39928cad715580ba2b38baa116dacd9c,\\n            0x0f8e712990da1ce5195faaf80185ef0d5e430fdec9045a20af758cc8ecdac2e5\\n        );\\n\\n        vk.permutation_commitments[0] = PairingsBn254.new_g1(\\n            0x0026b64066e39a22739be37fed73308ace0a5f38a0e2292dcc2309c818e8c89c,\\n            0x285101acca358974c2c7c9a8a3936e08fbd86779b877b416d9480c91518cb35b\\n        );\\n        vk.permutation_commitments[1] = PairingsBn254.new_g1(\\n            0x2159265ac6fcd4d0257673c3a85c17f4cf3ea13a3c9fb51e404037b13778d56f,\\n            0x25bf73e568ba3406ace2137195bb2176d9de87a48ae42520281aaef2ac2ef937\\n        );\\n        vk.permutation_commitments[2] = PairingsBn254.new_g1(\\n            0x068f29af99fc8bbf8c00659d34b6d34e4757af6edc10fc7647476cbd0ea9be63,\\n            0x2ef759b20cabf3da83d7f578d9e11ed60f7015440e77359db94475ddb303144d\\n        );\\n        vk.permutation_commitments[3] = PairingsBn254.new_g1(\\n            0x22793db6e98b9e37a1c5d78fcec67a2d8c527d34c5e9c8c1ff15007d30a4c133,\\n            0x1b683d60fd0750b3a45cdee5cbc4057204a02bd428e8071c92fe6694a40a5c1f\\n        );\\n\\n        vk.permutation_non_residues[0] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000005\\n        );\\n        vk.permutation_non_residues[1] = PairingsBn254.new_fr(\\n            0x0000000000000000000000000000000000000000000000000000000000000007\\n        );\\n        vk.permutation_non_residues[2] = PairingsBn254.new_fr(\\n            0x000000000000000000000000000000000000000000000000000000000000000a\\n        );\\n\\n        vk.g2_x = PairingsBn254.new_g2(\\n            [0x260e01b251f6f1c7e7ff4e580791dee8ea51d87a358e038b4efe30fac09383c1, 0x0118c4d5b837bcc2bc89b5b398b5974e9f5944073b32078b7e231fec938883b0],\\n            [0x04fc6369f7110fe3d25156c1bb9a72859cf2a04641f99ba4ee413c80da6a5fe4, 0x22febda3c0c0632a56475b4214e5615e11e6dd3f96e6cea2854a87d4dacc5e55]\\n        );\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/PlonkCore.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n\\nlibrary PairingsBn254 {\\n    uint256 constant q_mod = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant bn254_b_coeff = 3;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    struct Fr {\\n        uint256 value;\\n    }\\n\\n    function new_fr(uint256 fr) internal pure returns (Fr memory) {\\n        require(fr < r_mod);\\n        return Fr({value: fr});\\n    }\\n\\n    function copy(Fr memory self) internal pure returns (Fr memory n) {\\n        n.value = self.value;\\n    }\\n\\n    function assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = other.value;\\n    }\\n\\n    function inverse(Fr memory fr) internal view returns (Fr memory) {\\n        require(fr.value != 0);\\n        return pow(fr, r_mod - 2);\\n    }\\n\\n    function add_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = addmod(self.value, other.value, r_mod);\\n    }\\n\\n    function sub_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = addmod(self.value, r_mod - other.value, r_mod);\\n    }\\n\\n    function mul_assign(Fr memory self, Fr memory other) internal pure {\\n        self.value = mulmod(self.value, other.value, r_mod);\\n    }\\n\\n    function pow(Fr memory self, uint256 power) internal view returns (Fr memory) {\\n        uint256[6] memory input = [32, 32, 32, self.value, power, r_mod];\\n        uint256[1] memory result;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 0x05, input, 0xc0, result, 0x20)\\n        }\\n        require(success);\\n        return Fr({value: result[0]});\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    function new_g1(uint256 x, uint256 y) internal pure returns (G1Point memory) {\\n        return G1Point(x, y);\\n    }\\n\\n    function new_g1_checked(uint256 x, uint256 y) internal pure returns (G1Point memory) {\\n        if (x == 0 && y == 0) {\\n            // point of infinity is (0,0)\\n            return G1Point(x, y);\\n        }\\n\\n        // check encoding\\n        require(x < q_mod);\\n        require(y < q_mod);\\n        // check on curve\\n        uint256 lhs = mulmod(y, y, q_mod); // y^2\\n        uint256 rhs = mulmod(x, x, q_mod); // x^2\\n        rhs = mulmod(rhs, x, q_mod); // x^3\\n        rhs = addmod(rhs, bn254_b_coeff, q_mod); // x^3 + b\\n        require(lhs == rhs);\\n\\n        return G1Point(x, y);\\n    }\\n\\n    function new_g2(uint256[2] memory x, uint256[2] memory y) internal pure returns (G2Point memory) {\\n        return G2Point(x, y);\\n    }\\n\\n    function copy_g1(G1Point memory self) internal pure returns (G1Point memory result) {\\n        result.X = self.X;\\n        result.Y = self.Y;\\n    }\\n\\n    function P2() internal pure returns (G2Point memory) {\\n        // for some reason ethereum expects to have c1*v + c0 form\\n\\n        return\\n            G2Point(\\n                [\\n                    0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2,\\n                    0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed\\n                ],\\n                [\\n                    0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b,\\n                    0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa\\n                ]\\n            );\\n    }\\n\\n    function negate(G1Point memory self) internal pure {\\n        // The prime q in the base field F_q for G1\\n        if (self.Y == 0) {\\n            require(self.X == 0);\\n            return;\\n        }\\n\\n        self.Y = q_mod - self.Y;\\n    }\\n\\n    function point_add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        point_add_into_dest(p1, p2, r);\\n        return r;\\n    }\\n\\n    function point_add_assign(G1Point memory p1, G1Point memory p2) internal view {\\n        point_add_into_dest(p1, p2, p1);\\n    }\\n\\n    function point_add_into_dest(\\n        G1Point memory p1,\\n        G1Point memory p2,\\n        G1Point memory dest\\n    ) internal view {\\n        if (p2.X == 0 && p2.Y == 0) {\\n            // we add zero, nothing happens\\n            dest.X = p1.X;\\n            dest.Y = p1.Y;\\n            return;\\n        } else if (p1.X == 0 && p1.Y == 0) {\\n            // we add into zero, and we add non-zero point\\n            dest.X = p2.X;\\n            dest.Y = p2.Y;\\n            return;\\n        } else {\\n            uint256[4] memory input;\\n\\n            input[0] = p1.X;\\n            input[1] = p1.Y;\\n            input[2] = p2.X;\\n            input[3] = p2.Y;\\n\\n            bool success = false;\\n            assembly {\\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\\n            }\\n            require(success);\\n        }\\n    }\\n\\n    function point_sub_assign(G1Point memory p1, G1Point memory p2) internal view {\\n        point_sub_into_dest(p1, p2, p1);\\n    }\\n\\n    function point_sub_into_dest(\\n        G1Point memory p1,\\n        G1Point memory p2,\\n        G1Point memory dest\\n    ) internal view {\\n        if (p2.X == 0 && p2.Y == 0) {\\n            // we subtracted zero, nothing happens\\n            dest.X = p1.X;\\n            dest.Y = p1.Y;\\n            return;\\n        } else if (p1.X == 0 && p1.Y == 0) {\\n            // we subtract from zero, and we subtract non-zero point\\n            dest.X = p2.X;\\n            dest.Y = q_mod - p2.Y;\\n            return;\\n        } else {\\n            uint256[4] memory input;\\n\\n            input[0] = p1.X;\\n            input[1] = p1.Y;\\n            input[2] = p2.X;\\n            input[3] = q_mod - p2.Y;\\n\\n            bool success = false;\\n            assembly {\\n                success := staticcall(gas(), 6, input, 0x80, dest, 0x40)\\n            }\\n            require(success);\\n        }\\n    }\\n\\n    function point_mul(G1Point memory p, Fr memory s) internal view returns (G1Point memory r) {\\n        point_mul_into_dest(p, s, r);\\n        return r;\\n    }\\n\\n    function point_mul_assign(G1Point memory p, Fr memory s) internal view {\\n        point_mul_into_dest(p, s, p);\\n    }\\n\\n    function point_mul_into_dest(\\n        G1Point memory p,\\n        Fr memory s,\\n        G1Point memory dest\\n    ) internal view {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s.value;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 7, input, 0x60, dest, 0x40)\\n        }\\n        require(success);\\n    }\\n\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length);\\n        uint256 elements = p1.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n        for (uint256 i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint256[1] memory out;\\n        bool success;\\n        assembly {\\n            success := staticcall(gas(), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n        }\\n        require(success);\\n        return out[0] != 0;\\n    }\\n\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\\nlibrary TranscriptLibrary {\\n    // flip                    0xe000000000000000000000000000000000000000000000000000000000000000;\\n    uint256 constant FR_MASK = 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint32 constant DST_0 = 0;\\n    uint32 constant DST_1 = 1;\\n    uint32 constant DST_CHALLENGE = 2;\\n\\n    struct Transcript {\\n        bytes32 state_0;\\n        bytes32 state_1;\\n        uint32 challenge_counter;\\n    }\\n\\n    function new_transcript() internal pure returns (Transcript memory t) {\\n        t.state_0 = bytes32(0);\\n        t.state_1 = bytes32(0);\\n        t.challenge_counter = 0;\\n    }\\n\\n    function update_with_u256(Transcript memory self, uint256 value) internal pure {\\n        bytes32 old_state_0 = self.state_0;\\n        self.state_0 = keccak256(abi.encodePacked(DST_0, old_state_0, self.state_1, value));\\n        self.state_1 = keccak256(abi.encodePacked(DST_1, old_state_0, self.state_1, value));\\n    }\\n\\n    function update_with_fr(Transcript memory self, PairingsBn254.Fr memory value) internal pure {\\n        update_with_u256(self, value.value);\\n    }\\n\\n    function update_with_g1(Transcript memory self, PairingsBn254.G1Point memory p) internal pure {\\n        update_with_u256(self, p.X);\\n        update_with_u256(self, p.Y);\\n    }\\n\\n    function get_challenge(Transcript memory self) internal pure returns (PairingsBn254.Fr memory challenge) {\\n        bytes32 query = keccak256(abi.encodePacked(DST_CHALLENGE, self.state_0, self.state_1, self.challenge_counter));\\n        self.challenge_counter += 1;\\n        challenge = PairingsBn254.Fr({value: uint256(query) & FR_MASK});\\n    }\\n}\\n\\ncontract Plonk4VerifierWithAccessToDNext {\\n    uint256 constant r_mod = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    using PairingsBn254 for PairingsBn254.G1Point;\\n    using PairingsBn254 for PairingsBn254.G2Point;\\n    using PairingsBn254 for PairingsBn254.Fr;\\n\\n    using TranscriptLibrary for TranscriptLibrary.Transcript;\\n\\n    uint256 constant ZERO = 0;\\n    uint256 constant ONE = 1;\\n    uint256 constant TWO = 2;\\n    uint256 constant THREE = 3;\\n    uint256 constant FOUR = 4;\\n\\n    uint256 constant STATE_WIDTH = 4;\\n    uint256 constant NUM_DIFFERENT_GATES = 2;\\n    uint256 constant NUM_SETUP_POLYS_FOR_MAIN_GATE = 7;\\n    uint256 constant NUM_SETUP_POLYS_RANGE_CHECK_GATE = 0;\\n    uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP = 1;\\n    uint256 constant NUM_GATE_SELECTORS_OPENED_EXPLICITLY = 1;\\n\\n    uint256 constant RECURSIVE_CIRCUIT_INPUT_COMMITMENT_MASK =\\n        0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant LIMB_WIDTH = 68;\\n\\n    struct VerificationKey {\\n        uint256 domain_size;\\n        uint256 num_inputs;\\n        PairingsBn254.Fr omega;\\n        PairingsBn254.G1Point[NUM_SETUP_POLYS_FOR_MAIN_GATE + NUM_SETUP_POLYS_RANGE_CHECK_GATE] gate_setup_commitments;\\n        PairingsBn254.G1Point[NUM_DIFFERENT_GATES] gate_selector_commitments;\\n        PairingsBn254.G1Point[STATE_WIDTH] copy_permutation_commitments;\\n        PairingsBn254.Fr[STATE_WIDTH - 1] copy_permutation_non_residues;\\n        PairingsBn254.G2Point g2_x;\\n    }\\n\\n    struct Proof {\\n        uint256[] input_values;\\n        PairingsBn254.G1Point[STATE_WIDTH] wire_commitments;\\n        PairingsBn254.G1Point copy_permutation_grand_product_commitment;\\n        PairingsBn254.G1Point[STATE_WIDTH] quotient_poly_commitments;\\n        PairingsBn254.Fr[STATE_WIDTH] wire_values_at_z;\\n        PairingsBn254.Fr[ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP] wire_values_at_z_omega;\\n        PairingsBn254.Fr[NUM_GATE_SELECTORS_OPENED_EXPLICITLY] gate_selector_values_at_z;\\n        PairingsBn254.Fr copy_grand_product_at_z_omega;\\n        PairingsBn254.Fr quotient_polynomial_at_z;\\n        PairingsBn254.Fr linearization_polynomial_at_z;\\n        PairingsBn254.Fr[STATE_WIDTH - 1] permutation_polynomials_at_z;\\n        PairingsBn254.G1Point opening_at_z_proof;\\n        PairingsBn254.G1Point opening_at_z_omega_proof;\\n    }\\n\\n    struct PartialVerifierState {\\n        PairingsBn254.Fr alpha;\\n        PairingsBn254.Fr beta;\\n        PairingsBn254.Fr gamma;\\n        PairingsBn254.Fr v;\\n        PairingsBn254.Fr u;\\n        PairingsBn254.Fr z;\\n        PairingsBn254.Fr[] cached_lagrange_evals;\\n    }\\n\\n    function evaluate_lagrange_poly_out_of_domain(\\n        uint256 poly_num,\\n        uint256 domain_size,\\n        PairingsBn254.Fr memory omega,\\n        PairingsBn254.Fr memory at\\n    ) internal view returns (PairingsBn254.Fr memory res) {\\n        require(poly_num < domain_size);\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory omega_power = omega.pow(poly_num);\\n        res = at.pow(domain_size);\\n        res.sub_assign(one);\\n        require(res.value != 0); // Vanishing polynomial can not be zero at point `at`\\n        res.mul_assign(omega_power);\\n\\n        PairingsBn254.Fr memory den = PairingsBn254.copy(at);\\n        den.sub_assign(omega_power);\\n        den.mul_assign(PairingsBn254.new_fr(domain_size));\\n\\n        den = den.inverse();\\n\\n        res.mul_assign(den);\\n    }\\n\\n    function batch_evaluate_lagrange_poly_out_of_domain(\\n        uint256[] memory poly_nums,\\n        uint256 domain_size,\\n        PairingsBn254.Fr memory omega,\\n        PairingsBn254.Fr memory at\\n    ) internal view returns (PairingsBn254.Fr[] memory res) {\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory tmp_1 = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory tmp_2 = PairingsBn254.new_fr(domain_size);\\n        PairingsBn254.Fr memory vanishing_at_z = at.pow(domain_size);\\n        vanishing_at_z.sub_assign(one);\\n        // we can not have random point z be in domain\\n        require(vanishing_at_z.value != 0);\\n        PairingsBn254.Fr[] memory nums = new PairingsBn254.Fr[](poly_nums.length);\\n        PairingsBn254.Fr[] memory dens = new PairingsBn254.Fr[](poly_nums.length);\\n        // numerators in a form omega^i * (z^n - 1)\\n        // denoms in a form (z - omega^i) * N\\n        for (uint256 i = 0; i < poly_nums.length; i++) {\\n            tmp_1 = omega.pow(poly_nums[i]); // power of omega\\n            nums[i].assign(vanishing_at_z);\\n            nums[i].mul_assign(tmp_1);\\n\\n            dens[i].assign(at); // (X - omega^i) * N\\n            dens[i].sub_assign(tmp_1);\\n            dens[i].mul_assign(tmp_2); // mul by domain size\\n        }\\n\\n        PairingsBn254.Fr[] memory partial_products = new PairingsBn254.Fr[](poly_nums.length);\\n        partial_products[0].assign(PairingsBn254.new_fr(1));\\n        for (uint256 i = 1; i < dens.length - 1; i++) {\\n            partial_products[i].assign(dens[i - 1]);\\n            partial_products[i].mul_assign(dens[i]);\\n        }\\n\\n        tmp_2.assign(partial_products[partial_products.length - 1]);\\n        tmp_2.mul_assign(dens[dens.length - 1]);\\n        tmp_2 = tmp_2.inverse(); // tmp_2 contains a^-1 * b^-1 (with! the last one)\\n\\n        for (uint256 i = dens.length - 1; i < dens.length; i--) {\\n            dens[i].assign(tmp_2); // all inversed\\n            dens[i].mul_assign(partial_products[i]); // clear lowest terms\\n            tmp_2.mul_assign(dens[i]);\\n        }\\n\\n        for (uint256 i = 0; i < nums.length; i++) {\\n            nums[i].mul_assign(dens[i]);\\n        }\\n\\n        return nums;\\n    }\\n\\n    function evaluate_vanishing(uint256 domain_size, PairingsBn254.Fr memory at)\\n        internal\\n        view\\n        returns (PairingsBn254.Fr memory res)\\n    {\\n        res = at.pow(domain_size);\\n        res.sub_assign(PairingsBn254.new_fr(1));\\n    }\\n\\n    function verify_at_z(\\n        PartialVerifierState memory state,\\n        Proof memory proof,\\n        VerificationKey memory vk\\n    ) internal view returns (bool) {\\n        PairingsBn254.Fr memory lhs = evaluate_vanishing(vk.domain_size, state.z);\\n        require(lhs.value != 0); // we can not check a polynomial relationship if point `z` is in the domain\\n        lhs.mul_assign(proof.quotient_polynomial_at_z);\\n\\n        PairingsBn254.Fr memory quotient_challenge = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory rhs = PairingsBn254.copy(proof.linearization_polynomial_at_z);\\n\\n        // public inputs\\n        PairingsBn254.Fr memory tmp = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory inputs_term = PairingsBn254.new_fr(0);\\n        for (uint256 i = 0; i < proof.input_values.length; i++) {\\n            tmp.assign(state.cached_lagrange_evals[i]);\\n            tmp.mul_assign(PairingsBn254.new_fr(proof.input_values[i]));\\n            inputs_term.add_assign(tmp);\\n        }\\n\\n        inputs_term.mul_assign(proof.gate_selector_values_at_z[0]);\\n        rhs.add_assign(inputs_term);\\n\\n        // now we need 5th power\\n        quotient_challenge.mul_assign(state.alpha);\\n        quotient_challenge.mul_assign(state.alpha);\\n        quotient_challenge.mul_assign(state.alpha);\\n        quotient_challenge.mul_assign(state.alpha);\\n        quotient_challenge.mul_assign(state.alpha);\\n\\n        PairingsBn254.Fr memory z_part = PairingsBn254.copy(proof.copy_grand_product_at_z_omega);\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            tmp.assign(proof.permutation_polynomials_at_z[i]);\\n            tmp.mul_assign(state.beta);\\n            tmp.add_assign(state.gamma);\\n            tmp.add_assign(proof.wire_values_at_z[i]);\\n\\n            z_part.mul_assign(tmp);\\n        }\\n\\n        tmp.assign(state.gamma);\\n        // we need a wire value of the last polynomial in enumeration\\n        tmp.add_assign(proof.wire_values_at_z[STATE_WIDTH - 1]);\\n\\n        z_part.mul_assign(tmp);\\n        z_part.mul_assign(quotient_challenge);\\n\\n        rhs.sub_assign(z_part);\\n\\n        quotient_challenge.mul_assign(state.alpha);\\n\\n        tmp.assign(state.cached_lagrange_evals[0]);\\n        tmp.mul_assign(quotient_challenge);\\n\\n        rhs.sub_assign(tmp);\\n\\n        return lhs.value == rhs.value;\\n    }\\n\\n    function add_contribution_from_range_constraint_gates(\\n        PartialVerifierState memory state,\\n        Proof memory proof,\\n        PairingsBn254.Fr memory current_alpha\\n    ) internal pure returns (PairingsBn254.Fr memory res) {\\n        // now add contribution from range constraint gate\\n        // we multiply selector commitment by all the factors (alpha*(c - 4d)(c - 4d - 1)(..-2)(..-3) + alpha^2 * (4b - c)()()() + {} + {})\\n\\n        PairingsBn254.Fr memory one_fr = PairingsBn254.new_fr(ONE);\\n        PairingsBn254.Fr memory two_fr = PairingsBn254.new_fr(TWO);\\n        PairingsBn254.Fr memory three_fr = PairingsBn254.new_fr(THREE);\\n        PairingsBn254.Fr memory four_fr = PairingsBn254.new_fr(FOUR);\\n\\n        res = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory t0 = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory t1 = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory t2 = PairingsBn254.new_fr(0);\\n\\n        for (uint256 i = 0; i < 3; i++) {\\n            current_alpha.mul_assign(state.alpha);\\n\\n            // high - 4*low\\n\\n            // this is 4*low\\n            t0 = PairingsBn254.copy(proof.wire_values_at_z[3 - i]);\\n            t0.mul_assign(four_fr);\\n\\n            // high\\n            t1 = PairingsBn254.copy(proof.wire_values_at_z[2 - i]);\\n            t1.sub_assign(t0);\\n\\n            // t0 is now t1 - {0,1,2,3}\\n\\n            // first unroll manually for -0;\\n            t2 = PairingsBn254.copy(t1);\\n\\n            // -1\\n            t0 = PairingsBn254.copy(t1);\\n            t0.sub_assign(one_fr);\\n            t2.mul_assign(t0);\\n\\n            // -2\\n            t0 = PairingsBn254.copy(t1);\\n            t0.sub_assign(two_fr);\\n            t2.mul_assign(t0);\\n\\n            // -3\\n            t0 = PairingsBn254.copy(t1);\\n            t0.sub_assign(three_fr);\\n            t2.mul_assign(t0);\\n\\n            t2.mul_assign(current_alpha);\\n\\n            res.add_assign(t2);\\n        }\\n\\n        // now also d_next - 4a\\n\\n        current_alpha.mul_assign(state.alpha);\\n\\n        // high - 4*low\\n\\n        // this is 4*low\\n        t0 = PairingsBn254.copy(proof.wire_values_at_z[0]);\\n        t0.mul_assign(four_fr);\\n\\n        // high\\n        t1 = PairingsBn254.copy(proof.wire_values_at_z_omega[0]);\\n        t1.sub_assign(t0);\\n\\n        // t0 is now t1 - {0,1,2,3}\\n\\n        // first unroll manually for -0;\\n        t2 = PairingsBn254.copy(t1);\\n\\n        // -1\\n        t0 = PairingsBn254.copy(t1);\\n        t0.sub_assign(one_fr);\\n        t2.mul_assign(t0);\\n\\n        // -2\\n        t0 = PairingsBn254.copy(t1);\\n        t0.sub_assign(two_fr);\\n        t2.mul_assign(t0);\\n\\n        // -3\\n        t0 = PairingsBn254.copy(t1);\\n        t0.sub_assign(three_fr);\\n        t2.mul_assign(t0);\\n\\n        t2.mul_assign(current_alpha);\\n\\n        res.add_assign(t2);\\n\\n        return res;\\n    }\\n\\n    function reconstruct_linearization_commitment(\\n        PartialVerifierState memory state,\\n        Proof memory proof,\\n        VerificationKey memory vk\\n    ) internal view returns (PairingsBn254.G1Point memory res) {\\n        // we compute what power of v is used as a delinearization factor in batch opening of\\n        // commitments. Let's label W(x) = 1 / (x - z) *\\n        // [\\n        // t_0(x) + z^n * t_1(x) + z^2n * t_2(x) + z^3n * t_3(x) - t(z)\\n        // + v (r(x) - r(z))\\n        // + v^{2..5} * (witness(x) - witness(z))\\n        // + v^{6} * (selector(x) - selector(z))\\n        // + v^{7..9} * (permutation(x) - permutation(z))\\n        // ]\\n        // W'(x) = 1 / (x - z*omega) *\\n        // [\\n        // + v^10 (z(x) - z(z*omega)) <- we need this power\\n        // + v^11 * (d(x) - d(z*omega))\\n        // ]\\n        //\\n\\n        // we reconstruct linearization polynomial virtual selector\\n        // for that purpose we first linearize over main gate (over all it's selectors)\\n        // and multiply them by value(!) of the corresponding main gate selector\\n        res = PairingsBn254.copy_g1(vk.gate_setup_commitments[STATE_WIDTH + 1]); // index of q_const(x)\\n\\n        PairingsBn254.G1Point memory tmp_g1 = PairingsBn254.P1();\\n        PairingsBn254.Fr memory tmp_fr = PairingsBn254.new_fr(0);\\n\\n        // addition gates\\n        for (uint256 i = 0; i < STATE_WIDTH; i++) {\\n            tmp_g1 = vk.gate_setup_commitments[i].point_mul(proof.wire_values_at_z[i]);\\n            res.point_add_assign(tmp_g1);\\n        }\\n\\n        // multiplication gate\\n        tmp_fr.assign(proof.wire_values_at_z[0]);\\n        tmp_fr.mul_assign(proof.wire_values_at_z[1]);\\n        tmp_g1 = vk.gate_setup_commitments[STATE_WIDTH].point_mul(tmp_fr);\\n        res.point_add_assign(tmp_g1);\\n\\n        // d_next\\n        tmp_g1 = vk.gate_setup_commitments[STATE_WIDTH + 2].point_mul(proof.wire_values_at_z_omega[0]); // index of q_d_next(x)\\n        res.point_add_assign(tmp_g1);\\n\\n        // multiply by main gate selector(z)\\n        res.point_mul_assign(proof.gate_selector_values_at_z[0]); // these is only one explicitly opened selector\\n\\n        PairingsBn254.Fr memory current_alpha = PairingsBn254.new_fr(ONE);\\n\\n        // calculate scalar contribution from the range check gate\\n        tmp_fr = add_contribution_from_range_constraint_gates(state, proof, current_alpha);\\n        tmp_g1 = vk.gate_selector_commitments[1].point_mul(tmp_fr); // selector commitment for range constraint gate * scalar\\n        res.point_add_assign(tmp_g1);\\n\\n        // proceed as normal to copy permutation\\n        current_alpha.mul_assign(state.alpha); // alpha^5\\n\\n        PairingsBn254.Fr memory alpha_for_grand_product = PairingsBn254.copy(current_alpha);\\n\\n        // z * non_res * beta + gamma + a\\n        PairingsBn254.Fr memory grand_product_part_at_z = PairingsBn254.copy(state.z);\\n        grand_product_part_at_z.mul_assign(state.beta);\\n        grand_product_part_at_z.add_assign(proof.wire_values_at_z[0]);\\n        grand_product_part_at_z.add_assign(state.gamma);\\n        for (uint256 i = 0; i < vk.copy_permutation_non_residues.length; i++) {\\n            tmp_fr.assign(state.z);\\n            tmp_fr.mul_assign(vk.copy_permutation_non_residues[i]);\\n            tmp_fr.mul_assign(state.beta);\\n            tmp_fr.add_assign(state.gamma);\\n            tmp_fr.add_assign(proof.wire_values_at_z[i + 1]);\\n\\n            grand_product_part_at_z.mul_assign(tmp_fr);\\n        }\\n\\n        grand_product_part_at_z.mul_assign(alpha_for_grand_product);\\n\\n        // alpha^n & L_{0}(z), and we bump current_alpha\\n        current_alpha.mul_assign(state.alpha);\\n\\n        tmp_fr.assign(state.cached_lagrange_evals[0]);\\n        tmp_fr.mul_assign(current_alpha);\\n\\n        grand_product_part_at_z.add_assign(tmp_fr);\\n\\n        // prefactor for grand_product(x) is complete\\n\\n        // add to the linearization a part from the term\\n        // - (a(z) + beta*perm_a + gamma)*()*()*z(z*omega) * beta * perm_d(X)\\n        PairingsBn254.Fr memory last_permutation_part_at_z = PairingsBn254.new_fr(1);\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            tmp_fr.assign(state.beta);\\n            tmp_fr.mul_assign(proof.permutation_polynomials_at_z[i]);\\n            tmp_fr.add_assign(state.gamma);\\n            tmp_fr.add_assign(proof.wire_values_at_z[i]);\\n\\n            last_permutation_part_at_z.mul_assign(tmp_fr);\\n        }\\n\\n        last_permutation_part_at_z.mul_assign(state.beta);\\n        last_permutation_part_at_z.mul_assign(proof.copy_grand_product_at_z_omega);\\n        last_permutation_part_at_z.mul_assign(alpha_for_grand_product); // we multiply by the power of alpha from the argument\\n\\n        // actually multiply prefactors by z(x) and perm_d(x) and combine them\\n        tmp_g1 = proof.copy_permutation_grand_product_commitment.point_mul(grand_product_part_at_z);\\n        tmp_g1.point_sub_assign(vk.copy_permutation_commitments[STATE_WIDTH - 1].point_mul(last_permutation_part_at_z));\\n\\n        res.point_add_assign(tmp_g1);\\n        // multiply them by v immedately as linearization has a factor of v^1\\n        res.point_mul_assign(state.v);\\n        // res now contains contribution from the gates linearization and\\n        // copy permutation part\\n\\n        // now we need to add a part that is the rest\\n        // for z(x*omega):\\n        // - (a(z) + beta*perm_a + gamma)*()*()*(d(z) + gamma) * z(x*omega)\\n    }\\n\\n    function aggregate_commitments(\\n        PartialVerifierState memory state,\\n        Proof memory proof,\\n        VerificationKey memory vk\\n    ) internal view returns (PairingsBn254.G1Point[2] memory res) {\\n        PairingsBn254.G1Point memory d = reconstruct_linearization_commitment(state, proof, vk);\\n\\n        PairingsBn254.Fr memory z_in_domain_size = state.z.pow(vk.domain_size);\\n\\n        PairingsBn254.G1Point memory tmp_g1 = PairingsBn254.P1();\\n\\n        PairingsBn254.Fr memory aggregation_challenge = PairingsBn254.new_fr(1);\\n\\n        PairingsBn254.G1Point memory commitment_aggregation = PairingsBn254.copy_g1(proof.quotient_poly_commitments[0]);\\n        PairingsBn254.Fr memory tmp_fr = PairingsBn254.new_fr(1);\\n        for (uint256 i = 1; i < proof.quotient_poly_commitments.length; i++) {\\n            tmp_fr.mul_assign(z_in_domain_size);\\n            tmp_g1 = proof.quotient_poly_commitments[i].point_mul(tmp_fr);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n        commitment_aggregation.point_add_assign(d);\\n\\n        for (uint256 i = 0; i < proof.wire_commitments.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_g1 = proof.wire_commitments[i].point_mul(aggregation_challenge);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        for (uint256 i = 0; i < NUM_GATE_SELECTORS_OPENED_EXPLICITLY; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_g1 = vk.gate_selector_commitments[0].point_mul(aggregation_challenge);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        for (uint256 i = 0; i < vk.copy_permutation_commitments.length - 1; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_g1 = vk.copy_permutation_commitments[i].point_mul(aggregation_challenge);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n        // now do prefactor for grand_product(x*omega)\\n        tmp_fr.assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        commitment_aggregation.point_add_assign(proof.copy_permutation_grand_product_commitment.point_mul(tmp_fr));\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        tmp_g1 = proof.wire_commitments[STATE_WIDTH - 1].point_mul(tmp_fr);\\n        commitment_aggregation.point_add_assign(tmp_g1);\\n\\n        // collect opening values\\n        aggregation_challenge = PairingsBn254.new_fr(1);\\n\\n        PairingsBn254.Fr memory aggregated_value = PairingsBn254.copy(proof.quotient_polynomial_at_z);\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.linearization_polynomial_at_z);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n\\n            tmp_fr.assign(proof.wire_values_at_z[i]);\\n            tmp_fr.mul_assign(aggregation_challenge);\\n            aggregated_value.add_assign(tmp_fr);\\n        }\\n\\n        for (uint256 i = 0; i < proof.gate_selector_values_at_z.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_fr.assign(proof.gate_selector_values_at_z[i]);\\n            tmp_fr.mul_assign(aggregation_challenge);\\n            aggregated_value.add_assign(tmp_fr);\\n        }\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n\\n            tmp_fr.assign(proof.permutation_polynomials_at_z[i]);\\n            tmp_fr.mul_assign(aggregation_challenge);\\n            aggregated_value.add_assign(tmp_fr);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.copy_grand_product_at_z_omega);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.wire_values_at_z_omega[0]);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        commitment_aggregation.point_sub_assign(PairingsBn254.P1().point_mul(aggregated_value));\\n\\n        PairingsBn254.G1Point memory pair_with_generator = commitment_aggregation;\\n        pair_with_generator.point_add_assign(proof.opening_at_z_proof.point_mul(state.z));\\n\\n        tmp_fr.assign(state.z);\\n        tmp_fr.mul_assign(vk.omega);\\n        tmp_fr.mul_assign(state.u);\\n        pair_with_generator.point_add_assign(proof.opening_at_z_omega_proof.point_mul(tmp_fr));\\n\\n        PairingsBn254.G1Point memory pair_with_x = proof.opening_at_z_omega_proof.point_mul(state.u);\\n        pair_with_x.point_add_assign(proof.opening_at_z_proof);\\n        pair_with_x.negate();\\n\\n        res[0] = pair_with_generator;\\n        res[1] = pair_with_x;\\n\\n        return res;\\n    }\\n\\n    function verify_initial(\\n        PartialVerifierState memory state,\\n        Proof memory proof,\\n        VerificationKey memory vk\\n    ) internal view returns (bool) {\\n        require(proof.input_values.length == vk.num_inputs);\\n        require(vk.num_inputs >= 1);\\n        TranscriptLibrary.Transcript memory transcript = TranscriptLibrary.new_transcript();\\n        for (uint256 i = 0; i < vk.num_inputs; i++) {\\n            transcript.update_with_u256(proof.input_values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_commitments.length; i++) {\\n            transcript.update_with_g1(proof.wire_commitments[i]);\\n        }\\n\\n        state.beta = transcript.get_challenge();\\n        state.gamma = transcript.get_challenge();\\n\\n        transcript.update_with_g1(proof.copy_permutation_grand_product_commitment);\\n        state.alpha = transcript.get_challenge();\\n\\n        for (uint256 i = 0; i < proof.quotient_poly_commitments.length; i++) {\\n            transcript.update_with_g1(proof.quotient_poly_commitments[i]);\\n        }\\n\\n        state.z = transcript.get_challenge();\\n\\n        uint256[] memory lagrange_poly_numbers = new uint256[](vk.num_inputs);\\n        for (uint256 i = 0; i < lagrange_poly_numbers.length; i++) {\\n            lagrange_poly_numbers[i] = i;\\n        }\\n\\n        state.cached_lagrange_evals = batch_evaluate_lagrange_poly_out_of_domain(\\n            lagrange_poly_numbers,\\n            vk.domain_size,\\n            vk.omega,\\n            state.z\\n        );\\n\\n        bool valid = verify_at_z(state, proof, vk);\\n\\n        if (valid == false) {\\n            return false;\\n        }\\n\\n        transcript.update_with_fr(proof.quotient_polynomial_at_z);\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z.length; i++) {\\n            transcript.update_with_fr(proof.wire_values_at_z[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z_omega.length; i++) {\\n            transcript.update_with_fr(proof.wire_values_at_z_omega[i]);\\n        }\\n\\n        transcript.update_with_fr(proof.gate_selector_values_at_z[0]);\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            transcript.update_with_fr(proof.permutation_polynomials_at_z[i]);\\n        }\\n\\n        transcript.update_with_fr(proof.copy_grand_product_at_z_omega);\\n        transcript.update_with_fr(proof.linearization_polynomial_at_z);\\n\\n        state.v = transcript.get_challenge();\\n        transcript.update_with_g1(proof.opening_at_z_proof);\\n        transcript.update_with_g1(proof.opening_at_z_omega_proof);\\n        state.u = transcript.get_challenge();\\n\\n        return true;\\n    }\\n\\n    // This verifier is for a PLONK with a state width 4\\n    // and main gate equation\\n    // q_a(X) * a(X) +\\n    // q_b(X) * b(X) +\\n    // q_c(X) * c(X) +\\n    // q_d(X) * d(X) +\\n    // q_m(X) * a(X) * b(X) +\\n    // q_constants(X)+\\n    // q_d_next(X) * d(X*omega)\\n    // where q_{}(X) are selectors a, b, c, d - state (witness) polynomials\\n    // q_d_next(X) \\\"peeks\\\" into the next row of the trace, so it takes\\n    // the same d(X) polynomial, but shifted\\n\\n    function aggregate_for_verification(Proof memory proof, VerificationKey memory vk)\\n        internal\\n        view\\n        returns (bool valid, PairingsBn254.G1Point[2] memory part)\\n    {\\n        PartialVerifierState memory state;\\n\\n        valid = verify_initial(state, proof, vk);\\n\\n        if (valid == false) {\\n            return (valid, part);\\n        }\\n\\n        part = aggregate_commitments(state, proof, vk);\\n\\n        (valid, part);\\n    }\\n\\n    function verify(Proof memory proof, VerificationKey memory vk) internal view returns (bool) {\\n        (bool valid, PairingsBn254.G1Point[2] memory recursive_proof_part) = aggregate_for_verification(proof, vk);\\n        if (valid == false) {\\n            return false;\\n        }\\n\\n        valid = PairingsBn254.pairingProd2(\\n            recursive_proof_part[0],\\n            PairingsBn254.P2(),\\n            recursive_proof_part[1],\\n            vk.g2_x\\n        );\\n\\n        return valid;\\n    }\\n\\n    function verify_recursive(\\n        Proof memory proof,\\n        VerificationKey memory vk,\\n        uint256 recursive_vks_root,\\n        uint8 max_valid_index,\\n        uint8[] memory recursive_vks_indexes,\\n        uint256[] memory individual_vks_inputs,\\n        uint256[16] memory subproofs_limbs\\n    ) internal view returns (bool) {\\n        (uint256 recursive_input, PairingsBn254.G1Point[2] memory aggregated_g1s) =\\n            reconstruct_recursive_public_input(\\n                recursive_vks_root,\\n                max_valid_index,\\n                recursive_vks_indexes,\\n                individual_vks_inputs,\\n                subproofs_limbs\\n            );\\n\\n        assert(recursive_input == proof.input_values[0]);\\n\\n        (bool valid, PairingsBn254.G1Point[2] memory recursive_proof_part) = aggregate_for_verification(proof, vk);\\n        if (valid == false) {\\n            return false;\\n        }\\n\\n        // aggregated_g1s = inner\\n        // recursive_proof_part = outer\\n        PairingsBn254.G1Point[2] memory combined = combine_inner_and_outer(aggregated_g1s, recursive_proof_part);\\n\\n        valid = PairingsBn254.pairingProd2(combined[0], PairingsBn254.P2(), combined[1], vk.g2_x);\\n\\n        return valid;\\n    }\\n\\n    function combine_inner_and_outer(PairingsBn254.G1Point[2] memory inner, PairingsBn254.G1Point[2] memory outer)\\n        internal\\n        view\\n        returns (PairingsBn254.G1Point[2] memory result)\\n    {\\n        // reuse the transcript primitive\\n        TranscriptLibrary.Transcript memory transcript = TranscriptLibrary.new_transcript();\\n        transcript.update_with_g1(inner[0]);\\n        transcript.update_with_g1(inner[1]);\\n        transcript.update_with_g1(outer[0]);\\n        transcript.update_with_g1(outer[1]);\\n        PairingsBn254.Fr memory challenge = transcript.get_challenge();\\n        // 1 * inner + challenge * outer\\n        result[0] = PairingsBn254.copy_g1(inner[0]);\\n        result[1] = PairingsBn254.copy_g1(inner[1]);\\n        PairingsBn254.G1Point memory tmp = outer[0].point_mul(challenge);\\n        result[0].point_add_assign(tmp);\\n        tmp = outer[1].point_mul(challenge);\\n        result[1].point_add_assign(tmp);\\n\\n        return result;\\n    }\\n\\n    function reconstruct_recursive_public_input(\\n        uint256 recursive_vks_root,\\n        uint8 max_valid_index,\\n        uint8[] memory recursive_vks_indexes,\\n        uint256[] memory individual_vks_inputs,\\n        uint256[16] memory subproofs_aggregated\\n    ) internal pure returns (uint256 recursive_input, PairingsBn254.G1Point[2] memory reconstructed_g1s) {\\n        assert(recursive_vks_indexes.length == individual_vks_inputs.length);\\n        bytes memory concatenated = abi.encodePacked(recursive_vks_root);\\n        uint8 index;\\n        for (uint256 i = 0; i < recursive_vks_indexes.length; i++) {\\n            index = recursive_vks_indexes[i];\\n            assert(index <= max_valid_index);\\n            concatenated = abi.encodePacked(concatenated, index);\\n        }\\n        uint256 input;\\n        for (uint256 i = 0; i < recursive_vks_indexes.length; i++) {\\n            input = individual_vks_inputs[i];\\n            assert(input < r_mod);\\n            concatenated = abi.encodePacked(concatenated, input);\\n        }\\n\\n        concatenated = abi.encodePacked(concatenated, subproofs_aggregated);\\n\\n        bytes32 commitment = sha256(concatenated);\\n        recursive_input = uint256(commitment) & RECURSIVE_CIRCUIT_INPUT_COMMITMENT_MASK;\\n\\n        reconstructed_g1s[0] = PairingsBn254.new_g1_checked(\\n            subproofs_aggregated[0] +\\n                (subproofs_aggregated[1] << LIMB_WIDTH) +\\n                (subproofs_aggregated[2] << (2 * LIMB_WIDTH)) +\\n                (subproofs_aggregated[3] << (3 * LIMB_WIDTH)),\\n            subproofs_aggregated[4] +\\n                (subproofs_aggregated[5] << LIMB_WIDTH) +\\n                (subproofs_aggregated[6] << (2 * LIMB_WIDTH)) +\\n                (subproofs_aggregated[7] << (3 * LIMB_WIDTH))\\n        );\\n\\n        reconstructed_g1s[1] = PairingsBn254.new_g1_checked(\\n            subproofs_aggregated[8] +\\n                (subproofs_aggregated[9] << LIMB_WIDTH) +\\n                (subproofs_aggregated[10] << (2 * LIMB_WIDTH)) +\\n                (subproofs_aggregated[11] << (3 * LIMB_WIDTH)),\\n            subproofs_aggregated[12] +\\n                (subproofs_aggregated[13] << LIMB_WIDTH) +\\n                (subproofs_aggregated[14] << (2 * LIMB_WIDTH)) +\\n                (subproofs_aggregated[15] << (3 * LIMB_WIDTH))\\n        );\\n\\n        return (recursive_input, reconstructed_g1s);\\n    }\\n}\\n\\ncontract VerifierWithDeserialize is Plonk4VerifierWithAccessToDNext {\\n    uint256 constant SERIALIZED_PROOF_LENGTH = 34;\\n\\n    function deserialize_proof(uint256[] memory public_inputs, uint256[] memory serialized_proof)\\n        internal\\n        pure\\n        returns (Proof memory proof)\\n    {\\n        require(serialized_proof.length == SERIALIZED_PROOF_LENGTH);\\n        proof.input_values = new uint256[](public_inputs.length);\\n        for (uint256 i = 0; i < public_inputs.length; i++) {\\n            proof.input_values[i] = public_inputs[i];\\n        }\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < STATE_WIDTH; i++) {\\n            proof.wire_commitments[i] = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n\\n            j += 2;\\n        }\\n\\n        proof.copy_permutation_grand_product_commitment = PairingsBn254.new_g1_checked(\\n            serialized_proof[j],\\n            serialized_proof[j + 1]\\n        );\\n        j += 2;\\n\\n        for (uint256 i = 0; i < STATE_WIDTH; i++) {\\n            proof.quotient_poly_commitments[i] = PairingsBn254.new_g1_checked(\\n                serialized_proof[j],\\n                serialized_proof[j + 1]\\n            );\\n\\n            j += 2;\\n        }\\n\\n        for (uint256 i = 0; i < STATE_WIDTH; i++) {\\n            proof.wire_values_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z_omega.length; i++) {\\n            proof.wire_values_at_z_omega[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        for (uint256 i = 0; i < proof.gate_selector_values_at_z.length; i++) {\\n            proof.gate_selector_values_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            proof.permutation_polynomials_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        proof.copy_grand_product_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        proof.quotient_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        proof.linearization_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        proof.opening_at_z_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n        j += 2;\\n\\n        proof.opening_at_z_omega_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n    }\\n\\n    function verify_serialized_proof(\\n        uint256[] memory public_inputs,\\n        uint256[] memory serialized_proof,\\n        VerificationKey memory vk\\n    ) public view returns (bool) {\\n        require(vk.num_inputs == public_inputs.length);\\n\\n        Proof memory proof = deserialize_proof(public_inputs, serialized_proof);\\n\\n        bool valid = verify(proof, vk);\\n\\n        return valid;\\n    }\\n\\n    function verify_serialized_proof_with_recursion(\\n        uint256[] memory public_inputs,\\n        uint256[] memory serialized_proof,\\n        uint256 recursive_vks_root,\\n        uint8 max_valid_index,\\n        uint8[] memory recursive_vks_indexes,\\n        uint256[] memory individual_vks_inputs,\\n        uint256[16] memory subproofs_limbs,\\n        VerificationKey memory vk\\n    ) public view returns (bool) {\\n        require(vk.num_inputs == public_inputs.length);\\n\\n        Proof memory proof = deserialize_proof(public_inputs, serialized_proof);\\n\\n        bool valid =\\n            verify_recursive(\\n                proof,\\n                vk,\\n                recursive_vks_root,\\n                max_valid_index,\\n                recursive_vks_indexes,\\n                individual_vks_inputs,\\n                subproofs_limbs\\n            );\\n\\n        return valid;\\n    }\\n}\\n\\ncontract Plonk4VerifierWithAccessToDNextOld {\\n    using PairingsBn254 for PairingsBn254.G1Point;\\n    using PairingsBn254 for PairingsBn254.G2Point;\\n    using PairingsBn254 for PairingsBn254.Fr;\\n\\n    using TranscriptLibrary for TranscriptLibrary.Transcript;\\n\\n    uint256 constant STATE_WIDTH_OLD = 4;\\n    uint256 constant ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP_OLD = 1;\\n\\n    struct VerificationKeyOld {\\n        uint256 domain_size;\\n        uint256 num_inputs;\\n        PairingsBn254.Fr omega;\\n        PairingsBn254.G1Point[STATE_WIDTH_OLD + 2] selector_commitments; // STATE_WIDTH for witness + multiplication + constant\\n        PairingsBn254.G1Point[ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP_OLD] next_step_selector_commitments;\\n        PairingsBn254.G1Point[STATE_WIDTH_OLD] permutation_commitments;\\n        PairingsBn254.Fr[STATE_WIDTH_OLD - 1] permutation_non_residues;\\n        PairingsBn254.G2Point g2_x;\\n    }\\n\\n    struct ProofOld {\\n        uint256[] input_values;\\n        PairingsBn254.G1Point[STATE_WIDTH_OLD] wire_commitments;\\n        PairingsBn254.G1Point grand_product_commitment;\\n        PairingsBn254.G1Point[STATE_WIDTH_OLD] quotient_poly_commitments;\\n        PairingsBn254.Fr[STATE_WIDTH_OLD] wire_values_at_z;\\n        PairingsBn254.Fr[ACCESSIBLE_STATE_POLYS_ON_NEXT_STEP_OLD] wire_values_at_z_omega;\\n        PairingsBn254.Fr grand_product_at_z_omega;\\n        PairingsBn254.Fr quotient_polynomial_at_z;\\n        PairingsBn254.Fr linearization_polynomial_at_z;\\n        PairingsBn254.Fr[STATE_WIDTH_OLD - 1] permutation_polynomials_at_z;\\n        PairingsBn254.G1Point opening_at_z_proof;\\n        PairingsBn254.G1Point opening_at_z_omega_proof;\\n    }\\n\\n    struct PartialVerifierStateOld {\\n        PairingsBn254.Fr alpha;\\n        PairingsBn254.Fr beta;\\n        PairingsBn254.Fr gamma;\\n        PairingsBn254.Fr v;\\n        PairingsBn254.Fr u;\\n        PairingsBn254.Fr z;\\n        PairingsBn254.Fr[] cached_lagrange_evals;\\n    }\\n\\n    function evaluate_lagrange_poly_out_of_domain_old(\\n        uint256 poly_num,\\n        uint256 domain_size,\\n        PairingsBn254.Fr memory omega,\\n        PairingsBn254.Fr memory at\\n    ) internal view returns (PairingsBn254.Fr memory res) {\\n        require(poly_num < domain_size);\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory omega_power = omega.pow(poly_num);\\n        res = at.pow(domain_size);\\n        res.sub_assign(one);\\n        require(res.value != 0); // Vanishing polynomial can not be zero at point `at`\\n        res.mul_assign(omega_power);\\n\\n        PairingsBn254.Fr memory den = PairingsBn254.copy(at);\\n        den.sub_assign(omega_power);\\n        den.mul_assign(PairingsBn254.new_fr(domain_size));\\n\\n        den = den.inverse();\\n\\n        res.mul_assign(den);\\n    }\\n\\n    function batch_evaluate_lagrange_poly_out_of_domain_old(\\n        uint256[] memory poly_nums,\\n        uint256 domain_size,\\n        PairingsBn254.Fr memory omega,\\n        PairingsBn254.Fr memory at\\n    ) internal view returns (PairingsBn254.Fr[] memory res) {\\n        PairingsBn254.Fr memory one = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory tmp_1 = PairingsBn254.new_fr(0);\\n        PairingsBn254.Fr memory tmp_2 = PairingsBn254.new_fr(domain_size);\\n        PairingsBn254.Fr memory vanishing_at_z = at.pow(domain_size);\\n        vanishing_at_z.sub_assign(one);\\n        // we can not have random point z be in domain\\n        require(vanishing_at_z.value != 0);\\n        PairingsBn254.Fr[] memory nums = new PairingsBn254.Fr[](poly_nums.length);\\n        PairingsBn254.Fr[] memory dens = new PairingsBn254.Fr[](poly_nums.length);\\n        // numerators in a form omega^i * (z^n - 1)\\n        // denoms in a form (z - omega^i) * N\\n        for (uint256 i = 0; i < poly_nums.length; i++) {\\n            tmp_1 = omega.pow(poly_nums[i]); // power of omega\\n            nums[i].assign(vanishing_at_z);\\n            nums[i].mul_assign(tmp_1);\\n\\n            dens[i].assign(at); // (X - omega^i) * N\\n            dens[i].sub_assign(tmp_1);\\n            dens[i].mul_assign(tmp_2); // mul by domain size\\n        }\\n\\n        PairingsBn254.Fr[] memory partial_products = new PairingsBn254.Fr[](poly_nums.length);\\n        partial_products[0].assign(PairingsBn254.new_fr(1));\\n        for (uint256 i = 1; i < dens.length - 1; i++) {\\n            partial_products[i].assign(dens[i - 1]);\\n            partial_products[i].mul_assign(dens[i]);\\n        }\\n\\n        tmp_2.assign(partial_products[partial_products.length - 1]);\\n        tmp_2.mul_assign(dens[dens.length - 1]);\\n        tmp_2 = tmp_2.inverse(); // tmp_2 contains a^-1 * b^-1 (with! the last one)\\n\\n        for (uint256 i = dens.length - 1; i < dens.length; i--) {\\n            dens[i].assign(tmp_2); // all inversed\\n            dens[i].mul_assign(partial_products[i]); // clear lowest terms\\n            tmp_2.mul_assign(dens[i]);\\n        }\\n\\n        for (uint256 i = 0; i < nums.length; i++) {\\n            nums[i].mul_assign(dens[i]);\\n        }\\n\\n        return nums;\\n    }\\n\\n    function evaluate_vanishing_old(uint256 domain_size, PairingsBn254.Fr memory at)\\n        internal\\n        view\\n        returns (PairingsBn254.Fr memory res)\\n    {\\n        res = at.pow(domain_size);\\n        res.sub_assign(PairingsBn254.new_fr(1));\\n    }\\n\\n    function verify_at_z(\\n        PartialVerifierStateOld memory state,\\n        ProofOld memory proof,\\n        VerificationKeyOld memory vk\\n    ) internal view returns (bool) {\\n        PairingsBn254.Fr memory lhs = evaluate_vanishing_old(vk.domain_size, state.z);\\n        require(lhs.value != 0); // we can not check a polynomial relationship if point `z` is in the domain\\n        lhs.mul_assign(proof.quotient_polynomial_at_z);\\n\\n        PairingsBn254.Fr memory quotient_challenge = PairingsBn254.new_fr(1);\\n        PairingsBn254.Fr memory rhs = PairingsBn254.copy(proof.linearization_polynomial_at_z);\\n\\n        // public inputs\\n        PairingsBn254.Fr memory tmp = PairingsBn254.new_fr(0);\\n        for (uint256 i = 0; i < proof.input_values.length; i++) {\\n            tmp.assign(state.cached_lagrange_evals[i]);\\n            tmp.mul_assign(PairingsBn254.new_fr(proof.input_values[i]));\\n            rhs.add_assign(tmp);\\n        }\\n\\n        quotient_challenge.mul_assign(state.alpha);\\n\\n        PairingsBn254.Fr memory z_part = PairingsBn254.copy(proof.grand_product_at_z_omega);\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            tmp.assign(proof.permutation_polynomials_at_z[i]);\\n            tmp.mul_assign(state.beta);\\n            tmp.add_assign(state.gamma);\\n            tmp.add_assign(proof.wire_values_at_z[i]);\\n\\n            z_part.mul_assign(tmp);\\n        }\\n\\n        tmp.assign(state.gamma);\\n        // we need a wire value of the last polynomial in enumeration\\n        tmp.add_assign(proof.wire_values_at_z[STATE_WIDTH_OLD - 1]);\\n\\n        z_part.mul_assign(tmp);\\n        z_part.mul_assign(quotient_challenge);\\n\\n        rhs.sub_assign(z_part);\\n\\n        quotient_challenge.mul_assign(state.alpha);\\n\\n        tmp.assign(state.cached_lagrange_evals[0]);\\n        tmp.mul_assign(quotient_challenge);\\n\\n        rhs.sub_assign(tmp);\\n\\n        return lhs.value == rhs.value;\\n    }\\n\\n    function reconstruct_d(\\n        PartialVerifierStateOld memory state,\\n        ProofOld memory proof,\\n        VerificationKeyOld memory vk\\n    ) internal view returns (PairingsBn254.G1Point memory res) {\\n        // we compute what power of v is used as a delinearization factor in batch opening of\\n        // commitments. Let's label W(x) = 1 / (x - z) *\\n        // [\\n        // t_0(x) + z^n * t_1(x) + z^2n * t_2(x) + z^3n * t_3(x) - t(z)\\n        // + v (r(x) - r(z))\\n        // + v^{2..5} * (witness(x) - witness(z))\\n        // + v^(6..8) * (permutation(x) - permutation(z))\\n        // ]\\n        // W'(x) = 1 / (x - z*omega) *\\n        // [\\n        // + v^9 (z(x) - z(z*omega)) <- we need this power\\n        // + v^10 * (d(x) - d(z*omega))\\n        // ]\\n        //\\n        // we pay a little for a few arithmetic operations to not introduce another constant\\n        uint256 power_for_z_omega_opening = 1 + 1 + STATE_WIDTH_OLD + STATE_WIDTH_OLD - 1;\\n        res = PairingsBn254.copy_g1(vk.selector_commitments[STATE_WIDTH_OLD + 1]);\\n\\n        PairingsBn254.G1Point memory tmp_g1 = PairingsBn254.P1();\\n        PairingsBn254.Fr memory tmp_fr = PairingsBn254.new_fr(0);\\n\\n        // addition gates\\n        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {\\n            tmp_g1 = vk.selector_commitments[i].point_mul(proof.wire_values_at_z[i]);\\n            res.point_add_assign(tmp_g1);\\n        }\\n\\n        // multiplication gate\\n        tmp_fr.assign(proof.wire_values_at_z[0]);\\n        tmp_fr.mul_assign(proof.wire_values_at_z[1]);\\n        tmp_g1 = vk.selector_commitments[STATE_WIDTH_OLD].point_mul(tmp_fr);\\n        res.point_add_assign(tmp_g1);\\n\\n        // d_next\\n        tmp_g1 = vk.next_step_selector_commitments[0].point_mul(proof.wire_values_at_z_omega[0]);\\n        res.point_add_assign(tmp_g1);\\n\\n        // z * non_res * beta + gamma + a\\n        PairingsBn254.Fr memory grand_product_part_at_z = PairingsBn254.copy(state.z);\\n        grand_product_part_at_z.mul_assign(state.beta);\\n        grand_product_part_at_z.add_assign(proof.wire_values_at_z[0]);\\n        grand_product_part_at_z.add_assign(state.gamma);\\n        for (uint256 i = 0; i < vk.permutation_non_residues.length; i++) {\\n            tmp_fr.assign(state.z);\\n            tmp_fr.mul_assign(vk.permutation_non_residues[i]);\\n            tmp_fr.mul_assign(state.beta);\\n            tmp_fr.add_assign(state.gamma);\\n            tmp_fr.add_assign(proof.wire_values_at_z[i + 1]);\\n\\n            grand_product_part_at_z.mul_assign(tmp_fr);\\n        }\\n\\n        grand_product_part_at_z.mul_assign(state.alpha);\\n\\n        tmp_fr.assign(state.cached_lagrange_evals[0]);\\n        tmp_fr.mul_assign(state.alpha);\\n        tmp_fr.mul_assign(state.alpha);\\n\\n        grand_product_part_at_z.add_assign(tmp_fr);\\n\\n        PairingsBn254.Fr memory grand_product_part_at_z_omega = state.v.pow(power_for_z_omega_opening);\\n        grand_product_part_at_z_omega.mul_assign(state.u);\\n\\n        PairingsBn254.Fr memory last_permutation_part_at_z = PairingsBn254.new_fr(1);\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            tmp_fr.assign(state.beta);\\n            tmp_fr.mul_assign(proof.permutation_polynomials_at_z[i]);\\n            tmp_fr.add_assign(state.gamma);\\n            tmp_fr.add_assign(proof.wire_values_at_z[i]);\\n\\n            last_permutation_part_at_z.mul_assign(tmp_fr);\\n        }\\n\\n        last_permutation_part_at_z.mul_assign(state.beta);\\n        last_permutation_part_at_z.mul_assign(proof.grand_product_at_z_omega);\\n        last_permutation_part_at_z.mul_assign(state.alpha);\\n\\n        // add to the linearization\\n        tmp_g1 = proof.grand_product_commitment.point_mul(grand_product_part_at_z);\\n        tmp_g1.point_sub_assign(vk.permutation_commitments[STATE_WIDTH_OLD - 1].point_mul(last_permutation_part_at_z));\\n\\n        res.point_add_assign(tmp_g1);\\n        res.point_mul_assign(state.v);\\n\\n        res.point_add_assign(proof.grand_product_commitment.point_mul(grand_product_part_at_z_omega));\\n    }\\n\\n    function verify_commitments(\\n        PartialVerifierStateOld memory state,\\n        ProofOld memory proof,\\n        VerificationKeyOld memory vk\\n    ) internal view returns (bool) {\\n        PairingsBn254.G1Point memory d = reconstruct_d(state, proof, vk);\\n\\n        PairingsBn254.Fr memory z_in_domain_size = state.z.pow(vk.domain_size);\\n\\n        PairingsBn254.G1Point memory tmp_g1 = PairingsBn254.P1();\\n\\n        PairingsBn254.Fr memory aggregation_challenge = PairingsBn254.new_fr(1);\\n\\n        PairingsBn254.G1Point memory commitment_aggregation = PairingsBn254.copy_g1(proof.quotient_poly_commitments[0]);\\n        PairingsBn254.Fr memory tmp_fr = PairingsBn254.new_fr(1);\\n        for (uint256 i = 1; i < proof.quotient_poly_commitments.length; i++) {\\n            tmp_fr.mul_assign(z_in_domain_size);\\n            tmp_g1 = proof.quotient_poly_commitments[i].point_mul(tmp_fr);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n        commitment_aggregation.point_add_assign(d);\\n\\n        for (uint256 i = 0; i < proof.wire_commitments.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_g1 = proof.wire_commitments[i].point_mul(aggregation_challenge);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        for (uint256 i = 0; i < vk.permutation_commitments.length - 1; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n            tmp_g1 = vk.permutation_commitments[i].point_mul(aggregation_challenge);\\n            commitment_aggregation.point_add_assign(tmp_g1);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        tmp_g1 = proof.wire_commitments[STATE_WIDTH_OLD - 1].point_mul(tmp_fr);\\n        commitment_aggregation.point_add_assign(tmp_g1);\\n\\n        // collect opening values\\n        aggregation_challenge = PairingsBn254.new_fr(1);\\n\\n        PairingsBn254.Fr memory aggregated_value = PairingsBn254.copy(proof.quotient_polynomial_at_z);\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.linearization_polynomial_at_z);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n\\n            tmp_fr.assign(proof.wire_values_at_z[i]);\\n            tmp_fr.mul_assign(aggregation_challenge);\\n            aggregated_value.add_assign(tmp_fr);\\n        }\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            aggregation_challenge.mul_assign(state.v);\\n\\n            tmp_fr.assign(proof.permutation_polynomials_at_z[i]);\\n            tmp_fr.mul_assign(aggregation_challenge);\\n            aggregated_value.add_assign(tmp_fr);\\n        }\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.grand_product_at_z_omega);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        aggregation_challenge.mul_assign(state.v);\\n\\n        tmp_fr.assign(proof.wire_values_at_z_omega[0]);\\n        tmp_fr.mul_assign(aggregation_challenge);\\n        tmp_fr.mul_assign(state.u);\\n        aggregated_value.add_assign(tmp_fr);\\n\\n        commitment_aggregation.point_sub_assign(PairingsBn254.P1().point_mul(aggregated_value));\\n\\n        PairingsBn254.G1Point memory pair_with_generator = commitment_aggregation;\\n        pair_with_generator.point_add_assign(proof.opening_at_z_proof.point_mul(state.z));\\n\\n        tmp_fr.assign(state.z);\\n        tmp_fr.mul_assign(vk.omega);\\n        tmp_fr.mul_assign(state.u);\\n        pair_with_generator.point_add_assign(proof.opening_at_z_omega_proof.point_mul(tmp_fr));\\n\\n        PairingsBn254.G1Point memory pair_with_x = proof.opening_at_z_omega_proof.point_mul(state.u);\\n        pair_with_x.point_add_assign(proof.opening_at_z_proof);\\n        pair_with_x.negate();\\n\\n        return PairingsBn254.pairingProd2(pair_with_generator, PairingsBn254.P2(), pair_with_x, vk.g2_x);\\n    }\\n\\n    function verify_initial(\\n        PartialVerifierStateOld memory state,\\n        ProofOld memory proof,\\n        VerificationKeyOld memory vk\\n    ) internal view returns (bool) {\\n        require(proof.input_values.length == vk.num_inputs);\\n        require(vk.num_inputs >= 1);\\n        TranscriptLibrary.Transcript memory transcript = TranscriptLibrary.new_transcript();\\n        for (uint256 i = 0; i < vk.num_inputs; i++) {\\n            transcript.update_with_u256(proof.input_values[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_commitments.length; i++) {\\n            transcript.update_with_g1(proof.wire_commitments[i]);\\n        }\\n\\n        state.beta = transcript.get_challenge();\\n        state.gamma = transcript.get_challenge();\\n\\n        transcript.update_with_g1(proof.grand_product_commitment);\\n        state.alpha = transcript.get_challenge();\\n\\n        for (uint256 i = 0; i < proof.quotient_poly_commitments.length; i++) {\\n            transcript.update_with_g1(proof.quotient_poly_commitments[i]);\\n        }\\n\\n        state.z = transcript.get_challenge();\\n\\n        uint256[] memory lagrange_poly_numbers = new uint256[](vk.num_inputs);\\n        for (uint256 i = 0; i < lagrange_poly_numbers.length; i++) {\\n            lagrange_poly_numbers[i] = i;\\n        }\\n\\n        state.cached_lagrange_evals = batch_evaluate_lagrange_poly_out_of_domain_old(\\n            lagrange_poly_numbers,\\n            vk.domain_size,\\n            vk.omega,\\n            state.z\\n        );\\n\\n        bool valid = verify_at_z(state, proof, vk);\\n\\n        if (valid == false) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z.length; i++) {\\n            transcript.update_with_fr(proof.wire_values_at_z[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z_omega.length; i++) {\\n            transcript.update_with_fr(proof.wire_values_at_z_omega[i]);\\n        }\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            transcript.update_with_fr(proof.permutation_polynomials_at_z[i]);\\n        }\\n\\n        transcript.update_with_fr(proof.quotient_polynomial_at_z);\\n        transcript.update_with_fr(proof.linearization_polynomial_at_z);\\n        transcript.update_with_fr(proof.grand_product_at_z_omega);\\n\\n        state.v = transcript.get_challenge();\\n        transcript.update_with_g1(proof.opening_at_z_proof);\\n        transcript.update_with_g1(proof.opening_at_z_omega_proof);\\n        state.u = transcript.get_challenge();\\n\\n        return true;\\n    }\\n\\n    // This verifier is for a PLONK with a state width 4\\n    // and main gate equation\\n    // q_a(X) * a(X) +\\n    // q_b(X) * b(X) +\\n    // q_c(X) * c(X) +\\n    // q_d(X) * d(X) +\\n    // q_m(X) * a(X) * b(X) +\\n    // q_constants(X)+\\n    // q_d_next(X) * d(X*omega)\\n    // where q_{}(X) are selectors a, b, c, d - state (witness) polynomials\\n    // q_d_next(X) \\\"peeks\\\" into the next row of the trace, so it takes\\n    // the same d(X) polynomial, but shifted\\n\\n    function verify_old(ProofOld memory proof, VerificationKeyOld memory vk) internal view returns (bool) {\\n        PartialVerifierStateOld memory state;\\n\\n        bool valid = verify_initial(state, proof, vk);\\n\\n        if (valid == false) {\\n            return false;\\n        }\\n\\n        valid = verify_commitments(state, proof, vk);\\n\\n        return valid;\\n    }\\n}\\n\\ncontract VerifierWithDeserializeOld is Plonk4VerifierWithAccessToDNextOld {\\n    uint256 constant SERIALIZED_PROOF_LENGTH_OLD = 33;\\n\\n    function deserialize_proof_old(uint256[] memory public_inputs, uint256[] memory serialized_proof)\\n        internal\\n        pure\\n        returns (ProofOld memory proof)\\n    {\\n        require(serialized_proof.length == SERIALIZED_PROOF_LENGTH_OLD);\\n        proof.input_values = new uint256[](public_inputs.length);\\n        for (uint256 i = 0; i < public_inputs.length; i++) {\\n            proof.input_values[i] = public_inputs[i];\\n        }\\n\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {\\n            proof.wire_commitments[i] = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n\\n            j += 2;\\n        }\\n\\n        proof.grand_product_commitment = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n        j += 2;\\n\\n        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {\\n            proof.quotient_poly_commitments[i] = PairingsBn254.new_g1_checked(\\n                serialized_proof[j],\\n                serialized_proof[j + 1]\\n            );\\n\\n            j += 2;\\n        }\\n\\n        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {\\n            proof.wire_values_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        for (uint256 i = 0; i < proof.wire_values_at_z_omega.length; i++) {\\n            proof.wire_values_at_z_omega[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        proof.grand_product_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        proof.quotient_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        proof.linearization_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n        j += 1;\\n\\n        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {\\n            proof.permutation_polynomials_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);\\n\\n            j += 1;\\n        }\\n\\n        proof.opening_at_z_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n        j += 2;\\n\\n        proof.opening_at_z_omega_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);\\n    }\\n}\\n\"\r\n    },\r\n    \"cache/solpp-generated-contracts/Upgradeable.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/// @title Interface of the upgradeable contract\\n/// @author Matter Labs\\ninterface Upgradeable {\\n    /// @notice Upgrades target of upgradeable contract\\n    /// @param newTarget New target\\n    /// @param newTargetInitializationParameters New target initialization parameters\\n    function upgradeTarget(address newTarget, bytes calldata newTargetInitializationParameters) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"BlockVerification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksVerified\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"totalBlocksCommitted\",\"type\":\"uint32\"}],\"name\":\"BlocksRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zkSyncBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"DepositCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExodusMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"fact\",\"type\":\"bytes\"}],\"name\":\"FactAuth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"zkSyncBlockId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"accountId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"FullExitCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"serialId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum Operations.OpType\",\"name\":\"opType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"name\":\"NewPriorityRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxAmount\",\"type\":\"uint128\"}],\"name\":\"_transferERC20\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateExodusMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"authFacts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_n\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"_depositsPubdata\",\"type\":\"bytes[]\"}],\"name\":\"cancelOutstandingDepositsForExodusMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Storage.StoredBlockInfo\",\"name\":\"_lastCommittedBlockData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newStateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"publicData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"ethWitness\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"publicDataOffset\",\"type\":\"uint32\"}],\"internalType\":\"struct ZkSync.OnchainOperationData[]\",\"name\":\"onchainOperations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"feeAccount\",\"type\":\"uint32\"}],\"internalType\":\"struct ZkSync.CommitBlockInfo[]\",\"name\":\"_newBlocksData\",\"type\":\"tuple[]\"}],\"name\":\"commitBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"_amount\",\"type\":\"uint104\"},{\"internalType\":\"address\",\"name\":\"_zkSyncAddress\",\"type\":\"address\"}],\"name\":\"depositERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zkSyncAddress\",\"type\":\"address\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Storage.StoredBlockInfo\",\"name\":\"storedBlock\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"pendingOnchainOpsPubdata\",\"type\":\"bytes[]\"}],\"internalType\":\"struct ZkSync.ExecuteBlockInfo[]\",\"name\":\"_blocksData\",\"type\":\"tuple[]\"}],\"name\":\"executeBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exodusMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPriorityRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_accountId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"fullExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"getBalanceToWithdraw\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPendingBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializationParameters\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Storage.StoredBlockInfo\",\"name\":\"_storedBlockInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_accountId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"_proof\",\"type\":\"uint256[]\"}],\"name\":\"performExodus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"performedExodus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Storage.StoredBlockInfo[]\",\"name\":\"_committedBlocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"recursiveInput\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vkIndexes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[16]\",\"name\":\"subproofsLimbs\",\"type\":\"uint256[16]\"}],\"internalType\":\"struct ZkSync.ProofInput\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"proveBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_accountId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"requestFullExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"priorityOperations\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"pendingOnchainOperationsHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct Storage.StoredBlockInfo[]\",\"name\":\"_blocksToRevert\",\"type\":\"tuple[]\"}],\"name\":\"revertBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pubkey_hash\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"}],\"name\":\"setAuthPubkeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksCommitted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksExecuted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksProven\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommittedPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOpenPriorityRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upgradeParameters\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeCanceled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeFinishes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeNoticePeriodStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradePreparationStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract Verifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"withdrawPendingBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZkSync","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}