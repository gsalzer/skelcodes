{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma experimental ABIEncoderV2;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.2;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\npragma solidity ^0.6.0;\n\n\n// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n// \n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\n\n// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n// \n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\n\n// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n// \n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\n\n// File: node_modules\\@openzeppelin\\contracts\\utils\\Address.sol\n// \n/**\r\n * @dev Collection of functions related to the address type\r\n */\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\n\n// File: @openzeppelin\\contracts\\token\\ERC20\\ERC20.sol\n// \n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\n\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\n// \n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // //only to debug\r\n    // function char(byte b) private pure returns (byte c) {\r\n    //     if (uint8(b) < 10) return byte(uint8(b) + 0x30);\r\n    //     else return byte(uint8(b) + 0x57);\r\n    // }\r\n\r\n    // function addressToString(address x) private pure returns (string memory) {\r\n    //     bytes memory s = new bytes(40);\r\n    //     for (uint i = 0; i < 20; i++) {\r\n    //         byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n    //         byte hi = byte(uint8(b) / 16);\r\n    //         byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n    //         s[2*i] = char(hi);\r\n    //         s[2*i+1] = char(lo);            \r\n    //     }\r\n    //     return strConcat(\"0x\", string(s), \"\", \"\", \"\");\r\n    // }\r\n\r\n    // function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\r\n    //     bytes memory _ba = bytes(_a);\r\n    //     bytes memory _bb = bytes(_b);\r\n    //     bytes memory _bc = bytes(_c);\r\n    //     bytes memory _bd = bytes(_d);\r\n    //     bytes memory _be = bytes(_e);\r\n    //     string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    //     bytes memory babcde = bytes(abcde);\r\n    //     uint k = 0;\r\n    //     for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    //     for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    //     for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    //     for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    //     for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    //     return string(babcde);\r\n    // }\r\n    // //\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        // TO DEBUG...\r\n        //string memory aaa = strConcat(\"_owner: \", addressToString(_owner), \" | _msgSender: \", addressToString(_msgSender()), \" | Ownable: caller is not the owner\");\r\n        //require(_owner == _msgSender(), aaa);        \r\n        //\r\n        // TO TEST... (by pass this check)\r\n        //require(1 == 1, \"Ownable: 1 is not same as 1\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\n\n// File: @openzeppelin\\contracts\\math\\Math.sol\n// \n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\n\n// File: src\\contracts\\HrsToken.sol\n//DappToken.sol\ncontract HrsToken is ERC20, Ownable {\r\n    address private _hodlerPool;\r\n\r\n    constructor() public ERC20(\"Hodler Rewards System Token\", \"HRST\") {\r\n        _mint(msg.sender, 1700000000000000000000);\r\n    }\r\n\r\n    // //only to debug\r\n    // function char(byte b) private pure returns (byte c) {\r\n    //     if (uint8(b) < 10) return byte(uint8(b) + 0x30);\r\n    //     else return byte(uint8(b) + 0x57);\r\n    // }\r\n\r\n    // function addressToString(address x) private pure returns (string memory) {\r\n    //     bytes memory s = new bytes(40);\r\n    //     for (uint i = 0; i < 20; i++) {\r\n    //         byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n    //         byte hi = byte(uint8(b) / 16);\r\n    //         byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n    //         s[2*i] = char(hi);\r\n    //         s[2*i+1] = char(lo);            \r\n    //     }\r\n    //     return strConcat(\"0x\", string(s), \"\", \"\", \"\");\r\n    // }\r\n\r\n    // function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\r\n    //     bytes memory _ba = bytes(_a);\r\n    //     bytes memory _bb = bytes(_b);\r\n    //     bytes memory _bc = bytes(_c);\r\n    //     bytes memory _bd = bytes(_d);\r\n    //     bytes memory _be = bytes(_e);\r\n    //     string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    //     bytes memory babcde = bytes(abcde);\r\n    //     uint k = 0;\r\n    //     for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    //     for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    //     for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    //     for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    //     for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    //     return string(babcde);\r\n    // }\r\n    // //\r\n\r\n    modifier onlyMinter() {\r\n        require(_hodlerPool == _msgSender(), \"Ownable: caller is not the Minter\");\r\n        \r\n        // TO DEBUG...\r\n        // string memory aaa = strConcat(\"_hodlerPool: \", addressToString(_hodlerPool), \" | _msgSender: \", addressToString(_msgSender()), \" | Ownable: caller is not the minter\");\r\n        // require(_hodlerPool == _msgSender(), aaa);        \r\n        \r\n        //\r\n        // TO TEST... (by pass this check)\r\n        //require(1 == 1, \"Ownable: 1 is not same as 1\");\r\n        _;\r\n    }\r\n\r\n    function setHodlerPool(address hodlerPool) external onlyOwner\r\n    {\r\n        _hodlerPool = hodlerPool;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyMinter returns (bool) \r\n    {\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    // function _burn(address account, uint256 amount) internal virtual {\r\n    //     require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    //     _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    //     _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n    //     _totalSupply = _totalSupply.sub(amount);\r\n    //     emit Transfer(account, address(0), amount);\r\n    // }\r\n\r\n    function burn(address account, uint256 amount) external onlyMinter {\r\n        // TODO: make sure it can only be called by HodlerPool\r\n        _burn(account, amount);\r\n    }\r\n}\n\n// File: src\\contracts\\RewardDistributionRecipient.sol\n// pragma solidity ^0.6.0;\n// contract RewardDistributionRecipient is Ownable {\n//     address rewardDistribution;\n//     function notifyRewardAmount(uint256 reward) external virtual {}\n//     modifier onlyRewardDistribution() {\n//         require(_msgSender() == rewardDistribution, \"Caller is not reward distribution\");\n//         _;\n//     }\n//     function setRewardDistribution(address _rewardDistribution)\n//         external\n//         onlyOwner\n//     {\n//         rewardDistribution = _rewardDistribution;\n//     }\n// }\n// pragma solidity ^0.6.0;\n// contract IRewardDistributionRecipient is Ownable {\n//     address public rewardDistribution;\n//     function notifyRewardAmount(uint256 reward) external;\n//     modifier onlyRewardDistribution() {\n//         require(_msgSender() == rewardDistribution, \"Caller is not reward distribution\");\n//         _;\n//     }\n//     function setRewardDistribution(address _rewardDistribution)\n//         external\n//         onlyOwner\n//     {\n//         rewardDistribution = _rewardDistribution;\n//     }\n// }\n// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n// \n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\n\n// File: src\\contracts\\HodlerPool.sol\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n//import \"./TokenWrapper.sol\";\ncontract Queue {\r\n    mapping(uint256 => address) private queue;\r\n    uint256 private _first = 1;\r\n    uint256 private _last = 0;\r\n    uint256 private _count = 0;\r\n\r\n    function enqueue(address data) external {\r\n        _last += 1;\r\n        queue[_last] = data;\r\n        _count += 1;\r\n    }\r\n\r\n    function dequeue() external returns (address data) {\r\n        require(_last >= _first);  // non-empty queue\r\n        //\r\n        data = queue[_first];\r\n        delete queue[_first];\r\n        _first += 1;\r\n        _count -= 1;\r\n    }\r\n\r\n    function count() external view returns (uint256) {\r\n        return _count;\r\n    }\r\n\r\n    function getItem(uint256 index) external view returns (address) {\r\n        uint256 correctedIndex = index + _first - 1;\r\n        return queue[correctedIndex];\r\n    }\r\n}\n\nlibrary Library {\r\n  struct staker {\r\n     uint256 sinceBlockNumber;\r\n     uint256 stakingBalance;\r\n     uint256 rewardsBalance; // should only be used to know how much the staker got paid already (while staking)!\r\n     bool exists;\r\n     bool isTopStaker;\r\n   }\r\n}\n\n//contract BaseHodlerPool is Ownable, RewardDistributionRecipient {\nabstract contract BaseHodlerPool is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    // function printArray() public returns(uint) {\r\n    //     for (uint i = 0; i < first40Addresses.length; i++){\r\n    //         emit Log(strConcat(\"printArray, i: \", uint2str(i), \" address: \" ,addressToString(first40Addresses[i]),\"\"));            \r\n    //     }\r\n    // }\r\n\r\n    function char(byte b) internal  pure returns (byte c) {\r\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n\r\n    function addressToString(address x) internal  pure returns (string memory) {\r\n        bytes memory s = new bytes(40);\r\n        for (uint i = 0; i < 20; i++) {\r\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            s[2*i] = char(hi);\r\n            s[2*i+1] = char(lo);            \r\n        }\r\n        return strConcat(\"0x\", string(s), \"\", \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function getElementPositionInArray(address[] memory array, address account) internal pure returns(uint) {    \r\n        bool foundElement = false;\r\n        uint index = 0;\r\n        for (uint i = 0; i <= array.length-1; i++){\r\n            if (array[i] == account) {\r\n                index = i;\r\n                foundElement = true;\r\n            }\r\n        }\r\n        require(foundElement == true);\r\n        //\r\n        return index;\r\n    }      \r\n\r\n    // if includeMaxNumber is true then min is 1 max is includeMaxNumber\r\n    // else min is 0 and max is (includeMaxNumber - 1)\r\n    function getRandomNumber(bool includeMaxNumber, uint256 maxNumber, address acct) internal view returns (uint256) {\r\n       uint256 randomNumber = uint256(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, acct)))%maxNumber);\r\n       if (includeMaxNumber) return randomNumber.add(1);\r\n       else return randomNumber;\r\n    }\r\n\r\n    // // converts an amount in wei to ether\r\n    // function weiToEther(uint256 amountInWei) internal pure returns(uint256) {\r\n    //     return amountInWei.div(1000000000000000000);\r\n    // }\r\n}\n\n//TokenFarm.sol\n//contract TokenFarm is Ownable {\n//contract HodlerPool is Ownable, TokenWrapper, RewardDistributionRecipient {\ncontract HodlerPool is BaseHodlerPool {\r\n    using SafeMath for uint256;\r\n    //using SafeERC20 for IERC20;\r\n    using SafeERC20 for HrsToken;\r\n    using Library for Library.staker;\r\n\r\n    //string public name = \"Dapp Token Farm\";\r\n    string public name = \"Hodler Pool\";\r\n    //IERC20 public rewardToken = IERC20(address(0)); // HRS Token\r\n    //HrsToken public rewardToken;\r\n    address private rewardTokenAddress; // HRS Token address\r\n    //IERC20 private stakingToken = IERC20(address(0));\r\n    //ERC20 private stakingToken = ERC20(address(0));\r\n    HrsToken private stakingToken;\r\n    //address private devFundAccount = 0xd4350eEcd2D5B7574cAF708A7e98ac4cB51304d3; // this is in kovan ...// TODO: put main net dev account address\r\n    address private devFundAccount;\r\n    //address[] public stakers;\r\n    //address[] allowedTokens;\r\n    uint private stakerLevelNULL = 999999;\r\n\r\n    uint256 private totalStakingBalance = 0; // this is the total staking balance\r\n    //uint256 private _totalSupply = 0; // this is the total supply in the pool (staked + rewards)\r\n    //uint256 private _totalStakingtTimeInBlocks = 0; // this is the total staking time in block numbers (for all users)\r\n    //\r\n    uint256[] private first40BlockNumbers = new uint256[](0);\r\n    address[] private first40Addresses = new address[](0);\r\n    uint private maxTopStakersByTime = 40;\r\n    Queue private followers = new Queue();\r\n    mapping(address => Library.staker) private _allStakers;\r\n    //\r\n\r\n    uint256 private blockStart;\r\n    //uint256 private startTime; \r\n    uint256 private periodFinish; \r\n    uint256 private penaltyPercentage = 20;\r\n\r\n    //uint256 private constant duration = 604800; // ~7 days\r\n    //uint256 private _totalSupply;\r\n    uint256 private duration;\r\n    uint256 private startTime; //= 1597172400; // 2020-08-11 19:00:00 (UTC UTC +00:00)\r\n    //uint256 private periodFinish = 0;\r\n    //uint256 private rewardRate = 0;\r\n    uint256 private rewardsPerTokenStakedPerBlock = 1000000; //0.000001\r\n    //uint256 private lastUpdateTime;\r\n    //uint256 private rewardPerTokenStored;\r\n    //mapping(address => uint256) private userRewardPerTokenPaid;\r\n    //mapping(address => uint256) private rewards; // won't be used for now as we don't allow to get rewards without exiting...\r\n\r\n    // events\r\n    event Staked(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward, string message);\r\n    event RewardAdded(uint256 reward);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event Log(string message);\r\n    event TokenTransferred(address indexed user, uint256 amount, string message);\r\n    event BurntTokens(address indexed user, uint256 amount);\r\n\r\n    constructor(address _rewardTokenAddress, address _devFundAddress) public {\r\n        rewardTokenAddress = _rewardTokenAddress;\r\n        stakingToken = HrsToken(_rewardTokenAddress);\r\n        devFundAccount = _devFundAddress;\r\n        blockStart = block.number;\r\n        startTime = block.timestamp;\r\n        periodFinish = startTime + 26 weeks; // Pool valid for 26 weeks (6 months) since contract is deployed\r\n        //duration = periodFinish - startTime;        \r\n    }    \r\n\r\n    // ideally we should move this to a library, \r\n    // for that we need to pass the arrays as parameters..but we can't do that due to solidity limitations :(\r\n    function removeElementFromArray(uint index) private {\r\n        require (index < first40BlockNumbers.length);\r\n        require (index < first40Addresses.length);\r\n        //\r\n        for (uint i = index; i<first40BlockNumbers.length-1; i++){\r\n            first40BlockNumbers[i] = first40BlockNumbers[i+1];\r\n        }\r\n        for (uint i = index; i<first40Addresses.length-1; i++){\r\n            first40Addresses[i] = first40Addresses[i+1];\r\n        }\r\n        //\r\n        first40BlockNumbers.pop();\r\n        first40Addresses.pop();\r\n    }  \r\n\r\n    function getFirst40Addresses() external view returns(address  [] memory){\r\n        return first40Addresses;\r\n    }\r\n\r\n    function isFollower(address account) external view returns(bool){\r\n        if (_allStakers[account].exists) {\r\n            if (isTopStaker(account)) \r\n                return false;\r\n            else\r\n                return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isTopStaker(address account) public view returns (bool){\r\n    //function isTopStaker(address account) public returns (bool){\r\n        // THIS WORKS BUT IS NOT EFFICIENT\r\n        // for (uint8 i = 0; i < first40Addresses.length; i++) {\r\n        //     if (first40Addresses[i] == account)\r\n        //         return true;\r\n        // }\r\n        // return false;\r\n\r\n        // THIS DOESN'T WORK\r\n        // emit Log(strConcat(\"isTopStaker sinceBlockNumber: \", uint2str(_allStakers[account].sinceBlockNumber),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"isTopStaker first40BlockNumbers.length: \", uint2str(first40BlockNumbers.length),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"isTopStaker first40BlockNumbers[first40BlockNumbers.length -1]: \", uint2str(first40BlockNumbers[first40BlockNumbers.length -1]),\"\",\"\",\"\"));\r\n        // if (_allStakers[account].sinceBlockNumber <= first40BlockNumbers[first40BlockNumbers.length -1]) \r\n        //     return true;\r\n        // else\r\n        //     return false;\r\n\r\n        // if (_allStakers[account].exists)\r\n        //     return _allStakers[account].isTopStaker;\r\n        // else\r\n        //     return false;\r\n        return _allStakers[account].isTopStaker;\r\n    }\r\n\r\n    function getStakerLevel(address account) public view returns (uint) {\r\n        uint stakerLevel = 0;\r\n        if (isTopStaker(account)) {\r\n            uint index = getElementPositionInArray(first40Addresses, account);\r\n            stakerLevel = getStakerLevelByIndex(index);\r\n        }\r\n        return stakerLevel;\r\n    }\r\n\r\n    // function totalSupply() public view returns (uint256) {\r\n    //     return _totalSupply;\r\n    // }\r\n\r\n    function getFollowersCount() external view returns (uint256){\r\n        return followers.count();\r\n    }\r\n\r\n    function stake(uint256 amount) external checkStart {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        require(block.timestamp < periodFinish, \"Pool has expired!\");\r\n        //emit Log(\"staking...\");\r\n        //super.stake(amount);\r\n        //printArray(); // TODO: comment it out!\r\n        totalStakingBalance = totalStakingBalance.add(amount);\r\n        //_totalSupply = _totalSupply.add(amount);\r\n        //\r\n        emit Log(strConcat(\"stake - msg.sender: \", addressToString(msg.sender),\"\",\"\",\"\"));\r\n        emit Log(strConcat(\"stake - block.number: \", uint2str(block.number),\"\",\"\",\"\"));\r\n        _allStakers[msg.sender].sinceBlockNumber = block.number;\r\n        emit Log(strConcat(\"stake - _allStakers[msg.sender].sinceBlockNumber: \", uint2str(_allStakers[msg.sender].sinceBlockNumber),\"\",\"\",\"\"));\r\n        _allStakers[msg.sender].stakingBalance = _allStakers[msg.sender].stakingBalance.add(amount);\r\n        _allStakers[msg.sender].rewardsBalance = 0;\r\n        _allStakers[msg.sender].exists = true;\r\n        //\r\n        if (first40BlockNumbers.length < maxTopStakersByTime) {\r\n            //emit Log(\"add staker to first40BlockNumbers and first40Addresses\");\r\n            first40BlockNumbers.push(block.number);\r\n            first40Addresses.push(msg.sender);\r\n            _allStakers[msg.sender].isTopStaker = true;\r\n        }\r\n        else {\r\n            //emit Log(\"add staker to followers queue\");\r\n            followers.enqueue(msg.sender);\r\n            _allStakers[msg.sender].isTopStaker = false;\r\n        }\r\n        //doUpdateReward(stakerLevelNULL);\r\n        //\r\n        //stakingBalance[msg.sender] = stakingBalance[msg.sender].add(amount);\r\n        //startedStakingAtBlockNumber[msg.sender] = block.number;\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        //\r\n        //printArray(); // TODO: comment it out!\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function getStartTime() external view returns (uint256) {\r\n        return startTime;\r\n    }\r\n\r\n    function getPeriodFinish() external view returns (uint256) {\r\n        return periodFinish;\r\n    }\r\n\r\n    function getTotalStakingBalance() external view returns (uint256) {\r\n        return totalStakingBalance;\r\n    }\r\n\r\n    function stakingBalanceOf(address account) public view returns (uint256) {\r\n        return _allStakers[account].stakingBalance;\r\n    }\r\n\r\n    function rewardsBalanceOf(address account) external view returns (uint256) {\r\n        return _allStakers[account].rewardsBalance;\r\n    }\r\n\r\n    // function totalBalanceOf(address account) external view returns (uint256) {\r\n    //     return _allStakers[account].stakingBalance.add(_allStakers[account].rewardsBalance);\r\n    // }\r\n\r\n    function getDevFundAccount() external view returns (address) {\r\n        return devFundAccount;\r\n    }\r\n\r\n    function exit() external {\r\n        emit Log(strConcat(\"exit - block.number: \", uint2str(block.number),\"\",\"\",\"\"));\r\n        emit Log(strConcat(\"earned: \", uint2str(earned(msg.sender)),\"\",\"\",\"\")); // 12.48\r\n        //emit Log(\"call function: exit\");\r\n        uint stakerLevel = getStakerLevel(msg.sender);\r\n        unstake();\r\n        Library.staker memory staker = _allStakers[msg.sender];        \r\n        //staker.rewardsBalance = earned(msg.sender);\r\n        emit Log(strConcat(\"staker.stakingBalance: \", uint2str(staker.stakingBalance),\"\",\"\",\"\"));// 1\r\n        emit Log(strConcat(\"earned(msg.sender): \", uint2str(earned(msg.sender)),\"\",\"\",\"\"));// 12.9792\r\n        //withdraw(staker.stakingBalance, staker.rewardsBalance);\r\n        withdraw(staker.stakingBalance, earned(msg.sender), stakerLevel);\r\n        delete _allStakers[msg.sender]; // delete account from mapping\r\n        //emit Log(\"account deleted\");\r\n        \r\n    }\r\n\r\n    function unstake() private  {\r\n        bool _isTopStaker = isTopStaker(msg.sender);\r\n        if (_isTopStaker) {\r\n            removeStaker(_isTopStaker, msg.sender);\r\n            _allStakers[msg.sender].isTopStaker = false;\r\n            _allStakers[msg.sender].exists = false;\r\n            // add staker from _allStakers (followers) to both first40BlockNumbers and first40Addresses\r\n            if (followers.count() > 0) {\r\n                address follower;\r\n                bool foundOne = false;\r\n                for (uint i = 0; i < 10; i++){\r\n                    // try max 10 times...if\r\n                    follower = followers.dequeue();\r\n                    if (_allStakers[follower].exists) {\r\n                        foundOne = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (foundOne) {\r\n                    //emit Log(\"foundOne == true\");\r\n                    first40BlockNumbers.push(_allStakers[follower].sinceBlockNumber);\r\n                    first40Addresses.push(follower);\r\n                    _allStakers[follower].isTopStaker = true;\r\n                }\r\n                else {\r\n                    //emit Log(\"foundOne == false\");\r\n                }\r\n            }\r\n            //\r\n        }\r\n        else {\r\n            followers.dequeue();\r\n        }\r\n    }\r\n\r\n    function removeStaker(bool _isTopStaker, address account) private {\r\n        if (_isTopStaker) {\r\n            // if sinceBlockNumber is within the top 40 it means that:\r\n            //  * we need to remove it from the top 40 array\r\n            //  * it will get some rewards depeding in the level :)\r\n            uint index = getElementPositionInArray(first40Addresses, account);\r\n            removeElementFromArray(index);\r\n        }\r\n    }\r\n\r\n    // should be payable??\r\n    function withdraw(uint256 stakingAmount, uint256 rewardsAmount, uint stakerLevel) private {\r\n        require(stakingAmount > 0, \"staking amount has to be > 0\");\r\n        // uint256 amountToGetIfUnstaking = amountToGetIfUnstaking(msg.sender, stakerLevel);\r\n        // emit Log(strConcat(\"amountToGetIfUnstaking: \", uint2str(amountToGetIfUnstaking),\"\",\"\",\"\"));\r\n        // here we pay/mint the rewards the staker is getting, this is paid to the contract, as it will be taxed and that tax will be distributed to other stakers\r\n        stakingToken.mint(address(this), rewardsAmount);\r\n        emit RewardPaid(msg.sender, rewardsAmount, \"reward paid/minted (before tax)\"); // 0.7436\r\n        //emit Log(\"call function: withdraw\");\r\n        //emit Log(strConcat(\"stakingAmount: \", uint2str(stakingAmount),\"\",\"\",\"\"));\r\n        //emit Log(strConcat(\"rewardsAmount: \", uint2str(rewardsAmount),\"\",\"\",\"\"));\r\n        uint256 totalAmount = stakingAmount.add(rewardsAmount); // 1.7436\r\n        emit Log(strConcat(\"totalAmount: \", uint2str(totalAmount),\"\",\"\",\"\"));\r\n        uint256 taxPercentageBasedOnStakerLevel = getTaxPercentage(stakerLevel);\r\n        //uint256 taxPercentageBasedOnStakerLevel = 4;\r\n        emit Log(strConcat(\"taxPercentageBasedOnStakerLevel: \", uint2str(taxPercentageBasedOnStakerLevel),\"\",\"\",\"\"));\r\n        uint256 taxedAmount = totalAmount.mul(taxPercentageBasedOnStakerLevel).div(100);\r\n        uint256 actualAmount = totalAmount.sub(taxedAmount); \r\n        //require(actualAmount == amountToGetIfUnstaking);\r\n        emit Log(strConcat(\"actualAmount: \", uint2str(actualAmount),\"\",\"\",\"\"));\r\n        //uint256 taxedAmount = totalAmount.sub(actualAmount);\r\n        emit Log(strConcat(\"taxedAmount: \", uint2str(taxedAmount),\"\",\"\",\"\"));\r\n        manageTaxCollected(taxedAmount); // 0.17436\r\n        //emit Log(strConcat(\"taxReturn: \", uint2str(taxReturn),\"\",\"\",\"\"));\r\n        // taxReturn is the amount of rewards the staker got back from the tax he paid for being a top staker (so only if they are level 1 or higher)\r\n        //emit Log(strConcat(\"actualAmount: \", uint2str(actualAmount),\"\",\"\",\"\"));\r\n        //\r\n        totalStakingBalance = totalStakingBalance.sub(stakingAmount);\r\n        //_totalSupply = _totalSupply.sub(stakingAmount);\r\n        _allStakers[msg.sender].stakingBalance = 0;\r\n        _allStakers[msg.sender].rewardsBalance = 0;\r\n        //emit Log(strConcat(\"actualAmount: \", uint2str(actualAmount),\"\",\"\",\"\")); // 1.56924\r\n        stakingToken.safeTransfer(msg.sender, actualAmount); // this is when the actual staker gets paid (after tax)\r\n        emit Withdrawn(msg.sender, actualAmount);\r\n        //\r\n    }\r\n\r\n    function manageTaxCollected(uint256 taxedAmount) private returns (uint256) {\r\n        // this is for current plan:\r\n        // 70% top stakers\r\n        // 20% burnt (to offset inflation)\r\n        // 10% to dev fund\r\n        // uint256 tokensForTopStakers = taxedAmount.mul(70).div(100);\r\n    \t// uint256 tokensToBurn = taxedAmount.mul(20).div(100);\r\n        // uint256 tokensForDevFund = taxedAmount.mul(10).div(100);\r\n\r\n        // new current plan?    \r\n        // 90% or 100% to all top 40 stakers\r\n        // 10% to 1 random follower (in case there are at least 10 followers)\r\n        uint256 tokensForTopStakers = 0;\r\n        uint256 tokensForRandomFollower = 0;\r\n        emit Log(strConcat(\"followers.count(): \", uint2str(followers.count()),\"\",\"\",\"\"));\r\n        if (followers.count() > 9) {\r\n            tokensForTopStakers = taxedAmount.mul(90).div(100);\r\n            tokensForRandomFollower = taxedAmount.mul(10).div(100);\r\n            emit Log(\"Sending 10% of tokens from tax to a random follower, and the rest (90%) to top stakers,\");\r\n        }\r\n        else {\r\n            // 100% to top stakers\r\n            tokensForTopStakers = taxedAmount;\r\n            emit Log(\"All tokens from tax sent to top stakers\");\r\n        }\r\n        \r\n        emit Log(strConcat(\"taxedAmount: \", uint2str(taxedAmount),\"\",\"\",\"\")); // 0.34872\r\n        emit Log(strConcat(\"tokensForTopStakers: \", uint2str(tokensForTopStakers),\"\",\"\",\"\")); // 0.244104\r\n        emit Log(strConcat(\"tokensForRandomFollower: \", uint2str(tokensForRandomFollower),\"\",\"\",\"\")); // 0.069744\r\n        require (taxedAmount == tokensForTopStakers.add(tokensForRandomFollower), \"wrong distribution of tax collected\");\r\n        //\r\n        //uint256 taxReturn = distributeTokensToTopStakers(tokensForTopStakers); // no tax return as the staker cannot be in top 40 anymore\r\n        distributeTokensToTopStakers(tokensForTopStakers);\r\n        //burnTokens(tokensToBurn);\r\n        //sendTokensToDevFund(tokensForDevFund);\r\n        if (tokensForRandomFollower > 0)\r\n            sendTokensToRandomFollower(tokensForRandomFollower);\r\n            \r\n        //\r\n        // emit Log(\"tax collected successfully distributed\");\r\n        //emit Log(strConcat(\"taxReturn: \", uint2str(taxReturn),\"\",\"\",\"\"));\r\n        //\r\n        //return taxReturn; // no tax return as the staker cannot be in top 40 anymore\r\n    }\r\n\r\n    function distributeTokensToTopStakers(uint256 tokensAmount) private {\r\n        // emit Log(\"call function: distributeTokensToTopStakers\");\r\n        // distribute tokens amongst top stakers\r\n        uint256 tokensAmountLeft = tokensAmount;\r\n        for (uint8 i = 0; i < first40Addresses.length; i++) {\r\n            if (tokensAmountLeft > 0) {\r\n                uint256 rewardsForStakingAmount = getRewardsBasedOnStakingAmountScore(tokensAmount, _allStakers[first40Addresses[i]].stakingBalance);\r\n                // emit Log(strConcat(\"tokensAmount: \", uint2str(tokensAmount),\"\",\"\",\"\"));\r\n                // emit Log(strConcat(\"_allStakers[first40Addresses[i]].stakingBalance: \", uint2str(_allStakers[first40Addresses[i]].stakingBalance),\"\",\"\",\"\"));\r\n                // emit Log(strConcat(\"rewardsForStakingAmount: \", uint2str(rewardsForStakingAmount),\"\",\"\",\"\"));\r\n                stakingToken.safeTransfer(first40Addresses[i], rewardsForStakingAmount);\r\n                _allStakers[first40Addresses[i]].rewardsBalance = _allStakers[first40Addresses[i]].rewardsBalance.add(rewardsForStakingAmount);\r\n                tokensAmountLeft = tokensAmountLeft.sub(rewardsForStakingAmount);\r\n                emit RewardPaid(first40Addresses[i], rewardsForStakingAmount, \"reward paid from distributeTokensToTopStakers\");\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (tokensAmountLeft > 0) {\r\n            // emit Log(strConcat(\"tokensAmountLeft will be burnt... tokensAmountLeft:\", uint2str(tokensAmountLeft),\"\",\"\",\"\"));\r\n            //burnTokens(tokensAmountLeft);\r\n            sendTokensToDevFund(tokensAmountLeft);\r\n        }\r\n    }\r\n\r\n    function getTopStaker() private view returns (address){\r\n        return first40Addresses[0];\r\n    }\r\n    \r\n    function getRandomNumber(uint256 maxNumber, address someAddress) public view returns (uint256) { \r\n        return getRandomNumber(true, maxNumber, someAddress);\r\n    }\r\n\r\n    function getFollower(uint index) external returns (address) { \r\n        address follower = followers.getItem(index);\r\n        emit Log(strConcat(\"follower: \", addressToString(follower),\"\",\"\",\"\"));\r\n        return follower;\r\n    }\r\n\r\n    function getRandomFollower() public returns (address) { \r\n    //function getRandomFollower() private view returns (address) { \r\n        uint256 randomNumber = getRandomNumber(followers.count(), getTopStaker());\r\n        emit Log(strConcat(\"followers.count(): \", uint2str(followers.count()),\"\",\"\",\"\"));\r\n        emit Log(strConcat(\"randomNumber: \", uint2str(randomNumber),\"\",\"\",\"\"));\r\n        //return followers.getItem(randomNumber);\r\n        address randomFollower = followers.getItem(randomNumber);\r\n        emit Log(strConcat(\"randomFollower: \", addressToString(randomFollower),\"\",\"\",\"\"));\r\n        return randomFollower;\r\n    }\r\n\r\n    function sendTokensToRandomFollower(uint256 tokensAmount) private{\r\n        // get random follower\r\n        address randomFollower = getRandomFollower();\r\n        stakingToken.safeTransfer(randomFollower, tokensAmount);\r\n        _allStakers[randomFollower].rewardsBalance = _allStakers[randomFollower].rewardsBalance.add(tokensAmount);\r\n        emit TokenTransferred(randomFollower, tokensAmount, \"tokens sent to random follower\");\r\n    }\r\n\r\n    function burnTokens(uint256 tokensAmount) private{\r\n        //stakingToken._burn(address(this), tokensAmount);\r\n        stakingToken.burn(address(this), tokensAmount);\r\n        emit BurntTokens(address(this), tokensAmount);\r\n    }\r\n\r\n    function sendTokensToDevFund(uint256 tokensAmount) private{\r\n        stakingToken.safeTransfer(devFundAccount, tokensAmount);\r\n        emit TokenTransferred(devFundAccount, tokensAmount, \"tokens sent to dev fund\");\r\n    }\r\n\r\n    function getRewardsBasedOnStakingAmountScore(uint256 totalRewardsBasedOnAmount, uint256 stakerStakingBalance) private view returns (uint256) {\r\n        // total = 100\r\n        // account1 - 10\r\n        // account2 - 4\r\n        // account3 - 1\r\n        // account4 - 55\r\n        // account5 - 30\r\n\r\n        // get staking percentage (this is the percentage that the holder has of the total staked in the pool)\r\n        uint256 stakingPercentage = stakerStakingBalance\r\n                                        .mul(100)\r\n                                        .div(totalStakingBalance);\r\n\r\n        uint256 rewardsBasedOnStakingAmountScore = stakingPercentage\r\n                                                        .mul(totalRewardsBasedOnAmount)\r\n                                                        .div(100);\r\n\r\n        //\r\n        return rewardsBasedOnStakingAmountScore;\r\n    }\r\n\r\n    \r\n\r\n    // to be called only for top stakers!!!! it onlu returns 4, 3, 2 or 1 (but not 0)\r\n    function getStakerLevelByIndex(uint index) private pure returns (uint) {\r\n        uint stakerLevel;\r\n        if (index < 10) {\r\n            stakerLevel = 4; // max level\r\n        }\r\n        else if (index < 20) {\r\n            stakerLevel = 3; // second best level\r\n        }\r\n        else if (index < 30) {\r\n            stakerLevel = 2;\r\n        }\r\n        else {\r\n            stakerLevel = 1;\r\n        }\r\n        return stakerLevel;\r\n    }\r\n\r\n    // this function is to be called from the UI\r\n    function getPosition(address account) external view returns (uint256)  {\r\n    //function getPosition(address account) external returns (uint256)  {\r\n        if (isTopStaker(account)) \r\n            return (getElementPositionInArray(first40Addresses, account) + 1);\r\n        else {\r\n            return 404;\r\n        }\r\n    }\r\n\r\n    // this function is to be called from the UI\r\n    function getTotalNumberOfStakers() external view returns (uint256)  {\r\n        return first40Addresses.length + followers.count();\r\n    }\r\n\r\n    // this function is to be called from the UI\r\n    function poolHasExpired() public view returns (bool)  {\r\n        if (block.timestamp > periodFinish)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    modifier checkStart(){\r\n        require(block.timestamp >= startTime,\"not started\");\r\n        _;\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n    //function earned(address account) public returns (uint256) {\r\n        // emit Log(strConcat(\"stakingBalanceOf(account): \", uint2str(stakingBalanceOf(account)),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"getNumberOfBlocksStaking(): \", uint2str(getNumberOfBlocksStaking(account)),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"rewardsPerTokenStakedPerBlock: \", uint2str(rewardsPerTokenStakedPerBlock),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"_allStakers[account].rewardsBalance: \", uint2str(_allStakers[account].rewardsBalance),\"\",\"\",\"\"));\r\n        uint256 earnedBeforeTax;\r\n        if (poolHasExpired()) {\r\n            // the pool has expired!\r\n            // they will only get the rewards from tax collected (if anything), nothing for actually staking\r\n            //earnedBeforeTax = _allStakers[account].rewardsBalance;\r\n            earnedBeforeTax = 0;\r\n        }\r\n        else {\r\n            earnedBeforeTax = stakingBalanceOf(account)\r\n                .mul(getNumberOfBlocksStaking(account))\r\n                .div(rewardsPerTokenStakedPerBlock);\r\n                //.add(_allStakers[account].rewardsBalance);\r\n        }\r\n        //emit Log(strConcat(\"earnedBeforeTax: \", uint2str(earnedBeforeTax),\"\",\"\",\"\"));\r\n        return earnedBeforeTax;\r\n    }\r\n\r\n    // this function should be called when the account is staking only!\r\n    function amountToGetIfUnstaking(address account, uint stakerLevel) public view returns (uint256) {\r\n        if (stakerLevel == stakerLevelNULL)\r\n            stakerLevel = getStakerLevel(account);\r\n        // emit Log(strConcat(\"stakingBalanceOf(account): \", uint2str(stakingBalanceOf(account)),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"earned(account): \", uint2str(earned(account)),\"\",\"\",\"\"));\r\n        uint256 amountBeforeTax = stakingBalanceOf(account).add(earned(account));\r\n        //emit Log(strConcat(\"amountBeforeTax: \", uint2str(amountBeforeTax),\"\",\"\",\"\"));\r\n        uint256 taxPercentageBasedOnStakerLevel = getTaxPercentage(stakerLevel);\r\n        //emit Log(strConcat(\"taxPercentageBasedOnStakerLevel: \", uint2str(taxPercentageBasedOnStakerLevel),\"\",\"\",\"\"));\r\n        uint256 taxToPay = amountBeforeTax.mul(taxPercentageBasedOnStakerLevel).div(100);\r\n        //emit Log(strConcat(\"taxToPay: \", uint2str(taxToPay),\"\",\"\",\"\"));\r\n        return amountBeforeTax.sub(taxToPay);\r\n    }\r\n\r\n    // get Tax Percentage Based On Staker Level\r\n    function getTaxPercentage(uint stakerLevel) public view returns (uint256) {\r\n        return penaltyPercentage.sub(stakerLevel.mul(4));\r\n    }\r\n\r\n    function getNumberOfBlocksStaking(address account) public view returns (uint256) {\r\n    //function getNumberOfBlocksStaking(address account) public returns (uint256) {\r\n        // emit Log(strConcat(\"getNumberOfBlocksStaking - account: \", addressToString(account),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"getNumberOfBlocksStaking - block.number: \", uint2str(block.number),\"\",\"\",\"\"));\r\n        // emit Log(strConcat(\"getNumberOfBlocksStaking - _allStakers[account].sinceBlockNumber: \", uint2str(_allStakers[account].sinceBlockNumber),\"\",\"\",\"\"));\r\n        return block.number.sub(_allStakers[account].sinceBlockNumber);\r\n    }\r\n    \r\n    // only used for testing (to force blochain to advance one block number)\r\n    function skipBlockNumber() external {\r\n        emit Log(strConcat(\"this block.number: \", uint2str(block.number),\"\",\"\",\"\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hodlerPool\",\"type\":\"address\"}],\"name\":\"setHodlerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HrsToken","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}