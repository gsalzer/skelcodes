{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n// Welcome to the Beast DAO Liquidity sale - Unleash the DeFi Beast. - https://beast.finance\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two unsigned integers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two unsigned integers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n}\r\n\r\ncontract BeastSale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSold;\r\n  ERC20 public Token;\r\n  address payable public owner;\r\n  uint256 public collectedETH;\r\n  uint256 public startDate;\r\n  bool private saleClosed = false;\r\n\r\n  constructor(address _wallet) public {\r\n    owner = msg.sender;\r\n    Token = ERC20(_wallet);\r\n  }\r\n\r\n  uint256 amount;\r\n \r\n\r\n  receive () external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(Token.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 60 ether);\r\n    require(!saleClosed);\r\n     \r\n    //BEAST token sale amount\r\n       amount = msg.value.mul(200);\r\n\r\n    \r\n    require(amount <= Token.balanceOf(address(this)));\r\n    // Update Constants\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    // Transfer the BeastDAO tokens\r\n    Token.transfer(msg.sender, amount);\r\n  }\r\n\r\n\r\n  function support() external payable {\r\n    require(startDate > 0 && now.sub(startDate) <= 7 days);\r\n    require(Token.balanceOf(address(this)) > 0);\r\n    require(msg.value >= 0.1 ether && msg.value <= 60 ether);\r\n    require(!saleClosed);\r\n    \r\n  amount = msg.value.mul(200);\r\n    \r\n    require(amount <= Token.balanceOf(address(this)));\r\n    // Update Constants\r\n    totalSold = totalSold.add(amount);\r\n    collectedETH = collectedETH.add(msg.value);\r\n    // transfer the tokens.\r\n    Token.transfer(msg.sender, amount);\r\n  }\r\n\r\n\r\n  function withdrawETH() public {\r\n      //Withdraw ETH to add UniSwap Liquidity\r\n    require(msg.sender == owner);\r\n    require(saleClosed == true);\r\n    owner.transfer(collectedETH);\r\n  }\r\n\r\n function withdrawTokens() public {\r\n    require(msg.sender == owner);\r\n    require(saleClosed == true);\r\n    // Returns the tokens incase of emergency\r\n    Token.transfer(address(msg.sender), Token.balanceOf(address(this)));\r\n  }\r\n\r\n  function endSale() public {\r\n      //End the BeastDAO sale\r\n    require(msg.sender == owner);\r\n    saleClosed = true;\r\n  }\r\n\r\n  function burn() public {\r\n    require(msg.sender == owner && Token.balanceOf(address(this)) > 0 && now.sub(startDate) > 7 days);\r\n    // Burn the left over BEAST tokens after the sale is complete\r\n    Token.transfer(address(0), Token.balanceOf(address(this)));\r\n  }\r\n  \r\n  \r\n  function startSale() public {\r\n      //Start the BeastDAO token sale\r\n    require(msg.sender == owner && startDate==0);\r\n    startDate=now;\r\n  }\r\n  \r\n  function availableTokens() public view returns(uint256) {\r\n    return Token.balanceOf(address(this));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"support\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BeastSale","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dbb2f12cb89af05516768c2c69a771d92a25d17c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1816b6abb15565aac598b15de8826d95b9dac5736dedf4b69923858ad905945b"}]}