{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConnectCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0 <0.7.0;\\n\\nimport { Crowdsale } from \\\"ozcontracts250/crowdsale/Crowdsale.sol\\\";\\nimport { AllowanceCrowdsale } from \\\"ozcontracts250/crowdsale/emission/AllowanceCrowdsale.sol\\\";\\nimport { TimedCrowdsale } from \\\"ozcontracts250/crowdsale/validation/TimedCrowdsale.sol\\\";\\nimport { IERC20 } from \\\"ozcontracts250/token/ERC20/IERC20.sol\\\";\\nimport { IIndexedUniswapV2Oracle } from \\\"./IIndexedUniswapV2Oracle.sol\\\";\\n\\ncontract ConnectCrowdsale is Crowdsale, AllowanceCrowdsale, TimedCrowdsale {\\n  address public oracle;\\n  address constant USDC_ADDRESS = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n  constructor(\\n    address payable wallet,\\n    IERC20 token,\\n    uint256 openingTime,\\n    uint256 closingTime,\\n    address _oracle\\n  ) public AllowanceCrowdsale(wallet) TimedCrowdsale(openingTime, closingTime) Crowdsale(1, wallet, token) {\\n    oracle = _oracle;\\n  }\\n  function updatePrice() internal {\\n    IIndexedUniswapV2Oracle(oracle).updatePrice(USDC_ADDRESS);\\n  }\\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n    return weiAmount.mul(rate());\\n  }\\n  function rate() public view returns (uint256) {\\n    return uint256(1 ether).div(uint256(IIndexedUniswapV2Oracle(oracle).computeAverageEthForTokens(USDC_ADDRESS, 1e5, 0, 60*60*24*2))); // take two day moving average\\n  }\\n  function() external payable {\\n    updatePrice();\\n    buyTokens(_msgSender());\\n  }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/crowdsale/Crowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Crowdsale\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\n * allowing investors to purchase tokens with ether. This contract implements\\n * such functionality in its most fundamental form and can be extended to provide additional\\n * functionality and/or custom behavior.\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\\n * behavior.\\n */\\ncontract Crowdsale is Context, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The token being sold\\n    IERC20 private _token;\\n\\n    // Address where funds are collected\\n    address payable private _wallet;\\n\\n    // How many token units a buyer gets per wei.\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\n    uint256 private _rate;\\n\\n    // Amount of wei raised\\n    uint256 private _weiRaised;\\n\\n    /**\\n     * Event for token purchase logging\\n     * @param purchaser who paid for the tokens\\n     * @param beneficiary who got the tokens\\n     * @param value weis paid for purchase\\n     * @param amount amount of tokens purchased\\n     */\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\n\\n    /**\\n     * @param rate Number of token units a buyer gets per wei\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\n     * @param wallet Address where collected funds will be forwarded to\\n     * @param token Address of the token being sold\\n     */\\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\\n        require(rate > 0, \\\"Crowdsale: rate is 0\\\");\\n        require(wallet != address(0), \\\"Crowdsale: wallet is the zero address\\\");\\n        require(address(token) != address(0), \\\"Crowdsale: token is the zero address\\\");\\n\\n        _rate = rate;\\n        _wallet = wallet;\\n        _token = token;\\n    }\\n\\n    /**\\n     * @dev fallback function ***DO NOT OVERRIDE***\\n     * Note that other contracts will transfer funds with a base gas stipend\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\n     * buyTokens directly when purchasing tokens from a contract.\\n     */\\n    function () external payable {\\n        buyTokens(_msgSender());\\n    }\\n\\n    /**\\n     * @return the token being sold.\\n     */\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the address where funds are collected.\\n     */\\n    function wallet() public view returns (address payable) {\\n        return _wallet;\\n    }\\n\\n    /**\\n     * @return the number of token units a buyer gets per wei.\\n     */\\n    function rate() public view returns (uint256) {\\n        return _rate;\\n    }\\n\\n    /**\\n     * @return the amount of wei raised.\\n     */\\n    function weiRaised() public view returns (uint256) {\\n        return _weiRaised;\\n    }\\n\\n    /**\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\n     * This function has a non-reentrancy guard, so it shouldn't be called by\\n     * another `nonReentrant` function.\\n     * @param beneficiary Recipient of the token purchase\\n     */\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\n        uint256 weiAmount = msg.value;\\n        _preValidatePurchase(beneficiary, weiAmount);\\n\\n        // calculate token amount to be created\\n        uint256 tokens = _getTokenAmount(weiAmount);\\n\\n        // update state\\n        _weiRaised = _weiRaised.add(weiAmount);\\n\\n        _processPurchase(beneficiary, tokens);\\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\n\\n        _updatePurchasingState(beneficiary, weiAmount);\\n\\n        _forwardFunds();\\n        _postValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\n     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\n     *     require(weiRaised().add(weiAmount) <= cap);\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        require(beneficiary != address(0), \\\"Crowdsale: beneficiary is the zero address\\\");\\n        require(weiAmount != 0, \\\"Crowdsale: weiAmount is 0\\\");\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    }\\n\\n    /**\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\n     * conditions are not met.\\n     * @param beneficiary Address performing the token purchase\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\n     * its tokens.\\n     * @param beneficiary Address performing the token purchase\\n     * @param tokenAmount Number of tokens to be emitted\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        _token.safeTransfer(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\\n     * tokens.\\n     * @param beneficiary Address receiving the tokens\\n     * @param tokenAmount Number of tokens to be purchased\\n     */\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\\n        _deliverTokens(beneficiary, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\n     * etc.)\\n     * @param beneficiary Address receiving the tokens\\n     * @param weiAmount Value in wei involved in the purchase\\n     */\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Override to extend the way in which ether is converted to tokens.\\n     * @param weiAmount Value in wei to be converted into tokens\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\n     */\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\n        return weiAmount.mul(_rate);\\n    }\\n\\n    /**\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\n     */\\n    function _forwardFunds() internal {\\n        _wallet.transfer(msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/crowdsale/emission/AllowanceCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../Crowdsale.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../math/Math.sol\\\";\\n\\n/**\\n * @title AllowanceCrowdsale\\n * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\\n */\\ncontract AllowanceCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private _tokenWallet;\\n\\n    /**\\n     * @dev Constructor, takes token wallet address.\\n     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale.\\n     */\\n    constructor (address tokenWallet) public {\\n        require(tokenWallet != address(0), \\\"AllowanceCrowdsale: token wallet is the zero address\\\");\\n        _tokenWallet = tokenWallet;\\n    }\\n\\n    /**\\n     * @return the address of the wallet that will hold the tokens.\\n     */\\n    function tokenWallet() public view returns (address) {\\n        return _tokenWallet;\\n    }\\n\\n    /**\\n     * @dev Checks the amount of tokens left in the allowance.\\n     * @return Amount of tokens left in the allowance\\n     */\\n    function remainingTokens() public view returns (uint256) {\\n        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\\n    }\\n\\n    /**\\n     * @dev Overrides parent behavior by transferring tokens from wallet.\\n     * @param beneficiary Token purchaser\\n     * @param tokenAmount Amount of tokens purchased\\n     */\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\\n        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/crowdsale/validation/TimedCrowdsale.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../Crowdsale.sol\\\";\\n\\n/**\\n * @title TimedCrowdsale\\n * @dev Crowdsale accepting contributions only within a time frame.\\n */\\ncontract TimedCrowdsale is Crowdsale {\\n    using SafeMath for uint256;\\n\\n    uint256 private _openingTime;\\n    uint256 private _closingTime;\\n\\n    /**\\n     * Event for crowdsale extending\\n     * @param newClosingTime new closing time\\n     * @param prevClosingTime old closing time\\n     */\\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\\n\\n    /**\\n     * @dev Reverts if not in crowdsale time range.\\n     */\\n    modifier onlyWhileOpen {\\n        require(isOpen(), \\\"TimedCrowdsale: not open\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor, takes crowdsale opening and closing times.\\n     * @param openingTime Crowdsale opening time\\n     * @param closingTime Crowdsale closing time\\n     */\\n    constructor (uint256 openingTime, uint256 closingTime) public {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(openingTime >= block.timestamp, \\\"TimedCrowdsale: opening time is before current time\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(closingTime > openingTime, \\\"TimedCrowdsale: opening time is not before closing time\\\");\\n\\n        _openingTime = openingTime;\\n        _closingTime = closingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale opening time.\\n     */\\n    function openingTime() public view returns (uint256) {\\n        return _openingTime;\\n    }\\n\\n    /**\\n     * @return the crowdsale closing time.\\n     */\\n    function closingTime() public view returns (uint256) {\\n        return _closingTime;\\n    }\\n\\n    /**\\n     * @return true if the crowdsale is open, false otherwise.\\n     */\\n    function isOpen() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\\n     * @return Whether crowdsale period has elapsed\\n     */\\n    function hasClosed() public view returns (bool) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return block.timestamp > _closingTime;\\n    }\\n\\n    /**\\n     * @dev Extend parent behavior requiring to be within contributing period.\\n     * @param beneficiary Token purchaser\\n     * @param weiAmount Amount of wei contributed\\n     */\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\\n        super._preValidatePurchase(beneficiary, weiAmount);\\n    }\\n\\n    /**\\n     * @dev Extend crowdsale.\\n     * @param newClosingTime Crowdsale closing time\\n     */\\n    function _extendTime(uint256 newClosingTime) internal {\\n        require(!hasClosed(), \\\"TimedCrowdsale: already closed\\\");\\n        // solhint-disable-next-line max-line-length\\n        require(newClosingTime > _closingTime, \\\"TimedCrowdsale: new closing time is before current closing time\\\");\\n\\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\\n        _closingTime = newClosingTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/IIndexedUniswapV2Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/* ==========  Libraries  ========== */\\nimport \\\"./PriceLibrary.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\n\\n\\ninterface IIndexedUniswapV2Oracle {\\n/* ==========  Mutative Functions  ========== */\\n\\n  function updatePrice(address token) external returns (bool);\\n\\n  function updatePrices(address[] calldata tokens) external returns (bool[] memory);\\n\\n/* ==========  Meta Price Queries  ========== */\\n\\n  function hasPriceObservationInWindow(address token, uint256 priceKey) external view returns (bool);\\n\\n  function getPriceObservationInWindow(\\n    address token, uint256 priceKey\\n  ) external view returns (PriceLibrary.PriceObservation memory);\\n\\n  function getPriceObservationsInRange(\\n    address token, uint256 timeFrom, uint256 timeTo\\n  ) external view returns (PriceLibrary.PriceObservation[] memory prices);\\n\\n/* ==========  Price Update Queries  ========== */\\n\\n  function canUpdatePrice(address token) external view returns (bool);\\n\\n  function canUpdatePrices(address[] calldata tokens) external view returns (bool[] memory);\\n\\n/* ==========  Price Queries: Singular  ========== */\\n\\n  function computeTwoWayAveragePrice(\\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\\n  ) external view returns (PriceLibrary.TwoWayAveragePrice memory);\\n\\n  function computeAverageTokenPrice(\\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\\n  ) external view returns (FixedPoint.uq112x112 memory);\\n\\n  function computeAverageEthPrice(\\n    address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\\n  ) external view returns (FixedPoint.uq112x112 memory);\\n\\n/* ==========  Price Queries: Multiple  ========== */\\n\\n  function computeTwoWayAveragePrices(\\n    address[] calldata tokens,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (PriceLibrary.TwoWayAveragePrice[] memory);\\n\\n  function computeAverageTokenPrices(\\n    address[] calldata tokens,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (FixedPoint.uq112x112[] memory);\\n\\n  function computeAverageEthPrices(\\n    address[] calldata tokens,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (FixedPoint.uq112x112[] memory);\\n\\n/* ==========  Value Queries: Singular  ========== */\\n\\n  function computeAverageEthForTokens(\\n    address token,\\n    uint256 tokenAmount,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (uint144);\\n\\n  function computeAverageTokensForEth(\\n    address token,\\n    uint256 wethAmount,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (uint144);\\n\\n/* ==========  Value Queries: Multiple  ========== */\\n\\n  function computeAverageEthForTokens(\\n    address[] calldata tokens,\\n    uint256[] calldata tokenAmounts,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (uint144[] memory);\\n\\n  function computeAverageTokensForEth(\\n    address[] calldata tokens,\\n    uint256[] calldata wethAmounts,\\n    uint256 minTimeElapsed,\\n    uint256 maxTimeElapsed\\n  ) external view returns (uint144[] memory);\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\\n * metering changes introduced in the Istanbul hardfork.\\n */\\ncontract ReentrancyGuard {\\n    bool private _notEntered;\\n\\n    constructor () internal {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"ozcontracts250/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PriceLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/* ==========  Internal Libraries  ========== */\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\n\\n\\nlibrary PriceLibrary {\\n  using FixedPoint for FixedPoint.uq112x112;\\n  using FixedPoint for FixedPoint.uq144x112;\\n\\n/* ========= Structs ========= */\\n\\n  struct PriceObservation {\\n    uint32 timestamp;\\n    uint224 priceCumulativeLast;\\n    uint224 ethPriceCumulativeLast;\\n  }\\n\\n  /**\\n   * @dev Average prices for a token in terms of weth and weth in terms of the token.\\n   *\\n   * Note: The average weth price is not equivalent to the reciprocal of the average\\n   * token price. See the UniSwap whitepaper for more info.\\n   */\\n  struct TwoWayAveragePrice {\\n    uint224 priceAverage;\\n    uint224 ethPriceAverage;\\n  }\\n\\n/* ========= View Functions ========= */\\n\\n  function pairInitialized(\\n    address uniswapFactory,\\n    address token,\\n    address weth\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address pair = UniswapV2Library.pairFor(uniswapFactory, token, weth);\\n    (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pair).getReserves();\\n    return reserve0 != 0 && reserve1 != 0;\\n  }\\n\\n  function observePrice(\\n    address uniswapFactory,\\n    address tokenIn,\\n    address quoteToken\\n  )\\n    internal\\n    view\\n    returns (uint32 /* timestamp */, uint224 /* priceCumulativeLast */)\\n  {\\n    (address token0, address token1) = UniswapV2Library.sortTokens(tokenIn, quoteToken);\\n    address pair = UniswapV2Library.calculatePair(uniswapFactory, token0, token1);\\n    if (token0 == tokenIn) {\\n      (uint256 price0Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrice0(pair);\\n      return (blockTimestamp, uint224(price0Cumulative));\\n    } else {\\n      (uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrice1(pair);\\n      return (blockTimestamp, uint224(price1Cumulative));\\n    }\\n  }\\n\\n  /**\\n   * @dev Query the current cumulative price of a token in terms of weth\\n   * and the current cumulative price of weth in terms of the token.\\n   */\\n  function observeTwoWayPrice(\\n    address uniswapFactory,\\n    address token,\\n    address weth\\n  ) internal view returns (PriceObservation memory) {\\n    (address token0, address token1) = UniswapV2Library.sortTokens(token, weth);\\n    address pair = UniswapV2Library.calculatePair(uniswapFactory, token0, token1);\\n    // Get the sorted token prices\\n    (\\n      uint256 price0Cumulative,\\n      uint256 price1Cumulative,\\n      uint32 blockTimestamp\\n    ) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n    // Check which token is weth and which is the token,\\n    // then build the price observation.\\n    if (token0 == token) {\\n      return PriceObservation({\\n        timestamp: blockTimestamp,\\n        priceCumulativeLast: uint224(price0Cumulative),\\n        ethPriceCumulativeLast: uint224(price1Cumulative)\\n      });\\n    } else {\\n      return PriceObservation({\\n        timestamp: blockTimestamp,\\n        priceCumulativeLast: uint224(price1Cumulative),\\n        ethPriceCumulativeLast: uint224(price0Cumulative)\\n      });\\n    }\\n  }\\n\\n/* ========= Utility Functions ========= */\\n\\n  /**\\n   * @dev Computes the average price of a token in terms of weth\\n   * and the average price of weth in terms of a token using two\\n   * price observations.\\n   */\\n  function computeTwoWayAveragePrice(\\n    PriceObservation memory observation1,\\n    PriceObservation memory observation2\\n  ) internal pure returns (TwoWayAveragePrice memory) {\\n    uint32 timeElapsed = uint32(observation2.timestamp - observation1.timestamp);\\n    FixedPoint.uq112x112 memory priceAverage = UniswapV2OracleLibrary.computeAveragePrice(\\n      observation1.priceCumulativeLast,\\n      observation2.priceCumulativeLast,\\n      timeElapsed\\n    );\\n    FixedPoint.uq112x112 memory ethPriceAverage = UniswapV2OracleLibrary.computeAveragePrice(\\n      observation1.ethPriceCumulativeLast,\\n      observation2.ethPriceCumulativeLast,\\n      timeElapsed\\n    );\\n    return TwoWayAveragePrice({\\n      priceAverage: priceAverage._x,\\n      ethPriceAverage: ethPriceAverage._x\\n    });\\n  }\\n\\n  function computeAveragePrice(\\n    uint32 timestampStart,\\n    uint224 priceCumulativeStart,\\n    uint32 timestampEnd,\\n    uint224 priceCumulativeEnd\\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\\n    return UniswapV2OracleLibrary.computeAveragePrice(\\n      priceCumulativeStart,\\n      priceCumulativeEnd,\\n      uint32(timestampEnd - timestampStart)\\n    );\\n  }\\n\\n  /**\\n   * @dev Computes the average price of the token the price observations\\n   * are for in terms of weth.\\n   */\\n  function computeAverageTokenPrice(\\n    PriceObservation memory observation1,\\n    PriceObservation memory observation2\\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\\n    return UniswapV2OracleLibrary.computeAveragePrice(\\n      observation1.priceCumulativeLast,\\n      observation2.priceCumulativeLast,\\n      uint32(observation2.timestamp - observation1.timestamp)\\n    );\\n  }\\n\\n  /**\\n   * @dev Computes the average price of weth in terms of the token\\n   * the price observations are for.\\n   */\\n  function computeAverageEthPrice(\\n    PriceObservation memory observation1,\\n    PriceObservation memory observation2\\n  ) internal pure returns (FixedPoint.uq112x112 memory) {\\n    return UniswapV2OracleLibrary.computeAveragePrice(\\n      observation1.ethPriceCumulativeLast,\\n      observation2.ethPriceCumulativeLast,\\n      uint32(observation2.timestamp - observation1.timestamp)\\n    );\\n  }\\n\\n  /**\\n   * @dev Compute the average value in weth of `tokenAmount` of the\\n   * token that the average price values are for.\\n   */\\n  function computeAverageEthForTokens(\\n    TwoWayAveragePrice memory prices,\\n    uint256 tokenAmount\\n  ) internal pure returns (uint144) {\\n    return FixedPoint.uq112x112(prices.priceAverage).mul(tokenAmount).decode144();\\n  }\\n\\n  /**\\n   * @dev Compute the average value of `wethAmount` weth in terms of\\n   * the token that the average price values are for.\\n   */\\n  function computeAverageTokensForEth(\\n    TwoWayAveragePrice memory prices,\\n    uint256 wethAmount\\n  ) internal pure returns (uint144) {\\n    return FixedPoint.uq112x112(prices.ethPriceAverage).mul(wethAmount).decode144();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.5.0;\\n\\n\\n/************************************************************************************************\\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\\n\\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\\n\\nModifications:\\n- Removed `sqrt` function\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n  // range: [0, 2**112 - 1]\\n  // resolution: 1 / 2**112\\n  struct uq112x112 {\\n    uint224 _x;\\n  }\\n\\n  // range: [0, 2**144 - 1]\\n  // resolution: 1 / 2**112\\n  struct uq144x112 {\\n    uint _x;\\n  }\\n\\n  uint8 private constant RESOLUTION = 112;\\n  uint private constant Q112 = uint(1) << RESOLUTION;\\n  uint private constant Q224 = Q112 << RESOLUTION;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n    return uq112x112(uint224(x) << RESOLUTION);\\n  }\\n\\n  // encodes a uint144 as a UQ144x112\\n  function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n    return uq144x112(uint256(x) << RESOLUTION);\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n    require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n    return uq112x112(self._x / uint224(x));\\n  }\\n\\n  // multiply a UQ112x112 by a uint, returning a UQ144x112\\n  // reverts on overflow\\n  function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n    uint z;\\n    require(\\n      y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\\n      \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\n    );\\n    return uq144x112(z);\\n  }\\n\\n  // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n  // equivalent to encode(numerator).div(denominator)\\n  function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n    require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n    return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n  }\\n\\n  // decode a UQ112x112 into a uint112 by truncating after the radix point\\n  function decode(uq112x112 memory self) internal pure returns (uint112) {\\n    return uint112(self._x >> RESOLUTION);\\n  }\\n\\n  // decode a UQ144x112 into a uint144 by truncating after the radix point\\n  function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n    return uint144(self._x >> RESOLUTION);\\n  }\\n\\n  // take the reciprocal of a UQ112x112\\n  function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n    require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n    return uq112x112(uint224(Q224 / self._x));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.5.0;\\n\\n/* ==========  Internal Interfaces  ========== */\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/* ==========  Internal Libraries  ========== */\\nimport \\\"./FixedPoint.sol\\\";\\n\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2OracleLibrary.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash 6d03bede0a97c72323fa1c379ed3fdf7231d0b26.\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n  using FixedPoint for *;\\n\\n  // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n  function currentBlockTimestamp() internal view returns (uint32) {\\n    return uint32(block.timestamp % 2**32);\\n  }\\n\\n  // produces the cumulative prices using counterfactuals to save gas and avoid a call to sync.\\n  function currentCumulativePrices(address pair)\\n    internal\\n    view\\n    returns (\\n      uint256 price0Cumulative,\\n      uint256 price1Cumulative,\\n      uint32 blockTimestamp\\n    )\\n  {\\n    blockTimestamp = currentBlockTimestamp();\\n    price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n    price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\\n    (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    ) = IUniswapV2Pair(pair).getReserves();\\n    require(\\n      reserve0 != 0 && reserve1 != 0,\\n      \\\"UniswapV2OracleLibrary::currentCumulativePrices: Pair has no reserves.\\\"\\n    );\\n    if (blockTimestampLast != blockTimestamp) {\\n      // subtraction overflow is desired\\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n      // addition overflow is desired\\n      // counterfactual\\n      price0Cumulative += (\\n        uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\\n        timeElapsed\\n      );\\n      // counterfactual\\n      price1Cumulative += (\\n        uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\\n        timeElapsed\\n      );\\n    }\\n  }\\n\\n  // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n  // only gets the first price\\n  function currentCumulativePrice0(address pair)\\n    internal\\n    view\\n    returns (uint256 price0Cumulative, uint32 blockTimestamp)\\n  {\\n    blockTimestamp = currentBlockTimestamp();\\n    price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n\\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\\n    (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    ) = IUniswapV2Pair(pair).getReserves();\\n    require(\\n      reserve0 != 0 && reserve1 != 0,\\n      \\\"UniswapV2OracleLibrary::currentCumulativePrice0: Pair has no reserves.\\\"\\n    );\\n    if (blockTimestampLast != blockTimestamp) {\\n      // subtraction overflow is desired\\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n      // addition overflow is desired\\n      // counterfactual\\n      price0Cumulative += (\\n        uint256(FixedPoint.fraction(reserve1, reserve0)._x) *\\n        timeElapsed\\n      );\\n    }\\n  }\\n\\n  // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n  // only gets the second price\\n  function currentCumulativePrice1(address pair)\\n    internal\\n    view\\n    returns (uint256 price1Cumulative, uint32 blockTimestamp)\\n  {\\n    blockTimestamp = currentBlockTimestamp();\\n    price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\\n    (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    ) = IUniswapV2Pair(pair).getReserves();\\n    require(\\n      reserve0 != 0 && reserve1 != 0,\\n      \\\"UniswapV2OracleLibrary::currentCumulativePrice1: Pair has no reserves.\\\"\\n    );\\n    if (blockTimestampLast != blockTimestamp) {\\n      // subtraction overflow is desired\\n      uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n      // addition overflow is desired\\n      // counterfactual\\n      price1Cumulative += (\\n        uint256(FixedPoint.fraction(reserve0, reserve1)._x) *\\n        timeElapsed\\n      );\\n    }\\n  }\\n\\n  function computeAveragePrice(\\n    uint224 priceCumulativeStart,\\n    uint224 priceCumulativeEnd,\\n    uint32 timeElapsed\\n  ) internal pure returns (FixedPoint.uq112x112 memory priceAverage) {\\n    // overflow is desired.\\n    priceAverage = FixedPoint.uq112x112(\\n      uint224((priceCumulativeEnd - priceCumulativeStart) / timeElapsed)\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV2Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.5.0;\\n\\n/************************************************************************************************\\nOriginally from https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol\\n\\nThis source code has been modified from the original, which was copied from the github repository\\nat commit hash 87edfdcaf49ccc52591502993db4c8c08ea9eec0.\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\nlibrary UniswapV2Library {\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n  }\\n\\n  function calculatePair(\\n    address factory,\\n    address token0,\\n    address token1\\n  ) internal pure returns (address pair) {\\n    pair = address(\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            hex\\\"ff\\\",\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = calculatePair(factory, token0, token1);\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevClosingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingTime\",\"type\":\"uint256\"}],\"name\":\"TimedCrowdsaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectCrowdsale","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000052a62fe122ff79741e54f70f784a7aaa2f970005000000000000000000000000eabb8996ea1662cad2f7fb715127852cd3262ae9000000000000000000000000000000000000000000000000000000005fe16acb000000000000000000000000000000000000000000000000000000005feaa54b000000000000000000000000fa5a44d3ba93d666bf29c8804a36e725ecac659a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}