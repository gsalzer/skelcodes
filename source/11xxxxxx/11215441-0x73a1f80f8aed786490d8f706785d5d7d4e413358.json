{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\n// AgnosticPrivateSale\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint value) external  returns (bool success);\r\n}\r\n\r\ncontract AgnosticPrivateSale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSold;\r\n  ERC20 public Token;\r\n  address payable public owner;\r\n  uint256 public constant decimals = 18;\r\n  uint256 private constant _precision = 10 ** decimals;\r\n  uint256 public startDate;\r\n  \r\n  bool ableToClaim;\r\n  bool sellSystem;\r\n  \r\n  struct User {\r\n    uint256 accountBalance;\r\n  }\r\n    \r\n  mapping(address => User) public users;\r\n  \r\n  address[] public allUsers;\r\n   \r\n  constructor(address token) public {\r\n    owner = msg.sender;\r\n    Token = ERC20(token);\r\n    ableToClaim = false;\r\n    sellSystem = true;\r\n    startDate = now;\r\n  }\r\n\r\n  function contribute() external payable {\r\n    require(sellSystem);\r\n    require(msg.value >= 0.01 ether);\r\n    \r\n    uint256 amount = msg.value.mul(75);\r\n    \r\n    totalSold = totalSold.add(amount);\r\n    \r\n    users[msg.sender].accountBalance = users[msg.sender].accountBalance.add(amount);\r\n     \r\n    allUsers.push(msg.sender);\r\n    \r\n    owner.transfer(msg.value);\r\n  }\r\n  \r\n   function returnAllTokens() public {\r\n    require(msg.sender == owner);\r\n    require(ableToClaim);\r\n        \r\n    for (uint id = 0; id < allUsers.length; id++) {\r\n          address getAddressUser = allUsers[id];\r\n          uint256 value = users[getAddressUser].accountBalance;\r\n          users[getAddressUser].accountBalance = users[getAddressUser].accountBalance.sub(value);\r\n          if(value != 0){\r\n             Token.transfer(msg.sender, value);\r\n          }\r\n     }\r\n  }\r\n           \r\n  function claimTokens() public {\r\n    require(ableToClaim);\r\n    uint256 value = users[msg.sender].accountBalance;\r\n    users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);\r\n    Token.transfer(msg.sender, value);\r\n  }\r\n  \r\n  function openClaimSystem (bool _ableToClaim) public {\r\n    require(msg.sender == owner);\r\n    ableToClaim = _ableToClaim;\r\n  }\r\n  \r\n  function closeSellSystem () public {\r\n    require(msg.sender == owner);\r\n    sellSystem = false;\r\n  }\r\n\r\n  function liqudity() public {\r\n    require(msg.sender == owner);\r\n    Token.transfer(msg.sender, Token.balanceOf(address(this)));\r\n  }\r\n  \r\n  function availableTokens() public view returns(uint256) {\r\n    return Token.balanceOf(address(this));\r\n  }\r\n  \r\n  function yourTokens() public view returns(uint256) {\r\n    return users[msg.sender].accountBalance;\r\n  }\r\n  \r\n  function tokenSoldSoFar() public view returns(uint256) {\r\n    return totalSold;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeSellSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqudity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ableToClaim\",\"type\":\"bool\"}],\"name\":\"openClaimSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSoldSoFar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accountBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yourTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AgnosticPrivateSale","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000164b76d48ab64ff4f28c3bffe2ef82d8910cecc7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2e2532abf784204bb59fb1503b7e50d6a80c6392f9d68f4c226355f63dbfc1b1"}]}