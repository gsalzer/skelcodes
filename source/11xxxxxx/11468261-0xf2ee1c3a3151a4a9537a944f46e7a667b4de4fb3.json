{"status":"1","message":"OK","result":[{"SourceCode":"/*                                                                           \r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..       \r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.       \r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.       \r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.       \r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.       \r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.       \r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..       \r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.                   \r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.                    \r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.                     \r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....            \r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.         \r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.        \r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.       \r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.       \r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.        \r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..         \r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....            \r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.                               \r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.                                \r\n          ...'..     .';;;;;;;;;;;;;;,,,'.                                  \r\n                       ...............                                      \r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/truefi/common/Initializable.sol\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/truefi/common/UpgradeableERC20.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/truefi/common/UpgradeableOwnable.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/truefi/interface/IYToken.sol\r\npragma solidity 0.6.10;\r\n\r\ninterface IYToken is IERC20 {\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/truefi/interface/ICurve.sol\r\npragma solidity 0.6.10;\r\n\r\ninterface ICurve {\r\n    function calc_token_amount(uint256[4] memory amounts, bool deposit) external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\ninterface ICurveGauge {\r\n    function balanceOf(address depositor) external view returns (uint256);\r\n\r\n    function minter() external returns (ICurveMinter);\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface ICurveMinter {\r\n    function mint(address gauge) external;\r\n\r\n    function token() external view returns (IERC20);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount,\r\n        bool donate_dust\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function curve() external view returns (ICurve);\r\n\r\n    function coins(int128 id) external view returns (IYToken);\r\n}\r\n\r\n// File: contracts/truefi/interface/ITrueFiPool.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * TruePool is an ERC20 which represents a share of a pool\r\n *\r\n * This contract can be used to wrap opportunities to be compatible\r\n * with TrueFi and allow users to directly opt-in through the TUSD contract\r\n *\r\n * Each TruePool is also a staking opportunity for TRU\r\n */\r\ninterface ITrueFiPool is IERC20 {\r\n    /// @dev pool token (TUSD)\r\n    function currencyToken() external view returns (IERC20);\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Mint pool tokens based on value to sender\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev exit pool\r\n     * 1. Transfer pool tokens from sender\r\n     * 2. Burn pool tokens\r\n     * 3. Transfer value of pool tokens in TUSD to sender\r\n     */\r\n    function exit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount, uint256 amountWithoutFee) external;\r\n\r\n    /**\r\n     * @dev join pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/truefi/interface/ITrueLender.sol\r\npragma solidity 0.6.10;\r\n\r\ninterface ITrueLender {\r\n    function value() external view returns (uint256);\r\n\r\n    function distribute(\r\n        address recipient,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) external;\r\n}\r\n\r\n// File: contracts/truefi/interface/IUniswapRouter.sol\r\npragma solidity 0.6.10;\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/truefi/Log.sol\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n    /**\r\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n     * number.  Revert on overflow.\r\n     *\r\n     * @param x unsigned 256-bit integer number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function fromUInt(uint256 x) internal pure returns (int128) {\r\n        require(x <= 0x7FFFFFFFFFFFFFFF);\r\n        return int128(x << 64);\r\n    }\r\n\r\n    /**\r\n     * Calculate binary logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function log_2(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n        if (xc >= 0x10000000000000000) {\r\n            xc >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (xc >= 0x100000000) {\r\n            xc >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (xc >= 0x10000) {\r\n            xc >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (xc >= 0x100) {\r\n            xc >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (xc >= 0x10) {\r\n            xc >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (xc >= 0x4) {\r\n            xc >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256(x) << uint256(127 - msb);\r\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    /**\r\n     * Calculate natural logarithm of x.  Revert if x <= 0.\r\n     *\r\n     * @param x signed 64.64-bit fixed point number\r\n     * @return signed 64.64-bit fixed point number\r\n     */\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return int128((uint256(log_2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128);\r\n    }\r\n}\r\n\r\n// File: contracts/truefi/TrueFiPool.sol\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @title TrueFi Pool\r\n * @dev Lending pool which uses curve.fi to store idle funds\r\n * Earn high interest rates on currency deposits through uncollateralized loans\r\n *\r\n * Funds deposited in this pool are NOT LIQUID!\r\n * Exiting the pool will withdraw a basket of LoanTokens backing the pool\r\n * After exiting, an account will need to wait for LoanTokens to expire and burn them\r\n * It is recommended to perform a zap or swap tokens on Uniswap for liquidity\r\n *\r\n * Funds are managed through an external function to save gas on deposits\r\n */\r\ncontract TrueFiPool is ITrueFiPool, ERC20, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    ICurvePool public _curvePool;\r\n    ICurveGauge public _curveGauge;\r\n    IERC20 public _currencyToken;\r\n    ITrueLender public _lender;\r\n    ICurveMinter public _minter;\r\n    IUniswapRouter public _uniRouter;\r\n\r\n    // fee for deposits\r\n    uint256 public joiningFee;\r\n    // track claimable fees\r\n    uint256 public claimableFees;\r\n\r\n    mapping(address => uint256) latestJoinBlock;\r\n\r\n    // ======= STORAGE DECLARATION END ============\r\n\r\n    // curve.fi data\r\n    uint8 constant N_TOKENS = 4;\r\n    uint8 constant TUSD_INDEX = 3;\r\n\r\n    /**\r\n     * @dev Emitted when fee is changed\r\n     * @param newFee New fee\r\n     */\r\n    event JoiningFeeChanged(uint256 newFee);\r\n\r\n    /**\r\n     * @dev Emitted when someone joins the pool\r\n     * @param staker Account staking\r\n     * @param deposited Amount deposited\r\n     * @param minted Amount of pool tokens minted\r\n     */\r\n    event Joined(address indexed staker, uint256 deposited, uint256 minted);\r\n\r\n    /**\r\n     * @dev Emitted when someone exits the pool\r\n     * @param staker Account exiting\r\n     * @param amount Amount unstaking\r\n     */\r\n    event Exited(address indexed staker, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are flushed into curve.fi\r\n     * @param currencyAmount Amount of tokens deposited\r\n     */\r\n    event Flushed(uint256 currencyAmount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are pulled from curve.fi\r\n     * @param yAmount Amount of pool tokens\r\n     */\r\n    event Pulled(uint256 yAmount);\r\n\r\n    /**\r\n     * @dev Emitted when funds are borrowed from pool\r\n     * @param borrower Borrower address\r\n     * @param amount Amount of funds borrowed from pool\r\n     * @param fee Fees collected from this transaction\r\n     */\r\n    event Borrow(address borrower, uint256 amount, uint256 fee);\r\n\r\n    /**\r\n     * @dev Emitted when borrower repays the pool\r\n     * @param payer Address of borrower\r\n     * @param amount Amount repaid\r\n     */\r\n    event Repaid(address indexed payer, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when fees are collected\r\n     * @param beneficiary Account to receive fees\r\n     * @param amount Amount of fees collected\r\n     */\r\n    event Collected(address indexed beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * @dev Initialize pool\r\n     * @param __curvePool curve pool address\r\n     * @param __curveGauge curve gauge address\r\n     * @param __currencyToken curve pool underlying token\r\n     * @param __lender TrueLender address\r\n     * @param __uniRouter Uniswap router\r\n     */\r\n    function initialize(\r\n        ICurvePool __curvePool,\r\n        ICurveGauge __curveGauge,\r\n        IERC20 __currencyToken,\r\n        ITrueLender __lender,\r\n        IUniswapRouter __uniRouter\r\n    ) public initializer {\r\n        ERC20.__ERC20_initialize(\"TrueFi LP\", \"TFI-LP\");\r\n        Ownable.initialize();\r\n\r\n        _curvePool = __curvePool;\r\n        _curveGauge = __curveGauge;\r\n        _currencyToken = __currencyToken;\r\n        _lender = __lender;\r\n        _minter = _curveGauge.minter();\r\n        _uniRouter = __uniRouter;\r\n\r\n        joiningFee = 25;\r\n\r\n        _currencyToken.approve(address(_curvePool), uint256(-1));\r\n        _curvePool.token().approve(address(_curvePool), uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * @dev only lender can perform borrowing or repaying\r\n     */\r\n    modifier onlyLender() {\r\n        require(msg.sender == address(_lender), \"TrueFiPool: Only lender can borrow or repay\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev get currency token address\r\n     * @return currency token address\r\n     */\r\n    function currencyToken() public override view returns (IERC20) {\r\n        return _currencyToken;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total balance of curve.fi pool tokens\r\n     */\r\n    function yTokenBalance() public view returns (uint256) {\r\n        return _curvePool.token().balanceOf(address(this)).add(_curveGauge.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual value of yCRV tokens in the pool\r\n     */\r\n    function yTokenValue() public view returns (uint256) {\r\n        return yTokenBalance().mul(_curvePool.curve().get_virtual_price()).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Virtual value of liquid assets in the pool\r\n     */\r\n    function liquidValue() public view returns (uint256) {\r\n        return currencyBalance().add(yTokenValue());\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate pool value in TUSD\r\n     * \"virtual price\" of entire pool - LoanTokens, TUSD, curve y pool tokens\r\n     * @return pool value in TUSD\r\n     */\r\n    function poolValue() public view returns (uint256) {\r\n        return liquidValue().add(_lender.value());\r\n    }\r\n\r\n    /**\r\n     * @dev ensure enough curve.fi pool tokens are available\r\n     * Check if current available amount of TUSD is enough and\r\n     * withdraw remainder from gauge\r\n     * @param neededAmount amount required\r\n     */\r\n    function ensureEnoughTokensAreAvailable(uint256 neededAmount) internal {\r\n        uint256 currentlyAvailableAmount = _curvePool.token().balanceOf(address(this));\r\n        if (currentlyAvailableAmount < neededAmount) {\r\n            _curveGauge.withdraw(neededAmount.sub(currentlyAvailableAmount));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev set pool join fee\r\n     * @param fee new fee\r\n     */\r\n    function setJoiningFee(uint256 fee) external onlyOwner {\r\n        require(fee <= 10000, \"TrueFiPool: Fee cannot exceed transaction value\");\r\n        joiningFee = fee;\r\n        emit JoiningFeeChanged(fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to approve curve gauge to spend y pool tokens\r\n     */\r\n    function approveCurve() external onlyOwner {\r\n        _curvePool.token().approve(address(_curveGauge), uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * @dev Join the pool by depositing currency tokens\r\n     * @param amount amount of currency token to deposit\r\n     */\r\n    function join(uint256 amount) external override {\r\n        uint256 fee = amount.mul(joiningFee).div(10000);\r\n        uint256 amountToDeposit = amount.sub(fee);\r\n        uint256 amountToMint = amountToDeposit;\r\n\r\n        // first staker mints same amount deposited\r\n        if (totalSupply() > 0) {\r\n            amountToMint = totalSupply().mul(amountToDeposit).div(poolValue());\r\n        }\r\n        // mint pool tokens\r\n        _mint(msg.sender, amountToMint);\r\n        claimableFees = claimableFees.add(fee);\r\n\r\n        latestJoinBlock[msg.sender] = block.number;\r\n        require(_currencyToken.transferFrom(msg.sender, address(this), amount));\r\n\r\n        emit Joined(msg.sender, amount, amountToMint);\r\n    }\r\n\r\n    // prettier-ignore\r\n    /**\r\n     * @dev Exit pool\r\n     * This function will withdraw a basket of currencies backing the pool value\r\n     * @param amount amount of pool tokens to redeem for underlying tokens\r\n     */\r\n    function exit(uint256 amount) external override nonReentrant {\r\n        require(block.number != latestJoinBlock[msg.sender], \"TrueFiPool: Cannot join and exit in same block\");\r\n        require(amount <= balanceOf(msg.sender), \"TrueFiPool: insufficient funds\");\r\n\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        // get share of currency tokens kept in the pool\r\n        uint256 currencyAmountToTransfer = amount.mul(\r\n            currencyBalance()).div(_totalSupply);\r\n\r\n        // calculate amount of curve.fi pool tokens\r\n        uint256 curveLiquidityAmountToTransfer = amount.mul(\r\n            yTokenBalance()).div(_totalSupply);\r\n\r\n        // burn tokens sent\r\n        _burn(msg.sender, amount);\r\n\r\n        // withdraw basket of loan tokens\r\n        _lender.distribute(msg.sender, amount, _totalSupply);\r\n\r\n        // if currency remaining, transfer\r\n        if (currencyAmountToTransfer > 0) {\r\n            require(_currencyToken.transfer(msg.sender, currencyAmountToTransfer));\r\n        }\r\n        // if curve tokens remaining, transfer\r\n        if (curveLiquidityAmountToTransfer > 0) {\r\n            ensureEnoughTokensAreAvailable(curveLiquidityAmountToTransfer);\r\n            require(_curvePool.token().transfer(msg.sender, curveLiquidityAmountToTransfer));\r\n        }\r\n\r\n        emit Exited(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit pool only with liquid tokens\r\n     * This function will withdraw TUSD but with a small penalty\r\n     * @param amount amount of pool tokens to redeem for underlying tokens\r\n     */\r\n    function liquidExit(uint256 amount) external nonReentrant {\r\n        require(amount <= balanceOf(msg.sender), \"TrueFiPool: Insufficient funds\");\r\n\r\n        uint256 amountToWithdraw = poolValue().mul(amount).div(totalSupply());\r\n        amountToWithdraw = amountToWithdraw.mul(liquidExitPenalty(amountToWithdraw)).div(10000);\r\n        require(amountToWithdraw <= liquidValue(), \"TrueFiPool: Not enough liquidity in pool\");\r\n\r\n        // burn tokens sent\r\n        _burn(msg.sender, amount);\r\n\r\n        if (amountToWithdraw > currencyBalance()) {\r\n            removeLiquidityFromCurve(amountToWithdraw.sub(currencyBalance()));\r\n            require(amountToWithdraw <= currencyBalance(), \"TrueFiPool: Not enough funds were withdrawn from Curve\");\r\n        }\r\n\r\n        require(_currencyToken.transfer(msg.sender, amountToWithdraw));\r\n\r\n        emit Exited(msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @dev Penalty (in % * 100) applied if liquid exit is performed with this amount\r\n     * returns 10000 if no penalty\r\n     */\r\n    function liquidExitPenalty(uint256 amount) public view returns (uint256) {\r\n        uint256 lv = liquidValue();\r\n        uint256 pv = poolValue();\r\n        if (amount == pv) {\r\n            return 10000;\r\n        }\r\n        uint256 liquidRatioBefore = lv.mul(10000).div(pv);\r\n        uint256 liquidRatioAfter = lv.sub(amount).mul(10000).div(pv.sub(amount));\r\n        return uint256(10000).sub(averageExitPenalty(liquidRatioAfter, liquidRatioBefore));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates integral of 5/(x+50)dx times 10000\r\n     */\r\n    function integrateAtPoint(uint256 x) public pure returns (uint256) {\r\n        return uint256(ABDKMath64x64.ln(ABDKMath64x64.fromUInt(x.add(50)))).mul(50000).div(2**64);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates average penalty on interval [from; to]\r\n     */\r\n    function averageExitPenalty(uint256 from, uint256 to) public pure returns (uint256) {\r\n        require(from <= to, \"TrueFiPool: To precedes from\");\r\n        if (from == 10000) {\r\n            // When all liquid, dont penalize\r\n            return 0;\r\n        }\r\n        if (from == to) {\r\n            return uint256(50000).div(from.add(50));\r\n        }\r\n        return integrateAtPoint(to).sub(integrateAtPoint(from)).div(to.sub(from));\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit idle funds into curve.fi pool and stake in gauge\r\n     * Called by owner to help manage funds in pool and save on gas for deposits\r\n     * @param currencyAmount Amount of funds to deposit into curve\r\n     * @param minMintAmount Minimum amount to mint\r\n     */\r\n    function flush(uint256 currencyAmount, uint256 minMintAmount) external onlyOwner {\r\n        require(currencyAmount <= currencyBalance(), \"TrueFiPool: Insufficient currency balance\");\r\n\r\n        uint256[N_TOKENS] memory amounts = [0, 0, 0, currencyAmount];\r\n\r\n        // add TUSD to curve\r\n        _curvePool.add_liquidity(amounts, minMintAmount);\r\n\r\n        // stake yCurve tokens in gauge\r\n        _curveGauge.deposit(_curvePool.token().balanceOf(address(this)));\r\n\r\n        emit Flushed(currencyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove liquidity from curve\r\n     * @param yAmount amount of curve pool tokens\r\n     * @param minCurrencyAmount minimum amount of tokens to withdraw\r\n     */\r\n    function pull(uint256 yAmount, uint256 minCurrencyAmount) external onlyOwner {\r\n        require(yAmount <= yTokenBalance(), \"TrueFiPool: Insufficient Curve liquidity balance\");\r\n\r\n        // unstake in gauge\r\n        ensureEnoughTokensAreAvailable(yAmount);\r\n\r\n        // remove TUSD from curve\r\n        _curvePool.remove_liquidity_one_coin(yAmount, TUSD_INDEX, minCurrencyAmount, false);\r\n\r\n        emit Pulled(yAmount);\r\n    }\r\n\r\n    // prettier-ignore\r\n    /**\r\n     * @dev Remove liquidity from curve and transfer to borrower\r\n     * @param expectedAmount expected amount to borrow\r\n     */\r\n    function borrow(uint256 expectedAmount, uint256 amountWithoutFee) external override nonReentrant onlyLender {\r\n        require(expectedAmount >= amountWithoutFee, \"TrueFiPool: Fee cannot be negative\");\r\n\r\n        // if there is not enough TUSD, withdraw from curve\r\n        if (expectedAmount > currencyBalance()) {\r\n            removeLiquidityFromCurve(expectedAmount.sub(currencyBalance()));\r\n            require(expectedAmount <= currencyBalance(), \"TrueFiPool: Not enough funds in pool to cover borrow\");\r\n        }\r\n\r\n        // calculate fees and transfer remainder\r\n        uint256 fee = expectedAmount.sub(amountWithoutFee);\r\n        claimableFees = claimableFees.add(fee);\r\n        require(_currencyToken.transfer(msg.sender, amountWithoutFee));\r\n\r\n        emit Borrow(msg.sender, expectedAmount, fee);\r\n    }\r\n\r\n    function removeLiquidityFromCurve(uint256 amountToWithdraw) internal {\r\n        // get rough estimate of how much yCRV we should sell\r\n        uint256 roughCurveTokenAmount = calcTokenAmount(amountToWithdraw).mul(1005).div(1000);\r\n        require(roughCurveTokenAmount <= yTokenBalance(), \"TrueFiPool: Not enough Curve liquidity tokens in pool to cover borrow\");\r\n        // pull tokens from gauge\r\n        ensureEnoughTokensAreAvailable(roughCurveTokenAmount);\r\n        // remove TUSD from curve\r\n        _curvePool.remove_liquidity_one_coin(roughCurveTokenAmount, TUSD_INDEX, 0, false);\r\n    }\r\n\r\n    /**\r\n     * @dev repay debt by transferring tokens to the contract\r\n     * @param currencyAmount amount to repay\r\n     */\r\n    function repay(uint256 currencyAmount) external override onlyLender {\r\n        require(_currencyToken.transferFrom(msg.sender, address(this), currencyAmount));\r\n        emit Repaid(msg.sender, currencyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Collect CRV tokens minted by staking at gauge\r\n     */\r\n    function collectCrv() external onlyOwner {\r\n        _minter.mint(address(_curveGauge));\r\n    }\r\n\r\n    /**\r\n     * @dev Sell collected CRV on Uniswap\r\n     * - Selling CRV is managed by the contract owner\r\n     * - Calculations can be made off-chain and called based on market conditions\r\n     * - Need to pass path of exact pairs to go through while executing exchange\r\n     * For example, CRV -> WETH -> TUSD\r\n     *\r\n     * @param amountIn see https://uniswap.org/docs/v2/smart-contracts/router02/#swapexacttokensfortokens\r\n     * @param amountOutMin see https://uniswap.org/docs/v2/smart-contracts/router02/#swapexacttokensfortokens\r\n     * @param path see https://uniswap.org/docs/v2/smart-contracts/router02/#swapexacttokensfortokens\r\n     */\r\n    function sellCrv(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path\r\n    ) public onlyOwner {\r\n        _minter.token().approve(address(_uniRouter), amountIn);\r\n        _uniRouter.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), block.timestamp + 1 hours);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim fees from the pool\r\n     * @param beneficiary account to send funds to\r\n     */\r\n    function collectFees(address beneficiary) external onlyOwner {\r\n        uint256 amount = claimableFees;\r\n        claimableFees = 0;\r\n\r\n        if (amount > 0) {\r\n            require(_currencyToken.transfer(beneficiary, amount));\r\n        }\r\n\r\n        emit Collected(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Expected amount of minted Curve.fi yDAI/yUSDC/yUSDT/yTUSD tokens.\r\n     * Can be used to control slippage\r\n     * Called in flush() function\r\n     * @param currencyAmount amount to calculate for\r\n     */\r\n    function calcTokenAmount(uint256 currencyAmount) public view returns (uint256) {\r\n        // prettier-ignore\r\n        uint256 yTokenAmount = currencyAmount.mul(1e18).div(\r\n            _curvePool.coins(TUSD_INDEX).getPricePerFullShare());\r\n        uint256[N_TOKENS] memory yAmounts = [0, 0, 0, yTokenAmount];\r\n        return _curvePool.curve().calc_token_amount(yAmounts, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts the value of a single yCRV into an underlying asset\r\n     * @param yAmount amount of curve pool tokens to calculate for\r\n     * @return Value of one y pool token\r\n     */\r\n    function calcWithdrawOneCoin(uint256 yAmount) public view returns (uint256) {\r\n        return _curvePool.calc_withdraw_one_coin(yAmount, TUSD_INDEX);\r\n    }\r\n\r\n    /**\r\n     * @dev Currency token balance\r\n     * @return Currency token balance\r\n     */\r\n    function currencyBalance() internal view returns (uint256) {\r\n        return _currencyToken.balanceOf(address(this)).sub(claimableFees);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"Flushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"JoiningFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"}],\"name\":\"Pulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currencyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_curveGauge\",\"outputs\":[{\"internalType\":\"contract ICurveGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_curvePool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lender\",\"outputs\":[{\"internalType\":\"contract ITrueLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minter\",\"outputs\":[{\"internalType\":\"contract ICurveMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"averageExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithoutFee\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"}],\"name\":\"calcWithdrawOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"__curvePool\",\"type\":\"address\"},{\"internalType\":\"contract ICurveGauge\",\"name\":\"__curveGauge\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"__currencyToken\",\"type\":\"address\"},{\"internalType\":\"contract ITrueLender\",\"name\":\"__lender\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapRouter\",\"name\":\"__uniRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"integrateAtPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joiningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidExitPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCurrencyAmount\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"sellCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setJoiningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TrueFiPool","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://57c82f5c42773864c2fb38cad5a1c592b35416d73b4221331002cca8d8e40f4f"}]}