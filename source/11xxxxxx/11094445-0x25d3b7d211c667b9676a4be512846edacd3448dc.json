{"status":"1","message":"OK","result":[{"SourceCode":"{\"Endless.sol\":{\"content\":\"/**\\n*\\n* SmartWay Forsage\\n* https://forsage.smartway.run\\n* (only for SmartWay.run members)\\n*\\n**/\\n\\n\\npragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\n\\ncontract Endless {\\n\\n    struct User {\\n        uint id;\\n        address referrer;\\n        uint partnersCount;\\n\\n        mapping(uint8 =\\u003e bool) activeX3Levels;\\n        mapping(uint8 =\\u003e bool) activeX6Levels;\\n\\n        mapping(uint8 =\\u003e X3) x3Matrix;\\n        mapping(uint8 =\\u003e X6) x6Matrix;\\n    }\\n\\n    struct X3 {\\n        address currentReferrer;\\n        address[] referrals;\\n        bool blocked;\\n        uint reinvestCount;\\n    }\\n\\n    struct X6 {\\n        address currentReferrer;\\n        address[] firstLevelReferrals;\\n        address[] secondLevelReferrals;\\n        bool blocked;\\n        uint reinvestCount;\\n\\n        address closedPart;\\n    }\\n\\n    uint8 public constant LAST_LEVEL = 12;\\n\\n    mapping(address =\\u003e User) public users;\\n    mapping(uint =\\u003e address) public idToAddress;\\n    mapping(uint =\\u003e address) public userIds;\\n    mapping(address =\\u003e uint) public balances;\\n\\n    uint public lastUserId = 2;\\n    address public owner;\\n\\n    mapping(uint8 =\\u003e uint) public levelPrice;\\n\\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level);\\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\\n\\n\\n    constructor(address ownerAddress) public {\\n        levelPrice[1] = 0.025 ether;\\n        for (uint8 i = 2; i \\u003c= LAST_LEVEL; i++) {\\n            levelPrice[i] = levelPrice[i-1] * 2;\\n        }\\n        owner = ownerAddress;\\n\\n        User memory user = User({\\n            id: 1,\\n            referrer: address(0),\\n            partnersCount: uint(0)\\n            });\\n\\n        users[ownerAddress] = user;\\n        idToAddress[1] = ownerAddress;\\n\\n        for (uint8 i = 1; i \\u003c= LAST_LEVEL; i++) {\\n            users[ownerAddress].activeX3Levels[i] = true;\\n            users[ownerAddress].activeX6Levels[i] = true;\\n        }\\n\\n        userIds[1] = ownerAddress;\\n    }\\n\\n    function() external payable {\\n        if(msg.data.length == 0) {\\n            return registration(msg.sender, owner);\\n        }\\n\\n        registration(msg.sender, bytesToAddress(msg.data));\\n    }\\n\\n    function registrationExt(address referrerAddress) external payable {\\n        registration(msg.sender, referrerAddress);\\n    }\\n\\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\\n        require(isUserExists(msg.sender), \\\"user is not exists. Register first.\\\");\\n        require(matrix == 1 || matrix == 2, \\\"invalid matrix\\\");\\n        require(msg.value == levelPrice[level], \\\"invalid price\\\");\\n        require(level \\u003e 1 \\u0026\\u0026 level \\u003c= LAST_LEVEL, \\\"invalid level\\\");\\n\\n        if (matrix == 1) {\\n            require(!users[msg.sender].activeX3Levels[level], \\\"level already activated\\\");\\n\\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\\n                users[msg.sender].x3Matrix[level-1].blocked = false;\\n            }\\n\\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\\n            users[msg.sender].activeX3Levels[level] = true;\\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\\n\\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level);\\n\\n        } else {\\n            require(!users[msg.sender].activeX6Levels[level], \\\"level already activated\\\");\\n\\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\\n                users[msg.sender].x6Matrix[level-1].blocked = false;\\n            }\\n\\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\\n\\n            users[msg.sender].activeX6Levels[level] = true;\\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\\n\\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level);\\n        }\\n    }\\n\\n    function registration(address userAddress, address referrerAddress) private {\\n        require(msg.value == 0.05 ether, \\\"registration cost 0.05\\\");\\n        require(!isUserExists(userAddress), \\\"user exists\\\");\\n        require(isUserExists(referrerAddress), \\\"referrer not exists\\\");\\n\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(userAddress)\\n        }\\n        require(size == 0, \\\"cannot be a contract\\\");\\n\\n        User memory user = User({\\n            id: lastUserId,\\n            referrer: referrerAddress,\\n            partnersCount: 0\\n            });\\n\\n        users[userAddress] = user;\\n        idToAddress[lastUserId] = userAddress;\\n\\n        users[userAddress].referrer = referrerAddress;\\n\\n        users[userAddress].activeX3Levels[1] = true;\\n        users[userAddress].activeX6Levels[1] = true;\\n\\n\\n        userIds[lastUserId] = userAddress;\\n        lastUserId++;\\n\\n        users[referrerAddress].partnersCount++;\\n\\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);//获取上级开通了当前等级的邀请人地址\\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\\n\\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\\n\\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\\n    }\\n\\n    //修改x3矩阵的邀请情况\\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);//？\\n\\n        if (users[referrerAddress].x3Matrix[level].referrals.length \\u003c 3) {//x3矩阵少于3 发送eth给邀请人\\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length));\\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\\n        }\\n\\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\\n        //close matrix\\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\\n        if (!users[referrerAddress].activeX3Levels[level+1] \\u0026\\u0026 level != LAST_LEVEL) {\\n            users[referrerAddress].x3Matrix[level].blocked = true;\\n        }\\n\\n        //create new one by recursion\\n        if (referrerAddress != owner) {\\n            //check referrer active level\\n            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\\n            }\\n\\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level);\\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\\n        } else {\\n            sendETHDividends(owner, userAddress, 1, level);\\n            users[owner].x3Matrix[level].reinvestCount++;\\n            emit Reinvest(owner, address(0), userAddress, 1, level);\\n        }\\n    }\\n\\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\\n        require(users[referrerAddress].activeX6Levels[level], \\\"500. Referrer level is inactive\\\");\\n\\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length \\u003c 2) {\\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length));\\n\\n            //set current level\\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\\n\\n            if (referrerAddress == owner) {\\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\\n            }\\n\\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;\\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\\n\\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\\n\\n            if ((len == 2) \\u0026\\u0026\\n            (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) \\u0026\\u0026\\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\\n                } else {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\\n                }\\n            }  else if ((len == 1 || len == 2) \\u0026\\u0026\\n            users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\\n                } else {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\\n                }\\n            } else if (len == 2 \\u0026\\u0026 users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\\n                } else {\\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\\n                }\\n            }\\n\\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\\n        }\\n\\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\\n\\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) \\u0026\\u0026\\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\\n                users[referrerAddress].x6Matrix[level].closedPart)) {\\n\\n                updateX6(userAddress, referrerAddress, level, true);\\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\\n                users[referrerAddress].x6Matrix[level].closedPart) {\\n                updateX6(userAddress, referrerAddress, level, true);\\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n            } else {\\n                updateX6(userAddress, referrerAddress, level, false);\\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n            }\\n        }\\n\\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\\n            updateX6(userAddress, referrerAddress, level, false);\\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\\n            updateX6(userAddress, referrerAddress, level, true);\\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n        }\\n\\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length \\u003c=\\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\\n            updateX6(userAddress, referrerAddress, level, false);\\n        } else {\\n            updateX6(userAddress, referrerAddress, level, true);\\n        }\\n\\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\\n    }\\n\\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\\n        if (!x2) {\\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length));\\n            //set current level\\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\\n        } else {\\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length));\\n            //set current level\\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\\n        }\\n    }\\n\\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length \\u003c 4) {\\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\\n        }\\n\\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\\n\\n        if (x6.length == 2) {\\n            if (x6[0] == referrerAddress ||\\n            x6[1] == referrerAddress) {\\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\\n            } else if (x6.length == 1) {\\n                if (x6[0] == referrerAddress) {\\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\\n                }\\n            }\\n        }\\n\\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\\n\\n        if (!users[referrerAddress].activeX6Levels[level+1] \\u0026\\u0026 level != LAST_LEVEL) {\\n            users[referrerAddress].x6Matrix[level].blocked = true;\\n        }\\n\\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\\n\\n        if (referrerAddress != owner) {\\n            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\\n\\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level);\\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\\n        } else {\\n            emit Reinvest(owner, address(0), userAddress, 2, level);\\n            sendETHDividends(owner, userAddress, 2, level);\\n        }\\n    }\\n\\n    //寻找到上面开通当前等级的邀请人\\n    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\\n        while (true) {\\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\\n                return users[userAddress].referrer;\\n            }\\n\\n            userAddress = users[userAddress].referrer;\\n        }\\n    }\\n\\n    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\\n        while (true) {\\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\\n                return users[userAddress].referrer;\\n            }\\n\\n            userAddress = users[userAddress].referrer;\\n        }\\n    }\\n\\n    function usersActiveX3Levels(address userAddress, uint8 level) public view returns(bool) {\\n        return users[userAddress].activeX3Levels[level];\\n    }\\n\\n    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\\n        return users[userAddress].activeX6Levels[level];\\n    }\\n\\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool ,uint) {\\n        return (users[userAddress].x3Matrix[level].currentReferrer,\\n        users[userAddress].x3Matrix[level].referrals,\\n        users[userAddress].x3Matrix[level].blocked,\\n        users[userAddress].x3Matrix[level].reinvestCount);\\n    }\\n\\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address,uint) {\\n        return (users[userAddress].x6Matrix[level].currentReferrer,\\n        users[userAddress].x6Matrix[level].firstLevelReferrals,\\n        users[userAddress].x6Matrix[level].secondLevelReferrals,\\n        users[userAddress].x6Matrix[level].blocked,\\n        users[userAddress].x6Matrix[level].closedPart,\\n        users[userAddress].x6Matrix[level].reinvestCount);\\n    }\\n\\n    function isUserExists(address user) public view returns (bool) {\\n        return (users[user].id != 0);\\n    }\\n\\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\\n        address receiver = userAddress;\\n        bool isExtraDividends;\\n        if (matrix == 1) {\\n            while (true) {\\n                if (users[receiver].x3Matrix[level].blocked) {\\n                    emit MissedEthReceive(receiver, _from, 1, level);\\n                    isExtraDividends = true;\\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\\n                } else {\\n                    return (receiver, isExtraDividends);\\n                }\\n            }\\n        } else {\\n            while (true) {\\n                if (users[receiver].x6Matrix[level].blocked) {\\n                    emit MissedEthReceive(receiver, _from, 2, level);\\n                    isExtraDividends = true;\\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\\n                } else {\\n                    return (receiver, isExtraDividends);\\n                }\\n            }\\n        }\\n    }\\n\\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\\n\\n        if (!address(uint160(receiver)).send(levelPrice[level])) {\\n            return address(uint160(receiver)).transfer(address(this).balance);\\n        }\\n\\n        if (isExtraDividends) {\\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\\n        }\\n    }\\n\\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n}\\n\"},\"ETPlan.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\n\\nimport \\\"./ETPlanToken.sol\\\";\\nimport \\\"./Endless.sol\\\";\\n\\ncontract ETPlan {\\n\\n    struct User {\\n        uint id;\\n        address referrer;\\n        uint partnersCount;\\n\\n        mapping(uint8 =\\u003e bool) activeQ8Levels;\\n        mapping(uint8 =\\u003e bool) blocked;\\n        mapping(uint8 =\\u003e uint) income;\\n    }\\n\\n    struct Q8 {\\n        address currentReferrer;\\n        address[] firstLevelReferrals;\\n        address[] secondLevelReferrals;\\n        uint reinvestCount;\\n    }\\n\\n    uint8 public constant LAST_LEVEL = 12;\\n\\n    uint public lastUserId = 2;\\n    address public owner;\\n    address public pool;\\n    address public manager;\\n    address public eTPlanToken;\\n\\n    mapping(uint8 =\\u003e uint) public levelPrice;\\n    mapping(uint8 =\\u003e Q8) public q8Matrix;\\n    mapping(address =\\u003e User) public users;\\n    mapping(uint =\\u003e address) public idToAddress;\\n\\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\\n    event NewRound(address indexed user, address indexed referrer, uint8 level);\\n\\n    address public super;\\n\\n    address public _this;\\n\\n    modifier OnlySuper {\\n        require(msg.sender == super);\\n        _;\\n    }\\n\\n    constructor(address _token) public {\\n        levelPrice[1] = 0.1 ether;\\n        for (uint8 i = 2; i \\u003c= LAST_LEVEL; i++) {\\n            levelPrice[i] = levelPrice[i - 1] * 2;\\n        }\\n        owner = msg.sender;\\n        super = msg.sender;\\n        manager = msg.sender;\\n        pool = msg.sender;\\n        eTPlanToken = _token;\\n        _this = address(this);\\n    }\\n\\n    function initEnd(address _endless, uint start, uint end) OnlySuper external {\\n\\n        Endless endless = Endless(address(uint160(_endless)));\\n        owner = endless.owner();\\n        lastUserId = end + 1;\\n\\n        for (uint i = start; i \\u003c= end; i++) {\\n            address currentUser = endless.userIds(i);\\n            (uint id,address referrer,uint partnersCount) = endless.users(currentUser);\\n            User memory user = User({\\n                id : id,\\n                referrer : referrer,\\n                partnersCount : partnersCount\\n                });\\n            users[currentUser] = user;\\n\\n            for (uint8 j = 1; j \\u003c= 12; j++) {\\n                if (i == 3) {\\n                    users[currentUser].blocked[j] = true;\\n                    users[currentUser].activeQ8Levels[j] = false;\\n                } else {\\n                    bool active = endless.usersActiveX6Levels(currentUser, j);\\n                    users[currentUser].activeQ8Levels[j] = active;\\n                }\\n            }\\n\\n            idToAddress[i] = currentUser;\\n        }\\n    }\\n\\n    function() external payable {\\n        if (msg.data.length == 0) {\\n            return registration(msg.sender, owner);\\n        }\\n\\n        registration(msg.sender, bytesToAddress(msg.data));\\n    }\\n\\n    function registrationExt(address referrerAddress) external payable {\\n        registration(msg.sender, referrerAddress);\\n    }\\n\\n    function registration(address userAddress, address referrerAddress) private {\\n        require(msg.value == 0.1 ether, \\\"registration cost 0.1\\\");\\n        require(!isUserExists(userAddress), \\\"user exists\\\");\\n        require(isUserExists(referrerAddress), \\\"referrer not exists\\\");\\n\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(userAddress)\\n        }\\n        require(size == 0, \\\"cannot be a contract\\\");\\n\\n        User memory user = User({\\n            id : lastUserId,\\n            referrer : referrerAddress,\\n            partnersCount : 0\\n            });\\n\\n        users[userAddress] = user;\\n        idToAddress[lastUserId] = userAddress;\\n\\n        users[userAddress].activeQ8Levels[1] = true;\\n\\n        lastUserId++;\\n\\n        users[referrerAddress].partnersCount++;\\n\\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\\n\\n        updateQ8Referrer(userAddress, referrerAddress, uint8(1));\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e levelPrice[uint8(1)]) {\\n            ETPlanToken(eTPlanToken).transfer(userAddress, levelPrice[uint8(1)]);\\n            ETPlanToken(eTPlanToken).transfer(referrerAddress, levelPrice[uint8(1)] / 2);\\n        }\\n\\n    }\\n\\n    function buyNewLevel(uint8 level) external payable {\\n        require(isUserExists(msg.sender), \\\"user is not exists. Register first.\\\");\\n        require(msg.value == levelPrice[level], \\\"invalid price\\\");\\n        require(level \\u003e 1 \\u0026\\u0026 level \\u003c= LAST_LEVEL, \\\"invalid level\\\");\\n        require(!users[msg.sender].activeQ8Levels[level], \\\"level already activated\\\");\\n\\n        if (users[msg.sender].blocked[level - 1]) {\\n            users[msg.sender].blocked[level - 1] = false;\\n        }\\n        users[msg.sender].activeQ8Levels[level] = true;\\n        address freeReferrer = findFreeQ8Referrer(msg.sender, level);\\n        updateQ8Referrer(msg.sender, freeReferrer, level);\\n        emit NewRound(msg.sender, freeReferrer, level);\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e levelPrice[level]) {\\n            ETPlanToken(eTPlanToken).transfer(msg.sender, levelPrice[level]);\\n            ETPlanToken(eTPlanToken).transfer(freeReferrer, levelPrice[level]/2);\\n        }\\n    }\\n\\n    function updateQ8Referrer(address userAddress, address referrerAddress, uint8 level) private {\\n        require(users[referrerAddress].activeQ8Levels[level], \\\"500. Referrer level is inactive\\\");\\n\\n        if ((users[referrerAddress].income[level] % (levelPrice[level] / 2)) \\u003e= 6) {\\n            if (!users[referrerAddress].activeQ8Levels[level + 1] \\u0026\\u0026 level != LAST_LEVEL) {\\n                users[referrerAddress].blocked[level] = true;\\n            }\\n        }\\n        if (q8Matrix[level].firstLevelReferrals.length \\u003c 2) {\\n            q8Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].firstLevelReferrals.length));\\n\\n            q8Matrix[level].currentReferrer = referrerAddress;\\n            if (referrerAddress == owner) {\\n                users[owner].income[level] += levelPrice[level];\\n                return sendETHDividends(referrerAddress, userAddress, level, levelPrice[level]);\\n            }\\n\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            uint managerAmount = levelPrice[level] * 30 / 100;\\n            if (!address(uint160(manager)).send(managerAmount)) {\\n                return address(uint160(manager)).transfer(address(this).balance);\\n            }\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            return sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        }\\n        q8Matrix[level].secondLevelReferrals.push(userAddress);\\n        q8Matrix[level].currentReferrer = referrerAddress;\\n        emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].secondLevelReferrals.length + 2));\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 1) {\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            address freeReferrerRe = findFreeQ8Referrer(freeReferrer, level);\\n            users[freeReferrerRe].income[level] += levelPrice[level] * 30 / 100;\\n            return sendETHDividends(freeReferrerRe, userAddress, level, levelPrice[level] * 30 / 100);\\n        }\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 4) {//reinvest\\n            q8Matrix[level].reinvestCount++;\\n\\n            q8Matrix[level].firstLevelReferrals = new address[](0);\\n            q8Matrix[level].secondLevelReferrals = new address[](0);\\n        }\\n        address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n        users[freeReferrer].income[level] += levelPrice[level] / 2;\\n        sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        uint poolAmount = levelPrice[level] * 20 / 100;\\n        if (!address(uint160(pool)).send(poolAmount)) {\\n            return address(uint160(pool)).transfer(address(this).balance);\\n        }\\n        uint managerAmount = levelPrice[level] * 30 / 100;\\n        if (!address(uint160(manager)).send(managerAmount)) {\\n            return address(uint160(manager)).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function findFreeQ8Referrer(address userAddress, uint8 level) public view returns (address) {\\n        while (true) {\\n            if (users[users[userAddress].referrer].activeQ8Levels[level]) {\\n                return users[userAddress].referrer;\\n            }\\n\\n            userAddress = users[userAddress].referrer;\\n        }\\n    }\\n\\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns (address, bool) {\\n        address receiver = userAddress;\\n        bool isExtraDividends;\\n        while (true) {\\n            if (users[receiver].blocked[level]) {\\n                emit MissedEthReceive(receiver, _from, level);\\n                isExtraDividends = true;\\n                receiver = users[receiver].referrer;\\n            } else {\\n                return (receiver, isExtraDividends);\\n            }\\n        }\\n    }\\n\\n    function sendETHDividends(address userAddress, address _from, uint8 level, uint amount) private {\\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\\n\\n        if (!address(uint160(receiver)).send(amount)) {\\n            return address(uint160(receiver)).transfer(address(this).balance);\\n        }\\n\\n        if (isExtraDividends) {\\n            emit SentExtraEthDividends(_from, receiver, level);\\n        }\\n    }\\n\\n    function isUserExists(address user) public view returns (bool) {\\n        return (users[user].id != 0);\\n    }\\n\\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    function activeQ8Levels(address _user, uint8 level) public view returns (bool){\\n        return users[_user].activeQ8Levels[level];\\n    }\\n\\n    function blocked(address _user, uint8 level) public view returns (bool){\\n        return users[_user].blocked[level];\\n    }\\n\\n    function income(address _user, uint8 level) public view returns (uint){\\n        return users[_user].income[level];\\n    }\\n\\n    function getq8Matrix(uint8 level) public view returns (address, address[] memory, address[] memory, uint){\\n        return (q8Matrix[level].currentReferrer,\\n        q8Matrix[level].firstLevelReferrals,\\n        q8Matrix[level].secondLevelReferrals,\\n        q8Matrix[level].reinvestCount);\\n    }\\n\\n    function updatePool(address _pool) public OnlySuper {\\n        pool = _pool;\\n    }\\n\\n    function updateManager(address _manager) public OnlySuper {\\n        manager = _manager;\\n    }\\n\\n    function updateSuper(address _super) public OnlySuper {\\n        super = _super;\\n    }\\n\\n    function update(address _user, uint8 _level) public OnlySuper {\\n        require(isUserExists(_user), \\\"user not exists\\\");\\n        users[_user].activeQ8Levels[_level] = !users[_user].activeQ8Levels[_level];\\n    }\\n\\n    function withdrawELS(address _user, uint _value) public OnlySuper {\\n        ETPlanToken(eTPlanToken).transfer(_user, _value);\\n    }\\n}\\n\"},\"ETPlanToken.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\n\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin- solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient. \\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b \\u003e 0);\\n        // uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n        return a / b;\\n    }\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b \\u003c= a);\\n        return a - b;\\n    }\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c \\u003e= a);\\n        return c;\\n    }\\n}\\n\\ncontract Token {\\n\\n    /// @return total amount of tokens\\n    //function totalSupply() public view returns (uint supply);\\n\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @return The balance\\n    function balanceOf(address _owner) public view returns (uint balance);\\n\\n    /// @notice send `_value` token to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint _value) public returns (bool success);\\n\\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\\n    /// @param _from The address of the sender\\n    /// @param _to The address of the recipient\\n    /// @param _value The amount of token to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\\n\\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _value The amount of wei to be approved for transfer\\n    /// @return Whether the approval was successful or not\\n    function approve(address _spender, uint _value) public returns (bool success);\\n\\n    /// @param _owner The address of the account owning tokens\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens allowed to spent\\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\\n}\\n\\ncontract RegularToken is Token {\\n\\n    using SafeMath for uint256;\\n\\n    function transfer(address _to, uint _value) public returns (bool) {\\n        require(_to != address(0));\\n        //Default assumes totalSupply can\\u0027t be over max (2^256 - 1).\\n        require(balances[msg.sender] \\u003e= _value);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\\n        require(_to != address(0));\\n        require(balances[_from] \\u003e= _value);\\n        require(allowed[_from][msg.sender] \\u003e= _value);\\n\\n        balances[_to] = balances[_to].add(_value);\\n        balances[_from] = balances[_from].sub(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint) {\\n        return balances[_owner];\\n    }\\n\\n    function approve(address _spender, uint _value) public returns (bool) {\\n        require(_spender != address(0));\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    mapping(address =\\u003e uint) balances;\\n    mapping(address =\\u003e mapping(address =\\u003e uint)) allowed;\\n    uint public totalSupply;\\n}\\n\\ncontract UnboundedRegularToken is RegularToken {\\n\\n    uint constant MAX_UINT = 2 ** 256 - 1;\\n\\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\\n    /// @param _from Address to transfer from.\\n    /// @param _to Address to transfer to.\\n    /// @param _value Amount to transfer.\\n    /// @return Success of transfer.\\n    function transferFrom(address _from, address _to, uint _value)\\n    public\\n    returns (bool)\\n    {\\n        require(_to != address(0));\\n        uint allowance = allowed[_from][msg.sender];\\n\\n        require(balances[_from] \\u003e= _value);\\n        require(allowance \\u003e= _value);\\n\\n        balances[_to] = balances[_to].add(_value);\\n        balances[_from] = balances[_from].sub(_value);\\n        if (allowance \\u003c MAX_UINT) {\\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        }\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\\n\\ncontract ETPlanToken is UnboundedRegularToken {\\n\\n    uint8 constant public decimals = 18;\\n    string constant public name = \\\"ETPlanToken\\\";\\n    string constant public symbol = \\\"ELS\\\";\\n\\n    constructor() public {\\n        totalSupply = 33 * 10 ** 25;\\n        balances[msg.sender] = totalSupply;\\n        emit Transfer(address(0), msg.sender, totalSupply);\\n    }\\n}\"},\"ETPlanV2.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\n\\nimport \\\"./ETPlanToken.sol\\\";\\nimport \\\"./ETPlan.sol\\\";\\n\\ncontract ETPlanV2 {\\n\\n    struct User {\\n        uint id;\\n        address referrer;\\n        uint partnersCount;\\n\\n        mapping(uint8 =\\u003e bool) activeQ8Levels;\\n        mapping(uint8 =\\u003e bool) blocked;\\n        mapping(uint8 =\\u003e uint) income;\\n    }\\n\\n    struct Q8 {\\n        address currentReferrer;\\n        address[] firstLevelReferrals;\\n        address[] secondLevelReferrals;\\n        uint reinvestCount;\\n    }\\n\\n    uint8 public constant LAST_LEVEL = 12;\\n\\n    uint public lastUserId = 2;\\n    address public owner;\\n    address public pool;\\n    address public manager;\\n    address public eTPlanToken;\\n\\n    mapping(uint8 =\\u003e uint) public levelPrice;\\n    mapping(uint8 =\\u003e Q8) public q8Matrix;\\n    mapping(address =\\u003e User) public users;\\n    mapping(uint =\\u003e address) public idToAddress;\\n\\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\\n    event NewRound(address indexed user, address indexed referrer, uint8 level);\\n\\n    address public super;\\n\\n    address public _this;\\n\\n    modifier OnlySuper {\\n        require(msg.sender == super);\\n        _;\\n    }\\n\\n    constructor() public {\\n        levelPrice[1] = 0.1 ether;\\n        for (uint8 i = 2; i \\u003c= LAST_LEVEL; i++) {\\n            levelPrice[i] = levelPrice[i - 1] * 2;\\n        }\\n        _this = address(this);\\n        super = msg.sender;\\n    }\\n\\n    function initQ8(address _etplan) OnlySuper external {\\n        ETPlan etplan = ETPlan(address(uint160(_etplan)));\\n        for (uint8 j = 1; j \\u003c= 12; j++) {\\n            (address currentReferrer, address[] memory firstLevelReferrals\\n            , address[] memory secondLevelReferrals,\\n            uint reinvestCount) = etplan.getq8Matrix(j);\\n            q8Matrix[j].currentReferrer = currentReferrer;\\n            q8Matrix[j].firstLevelReferrals = firstLevelReferrals;\\n            q8Matrix[j].secondLevelReferrals = secondLevelReferrals;\\n            q8Matrix[j].reinvestCount = reinvestCount;\\n        }\\n    }\\n\\n    function initData(address _etplan, uint start, uint end) OnlySuper external {\\n\\n        ETPlan etplan = ETPlan(address(uint160(_etplan)));\\n        owner = etplan.owner();\\n        manager = etplan.manager();\\n        pool = etplan.pool();\\n        eTPlanToken = etplan.eTPlanToken();\\n        lastUserId = end + 1;\\n\\n        for (uint i = start; i \\u003c= end; i++) {\\n            address currentUser = etplan.idToAddress(i);\\n            (uint id,address referrer,uint partnersCount) = etplan.users(currentUser);\\n            User memory user = User({\\n                id : id,\\n                referrer : referrer,\\n                partnersCount : partnersCount\\n                });\\n            users[currentUser] = user;\\n\\n            for (uint8 j = 1; j \\u003c= 12; j++) {\\n                if (i == 3) {\\n                    users[currentUser].blocked[j] = true;\\n                    users[currentUser].activeQ8Levels[j] = false;\\n                } else {\\n                    bool active = etplan.activeQ8Levels(currentUser, j);\\n                    users[currentUser].activeQ8Levels[j] = active;\\n                    users[currentUser].income[j] = etplan.income(currentUser, j);\\n                }\\n            }\\n\\n            idToAddress[i] = currentUser;\\n        }\\n    }\\n\\n    function() external payable {\\n        if (msg.data.length == 0) {\\n            return registration(msg.sender, owner);\\n        }\\n\\n        registration(msg.sender, bytesToAddress(msg.data));\\n    }\\n\\n    function registrationExt(address referrerAddress) external payable {\\n        registration(msg.sender, referrerAddress);\\n    }\\n\\n    function registration(address userAddress, address referrerAddress) private {\\n        require(msg.value == 0.1 ether, \\\"registration cost 0.1\\\");\\n        require(!isUserExists(userAddress), \\\"user exists\\\");\\n        require(isUserExists(referrerAddress), \\\"referrer not exists\\\");\\n\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(userAddress)\\n        }\\n        require(size == 0, \\\"cannot be a contract\\\");\\n\\n        User memory user = User({\\n            id : lastUserId,\\n            referrer : referrerAddress,\\n            partnersCount : 0\\n            });\\n\\n        users[userAddress] = user;\\n        idToAddress[lastUserId] = userAddress;\\n\\n        users[userAddress].activeQ8Levels[1] = true;\\n\\n        lastUserId++;\\n\\n        users[referrerAddress].partnersCount++;\\n\\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\\n\\n        updateQ8Referrer(userAddress, referrerAddress, uint8(1));\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e= (levelPrice[uint8(1)] * 3 / 2)) {\\n            ETPlanToken(eTPlanToken).transfer(userAddress, levelPrice[uint8(1)]);\\n            ETPlanToken(eTPlanToken).transfer(referrerAddress, levelPrice[uint8(1)] / 2);\\n        }\\n\\n    }\\n\\n    function buyNewLevel(uint8 level) external payable {\\n        require(isUserExists(msg.sender), \\\"user is not exists. Register first.\\\");\\n        require(msg.value == levelPrice[level], \\\"invalid price\\\");\\n        require(level \\u003e 1 \\u0026\\u0026 level \\u003c= LAST_LEVEL, \\\"invalid level\\\");\\n        require(!users[msg.sender].activeQ8Levels[level], \\\"level already activated\\\");\\n\\n        if (users[msg.sender].blocked[level - 1]) {\\n            users[msg.sender].blocked[level - 1] = false;\\n        }\\n        users[msg.sender].activeQ8Levels[level] = true;\\n        address freeReferrer = findFreeQ8Referrer(msg.sender, level);\\n        updateQ8Referrer(msg.sender, freeReferrer, level);\\n        emit NewRound(msg.sender, freeReferrer, level);\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e= (levelPrice[level] * 3 / 2)) {\\n            ETPlanToken(eTPlanToken).transfer(msg.sender, levelPrice[level]);\\n            ETPlanToken(eTPlanToken).transfer(freeReferrer, levelPrice[level] / 2);\\n        }\\n    }\\n\\n    function updateQ8Referrer(address userAddress, address referrerAddress, uint8 level) private {\\n        require(users[referrerAddress].activeQ8Levels[level], \\\"500. Referrer level is inactive\\\");\\n\\n        if ((users[referrerAddress].income[level] % (levelPrice[level] / 2)) \\u003e= 6) {\\n            if (!users[referrerAddress].activeQ8Levels[level + 1] \\u0026\\u0026 level != LAST_LEVEL) {\\n                users[referrerAddress].blocked[level] = true;\\n            }\\n        }\\n        if (q8Matrix[level].firstLevelReferrals.length \\u003c 2) {\\n            q8Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].firstLevelReferrals.length));\\n\\n            q8Matrix[level].currentReferrer = referrerAddress;\\n            if (referrerAddress == owner) {\\n                users[owner].income[level] += levelPrice[level];\\n                return sendETHDividends(referrerAddress, userAddress, level, levelPrice[level]);\\n            }\\n\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            uint managerAmount = levelPrice[level] * 30 / 100;\\n            if (!address(uint160(manager)).send(managerAmount)) {\\n                return address(uint160(manager)).transfer(address(this).balance);\\n            }\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            return sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        }\\n        q8Matrix[level].secondLevelReferrals.push(userAddress);\\n        q8Matrix[level].currentReferrer = referrerAddress;\\n        emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].secondLevelReferrals.length + 2));\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 1) {\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            address freeReferrerRe = findFreeQ8Referrer(freeReferrer, level);\\n            users[freeReferrerRe].income[level] += levelPrice[level] * 30 / 100;\\n            return sendETHDividends(freeReferrerRe, userAddress, level, levelPrice[level] * 30 / 100);\\n        }\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 4) {//reinvest\\n            q8Matrix[level].reinvestCount++;\\n\\n            q8Matrix[level].firstLevelReferrals = new address[](0);\\n            q8Matrix[level].secondLevelReferrals = new address[](0);\\n        }\\n        address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n        users[freeReferrer].income[level] += levelPrice[level] / 2;\\n        sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        uint poolAmount = levelPrice[level] * 20 / 100;\\n        if (!address(uint160(pool)).send(poolAmount)) {\\n            return address(uint160(pool)).transfer(address(this).balance);\\n        }\\n        uint managerAmount = levelPrice[level] * 30 / 100;\\n        if (!address(uint160(manager)).send(managerAmount)) {\\n            return address(uint160(manager)).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function findFreeQ8Referrer(address userAddress, uint8 level) public view returns (address) {\\n        while (true) {\\n            if (users[users[userAddress].referrer].activeQ8Levels[level]) {\\n                return users[userAddress].referrer;\\n            }\\n\\n            userAddress = users[userAddress].referrer;\\n        }\\n    }\\n\\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns (address, bool) {\\n        address receiver = userAddress;\\n        bool isExtraDividends;\\n        while (true) {\\n            if (users[receiver].blocked[level]) {\\n                emit MissedEthReceive(receiver, _from, level);\\n                isExtraDividends = true;\\n                receiver = users[receiver].referrer;\\n            } else {\\n                return (receiver, isExtraDividends);\\n            }\\n        }\\n    }\\n\\n    function sendETHDividends(address userAddress, address _from, uint8 level, uint amount) private {\\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\\n\\n        if (!address(uint160(receiver)).send(amount)) {\\n            return address(uint160(receiver)).transfer(address(this).balance);\\n        }\\n\\n        if (isExtraDividends) {\\n            emit SentExtraEthDividends(_from, receiver, level);\\n        }\\n    }\\n\\n    function isUserExists(address user) public view returns (bool) {\\n        return (users[user].id != 0);\\n    }\\n\\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    function activeQ8Levels(address _user, uint8 level) public view returns (bool){\\n        return users[_user].activeQ8Levels[level];\\n    }\\n\\n    function blocked(address _user, uint8 level) public view returns (bool){\\n        return users[_user].blocked[level];\\n    }\\n\\n    function income(address _user, uint8 level) public view returns (uint){\\n        return users[_user].income[level];\\n    }\\n    function getq8Matrix(uint8 level) public view returns (address, address[] memory, address[] memory, uint){\\n        return (q8Matrix[level].currentReferrer,\\n        q8Matrix[level].firstLevelReferrals,\\n        q8Matrix[level].secondLevelReferrals,\\n        q8Matrix[level].reinvestCount);\\n    }\\n\\n    function updatePool(address _pool) public OnlySuper {\\n        pool = _pool;\\n    }\\n\\n    function updateManager(address _manager) public OnlySuper {\\n        manager = _manager;\\n    }\\n\\n    function updateSuper(address _super) public OnlySuper {\\n        super = _super;\\n    }\\n\\n    function update(address _user, uint8 _level) public OnlySuper {\\n        require(isUserExists(_user), \\\"user not exists\\\");\\n        users[_user].activeQ8Levels[_level] = !users[_user].activeQ8Levels[_level];\\n    }\\n\\n    function updateBlocked(address _user, uint8 _level) public OnlySuper {\\n        require(isUserExists(_user), \\\"user not exists\\\");\\n        users[_user].blocked[_level] = !users[_user].blocked[_level];\\n    }\\n\\n    function withdrawELS(address _user, uint _value) public OnlySuper {\\n        ETPlanToken(eTPlanToken).transfer(_user, _value);\\n    }\\n}\\n\"},\"ETPlanV3.sol\":{\"content\":\"pragma solidity \\u003e=0.4.23 \\u003c0.6.0;\\n\\nimport \\\"./ETPlanToken.sol\\\";\\nimport \\\"./ETPlanV2.sol\\\";\\n\\ncontract ETPlanV3 {\\n\\n    struct User {\\n        uint id;\\n        address referrer;\\n        uint partnersCount;\\n\\n        mapping(uint8 =\\u003e bool) activeQ8Levels;\\n        mapping(uint8 =\\u003e bool) blocked;\\n        mapping(uint8 =\\u003e uint) income;\\n    }\\n\\n    struct Q8 {\\n        address currentReferrer;\\n        address[] firstLevelReferrals;\\n        address[] secondLevelReferrals;\\n        uint reinvestCount;\\n    }\\n\\n    uint8 public constant LAST_LEVEL = 12;\\n\\n    uint public lastUserId = 2;\\n    address public owner;\\n    address public pool;\\n    address public manager;\\n    address public eTPlanToken;\\n\\n    mapping(uint8 =\\u003e uint) public levelPrice;\\n    mapping(uint8 =\\u003e Q8) public q8Matrix;\\n    mapping(address =\\u003e User) public users;\\n    mapping(uint =\\u003e address) public idToAddress;\\n\\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 level);\\n    event NewRound(address indexed user, address indexed referrer, uint8 level);\\n\\n    address public super;\\n\\n    address public _this;\\n\\n    modifier OnlySuper {\\n        require(msg.sender == super);\\n        _;\\n    }\\n\\n    constructor() public {\\n        levelPrice[1] = 0.1 ether;\\n        for (uint8 i = 2; i \\u003c= LAST_LEVEL; i++) {\\n            levelPrice[i] = levelPrice[i - 1] * 2;\\n        }\\n        _this = address(this);\\n        super = msg.sender;\\n    }\\n\\n    function initQ8(address _etplan) OnlySuper external {\\n        ETPlanV2 etplan = ETPlanV2(address(uint160(_etplan)));\\n        owner = etplan.owner();\\n        manager = etplan.manager();\\n        pool = etplan.pool();\\n        eTPlanToken = etplan.eTPlanToken();\\n\\n        for (uint8 j = 1; j \\u003c= 12; j++) {\\n            (address currentReferrer, address[] memory firstLevelReferrals\\n            , address[] memory secondLevelReferrals,\\n            uint reinvestCount) = etplan.getq8Matrix(j);\\n            q8Matrix[j].currentReferrer = currentReferrer;\\n            q8Matrix[j].firstLevelReferrals = firstLevelReferrals;\\n            q8Matrix[j].secondLevelReferrals = secondLevelReferrals;\\n            q8Matrix[j].reinvestCount = reinvestCount;\\n        }\\n    }\\n\\n    function initData(address _etplan, uint start, uint end) OnlySuper external {\\n\\n        ETPlanV2 etplan = ETPlanV2(address(uint160(_etplan)));\\n\\n        lastUserId = end + 1;\\n\\n        for (uint i = start; i \\u003c= end; i++) {\\n            address currentUser = etplan.idToAddress(i);\\n            (uint id,address referrer,uint partnersCount) = etplan.users(currentUser);\\n            User memory user = User({\\n                id : id,\\n                referrer : referrer,\\n                partnersCount : partnersCount\\n                });\\n            users[currentUser] = user;\\n\\n            for (uint8 j = 1; j \\u003c= 12; j++) {\\n                if (i == 3) {\\n                    users[currentUser].blocked[j] = true;\\n                    users[currentUser].activeQ8Levels[j] = false;\\n                } else {\\n                    bool active = etplan.activeQ8Levels(currentUser, j);\\n                    users[currentUser].activeQ8Levels[j] = active;\\n                    users[currentUser].income[j] = etplan.income(currentUser, j);\\n                }\\n            }\\n\\n            idToAddress[i] = currentUser;\\n        }\\n    }\\n\\n    function() external payable {\\n        if (msg.data.length == 0) {\\n            return registration(msg.sender, owner);\\n        }\\n\\n        registration(msg.sender, bytesToAddress(msg.data));\\n    }\\n\\n    function registrationExt(address referrerAddress) external payable {\\n        registration(msg.sender, referrerAddress);\\n    }\\n\\n    function registration(address userAddress, address referrerAddress) private {\\n        require(msg.value == 0.1 ether, \\\"registration cost 0.1\\\");\\n        require(!isUserExists(userAddress), \\\"user exists\\\");\\n        require(isUserExists(referrerAddress), \\\"referrer not exists\\\");\\n\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(userAddress)\\n        }\\n        require(size == 0, \\\"cannot be a contract\\\");\\n\\n        User memory user = User({\\n            id : lastUserId,\\n            referrer : referrerAddress,\\n            partnersCount : 0\\n            });\\n\\n        users[userAddress] = user;\\n        idToAddress[lastUserId] = userAddress;\\n\\n        users[userAddress].activeQ8Levels[1] = true;\\n\\n        lastUserId++;\\n\\n        users[referrerAddress].partnersCount++;\\n\\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\\n\\n        updateQ8Referrer(userAddress, referrerAddress, uint8(1));\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e= (levelPrice[uint8(1)] * 3 / 2)) {\\n            ETPlanToken(eTPlanToken).transfer(userAddress, levelPrice[uint8(1)]);\\n            ETPlanToken(eTPlanToken).transfer(referrerAddress, levelPrice[uint8(1)] / 2);\\n        }\\n\\n    }\\n\\n    function buyNewLevel(uint8 level) external payable {\\n        require(isUserExists(msg.sender), \\\"user is not exists. Register first.\\\");\\n        require(msg.value == levelPrice[level], \\\"invalid price\\\");\\n        require(level \\u003e 1 \\u0026\\u0026 level \\u003c= LAST_LEVEL, \\\"invalid level\\\");\\n        require(!users[msg.sender].activeQ8Levels[level], \\\"level already activated\\\");\\n\\n        if (users[msg.sender].blocked[level - 1]) {\\n            users[msg.sender].blocked[level - 1] = false;\\n        }\\n        users[msg.sender].activeQ8Levels[level] = true;\\n        address freeReferrer = findFreeQ8Referrer(msg.sender, level);\\n        updateQ8Referrer(msg.sender, freeReferrer, level);\\n        emit NewRound(msg.sender, freeReferrer, level);\\n        if (ETPlanToken(eTPlanToken).balanceOf(_this) \\u003e= (levelPrice[level] * 3 / 2)) {\\n            ETPlanToken(eTPlanToken).transfer(msg.sender, levelPrice[level]);\\n            ETPlanToken(eTPlanToken).transfer(freeReferrer, levelPrice[level] / 2);\\n        }\\n    }\\n\\n    function updateQ8Referrer(address userAddress, address referrerAddress, uint8 level) private {\\n        require(users[referrerAddress].activeQ8Levels[level], \\\"500. Referrer level is inactive\\\");\\n\\n        if ((users[referrerAddress].income[level] / (levelPrice[level] / 2)) \\u003e= 6) {\\n            if (!users[referrerAddress].activeQ8Levels[level + 1] \\u0026\\u0026 level != LAST_LEVEL) {\\n                users[referrerAddress].blocked[level] = true;\\n            }\\n        }\\n        if (q8Matrix[level].firstLevelReferrals.length \\u003c 2) {\\n            q8Matrix[level].firstLevelReferrals.push(userAddress);\\n            emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].firstLevelReferrals.length));\\n\\n            q8Matrix[level].currentReferrer = referrerAddress;\\n            if (referrerAddress == owner) {\\n                users[owner].income[level] += levelPrice[level];\\n                return sendETHDividends(referrerAddress, userAddress, level, levelPrice[level]);\\n            }\\n\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            uint managerAmount = levelPrice[level] * 30 / 100;\\n            if (!address(uint160(manager)).send(managerAmount)) {\\n                return address(uint160(manager)).transfer(address(this).balance);\\n            }\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            return sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        }\\n        q8Matrix[level].secondLevelReferrals.push(userAddress);\\n        q8Matrix[level].currentReferrer = referrerAddress;\\n        emit NewUserPlace(userAddress, referrerAddress, level, uint8(q8Matrix[level].secondLevelReferrals.length + 2));\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 1) {\\n            address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n            users[freeReferrer].income[level] += levelPrice[level] / 2;\\n            sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n            uint poolAmount = levelPrice[level] * 20 / 100;\\n            if (!address(uint160(pool)).send(poolAmount)) {\\n                return address(uint160(pool)).transfer(address(this).balance);\\n            }\\n            address freeReferrerRe = findFreeQ8Referrer(freeReferrer, level);\\n            users[freeReferrerRe].income[level] += levelPrice[level] * 30 / 100;\\n            return sendETHDividends(freeReferrerRe, userAddress, level, levelPrice[level] * 30 / 100);\\n        }\\n\\n        if (q8Matrix[level].secondLevelReferrals.length == 4) {//reinvest\\n            q8Matrix[level].reinvestCount++;\\n\\n            q8Matrix[level].firstLevelReferrals = new address[](0);\\n            q8Matrix[level].secondLevelReferrals = new address[](0);\\n        }\\n        address freeReferrer = findFreeQ8Referrer(userAddress, level);\\n        users[freeReferrer].income[level] += levelPrice[level] / 2;\\n        sendETHDividends(freeReferrer, userAddress, level, levelPrice[level] / 2);\\n        uint poolAmount = levelPrice[level] * 20 / 100;\\n        if (!address(uint160(pool)).send(poolAmount)) {\\n            return address(uint160(pool)).transfer(address(this).balance);\\n        }\\n        uint managerAmount = levelPrice[level] * 30 / 100;\\n        if (!address(uint160(manager)).send(managerAmount)) {\\n            return address(uint160(manager)).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function findFreeQ8Referrer(address userAddress, uint8 level) public view returns (address) {\\n        while (true) {\\n            if (users[users[userAddress].referrer].activeQ8Levels[level]) {\\n                return users[userAddress].referrer;\\n            }\\n\\n            userAddress = users[userAddress].referrer;\\n        }\\n    }\\n\\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns (address, bool) {\\n        address receiver = userAddress;\\n        bool isExtraDividends;\\n        while (true) {\\n            if (users[receiver].blocked[level]) {\\n                emit MissedEthReceive(receiver, _from, level);\\n                isExtraDividends = true;\\n                receiver = users[receiver].referrer;\\n            } else {\\n                return (receiver, isExtraDividends);\\n            }\\n        }\\n    }\\n\\n    function sendETHDividends(address userAddress, address _from, uint8 level, uint amount) private {\\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, level);\\n\\n        if (!address(uint160(receiver)).send(amount)) {\\n            return address(uint160(receiver)).transfer(address(this).balance);\\n        }\\n\\n        if (isExtraDividends) {\\n            emit SentExtraEthDividends(_from, receiver, level);\\n        }\\n    }\\n\\n    function isUserExists(address user) public view returns (bool) {\\n        return (users[user].id != 0);\\n    }\\n\\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    function activeQ8Levels(address _user, uint8 level) public view returns (bool){\\n        return users[_user].activeQ8Levels[level];\\n    }\\n\\n    function blocked(address _user, uint8 level) public view returns (bool){\\n        return users[_user].blocked[level];\\n    }\\n\\n    function income(address _user, uint8 level) public view returns (uint){\\n        return users[_user].income[level];\\n    }\\n\\n    function getUserInfo(address _user, uint8 level) public view returns (bool, bool, uint){\\n        return (users[_user].activeQ8Levels[level]\\n        , users[_user].blocked[level]\\n        , users[_user].income[level]);\\n    }\\n\\n    function getq8Matrix(uint8 level) public view returns (address, address[] memory, address[] memory, uint){\\n        return (q8Matrix[level].currentReferrer,\\n        q8Matrix[level].firstLevelReferrals,\\n        q8Matrix[level].secondLevelReferrals,\\n        q8Matrix[level].reinvestCount);\\n    }\\n\\n    function updatePool(address _pool) public OnlySuper {\\n        pool = _pool;\\n    }\\n\\n    function updateManager(address _manager) public OnlySuper {\\n        manager = _manager;\\n    }\\n\\n    function updateSuper(address _super) public OnlySuper {\\n        super = _super;\\n    }\\n\\n    function update(address _user, uint8 _level) public OnlySuper {\\n        require(isUserExists(_user), \\\"user not exists\\\");\\n        users[_user].activeQ8Levels[_level] = !users[_user].activeQ8Levels[_level];\\n    }\\n\\n    function updateBlocked(address _user, uint8 _level) public OnlySuper {\\n        require(isUserExists(_user), \\\"user not exists\\\");\\n        users[_user].blocked[_level] = !users[_user].blocked[_level];\\n    }\\n\\n    function withdrawELS(address _user, uint _value) public OnlySuper {\\n        ETPlanToken(eTPlanToken).transfer(_user, _value);\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_etplan\",\"type\":\"address\"}],\"name\":\"initQ8\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_this\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"income\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawELS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"q8Matrix\",\"outputs\":[{\"name\":\"currentReferrer\",\"type\":\"address\"},{\"name\":\"reinvestCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeQ8Referrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"activeQ8Levels\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"super\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_super\",\"type\":\"address\"}],\"name\":\"updateSuper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eTPlanToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"updateBlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getq8Matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"blocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etplan\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"initData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"NewRound\",\"type\":\"event\"}]","ContractName":"ETPlanV3","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a6614ee6aa7ab84bb12f72f9376ae1620972ca426b423ad58a592cd40aefd119"}]}