{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.5.11;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract QuantumIO{\r\n    using SafeMath for uint256;\r\n    uint256 internal constant ENTRY_AMOUNT = 0.05 ether;\r\n    uint256[] internal basketPrice;\r\n    uint256 internal totalUsers;\r\n    uint256 internal extraWallet;\r\n    address owner;\r\n    \r\n    struct User {\r\n        uint256 id;\r\n        uint256[] referralArray;\r\n        address upline;\r\n        uint256 basketsPurchased;\r\n        uint256 totalEarning;\r\n        bool isExist;\r\n        \r\n    }\r\n    struct UserCycles{\r\n        uint256 cycle1;\r\n        uint256 cycle2;\r\n        uint256 cycle3;\r\n        uint256 cycle4;\r\n        uint256 cycle5;\r\n        uint256 cycle6;\r\n        uint256 cycle7;\r\n        uint256 cycle8;\r\n        uint256 cycle9;\r\n        uint256 cycle10;\r\n        uint256 cycle11;\r\n        uint256 cycle12;\r\n        uint256 cycle13;\r\n    }\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) internal usersId;\r\n    mapping(address => UserCycles) public cycles;\r\n    event RegisterEvent(address _add);\r\n    event DistributeAmountEvent(address _upline, uint256 _percent, uint256 _amount);\r\n    event BuyBasketEvent(address _user,uint256 _basketNumber);\r\n    event ExtraWalletTransferEvent(uint256 _percent,uint256 _amount);\r\n \r\n    constructor(address _owner) public payable {\r\n        owner = _owner;\r\n        require(msg.value >= ENTRY_AMOUNT, \"insufficient amount\");\r\n        extraWallet = extraWallet.add(0.05 ether);\r\n        address(uint256(owner)).transfer(0.05 ether);\r\n        totalUsers = 1;\r\n        users[msg.sender].id = totalUsers;\r\n        users[msg.sender].isExist = true;\r\n        users[msg.sender].upline = address(0);\r\n        users[msg.sender].basketsPurchased = 1;\r\n        \r\n        usersId[totalUsers] = msg.sender;\r\n        \r\n        basketPrice.push(0.05 ether);\r\n        basketPrice.push(0.1 ether);\r\n        basketPrice.push(0.2 ether);\r\n        basketPrice.push(0.4 ether);\r\n        basketPrice.push(0.8 ether);\r\n        basketPrice.push(1.6 ether);\r\n        basketPrice.push(3.2 ether);\r\n        basketPrice.push(6.4 ether);\r\n        basketPrice.push(12.8 ether);\r\n        basketPrice.push(25.6 ether);\r\n        basketPrice.push(51.2 ether);\r\n        basketPrice.push(102.4 ether);\r\n        basketPrice.push(204.8 ether);\r\n    }\r\n\r\n    //function to register user\r\n    function Register(address _upline) public payable {\r\n        require(msg.value >= ENTRY_AMOUNT, \"less amount\");\r\n        require(users[msg.sender].isExist == false, \"user already exist\");\r\n        require(users[_upline].isExist == true, \"upline not exist\");\r\n\r\n        totalUsers++;\r\n        users[msg.sender].id = totalUsers;\r\n        users[msg.sender].upline = _upline;\r\n        users[msg.sender].isExist = true;\r\n\r\n        users[msg.sender].basketsPurchased=1;\r\n        usersId[totalUsers] = msg.sender;\r\n        users[_upline].referralArray.push(totalUsers);\r\n        cycles[_upline].cycle1++;\r\n        if(cycles[_upline].cycle1%4==0)\r\n        amountDistribute(1,true);\r\n        else\r\n        amountDistribute(1,false);\r\n      \r\n        emit RegisterEvent(msg.sender);\r\n    }\r\n    \r\n    \r\n    //function to distribute basket amount ie 50% 25% 15% 10% if its not 4th user of that cycle\r\n    function amountDistribute(uint256 _level,bool _is4thUser) internal{\r\n       bool flag;\r\n        if(_is4thUser){\r\n            address ref=users[users[msg.sender].upline].upline;\r\n            while(ref!=address(0)){\r\n                if(checkEligibility(ref,_level) ){\r\n                 users[ref].totalEarning=users[ref].totalEarning.add(basketPrice[_level-1]);\r\n                 address(uint256(ref)).transfer(basketPrice[_level-1]);\r\n                 flag = true;\r\n                 break;\r\n                }\r\n                ref=users[ref].upline;\r\n            }\r\n            if(flag==false){\r\n                address(uint256(owner)).transfer(basketPrice[_level-1]);\r\n            }\r\n          \r\n        }\r\n        else\r\n        {\r\n            uint256 total = 100;\r\n            uint256 currAmount = 50;\r\n            address ref = users[msg.sender].upline;\r\n            while(currAmount!=0 && ref!=address(0)){\r\n              if(users[ref].basketsPurchased>=_level && currAmount==50){\r\n                  users[ref].totalEarning= users[ref].totalEarning.add(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   address(uint256(ref)).transfer(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   emit DistributeAmountEvent(ref,currAmount,basketPrice[_level-1].mul(currAmount).div(100));\r\n                  currAmount = 25;\r\n                  total = total.sub(50);\r\n              }  \r\n              else if(users[ref].basketsPurchased>=_level && currAmount==25){\r\n                  users[ref].totalEarning= users[ref].totalEarning.add(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   address(uint256(ref)).transfer(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   emit DistributeAmountEvent(ref,currAmount,basketPrice[_level-1].mul(currAmount).div(100));\r\n                  currAmount = 15;\r\n                  total = total.sub(25);\r\n            }\r\n             else if(users[ref].basketsPurchased>=_level && currAmount==15){\r\n                  users[ref].totalEarning= users[ref].totalEarning.add(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   address(uint256(ref)).transfer(basketPrice[_level-1].mul(currAmount).div(100));\r\n                   emit DistributeAmountEvent(ref,currAmount,basketPrice[_level-1].mul(currAmount).div(100));\r\n                  currAmount = 10;\r\n                  total = total.sub(15);\r\n            }\r\n             else if(users[ref].basketsPurchased>=_level && currAmount==10){\r\n                  users[ref].totalEarning= users[ref].totalEarning.add(basketPrice[_level-1].mul(currAmount).div(100));\r\n                  address(uint256(ref)).transfer(basketPrice[_level-1].mul(currAmount).div(100));\r\n                  emit DistributeAmountEvent(ref,currAmount,basketPrice[_level-1].mul(currAmount).div(100));\r\n                  currAmount = 0;\r\n                  total = total.sub(10);\r\n            }\r\n           \r\n            ref = users[ref].upline;\r\n            }\r\n            \r\n            extraWallet = extraWallet.add(basketPrice[_level-1].mul(total).div(100));\r\n            address(uint256(owner)).transfer(basketPrice[_level-1].mul(total).div(100));\r\n            emit ExtraWalletTransferEvent(total,basketPrice[_level-1].mul(total).div(100));\r\n        }\r\n    }\r\n    \r\n    // function to buy a basket\r\n    function buyBasket(uint256 _basketNumber) public payable {\r\n        require(\r\n            _basketNumber > users[msg.sender].basketsPurchased &&\r\n                _basketNumber <= 13,\r\n            \"basket already purchased\"\r\n        );\r\n        require(_basketNumber == users[msg.sender].basketsPurchased+1,\"you need to purchase previous basket first\");\r\n        require(\r\n            msg.value >= basketPrice[_basketNumber - 1],\r\n            \"you should have enough balance\"\r\n        );\r\n        \r\n        users[msg.sender].basketsPurchased = users[msg.sender]\r\n            .basketsPurchased\r\n            .add(1);\r\n            emit BuyBasketEvent(msg.sender,_basketNumber);\r\n            \r\n            if(_basketNumber == 2){\r\n                cycles[users[msg.sender].upline].cycle2 ++;\r\n                if(cycles[users[msg.sender].upline].cycle2%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 3){\r\n                cycles[users[msg.sender].upline].cycle3 ++;\r\n                if(cycles[users[msg.sender].upline].cycle3%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 4){\r\n                cycles[users[msg.sender].upline].cycle4 ++;\r\n                if(cycles[users[msg.sender].upline].cycle4%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 5){\r\n                cycles[users[msg.sender].upline].cycle5 ++;\r\n                if(cycles[users[msg.sender].upline].cycle5%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 6){\r\n                cycles[users[msg.sender].upline].cycle6 ++;\r\n                if(cycles[users[msg.sender].upline].cycle6%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 7){\r\n                cycles[users[msg.sender].upline].cycle7 ++;\r\n                if(cycles[users[msg.sender].upline].cycle7%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 8){\r\n                cycles[users[msg.sender].upline].cycle8 ++;\r\n                if(cycles[users[msg.sender].upline].cycle8%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 9){\r\n                cycles[users[msg.sender].upline].cycle9 ++;\r\n                if(cycles[users[msg.sender].upline].cycle9%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 10){\r\n                cycles[users[msg.sender].upline].cycle10 ++;\r\n                if(cycles[users[msg.sender].upline].cycle10%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 11){\r\n                cycles[users[msg.sender].upline].cycle11 ++;\r\n                if(cycles[users[msg.sender].upline].cycle11%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 12){\r\n                cycles[users[msg.sender].upline].cycle12 ++;\r\n                if(cycles[users[msg.sender].upline].cycle12%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            else  if(_basketNumber == 13){\r\n                cycles[users[msg.sender].upline].cycle13 ++;\r\n                if(cycles[users[msg.sender].upline].cycle13%4==0){\r\n                    amountDistribute(_basketNumber,true);\r\n                }\r\n                else\r\n                amountDistribute(_basketNumber,false);\r\n            }\r\n            \r\n    }\r\n  \r\n \r\n  function checkEligibility(address _user,uint256 _basketNumber) internal view returns(bool){\r\n      if(cycles[_user].cycle1%4 >= 1){\r\n          if(users[_user].basketsPurchased>1 && users[_user].basketsPurchased>= _basketNumber){\r\n              return true;\r\n          }\r\n          else\r\n          return false;\r\n      }\r\n      else{\r\n          if(users[_user].basketsPurchased>= _basketNumber){\r\n              return true;\r\n          }\r\n          else\r\n          return false;\r\n      }\r\n  }\r\n//   external getter functions\r\n\r\n    function getUserInfo(address _addr) external view returns(\r\n        uint256 id,\r\n        address upline,\r\n        uint256 basketsPurchased,\r\n        uint256 totalEarning,\r\n        bool isExist\r\n        ){\r\n            User memory user=users[_addr];\r\n            return (user.id,user.upline,user.basketsPurchased,user.totalEarning,user.isExist);\r\n    }\r\n    \r\n    function getTotalUsers() public view returns(uint256){\r\n        return totalUsers;\r\n    }\r\n    \r\n    function getUserAddressUsingId(uint256 _id) public view returns(address){\r\n        return usersId[_id];\r\n    }\r\n    \r\n \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basketNumber\",\"type\":\"uint256\"}],\"name\":\"buyBasket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basketsPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarning\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle10\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle11\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle12\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle13\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getUserAddressUsingId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"Register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeAmountEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basketNumber\",\"type\":\"uint256\"}],\"name\":\"BuyBasketEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExtraWalletTransferEvent\",\"type\":\"event\"}]","ContractName":"QuantumIO","CompilerVersion":"v0.5.11+commit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c1399229ca9cb653f23fde549bc3ab79d8a9e7a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e58efbacb72f2b363ee0571c06d9bbbc6b9b3f89ff27712185970b629273462d"}]}