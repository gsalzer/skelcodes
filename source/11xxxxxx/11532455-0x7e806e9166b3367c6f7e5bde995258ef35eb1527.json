{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Governance.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IRAMv1Router.sol\\\";\\n\\ncontract Governance {\\n  using SafeMath for uint256;\\n\\n  IERC20 public YGYToken;\\n  IRAMv1Router public RAMRouter;\\n\\n  uint256 public weightedNumber; // Number 1-8 weighted by total user numbers\\n  uint256 public votingShares; // Includes voting shares generated fromimelocked YGY\\n\\n  uint256 public lastRAMRouterUpdateTime; // Last time the regenerator tax on the router was updated\\n  bool public updateStagingMode;\\n  uint256 public updateStagingReadyTime;\\n  address public owner;\\n\\n  struct User {\\n    uint256 number; // Number from 1-8 indicating the desired LGE regenerator tax %\\n    uint256 timelockedYGY;\\n    // The timelocks are stack data structure implemented via hashmaps,\\n    // there's a stack at each level (1-4)\\n    mapping(uint256 => mapping(uint256 => TimeLock)) timelocks; // mapping(level => timelock ID => timelock object)\\n    mapping(uint256 => uint256) timelockTop; // mapping (level => top of stack at this level)\\n    mapping(uint256 => uint256) timelockCount; // mapping (level => current number timelocks at this level)\\n  }\\n\\n  struct TimeLock {\\n    uint256 multipliedAmount;\\n    uint256 level;\\n    uint256 unlockTime;\\n  }\\n\\n  mapping(address => User) public users;\\n\\n  constructor(address _YGYToken, address _RAMRouter) public {\\n    YGYToken = IERC20(_YGYToken);\\n    RAMRouter = IRAMv1Router(_RAMRouter);\\n    weightedNumber = 1; // start at 1%\\n    owner = msg.sender;\\n  }\\n\\n  function updateRouter(address _RAMRouter) external {\\n    require(msg.sender == owner, \\\"!Owner\\\");\\n    RAMRouter = IRAMv1Router(_RAMRouter);\\n  }\\n\\n  function hasTimeLockAtLevel(address user, uint256 level)\\n    external\\n    view\\n    returns (\\n      bool _hasTimelock,\\n      uint256 _level,\\n      uint256 _unlockTime\\n    )\\n  {\\n    User storage userMem = users[user];\\n    uint256 timeLocks = userMem.timelockCount[level];\\n    if (timeLocks > 0) {\\n      uint256 top = userMem.timelockTop[level];\\n      uint256 unlockTime = userMem.timelocks[level][top].unlockTime;\\n      return (true, level, unlockTime);\\n    } else {\\n      return (false, level, 0);\\n    }\\n  }\\n\\n  function setUserNumber(uint256 _number) public {\\n    require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n    User storage user = users[msg.sender];\\n    user.number = _number;\\n\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  function enterRegeneratorUpdateStagingMode() public {\\n    // 1 day mandatory wait time after last router regenerator tax update\\n    require(block.timestamp >= lastRAMRouterUpdateTime.add(1 days), \\\"Must wait 1 day since last update\\\");\\n    updateStagingMode = true;\\n    updateStagingReadyTime = block.timestamp.add(10 minutes);\\n  }\\n\\n  function updateRAMRouterRegeneratorTax() public {\\n    require(updateStagingMode, \\\"Must be in update staging mode\\\");\\n    require(block.timestamp >= updateStagingReadyTime, \\\"Must wait 10 minutes since update staged\\\");\\n    updateStagingMode = false;\\n    lastRAMRouterUpdateTime = block.timestamp;\\n\\n    // Update the RAM router's regenerator tax\\n    RAMRouter.setRegeneratorTax(weightedNumber);\\n  }\\n\\n  // users can lock YGY for time durations to get multipliers on their YGY\\n  function timelockYGY(\\n    uint256 _amount,\\n    uint256 _level,\\n    uint256 _number\\n  ) public {\\n    require(_number >= 1 && _number <= 8, \\\"Number must be in range 1-8\\\");\\n    require(YGYToken.transferFrom(msg.sender, address(this), _amount), \\\"Have tokens been approved?\\\");\\n\\n    User storage user = users[msg.sender];\\n\\n    // Calculate effective voting power and create new timelock\\n    uint256 effectiveAmount = _amount.mul(getMultiplierForLevel(_level)).div(100);\\n    TimeLock memory timelock =\\n      TimeLock({ multipliedAmount: effectiveAmount, level: _level, unlockTime: block.timestamp.add(getDurationForLevel(_level)) });\\n\\n    if (user.timelockTop[_level] == 0) {\\n      user.timelockTop[_level] = user.timelockTop[_level].add(1);\\n    }\\n\\n    uint256 newTimelockCount = user.timelockCount[_level].add(1);\\n    user.timelocks[_level][newTimelockCount] = timelock;\\n    user.timelockCount[_level] = newTimelockCount;\\n\\n    // Add the new voting power to user and the total voting power\\n    user.timelockedYGY = user.timelockedYGY.add(effectiveAmount);\\n    votingShares = votingShares.add(effectiveAmount);\\n\\n    // Update number and calc new weighted number\\n    user.number = _number;\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  // User unlocks their oldest timelock, receiving all the YGY tokens directly to their address\\n  function unlockOldestTimelock(uint256 _level) public {\\n    User storage user = users[msg.sender];\\n    uint256 levelTimelockTop = user.timelockTop[_level];\\n    TimeLock storage timelock = user.timelocks[_level][levelTimelockTop];\\n    require(block.timestamp >= timelock.unlockTime, \\\"Tokens are still timelocked\\\");\\n\\n    // Update user's timelocked balances and the total YGY balance\\n    user.timelockedYGY = user.timelockedYGY.sub(timelock.multipliedAmount);\\n    votingShares = votingShares.sub(timelock.multipliedAmount);\\n\\n    // Send underlying amount of tokens to user\\n    uint256 underlyingAmount = timelock.multipliedAmount.div(getMultiplierForLevel(timelock.level).div(100));\\n    YGYToken.transfer(msg.sender, underlyingAmount);\\n\\n    // Delete the timelock and update user's timelock stack\\n    delete user.timelocks[_level][levelTimelockTop];\\n    user.timelockTop[_level] = levelTimelockTop.add(1);\\n    user.timelockCount[_level] = user.timelockCount[_level].sub(1);\\n\\n    calcWeightedNumber(msg.sender);\\n  }\\n\\n  function calcWeightedNumber(address addr) internal {\\n    User storage user = users[addr];\\n\\n    // Calculate the sum of all weights\\n    uint256 otherTotalYGY = votingShares.sub(user.timelockedYGY);\\n\\n    // Calculate the sum of all weighing factors\\n    uint256 userWeighingFactor = user.timelockedYGY.mul(user.number);\\n    uint256 otherWeighingFactor = otherTotalYGY.mul(weightedNumber);\\n    uint256 sumOfWeighingFactors = userWeighingFactor.add(otherWeighingFactor);\\n\\n    // Weighted average = (sum weighing factors / sum of weight)\\n    if (votingShares > 0 && user.timelockedYGY > 0) {\\n      weightedNumber = sumOfWeighingFactors.div(votingShares);\\n    }\\n  }\\n\\n  function getDurationForLevel(uint256 _level) public pure returns (uint256) {\\n    if (_level == 1) {\\n      return 2 weeks;\\n    } else if (_level == 2) {\\n      return 4 weeks;\\n    } else if (_level == 3) {\\n      return 12 weeks;\\n    } else if (_level == 4) {\\n      return 24 weeks;\\n    }\\n    return 2 weeks;\\n  }\\n\\n  function getMultiplierForLevel(uint256 _level) public pure returns (uint256) {\\n    if (_level == 1) {\\n      return 150; // 1.5x\\n    } else if (_level == 2) {\\n      return 300; // 3x\\n    } else if (_level == 3) {\\n      return 1000; // 10x\\n    } else if (_level == 4) {\\n      return 2500; // 25x\\n    } else {\\n      return 150;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRAMv1Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IRAMv1Router {\\n    function setRegeneratorTax(uint256 _regeneratorTax) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_YGYToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RAMRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAMRouter\",\"outputs\":[{\"internalType\":\"contract IRAMv1Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YGYToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRegeneratorUpdateStagingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getDurationForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getMultiplierForLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"hasTimeLockAtLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasTimelock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRAMRouterUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setUserNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"timelockYGY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"unlockOldestTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRAMRouterRegeneratorTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RAMRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStagingReadyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockedYGY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Governance","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000011b0a8c0fa626627601ed518c3538a39d92d609e0000000000000000000000009432b1dec04a6103b9d242627c3c309bea902e5f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}