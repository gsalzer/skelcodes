{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gelatonetwork/core/contracts/external/Ownable.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/external/SafeMath.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/OracleAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\n\\nimport { Ownable } from \\\"@gelatonetwork/core/contracts/external/Ownable.sol\\\";\\nimport { SafeMath } from \\\"@gelatonetwork/core/contracts/external/SafeMath.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IOracle } from \\\"./interfaces/IOracle.sol\\\";\\n\\n// solhint-disable max-states-count\\ncontract OracleAggregator is Ownable {\\n  using SafeMath for uint256;\\n\\n  // solhint-disable var-name-mixedcase\\n  address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  // solhint-disable var-name-mixedcase\\n  address private constant USD = 0x7354C81fbCb229187480c4f497F945C6A312d5C3;\\n\\n  string public constant version = \\\"v1.0.0\\\";\\n\\n  address public immutable WETH;\\n\\n  mapping(address => mapping(address => address)) private _tokenPairAddress;\\n  mapping(address => uint256) private _nrOfDecimalsUSD;\\n\\n  // solhint-disable function-max-lines\\n  constructor(\\n    address _weth,\\n    address[] memory _inTokens,\\n    address[] memory _outTokens,\\n    address[] memory _oracles,\\n    address[] memory _stablecoins,\\n    uint256[] memory _decimals\\n  ) public {\\n    WETH = _weth;\\n    addTokens(_inTokens, _outTokens, _oracles);\\n    addStablecoins(_stablecoins, _decimals);\\n    // required token pairs\\n    require(_tokenPairAddress[ETH][USD] != address(0));\\n    require(_tokenPairAddress[USD][ETH] != address(0));\\n  }\\n\\n  function addTokens(\\n    address[] memory _inTokens,\\n    address[] memory _outTokens,\\n    address[] memory _oracles\\n  ) public onlyOwner {\\n    require(\\n      _inTokens.length == _outTokens.length &&\\n        _inTokens.length == _oracles.length\\n    );\\n    for (uint256 i = 0; i < _inTokens.length; i++) {\\n      _tokenPairAddress[_inTokens[i]][_outTokens[i]] = _oracles[i];\\n    }\\n  }\\n\\n  function addStablecoins(\\n    address[] memory _stablecoins,\\n    uint256[] memory _decimals\\n  ) public onlyOwner {\\n    require(_stablecoins.length == _decimals.length);\\n    for (uint256 i = 0; i < _stablecoins.length; i++) {\\n      _nrOfDecimalsUSD[_stablecoins[i]] = _decimals[i];\\n    }\\n  }\\n\\n  // solhint-disable function-max-lines\\n  // solhint-disable code-complexity\\n  /// @dev expected return amount of outToken from amountIn of inToken\\n  function getExpectedReturnAmount(\\n    uint256 amountIn,\\n    address inToken,\\n    address outToken\\n  ) public view returns (uint256 returnAmount, uint256 outTokenDecimals) {\\n    // sanity checks\\n    require(amountIn > 0, \\\"OracleAggregator: amountIn is Zero\\\");\\n    require(inToken != address(0), \\\"OracleAggregator: inToken is Zero\\\");\\n    require(outToken != address(0), \\\"OracleAggregator: outToken is Zero\\\");\\n\\n    // convert WETH to ETH\\n    if (inToken == WETH) {\\n      inToken = ETH;\\n    }\\n    if (outToken == WETH) {\\n      outToken = ETH;\\n    }\\n\\n    // decimals of inToken\\n    uint256 inTokenDecimals;\\n    (inTokenDecimals, outTokenDecimals) = _getDecimals(inToken, outToken);\\n\\n    // store outToken address if it is a stablecoin\\n    address stableCoinAddress =\\n      _nrOfDecimalsUSD[outToken] > 0 ? outToken : address(0);\\n\\n    // convert any stablecoin addresses to USD address\\n    (inToken, outToken) = _convertUSD(inToken, outToken);\\n\\n    if (outToken == ETH || outToken == USD) {\\n      // when outToken is ETH or USD\\n      returnAmount = _handleConvertToEthOrUsd(\\n        amountIn,\\n        inToken,\\n        outToken,\\n        inTokenDecimals,\\n        stableCoinAddress\\n      );\\n    } else {\\n      // when outToken is not ETH or USD\\n      returnAmount = _handleConvertToToken(\\n        amountIn,\\n        inToken,\\n        outToken,\\n        inTokenDecimals\\n      );\\n    }\\n\\n    return (returnAmount, outTokenDecimals);\\n  }\\n\\n  function _handleConvertToEthOrUsd(\\n    uint256 amountIn,\\n    address inToken,\\n    address outToken,\\n    uint256 inTokenDecimals,\\n    address stableCoinAddress\\n  ) private view returns (uint256 returnAmount) {\\n    // oracle of inToken vs outToken exists\\n    // e.g. calculating KNC/ETH\\n    // and KNC/ETH oracle exists\\n    if (_tokenPairAddress[inToken][outToken] != address(0)) {\\n      (uint256 price, uint256 nrOfDecimals) = _getRate(inToken, outToken);\\n      returnAmount = stableCoinAddress != address(0)\\n        ? _matchStableCoinDecimal(\\n          stableCoinAddress,\\n          amountIn,\\n          nrOfDecimals,\\n          0,\\n          price,\\n          1\\n        )\\n        : amountIn.mul(price);\\n\\n      return returnAmount.div(10**inTokenDecimals);\\n    } else {\\n      // direct oracle of inToken vs outToken does not exist\\n      // e.g. calculating UNI/USD\\n      // UNI/ETH and USD/ETH oracles available\\n      (address pairA, address pairB) = _checkAvailablePair(inToken, outToken);\\n      if (pairA == address(0) && pairB == address(0)) return (0);\\n      (uint256 priceA, ) = _getRate(inToken, pairA);\\n      (uint256 priceB, uint256 nrOfDecimals) = _getRate(outToken, pairB);\\n\\n      nrOfDecimals = stableCoinAddress != address(0)\\n        ? _nrOfDecimalsUSD[stableCoinAddress]\\n        : nrOfDecimals;\\n\\n      returnAmount = amountIn.mul(priceA.mul(10**nrOfDecimals)).div(priceB);\\n      if (outToken != ETH) {\\n        return returnAmount.div(10**inTokenDecimals);\\n      } else {\\n        return returnAmount.div(10**_nrOfDecimalsUSD[USD]);\\n      }\\n    }\\n  }\\n\\n  function _handleConvertToToken(\\n    uint256 amountIn,\\n    address inToken,\\n    address outToken,\\n    uint256 inTokenDecimals\\n  ) private view returns (uint256 returnAmount) {\\n    (address pairA, address pairB) = _checkAvailablePair(inToken, outToken);\\n    if (pairA == address(0) && pairB == address(0)) return (0);\\n    // oracle of inToken/ETH, outToken/ETH || inToken/USD, outToken/USD exists\\n    // e.g. calculating KNC/UNI where\\n    // KNC/ETH and UNI/ETH oracles available\\n    if (pairA == pairB) {\\n      (uint256 priceA, uint256 nrOfDecimals) = _getRate(inToken, pairA);\\n\\n      (uint256 priceB, ) = _getRate(outToken, pairB);\\n\\n      returnAmount = amountIn.mul(priceA.mul(10**nrOfDecimals)).div(priceB);\\n      if (pairA == ETH) {\\n        return returnAmount.div(10**inTokenDecimals);\\n      } else {\\n        return returnAmount.div(10**_nrOfDecimalsUSD[USD]);\\n      }\\n    } else if (pairA == ETH && pairB == USD) {\\n      // oracle of inToken/ETH and outToken/USD exists\\n      // e.g. calculating UNI/SXP where\\n      // UNI/ETH and SXP/USD oracles available\\n      (uint256 priceA, ) = _getRate(inToken, pairA);\\n      (uint256 priceETHUSD, ) = _getRate(ETH, USD);\\n      (uint256 priceB, ) = _getRate(outToken, pairB);\\n\\n      returnAmount = amountIn.mul(priceA.mul(priceETHUSD)).div(priceB);\\n      return returnAmount.div(10**inTokenDecimals);\\n    } else if (pairA == USD && pairB == ETH) {\\n      // oracle of inToken/USD and outToken/ETH exists\\n      // e.g. calculating SXP/UNI where\\n      // SXP/USD and UNI/ETH oracles available\\n      uint256 numerator;\\n      {\\n        (uint256 priceA, uint256 nrOfDecimals) = _getRate(inToken, pairA);\\n\\n        (uint256 priceUSDETH, uint256 nrOfDecimalsUSDETH) = _getRate(USD, ETH);\\n\\n        numerator = priceUSDETH\\n          .mul(10**(nrOfDecimalsUSDETH.sub(nrOfDecimals)))\\n          .mul(priceA)\\n          .div(10**nrOfDecimalsUSDETH);\\n      }\\n      (uint256 priceB, ) = _getRate(outToken, pairB);\\n      returnAmount = amountIn.mul(numerator).div(priceB);\\n      return returnAmount;\\n    }\\n  }\\n\\n  /// @dev check the available oracles for token a & b\\n  /// and choose which oracles to use\\n  function _checkAvailablePair(address inToken, address outToken)\\n    private\\n    view\\n    returns (address, address)\\n  {\\n    if (\\n      _tokenPairAddress[inToken][USD] != address(0) &&\\n      _tokenPairAddress[outToken][USD] != address(0)\\n    ) {\\n      return (USD, USD);\\n    } else if (\\n      _tokenPairAddress[inToken][ETH] != address(0) &&\\n      _tokenPairAddress[outToken][ETH] != address(0)\\n    ) {\\n      return (ETH, ETH);\\n    } else if (\\n      _tokenPairAddress[inToken][ETH] != address(0) &&\\n      _tokenPairAddress[outToken][USD] != address(0)\\n    ) {\\n      return (ETH, USD);\\n    } else if (\\n      _tokenPairAddress[inToken][USD] != address(0) &&\\n      _tokenPairAddress[outToken][ETH] != address(0)\\n    ) {\\n      return (USD, ETH);\\n    } else {\\n      return (address(0), address(0));\\n    }\\n  }\\n\\n  function _getDecimals(address inToken, address _outToken)\\n    private\\n    view\\n    returns (uint256 inTokenDecimals, uint256 outTokenDecimals)\\n  {\\n    // decimals of inToken\\n    if (inToken != ETH && inToken != USD) {\\n      try ERC20(inToken).decimals() returns (uint8 _inputDecimals) {\\n        inTokenDecimals = uint256(_inputDecimals);\\n      } catch {\\n        revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n      }\\n    } else {\\n      if (inToken != ETH) {\\n        inTokenDecimals = _nrOfDecimalsUSD[USD];\\n      } else {\\n        inTokenDecimals = 18;\\n      }\\n    }\\n\\n    // decimals of outToken\\n    if (_outToken != ETH && _outToken != USD) {\\n      try ERC20(_outToken).decimals() returns (uint8 _outputDecimals) {\\n        outTokenDecimals = uint256(_outputDecimals);\\n      } catch {\\n        revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n      }\\n    } else {\\n      if (_outToken != ETH) {\\n        outTokenDecimals = _nrOfDecimalsUSD[USD];\\n      } else {\\n        outTokenDecimals = 18;\\n      }\\n    }\\n  }\\n\\n  function _getRate(address inToken, address outToken)\\n    private\\n    view\\n    returns (uint256 tokenPrice, uint256 nrOfDecimals)\\n  {\\n    if (inToken == outToken) {\\n      return (1, 0);\\n    } else {\\n      IOracle priceFeed = IOracle(_tokenPairAddress[inToken][outToken]);\\n      tokenPrice = uint256(priceFeed.latestAnswer());\\n      nrOfDecimals = priceFeed.decimals();\\n    }\\n  }\\n\\n  /// @dev converting all usd pegged stablecoins to single USD address\\n  function _convertUSD(address inToken, address outToken)\\n    private\\n    view\\n    returns (address, address)\\n  {\\n    if (_nrOfDecimalsUSD[inToken] > 0 && _nrOfDecimalsUSD[outToken] > 0) {\\n      return (USD, USD);\\n    } else if (_nrOfDecimalsUSD[inToken] > 0) {\\n      return (USD, outToken);\\n    } else if (_nrOfDecimalsUSD[outToken] > 0) {\\n      return (inToken, USD);\\n    } else {\\n      return (inToken, outToken);\\n    }\\n  }\\n\\n  /// @dev modify nrOfDecimlas and amount to follow stableCoin's nrOfDecimals\\n  function _matchStableCoinDecimal(\\n    address stableCoinAddress,\\n    uint256 amount,\\n    uint256 nrOfDecimals,\\n    uint256 padding,\\n    uint256 returnRateA,\\n    uint256 returnRateB\\n  ) private view returns (uint256 returnAmount) {\\n    uint256 div =\\n      _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n        ? 10**(_nrOfDecimalsUSD[stableCoinAddress].sub(nrOfDecimals))\\n        : 10**(nrOfDecimals.sub(_nrOfDecimalsUSD[stableCoinAddress]));\\n    returnAmount = _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n      ? amount.mul(returnRateA.mul(10**padding)).div(returnRateB).mul(div)\\n      : amount.mul(returnRateA.mul(10**padding)).div(returnRateB).div(div);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface IOracle {\\n    function latestAnswer() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_inTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"name\":\"addStablecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_inTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_outTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"}],\"name\":\"getExpectedReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outTokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OracleAggregator","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000d200000000000000000000000000000000000000000000000000000000000000e2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9000000000000000000000000ade00c28244d5ce17d72e40330b1c318cd12b7c30000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000b8c77482e45f1f44de1745f52c74426c631bdd520000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c00000000000000000000000056d811088235f11c8920698a204a5010a788f4b3000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000a0b73e1ff0b80914ab6fe0444e65848c4c34450b000000000000000000000000ed91879919b71bb6905f23af0a68d231ecf87b1400000000000000000000000024d9ab51950f3d62e9144fdc2f3135daa6ce8d1b000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000dd974d5c2e2928dea5f71b9825b8b646686bd200000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd000000000000000000000000bbbbca6a901c926f240b89eacb641d8aec7aeafd0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc9420000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a20000000000000000000000001776e1f26f98b1a5df9cd347953a26dd3cb46671000000000000000000000000408e41876cccdc0f92210600ef50372656052a38000000000000000000000000408e41876cccdc0f92210600ef50372656052a38000000000000000000000000221657776846890989a759ba2973e427dff5c9bb000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f0000000000000000000000008ce9137d39326ad0cd6491fb5cc0cba0e089b6a90000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000a982b2e19e90b2d9f7948e9c1b65d119f1ce88d60000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93e000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f4980000000000000000000000000000000000000000000000000000000000000020000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c30000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000986b5e1e1755e3c2440e960477f25201b0a8bbd40000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000006df09e975c830ecae5bd4ed9d90f3a95a4f88012000000000000000000000000231e764b44b2c1b7ca171fa8021a24ed520cde100000000000000000000000000d16d4528239e9ee52fa531af613acdb23d88c9400000000000000000000000014e613ac84a31f709eadbdf89c6cc390fdc9540a000000000000000000000000cf61d1841b178fe82c8895fe60c2edda083144160000000000000000000000008f7c7181ed1a2ba41cfc3f5d064ef91b67daef660000000000000000000000001b39ee86ec5979ba5c322b826b3ecb8c79991699000000000000000000000000dbd020caef83efd542f4de03e3cf0c28a4428bd5000000000000000000000000ca696a9eb93b81adfe6435759a29ab4cf2991a96000000000000000000000000d010e899f7ab723ac93f825cdc5aa057669557c200000000000000000000000024d9ab51950f3d62e9144fdc2f3135daa6ce8d1b000000000000000000000000656c0544ef4c98a6a98491833a89204abb045d6b000000000000000000000000f8ff43e991a81e6ec886a3d281a2c6cc19ae70fc000000000000000000000000dc530d9457755926550b59e8eccdae76241815570000000000000000000000002c1d072e956affc0d435cb7ac38ef18d24d9127c000000000000000000000000160ac928a16c93ed4895c2de6f81ecce9a7eb7b4000000000000000000000000231e764b44b2c1b7ca171fa8021a24ed520cde1000000000000000000000000082a44d92d6c329826dc557c5e1be6ebec5d5feb900000000000000000000000024551a8fb2a7211a25a17b1481f043a8a8adc7f20000000000000000000000009cb2a01a7e64992d32a34db7ceea4c919c391f6a0000000000000000000000003147d7203354dc06d9fd350c7a2437bca92387a40000000000000000000000000f59666ede214281e956cb3b2d0d69415aff4a01000000000000000000000000d4ce430c3b67b3e2f7026d86e7128588629e245500000000000000000000000079291a9d692df95334b1a0b3b4ae6bc606782f8c000000000000000000000000dc3ea94cd0ac27d9a86c180091e7f78c683d3699000000000000000000000000fb0cfd6c19e25db4a08d8a204a387cea48cc138f000000000000000000000000d6aa3d25116d8da79ea0246c4826eb951872e02e000000000000000000000000cebd2026d3c99f2a7ce028acf372c154ab4638a90000000000000000000000007c5d4f8345e66f68099581db340cd65b078c41f40000000000000000000000002da4983a622a8498bb1a21fae9d8f6c66493996200000000000000000000000000000000000000000000000000000000000000070000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c5300000000000000000000000057ab1ec28d129707052df4df418d58a2d46d5f510000000000000000000000000000000000085d4780b73119b644ae5ecd22b37600000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000012","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}