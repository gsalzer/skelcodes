{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.0;\r\n\r\ncontract Decoder {\r\n    \r\n    bytes32 public constant DEPOSIT = keccak256(\"DEPOSIT\");\r\n    bytes32 public constant MAP_TOKEN = keccak256(\"MAP_TOKEN\");\r\n    \r\n    enum SyncType {Deposit, TokenMapping, Unsupported}\r\n    \r\n    function getSyncTypeAndData(bytes memory data) internal pure returns(bytes32, bytes memory) {\r\n        (bytes32 syncType, bytes memory syncData) = abi.decode(data, (bytes32, bytes));\r\n        \r\n        return (syncType, syncData);\r\n    }\r\n    \r\n    function decodeStateSyncData(bytes calldata data) external pure returns (SyncType, address, address, bytes memory){\r\n        (bytes32 syncType, bytes memory syncData) = getSyncTypeAndData(data);\r\n        \r\n        if (syncType == MAP_TOKEN) {\r\n            (address root, address child, ) = abi.decode(syncData, (address, address, bytes32));\r\n            \r\n            return (SyncType.TokenMapping, root, child, \"\");\r\n        }\r\n        \r\n        if (syncType == DEPOSIT) {\r\n            (address depositor, address root, bytes memory depositData) = abi.decode(syncData, (address, address, bytes));\r\n            \r\n            return (SyncType.Deposit, depositor, root, depositData);\r\n        }\r\n        \r\n        return (SyncType.Unsupported, address(0), address(0), \"\");\r\n    }\r\n    \r\n    function decodeERC20Deposit(bytes calldata depositData) external pure returns(uint256) {\r\n        return abi.decode(depositData, (uint256));\r\n    }\r\n    \r\n    function decodeERC721SingleDeposit(bytes calldata depositData) external pure returns(uint256) {\r\n        return abi.decode(depositData, (uint256));\r\n    }\r\n    \r\n    function decodeERC721BatchDeposit(bytes calldata depositData) external pure returns(uint256[] memory) {\r\n        return abi.decode(depositData, (uint256[]));\r\n    }\r\n    \r\n    function decodeERC1155BatchDeposit(bytes calldata depositData) external pure returns(uint256[] memory, uint256[] memory, bytes memory) {\r\n        return abi.decode(depositData, (uint256[], uint256[], bytes));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"DEPOSIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAP_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"decodeERC1155BatchDeposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"decodeERC20Deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"decodeERC721BatchDeposit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"decodeERC721SingleDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeStateSyncData\",\"outputs\":[{\"internalType\":\"enum Decoder.SyncType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Decoder","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2afeb5b14f651dabe0c3db17bcfb37b8dfb716e0ddf3920cc3f95ec744fed4d4"}]}