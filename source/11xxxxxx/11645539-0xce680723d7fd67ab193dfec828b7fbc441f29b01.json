{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IBaseUniswapAdapter {\r\n  event Swapped(address fromAsset, address toAsset, uint256 fromAmount, uint256 receivedAmount);\r\n\r\n  struct PermitSignature {\r\n    uint256 amount;\r\n    uint256 deadline;\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n  }\r\n\r\n  struct AmountCalc {\r\n    uint256 calculatedAmount;\r\n    uint256 relativePrice;\r\n    uint256 amountInUsd;\r\n    uint256 amountOutUsd;\r\n    address[] path;\r\n  }\r\n\r\n  function WETH_ADDRESS() external returns (address);\r\n\r\n  function MAX_SLIPPAGE_PERCENT() external returns (uint256);\r\n\r\n  function FLASHLOAN_PREMIUM_TOTAL() external returns (uint256);\r\n\r\n  function USD_ADDRESS() external returns (address);\r\n\r\n  function ORACLE() external returns (IPriceOracleGetter);\r\n\r\n  function UNISWAP_ROUTER() external returns (IUniswapV2Router02);\r\n\r\n  /**\r\n   * @dev Given an input asset amount, returns the maximum output amount of the other asset and the prices\r\n   * @param amountIn Amount of reserveIn\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @return uint256 Amount out of the reserveOut\r\n   * @return uint256 The price of out amount denominated in the reserveIn currency (18 decimals)\r\n   * @return uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   * @return uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   * @return address[] The exchange path\r\n   */\r\n  function getAmountsOut(\r\n    uint256 amountIn,\r\n    address reserveIn,\r\n    address reserveOut\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      address[] memory\r\n    );\r\n\r\n  /**\r\n   * @dev Returns the minimum input asset amount required to buy the given output asset amount and the prices\r\n   * @param amountOut Amount of reserveOut\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @return uint256 Amount in of the reserveIn\r\n   * @return uint256 The price of in amount denominated in the reserveOut currency (18 decimals)\r\n   * @return uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   * @return uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   * @return address[] The exchange path\r\n   */\r\n  function getAmountsIn(\r\n    uint256 amountOut,\r\n    address reserveIn,\r\n    address reserveOut\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      address[] memory\r\n    );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title IFlashLoanReceiver interface\r\n * @notice Interface for the Aave fee IFlashLoanReceiver.\r\n * @author Aave\r\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\r\n **/\r\ninterface IFlashLoanReceiver {\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external returns (bool);\r\n\r\n  function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\r\n\r\n  function LENDING_POOL() external view returns (ILendingPool);\r\n}\r\n\r\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  ILendingPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\r\n  ILendingPool public immutable override LENDING_POOL;\r\n\r\n  constructor(ILendingPoolAddressesProvider provider) public {\r\n    ADDRESSES_PROVIDER = provider;\r\n    LENDING_POOL = ILendingPool(provider.getLendingPool());\r\n  }\r\n}\r\n\r\n\r\ninterface IPriceOracleGetter {\r\n  /**\r\n   * @dev returns the asset price in ETH\r\n   * @param asset the address of the asset\r\n   * @return the ETH price of the asset\r\n   **/\r\n  function getAssetPrice(address asset) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nlibrary DataTypes {\r\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    //tokens addresses\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint8 id;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: Reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60-63: reserved\r\n    //bit 64-79: reserve factor\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\n\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProvider {\r\n  event MarketIdSet(string newMarketId);\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function getMarketId() external view returns (string memory);\r\n\r\n  function setMarketId(string calldata marketId) external;\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal virtual view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal virtual view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(success, 'Address: unable to send value, recipient may have reverted');\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    require(\r\n      (value == 0) || (token.allowance(address(this), spender) == 0),\r\n      'SafeERC20: approve from non-zero to non-zero allowance'\r\n    );\r\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n  }\r\n\r\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls\r\n    (bool success, bytes memory returndata) = address(token).call(data);\r\n    require(success, 'SafeERC20: low-level call failed');\r\n\r\n    if (returndata.length > 0) {\r\n      // Return data is optional\r\n      // solhint-disable-next-line max-line-length\r\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface IERC20Detailed is IERC20 {\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IERC20WithPermit is IERC20 {\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Errors library\r\n * @author Aave\r\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\r\n * @dev Error messages prefix glossary:\r\n *  - VL = ValidationLogic\r\n *  - MATH = Math libraries\r\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\r\n *  - AT = AToken\r\n *  - SDT = StableDebtToken\r\n *  - VDT = VariableDebtToken\r\n *  - LP = LendingPool\r\n *  - LPAPR = LendingPoolAddressesProviderRegistry\r\n *  - LPC = LendingPoolConfiguration\r\n *  - RL = ReserveLogic\r\n *  - LPCM = LendingPoolCollateralManager\r\n *  - P = Pausable\r\n */\r\nlibrary Errors {\r\n  //common errors\r\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\r\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\r\n\r\n  //contract specific errors\r\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\r\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\r\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\r\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\r\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\r\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\r\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\r\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\r\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\r\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\r\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\r\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\r\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\r\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\r\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\r\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\r\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\r\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\r\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\r\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\r\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\r\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\r\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\r\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\r\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\r\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\r\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\r\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\r\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\r\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\r\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\r\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\r\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\r\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\r\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\r\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\r\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\r\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\r\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\r\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \"There isn't enough liquidity available to liquidate\"\r\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\r\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\r\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\r\n  string public constant MATH_ADDITION_OVERFLOW = '49';\r\n  string public constant MATH_DIVISION_BY_ZERO = '50';\r\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\r\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\r\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\r\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\r\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\r\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\r\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\r\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\r\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\r\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\r\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\r\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\r\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\r\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\r\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\r\n  string public constant RC_INVALID_LTV = '67';\r\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\r\n  string public constant RC_INVALID_LIQ_BONUS = '69';\r\n  string public constant RC_INVALID_DECIMALS = '70';\r\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\r\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\r\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\r\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\r\n  string public constant UL_INVALID_INDEX = '77';\r\n  string public constant LP_NOT_CONTRACT = '78';\r\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\r\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\r\n\r\n  enum CollateralManagerErrors {\r\n    NO_ERROR,\r\n    NO_COLLATERAL_AVAILABLE,\r\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\r\n    CURRRENCY_NOT_BORROWED,\r\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\r\n    NOT_ENOUGH_LIQUIDITY,\r\n    NO_ACTIVE_RESERVE,\r\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\r\n    INVALID_EQUAL_ASSETS_TO_SWAP,\r\n    FROZEN_RESERVE\r\n  }\r\n}\r\n\r\ninterface ILendingPool {\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n   * @param amount The amount deposited\r\n   * @param referral The referral code used\r\n   **/\r\n  event Deposit(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlyng asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   * @param referral The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 borrowRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    uint16 referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered.\r\n   */\r\n  event Paused();\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted.\r\n   */\r\n  event Unpaused();\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n   * LendingPoolCollateral manager using a DELEGATECALL\r\n   * This allows to have the events in the generated ABI for LendingPool.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n   * gets added to the LendingPool ABI\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param stableBorrowRate The new stable borrow rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 rateMode,\r\n    address onBehalfOf\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n   * For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts amounts being flash-borrowed\r\n   * @param modes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata modes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralETH the total collateral in ETH of the user\r\n   * @return totalDebtETH the total debt in ETH of the user\r\n   * @return availableBorrowsETH the borrowing power left of the user\r\n   * @return currentLiquidationThreshold the liquidation threshold of the user\r\n   * @return ltv the loan to value of the user\r\n   * @return healthFactor the current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  function initReserve(\r\n    address reserve,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\r\n    external;\r\n\r\n  function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n  /**\r\n   * @dev Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset)\r\n    external\r\n    view\r\n    returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user)\r\n    external\r\n    view\r\n    returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromAfter,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\r\n\r\n  function setPause(bool val) external;\r\n\r\n  function paused() external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title PercentageMath library\r\n * @author Aave\r\n * @notice Provides functions to perform percentage calculations\r\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\r\n * @dev Operations are rounded half up\r\n **/\r\n\r\nlibrary PercentageMath {\r\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\r\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\r\n\r\n  /**\r\n   * @dev Executes a percentage multiplication\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The percentage of value\r\n   **/\r\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    if (value == 0 || percentage == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(\r\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\r\n      Errors.MATH_MULTIPLICATION_OVERFLOW\r\n    );\r\n\r\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a percentage division\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The value divided the percentage\r\n   **/\r\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\r\n    uint256 halfPercentage = percentage / 2;\r\n\r\n    require(\r\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\r\n      Errors.MATH_MULTIPLICATION_OVERFLOW\r\n    );\r\n\r\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\r\n  }\r\n}\r\n\r\n/**\r\n * @title BaseUniswapAdapter\r\n * @notice Implements the logic for performing assets swaps in Uniswap V2\r\n * @author Aave\r\n **/\r\nabstract contract BaseUniswapAdapter is FlashLoanReceiverBase, IBaseUniswapAdapter, Ownable {\r\n  using SafeMath for uint256;\r\n  using PercentageMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Max slippage percent allowed\r\n  uint256 public constant override MAX_SLIPPAGE_PERCENT = 3000; // 30%\r\n  // FLash Loan fee set in lending pool\r\n  uint256 public constant override FLASHLOAN_PREMIUM_TOTAL = 9;\r\n  // USD oracle asset address\r\n  address public constant override USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\r\n\r\n  //  address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; mainnet\r\n  //  address public constant WETH_ADDRESS = 0xd0a1e359811322d97991e03f863a0c30c2cf029c; kovan\r\n\r\n  address public immutable override WETH_ADDRESS;\r\n  IPriceOracleGetter public immutable override ORACLE;\r\n  IUniswapV2Router02 public immutable override UNISWAP_ROUTER;\r\n\r\n  constructor(\r\n    ILendingPoolAddressesProvider addressesProvider,\r\n    IUniswapV2Router02 uniswapRouter,\r\n    address wethAddress\r\n  ) public FlashLoanReceiverBase(addressesProvider) {\r\n    ORACLE = IPriceOracleGetter(addressesProvider.getPriceOracle());\r\n    UNISWAP_ROUTER = uniswapRouter;\r\n    WETH_ADDRESS = wethAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Given an input asset amount, returns the maximum output amount of the other asset and the prices\r\n   * @param amountIn Amount of reserveIn\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @return uint256 Amount out of the reserveOut\r\n   * @return uint256 The price of out amount denominated in the reserveIn currency (18 decimals)\r\n   * @return uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   * @return uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   */\r\n  function getAmountsOut(\r\n    uint256 amountIn,\r\n    address reserveIn,\r\n    address reserveOut\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      address[] memory\r\n    )\r\n  {\r\n    AmountCalc memory results = _getAmountsOutData(reserveIn, reserveOut, amountIn);\r\n\r\n    return (\r\n      results.calculatedAmount,\r\n      results.relativePrice,\r\n      results.amountInUsd,\r\n      results.amountOutUsd,\r\n      results.path\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the minimum input asset amount required to buy the given output asset amount and the prices\r\n   * @param amountOut Amount of reserveOut\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @return uint256 Amount in of the reserveIn\r\n   * @return uint256 The price of in amount denominated in the reserveOut currency (18 decimals)\r\n   * @return uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   * @return uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   */\r\n  function getAmountsIn(\r\n    uint256 amountOut,\r\n    address reserveIn,\r\n    address reserveOut\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      address[] memory\r\n    )\r\n  {\r\n    AmountCalc memory results = _getAmountsInData(reserveIn, reserveOut, amountOut);\r\n\r\n    return (\r\n      results.calculatedAmount,\r\n      results.relativePrice,\r\n      results.amountInUsd,\r\n      results.amountOutUsd,\r\n      results.path\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Swaps an exact `amountToSwap` of an asset to another\r\n   * @param assetToSwapFrom Origin asset\r\n   * @param assetToSwapTo Destination asset\r\n   * @param amountToSwap Exact amount of `assetToSwapFrom` to be swapped\r\n   * @param minAmountOut the min amount of `assetToSwapTo` to be received from the swap\r\n   * @return the amount received from the swap\r\n   */\r\n  function _swapExactTokensForTokens(\r\n    address assetToSwapFrom,\r\n    address assetToSwapTo,\r\n    uint256 amountToSwap,\r\n    uint256 minAmountOut,\r\n    bool useEthPath\r\n  ) internal returns (uint256) {\r\n    uint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\r\n    uint256 toAssetDecimals = _getDecimals(assetToSwapTo);\r\n\r\n    uint256 fromAssetPrice = _getPrice(assetToSwapFrom);\r\n    uint256 toAssetPrice = _getPrice(assetToSwapTo);\r\n\r\n    uint256 expectedMinAmountOut =\r\n      amountToSwap\r\n        .mul(fromAssetPrice.mul(10**toAssetDecimals))\r\n        .div(toAssetPrice.mul(10**fromAssetDecimals))\r\n        .percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(MAX_SLIPPAGE_PERCENT));\r\n\r\n    require(expectedMinAmountOut < minAmountOut, 'minAmountOut exceed max slippage');\r\n\r\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), amountToSwap);\r\n\r\n    address[] memory path;\r\n    if (useEthPath) {\r\n      path = new address[](3);\r\n      path[0] = assetToSwapFrom;\r\n      path[1] = WETH_ADDRESS;\r\n      path[2] = assetToSwapTo;\r\n    } else {\r\n      path = new address[](2);\r\n      path[0] = assetToSwapFrom;\r\n      path[1] = assetToSwapTo;\r\n    }\r\n    uint256[] memory amounts =\r\n      UNISWAP_ROUTER.swapExactTokensForTokens(\r\n        amountToSwap,\r\n        minAmountOut,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n\r\n    emit Swapped(assetToSwapFrom, assetToSwapTo, amounts[0], amounts[amounts.length - 1]);\r\n\r\n    return amounts[amounts.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @dev Receive an exact amount `amountToReceive` of `assetToSwapTo` tokens for as few `assetToSwapFrom` tokens as\r\n   * possible.\r\n   * @param assetToSwapFrom Origin asset\r\n   * @param assetToSwapTo Destination asset\r\n   * @param maxAmountToSwap Max amount of `assetToSwapFrom` allowed to be swapped\r\n   * @param amountToReceive Exact amount of `assetToSwapTo` to receive\r\n   * @return the amount swapped\r\n   */\r\n  function _swapTokensForExactTokens(\r\n    address assetToSwapFrom,\r\n    address assetToSwapTo,\r\n    uint256 maxAmountToSwap,\r\n    uint256 amountToReceive,\r\n    bool useEthPath\r\n  ) internal returns (uint256) {\r\n    uint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\r\n    uint256 toAssetDecimals = _getDecimals(assetToSwapTo);\r\n\r\n    uint256 fromAssetPrice = _getPrice(assetToSwapFrom);\r\n    uint256 toAssetPrice = _getPrice(assetToSwapTo);\r\n\r\n    uint256 expectedMaxAmountToSwap =\r\n      amountToReceive\r\n        .mul(toAssetPrice.mul(10**fromAssetDecimals))\r\n        .div(fromAssetPrice.mul(10**toAssetDecimals))\r\n        .percentMul(PercentageMath.PERCENTAGE_FACTOR.add(MAX_SLIPPAGE_PERCENT));\r\n\r\n    require(maxAmountToSwap < expectedMaxAmountToSwap, 'maxAmountToSwap exceed max slippage');\r\n\r\n    // Approves the transfer for the swap. Approves for 0 first to comply with tokens that implement the anti frontrunning approval fix.\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\r\n    IERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), maxAmountToSwap);\r\n\r\n    address[] memory path;\r\n    if (useEthPath) {\r\n      path = new address[](3);\r\n      path[0] = assetToSwapFrom;\r\n      path[1] = WETH_ADDRESS;\r\n      path[2] = assetToSwapTo;\r\n    } else {\r\n      path = new address[](2);\r\n      path[0] = assetToSwapFrom;\r\n      path[1] = assetToSwapTo;\r\n    }\r\n\r\n    uint256[] memory amounts =\r\n      UNISWAP_ROUTER.swapTokensForExactTokens(\r\n        amountToReceive,\r\n        maxAmountToSwap,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n      );\r\n\r\n    emit Swapped(assetToSwapFrom, assetToSwapTo, amounts[0], amounts[amounts.length - 1]);\r\n\r\n    return amounts[0];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the price of the asset from the oracle denominated in eth\r\n   * @param asset address\r\n   * @return eth price for the asset\r\n   */\r\n  function _getPrice(address asset) internal view returns (uint256) {\r\n    return ORACLE.getAssetPrice(asset);\r\n  }\r\n\r\n  /**\r\n   * @dev Get the decimals of an asset\r\n   * @return number of decimals of the asset\r\n   */\r\n  function _getDecimals(address asset) internal view returns (uint256) {\r\n    return IERC20Detailed(asset).decimals();\r\n  }\r\n\r\n  /**\r\n   * @dev Get the aToken associated to the asset\r\n   * @return address of the aToken\r\n   */\r\n  function _getReserveData(address asset) internal view returns (DataTypes.ReserveData memory) {\r\n    return LENDING_POOL.getReserveData(asset);\r\n  }\r\n\r\n  /**\r\n   * @dev Pull the ATokens from the user\r\n   * @param reserve address of the asset\r\n   * @param reserveAToken address of the aToken of the reserve\r\n   * @param user address\r\n   * @param amount of tokens to be transferred to the contract\r\n   * @param permitSignature struct containing the permit signature\r\n   */\r\n  function _pullAToken(\r\n    address reserve,\r\n    address reserveAToken,\r\n    address user,\r\n    uint256 amount,\r\n    PermitSignature memory permitSignature\r\n  ) internal {\r\n    if (_usePermit(permitSignature)) {\r\n      IERC20WithPermit(reserveAToken).permit(\r\n        user,\r\n        address(this),\r\n        permitSignature.amount,\r\n        permitSignature.deadline,\r\n        permitSignature.v,\r\n        permitSignature.r,\r\n        permitSignature.s\r\n      );\r\n    }\r\n\r\n    // transfer from user to adapter\r\n    IERC20(reserveAToken).safeTransferFrom(user, address(this), amount);\r\n\r\n    // withdraw reserve\r\n    LENDING_POOL.withdraw(reserve, amount, address(this));\r\n  }\r\n\r\n  /**\r\n   * @dev Tells if the permit method should be called by inspecting if there is a valid signature.\r\n   * If signature params are set to 0, then permit won't be called.\r\n   * @param signature struct containing the permit signature\r\n   * @return whether or not permit should be called\r\n   */\r\n  function _usePermit(PermitSignature memory signature) internal pure returns (bool) {\r\n    return\r\n      !(uint256(signature.deadline) == uint256(signature.v) && uint256(signature.deadline) == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the value denominated in USD\r\n   * @param reserve Address of the reserve\r\n   * @param amount Amount of the reserve\r\n   * @param decimals Decimals of the reserve\r\n   * @return whether or not permit should be called\r\n   */\r\n  function _calcUsdValue(\r\n    address reserve,\r\n    uint256 amount,\r\n    uint256 decimals\r\n  ) internal view returns (uint256) {\r\n    uint256 ethUsdPrice = _getPrice(USD_ADDRESS);\r\n    uint256 reservePrice = _getPrice(reserve);\r\n\r\n    return amount.mul(reservePrice).div(10**decimals).mul(ethUsdPrice).div(10**18);\r\n  }\r\n\r\n  /**\r\n   * @dev Given an input asset amount, returns the maximum output amount of the other asset\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @param amountIn Amount of reserveIn\r\n   * @return Struct containing the following information:\r\n   *   uint256 Amount out of the reserveOut\r\n   *   uint256 The price of out amount denominated in the reserveIn currency (18 decimals)\r\n   *   uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   *   uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   */\r\n  function _getAmountsOutData(\r\n    address reserveIn,\r\n    address reserveOut,\r\n    uint256 amountIn\r\n  ) internal view returns (AmountCalc memory) {\r\n    // Subtract flash loan fee\r\n    uint256 finalAmountIn = amountIn.sub(amountIn.mul(FLASHLOAN_PREMIUM_TOTAL).div(10000));\r\n\r\n    address[] memory simplePath = new address[](2);\r\n    simplePath[0] = reserveIn;\r\n    simplePath[1] = reserveOut;\r\n\r\n    uint256[] memory amountsWithoutWeth;\r\n    uint256[] memory amountsWithWeth;\r\n\r\n    address[] memory pathWithWeth = new address[](3);\r\n    if (reserveIn != WETH_ADDRESS && reserveOut != WETH_ADDRESS) {\r\n      pathWithWeth[0] = reserveIn;\r\n      pathWithWeth[1] = WETH_ADDRESS;\r\n      pathWithWeth[2] = reserveOut;\r\n\r\n      try UNISWAP_ROUTER.getAmountsOut(finalAmountIn, pathWithWeth) returns (\r\n        uint256[] memory resultsWithWeth\r\n      ) {\r\n        amountsWithWeth = resultsWithWeth;\r\n      } catch {\r\n        amountsWithWeth = new uint256[](3);\r\n      }\r\n    } else {\r\n      amountsWithWeth = new uint256[](3);\r\n    }\r\n\r\n    uint256 bestAmountOut;\r\n    try UNISWAP_ROUTER.getAmountsOut(finalAmountIn, simplePath) returns (\r\n      uint256[] memory resultAmounts\r\n    ) {\r\n      amountsWithoutWeth = resultAmounts;\r\n\r\n      bestAmountOut = (amountsWithWeth[2] > amountsWithoutWeth[1])\r\n        ? amountsWithWeth[2]\r\n        : amountsWithoutWeth[1];\r\n    } catch {\r\n      amountsWithoutWeth = new uint256[](2);\r\n      bestAmountOut = amountsWithWeth[2];\r\n    }\r\n\r\n    uint256 reserveInDecimals = _getDecimals(reserveIn);\r\n    uint256 reserveOutDecimals = _getDecimals(reserveOut);\r\n\r\n    uint256 outPerInPrice =\r\n      finalAmountIn.mul(10**18).mul(10**reserveOutDecimals).div(\r\n        bestAmountOut.mul(10**reserveInDecimals)\r\n      );\r\n\r\n    return\r\n      AmountCalc(\r\n        bestAmountOut,\r\n        outPerInPrice,\r\n        _calcUsdValue(reserveIn, amountIn, reserveInDecimals),\r\n        _calcUsdValue(reserveOut, bestAmountOut, reserveOutDecimals),\r\n        (bestAmountOut == 0) ? new address[](2) : (bestAmountOut == amountsWithoutWeth[1])\r\n          ? simplePath\r\n          : pathWithWeth\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the minimum input asset amount required to buy the given output asset amount\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @param amountOut Amount of reserveOut\r\n   * @return Struct containing the following information:\r\n   *   uint256 Amount in of the reserveIn\r\n   *   uint256 The price of in amount denominated in the reserveOut currency (18 decimals)\r\n   *   uint256 In amount of reserveIn value denominated in USD (8 decimals)\r\n   *   uint256 Out amount of reserveOut value denominated in USD (8 decimals)\r\n   */\r\n  function _getAmountsInData(\r\n    address reserveIn,\r\n    address reserveOut,\r\n    uint256 amountOut\r\n  ) internal view returns (AmountCalc memory) {\r\n    (uint256[] memory amounts, address[] memory path) =\r\n      _getAmountsInAndPath(reserveIn, reserveOut, amountOut);\r\n\r\n    // Add flash loan fee\r\n    uint256 finalAmountIn = amounts[0].add(amounts[0].mul(FLASHLOAN_PREMIUM_TOTAL).div(10000));\r\n\r\n    uint256 reserveInDecimals = _getDecimals(reserveIn);\r\n    uint256 reserveOutDecimals = _getDecimals(reserveOut);\r\n\r\n    uint256 inPerOutPrice =\r\n      amountOut.mul(10**18).mul(10**reserveInDecimals).div(\r\n        finalAmountIn.mul(10**reserveOutDecimals)\r\n      );\r\n\r\n    return\r\n      AmountCalc(\r\n        finalAmountIn,\r\n        inPerOutPrice,\r\n        _calcUsdValue(reserveIn, finalAmountIn, reserveInDecimals),\r\n        _calcUsdValue(reserveOut, amountOut, reserveOutDecimals),\r\n        path\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the input asset amount required to buy the given output asset amount\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @param amountOut Amount of reserveOut\r\n   * @return uint256[] amounts Array containing the amountIn and amountOut for a swap\r\n   */\r\n  function _getAmountsInAndPath(\r\n    address reserveIn,\r\n    address reserveOut,\r\n    uint256 amountOut\r\n  ) internal view returns (uint256[] memory, address[] memory) {\r\n    address[] memory simplePath = new address[](2);\r\n    simplePath[0] = reserveIn;\r\n    simplePath[1] = reserveOut;\r\n\r\n    uint256[] memory amountsWithoutWeth;\r\n    uint256[] memory amountsWithWeth;\r\n    address[] memory pathWithWeth = new address[](3);\r\n\r\n    if (reserveIn != WETH_ADDRESS && reserveOut != WETH_ADDRESS) {\r\n      pathWithWeth[0] = reserveIn;\r\n      pathWithWeth[1] = WETH_ADDRESS;\r\n      pathWithWeth[2] = reserveOut;\r\n\r\n      try UNISWAP_ROUTER.getAmountsIn(amountOut, pathWithWeth) returns (\r\n        uint256[] memory resultsWithWeth\r\n      ) {\r\n        amountsWithWeth = resultsWithWeth;\r\n      } catch {\r\n        amountsWithWeth = new uint256[](3);\r\n      }\r\n    } else {\r\n      amountsWithWeth = new uint256[](3);\r\n    }\r\n\r\n    try UNISWAP_ROUTER.getAmountsIn(amountOut, simplePath) returns (\r\n      uint256[] memory resultAmounts\r\n    ) {\r\n      amountsWithoutWeth = resultAmounts;\r\n\r\n      return\r\n        (amountsWithWeth[0] < amountsWithoutWeth[0])\r\n          ? (amountsWithWeth, pathWithWeth)\r\n          : (amountsWithoutWeth, simplePath);\r\n    } catch {\r\n      return (amountsWithWeth, pathWithWeth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the input asset amount required to buy the given output asset amount\r\n   * @param reserveIn Address of the asset to be swap from\r\n   * @param reserveOut Address of the asset to be swap to\r\n   * @param amountOut Amount of reserveOut\r\n   * @return uint256[] amounts Array containing the amountIn and amountOut for a swap\r\n   */\r\n  function _getAmountsIn(\r\n    address reserveIn,\r\n    address reserveOut,\r\n    uint256 amountOut,\r\n    bool useEthPath\r\n  ) internal view returns (uint256[] memory) {\r\n    address[] memory path;\r\n\r\n    if (useEthPath) {\r\n      path = new address[](3);\r\n      path[0] = reserveIn;\r\n      path[1] = WETH_ADDRESS;\r\n      path[2] = reserveOut;\r\n    } else {\r\n      path = new address[](2);\r\n      path[0] = reserveIn;\r\n      path[1] = reserveOut;\r\n    }\r\n\r\n    return UNISWAP_ROUTER.getAmountsIn(amountOut, path);\r\n  }\r\n\r\n  /**\r\n   * @dev Emergency rescue for token stucked on this contract, as failsafe mechanism\r\n   * - Funds should never remain in this contract more time than during transactions\r\n   * - Only callable by the owner\r\n   **/\r\n  function rescueTokens(IERC20 token) external onlyOwner {\r\n    token.transfer(owner(), token.balanceOf(address(this)));\r\n  }\r\n}\r\n\r\n/**\r\n * @title UniswapLiquiditySwapAdapter\r\n * @notice Uniswap V2 Adapter to swap liquidity.\r\n * @author Aave\r\n **/\r\ncontract UniswapLiquiditySwapAdapter is BaseUniswapAdapter {\r\n  struct PermitParams {\r\n    uint256[] amount;\r\n    uint256[] deadline;\r\n    uint8[] v;\r\n    bytes32[] r;\r\n    bytes32[] s;\r\n  }\r\n\r\n  struct SwapParams {\r\n    address[] assetToSwapToList;\r\n    uint256[] minAmountsToReceive;\r\n    bool[] swapAllBalance;\r\n    PermitParams permitParams;\r\n    bool[] useEthPath;\r\n  }\r\n\r\n  constructor(\r\n    ILendingPoolAddressesProvider addressesProvider,\r\n    IUniswapV2Router02 uniswapRouter,\r\n    address wethAddress\r\n  ) public BaseUniswapAdapter(addressesProvider, uniswapRouter, wethAddress) {}\r\n\r\n  /**\r\n   * @dev Swaps the received reserve amount from the flash loan into the asset specified in the params.\r\n   * The received funds from the swap are then deposited into the protocol on behalf of the user.\r\n   * The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and\r\n   * repay the flash loan.\r\n   * @param assets Address of asset to be swapped\r\n   * @param amounts Amount of the asset to be swapped\r\n   * @param premiums Fee of the flash loan\r\n   * @param initiator Address of the user\r\n   * @param params Additional variadic field to include extra params. Expected parameters:\r\n   *   address[] assetToSwapToList List of the addresses of the reserve to be swapped to and deposited\r\n   *   uint256[] minAmountsToReceive List of min amounts to be received from the swap\r\n   *   bool[] swapAllBalance Flag indicating if all the user balance should be swapped\r\n   *   uint256[] permitAmount List of amounts for the permit signature\r\n   *   uint256[] deadline List of deadlines for the permit signature\r\n   *   uint8[] v List of v param for the permit signature\r\n   *   bytes32[] r List of r param for the permit signature\r\n   *   bytes32[] s List of s param for the permit signature\r\n   */\r\n  function executeOperation(\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata premiums,\r\n    address initiator,\r\n    bytes calldata params\r\n  ) external override returns (bool) {\r\n    require(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL');\r\n\r\n    SwapParams memory decodedParams = _decodeParams(params);\r\n\r\n    require(\r\n      assets.length == decodedParams.assetToSwapToList.length &&\r\n        assets.length == decodedParams.minAmountsToReceive.length &&\r\n        assets.length == decodedParams.swapAllBalance.length &&\r\n        assets.length == decodedParams.permitParams.amount.length &&\r\n        assets.length == decodedParams.permitParams.deadline.length &&\r\n        assets.length == decodedParams.permitParams.v.length &&\r\n        assets.length == decodedParams.permitParams.r.length &&\r\n        assets.length == decodedParams.permitParams.s.length &&\r\n        assets.length == decodedParams.useEthPath.length,\r\n      'INCONSISTENT_PARAMS'\r\n    );\r\n\r\n    for (uint256 i = 0; i < assets.length; i++) {\r\n      _swapLiquidity(\r\n        assets[i],\r\n        decodedParams.assetToSwapToList[i],\r\n        amounts[i],\r\n        premiums[i],\r\n        initiator,\r\n        decodedParams.minAmountsToReceive[i],\r\n        decodedParams.swapAllBalance[i],\r\n        PermitSignature(\r\n          decodedParams.permitParams.amount[i],\r\n          decodedParams.permitParams.deadline[i],\r\n          decodedParams.permitParams.v[i],\r\n          decodedParams.permitParams.r[i],\r\n          decodedParams.permitParams.s[i]\r\n        ),\r\n        decodedParams.useEthPath[i]\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  struct SwapAndDepositLocalVars {\r\n    uint256 i;\r\n    uint256 aTokenInitiatorBalance;\r\n    uint256 amountToSwap;\r\n    uint256 receivedAmount;\r\n    address aToken;\r\n  }\r\n\r\n  /**\r\n   * @dev Swaps an amount of an asset to another and deposits the new asset amount on behalf of the user without using\r\n   * a flash loan. This method can be used when the temporary transfer of the collateral asset to this contract\r\n   * does not affect the user position.\r\n   * The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and\r\n   * perform the swap.\r\n   * @param assetToSwapFromList List of addresses of the underlying asset to be swap from\r\n   * @param assetToSwapToList List of addresses of the underlying asset to be swap to and deposited\r\n   * @param amountToSwapList List of amounts to be swapped. If the amount exceeds the balance, the total balance is used for the swap\r\n   * @param minAmountsToReceive List of min amounts to be received from the swap\r\n   * @param permitParams List of struct containing the permit signatures\r\n   *   uint256 permitAmount Amount for the permit signature\r\n   *   uint256 deadline Deadline for the permit signature\r\n   *   uint8 v param for the permit signature\r\n   *   bytes32 r param for the permit signature\r\n   *   bytes32 s param for the permit signature\r\n   * @param useEthPath true if the swap needs to occur using ETH in the routing, false otherwise\r\n   */\r\n  function swapAndDeposit(\r\n    address[] calldata assetToSwapFromList,\r\n    address[] calldata assetToSwapToList,\r\n    uint256[] calldata amountToSwapList,\r\n    uint256[] calldata minAmountsToReceive,\r\n    PermitSignature[] calldata permitParams,\r\n    bool[] calldata useEthPath\r\n  ) external {\r\n    require(\r\n      assetToSwapFromList.length == assetToSwapToList.length &&\r\n        assetToSwapFromList.length == amountToSwapList.length &&\r\n        assetToSwapFromList.length == minAmountsToReceive.length &&\r\n        assetToSwapFromList.length == permitParams.length,\r\n      'INCONSISTENT_PARAMS'\r\n    );\r\n\r\n    SwapAndDepositLocalVars memory vars;\r\n\r\n    for (vars.i = 0; vars.i < assetToSwapFromList.length; vars.i++) {\r\n      vars.aToken = _getReserveData(assetToSwapFromList[vars.i]).aTokenAddress;\r\n\r\n      vars.aTokenInitiatorBalance = IERC20(vars.aToken).balanceOf(msg.sender);\r\n      vars.amountToSwap = amountToSwapList[vars.i] > vars.aTokenInitiatorBalance\r\n        ? vars.aTokenInitiatorBalance\r\n        : amountToSwapList[vars.i];\r\n\r\n      _pullAToken(\r\n        assetToSwapFromList[vars.i],\r\n        vars.aToken,\r\n        msg.sender,\r\n        vars.amountToSwap,\r\n        permitParams[vars.i]\r\n      );\r\n\r\n      vars.receivedAmount = _swapExactTokensForTokens(\r\n        assetToSwapFromList[vars.i],\r\n        assetToSwapToList[vars.i],\r\n        vars.amountToSwap,\r\n        minAmountsToReceive[vars.i],\r\n        useEthPath[vars.i]\r\n      );\r\n\r\n      // Deposit new reserve\r\n      IERC20(assetToSwapToList[vars.i]).safeApprove(address(LENDING_POOL), 0);\r\n      IERC20(assetToSwapToList[vars.i]).safeApprove(address(LENDING_POOL), vars.receivedAmount);\r\n      LENDING_POOL.deposit(assetToSwapToList[vars.i], vars.receivedAmount, msg.sender, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Swaps an `amountToSwap` of an asset to another and deposits the funds on behalf of the initiator.\r\n   * @param assetFrom Address of the underlying asset to be swap from\r\n   * @param assetTo Address of the underlying asset to be swap to and deposited\r\n   * @param amount Amount from flash loan\r\n   * @param premium Premium of the flash loan\r\n   * @param minAmountToReceive Min amount to be received from the swap\r\n   * @param swapAllBalance Flag indicating if all the user balance should be swapped\r\n   * @param permitSignature List of struct containing the permit signature\r\n   * @param useEthPath true if the swap needs to occur using ETH in the routing, false otherwise\r\n   */\r\n   \r\n  struct SwapLiquidityLocalVars {\r\n   address aToken;\r\n   uint256 aTokenInitiatorBalance;\r\n   uint256 amountToSwap;\r\n   uint256 receivedAmount;\r\n   uint256 flashLoanDebt;\r\n   uint256 amountToPull;\r\n  }\r\n  \r\n  function _swapLiquidity(\r\n    address assetFrom,\r\n    address assetTo,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    address initiator,\r\n    uint256 minAmountToReceive,\r\n    bool swapAllBalance,\r\n    PermitSignature memory permitSignature,\r\n    bool useEthPath\r\n  ) internal {\r\n    \r\n    SwapLiquidityLocalVars memory vars;\r\n    \r\n    vars.aToken = _getReserveData(assetFrom).aTokenAddress;\r\n\r\n    vars.aTokenInitiatorBalance = IERC20(vars.aToken).balanceOf(initiator);\r\n    vars.amountToSwap =\r\n      swapAllBalance && vars.aTokenInitiatorBalance.sub(premium) <= amount\r\n        ? vars.aTokenInitiatorBalance.sub(premium)\r\n        : amount;\r\n\r\n    vars.receivedAmount =\r\n      _swapExactTokensForTokens(assetFrom, assetTo, vars.amountToSwap, minAmountToReceive, useEthPath);\r\n\r\n    // Deposit new reserve\r\n    IERC20(assetTo).safeApprove(address(LENDING_POOL), 0);\r\n    IERC20(assetTo).safeApprove(address(LENDING_POOL), vars.receivedAmount);\r\n    LENDING_POOL.deposit(assetTo, vars.receivedAmount, initiator, 0);\r\n\r\n    vars.flashLoanDebt = amount.add(premium);\r\n    vars.amountToPull = vars.amountToSwap.add(premium);\r\n\r\n    _pullAToken(assetFrom, vars.aToken, initiator, vars.amountToPull, permitSignature);\r\n\r\n    // Repay flash loan\r\n    IERC20(assetFrom).safeApprove(address(LENDING_POOL), 0);\r\n    IERC20(assetFrom).safeApprove(address(LENDING_POOL), vars.flashLoanDebt);\r\n  }\r\n\r\n  /**\r\n   * @dev Decodes the information encoded in the flash loan params\r\n   * @param params Additional variadic field to include extra params. Expected parameters:\r\n   *   address[] assetToSwapToList List of the addresses of the reserve to be swapped to and deposited\r\n   *   uint256[] minAmountsToReceive List of min amounts to be received from the swap\r\n   *   bool[] swapAllBalance Flag indicating if all the user balance should be swapped\r\n   *   uint256[] permitAmount List of amounts for the permit signature\r\n   *   uint256[] deadline List of deadlines for the permit signature\r\n   *   uint8[] v List of v param for the permit signature\r\n   *   bytes32[] r List of r param for the permit signature\r\n   *   bytes32[] s List of s param for the permit signature\r\n   *   bool[] useEthPath true if the swap needs to occur using ETH in the routing, false otherwise\r\n   * @return SwapParams struct containing decoded params\r\n   */\r\n  function _decodeParams(bytes memory params) internal pure returns (SwapParams memory) {\r\n    (\r\n      address[] memory assetToSwapToList,\r\n      uint256[] memory minAmountsToReceive,\r\n      bool[] memory swapAllBalance,\r\n      uint256[] memory permitAmount,\r\n      uint256[] memory deadline,\r\n      uint8[] memory v,\r\n      bytes32[] memory r,\r\n      bytes32[] memory s,\r\n      bool[] memory useEthPath\r\n    ) =\r\n      abi.decode(\r\n        params,\r\n        (address[], uint256[], bool[], uint256[], uint256[], uint8[], bytes32[], bytes32[], bool[])\r\n      );\r\n\r\n    return\r\n      SwapParams(\r\n        assetToSwapToList,\r\n        minAmountsToReceive,\r\n        swapAllBalance,\r\n        PermitParams(permitAmount, deadline, v, r, s),\r\n        useEthPath\r\n      );\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASHLOAN_PREMIUM_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING_POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserveIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveOut\",\"type\":\"address\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reserveIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveOut\",\"type\":\"address\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetToSwapFromList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetToSwapToList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountToSwapList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsToReceive\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBaseUniswapAdapter.PermitSignature[]\",\"name\":\"permitParams\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"useEthPath\",\"type\":\"bool[]\"}],\"name\":\"swapAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapLiquiditySwapAdapter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c50000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec9cd5db5797662755df4eeac54b3b4beaa9914110e20077e19cced9ea385517"}]}