{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface ERC20Interface {\r\n    \r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract AxiaVault {\r\n    \r\n    address public AXIA;\r\n    address public SwapLiquidity;\r\n    address public OracleLiquidty;\r\n    address public DefiLiquidity;\r\n    \r\n    address owner = msg.sender;\r\n    uint256 public lastTradingFeeDistributionAxia;\r\n    uint256 public lastTradingFeeDistributionSwap;\r\n    uint256 public lastTradingFeeDistributionOracle;\r\n    uint256 public lastTradingFeeDistributionDefi;\r\n    \r\n    uint256 public migrationLock;\r\n    address public migrationRecipient;\r\n    \r\n    \r\n// Has a hardcap of 1% per trading fees distribution in one week.\r\n\r\n    function distributeAXIA(address recipient, uint256 amount) external {\r\n        uint256 TokenBalance = ERC20Interface(AXIA).balanceOf(address(this));\r\n        require(amount <= (TokenBalance / 10), \"Amount is higher than 1% of AXIA vault balance\"); // Max 1%\r\n        require(lastTradingFeeDistributionAxia + 168 hours < now, \"Time is less than assigned time for distribution of Axia\"); // Max once a week \r\n        require(msg.sender == owner, \"No Authorization\");\r\n               ERC20Interface(AXIA).transfer(recipient, amount);\r\n        lastTradingFeeDistributionAxia = now;\r\n    } \r\n    \r\n    function distributeSWAP(address recipient, uint256 amount) external {\r\n        uint256 TokenBalance = ERC20Interface(SwapLiquidity).balanceOf(address(this));\r\n        require(amount <= (TokenBalance / 10), \"Amount is higher than 10% of SwapLiquidity vault balance\"); // Max 10%\r\n        require(lastTradingFeeDistributionSwap + 1 weeks < now, \"Time is less than assigned time for distribution of SwapLiquidity\"); // Max once a week \r\n        require(msg.sender == owner, \"No Authorization\");\r\n               ERC20Interface(SwapLiquidity).transfer(recipient, amount);\r\n        lastTradingFeeDistributionSwap = now;\r\n    } \r\n    \r\n    function distributeORACLE(address recipient, uint256 amount) external {\r\n        uint256 TokenBalance = ERC20Interface(OracleLiquidty).balanceOf(address(this));\r\n        require(amount <= (TokenBalance / 10), \"Amount is higher than 10% of OracleLiquidty vault balance\"); // Max 10%\r\n        require(lastTradingFeeDistributionOracle + 1 weeks < now, \"Time is less than assigned time for distribution of OracleLiquidty\"); // Max once a week \r\n        require(msg.sender == owner, \"No Authorization\");\r\n               ERC20Interface(OracleLiquidty).transfer(recipient, amount);\r\n        lastTradingFeeDistributionOracle = now;\r\n    } \r\n    \r\n    function distributeDEFI(address recipient, uint256 amount) external {\r\n        uint256 TokenBalance = ERC20Interface(DefiLiquidity).balanceOf(address(this));\r\n        require(amount <= (TokenBalance / 10), \"Amount is higher than 10% of DefiLiquidity vault balance\"); // Max 10%\r\n        require(lastTradingFeeDistributionDefi + 1 weeks < now, \"Time is less than assigned time for distribution of DefiLiquidity\"); // Max once a week \r\n        require(msg.sender == owner, \"No Authorization\");\r\n               ERC20Interface(DefiLiquidity).transfer(recipient, amount);\r\n        lastTradingFeeDistributionDefi = now;\r\n    } \r\n    \r\n\r\n// Function allows liquidity to be migrated, after 10 weeks lockup - preventing abuse.\r\n\r\n\r\n    function startLiquidityMigration(address recipient) external {\r\n        require(msg.sender == owner, \"No Authorization\");\r\n        migrationLock = now + 10 weeks;\r\n        migrationRecipient = recipient;\r\n    }\r\n    \r\n    \r\n// Migrates liquidity to new location, assuming the 3 months lockup has passed -preventing abuse.\r\n\r\n    function processMigration() external {\r\n        \r\n        require(msg.sender == owner, \"No Authorization\");\r\n        require(migrationRecipient != address(0));\r\n        require(now > migrationLock);\r\n        \r\n        uint256 TokenBalance = ERC20Interface(AXIA).balanceOf(address(this));\r\n        uint256 TokenBalanceSwap = ERC20Interface(SwapLiquidity).balanceOf(address(this));\r\n        uint256 TokenBalanceOracle = ERC20Interface(OracleLiquidty).balanceOf(address(this));\r\n        uint256 TokenBalanceDefi = ERC20Interface(DefiLiquidity).balanceOf(address(this));\r\n        \r\n        ERC20Interface(AXIA).transfer(migrationRecipient, TokenBalance);\r\n        ERC20Interface(SwapLiquidity).transfer(migrationRecipient, TokenBalanceSwap);\r\n        ERC20Interface(OracleLiquidty).transfer(migrationRecipient, TokenBalanceOracle);\r\n        ERC20Interface(DefiLiquidity).transfer(migrationRecipient, TokenBalanceDefi);\r\n        \r\n    }  \r\n    \r\n    \r\n    // Setting the interracting tokens\r\n    \r\n    function startToken(address _AXIAaddress, address _SwapLiquidity, address _OracleLiquidity, address _DefiLiquidity) external {\r\n        require(msg.sender == owner);\r\n        AXIA = _AXIAaddress;\r\n        SwapLiquidity = _SwapLiquidity;\r\n        OracleLiquidty = _OracleLiquidity;\r\n        DefiLiquidity = _DefiLiquidity;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"name\":\"AXIA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DefiLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OracleLiquidty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeAXIA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeDEFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeORACLE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeSWAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistributionAxia\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistributionDefi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistributionOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradingFeeDistributionSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"startLiquidityMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_AXIAaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SwapLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OracleLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DefiLiquidity\",\"type\":\"address\"}],\"name\":\"startToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AxiaVault","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67a9e2473913112d984b5b6f06a5af7d80cfefe4f978486fabd726c1d826ed2d"}]}