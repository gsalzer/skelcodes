{"status":"1","message":"OK","result":[{"SourceCode":"// Copyright (C) 2020 Easy Chain. <https://easychain.tech>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.6.5;\r\n\r\n\r\nabstract contract Ownable {\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"O: onlyOwner function!\");\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @notice Initializes owner variable with msg.sender address.\r\n     */\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the desired address.\r\n     * The function is callable only by the owner.\r\n     */\r\n    function transferOwnership(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"O: new owner is the zero address!\");\r\n        emit OwnershipTransferred(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev BerezkaPriceOverride contract.\r\n * This contract allows to override token prices from 1inch exchange to correctly\r\n * adjust prices of composite tokens not yet supported by Zerion\r\n * @author Vasin Denis <denis.vasin@easychain.tech>\r\n */\r\ncontract BerezkaPriceOverride is Ownable() {\r\n\r\n    mapping(address => uint256) public prices;\r\n\r\n    /**\r\n     * Sets price (in USDC, i.e. decimals = 6) for a given token. 0 indicates no price override.\r\n     * Sets price for a (decimals) amount single token of _token in USDC\r\n     */\r\n    function setPrice(\r\n        address _token,\r\n        uint256 _price\r\n    ) \r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_token != address(0));\r\n\r\n        prices[_token] = _price;\r\n    }\r\n\r\n    function computePrice(\r\n        address _token,\r\n        uint256 _amount\r\n    ) \r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n       uint256 decimals = ERC20(_token).decimals();\r\n       uint256 price = prices[_token];\r\n       return _amount * price / 10 ** decimals;\r\n    }\r\n\r\n    function hasOverride(\r\n        address _token\r\n    ) \r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n       return prices[_token] != 0;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"computePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"hasOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BerezkaPriceOverride","CompilerVersion":"v0.6.5+commit.f956cc89","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2f9af112f1e593dcd015afab9b219ec537500ec37ba9f3bfed5742ce60a691a4"}]}