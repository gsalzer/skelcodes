{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n   \r\n}\r\n\r\n\r\n\r\ncontract RFIextremeBattle is Context, Ownable {\r\n        \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public _taxFee = 10;\r\n    \r\n    uint256 public _burnFee = 2;\r\n    \r\n    //bet limit\r\n    uint256 public _minBetAmount = 1 ether;\r\n    \r\n    \r\n    IERC20 public _rfiextremetoken;\r\n    \r\n    \r\n    \r\n    uint256 public gameNo = 1;\r\n    \r\n    //users balances and redeem\r\n    \r\n    mapping (address =>  uint256) public balances;\r\n    \r\n    mapping (address =>  mapping (uint256 => mapping (uint8 => uint256))) public betBalances;\r\n\r\n\r\n    uint256 public totalUserBalance;\r\n    \r\n    \r\n    //actual balances of the 2 pool and amount accumulated\r\n    \r\n    mapping (uint8 => uint256) public pool;\r\n    \r\n    \r\n    \r\n   \r\n    \r\n    //DAO address set to zero by default\r\n    \r\n    address public daoAddress;\r\n    \r\n    \r\n    \r\n    //last game\r\n    \r\n    uint256 public lastGameTime;\r\n    \r\n    mapping (uint8 => uint256) public lastPool;\r\n    \r\n    \r\n    //last winner\r\n    uint8 public winner;\r\n    uint8 public looser;\r\n    \r\n    uint256 public timeGame;\r\n    \r\n    \r\n    //modifier that process the end of the game\r\n    \r\n    \r\n    modifier finalGame(){\r\n        \r\n      \r\n        \r\n        if (block.timestamp.sub(lastGameTime) >= timeGame){\r\n        \r\n        \r\n        lastGameTime = block.timestamp;\r\n        \r\n        gameNo++;\r\n\r\n\r\n        //prev pools\r\n        lastPool[0] = pool[0];\r\n        lastPool[1] = pool[1];\r\n\r\n        \r\n\r\n\r\n\r\n        //determine looser\r\n\r\n        if(pool[0] > pool[1]){\r\n            winner = 0;\r\n            looser = 1;\r\n        }else if(pool[1] > pool[0]){\r\n            \r\n            winner = 1;\r\n            looser = 0;\r\n            \r\n        }else{\r\n            //empty prev pool since eguality\r\n            lastPool[0] = 0;\r\n            lastPool[1] = 0;\r\n\r\n            winner = 2;\r\n            looser = 2;\r\n\r\n\r\n            }//eguality everyone loose for the profit of dao :D\r\n        \r\n        pool[0] = 0;\r\n        pool[1] = 0;\r\n        \r\n        //switch to next game\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        //send the accumulated balance to daoAddress\r\n        \r\n        //should send everything except previous \r\n        \r\n        \r\n\r\n\r\n        uint256 rfibalance = _rfiextremetoken.balanceOf(address(this));\r\n\r\n        //of course omit last pool if any and the user balances\r\n\r\n        \r\n\r\n        if(daoAddress != address(0) &&  rfibalance > 0){\r\n            \r\n            uint256 realAm = (rfibalance).sub((lastPool[0].add(lastPool[1])).add(totalUserBalance));\r\n            \r\n            _rfiextremetoken.transfer(address(daoAddress),realAm);\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n    \r\n        \r\n        }\r\n        \r\n        _;\r\n        \r\n    }\r\n    \r\n    \r\n    constructor () public {\r\n        \r\n        _rfiextremetoken = IERC20(address(0x1Fd13b3508802aDDE7D3389337EBEB950FF358C4));\r\n        \r\n        \r\n        lastGameTime = block.timestamp;\r\n        \r\n        \r\n        timeGame = 24 hours;\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function calculateTaxFee(uint256 _amount) public view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function calculateBurnFee(uint256 _amount) public view returns (uint256) {\r\n        return _amount.mul(_burnFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function setMinBet(uint256 minBet) external onlyOwner() {\r\n        _minBetAmount = minBet;\r\n    }\r\n    \r\n    function setTaxFee(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n    \r\n    function setBurnFee(uint256 burnFee) external onlyOwner() {\r\n        _burnFee = burnFee;\r\n    }\r\n    \r\n     function setTimeGame(uint256 _timeGame) external onlyOwner() {\r\n        timeGame = _timeGame;\r\n    }\r\n\r\n\r\n    function setDao(address _dao) external onlyOwner() {\r\n\r\n        daoAddress = _dao;\r\n    }\r\n    \r\n    \r\n    //deposit\r\n    \r\n    function deposit(uint256 amount) external  {\r\n        \r\n        \r\n        require(_rfiextremetoken.transferFrom(_msgSender(), address(this), amount) );\r\n        \r\n        uint256 realAm = amount.sub(calculateTaxFee(amount).add(calculateBurnFee(amount)));\r\n        \r\n        \r\n        balances[_msgSender()] = balances[_msgSender()].add(realAm);\r\n\r\n        totalUserBalance = totalUserBalance.add(realAm);\r\n        \r\n        \r\n    }\r\n    \r\n    //withdraw\r\n    function withdraw(uint256 amount) external  {\r\n        \r\n        \r\n        \r\n        require(_rfiextremetoken.transfer(_msgSender(),amount));\r\n        \r\n        balances[_msgSender()] = balances[_msgSender()].sub(amount);\r\n\r\n        totalUserBalance = totalUserBalance.sub(amount);\r\n        \r\n        \r\n\r\n\r\n\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n        \r\n    \r\n    \r\n    //bet function\r\n    \r\n    function bet(uint8 _pool, uint256 amount) external finalGame() {\r\n        \r\n        \r\n        require(amount >= _minBetAmount);\r\n        require(_pool == 0 || _pool == 1);\r\n        require(balances[_msgSender()] >= amount);\r\n        \r\n        \r\n        \r\n        if(_pool == 0){\r\n            //pool 1\r\n            pool[0] = pool[0].add(amount);\r\n            \r\n            betBalances[_msgSender()][gameNo][_pool] = betBalances[_msgSender()][gameNo][_pool].add(amount);\r\n            \r\n            \r\n        }\r\n        \r\n        else if(_pool == 1){\r\n            //pool 2   \r\n            \r\n            pool[1] = pool[1].add(amount);\r\n            \r\n            betBalances[_msgSender()][gameNo][_pool] = betBalances[_msgSender()][gameNo][_pool].add(amount);\r\n            \r\n        }\r\n        \r\n        totalUserBalance = totalUserBalance.sub(amount);\r\n        balances[_msgSender()] = balances[_msgSender()].sub(amount);\r\n        \r\n    }\r\n    \r\n    \r\n    //redeem winning\r\n    \r\n    function redeem() external  {\r\n        \r\n        require(lastPool[looser] > 0 && betBalances[_msgSender()][gameNo.sub(1)][winner] > 0);\r\n       \r\n        uint256 amountOnWinning = (betBalances[_msgSender()][gameNo.sub(1)][winner].mul(100)).div(lastPool[winner]);\r\n        \r\n        uint256 realAm = betBalances[_msgSender()][gameNo.sub(1)][winner].add(lastPool[looser].mul(amountOnWinning).div(100)); \r\n        \r\n        \r\n        \r\n        balances[_msgSender()] = balances[_msgSender()].add(realAm);\r\n        \r\n        totalUserBalance = totalUserBalance.sub(realAm);\r\n        betBalances[_msgSender()][gameNo.sub(1)][winner] = 0;\r\n        \r\n        \r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rfiextremetoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pool\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"betBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGameTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looser\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeGame\",\"type\":\"uint256\"}],\"name\":\"setTimeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RFIextremeBattle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9604cc705beac08a5f35518e1465558116bcd9dfe8a6f336e2cd271c4034f71"}]}