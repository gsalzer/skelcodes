{"status":"1","message":"OK","result":[{"SourceCode":"{\"ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Owned is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"priceAggregatorInterface.sol\":{\"content\":\"pragma solidity \\u003e= 0.6.6;\\n\\ninterface priceAggregatorInterface {\\n  function registerVaultAggregator(address oracle) external;\\n  function priceRequest(\\n    address vault,\\n    uint256 lastUpdated\\n  )\\n  external\\n  view\\n  returns(int256[] memory, uint256);\\n  function roundIdCheck(address vault) external view returns(bool);\\n}\\n\"},\"priceAggregatorProxy.sol\":{\"content\":\"//////////////////////////////////////////////////\\n//SYNLEV price aggregator proxy contract V 1.0.0\\n//////////////////////////\\n\\npragma solidity \\u003e= 0.6.4;\\n\\nimport \\u0027./ownable.sol\\u0027;\\nimport \\u0027./priceAggregatorInterface.sol\\u0027;\\n\\ncontract priceAggregatorProxy is Owned {\\n\\n  priceAggregatorInterface public priceAggregator;\\n  address public priceAggregatorPropose;\\n\\n  function priceRequest(address vault, uint256 lastUpdated)\\n  public\\n  view\\n  virtual\\n  returns(int256[] memory, uint256) {\\n\\n    (int256[] memory priceData, uint256 roundID) =\\n    priceAggregator.priceRequest(vault, lastUpdated);\\n\\n    return(priceData, roundID);\\n  }\\n\\n  function roundIdCheck(address vault) public view returns(bool) {\\n    return(priceAggregator.roundIdCheck(vault));\\n  }\\n\\n\\n  function proposeVaultPriceAggregator(address account) public onlyOwner() {\\n    priceAggregatorPropose = account;\\n  }\\n  function updateVaultAggregator() public {\\n    priceAggregator = priceAggregatorInterface(priceAggregatorPropose);\\n    priceAggregatorPropose = address(0);\\n  }\\n\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAggregator\",\"outputs\":[{\"internalType\":\"contract priceAggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAggregatorPropose\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"priceRequest\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"proposeVaultPriceAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"roundIdCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVaultAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"priceAggregatorProxy","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://62e19cc0eec36deebd9688059ea302c414ce2c3ec3a46c6edf116ed02a789e04"}]}