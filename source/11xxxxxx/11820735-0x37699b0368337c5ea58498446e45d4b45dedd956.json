{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract WanFarmErrorReporter {\r\n    enum Error {\r\n        NO_ERROR,\r\n        UNAUTHORIZED\r\n    }\r\n\r\n    enum FailureInfo {\r\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n        SET_PENDING_ADMIN_OWNER_CHECK,\r\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK\r\n    }\r\n\r\n    /**\r\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n      **/\r\n    event Failure(uint error, uint info, uint detail);\r\n\r\n    /**\r\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n      */\r\n    function fail(Error err, FailureInfo info) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), 0);\r\n\r\n        return uint(err);\r\n    }\r\n\r\n    /**\r\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n      */\r\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\r\n        emit Failure(uint(err), uint(info), opaqueError);\r\n\r\n        return uint(err);\r\n    }\r\n}\r\n\r\ncontract UniFarmAdminStorage {\r\n    /**\r\n    * @notice Administrator for this contract\r\n    */\r\n    address public admin;\r\n\r\n    /**\r\n    * @notice Pending administrator for this contract\r\n    */\r\n    address public pendingAdmin;\r\n\r\n    /**\r\n    * @notice Active brains of WanFarm\r\n    */\r\n    address public wanFarmImplementation;\r\n\r\n    /**\r\n    * @notice Pending brains of WanFarm\r\n    */\r\n    address public pendingWanFarmImplementation;\r\n}\r\n\r\ncontract WanFarmV1Storage is UniFarmAdminStorage {\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 extRewardDebt; \r\n    }\r\n\r\n    struct ExtFarmInfo{\r\n        address extFarmAddr;  \r\n        bool extEnableDeposit;\r\n        uint256 extPid;\r\n        uint256 extRewardPerShare;\r\n        uint256 extTotalDebtReward;  //\r\n        bool extEnableClaim;\r\n    }\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20  lpToken;          // Address of LP token contract.\r\n        uint256 currentSupply;    //\r\n        uint256 bonusStartBlock;  //\r\n        uint256 newStartBlock;    //\r\n        uint256 bonusEndBlock;    // Block number when bonus wanWan period ends.\r\n\r\n        uint256 lastRewardBlock;  // Last block number that wanWans distribution occurs.\r\n        uint256 accwanWanPerShare;// Accumulated wanWans per share, times 1e12. See below.\r\n        uint256 wanWanPerBlock;   // wanWan tokens created per block.\r\n        uint256 totalDebtReward;  //\r\n\r\n        ExtFarmInfo extFarmInfo;\r\n    }\r\n\r\n    PoolInfo[] public poolInfo;   // Info of each pool.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;// Info of each user that stakes LP tokens.\r\n\r\n}\r\n\r\ncontract WanFarmInterface {\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    function pendingwanWan(uint256 _pid, address _user) public view returns (uint256,uint256);\r\n    function allPendingReward(uint256 _pid,address _user) public view returns(uint256,uint256,uint256);\r\n    function pendingExtReward(uint256 _pid, address _user) public view returns(uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) public;\r\n    function withdraw(uint256 _pid, uint256 _amount) public;\r\n    function emergencyWithdraw(uint256 _pid) public;\r\n}\r\n\r\n/**\r\n * @title ComptrollerCore\r\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `wanFarmImplementation`.\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract UniFarm is UniFarmAdminStorage, WanFarmErrorReporter {\r\n\r\n    /**\r\n      * @notice Emitted when pendingWanFarmImplementation is changed\r\n      */\r\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingWanFarmImplementation is accepted, which means comptroller implementation is updated\r\n      */\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is changed\r\n      */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n      */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    constructor() public {\r\n        // Set admin to caller\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /*** Admin Functions ***/\r\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\r\n\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\r\n        }\r\n\r\n        address oldPendingImplementation = pendingWanFarmImplementation;\r\n\r\n        pendingWanFarmImplementation = newPendingImplementation;\r\n\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\r\n    * @dev Admin function for new implementation to accept it's role as implementation\r\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n    */\r\n    function _acceptImplementation() public returns (uint) {\r\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\r\n        if (msg.sender != pendingWanFarmImplementation || pendingWanFarmImplementation == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldImplementation = wanFarmImplementation;\r\n        address oldPendingImplementation = pendingWanFarmImplementation;\r\n\r\n        wanFarmImplementation = pendingWanFarmImplementation;\r\n\r\n        pendingWanFarmImplementation = address(0);\r\n\r\n        emit NewImplementation(oldImplementation, wanFarmImplementation);\r\n        emit NewPendingImplementation(oldPendingImplementation, pendingWanFarmImplementation);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n\r\n    /**\r\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n      * @param newPendingAdmin New pending admin.\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\r\n        // Check caller = admin\r\n        if (msg.sender != admin) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n        }\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store pendingAdmin with value newPendingAdmin\r\n        pendingAdmin = newPendingAdmin;\r\n\r\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\r\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n      * @dev Admin function for pending admin to accept role and update admin\r\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function _acceptAdmin() public returns (uint) {\r\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n        }\r\n\r\n        // Save current values for inclusion in log\r\n        address oldAdmin = admin;\r\n        address oldPendingAdmin = pendingAdmin;\r\n\r\n        // Store admin with value pendingAdmin\r\n        admin = pendingAdmin;\r\n\r\n        // Clear the pending value\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(oldAdmin, admin);\r\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n        return uint(Error.NO_ERROR);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * It returns to the external caller whatever the implementation returns\r\n     * or forwards reverts.\r\n     */\r\n    function () payable external {\r\n        // delegate all other functions to current implementation\r\n        (bool success, ) = wanFarmImplementation.delegatecall(msg.data);\r\n\r\n        assembly {\r\n              let free_mem_ptr := mload(0x40)\r\n              returndatacopy(free_mem_ptr, 0, returndatasize)\r\n\r\n              switch success\r\n              case 0 { revert(free_mem_ptr, returndatasize) }\r\n              default { return(free_mem_ptr, returndatasize) }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISushiChef {\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\r\n    function pendingSushi(uint256 _pid, address _user)  external view returns (uint256);\r\n    function sushi() external view returns (address);\r\n    function sushiPerBlock() external view returns (uint256);\r\n    function poolInfo(uint256) external  view returns ( address lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accsushiPerShare);\r\n    function poolLength() external view returns (uint256);\r\n    function totalAllocPoint() external view returns (uint256);\r\n    function userInfo(uint256, address) external view returns (uint256 amount, uint256 rewardDebt);\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n}\r\n\r\ncontract WanFarm is WanFarmV1Storage, WanFarmInterface{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public constant wanWan = IERC20(0x135B810e48e4307AB2a59ea294A6f1724781bD3C);\r\n\r\n    event QuitWanwan(address to, uint256 amount);\r\n    event QuitExtReward(address extFarmAddr, address rewardToken, address to, uint256 amount);\r\n    event UpdatePoolInfo(uint256 pid, uint256 bonusEndBlock, uint256 wanWanPerBlock);\r\n    event WithdrawwanWan(address to, uint256 amount);\r\n    event DoubleFarmingEnable(uint256 pid, bool flag);\r\n    event SetExtFarm(uint256 pid, address extFarmAddr, uint256 extPid );\r\n    event EmergencyWithdraw(uint256 indexed pid);\r\n\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _poolInfo(uint256 _pid) external view returns (\r\n        address lpToken,         // Address of LP token contract.\r\n        uint256 currentSupply,    //\r\n        uint256 bonusStartBlock,  //\r\n        uint256 newStartBlock,    //\r\n        uint256 bonusEndBlock,    // Block number when bonus wanWan period ends.\r\n\r\n        uint256 lastRewardBlock,  // Last block number that wanWans distribution occurs.\r\n        uint256 accwanWanPerShare,// Accumulated wanWans per share, times 1e12. See below.\r\n        uint256 wanWanPerBlock,   // wanWan tokens created per block.\r\n        uint256 totalDebtReward){\r\n\r\n            require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n            PoolInfo storage pool = poolInfo[_pid]; \r\n\r\n            return (\r\n                address(pool.lpToken),\r\n                pool.currentSupply,\r\n                pool.bonusStartBlock,\r\n                pool.newStartBlock,\r\n                pool.bonusEndBlock,\r\n\r\n                pool.lastRewardBlock,\r\n                pool.accwanWanPerShare,\r\n                pool.wanWanPerBlock,\r\n                pool.totalDebtReward\r\n                );\r\n        }\r\n    \r\n    function _extFarmInfo(uint256 _pid) external view returns (\r\n\t\taddress extFarmAddr,  \r\n        bool extEnableDeposit,\r\n        uint256 extPid,\r\n        uint256 extRewardPerShare,\r\n        uint256 extTotalDebtReward,  //\r\n        bool extEnableClaim){\r\n\r\n            require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n            PoolInfo storage pool = poolInfo[_pid]; \r\n\r\n            return (\r\n                pool.extFarmInfo.extFarmAddr,\r\n                pool.extFarmInfo.extEnableDeposit,\r\n                pool.extFarmInfo.extPid,\r\n                pool.extFarmInfo.extRewardPerShare,\r\n                pool.extFarmInfo.extTotalDebtReward,\r\n                pool.extFarmInfo.extEnableClaim);\r\n        }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(IERC20 _lpToken,\r\n                 uint256 _bonusStartBlock,\r\n                 uint256 _bonusEndBlock,\r\n                 uint256 _wanWanPerBlock\r\n                 ) public onlyOwner {\r\n        require(block.number < _bonusEndBlock, \"block.number >= bonusEndBlock\");\r\n        require(_bonusStartBlock < _bonusEndBlock, \"_bonusStartBlock >= _bonusEndBlock\");\r\n        require(address(_lpToken) != address(0), \"_lpToken == 0\");\r\n        uint256 lastRewardBlock = block.number > _bonusStartBlock ? block.number : _bonusStartBlock;\r\n\r\n        ExtFarmInfo memory extFarmInfo = ExtFarmInfo({\r\n                extFarmAddr:address(0x0),\r\n                extEnableDeposit:false,\r\n                extPid: 0,\r\n                extRewardPerShare: 0,\r\n                extTotalDebtReward:0,\r\n                extEnableClaim:false\r\n                });\r\n\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            currentSupply: 0,\r\n            bonusStartBlock: _bonusStartBlock,\r\n            newStartBlock: _bonusStartBlock,\r\n            bonusEndBlock: _bonusEndBlock,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accwanWanPerShare: 0,\r\n            wanWanPerBlock: _wanWanPerBlock,\r\n            totalDebtReward: 0,\r\n            extFarmInfo:extFarmInfo\r\n        }));\r\n        \r\n    }\r\n\r\n    function updatePoolInfo(uint256 _pid, uint256 _bonusEndBlock, uint256 _wanWanPerBlock) public onlyOwner {\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        require(_bonusEndBlock > block.number, \"_bonusEndBlock <= block.number\");\r\n        updatePool(_pid);\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if(pool.bonusEndBlock <= block.number){\r\n            pool.newStartBlock = block.number;\r\n        }\r\n\r\n        pool.bonusEndBlock = _bonusEndBlock;\r\n        pool.wanWanPerBlock = _wanWanPerBlock;\r\n        emit UpdatePoolInfo(_pid, _bonusEndBlock, _wanWanPerBlock);\r\n    }\r\n\r\n    function getMultiplier(uint256 _pid) internal view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if(block.number <= pool.bonusStartBlock){\r\n            return 0;// no begin\r\n        }\r\n\r\n        if(pool.lastRewardBlock >= pool.bonusEndBlock){\r\n            return 0;// ended\r\n        }\r\n\r\n        if(block.number >= pool.bonusEndBlock){\r\n            // ended, but no update, lastRewardBlock < bonusEndBlock\r\n            return pool.bonusEndBlock.sub(pool.lastRewardBlock);\r\n        }\r\n\r\n        return block.number.sub(pool.lastRewardBlock);\r\n    }\r\n\r\n    // View function to see pending wanWans on frontend.\r\n    function pendingwanWan(uint256 _pid, address _user) public view returns (uint256,uint256) {\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accwanWanPerShare = pool.accwanWanPerShare;\r\n        if (block.number > pool.lastRewardBlock && pool.currentSupply != 0) {\r\n            uint256 multiplier = getMultiplier(_pid);\r\n            uint256 wanWanReward = multiplier.mul(pool.wanWanPerBlock);\r\n            accwanWanPerShare = accwanWanPerShare.add(wanWanReward.mul(1e12).div(pool.currentSupply));\r\n        }\r\n        return (user.amount, user.amount.mul(accwanWanPerShare).div(1e12).sub(user.rewardDebt));\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////////////////////////\r\n    function totalUnclaimedExtFarmReward(address extFarmAddr) public view returns(uint256){\r\n        \r\n        uint256 allTotalUnclaimed = 0; \r\n        \r\n        for (uint256 index = 0; index < poolInfo.length; index++) {\r\n            PoolInfo storage pool = poolInfo[index];\r\n\r\n            if(pool.extFarmInfo.extFarmAddr == address(0x0) || pool.extFarmInfo.extFarmAddr != extFarmAddr) continue;\r\n\r\n            allTotalUnclaimed = pool.currentSupply.mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(pool.extFarmInfo.extTotalDebtReward).add(allTotalUnclaimed);\r\n            \r\n        }\r\n\r\n        return allTotalUnclaimed;\r\n    }\r\n\r\n    function distributeFinalExtReward(uint256 _pid, uint256 _amount) public onlyOwner{\r\n\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(pool.extFarmInfo.extFarmAddr != address(0x0),\"pool not supports double farming\");\r\n\r\n        uint256 allUnClaimedExtReward = totalUnclaimedExtFarmReward(pool.extFarmInfo.extFarmAddr);\r\n\r\n        uint256 extRewardCurrentBalance = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\r\n\r\n        uint256 maxDistribute = extRewardCurrentBalance.sub(allUnClaimedExtReward);\r\n\r\n        require(_amount <= maxDistribute,\"distibute too much external rewards\");\r\n\r\n        pool.extFarmInfo.extRewardPerShare = _amount.mul(1e12).div(pool.currentSupply).add(pool.extFarmInfo.extRewardPerShare);\r\n    }\r\n\r\n    function getExtFarmRewardRate(ISushiChef sushiChef,IERC20 lpToken, uint256 extPid) internal view returns(uint256 rate){\r\n\r\n        uint256 multiplier = sushiChef.getMultiplier(block.number-1, block.number);\r\n        uint256 sushiPerBlock = sushiChef.sushiPerBlock();\r\n        (,uint256 allocPoint,,) = sushiChef.poolInfo(extPid);\r\n        uint256 totalAllocPoint = sushiChef.totalAllocPoint();\r\n        uint256 totalSupply = lpToken.balanceOf(address(sushiChef));\r\n\r\n        rate = multiplier.mul(sushiPerBlock).mul(allocPoint).mul(1e12).div(totalAllocPoint).div(totalSupply);\r\n    }\r\n    function extRewardPerBlock(uint256 _pid) public view returns(uint256){\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        if(!pool.extFarmInfo.extEnableDeposit) return 0;\r\n\r\n        ISushiChef sushiChef = ISushiChef(pool.extFarmInfo.extFarmAddr);\r\n        uint256 rate = getExtFarmRewardRate(sushiChef, pool.lpToken,pool.extFarmInfo.extPid);\r\n        (uint256 amount,) = sushiChef.userInfo(_pid,address(this));\r\n        uint256 extReward = rate.mul(amount).div(1e12);\r\n\r\n        return extReward;\r\n    }\r\n    \r\n    function allPendingReward(uint256 _pid,address _user) public view returns(uint256,uint256,uint256){\r\n        uint256 depositAmount;\r\n        uint256 wanWanReward;\r\n        uint256 sushiReward;\r\n        \r\n        (depositAmount,wanWanReward) = pendingwanWan(_pid,_user);\r\n        sushiReward = pendingExtReward(_pid,_user);\r\n        \r\n        return (depositAmount,wanWanReward,sushiReward);\r\n    }\r\n\r\n    function enableDoubleFarming(uint256 _pid, bool enable)public onlyOwner{\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        require(pool.extFarmInfo.extFarmAddr != address(0x0),\"pool not supports double farming yet\");\r\n\r\n        if(pool.extFarmInfo.extEnableDeposit != enable){\r\n\r\n            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\r\n            \r\n            if(enable){\r\n                pool.lpToken.approve(pool.extFarmInfo.extFarmAddr,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n                if(pool.currentSupply > 0) {\r\n                    ISushiChef(pool.extFarmInfo.extFarmAddr).deposit(pool.extFarmInfo.extPid,pool.currentSupply);\r\n                }\r\n\r\n                pool.extFarmInfo.extEnableClaim = true;\r\n                \r\n            }else{\r\n                pool.lpToken.approve(pool.extFarmInfo.extFarmAddr,0);\r\n                (uint256 amount,) = ISushiChef(pool.extFarmInfo.extFarmAddr).userInfo(pool.extFarmInfo.extPid,address(this));\r\n                if(amount > 0){\r\n                    ISushiChef(pool.extFarmInfo.extFarmAddr).withdraw(pool.extFarmInfo.extPid,amount);\r\n                }\r\n            }\r\n\r\n            if(pool.currentSupply > 0){\r\n                uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this)).sub(oldSuShiRewarad);\r\n\r\n                pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(pool.currentSupply).add(pool.extFarmInfo.extRewardPerShare);\r\n            }\r\n        \r\n            pool.extFarmInfo.extEnableDeposit = enable;\r\n\r\n            emit DoubleFarmingEnable(_pid,enable);\r\n        }\r\n    }\r\n\r\n    function setDoubleFarming(uint256 _pid,address extFarmAddr,uint256 _extPid) public onlyOwner{\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        require(extFarmAddr != address(0x0),\"extFarmAddr == 0x0\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        require(pool.extFarmInfo.extFarmAddr == address(0x0),\"cannot set extFramAddr again\");\r\n\r\n        uint256 extPoolLength = ISushiChef(extFarmAddr).poolLength();\r\n        require(_extPid < extPoolLength,\"bad _extPid\");\r\n\r\n        (address lpToken,,,) = ISushiChef(extFarmAddr).poolInfo(_extPid);\r\n        require(lpToken == address(pool.lpToken),\"pool mismatch between WanFarm and extFarm\");\r\n\r\n        pool.extFarmInfo.extFarmAddr = extFarmAddr;\r\n        pool.extFarmInfo.extPid = _extPid;\r\n\r\n        emit SetExtFarm(_pid, extFarmAddr, _extPid);\r\n        \r\n    }\r\n\r\n    function disableExtEnableClaim(uint256 _pid)public onlyOwner{\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        require(pool.extFarmInfo.extEnableDeposit == false, \"can only disable extEnableClaim when extEnableDeposit is disabled\");\r\n\r\n        pool.extFarmInfo.extEnableClaim = false;\r\n    }\r\n\r\n    function pendingExtReward(uint256 _pid, address _user) public view returns(uint256){\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if(pool.extFarmInfo.extFarmAddr == address(0x0)){\r\n            return 0;\r\n        }\r\n\r\n        if(pool.currentSupply <= 0) return 0;\r\n\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if(user.amount <= 0) return 0;\r\n        \r\n        uint256 extRewardPerShare = pool.extFarmInfo.extRewardPerShare;\r\n\r\n        if(pool.extFarmInfo.extEnableDeposit){\r\n            uint256 totalPendingSushi = ISushiChef(pool.extFarmInfo.extFarmAddr).pendingSushi(pool.extFarmInfo.extPid,address(this));\r\n            extRewardPerShare = totalPendingSushi.mul(1e12).div(pool.currentSupply).add(extRewardPerShare);\r\n        }\r\n\r\n        uint256 userPendingSuShi = user.amount.mul(extRewardPerShare).div(1e12).sub(user.extRewardDebt);\r\n\r\n        return userPendingSuShi;\r\n    }\r\n\r\n    function depositLPToSuShiChef(uint256 _pid,uint256 _amount) internal {\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\r\n        \r\n        UserInfo storage user =  userInfo[_pid][msg.sender];\r\n\r\n        if(pool.extFarmInfo.extEnableDeposit){\r\n            \r\n            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\r\n            uint256 oldTotalDeposit = pool.currentSupply.sub(_amount);\r\n            \r\n            ISushiChef(pool.extFarmInfo.extFarmAddr).deposit(pool.extFarmInfo.extPid, _amount);\r\n\r\n            uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\r\n            deltaSuShiReward = deltaSuShiReward.sub(oldSuShiRewarad);\r\n\r\n            if(oldTotalDeposit > 0 && deltaSuShiReward > 0){\r\n                pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(oldTotalDeposit).add(pool.extFarmInfo.extRewardPerShare);\r\n            }\r\n\r\n        }\r\n\r\n        if(pool.extFarmInfo.extEnableClaim) {\r\n            uint256 transferSuShiAmount = user.amount.sub(_amount).mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(user.extRewardDebt);\r\n            \r\n            if(transferSuShiAmount > 0){\r\n                address sushiToken = ISushiChef(pool.extFarmInfo.extFarmAddr).sushi();\r\n                IERC20(sushiToken).safeTransfer(msg.sender,transferSuShiAmount);\r\n            }\r\n        }\r\n\r\n        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.sub(user.extRewardDebt);\r\n        user.extRewardDebt = user.amount.mul(pool.extFarmInfo.extRewardPerShare).div(1e12);\r\n        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.add(user.extRewardDebt);\r\n        \r\n    }\r\n\r\n    function withDrawLPFromSuShi(uint256 _pid,uint256 _amount) internal{\r\n        require(_pid < poolInfo.length,\"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user =  userInfo[_pid][msg.sender];\r\n\r\n        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\r\n\r\n        if(pool.extFarmInfo.extEnableDeposit){\r\n            \r\n            require(user.amount >= _amount,\"withdraw too much lpToken\");\r\n\r\n            uint256 oldSuShiRewarad = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this));\r\n            uint256 oldTotalDeposit = pool.currentSupply;\r\n            \r\n            ISushiChef(pool.extFarmInfo.extFarmAddr).withdraw(pool.extFarmInfo.extPid, _amount);\r\n\r\n            uint256 deltaSuShiReward = IERC20(ISushiChef(pool.extFarmInfo.extFarmAddr).sushi()).balanceOf(address(this)).sub(oldSuShiRewarad);\r\n            if(oldTotalDeposit > 0 && deltaSuShiReward > 0) pool.extFarmInfo.extRewardPerShare = deltaSuShiReward.mul(1e12).div(oldTotalDeposit).add(pool.extFarmInfo.extRewardPerShare);\r\n            \r\n        }\r\n\r\n        if(pool.extFarmInfo.extEnableClaim) {\r\n            uint256 transferSuShiAmount = user.amount.mul(pool.extFarmInfo.extRewardPerShare).div(1e12).sub(user.extRewardDebt);\r\n\r\n            if(transferSuShiAmount > 0){\r\n                address sushiToken = ISushiChef(pool.extFarmInfo.extFarmAddr).sushi();\r\n                IERC20(sushiToken).safeTransfer(msg.sender,transferSuShiAmount);\r\n            }\r\n        }\r\n        \r\n        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.sub(user.extRewardDebt);\r\n        user.extRewardDebt = user.amount.sub(_amount).mul(pool.extFarmInfo.extRewardPerShare).div(1e12);\r\n        pool.extFarmInfo.extTotalDebtReward = pool.extFarmInfo.extTotalDebtReward.add(user.extRewardDebt);\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (pool.currentSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(_pid);\r\n        uint256 wanWanReward = multiplier.mul(pool.wanWanPerBlock);\r\n        pool.accwanWanPerShare = pool.accwanWanPerShare.add(wanWanReward.mul(1e12).div(pool.currentSupply));\r\n        pool.lastRewardBlock = block.number;\r\n\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for wanWan allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public  {\r\n        require(_pid < poolInfo.length, \"pid >= poolInfo.length\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        updatePool(_pid);\r\n\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accwanWanPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                wanWan.transfer(msg.sender, pending);\r\n            }\r\n        }\r\n\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n            pool.currentSupply = pool.currentSupply.add(_amount);\r\n        }\r\n        \r\n        // must excute after lpToken has beem transfered from user to this contract and the amount of user depoisted is updated.\r\n        depositLPToSuShiChef(_pid,_amount); \r\n            \r\n        pool.totalDebtReward = pool.totalDebtReward.sub(user.rewardDebt);\r\n        user.rewardDebt = user.amount.mul(pool.accwanWanPerShare).div(1e12);\r\n        pool.totalDebtReward = pool.totalDebtReward.add(user.rewardDebt);\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public  {\r\n        require(_pid < poolInfo.length, \"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n\r\n        withDrawLPFromSuShi(_pid,_amount);\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accwanWanPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            wanWan.transfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.currentSupply = pool.currentSupply.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n\r\n        pool.totalDebtReward = pool.totalDebtReward.sub(user.rewardDebt);\r\n        user.rewardDebt = user.amount.mul(pool.accwanWanPerShare).div(1e12);\r\n        pool.totalDebtReward = pool.totalDebtReward.add(user.rewardDebt);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n\r\n    function emergencyWithdraw(uint256 _pid) public onlyOwner  {\r\n        require(_pid < poolInfo.length, \"pid >= poolInfo.length\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        if(pool.extFarmInfo.extFarmAddr == address(0x0)) return;\r\n\r\n        ISushiChef(pool.extFarmInfo.extFarmAddr).emergencyWithdraw(pool.extFarmInfo.extPid);\r\n\r\n        pool.extFarmInfo.extEnableDeposit = false;            \r\n\r\n        emit EmergencyWithdraw(_pid);\r\n    }\r\n\r\n    // Safe wanWan transfer function, just in case if rounding error causes pool to not have enough wanWan.\r\n    function safewanWanTransfer(address _to, uint256 _amount) internal {\r\n        uint256 wanWanBal = wanWan.balanceOf(address(this));\r\n        if (_amount > wanWanBal) {\r\n            wanWan.transfer(_to, wanWanBal);\r\n        } else {\r\n            wanWan.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function quitwanWan(address _to) public onlyOwner {\r\n        require(_to != address(0), \"_to == 0\");\r\n        uint256 wanWanBal = wanWan.balanceOf(address(this));\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            require(block.number > pool.bonusEndBlock, \"quitWanwan block.number <= pid.bonusEndBlock\");\r\n            updatePool(pid);\r\n            uint256 wanWanReward = pool.currentSupply.mul(pool.accwanWanPerShare).div(1e12).sub(pool.totalDebtReward);\r\n            wanWanBal = wanWanBal.sub(wanWanReward);\r\n        }\r\n        safewanWanTransfer(_to, wanWanBal);\r\n        emit QuitWanwan(_to, wanWanBal);\r\n    }\r\n\r\n    function quitExtFarm(address extFarmAddr, address _to) public onlyOwner{\r\n        require(_to != address(0), \"_to == 0\");\r\n        require(extFarmAddr != address(0), \"extFarmAddr == 0\");\r\n\r\n        IERC20 sushiToken = IERC20(ISushiChef(extFarmAddr).sushi());\r\n\r\n        uint256 sushiBalance = sushiToken.balanceOf(address(this));\r\n\r\n        uint256 totalUnclaimedReward = totalUnclaimedExtFarmReward(extFarmAddr);\r\n\r\n        require(totalUnclaimedReward <= sushiBalance, \"extreward shortage\");\r\n\r\n        uint256 quitBalance = sushiBalance.sub(totalUnclaimedReward);\r\n\r\n        sushiToken.safeTransfer(_to, quitBalance);\r\n        emit QuitExtReward(extFarmAddr,address(sushiToken),_to, quitBalance);\r\n    }\r\n\r\n    function _become(UniFarm uniFarm) public {\r\n        require(msg.sender == uniFarm.admin(), \"only uniFarm admin can change brains\");\r\n        require(uniFarm._acceptImplementation() == 0, \"change not authorized\");\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"DoubleFarmingEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"QuitExtReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"QuitWanwan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extPid\",\"type\":\"uint256\"}],\"name\":\"SetExtFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wanWanPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawwanWan\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract UniFarm\",\"name\":\"uniFarm\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"_extFarmInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extEnableDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"extPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extTotalDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"extEnableClaim\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"_poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accwanWanPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wanWanPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wanWanPerBlock\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"disableExtEnableClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeFinalExtReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableDoubleFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"extRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingExtReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWanFarmImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingwanWan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accwanWanPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wanWanPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebtReward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"extEnableDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"extPid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extTotalDebtReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"extEnableClaim\",\"type\":\"bool\"}],\"internalType\":\"struct WanFarmV1Storage.ExtFarmInfo\",\"name\":\"extFarmInfo\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"quitExtFarm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"quitwanWan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_extPid\",\"type\":\"uint256\"}],\"name\":\"setDoubleFarming\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"extFarmAddr\",\"type\":\"address\"}],\"name\":\"totalUnclaimedExtFarmReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wanWanPerBlock\",\"type\":\"uint256\"}],\"name\":\"updatePoolInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extRewardDebt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wanFarmImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wanWan\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"WanFarm","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://92feb68840428428f37242d2085234c6ca65a1e8252ba00a11efafefd654c3c6"}]}