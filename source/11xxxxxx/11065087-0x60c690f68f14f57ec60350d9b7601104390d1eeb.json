{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n     require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Administration is SafeMath {\r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    address payable CEOAddress;\r\n    address public CTOAddress;\r\n    address Signer;\r\n\r\n    bool public paused = false;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event Pause();\r\n    event Unpause();\r\n    event CTOTransfer(address newCTO, address oldCTO);\r\n\r\n    // ---------------------------------------------------------------------------- \r\n    // Modifiers\r\n    // ----------------------------------------------------------------------------\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == CEOAddress || msg.sender == CTOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Public Functions\r\n    // ----------------------------------------------------------------------------\r\n    function setCTO(address _newAdmin) public onlyCEO {\r\n        require(_newAdmin != address(0));\r\n        emit CTOTransfer(_newAdmin, CTOAddress);\r\n        CTOAddress = _newAdmin;\r\n    }\r\n\r\n    function withdrawBalance() external onlyCEO {\r\n        CEOAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function pause() public onlyAdmin whenNotPaused returns(bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyAdmin whenPaused returns(bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Creative is Administration {\r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct Bet {\r\n        uint[4] amount;\r\n        uint timestamp;\r\n    }\r\n    \r\n    struct Contract {\r\n        uint result; //0-while running, 1-4 winner\r\n        uint sides;\r\n        uint StartTime;\r\n        uint BetEndTime;\r\n        uint ContractTime;\r\n        mapping(address => Bet) PlayerToBet;\r\n        mapping(address => bool) IfPlayed;\r\n        mapping(address => bool) IfClaimed;\r\n    }\r\n    \r\n    Contract[] contracts;\r\n    \r\n    uint public minBet = 10 finney;\r\n    uint public maxBet = 10000 ether;\r\n    \r\n    uint TimeFactor;\r\n    \r\n    uint public contractFee = 100 finney;\r\n    uint public taxRate = 9750;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => uint) TotalAmount;\r\n    mapping (uint => uint[4]) EachAmount;\r\n    mapping (uint => uint) TotalPlayers;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event ContractCreated(uint indexed contractId, uint sides, uint[4] eachAmount, address creator, uint contractTime, uint betEndTime);\r\n    event NewBetSuccess(address indexed player, uint indexed side, uint[4] indexed amount, uint timeFactor);\r\n    event BetAdjustSuccess(address indexed player, uint indexed side, uint[4] indexed amount, uint timeFactor);\r\n    event ContractRevealed(uint indexed contractId, uint indexed result);\r\n    event ContractClaimed(address indexed winner, uint indexed reward);\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Functions\r\n    // ----------------------------------------------------------------------------\r\n    function _calculateTimeFactor(uint _betEndTime, uint _startTime) internal view returns (uint) {\r\n        return (_betEndTime - now)*100/(_betEndTime - _startTime);\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Functions\r\n    // ----------------------------------------------------------------------------\r\n    constructor(address _CTOAddress) public {\r\n        CEOAddress = msg.sender;\r\n        CTOAddress = _CTOAddress;\r\n    }\r\n    \r\n    function createContract(uint sides, uint[4] memory amounts, uint contractTime, uint betEndTime) public payable whenNotPaused returns (uint) {\r\n        require(amounts[0] > 0 || amounts[1] > 0 || amounts[2] > 0 || amounts[3] > 0, \"SEER OFFICAL WARNING: At least bet on one side\");\r\n        uint total = amounts[0] + amounts[1] + amounts[2] + amounts[3];\r\n        require(sides >= 2 && sides <= 4, \"SEER OFFICAL WARNING: Can only have 2-4 sides\");\r\n        require(msg.value >= (total + contractFee), \"SEER OFFICAL WARNING: Does not send enough ETH\");\r\n        require((now + 1 hours) <= betEndTime, \"SEER OFFICAL WARNING: At least have one hour bet time\");\r\n        require((contractTime - now)/3 >= (betEndTime - now), \"SEER OFFICAL WARNING: Bet time need to be less or equal than 1/3 of total contract time\");\r\n        Bet memory _bet = Bet({\r\n            amount: amounts,\r\n            timestamp: _calculateTimeFactor(betEndTime, now)\r\n        });\r\n        Contract memory _contract = Contract({\r\n           result: 0,\r\n           sides: sides,\r\n           StartTime: now,\r\n           BetEndTime: betEndTime,\r\n           ContractTime: contractTime\r\n        });\r\n        uint newContractId = contracts.push(_contract) - 1;\r\n        Contract storage newContract = contracts[newContractId];\r\n        newContract.PlayerToBet[msg.sender] = _bet;\r\n        newContract.IfPlayed[msg.sender] = true;\r\n        TotalAmount[newContractId] = total;\r\n        EachAmount[newContractId] = amounts;\r\n        TotalPlayers[newContractId] = 1;\r\n        emit ContractCreated(newContractId, sides, amounts, msg.sender, contractTime, betEndTime);\r\n        return 0;\r\n    }\r\n    \r\n    function betContract(uint contractId, uint side, uint amount) public payable whenNotPaused returns (bool) {\r\n        require(TotalAmount[contractId] > 0, \"SEER OFFICAL WARNING: Contract has not been created\");\r\n        require(amount >= minBet && amount <= maxBet, \"SEER OFFICAL WARNING: Does not meet min or max bet requirement\");\r\n        require(msg.value >= amount, \"SEER OFFICAL WARNING: Does not send enough ETH\");\r\n        Contract storage _contract = contracts[contractId];\r\n        require(side < _contract.sides, \"SEER OFFICAL WARNING: You did not in correct side range\");\r\n        require(now < _contract.BetEndTime, \"SEER OFFICAL WARNING: Contract cannot be bet anymore\");\r\n        require(_contract.result == 0, \"SEER OFFICAL WARNING: Contact terminated\");\r\n        uint timeFactor = _calculateTimeFactor(_contract.BetEndTime, _contract.StartTime);\r\n        if(_contract.IfPlayed[msg.sender] == true) {\r\n            Bet storage _bet = _contract.PlayerToBet[msg.sender];\r\n            _bet.amount[side] += amount;\r\n            _bet.timestamp = timeFactor;\r\n            EachAmount[contractId][side] += amount;\r\n            TotalAmount[contractId] += amount;\r\n            emit BetAdjustSuccess(msg.sender, side, _bet.amount, timeFactor);\r\n        } else {\r\n            uint[4] memory _amount;\r\n            _amount[side] = amount;\r\n            Bet memory _bet = Bet({\r\n                amount: _amount,\r\n                timestamp: timeFactor\r\n            });\r\n            _contract.IfPlayed[msg.sender] = true;\r\n            _contract.PlayerToBet[msg.sender] = _bet;\r\n            EachAmount[contractId][side] += amount;\r\n            TotalAmount[contractId] += amount;\r\n            TotalPlayers[contractId] += 1;\r\n            emit NewBetSuccess(msg.sender, side, _amount, timeFactor);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function revealContract(uint contractId, uint result) public whenNotPaused onlyAdmin {\r\n        require(result >= 1 && result<= 4, \"SEER OFFICAL WARNING: Cannot recogonize result\");\r\n        Contract storage _contract = contracts[contractId];\r\n        require(now > _contract.ContractTime, \"SEER OFFICAL WARNING: Contract cannot be revealed yet\");\r\n        _contract.result = result;\r\n        emit ContractRevealed(contractId, result);\r\n    }\r\n    \r\n    function claimContract(uint contractId) public whenNotPaused returns (uint) {\r\n        require(TotalAmount[contractId] > 0, \"SEER OFFICAL WARNING: Contract has not been created\");\r\n        Contract storage _contract = contracts[contractId];\r\n        require(_contract.result > 0, \"SEER OFFICAL WARNING: Contract has not been revealed\");\r\n        require(_contract.IfPlayed[msg.sender] == true, \"SEER OFFICAL WARNING: You did not play this contract\");\r\n        require(_contract.IfClaimed[msg.sender] == false, \"SEER OFFICAL WARNING: You already claimed reward\");\r\n        uint reward;\r\n        uint[4] memory _amount = _contract.PlayerToBet[msg.sender].amount;\r\n        require(_amount[_contract.result - 1] > 0, \"SEER OFFICAL WARNING: You are not qualified\");\r\n        reward = _amount[_contract.result - 1]*taxRate*TotalAmount[contractId]/EachAmount[contractId][_contract.result - 1]/10000;\r\n        msg.sender.transfer(reward);\r\n        _contract.IfClaimed[msg.sender] == true;\r\n        emit ContractClaimed(msg.sender, reward);\r\n        return reward;\r\n    }\r\n    \r\n    function adjustBetLimit(uint _minBet, uint _maxBet) public onlyAdmin {\r\n        minBet = _minBet;\r\n        maxBet = _maxBet;\r\n    }\r\n    \r\n    function adjustFee(uint _fee) public onlyAdmin {\r\n        contractFee = _fee;\r\n    }\r\n    \r\n    function adjustTax(uint _tax) public onlyAdmin {\r\n        taxRate = _tax;\r\n    }\r\n    \r\n    function getContractAmount(uint contractId) public view returns (\r\n        uint totalAmount,\r\n        uint amountOne,\r\n        uint amountTwo,\r\n        uint amountThree,\r\n        uint amountFour\r\n    ) {\r\n        totalAmount = TotalAmount[contractId];\r\n        amountOne = EachAmount[contractId][0];\r\n        amountTwo = EachAmount[contractId][1];\r\n        amountThree = EachAmount[contractId][2];\r\n        amountFour = EachAmount[contractId][3];\r\n    }\r\n    \r\n    function getContractPlayerNum(uint contractId) public view returns (uint totalPlayer) {\r\n        totalPlayer = TotalPlayers[contractId];\r\n    }\r\n    \r\n    function getIfPlayed(uint contractId, address player) public view returns (bool ifPlayed) {\r\n        ifPlayed = contracts[contractId].IfPlayed[player];\r\n    }\r\n    \r\n    function getContractTime(uint contractId) public view returns (\r\n        uint contractTime,\r\n        uint betEndTime\r\n    ) {\r\n        contractTime = contracts[contractId].ContractTime;\r\n        betEndTime = contracts[contractId].BetEndTime;\r\n    }\r\n    \r\n    function getContractBet(uint contractId, address player) public view returns (\r\n        uint[4] memory amounts,\r\n        uint timeFactor\r\n    ) {\r\n        amounts = contracts[contractId].PlayerToBet[player].amount;\r\n        timeFactor = contracts[contractId].PlayerToBet[player].timestamp;\r\n    }\r\n    \r\n    function getContractResult(uint contractId) public view returns (uint result) {\r\n        result =  contracts[contractId].result;\r\n    }\r\n    \r\n    function getIfClaimed(uint contractId, address player) public view returns (bool ifClaimed) {\r\n        ifClaimed = contracts[contractId].IfClaimed[player];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"},{\"name\":\"side\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"betContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getIfPlayed\",\"outputs\":[{\"name\":\"ifPlayed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"getContractTime\",\"outputs\":[{\"name\":\"contractTime\",\"type\":\"uint256\"},{\"name\":\"betEndTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"claimContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"getContractResult\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"getContractAmount\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"amountOne\",\"type\":\"uint256\"},{\"name\":\"amountTwo\",\"type\":\"uint256\"},{\"name\":\"amountThree\",\"type\":\"uint256\"},{\"name\":\"amountFour\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getContractBet\",\"outputs\":[{\"name\":\"amounts\",\"type\":\"uint256[4]\"},{\"name\":\"timeFactor\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getIfClaimed\",\"outputs\":[{\"name\":\"ifClaimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"revealContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"getContractPlayerNum\",\"outputs\":[{\"name\":\"totalPlayer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sides\",\"type\":\"uint256\"},{\"name\":\"amounts\",\"type\":\"uint256[4]\"},{\"name\":\"contractTime\",\"type\":\"uint256\"},{\"name\":\"betEndTime\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"adjustBetLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"adjustFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"adjustTax\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setCTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_CTOAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sides\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eachAmount\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betEndTime\",\"type\":\"uint256\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"side\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"timeFactor\",\"type\":\"uint256\"}],\"name\":\"NewBetSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"side\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"name\":\"timeFactor\",\"type\":\"uint256\"}],\"name\":\"BetAdjustSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ContractRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ContractClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCTO\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldCTO\",\"type\":\"address\"}],\"name\":\"CTOTransfer\",\"type\":\"event\"}]","ContractName":"Creative","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b797f5962ab0fb2322470223841d35642e227283","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://77f693ad1c79dc3a5b94e14a45acd034da9994166533f9266645ddb5a7b3d73c"}]}