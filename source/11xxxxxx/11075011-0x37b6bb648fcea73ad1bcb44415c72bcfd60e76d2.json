{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.23 <0.6.0;\r\n\r\ncontract ethp2p {\r\n    \r\n    struct User {\r\n        uint id;\r\n        address sponsor;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeE1Levels; \r\n        \r\n        mapping(uint8 => E1) e1Matrix;\r\n        \r\n        mapping(uint8 => E2) e2;\r\n    }\r\n    \r\n    struct E1 {\r\n        address currentSponsor;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct E2 {\r\n        address currentSponsor;\r\n        address leftLeg;\r\n        address rightLeg;\r\n        uint8 level;\r\n        uint leftPoints;\r\n        uint rightPoints;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    uint8 public constant LAST_LEVEL = 10;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances;\r\n    \r\n    uint public lastUserId = 2;\r\n    address public owner;\r\n    address public pool = 0xc6c368Eb6B4547755ECAd06a0Ba9cBB022F97018;\r\n    address public feePool = 0x8C55b5D1E5EC2881582e4B5b8E5b4e9Dcd75F9C4;\r\n    \r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint8 => uint) public levelFee;\r\n    \r\n    event Registration(address indexed user, address indexed sponsor, uint indexed userId, uint sponsorId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);\r\n    event Upgrade(address indexed user, address indexed sponsor, uint8 matrix, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed sponsor, uint8 matrix, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 matrix, uint8 level);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level);\r\n    event Match(address indexed user);\r\n    event MatchBonusToPay(address indexed user, uint value);\r\n    \r\n    constructor(address ownerAddress) public {\r\n        levelPrice[1] = 0.0275 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n        }\r\n        \r\n        levelFee[1] = 0.0025 ether;\r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelFee[i] = levelFee[i-1] * 2;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            sponsor: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        users[ownerAddress].e2[1].level = 10;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeE1Levels[i] = true;\r\n        }\r\n        \r\n        userIds[1] = ownerAddress; \r\n    }\r\n    \r\n    function registrationExt(address sponsorAddress, uint8 leg) external payable {\r\n        registration(msg.sender, sponsorAddress, leg);\r\n    }\r\n    \r\n    function registration(address userAddress, address sponsorAddress, uint8 leg) private {\r\n        require(msg.value == 0.055 ether, \"registration cost 0.055\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(sponsorAddress), \"sponsor not exists\");\r\n        require(leg == 0 || leg == 1, \"invalid leg\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            sponsor: sponsorAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        \r\n        users[userAddress].sponsor = sponsorAddress;\r\n        \r\n        users[userAddress].activeE1Levels[1] = true;\r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n        \r\n        users[sponsorAddress].partnersCount++;\r\n        \r\n        address freeE2Sponsor = findFreeE2Sponsor(sponsorAddress, leg);\r\n        users[userAddress].e2[1].level = 1;\r\n        users[userAddress].e2[1].currentSponsor = freeE2Sponsor;\r\n        updateE2Sponsor(userAddress, freeE2Sponsor, leg);\r\n\r\n        address freeE1Sponsor = findFreeE1Sponsor(userAddress, 1);\r\n        users[userAddress].e1Matrix[1].currentSponsor = freeE1Sponsor;\r\n        updateE1Sponsor(userAddress, freeE1Sponsor, 1);\r\n        \r\n        sendETHFeesToPool(feePool, 2);\r\n\r\n        emit Registration(userAddress, sponsorAddress, users[userAddress].id, users[sponsorAddress].id);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        \r\n        sendETHFeesToPool(feePool, level);\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeE1Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].e1Matrix[level-1].blocked) {\r\n                users[msg.sender].e1Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeE1Sponsor = findFreeE1Sponsor(msg.sender, level);\r\n            users[msg.sender].e1Matrix[level].currentSponsor = freeE1Sponsor;\r\n            users[msg.sender].activeE1Levels[level] = true;\r\n            updateE1Sponsor(msg.sender, freeE1Sponsor, level);\r\n            \r\n            emit Upgrade(msg.sender, freeE1Sponsor, 1, level);\r\n\r\n        } else {\r\n            require(users[msg.sender].e2[1].level < level, \"level already activated\"); \r\n\r\n            uint currentPoints = getPoints(users[msg.sender].e2[1].level);\r\n            users[msg.sender].e2[1].level = level;\r\n            uint newLevelPoints = getPoints(level);\r\n            uint addPoints = newLevelPoints - currentPoints;\r\n\r\n            updatePoints(msg.sender, addPoints, 1);\r\n            sendETHDividendsToPool(pool, 1);\r\n            \r\n            checkMatchBonus(users[msg.sender].e2[1].currentSponsor);\r\n            \r\n            emit Upgrade(msg.sender, users[msg.sender].e2[1].currentSponsor, 2, level);\r\n        }\r\n    } \r\n    \r\n    function updateE1Sponsor(address userAddress, address sponsorAddress, uint8 level) private {\r\n        users[sponsorAddress].e1Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[sponsorAddress].e1Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, sponsorAddress, 1, level, uint8(users[sponsorAddress].e1Matrix[level].referrals.length));\r\n            return sendETHDividends(sponsorAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, sponsorAddress, 1, level, 3);\r\n    \r\n        users[sponsorAddress].e1Matrix[level].referrals = new address[](0);\r\n        if (!users[sponsorAddress].activeE1Levels[level+1] && level != LAST_LEVEL) {\r\n            users[sponsorAddress].e1Matrix[level].blocked = true;\r\n        }\r\n\r\n        if (sponsorAddress != owner) {\r\n            address freeSponsorAddress = findFreeE1Sponsor(sponsorAddress, level);\r\n            if (users[sponsorAddress].e1Matrix[level].currentSponsor != freeSponsorAddress) {\r\n                users[sponsorAddress].e1Matrix[level].currentSponsor = freeSponsorAddress;\r\n            }\r\n            \r\n            users[sponsorAddress].e1Matrix[level].reinvestCount++;\r\n            emit Reinvest(sponsorAddress, freeSponsorAddress, userAddress, 1, level);\r\n            updateE1Sponsor(sponsorAddress, freeSponsorAddress, level);\r\n        } else {\r\n            sendETHDividends(owner, userAddress, 1, level);\r\n            users[owner].e1Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n    \r\n    function updateE2Sponsor(address userAddress, address sponsorAddress, uint8 leg) private {\r\n        if (leg == 0){\r\n            users[sponsorAddress].e2[1].leftLeg = userAddress;\r\n            users[sponsorAddress].e2[1].leftPoints += 25; \r\n            \r\n            if (users[sponsorAddress].e2[1].leftPoints <= users[sponsorAddress].e2[1].rightPoints){\r\n                \r\n            }\r\n        }\r\n        else {\r\n            users[sponsorAddress].e2[1].rightLeg = userAddress;\r\n            users[sponsorAddress].e2[1].rightPoints += 25; \r\n        }\r\n        updatePoints(sponsorAddress, 25, 1);\r\n        emit NewUserPlace(userAddress, sponsorAddress, 2, 1, leg);\r\n        sendETHDividendsToPool(pool, 1);\r\n        \r\n        checkMatchBonus(sponsorAddress);\r\n    }\r\n    \r\n    function findFreeE1Sponsor(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].sponsor].activeE1Levels[level]) {\r\n                return users[userAddress].sponsor;\r\n            }\r\n            \r\n            userAddress = users[userAddress].sponsor;\r\n        }\r\n    }\r\n    \r\n    function findFreeE2Sponsor(address sponsorAddress, uint8 leg) public view returns(address) {\r\n        while (true) {\r\n            if (leg == 0){\r\n                if (users[sponsorAddress].e2[1].leftLeg == 0x0000000000000000000000000000000000000000){\r\n                    return sponsorAddress;\r\n                }\r\n                sponsorAddress = users[sponsorAddress].e2[1].leftLeg;\r\n            }\r\n            else {\r\n                if (users[sponsorAddress].e2[1].rightLeg == 0x0000000000000000000000000000000000000000){\r\n                    return sponsorAddress;\r\n                }\r\n                sponsorAddress = users[sponsorAddress].e2[1].rightLeg;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function usersActiveE1Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeE1Levels[level];\r\n    }\r\n    \r\n    function usersE1Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool) {\r\n        return (users[userAddress].e1Matrix[level].currentSponsor,\r\n                users[userAddress].e1Matrix[level].referrals,\r\n                users[userAddress].e1Matrix[level].blocked);\r\n    }\r\n    \r\n    function usersE2(address userAddress) public view returns(address, uint, uint, uint8, address, address) {\r\n        return (users[userAddress].e2[1].currentSponsor,\r\n                users[userAddress].e2[1].leftPoints,\r\n                users[userAddress].e2[1].rightPoints,\r\n                users[userAddress].e2[1].level,\r\n                users[userAddress].e2[1].leftLeg,\r\n                users[userAddress].e2[1].rightLeg);\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].e1Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].e1Matrix[level].currentSponsor;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } \r\n    }\r\n    \r\n    function sendETHDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level] - levelFee[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n    \r\n    function sendETHDividendsToPool(address userAddress, uint8 level) private {\r\n        address receiver = userAddress;\r\n\r\n        if (!address(uint160(receiver)).send(levelPrice[level] - levelFee[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function sendETHFeesToPool(address userAddress, uint8 level) private {\r\n        address receiver = userAddress;\r\n\r\n        if (!address(uint160(receiver)).send(levelFee[level])) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n    function checkMatchBonus(address userAddress) private {\r\n        uint leftPoints = users[userAddress].e2[1].leftPoints;\r\n        uint rightPoints = users[userAddress].e2[1].rightPoints;\r\n        \r\n        uint points = leftPoints;\r\n        if (rightPoints < leftPoints){\r\n            points = rightPoints;\r\n        }\r\n        \r\n        if (points > 0){\r\n            users[userAddress].e2[1].leftPoints -= points;\r\n            users[userAddress].e2[1].rightPoints -= points;\r\n            emit Match(userAddress);\r\n            uint bonusValue = getMatchBonusValue(users[userAddress].e2[1].level, points);\r\n            emit MatchBonusToPay(userAddress, bonusValue);\r\n            \r\n            for (int i = 0; i < 6; i++){\r\n                checkUplineBonus(userAddress, leftPoints + rightPoints);\r\n                userAddress = users[userAddress].e2[1].currentSponsor;\r\n            }\r\n        }\r\n        else {\r\n            if (users[userAddress].e2[1].currentSponsor != 0x0000000000000000000000000000000000000000){\r\n                checkMatchBonus(users[userAddress].e2[1].currentSponsor);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    function getMatchBonusValue(uint8 level, uint baseValue) private pure returns (uint) {\r\n        uint percentValue;\r\n        uint bonusValue;\r\n        \r\n        if (level == 1 || level == 2){\r\n            percentValue = 7;\r\n        }\r\n        else if (level == 3){\r\n            percentValue = 8;\r\n        }\r\n        else if (level == 4){\r\n            percentValue = 9;\r\n        }\r\n        else if (level == 5 || level == 6){\r\n            percentValue = 10;\r\n        }\r\n        else if (level == 7 || level == 8){\r\n            percentValue = 11;\r\n        }\r\n        else if (level == 9 || level == 10){\r\n            percentValue = 12;\r\n        }\r\n        \r\n        bonusValue = (baseValue * 100) * percentValue / 100;\r\n        \r\n        return bonusValue;\r\n    }\r\n    \r\n    function checkUplineBonus(address userAddress, uint points) private {\r\n        uint uplinePoints;\r\n        \r\n        if (userAddress == users[users[userAddress].e2[1].currentSponsor].e2[1].leftLeg){\r\n            uplinePoints = users[users[userAddress].e2[1].currentSponsor].e2[1].rightPoints;\r\n        }\r\n        else if (userAddress == users[users[userAddress].e2[1].currentSponsor].e2[1].rightLeg){\r\n            uplinePoints = users[users[userAddress].e2[1].currentSponsor].e2[1].leftPoints;\r\n        }\r\n        \r\n        if (uplinePoints >= points){\r\n            uint bonusValue = getMatchBonusValue(users[users[userAddress].e2[1].currentSponsor].e2[1].level, points);\r\n            users[users[userAddress].e2[1].currentSponsor].e2[1].leftPoints -= points;\r\n            users[users[userAddress].e2[1].currentSponsor].e2[1].rightPoints -= points;\r\n            emit MatchBonusToPay(users[userAddress].e2[1].currentSponsor, bonusValue);\r\n        }\r\n    }\r\n    \r\n    function getPoints(uint8 level) private pure returns (uint) {\r\n        uint points;\r\n        \r\n        if (level == 1){\r\n            points = 25;\r\n        }\r\n        else if (level == 2){\r\n            points = 50;\r\n        }\r\n        else if (level == 3){\r\n            points = 100;\r\n        }\r\n        else if (level == 4){\r\n            points = 200;\r\n        }\r\n        else if (level == 5){\r\n            points = 400;\r\n        }\r\n        else if (level == 6){\r\n            points = 800;\r\n        }\r\n        else if (level == 7){\r\n            points = 1600;\r\n        }\r\n        else if (level == 8){\r\n            points = 3200;\r\n        }\r\n        else if (level == 9){\r\n            points = 6400;\r\n        }\r\n        else if (level == 10){\r\n            points = 12800;\r\n        }\r\n        \r\n        return points;\r\n    }\r\n    \r\n    function updatePoints(address userAddress, uint points, uint8 operation) private {\r\n        while(users[userAddress].e2[1].currentSponsor != 0x0000000000000000000000000000000000000000){\r\n            if (userAddress == users[users[userAddress].e2[1].currentSponsor].e2[1].leftLeg){\r\n                if (operation == 1){\r\n                    users[users[userAddress].e2[1].currentSponsor].e2[1].leftPoints += points;\r\n                }\r\n                else {\r\n                    users[users[userAddress].e2[1].currentSponsor].e2[1].leftPoints -= points;\r\n                }\r\n            }\r\n            else if (userAddress == users[users[userAddress].e2[1].currentSponsor].e2[1].rightLeg){\r\n                if (operation == 1){\r\n                    users[users[userAddress].e2[1].currentSponsor].e2[1].rightPoints += points;\r\n                }\r\n                else {\r\n                    users[users[userAddress].e2[1].currentSponsor].e2[1].rightPoints -= points;\r\n                }\r\n            }\r\n            userAddress = users[userAddress].e2[1].currentSponsor;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MatchBonusToPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeE1Sponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"leg\",\"type\":\"uint8\"}],\"name\":\"findFreeE2Sponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsorAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"leg\",\"type\":\"uint8\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveE1Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersE1Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"usersE2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ethp2p","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009a003b4ed2ef8306116fb5229838cbfe5a77917e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f45210d07fab8bba7dd7a36d6a8481a6ec8e2dbd6479d2b0afa0a89e85e601aa"}]}