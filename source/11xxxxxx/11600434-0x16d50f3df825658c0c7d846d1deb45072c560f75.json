{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary StableMath {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Scaling unit for use in specific calculations,\n     * where 1 * 10**18, or 1e18 represents a unit '1'\n     */\n    uint256 private constant FULL_SCALE = 1e18;\n\n    /**\n     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n     * @dev bAsset ratio unit for use in exact calculations,\n     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n     */\n    uint256 private constant RATIO_SCALE = 1e8;\n\n    /**\n     * @dev Provides an interface to the scaling unit\n     * @return Scaling unit (1e18 or 1 * 10**18)\n     */\n    function getFullScale() internal pure returns (uint256) {\n        return FULL_SCALE;\n    }\n\n    /**\n     * @dev Provides an interface to the ratio unit\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\n     */\n    function getRatioScale() internal pure returns (uint256) {\n        return RATIO_SCALE;\n    }\n\n    /**\n     * @dev Scales a given integer to the power of the full scale.\n     * @param x   Simple uint256 to scale\n     * @return    Scaled value a to an exact number\n     */\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\n        return x.mul(FULL_SCALE);\n    }\n\n    /***************************************\n              PRECISE ARITHMETIC\n    ****************************************/\n\n    /**\n     * @dev Multiplies two precise units, and then truncates by the full scale\n     * @param x     Left hand input to multiplication\n     * @param y     Right hand input to multiplication\n     * @return      Result after multiplying the two inputs and then dividing by the shared\n     *              scale unit\n     */\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\n        return mulTruncateScale(x, y, FULL_SCALE);\n    }\n\n    /**\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n     * @param x     Left hand input to multiplication\n     * @param y     Right hand input to multiplication\n     * @param scale Scale unit\n     * @return      Result after multiplying the two inputs and then dividing by the shared\n     *              scale unit\n     */\n    function mulTruncateScale(\n        uint256 x,\n        uint256 y,\n        uint256 scale\n    ) internal pure returns (uint256) {\n        // e.g. assume scale = fullScale\n        // z = 10e18 * 9e17 = 9e36\n        uint256 z = x.mul(y);\n        // return 9e38 / 1e18 = 9e18\n        return z.div(scale);\n    }\n\n    /**\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n     * @param x     Left hand input to multiplication\n     * @param y     Right hand input to multiplication\n     * @return      Result after multiplying the two inputs and then dividing by the shared\n     *              scale unit, rounded up to the closest base unit.\n     */\n    function mulTruncateCeil(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        // e.g. 8e17 * 17268172638 = 138145381104e17\n        uint256 scaled = x.mul(y);\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n        return ceil.div(FULL_SCALE);\n    }\n\n    /**\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n     * @param x     Left hand input to division\n     * @param y     Right hand input to division\n     * @return      Result after multiplying the left operand by the scale, and\n     *              executing the division on the right hand input.\n     */\n    function divPrecisely(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        // e.g. 8e18 * 1e18 = 8e36\n        uint256 z = x.mul(FULL_SCALE);\n        // e.g. 8e36 / 10e18 = 8e17\n        return z.div(y);\n    }\n\n    /***************************************\n                  RATIO FUNCS\n    ****************************************/\n\n    /**\n     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n     *      i.e. How much mAsset is this bAsset worth?\n     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n     * @param ratio bAsset ratio\n     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\n     */\n    function mulRatioTruncate(uint256 x, uint256 ratio)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\n    }\n\n    /**\n     * @dev Multiplies and truncates a token ratio, rounding up the result\n     *      i.e. How much mAsset is this bAsset worth?\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\n     * @param ratio bAsset ratio\n     * @return      Result after multiplying the two inputs and then dividing by the shared\n     *              ratio scale, rounded up to the closest base unit.\n     */\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n        internal\n        pure\n        returns (uint256)\n    {\n        // e.g. How much mAsset should I burn for this bAsset (x)?\n        // 1e18 * 1e8 = 1e26\n        uint256 scaled = x.mul(ratio);\n        // 1e26 + 9.99e7 = 100..00.999e8\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n        // return 100..00.999e8 / 1e8 = 1e18\n        return ceil.div(RATIO_SCALE);\n    }\n\n    /**\n     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n     *      i.e. How much bAsset is this mAsset worth?\n     * @param x     Left hand operand in division\n     * @param ratio bAsset ratio\n     * @return c    Result after multiplying the left operand by the scale, and\n     *              executing the division on the right hand input.\n     */\n    function divRatioPrecisely(uint256 x, uint256 ratio)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        // e.g. 1e14 * 1e8 = 1e22\n        uint256 y = x.mul(RATIO_SCALE);\n        // return 1e22 / 1e12 = 1e10\n        return y.div(ratio);\n    }\n\n    /***************************************\n                    HELPERS\n    ****************************************/\n\n    /**\n     * @dev Calculates minimum of two numbers\n     * @param x     Left hand input\n     * @param y     Right hand input\n     * @return      Minimum of the two inputs\n     */\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? y : x;\n    }\n\n    /**\n     * @dev Calculated maximum of two numbers\n     * @param x     Left hand input\n     * @param y     Right hand input\n     * @return      Maximum of the two inputs\n     */\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n        return x > y ? x : y;\n    }\n\n    /**\n     * @dev Clamps a value to an upper bound\n     * @param x           Left hand input\n     * @param upperBound  Maximum possible value to return\n     * @return            Input x clamped to a maximum value, upperBound\n     */\n    function clamp(uint256 x, uint256 upperBound)\n        internal\n        pure\n        returns (uint256)\n    {\n        return x > upperBound ? upperBound : x;\n    }\n}\n\ninterface IFeeCollector {\n    function collectTransferFee(uint256 _amount)\n        external\n        returns (uint256 amountAfterFee);\n\n    function collectTransferAndStakingFees(uint256 _amount)\n        external\n        returns (uint256 amountAfterFee);\n\n    function calculateTransferAndStakingFee(uint256 _amount)\n        external\n        view\n        returns (\n            uint256 totalFeeAmount,\n            uint256 transferFeeAmount,\n            uint256 stakingFeeAmount,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        );\n\n    function calculateTransferFee(uint256 _amount)\n        external\n        view\n        returns (\n            uint256 feeToCharge,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        );\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IOracle {\n    function getData() external returns (uint256, bool);\n\n    function update() external;\n\n    function consult() external view returns (uint256 exchangeRate);\n}\n\ninterface IRocketV2 is IERC20 {\n    function setMonetaryPolicy(IMonetaryPolicy _monetaryPolicy) external;\n\n    function rebase(uint256 epoch, int256 supplyDelta)\n        external\n        returns (uint256 supplyAfterRebase);\n\n    function setFeeCollector(IFeeCollector _feeCollector) external;\n\n    function isFeeChargingEnabled() external view returns (bool stakingEnabled);\n\n    function transferFromWithoutCollectingFee(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool success);\n\n    function claim(uint256 rocketV1Amount) external;\n\n    function calculateClaim(uint256 rocketV1AmountToSend)\n        external\n        view\n        returns (uint256 rocketV2AmountToReceive);\n}\n\ninterface IMonetaryPolicy {\n    function rebase() external;\n\n    function setMarketOracle(IOracle _marketOracle) external;\n\n    function setRocket(IRocketV2 _rocket) external;\n\n    function setDeviationThreshold(uint256 _deviationThreshold) external;\n\n    function setRebaseLag(uint256 _rebaseLag) external;\n\n    function setRebaseTimingParameters(\n        uint256 _minRebaseTimeIntervalSec,\n        uint256 _rebaseWindowOffsetSec,\n        uint256 _rebaseWindowLengthSec\n    ) external;\n\n    function inRebaseWindow() external view returns (bool);\n}\n\ninterface IStaking {\n    struct StakingEpoch {\n        uint256 totalSupply;\n        uint256 totalCredits;\n        uint256 profitCredits;\n        bool released;\n        uint256 block;\n    }\n\n    struct StakedAccount {\n        uint256 calculatedProfitCredits;\n        uint256 stakedCredits;\n        uint256 lastEpochProcessed;\n    }\n\n    event ProfitCreditsCalculated(address _account, uint256 _fromBlock, uint256 _toBlock, uint256 earnedProfits);\n\n    function releaseEpoch() external;\n    function epochsCount() external view returns(uint256 epochs);\n    function addNextEpochProfitTokens(uint256 _amount) external;\n\n    function updateStakingProfits(address _account) external;\n    function updateStakingProfitsTillEpoch(address _account, uint256 _toEpoch) external;\n\n    function stake(uint256 _amount) external returns (uint256 creditsIssued);\n\n    function redeem(uint256 _amount) external returns (uint256 rocketReturned);\n\n    function tokensToCredits(uint256 _amount)\n        external\n        view\n        returns (uint256 credits);\n\n    function creditsToTokens(uint256 _credits)\n        external\n        view\n        returns (uint256 rocketAmount);\n\n    function getStakerBalance(address staker)\n        external\n        view\n        returns (\n            uint256 credits,\n            uint256 toRedeem,\n            uint256 toRedeemAfterFee\n        );\n}\n\n// SPDX-License-Identifier: MIT\ncontract FeeCollector is OwnableUpgradeSafe, IFeeCollector {\n    using SafeMath for uint256;\n    using StableMath for uint256;\n\n    uint256 public stakingFeeToCharge;\n    uint256 public transferFeeToCharge;\n    uint256 public burnFeeToCharge;\n\n    IRocketV2 private rocket;\n    IStaking private staking;\n\n    address\n        private constant BURN_ADDRESS = 0xdeaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD;\n\n    event RocketUpdated(address rocket);\n    event StakingUpdated(address staking);\n    event FeesUpdated(\n        uint256 stakingFeeToCharge,\n        uint256 transferFeeToCharge,\n        uint256 burnFeeToCharge\n    );\n    event TokensStaked(uint256 amount);\n    event TokensBurned(uint256 amount);\n\n    modifier depositToStakers() {\n        _;\n        uint256 amount = rocket.balanceOf(address(this));\n        if (amount > 0) {\n            rocket.approve(address(staking), amount);\n            require(\n                rocket.transferFromWithoutCollectingFee(\n                    address(this),\n                    address(staking),\n                    amount\n                ),\n                \"FeeCollector: Must deposit tokens to stakers\"\n            );\n            rocket.approve(address(staking), 0);\n            emit TokensStaked(amount);\n        }\n    }\n\n    function initialize(IRocketV2 _rocket, IStaking _staking)\n        public\n        initializer\n    {\n        require(\n            address(_rocket) != address(0),\n            \"Staking: rocket address can't be zero\"\n        );\n        OwnableUpgradeSafe.__Ownable_init();\n\n        rocket = _rocket;\n        staking = _staking;\n\n        stakingFeeToCharge = 2E16; // 2%\n        transferFeeToCharge = 3E16; // 3%\n        burnFeeToCharge = 33E16; // 33%\n    }\n\n    function setFees(\n        uint256 _stakingFee,\n        uint256 _transferFee,\n        uint256 _burnFee\n    ) public onlyOwner {\n        stakingFeeToCharge = _stakingFee;\n        transferFeeToCharge = _transferFee;\n        burnFeeToCharge = _burnFee;\n\n        emit FeesUpdated(\n            stakingFeeToCharge,\n            transferFeeToCharge,\n            burnFeeToCharge\n        );\n    }\n\n    function setRocket(IRocketV2 _rocket) public onlyOwner {\n        require(\n            address(_rocket) != address(0),\n            \"Staking: rocket address can't be zero\"\n        );\n        rocket = _rocket;\n        emit RocketUpdated(address(_rocket));\n    }\n\n    function setStaking(IStaking _staking) public onlyOwner {\n        require(\n            address(_staking) != address(0),\n            \"Staking: rocket address can't be zero\"\n        );\n        staking = _staking;\n        emit StakingUpdated(address(_staking));\n    }\n\n    function collectTransferFee(uint256 _amount)\n        public\n        override\n        depositToStakers\n        returns (uint256 amountAfterFee)\n    {\n        if (!rocket.isFeeChargingEnabled()) {\n            return _amount;\n        }\n\n        (\n            uint256 feeToCharge,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n\n        ) = calculateTransferFee(_amount);\n\n        require(\n            rocket.transferFromWithoutCollectingFee(\n                _msgSender(),\n                address(this),\n                feeToStakers\n            ),\n            \"FeeCollector: Must receive tokens\"\n        );\n\n        require(\n            rocket.transferFromWithoutCollectingFee(\n                _msgSender(),\n                BURN_ADDRESS,\n                feeToBurn\n            ),\n            \"FeeCollector: Burn transfer failed\"\n        );\n        emit TokensBurned(feeToBurn);\n\n        amountAfterFee = _amount.sub(feeToCharge);\n\n        staking.addNextEpochProfitTokens(feeToStakers);\n    }\n\n    function collectTransferAndStakingFees(uint256 _amount)\n        external\n        override\n        depositToStakers\n        returns (uint256)\n    {\n        if (!rocket.isFeeChargingEnabled()) {\n            return _amount;\n        }\n\n        collectTransferFee(_amount);\n\n        (\n            ,\n            ,\n            uint256 stakingFeeToCharge,\n            ,\n            ,\n            uint256 amountAfterFee\n        ) = calculateTransferAndStakingFee(_amount);\n        require(\n            rocket.transferFromWithoutCollectingFee(\n                _msgSender(),\n                address(this),\n                stakingFeeToCharge\n            ),\n            \"FeeCollector: Must receive tokens\"\n        );\n\n        staking.addNextEpochProfitTokens(stakingFeeToCharge);\n\n        return amountAfterFee;\n    }\n\n    function calculateTransferFee(uint256 _amount)\n        public\n        override\n        view\n        returns (\n            uint256 feeToCharge,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        )\n    {\n        if (!rocket.isFeeChargingEnabled()) {\n            feeToCharge = 0;\n            feeToBurn = 0;\n            feeToStakers = 0;\n            amountAfterFee = _amount;\n        } else {\n            feeToCharge = _amount.mulTruncate(transferFeeToCharge);\n            feeToBurn = feeToCharge.mulTruncate(burnFeeToCharge);\n            feeToStakers = feeToCharge.sub(feeToBurn);\n            amountAfterFee = _amount.sub(feeToCharge);\n        }\n    }\n\n    function calculateTransferAndStakingFee(uint256 _amount)\n        public\n        override\n        view\n        returns (\n            uint256 totalFeeAmount,\n            uint256 transferFeeAmount,\n            uint256 stakingFeeAmount,\n            uint256 feeToBurn,\n            uint256 feeToStakers,\n            uint256 amountAfterFee\n        )\n    {\n        if (!rocket.isFeeChargingEnabled()) {\n            totalFeeAmount = 0;\n            transferFeeAmount = 0;\n            stakingFeeAmount = 0;\n            feeToBurn = 0;\n            feeToStakers = 0;\n            amountAfterFee = _amount;\n        } else {\n            (transferFeeAmount, feeToBurn, , ) = calculateTransferFee(_amount);\n            stakingFeeAmount = _amount.mulTruncate(stakingFeeToCharge);\n            totalFeeAmount = transferFeeAmount.add(stakingFeeAmount);\n            feeToStakers = totalFeeAmount.sub(feeToBurn);\n            amountAfterFee = _amount.sub(totalFeeAmount);\n        }\n    }\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFeeToCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeToCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnFeeToCharge\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rocket\",\"type\":\"address\"}],\"name\":\"RocketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"StakingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnFeeToCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTransferAndStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeToStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeToCharge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeToStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectTransferAndStakingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"collectTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRocketV2\",\"name\":\"_rocket\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRocketV2\",\"name\":\"_rocket\",\"type\":\"address\"}],\"name\":\"setRocket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeToCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeToCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeCollector","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}