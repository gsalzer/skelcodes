{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@gelatonetwork/core/contracts/conditions/IGelatoCondition.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\"\r\n    },\r\n    \"@gelatonetwork/core/contracts/provider_modules/IGelatoProviderModule.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\"\r\n    },\r\n    \"contracts/constants/CDebtBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nfunction GAS_COSTS_FOR_FULL_REFINANCE() pure returns (uint256[4] memory) {\\n    return [uint256(2000000), 2400000, 2850000, 3500000];\\n}\\n\\nuint256 constant PREMIUM = 20;\\nuint256 constant VAULT_CREATION_COST = 150000;\\n\"\r\n    },\r\n    \"contracts/constants/CGelato.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {\\n    IGelatoGasPriceOracle\\n} from \\\"../interfaces/gelato/IGelatoGasPriceOracle.sol\\\";\\n\\nIGelatoGasPriceOracle constant GELATO_GAS_PRICE_ORACLE = IGelatoGasPriceOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\"\r\n    },\r\n    \"contracts/constants/CInstaDapp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\n// InstaDapp\\naddress constant INSTA_MEMORY = 0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F;\\n\\n// Connectors\\naddress constant CONNECT_MAKER = 0xac02030d8a8F49eD04b2f52C394D3F901A10F8A9;\\naddress constant CONNECT_COMPOUND = 0x15FdD1e902cAC70786fe7D31013B1a806764B5a2;\\naddress constant INSTA_POOL_V2 = 0xeB4bf86589f808f90EEC8e964dBF16Bd4D284905;\\n\\n// Tokens\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n// Insta Pool\\naddress constant INSTA_POOL_RESOLVER = 0xa004a5afBa04b74037E9E52bA1f7eb02b5E61509;\\nuint256 constant ROUTE_1_TOLERANCE = 1005e15;\\n\\n// Insta Mapping\\naddress constant INSTA_MAPPING = 0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88;\\n\"\r\n    },\r\n    \"contracts/constants/CMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\naddress constant MCD_MANAGER = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\n\"\r\n    },\r\n    \"contracts/contracts/connectors/ConnectGelatoDataFullMakerToMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport {GelatoBytes} from \\\"../../lib/GelatoBytes.sol\\\";\\nimport {sub} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    AccountInterface,\\n    ConnectorInterface\\n} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\nimport {\\n    DAI,\\n    CONNECT_MAKER,\\n    INSTA_POOL_V2\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    _getMakerVaultDebt,\\n    _getMakerVaultCollateralBalance,\\n    _isVaultOwner\\n} from \\\"../../functions/dapps/FMaker.sol\\\";\\nimport {\\n    _encodeFlashPayback\\n} from \\\"../../functions/InstaDapp/connectors/FInstaPoolV2.sol\\\";\\nimport {\\n    _encodePaybackMakerVault,\\n    _encodedWithdrawMakerVault,\\n    _encodeOpenMakerVault,\\n    _encodedDepositMakerVault,\\n    _encodeBorrowMakerVault\\n} from \\\"../../functions/InstaDapp/connectors/FConnectMaker.sol\\\";\\nimport {\\n    _encodePayExecutor\\n} from \\\"../../functions/InstaDapp/connectors/FConnectGelatoExecutorPayment.sol\\\";\\nimport {_getGelatoExecutorFees} from \\\"../../functions/gelato/FGelato.sol\\\";\\nimport {\\n    _getFlashLoanRoute,\\n    _getGasCostMakerToMaker,\\n    _getRealisedDebt\\n} from \\\"../../functions/gelato/FGelatoDebtBridge.sol\\\";\\nimport {\\n    DataFlow\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ncontract ConnectGelatoDataFullMakerToMaker is ConnectorInterface {\\n    using GelatoBytes for bytes;\\n\\n    string public constant OK = \\\"OK\\\";\\n\\n    // solhint-disable const-name-snakecase\\n    string public constant override name =\\n        \\\"ConnectGelatoDataFullMakerToMaker-v1.0\\\";\\n    uint256 internal immutable _id;\\n    address internal immutable _connectGelatoExecutorPayment;\\n\\n    constructor(uint256 id, address connectGelatoExecutorPayment) {\\n        _id = id;\\n        _connectGelatoExecutorPayment = connectGelatoExecutorPayment;\\n    }\\n\\n    /// @dev Connector Details\\n    function connectorID()\\n        external\\n        view\\n        override\\n        returns (uint256 _type, uint256 id)\\n    {\\n        (_type, id) = (1, _id); // Should put specific value.\\n    }\\n\\n    // ====== ACTION TERMS CHECK ==========\\n    // Overriding IGelatoAction's function (optional)\\n    function termsOk(\\n        uint256, // taskReceipId\\n        address _dsa,\\n        bytes calldata _actionData,\\n        DataFlow,\\n        uint256, // value\\n        uint256 // cycleId\\n    ) public view returns (string memory) {\\n        (uint256 vaultAId, , , ) =\\n            abi.decode(_actionData[4:], (uint256, uint256, address, string));\\n\\n        if (vaultAId == 0)\\n            return \\\"ConnectGelatoDataFullMakerToMaker: Vault A Id is not valid\\\";\\n        if (!_isVaultOwner(vaultAId, _dsa))\\n            return\\n                \\\"ConnectGelatoDataFullMakerToMaker: Vault A not owned by dsa\\\";\\n        return OK;\\n    }\\n\\n    /// @notice Entry Point for DSA.cast DebtBridge from e.g ETH-A to ETH-B\\n    /// @dev payable to be compatible in conjunction with DSA.cast payable target\\n    /// @param _vaultAId Id of the unsafe vault of the client of Vault A Collateral.\\n    /// @param _vaultBId Id of the vault B Collateral of the client.\\n    /// @param _colToken  vault's col token address .\\n    /// @param _colType colType of the new vault. example : ETH-B, ETH-A.\\n    function getDataAndCastMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        address _colToken,\\n        string calldata _colType\\n    ) external payable {\\n        (address[] memory targets, bytes[] memory datas) =\\n            _dataMakerToMaker(_vaultAId, _vaultBId, _colToken, _colType);\\n\\n        _cast(targets, datas);\\n    }\\n\\n    function _cast(address[] memory targets, bytes[] memory datas) internal {\\n        // Instapool V2 / FlashLoan call\\n        bytes memory castData =\\n            abi.encodeWithSelector(\\n                AccountInterface.cast.selector,\\n                targets,\\n                datas,\\n                msg.sender // msg.sender == GelatoCore\\n            );\\n\\n        (bool success, bytes memory returndata) =\\n            address(this).delegatecall(castData);\\n        if (!success) {\\n            returndata.revertWithError(\\n                \\\"ConnectGelatoDataFullMakerToMaker._cast:\\\"\\n            );\\n        }\\n    }\\n\\n    /* solhint-disable function-max-lines */\\n\\n    function _dataMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        address _colToken,\\n        string calldata _colType\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](1);\\n        targets[0] = INSTA_POOL_V2;\\n\\n        _vaultBId = _isVaultOwner(_vaultBId, address(this)) ? _vaultBId : 0;\\n\\n        uint256 wDaiToBorrow = _getRealisedDebt(_getMakerVaultDebt(_vaultAId));\\n        uint256 wColToWithdrawFromMaker =\\n            _getMakerVaultCollateralBalance(_vaultAId);\\n        uint256 route = _getFlashLoanRoute(DAI, wDaiToBorrow);\\n        uint256 gasCost = _getGasCostMakerToMaker(_vaultBId == 0, route);\\n        uint256 gasFeesPaidFromCol = _getGelatoExecutorFees(gasCost);\\n\\n        (address[] memory _targets, bytes[] memory _datas) =\\n            _vaultBId == 0\\n                ? _spellsMakerToNewMakerVault(\\n                    _vaultAId,\\n                    _colToken,\\n                    _colType,\\n                    wDaiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromCol\\n                )\\n                : _spellsMakerToMaker(\\n                    _vaultAId,\\n                    _vaultBId,\\n                    _colToken,\\n                    wDaiToBorrow,\\n                    wColToWithdrawFromMaker,\\n                    gasFeesPaidFromCol\\n                );\\n\\n        datas = new bytes[](1);\\n        datas[0] = abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashBorrowAndCast.selector,\\n            DAI,\\n            wDaiToBorrow,\\n            route,\\n            abi.encode(_targets, _datas)\\n        );\\n    }\\n\\n    function _spellsMakerToNewMakerVault(\\n        uint256 _vaultAId,\\n        address _colToken,\\n        string calldata _colType,\\n        uint256 _wDaiToBorrow,\\n        uint256 _wColToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromCol\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](7);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = CONNECT_MAKER; // open new B vault\\n        targets[3] = CONNECT_MAKER; // deposit\\n        targets[4] = CONNECT_MAKER; // borrow\\n        targets[5] = _connectGelatoExecutorPayment; // payExecutor\\n        targets[6] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](7);\\n        datas[0] = _encodePaybackMakerVault(_vaultAId, uint256(-1), 0, 600);\\n        datas[1] = _encodedWithdrawMakerVault(_vaultAId, uint256(-1), 0, 0);\\n        datas[2] = _encodeOpenMakerVault(_colType);\\n        datas[3] = _encodedDepositMakerVault(\\n            0,\\n            sub(_wColToWithdrawFromMaker, _gasFeesPaidFromCol),\\n            0,\\n            0\\n        );\\n        datas[4] = _encodeBorrowMakerVault(0, 0, 600, 0);\\n        datas[5] = _encodePayExecutor(_colToken, _gasFeesPaidFromCol, 0, 0);\\n        datas[6] = _encodeFlashPayback(DAI, _wDaiToBorrow, 0, 0);\\n    }\\n\\n    function _spellsMakerToMaker(\\n        uint256 _vaultAId,\\n        uint256 _vaultBId,\\n        address _colToken,\\n        uint256 _wDaiToBorrow,\\n        uint256 _wColToWithdrawFromMaker,\\n        uint256 _gasFeesPaidFromCol\\n    ) internal view returns (address[] memory targets, bytes[] memory datas) {\\n        targets = new address[](6);\\n        targets[0] = CONNECT_MAKER; // payback\\n        targets[1] = CONNECT_MAKER; // withdraw\\n        targets[2] = CONNECT_MAKER; // deposit\\n        targets[3] = CONNECT_MAKER; // borrow\\n        targets[4] = _connectGelatoExecutorPayment; // payExecutor\\n        targets[5] = INSTA_POOL_V2; // flashPayback\\n\\n        datas = new bytes[](6);\\n        datas[0] = _encodePaybackMakerVault(_vaultAId, uint256(-1), 0, 600);\\n        datas[1] = _encodedWithdrawMakerVault(_vaultAId, uint256(-1), 0, 0);\\n        datas[2] = _encodedDepositMakerVault(\\n            _vaultBId,\\n            sub(_wColToWithdrawFromMaker, _gasFeesPaidFromCol),\\n            0,\\n            0\\n        );\\n        datas[3] = _encodeBorrowMakerVault(_vaultBId, 0, 600, 0);\\n        datas[4] = _encodePayExecutor(_colToken, _gasFeesPaidFromCol, 0, 0);\\n        datas[5] = _encodeFlashPayback(DAI, _wDaiToBorrow, 0, 0);\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n}\\n\"\r\n    },\r\n    \"contracts/functions/InstaDapp/connectors/FConnectGelatoExecutorPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {\\n    IConnectGelatoExecutorPayment\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectGelatoExecutorPayment.sol\\\";\\n\\nfunction _encodePayExecutor(\\n    address _token,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectGelatoExecutorPayment.payExecutor.selector,\\n            _token,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/functions/InstaDapp/connectors/FConnectMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {\\n    IConnectMaker\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectMaker.sol\\\";\\n\\nfunction _encodeOpenMakerVault(string memory _colType)\\n    pure\\n    returns (bytes memory)\\n{\\n    return abi.encodeWithSelector(IConnectMaker.open.selector, _colType);\\n}\\n\\nfunction _encodeBorrowMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.borrow.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedDepositMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.deposit.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodePaybackMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.payback.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\\nfunction _encodedWithdrawMakerVault(\\n    uint256 _vaultId,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectMaker.withdraw.selector,\\n            _vaultId,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/functions/InstaDapp/connectors/FInstaPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {\\n    IConnectInstaPoolV2\\n} from \\\"../../../interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\\\";\\n\\nfunction _encodeFlashPayback(\\n    address _token,\\n    uint256 _amt,\\n    uint256 _getId,\\n    uint256 _setId\\n) pure returns (bytes memory) {\\n    return\\n        abi.encodeWithSelector(\\n            IConnectInstaPoolV2.flashPayback.selector,\\n            _token,\\n            _amt,\\n            _getId,\\n            _setId\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/functions/dapps/FMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {MCD_MANAGER} from \\\"../../constants/CMaker.sol\\\";\\nimport {INSTA_MAPPING} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    ITokenJoinInterface\\n} from \\\"../../interfaces/dapps/Maker/ITokenJoinInterface.sol\\\";\\nimport {IMcdManager} from \\\"../../interfaces/dapps/Maker/IMcdManager.sol\\\";\\nimport {InstaMapping} from \\\"../../interfaces/InstaDapp/IInstaDapp.sol\\\";\\nimport {IVat} from \\\"../../interfaces/dapps/Maker/IVat.sol\\\";\\nimport {RAY, add, sub, mul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {_stringToBytes32, _convertTo18} from \\\"../../vendor/Convert.sol\\\";\\n\\nfunction _getMakerVaultDebt(uint256 _vaultId) view returns (uint256 wad) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 rad = sub(mul(art, rate), dai);\\n    wad = rad / RAY;\\n\\n    wad = mul(wad, RAY) < rad ? wad + 1 : wad;\\n}\\n\\nfunction _getMakerRawVaultDebt(uint256 _vaultId) view returns (uint256 tab) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, , , ) = vat.ilks(ilk);\\n    (, uint256 art) = vat.urns(ilk, urn);\\n\\n    uint256 rad = mul(art, rate);\\n\\n    tab = rad / RAY;\\n    tab = mul(tab, RAY) < rad ? tab + 1 : tab;\\n}\\n\\nfunction _getMakerVaultCollateralBalance(uint256 _vaultId)\\n    view\\n    returns (uint256)\\n{\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    IVat vat = IVat(manager.vat());\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n    (uint256 ink, ) = vat.urns(ilk, urn);\\n\\n    return ink;\\n}\\n\\nfunction _vaultWillBeSafe(\\n    uint256 _vaultId,\\n    uint256 _amtToBorrow,\\n    uint256 _colToDeposit\\n) view returns (bool) {\\n    require(_vaultId != 0, \\\"_vaultWillBeSafe: invalid vault id.\\\");\\n\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n\\n    (bytes32 ilk, address urn) = _getVaultData(manager, _vaultId);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    IVat vat = IVat(manager.vat());\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n    (uint256 ink, uint256 art) = vat.urns(ilk, urn);\\n    uint256 dai = vat.dai(urn);\\n\\n    uint256 dink = _convertTo18(tokenJoinContract.dec(), _colToDeposit);\\n    uint256 dart = _getBorrowAmt(_amtToBorrow, dai, rate);\\n\\n    ink = add(ink, dink);\\n    art = add(art, dart);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _newVaultWillBeSafe(\\n    string memory _colType,\\n    uint256 _amtToBorrow,\\n    uint256 _colToDeposit\\n) view returns (bool) {\\n    IMcdManager manager = IMcdManager(MCD_MANAGER);\\n    IVat vat = IVat(manager.vat());\\n\\n    bytes32 ilk = _stringToBytes32(_colType);\\n\\n    (, uint256 rate, uint256 spot, , ) = vat.ilks(ilk);\\n\\n    ITokenJoinInterface tokenJoinContract =\\n        ITokenJoinInterface(InstaMapping(INSTA_MAPPING).gemJoinMapping(ilk));\\n\\n    uint256 ink = _convertTo18(tokenJoinContract.dec(), _colToDeposit);\\n    uint256 art = _getBorrowAmt(_amtToBorrow, 0, rate);\\n\\n    uint256 tab = mul(rate, art);\\n\\n    return tab <= mul(ink, spot);\\n}\\n\\nfunction _getVaultData(IMcdManager manager, uint256 vault)\\n    view\\n    returns (bytes32 ilk, address urn)\\n{\\n    ilk = manager.ilks(vault);\\n    urn = manager.urns(vault);\\n}\\n\\nfunction _getBorrowAmt(\\n    uint256 _amt,\\n    uint256 _dai,\\n    uint256 _rate\\n) pure returns (uint256 dart) {\\n    dart = sub(mul(_amt, RAY), _dai) / _rate;\\n    dart = mul(dart, _rate) < mul(_amt, RAY) ? dart + 1 : dart;\\n}\\n\\nfunction _isVaultOwner(uint256 _vaultId, address _owner) view returns (bool) {\\n    if (_vaultId == 0) return false;\\n\\n    try IMcdManager(MCD_MANAGER).owns(_vaultId) returns (address owner) {\\n        return _owner == owner;\\n    } catch Error(string memory error) {\\n        revert(string(abi.encodePacked(\\\"FMaker._isVaultOwner:\\\", error)));\\n    } catch {\\n        revert(\\\"FMaker._isVaultOwner:undefined\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/functions/gelato/FGelato.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../../constants/CGelato.sol\\\";\\nimport {mul} from \\\"../../vendor/DSMath.sol\\\";\\n\\nfunction _getGelatoGasPrice() view returns (uint256) {\\n    int256 oracleGasPrice = GELATO_GAS_PRICE_ORACLE.latestAnswer();\\n    if (oracleGasPrice <= 0) revert(\\\"_getGelatoGasPrice:0orBelow\\\");\\n    return uint256(oracleGasPrice);\\n}\\n\\nfunction _getGelatoExecutorFees(uint256 _gas) view returns (uint256) {\\n    return mul(_gas, _getGelatoGasPrice());\\n}\\n\"\r\n    },\r\n    \"contracts/functions/gelato/FGelatoDebtBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport {add, sub, mul, wmul, wdiv} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    INSTA_POOL_RESOLVER,\\n    ROUTE_1_TOLERANCE\\n} from \\\"../../constants/CInstaDapp.sol\\\";\\nimport {\\n    GAS_COSTS_FOR_FULL_REFINANCE,\\n    PREMIUM,\\n    VAULT_CREATION_COST\\n} from \\\"../../constants/CDebtBridge.sol\\\";\\nimport {\\n    IInstaPoolResolver\\n} from \\\"../../interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\\\";\\n\\nfunction _wCalcCollateralToWithdraw(\\n    uint256 _wMinColRatioA,\\n    uint256 _wMinColRatioB,\\n    uint256 _wColPrice,\\n    uint256 _wPricedCol,\\n    uint256 _wDebtOnA\\n) pure returns (uint256) {\\n    return\\n        wdiv(\\n            sub(\\n                _wPricedCol,\\n                wdiv(\\n                    sub(\\n                        wmul(_wMinColRatioA, _wPricedCol),\\n                        wmul(_wMinColRatioA, wmul(_wMinColRatioB, _wDebtOnA))\\n                    ),\\n                    sub(_wMinColRatioA, _wMinColRatioB)\\n                )\\n            ),\\n            _wColPrice\\n        );\\n}\\n\\nfunction _wCalcDebtToRepay(\\n    uint256 _wMinColRatioA,\\n    uint256 _wMinColRatioB,\\n    uint256 _wPricedCol,\\n    uint256 _wDebtOnA\\n) pure returns (uint256) {\\n    return\\n        sub(\\n            _wDebtOnA,\\n            wmul(\\n                wdiv(1e18, _wMinColRatioA),\\n                wdiv(\\n                    sub(\\n                        wmul(_wMinColRatioA, _wPricedCol),\\n                        wmul(_wMinColRatioA, wmul(_wMinColRatioB, _wDebtOnA))\\n                    ),\\n                    sub(_wMinColRatioA, _wMinColRatioB)\\n                )\\n            )\\n        );\\n}\\n\\nfunction _getFlashLoanRoute(address _tokenA, uint256 _wTokenADebtToMove)\\n    view\\n    returns (uint256)\\n{\\n    IInstaPoolResolver.RouteData memory rData =\\n        IInstaPoolResolver(INSTA_POOL_RESOLVER).getTokenLimit(_tokenA);\\n\\n    if (rData.dydx > _wTokenADebtToMove) return 0;\\n    if (rData.maker > _wTokenADebtToMove) return 1;\\n    if (rData.compound > _wTokenADebtToMove) return 2;\\n    if (rData.aave > _wTokenADebtToMove) return 3;\\n    revert(\\\"FGelatoDebtBridge._getFlashLoanRoute: illiquid\\\");\\n}\\n\\nfunction _getGasCostMakerToMaker(bool _newVault, uint256 _route)\\n    pure\\n    returns (uint256)\\n{\\n    _checkRouteIndex(_route);\\n    return\\n        _getGasCostPremium(\\n            _newVault\\n                ? add(\\n                    GAS_COSTS_FOR_FULL_REFINANCE()[_route],\\n                    VAULT_CREATION_COST\\n                )\\n                : GAS_COSTS_FOR_FULL_REFINANCE()[_route]\\n        );\\n}\\n\\nfunction _getGasCostMakerToCompound(uint256 _route) pure returns (uint256) {\\n    _checkRouteIndex(_route);\\n    return _getGasCostPremium(GAS_COSTS_FOR_FULL_REFINANCE()[_route]);\\n}\\n\\nfunction _getGasCostPremium(uint256 _rawGasCost) pure returns (uint256) {\\n    return mul(_rawGasCost, add(100, PREMIUM)) / 100;\\n}\\n\\nfunction _getRealisedDebt(uint256 _debtToMove) pure returns (uint256) {\\n    return wmul(_debtToMove, ROUTE_1_TOLERANCE);\\n}\\n\\nfunction _checkRouteIndex(uint256 _route) pure {\\n    require(\\n        _route <= 4,\\n        \\\"FGelatoDebtBridge._getGasCostMakerToMaker: invalid route index\\\"\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InstaDapp/IInstaDapp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\n/// @notice Interface InstaDapp Index\\ninterface IndexInterface {\\n    function connectors(uint256 version) external view returns (address);\\n\\n    function list() external view returns (address);\\n}\\n\\n/// @notice Interface InstaDapp List\\ninterface ListInterface {\\n    function accountID(address _account) external view returns (uint64);\\n}\\n\\n/// @notice Interface InstaDapp InstaMemory\\ninterface MemoryInterface {\\n    function setUint(uint256 _id, uint256 _val) external;\\n\\n    function getUint(uint256 _id) external returns (uint256);\\n}\\n\\n/// @notice Interface InstaDapp Defi Smart Account wallet\\ninterface AccountInterface {\\n    function cast(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n\\n    function version() external view returns (uint256);\\n\\n    function isAuth(address user) external view returns (bool);\\n\\n    function shield() external view returns (bool);\\n}\\n\\ninterface ConnectorInterface {\\n    function connectorID() external view returns (uint256 _type, uint256 _id);\\n\\n    function name() external view returns (string memory);\\n}\\n\\ninterface InstaMapping {\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InstaDapp/connectors/IConnectGelatoExecutorPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {ConnectorInterface} from \\\"../IInstaDapp.sol\\\";\\n\\ninterface IConnectGelatoExecutorPayment is ConnectorInterface {\\n    function payExecutor(\\n        address _token,\\n        uint256 _amt,\\n        uint256 _getId,\\n        uint256 _setId\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InstaDapp/connectors/IConnectInstaPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface IConnectInstaPoolV2 {\\n    function flashBorrowAndCast(\\n        address token,\\n        uint256 amt,\\n        uint256 route,\\n        bytes memory data\\n    ) external payable;\\n\\n    function flashPayback(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InstaDapp/connectors/IConnectMaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface IConnectMaker {\\n    function payback(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function borrow(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function open(string calldata colType)\\n        external\\n        payable\\n        returns (uint256 vault);\\n\\n    function withdraw(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n\\n    function deposit(\\n        uint256 vault,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InstaDapp/resolvers/IInstaPoolResolver.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IInstaPoolResolver {\\n    struct RouteData {\\n        uint256 dydx;\\n        uint256 maker;\\n        uint256 compound;\\n        uint256 aave;\\n    }\\n\\n    function getTokenLimit(address token)\\n        external\\n        view\\n        returns (RouteData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dapps/Maker/IMcdManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface IMcdManager {\\n    function ilks(uint256) external view returns (bytes32);\\n\\n    function urns(uint256) external view returns (address);\\n\\n    function vat() external view returns (address);\\n\\n    function owns(uint256) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dapps/Maker/ITokenJoinInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface ITokenJoinInterface {\\n    function dec() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/dapps/Maker/IVat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface IVat {\\n    function ilks(bytes32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function dai(address) external view returns (uint256);\\n\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/gelato/IGelatoGasPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\ninterface IGelatoGasPriceOracle {\\n    function latestAnswer() external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GelatoBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/Convert.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.4;\\n\\nimport {mul as _mul} from \\\"./DSMath.sol\\\";\\n\\nfunction _stringToBytes32(string memory str) pure returns (bytes32 result) {\\n    require(bytes(str).length != 0, \\\"string-empty\\\");\\n    assembly {\\n        result := mload(add(str, 32))\\n    }\\n}\\n\\nfunction _convertTo18(uint256 _dec, uint256 _amt) pure returns (uint256 amt) {\\n    amt = _mul(_amt, 10**(18 - _dec));\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/DSMath.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.7.4;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"connectGelatoExecutorPayment\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OK\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultAId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultBId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_colToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_colType\",\"type\":\"string\"}],\"name\":\"getDataAndCastMakerToMaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dsa\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"enum DataFlow\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"termsOk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectGelatoDataFullMakerToMaker","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000003b0000000000000000000000005a6bc81908df5ec5dc4ad3bd59aeaba1b86fc126","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":""}]}