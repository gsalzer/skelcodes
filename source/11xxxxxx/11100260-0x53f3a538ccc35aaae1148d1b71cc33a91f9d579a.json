{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV2V3Interface.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\r\n{\r\n}\r\n\r\n// File: contracts/libs/chainlink/Owned.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title The Owned contract\r\n * @notice A contract with helpers for basic contract ownership.\r\n */\r\ncontract Owned {\r\n\r\n  address payable public owner;\r\n  address private pendingOwner;\r\n\r\n  event OwnershipTransferRequested(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n  event OwnershipTransferred(\r\n    address indexed from,\r\n    address indexed to\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an owner to begin transferring ownership to a new address,\r\n   * pending.\r\n   */\r\n  function transferOwnership(address _to)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    pendingOwner = _to;\r\n\r\n    emit OwnershipTransferRequested(owner, _to);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows an ownership transfer to be completed by the recipient.\r\n   */\r\n  function acceptOwnership()\r\n    external\r\n  {\r\n    require(msg.sender == pendingOwner, \"Must be proposed owner\");\r\n\r\n    address oldOwner = owner;\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n\r\n    emit OwnershipTransferred(oldOwner, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if called by anyone other than the contract owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only callable by owner\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/libs/chainlink/AggregatorProxy.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\n/**\r\n * @title A trusted proxy for updating where current answers are read from\r\n * @notice This contract provides a consistent address for the\r\n * CurrentAnwerInterface but delegates where it reads from to the owner, who is\r\n * trusted to update it.\r\n */\r\ncontract AggregatorProxy is AggregatorV2V3Interface, Owned {\r\n\r\n  struct Phase {\r\n    uint16 id;\r\n    AggregatorV2V3Interface aggregator;\r\n  }\r\n  Phase private currentPhase;\r\n  AggregatorV2V3Interface public proposedAggregator;\r\n  mapping(uint16 => AggregatorV2V3Interface) public phaseAggregators;\r\n\r\n  uint256 constant private PHASE_OFFSET = 64;\r\n  uint256 constant private PHASE_SIZE = 16;\r\n  uint256 constant private MAX_ID = 2**(PHASE_OFFSET+PHASE_SIZE) - 1;\r\n\r\n  constructor(address _aggregator) public Owned() {\r\n    setAggregator(_aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the current answer from aggregator delegated to.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestAnswer()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (int256 answer)\r\n  {\r\n    return currentPhase.aggregator.latestAnswer();\r\n  }\r\n\r\n  /**\r\n   * @notice Reads the last updated height from aggregator delegated to.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestTimestamp()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 updatedAt)\r\n  {\r\n    return currentPhase.aggregator.latestTimestamp();\r\n  }\r\n\r\n  /**\r\n   * @notice get past rounds answers\r\n   * @param _roundId the answer number to retrieve the answer for\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getAnswer(uint256 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (int256 answer)\r\n  {\r\n    if (_roundId > MAX_ID) return 0;\r\n\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\r\n    if (address(aggregator) == address(0)) return 0;\r\n\r\n    return aggregator.getAnswer(aggregatorRoundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get block timestamp when an answer was last updated\r\n   * @param _roundId the answer number to retrieve the updated timestamp for\r\n   *\r\n   * @dev #[deprecated] Use getRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended getRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function getTimestamp(uint256 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 updatedAt)\r\n  {\r\n    if (_roundId > MAX_ID) return 0;\r\n\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n    AggregatorV2V3Interface aggregator = phaseAggregators[phaseId];\r\n    if (address(aggregator) == address(0)) return 0;\r\n\r\n    return aggregator.getTimestamp(aggregatorRoundId);\r\n  }\r\n\r\n  /**\r\n   * @notice get the latest completed round where the answer was updated. This\r\n   * ID includes the proxy's phase, to make sure round IDs increase even when\r\n   * switching to a newly deployed aggregator.\r\n   *\r\n   * @dev #[deprecated] Use latestRoundData instead. This does not error if no\r\n   * answer has been reached, it will simply return 0. Either wait to point to\r\n   * an already answered Aggregator or use the recommended latestRoundData\r\n   * instead which includes better verification information.\r\n   */\r\n  function latestRound()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256 roundId)\r\n  {\r\n    Phase memory phase = currentPhase; // cache storage reads\r\n    return addPhase(phase.id, uint64(phase.aggregator.latestRound()));\r\n  }\r\n\r\n  /**\r\n   * @notice get data about a round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @param _roundId the requested round ID as presented through the proxy, this\r\n   * is made up of the aggregator's round ID with the phase ID encoded in the\r\n   * two highest order bytes\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with an phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function getRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    (uint16 phaseId, uint64 aggregatorRoundId) = parseIds(_roundId);\r\n\r\n    (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 ansIn\r\n    ) = phaseAggregators[phaseId].getRoundData(aggregatorRoundId);\r\n\r\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, phaseId);\r\n  }\r\n\r\n  /**\r\n   * @notice get data about the latest round. Consumers are encouraged to check\r\n   * that they're receiving fresh data by inspecting the updatedAt and\r\n   * answeredInRound return values.\r\n   * Note that different underlying implementations of AggregatorV3Interface\r\n   * have slightly different semantics for some of the return values. Consumers\r\n   * should determine what implementations they expect to receive\r\n   * data from and validate that they can properly handle return data from all\r\n   * of them.\r\n   * @return roundId is the round ID from the aggregator for which the data was\r\n   * retrieved combined with an phase to ensure that round IDs get larger as\r\n   * time moves forward.\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @dev Note that answer and updatedAt may change between queries.\r\n   */\r\n  function latestRoundData()\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    Phase memory current = currentPhase; // cache storage reads\r\n\r\n    (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 ansIn\r\n    ) = current.aggregator.latestRoundData();\r\n\r\n    return addPhaseIds(roundId, answer, startedAt, updatedAt, ansIn, current.id);\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @param _roundId the round ID to retrieve the round data for\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedGetRoundData(uint80 _roundId)\r\n    public\r\n    view\r\n    virtual\r\n    hasProposal()\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return proposedAggregator.getRoundData(_roundId);\r\n  }\r\n\r\n  /**\r\n   * @notice Used if an aggregator contract has been proposed.\r\n   * @return roundId is the round ID for which data was retrieved\r\n   * @return answer is the answer for the given round\r\n   * @return startedAt is the timestamp when the round was started.\r\n   * (Only some AggregatorV3Interface implementations return meaningful values)\r\n   * @return updatedAt is the timestamp when the round last was updated (i.e.\r\n   * answer was last computed)\r\n   * @return answeredInRound is the round ID of the round in which the answer\r\n   * was computed.\r\n  */\r\n  function proposedLatestRoundData()\r\n    public\r\n    view\r\n    virtual\r\n    hasProposal()\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    )\r\n  {\r\n    return proposedAggregator.latestRoundData();\r\n  }\r\n\r\n  /**\r\n   * @notice returns the current phase's aggregator address.\r\n   */\r\n  function aggregator()\r\n    external\r\n    view\r\n    returns (address)\r\n  {\r\n    return address(currentPhase.aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice returns the current phase's ID.\r\n   */\r\n  function phaseId()\r\n    external\r\n    view\r\n    returns (uint16)\r\n  {\r\n    return currentPhase.id;\r\n  }\r\n\r\n  /**\r\n   * @notice represents the number of decimals the aggregator responses represent.\r\n   */\r\n  function decimals()\r\n    external\r\n    view\r\n    override\r\n    returns (uint8)\r\n  {\r\n    return currentPhase.aggregator.decimals();\r\n  }\r\n\r\n  /**\r\n   * @notice the version number representing the type of aggregator the proxy\r\n   * points to.\r\n   */\r\n  function version()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return currentPhase.aggregator.version();\r\n  }\r\n\r\n  /**\r\n   * @notice returns the description of the aggregator the proxy points to.\r\n   */\r\n  function description()\r\n    external\r\n    view\r\n    override\r\n    returns (string memory)\r\n  {\r\n    return currentPhase.aggregator.description();\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to propose a new address for the aggregator\r\n   * @param _aggregator The new address for the aggregator contract\r\n   */\r\n  function proposeAggregator(address _aggregator)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    proposedAggregator = AggregatorV2V3Interface(_aggregator);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to confirm and change the address\r\n   * to the proposed aggregator\r\n   * @dev Reverts if the given address doesn't match what was previously\r\n   * proposed\r\n   * @param _aggregator The new address for the aggregator contract\r\n   */\r\n  function confirmAggregator(address _aggregator)\r\n    external\r\n    onlyOwner()\r\n  {\r\n    require(_aggregator == address(proposedAggregator), \"Invalid proposed aggregator\");\r\n    delete proposedAggregator;\r\n    setAggregator(_aggregator);\r\n  }\r\n\r\n\r\n  /*\r\n   * Internal\r\n   */\r\n\r\n  function setAggregator(address _aggregator)\r\n    internal\r\n  {\r\n    uint16 id = currentPhase.id + 1;\r\n    currentPhase = Phase(id, AggregatorV2V3Interface(_aggregator));\r\n    phaseAggregators[id] = AggregatorV2V3Interface(_aggregator);\r\n  }\r\n\r\n  function addPhase(\r\n    uint16 _phase,\r\n    uint64 _originalId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint80)\r\n  {\r\n    return uint80(uint256(_phase) << PHASE_OFFSET | _originalId);\r\n  }\r\n\r\n  function parseIds(\r\n    uint256 _roundId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint16, uint64)\r\n  {\r\n    uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\r\n    uint64 aggregatorRoundId = uint64(_roundId);\r\n\r\n    return (phaseId, aggregatorRoundId);\r\n  }\r\n\r\n  function addPhaseIds(\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound,\r\n      uint16 phaseId\r\n  )\r\n    internal\r\n    view\r\n    returns (uint80, int256, uint256, uint256, uint80)\r\n  {\r\n    return (\r\n      addPhase(phaseId, uint64(roundId)),\r\n      answer,\r\n      startedAt,\r\n      updatedAt,\r\n      addPhase(phaseId, uint64(answeredInRound))\r\n    );\r\n  }\r\n\r\n  /*\r\n   * Modifiers\r\n   */\r\n\r\n  modifier hasProposal() {\r\n    require(address(proposedAggregator) != address(0), \"No proposed aggregator present\");\r\n    _;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/oracleIterators/IOracleIterator.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\ninterface IOracleIterator {\r\n    /// @notice Proof of oracle iterator contract\r\n    /// @dev Verifies that contract is a oracle iterator contract\r\n    /// @return true if contract is a oracle iterator contract\r\n    function isOracleIterator() external pure returns(bool);\r\n\r\n    /// @notice Symbol of the oracle iterator\r\n    /// @dev Should be resolved through OracleIteratorRegistry contract\r\n    /// @return oracle iterator symbol\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Algorithm that, for the type of oracle used by the derivative,\r\n    //  finds the value closest to a given timestamp\r\n    /// @param _oracle iteratable oracle through\r\n    /// @param _timestamp a given timestamp\r\n    /// @param _roundHints specified rounds for a given timestamp\r\n    /// @return the value closest to a given timestamp\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) external view returns(int);\r\n}\r\n\r\n// File: contracts/oracleIterators/ChainlinkOracleIterator.sol\r\n\r\n// \"SPDX-License-Identifier: GNU General Public License v3.0\"\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract ChainlinkOracleIterator is IOracleIterator {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant private PHASE_OFFSET = 64;\r\n    int public constant NEGATIVE_INFINITY = type(int256).min;\r\n\r\n    function isOracleIterator() external override pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return \"ChainlinkIterator\";\r\n    }\r\n\r\n    function getUnderlingValue(address _oracle, uint _timestamp, uint[] memory _roundHints) public override view returns(int) {\r\n        require(_timestamp > 0, \"Zero timestamp\");\r\n        require(_oracle != address(0), \"Zero oracle\");\r\n        AggregatorV2V3Interface oracle = AggregatorV2V3Interface(_oracle);\r\n\r\n        uint80 latestRoundId = uint80(oracle.latestRound());\r\n\r\n        uint16 phaseId;\r\n        (phaseId,) = parseIds(latestRoundId);\r\n        require(_roundHints.length == phaseId, \"Must have hints for all phases\");\r\n\r\n        uint256 distance = type(uint256).max;\r\n        int256 answer = NEGATIVE_INFINITY;\r\n\r\n        for (uint256 phase = 1; phase <= phaseId; phase++) {\r\n            uint80 roundHint = uint80(_roundHints[phase - 1]);\r\n            require(roundHint > 0, \"Zero hint\");\r\n            requirePhaseFor(roundHint, phase);\r\n\r\n            int256 hintAnswer = oracle.getAnswer(roundHint);\r\n            uint256 hintTimestamp  = oracle.getTimestamp(roundHint);\r\n\r\n            if(hintTimestamp > 0 && hintTimestamp > _timestamp) {\r\n                uint256 timestampPrevious = 0;\r\n                if(checkBasedRoundIdIsMoreThanZero(phase, roundHint - 1)) {\r\n                    timestampPrevious = oracle.getTimestamp(roundHint - 1);\r\n                }\r\n                require(timestampPrevious == 0, \"Earlier round exists\");\r\n                continue;\r\n            }\r\n\r\n            uint256 timestampNext = 0;\r\n            if(checkBasedRoundIdIsSameOrLessThanLast(_oracle, phase, roundHint + 1)) {\r\n                timestampNext = oracle.getTimestamp(roundHint + 1);\r\n            }\r\n\r\n            if(hintTimestamp > 0 && hintTimestamp <= _timestamp) {\r\n                if(timestampNext > 0 && timestampNext <= _timestamp) {\r\n                    revert(\"Later round exists\");\r\n                }\r\n                if(timestampNext == 0 || (timestampNext > 0 && timestampNext > _timestamp)) {\r\n                    uint256 phaseDistance = _timestamp.sub(hintTimestamp);\r\n                    if(phaseDistance < distance) {\r\n                        answer = hintAnswer;\r\n                        distance = phaseDistance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return answer;\r\n    }\r\n\r\n    function checkBasedRoundIdIsMoreThanZero(uint256 _phase, uint80 _roundId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint16 basedPhaseId;\r\n        uint64 basedRoundId;\r\n        (basedPhaseId, basedRoundId) = parseIds(_roundId);\r\n        return (uint256(basedPhaseId) == _phase) && basedRoundId > 0;\r\n    }\r\n\r\n    function checkBasedRoundIdIsSameOrLessThanLast(address _oracle, uint256 _phase, uint80 _roundId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        uint16 basedPhaseId;\r\n        uint64 basedRoundId;\r\n        (basedPhaseId, basedRoundId) = parseIds(_roundId);\r\n        if(basedPhaseId != _phase) {\r\n            return false;\r\n        }\r\n\r\n        AggregatorProxy aggregatorProxy = AggregatorProxy(_oracle);\r\n        AggregatorV2V3Interface aggregator = aggregatorProxy.phaseAggregators(uint16(_phase));\r\n        require(address(aggregator) != address(0), \"Aggregator is empty\");\r\n\r\n        return basedRoundId <= uint80(aggregator.latestRound());\r\n    }\r\n\r\n    function requirePhaseFor(uint80 _roundHint, uint256 _phase)\r\n    internal\r\n    pure\r\n    {\r\n        uint256 currentPhaseId;\r\n        (currentPhaseId,) = parseIds(_roundHint);\r\n        require(currentPhaseId == _phase, \"Wrong hint phase id\");\r\n    }\r\n\r\n    function parseIds(\r\n        uint256 _roundId\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint16, uint64)\r\n    {\r\n        uint16 phaseId = uint16(_roundId >> PHASE_OFFSET);\r\n        uint64 aggregatorRoundId = uint64(_roundId);\r\n\r\n        return (phaseId, aggregatorRoundId);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"NEGATIVE_INFINITY\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_roundHints\",\"type\":\"uint256[]\"}],\"name\":\"getUnderlingValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOracleIterator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracleIterator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://09d31c842ad389965d246160eeaefa3d620a46c993dd11309cfcf448070b1996"}]}