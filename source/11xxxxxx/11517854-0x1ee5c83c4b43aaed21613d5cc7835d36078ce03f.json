{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.8\r\n# @title Deposit buffered ether to Lido\r\n# @license MIT\r\n# @author banteg\r\n\r\ninterface Keep3r:\r\n    def isKeeper(keeper: address) -> bool: nonpayable\r\n    def worked(keeper: address): nonpayable\r\n\r\n\r\ninterface Lido:\r\n    def isStopped() -> bool: view\r\n    def getBufferedEther() -> uint256: view\r\n    def depositBufferedEther(max_deposits: uint256): nonpayable\r\n\r\n\r\nkeeper: public(Keep3r)\r\nlido: public(Lido)\r\npaused_until: public(uint256)\r\nDEPOSIT_SIZE: constant(uint256) = 32 * 10 ** 18\r\nMIN_DEPOSITS: constant(uint256) = 8\r\nMAX_DEPOSITS: constant(uint256) = 32\r\n\r\n\r\n@external\r\ndef __init__():\r\n    self.keeper = Keep3r(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44)\r\n    self.lido = Lido(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84)\r\n\r\n\r\n@view\r\n@internal\r\ndef available_deposits() -> uint256:\r\n    if self.lido.isStopped():\r\n        return 0\r\n    if self.paused_until > block.timestamp:\r\n        return 0\r\n    return min(self.lido.getBufferedEther() / DEPOSIT_SIZE, MAX_DEPOSITS)\r\n\r\n\r\n@view\r\n@external\r\ndef workable() -> bool:\r\n    return self.available_deposits() >= MIN_DEPOSITS\r\n\r\n\r\n@external\r\ndef work():\r\n    assert self.keeper.isKeeper(msg.sender)  # dev: not keeper\r\n    deposits: uint256 = self.available_deposits()\r\n    assert deposits >= MIN_DEPOSITS  # dev: not workable\r\n    buffered: uint256 = self.lido.getBufferedEther()\r\n    self.lido.depositBufferedEther(deposits)\r\n    # pause for a day if there is a key shortage\r\n    deposited: uint256 = buffered - self.lido.getBufferedEther()\r\n    if deposited < deposits * DEPOSIT_SIZE:\r\n        self.paused_until = block.timestamp + 86400\r\n    self.keeper.worked(msg.sender)","ABI":"[{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"workable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":4117},{\"name\":\"work\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":50465},{\"name\":\"keeper\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1151},{\"name\":\"lido\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1181},{\"name\":\"paused_until\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1211}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.8","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}