{"status":"1","message":"OK","result":[{"SourceCode":"{\"lynclottoeth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n  /**\\r\\n   * LYNC Network\\r\\n   * https://lync.network\\r\\n   *\\r\\n   * Additional details for contract and wallet information:\\r\\n   * https://lync.network/tracking/\\r\\n   *\\r\\n   * The cryptocurrency network designed for passive token rewards for its community.\\r\\n   */\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\nimport \\\"./safemath.sol\\\";\\r\\n\\r\\ncontract LYNCLottoETH {\\r\\n\\r\\n    //Enable SafeMath\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address payable public owner;\\r\\n    address public contractAddress;\\r\\n    address payable public holdingAddress;\\r\\n    address public lastRoundWinner;\\r\\n    uint256 public playersMax;\\r\\n    uint256 public entryValue;\\r\\n    uint256 public thisRoundPot;\\r\\n    uint256 public winnerPercent;\\r\\n    uint256 public winnerPot;\\r\\n    uint256 public pumpPot;\\r\\n\\r\\n    //Events\\r\\n    event EnterConfirm(address _player, uint256 _entryFee);\\r\\n    event WinnerPayment(address _winner, uint256 _winnerPayment);\\r\\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\r\\n    event OwnershipRenounced(address indexed _previousOwner, address indexed _newOwner);\\r\\n\\r\\n\\t//User data\\r\\n\\tstruct Player {\\r\\n\\t\\tuint256 wins;\\r\\n\\t\\tuint256 plays;\\r\\n\\t}\\r\\n\\r\\n    //Mappings\\r\\n    mapping(address =\\u003e Player) players;\\r\\n\\r\\n    //All players array\\r\\n    address[] public allPlayers;\\r\\n\\r\\n    //Players this round array\\r\\n    address payable[] public playersThisRound;\\r\\n\\r\\n    //On deployment\\r\\n    constructor () {\\r\\n        owner = msg.sender;\\r\\n        contractAddress = address(this);\\r\\n    }\\r\\n\\r\\n    //MulDiv functions : source https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\r\\n    function mulDiv(uint x, uint y, uint z) public pure returns (uint) {\\r\\n          (uint l, uint h) = fullMul (x, y);\\r\\n          assert (h \\u003c z);\\r\\n          uint mm = mulmod(x, y, z);\\r\\n          if (mm \\u003e l) h -= 1;\\r\\n          l -= mm;\\r\\n          uint pow2 = z \\u0026 -z;\\r\\n          z /= pow2;\\r\\n          l /= pow2;\\r\\n          l += h * ((-pow2) / pow2 + 1);\\r\\n          uint r = 1;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          r *= 2 - z * r;\\r\\n          return l * r;\\r\\n    }\\r\\n\\r\\n    //Required for MulDiv\\r\\n    function fullMul(uint x, uint y) private pure returns (uint l, uint h) {\\r\\n          uint mm = mulmod(x, y, uint (-1));\\r\\n          l = x * y;\\r\\n          h = mm - l;\\r\\n          if (mm \\u003c l) h -= 1;\\r\\n    }\\r\\n\\r\\n    //Return total number of players this round\\r\\n    function totalPlayersThisRound() public view returns(uint256) {\\r\\n        return playersThisRound.length;\\r\\n    }\\r\\n\\r\\n    //Return all players\\r\\n    function exportPlayerList() public view returns(address[] memory) {\\r\\n        return allPlayers;\\r\\n    }\\r\\n\\r\\n    //Return player data\\r\\n    function exportPlayerData(address _playersList) public view returns(uint256, uint256) {\\r\\n        return(players[_playersList].wins, players[_playersList].plays);\\r\\n    }\\r\\n\\r\\n    //Enter the lotto\\r\\n    function enterLotto() public payable {\\r\\n        require(msg.value \\u003e= entryValue, \\\"Minimum entry value was not met\\\");\\r\\n\\r\\n        if (playersThisRound.length \\u003c playersMax - 1) {\\r\\n\\r\\n            //Check if this is a first play\\r\\n            if (players[msg.sender].plays == 0) {\\r\\n                allPlayers.push(msg.sender);\\r\\n            }\\r\\n\\r\\n            //Add player to the round\\r\\n            playersThisRound.push(msg.sender);\\r\\n            thisRoundPot = thisRoundPot.add(entryValue);\\r\\n            players[msg.sender].plays++;\\r\\n\\r\\n        } else {\\r\\n\\r\\n            //Check if this is a first play\\r\\n            if (players[msg.sender].plays == 0) {\\r\\n                allPlayers.push(msg.sender);\\r\\n            }\\r\\n\\r\\n            //Add player to the round\\r\\n            playersThisRound.push(msg.sender);\\r\\n            thisRoundPot = thisRoundPot.add(entryValue);\\r\\n            players[msg.sender].plays++;\\r\\n\\r\\n            //Calculate pots and pick a winner\\r\\n            uint256 _winnerPotShare = mulDiv(thisRoundPot, winnerPercent, 100);\\r\\n            winnerPot = _winnerPotShare;\\r\\n            thisRoundPot = thisRoundPot.sub(_winnerPotShare);\\r\\n            pumpPot = pumpPot.add(thisRoundPot);\\r\\n            pickWinner();\\r\\n        }\\r\\n\\r\\n        emit EnterConfirm(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    //Pick a winner and reset the round\\r\\n    function pickWinner() internal {\\r\\n        uint256 winner = random() % playersThisRound.length;\\r\\n        address _winnerAddress = playersThisRound[winner];\\r\\n        players[_winnerAddress].wins++;\\r\\n        lastRoundWinner = _winnerAddress;\\r\\n        playersThisRound[winner].transfer(winnerPot);\\r\\n        playersThisRound = new address payable[](0);\\r\\n        emit WinnerPayment(_winnerAddress, winnerPot);\\r\\n\\r\\n        //Reset Pots\\r\\n        winnerPot = 0;\\r\\n        thisRoundPot = 0;\\r\\n    }\\r\\n\\r\\n    //Random generator\\r\\n    function random() internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));\\r\\n    }\\r\\n\\r\\n    //Update minimum entry value (in wei)\\r\\n    function minimumEntryUpdate(uint256 _entryValue) public onlyOwner {\\r\\n        entryValue = _entryValue;\\r\\n    }\\r\\n\\r\\n    //Update number of players\\r\\n    function playersMaxUpdate(uint256 _playersMax) public onlyOwner {\\r\\n        playersMax = _playersMax;\\r\\n    }\\r\\n\\r\\n    //Update winner percentage\\r\\n    function winnerPercenteUpdate(uint256 _winnerPercentage) public onlyOwner {\\r\\n        winnerPercent = _winnerPercentage;\\r\\n    }\\r\\n\\r\\n    //Update the holding account address\\r\\n    function holdingAddressUpdate(address payable _holdingAddress) public onlyOwner {\\r\\n        holdingAddress = _holdingAddress;\\r\\n    }\\r\\n\\r\\n    //Transfer pump pot balance\\r\\n    function transferPumpPotBalance() public onlyOwner {\\r\\n        holdingAddress.transfer(pumpPot);\\r\\n        pumpPot = 0;\\r\\n    }\\r\\n\\r\\n    //Transfer ownership to new owner\\r\\n    function transferOwnership(address payable _newOwner) public onlyOwner {\\r\\n        require(_newOwner != address(0), \\\"New owner cannot be a zero address\\\");\\r\\n        emit OwnershipTransferred(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    //Remove owner from the contract\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipRenounced(owner, address(0));\\r\\n        owner = address(0);\\r\\n    }\\r\\n\\r\\n    //Close the contract and transfer any balances to the owner\\r\\n    function closeContract() public onlyOwner {\\r\\n        selfdestruct(owner);\\r\\n    }\\r\\n\\r\\n    //Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Only current owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"},\"safemath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"}],\"name\":\"EnterConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_winnerPayment\",\"type\":\"uint256\"}],\"name\":\"WinnerPayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLotto\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playersList\",\"type\":\"address\"}],\"name\":\"exportPlayerData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exportPlayerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_holdingAddress\",\"type\":\"address\"}],\"name\":\"holdingAddressUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryValue\",\"type\":\"uint256\"}],\"name\":\"minimumEntryUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playersMax\",\"type\":\"uint256\"}],\"name\":\"playersMaxUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersThisRound\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pumpPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisRoundPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlayersThisRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPumpPotBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerPercentage\",\"type\":\"uint256\"}],\"name\":\"winnerPercenteUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LYNCLottoETH","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e99636025438333ac8385794eda2db8cb7b418f2b80019ac12f6a253ae961623"}]}