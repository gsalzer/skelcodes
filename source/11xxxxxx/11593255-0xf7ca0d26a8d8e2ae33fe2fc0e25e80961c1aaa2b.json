{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"AddressBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { UtilitiesBase } from \\\"./UtilitiesBase.sol\\\";\\n\\nabstract contract AddressBase is UtilitiesBase {\\n    address internal _addressRegistry;\\n\\n    function _setAddressRegistry(address _address)\\n        internal\\n    {\\n        _addressRegistry = _address;\\n    }\\n}\"},\"AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { AddressStorage } from \\\"./AddressStorage.sol\\\";\\n\\ncontract AddressRegistry is IAddressRegistry, Ownable, AddressStorage {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event FrostUpdated(address indexed newAddress);\\n    event FrostPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n\\n    bytes32 private constant AVALANCHE_KEY = \\\"AVALANCHE\\\";\\n    bytes32 private constant LGE_KEY = \\\"LGE\\\";\\n    bytes32 private constant LODGE_KEY = \\\"LODGE\\\";\\n    bytes32 private constant LOYALTY_KEY = \\\"LOYALTY\\\";\\n    bytes32 private constant FROST_KEY = \\\"FROST\\\";\\n    bytes32 private constant FROST_POOL_KEY = \\\"FROST_POOL\\\";\\n    bytes32 private constant SLOPES_KEY = \\\"SLOPES\\\";\\n    bytes32 private constant SNOW_PATROL_KEY = \\\"SNOW_PATROL\\\";\\n    bytes32 private constant TREASURY_KEY = \\\"TREASURY\\\";\\n    bytes32 private constant UNISWAP_ROUTER_KEY = \\\"UNISWAP_ROUTER\\\";\\n    bytes32 private constant WETH_KEY = \\\"WETH\\\";\\n    bytes32 private constant VAULT_KEY = \\\"VAULT\\\";\\n\\n    function getAvalanche() public override view returns (address) {\\n        return getAddress(AVALANCHE_KEY);\\n    }\\n\\n    function setAvalanche(address _address) public override onlyOwner {\\n        _setAddress(AVALANCHE_KEY, _address);\\n        emit AvalancheUpdated(_address);\\n    }\\n\\n    function getLGE() public override view returns (address) {\\n        return getAddress(LGE_KEY);\\n    }\\n\\n    function setLGE(address _address) public override onlyOwner {\\n        _setAddress(LGE_KEY, _address);\\n        emit LGEUpdated(_address);\\n    }\\n\\n    function getLodge() public override view returns (address) {\\n        return getAddress(LODGE_KEY);\\n    }\\n\\n    function setLodge(address _address) public override onlyOwner {\\n        _setAddress(LODGE_KEY, _address);\\n        emit LodgeUpdated(_address);\\n    }\\n\\n    function getLoyalty() public override view returns (address) {\\n        return getAddress(LOYALTY_KEY);\\n    }\\n\\n    function setLoyalty(address _address) public override onlyOwner {\\n        _setAddress(LOYALTY_KEY, _address);\\n        emit LoyaltyUpdated(_address);\\n    }\\n\\n    function getFrost() public override view returns (address) {\\n        return getAddress(FROST_KEY);\\n    }\\n\\n    function setFrost(address _address) public override onlyOwner {\\n        _setAddress(FROST_KEY, _address);\\n        emit FrostUpdated(_address);\\n    }\\n\\n    function getFrostPool() public override view returns (address) {\\n        return getAddress(FROST_POOL_KEY);\\n    }\\n\\n    function setFrostPool(address _address) public override onlyOwner {\\n        _setAddress(FROST_POOL_KEY, _address);\\n        emit FrostPoolUpdated(_address);\\n    }\\n\\n    function getSlopes() public override view returns (address) {\\n        return getAddress(SLOPES_KEY);\\n    }\\n\\n    function setSlopes(address _address) public override onlyOwner {\\n        _setAddress(SLOPES_KEY, _address);\\n        emit SlopesUpdated(_address);\\n    }\\n\\n    function getSnowPatrol() public override view returns (address) {\\n        return getAddress(SNOW_PATROL_KEY);\\n    }\\n\\n    function setSnowPatrol(address _address) public override onlyOwner {\\n        _setAddress(SNOW_PATROL_KEY, _address);\\n        emit SnowPatrolUpdated(_address);\\n    }\\n\\n    function getTreasury() public override view returns (address payable) {\\n        address payable _address = address(uint160(getAddress(TREASURY_KEY)));\\n        return _address;\\n    }\\n\\n    function setTreasury(address _address) public override onlyOwner {\\n        _setAddress(TREASURY_KEY, _address);\\n        emit TreasuryUpdated(_address);\\n    }\\n\\n    function getUniswapRouter() public override view returns (address) {\\n        return getAddress(UNISWAP_ROUTER_KEY);\\n    }\\n\\n    function setUniswapRouter(address _address) public override onlyOwner {\\n        _setAddress(UNISWAP_ROUTER_KEY, _address);\\n        emit UniswapRouterUpdated(_address);\\n    }\\n\\n    function getVault() public override view returns (address) {\\n        return getAddress(VAULT_KEY);\\n    }\\n\\n    function setVault(address _address) public override onlyOwner {\\n        _setAddress(VAULT_KEY, _address);\\n        emit VaultUpdated(_address);\\n    }\\n\\n    function getWeth() public override view returns (address) {\\n        return getAddress(WETH_KEY);\\n    }\\n\\n    function setWeth(address _address) public override onlyOwner {\\n        _setAddress(WETH_KEY, _address);\\n        emit WethUpdated(_address);\\n    }\\n}\"},\"AddressStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ncontract AddressStorage {\\n    mapping(bytes32 =\\u003e address) private addresses;\\n\\n    function getAddress(bytes32 _key) public view returns (address) {\\n        return addresses[_key];\\n    }\\n\\n    function _setAddress(bytes32 _key, address _value) internal {\\n        addresses[_key] = _value;\\n    }\\n}\"},\"AltitudeBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { ISnowPatrol } from \\\"./ISnowPatrol.sol\\\";\\nimport { AddressBase } from \\\"./AddressBase.sol\\\";\\n\\nabstract contract AltitudeBase is AddressBase {\\n    modifier OnlyLGE {\\n        require(\\n            _msgSender() == lgeAddress(), \\n            \\\"Only the LGE contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyLoyalty {\\n        require(\\n            _msgSender() == loyaltyAddress(), \\n            \\\"Only the Loyalty contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyFROST {\\n        require(\\n            _msgSender() == frostAddress(),\\n            \\\"Only FROST Contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlySlopes {\\n        require(\\n            _msgSender() == slopesAddress(), \\n            \\\"Only the Slopes contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function avalancheAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getAvalanche();\\n    }\\n\\n    function lgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLGE();\\n    }\\n\\n    function lodgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLodge();\\n    }\\n\\n    function loyaltyAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLoyalty();\\n    }\\n\\n    function frostAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getFrost();\\n    }\\n\\n    function frostPoolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getFrostPool();\\n    }\\n\\n    function slopesAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSlopes();\\n    }\\n\\n    function snowPatrolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSnowPatrol();\\n    }\\n\\n    function treasuryAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getTreasury();\\n    }\\n\\n    function uniswapRouterAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getUniswapRouter();\\n    }\\n\\n    function vaultAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getVault();\\n    }\\n\\n    function wethAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getWeth();\\n    }\\n}\"},\"Avalanche.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\u0027./IERC20.sol\\u0027;\\nimport { AvalancheBase } from \\\"./AvalancheBase.sol\\\";\\nimport { IAvalanche } from \\\"./IAvalanche.sol\\\";\\nimport { IFROST } from \\\"./IFROST.sol\\\";\\nimport { ILoyalty } from \\\"./ILoyalty.sol\\\";\\nimport { ISlopes } from \\\"./ISlopes.sol\\\";\\n\\ncontract Avalanche is IAvalanche, AvalancheBase {\\n    event Activated(address indexed user);\\n    event Distribution(address indexed user, uint256 totalFrostRewards, uint256 payoutPerDay);\\n    event Claim(address indexed user, uint256 frostAmount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event FrostRewardAdded(address indexed user, uint256 frostReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    uint256 public constant PAYOUT_INTERVAL = 24 hours; // How often the payouts occur\\n    uint256 public constant TOTAL_PAYOUTS = 20; // How many payouts per distribution cycle\\n    \\n    uint256 public nextEpochFrostReward; // accumulated frost for next distribution cycle\\n    uint256 public epochFrostReward; // current epoch rewards\\n    uint256 public epochFrostRewardPerDay; // 5% per day, 20 days\\n    uint256 public unstakingFee; // The unstaking fee that is used to increase locked liquidity and reward Avalanche stakers (1 = 0.1%). Defaults to 10%\\n    uint256 public buybackAmount; // The amount of FROST-ETH LP tokens kept by the unstaking fee that will be converted to FROST and distributed to stakers (1 = 0.1%). Defaults to 50%\\n\\n    bool public override active; // Becomes true once the \\u0027activate\\u0027 function called\\n\\n    uint256 public startTime; // When the first payout can be processed (timestamp). It will be 24 hours after the Avalanche contract is activated\\n    uint256 public lastPayout; // When the last payout was processed (timestamp)\\n    uint256 public lastReward; // timestamp when last frost reward was minted\\n    uint256 public totalPendingFrost; // The total amount of pending FROST available for stakers to claim\\n    uint256 public accFrostPerShare; // Accumulated FROST per share, times 1e12.\\n    uint256 public totalStaked; // The total amount of FROST-ETH LP tokens staked in the contract\\n    uint256 public totalShares; // The total amount of pool shares\\n    uint256 public weight; // pool weight \\n\\n    modifier AvalancheActive {\\n        require(active, \\\"Avalanche is not active\\\");\\n        _;\\n    }\\n\\n    modifier SlopesActive {\\n        require(ISlopes(slopesAddress()).active(), \\\"Slopes are not active\\\");\\n        _;\\n    }\\n\\n    constructor(address addressRegistry) \\n        public \\n        AvalancheBase(addressRegistry)\\n    {\\n        unstakingFee = 100;\\n        buybackAmount = 500;\\n        weight = 5;\\n    }\\n\\n    // activate the avalanche distribution phase\\n    //  signified avalanche is open on first call and calcs\\n    //  all necessary rewards vars\\n    function activate() \\n        external\\n        override\\n        OnlyFROST\\n    {\\n        if (!active) {\\n            active = true;\\n        }\\n\\n        // The first payout can be processed 24 hours after activation\\n        startTime = block.timestamp + getDistributionPayoutInterval(); \\n        lastPayout = startTime;\\n        epochFrostReward = nextEpochFrostReward;\\n        epochFrostRewardPerDay = epochFrostReward.div(getTotalDistributionPayouts());\\n        nextEpochFrostReward = 0;\\n    }\\n\\n    // The _transfer function in the FROST contract calls this to let the Avalanche contract know that it received the specified amount of FROST to be distributed \\n    function addFrostReward(address _from, uint256 _amount) \\n        external\\n        override\\n        // NonZeroAmount(_amount)\\n        SlopesActive\\n        OnlyFROST\\n    {\\n        // if max supply is hit, distribute directly to pool\\n        // else always add reward to next epoch rewards.\\n        if (IFROST(frostAddress()).maxSupplyHit()) {\\n            totalPendingFrost = totalPendingFrost.add(_amount);\\n            accFrostPerShare = accFrostPerShare.add(_amount.mul(1e12).div(totalShares));\\n        } else {\\n            nextEpochFrostReward = nextEpochFrostReward.add(_amount);\\n        }\\n\\n        emit FrostRewardAdded(_from, _amount);\\n    }\\n\\n    receive() external payable {\\n        addEthReward();\\n    }\\n\\n    // Allows external sources to add ETH to the contract which is used to buy and then distribute FROST to stakers\\n    function addEthReward() \\n        public \\n        payable\\n        SlopesActive\\n    {\\n        uint256 ethBalance = address(this).balance;\\n        require(ethBalance \\u003e 0, \\\"Must have eth to swap\\\");\\n        _swapExactETHForTokens(address(this).balance, frostAddress());\\n\\n        // The _transfer function in the FROST contract calls the Avalanche contract\\u0027s updateOwdrReward function \\n        // so we don\\u0027t need to update the balances after buying the PWRD token\\n        emit EthRewardAdded(msg.sender, msg.value);\\n    }\\n\\n    function _updatePool() \\n        internal \\n        AvalancheActive\\n    {\\n        if (IFROST(frostAddress()).accumulating()) {\\n            _processAccumulationPayouts();\\n        } else {\\n            _processDistributionPayouts();\\n        }\\n    }\\n\\n    // handles updating the pool during accumulation phases\\n    function _processAccumulationPayouts() internal {\\n        if (block.timestamp \\u003c= lastReward) {\\n            return;\\n        }\\n\\n        if (totalStaked == 0) {\\n            lastReward = block.timestamp;\\n            return;\\n        }\\n\\n        // Calculate the current FROST rewards for a specific pool\\n        //  using fixed APR formula and Uniswap price\\n        uint256 tokenPrice = _getLpTokenPrice(frostPoolAddress());\\n        uint256 frostReward = _calculatePendingRewards(\\n            lastReward,\\n            totalShares,\\n            tokenPrice,\\n            weight\\n        );\\n\\n        // if we hit the max supply here, ensure no overflow \\n        //  epoch will be incremented from the token\\n        address frostAddress = frostAddress();\\n        uint256 frostTotalSupply = IERC20(frostAddress).totalSupply();\\n        if (frostTotalSupply.add(frostReward) \\u003e= IFROST(frostAddress).currentMaxSupply()) {\\n            frostReward = IFROST(frostAddress).currentMaxSupply().sub(frostTotalSupply);\\n        }\\n\\n        if (frostReward \\u003e 0) {\\n            IFROST(frostAddress).mint(address(this), frostReward);\\n            accFrostPerShare = accFrostPerShare.add(frostReward.mul(1e12).div(totalShares));\\n            lastReward = block.timestamp;\\n        }\\n    }\\n\\n    // Handles paying out the fixed distribution payouts over 20 days\\n    // rewards directly added to accFrostPerShare at max supply hit, becomes a direct calculation\\n    function _processDistributionPayouts() internal {\\n        if (!active || block.timestamp \\u003c startTime \\n            || block.timestamp \\u003c= lastReward\\n            || IFROST(frostAddress()).maxSupplyHit() \\n            || epochFrostReward == 0 || totalStaked == 0) \\n        {\\n            return;\\n        }\\n\\n        // How many days since last payout?\\n        uint256 daysSinceLastPayout = (block.timestamp - lastPayout) / getDistributionPayoutInterval();\\n\\n        // If less than 1, don\\u0027t do anything\\n        if (daysSinceLastPayout == 0) {\\n            return;\\n        }\\n\\n        // Work out how many payouts have been missed\\n        uint256 payoutNumber = payoutNumber();\\n        uint256 previousPayoutNumber = payoutNumber - daysSinceLastPayout;\\n\\n        // Calculate how much additional reward we have to hand out\\n        uint256 frostReward = rewardAtPayout(payoutNumber) - rewardAtPayout(previousPayoutNumber);\\n        if (frostReward \\u003e epochFrostReward) {\\n            frostReward = epochFrostReward;\\n        }\\n        epochFrostReward = epochFrostReward.sub(frostReward);\\n\\n        // Payout the frostReward to the stakers\\n        totalPendingFrost = totalPendingFrost.add(frostReward);\\n        accFrostPerShare = accFrostPerShare.add(frostReward.mul(1e12).div(totalShares));\\n\\n        // Update lastPayout time\\n        lastPayout += (daysSinceLastPayout * getDistributionPayoutInterval());\\n        lastReward = block.timestamp;\\n\\n        if (payoutNumber \\u003e= getTotalDistributionPayouts()) {\\n            IFROST(frostAddress()).updateEpoch(IFROST(frostAddress()).currentEpoch() + 1, 0);\\n        }\\n    }\\n\\n    // Claim earned FROST\\n    function claim()\\n        external\\n        override\\n    {        \\n        _updatePool();\\n        _claim(msg.sender);\\n    }\\n\\n    function claimFor(address _user)\\n        external\\n        override\\n        OnlyLoyalty\\n    {\\n        _updatePool();\\n        _claim(_user);\\n    }\\n\\n    function _claim(address _user)\\n        internal\\n        AvalancheActive\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.staked \\u003e 0) {\\n            uint256 pendingFrostReward = user.shares.mul(accFrostPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pendingFrostReward \\u003e 0) {\\n                totalPendingFrost = totalPendingFrost.sub(pendingFrostReward);\\n                user.claimed += pendingFrostReward;\\n                user.rewardDebt = user.shares.mul(accFrostPerShare).div(1e12);\\n\\n                // update user/pool shares\\n                uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, user.staked);\\n                if (shares \\u003e user.shares) {\\n                    totalShares = totalShares.add(shares.sub(user.shares));\\n                } else if (shares \\u003c user.shares) {\\n                    totalShares = totalShares.sub(user.shares.sub(shares));\\n                }\\n                user.shares = shares;\\n\\n                _safeTokenTransfer(\\n                    frostAddress(),\\n                    _user,\\n                    pendingFrostReward\\n                );\\n\\n                emit Claim(_user, pendingFrostReward);\\n            }\\n        }\\n    }\\n\\n     // Stake FROST-ETH LP tokens\\n    function deposit(uint256 _amount) \\n        external\\n        override\\n    {\\n        _deposit(msg.sender, msg.sender, _amount);\\n    }\\n\\n    // stake for another user, used to migrate to this pool\\n    function depositFor(address _from, address _user, uint256 _amount)\\n        external\\n        override\\n        OnlySlopes\\n    {\\n        _deposit(_from, _user, _amount);\\n    }\\n\\n    // Stake FROST-ETH LP tokens for address\\n    function _deposit(address _from, address _user, uint256 _amount) \\n        internal \\n        AvalancheActive\\n        NonZeroAmount(_amount)\\n    {\\n        IERC20(frostPoolAddress()).safeTransferFrom(_from, address(this), _amount);\\n\\n        _updatePool();\\n\\n        _claim(_user);\\n\\n\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, _amount);\\n        totalShares = totalShares.add(shares);\\n        user.shares = user.shares.add(shares);\\n\\n        totalStaked = totalStaked.add(_amount);\\n        user.staked = user.staked.add(_amount);\\n        user.rewardDebt = user.shares.mul(accFrostPerShare).div(1e12);\\n\\n        emit Deposit(_user, _amount);\\n    }\\n\\n    // Unstake and withdraw FROST-ETH LP tokens and any pending FROST rewards. \\n    // There is a 10% unstaking fee, meaning the user will only receive 90% of their LP tokens back.\\n    \\n    // For the LP tokens kept by the unstaking fee, a % will get locked forever in the FROST contract, and the rest will get converted to FROST and distributed to stakers.\\n    //TODO -\\u003e change ratio to 75% convertion to rewards\\n    function withdraw(uint256 _amount)\\n        external\\n        override\\n    {\\n        _withdraw(_msgSender(), _amount);\\n    }\\n\\n    function _withdraw(address _user, uint256 _amount) \\n        internal\\n        AvalancheActive\\n        NonZeroAmount(_amount)\\n        HasStakedBalance(_user)\\n        HasWithdrawableBalance(_user, _amount)\\n    {\\n        _updatePool();\\n\\n        UserInfo storage user = userInfo[_user];\\n        \\n        uint256 unstakingFeeAmount = _amount.mul(unstakingFee).div(1000);\\n        uint256 remainingUserAmount = _amount.sub(unstakingFeeAmount);\\n\\n        // Some of the LP tokens kept by the unstaking fee will be locked forever in the FROST contract, \\n        // the rest  will be converted to FROST and distributed to stakers\\n        uint256 lpTokensToConvertToFrost = unstakingFeeAmount.mul(buybackAmount).div(1000);\\n        uint256 lpTokensToLock = unstakingFeeAmount.sub(lpTokensToConvertToFrost);\\n\\n        // Remove the liquidity from the Uniswap FROST-ETH pool and buy FROST with the ETH received\\n        // The _transfer function in the FROST.sol contract automatically calls avalanche.addFrostRewards()\\n        if (lpTokensToConvertToFrost \\u003e 0) {\\n            _removeLiquidityETH(\\n                lpTokensToConvertToFrost,\\n                frostPoolAddress(),\\n                frostAddress()\\n            );\\n            addEthReward();\\n        }\\n\\n        // Permanently lock the LP tokens in the FROST contract\\n        if (lpTokensToLock \\u003e 0) {\\n            IERC20(frostPoolAddress()).safeTransfer(vaultAddress(), lpTokensToLock);\\n        }\\n\\n        // Claim any pending FROST\\n        _claim(_user);\\n\\n        uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, _amount);\\n        totalShares = totalShares.sub(shares);\\n        user.shares = user.shares.sub(shares);\\n\\n        totalStaked = totalStaked.sub(_amount);\\n        user.staked = user.staked.sub(_amount);\\n        user.rewardDebt = user.shares.mul(accFrostPerShare).div(1e12); // update reward debt after balance change\\n\\n        IERC20(frostPoolAddress()).safeTransfer(_user, remainingUserAmount);\\n        emit Withdraw(_user, remainingUserAmount);\\n    }\\n\\n    function payoutNumber() \\n        public\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (block.timestamp \\u003c startTime) {\\n            return 0;\\n        }\\n\\n        return (block.timestamp - startTime).div(getDistributionPayoutInterval());\\n    }\\n\\n    function timeUntilNextPayout()\\n        external\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (epochFrostReward == 0) {\\n            return 0;\\n        } else {\\n            uint256 payout = payoutNumber();\\n            uint256 nextPayout = startTime.add((payout + 1).mul(getDistributionPayoutInterval()));\\n            return nextPayout - block.timestamp;\\n        }\\n    }\\n\\n    function rewardAtPayout(uint256 _payoutNumber) \\n        public\\n        override\\n        view \\n        returns (uint256) \\n    {\\n        if (_payoutNumber == 0) {\\n            return 0;\\n        } else {\\n            return epochFrostRewardPerDay * _payoutNumber;\\n        }\\n    }\\n\\n    function getTotalDistributionPayouts() public virtual pure returns (uint256) {\\n        return TOTAL_PAYOUTS;\\n    }\\n\\n    function getDistributionPayoutInterval() public virtual pure returns (uint256) {\\n        return PAYOUT_INTERVAL;\\n    }\\n\\n    function updatePool()\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _updatePool();\\n    }\\n\\n    // Sets the unstaking fee. Can\\u0027t be higher than 50%.\\n    // _convertToFrostAmount is the % of the LP tokens from the unstaking fee that will be converted to FROST and distributed to stakers.\\n    // unstakingFee - unstakingFeeConvertToFrostAmount = The % of the LP tokens from the unstaking fee that will be permanently locked in the FROST contract\\n    function setUnstakingFee(uint256 _unstakingFee, uint256 _buybackAmount) \\n        external\\n        //override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        require(_unstakingFee \\u003c= 500, \\\"over 50%\\\");\\n        require(_buybackAmount \\u003c= 1000, \\\"bad amount\\\");\\n        unstakingFee = _unstakingFee;\\n        buybackAmount = _buybackAmount;\\n    }\\n\\n    // Function to recover ERC20 tokens accidentally sent to the contract.\\n    // FROST and FROST-ETH LP tokens (the only 2 ERC2O\\u0027s that should be in this contract) can\\u0027t be withdrawn this way.\\n    function recoverERC20(address _tokenAddress) \\n        external\\n        //override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        require(_tokenAddress != frostAddress() \\u0026\\u0026 _tokenAddress != frostPoolAddress());\\n        IERC20 token = IERC20(_tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, tokenBalance);\\n    }\\n\\n     function getAvalancheStats(address _user) \\n        external \\n        view \\n        returns (bool _active, bool _accumulating, uint256[20] memory _stats)\\n    {\\n        _active = active;\\n        _accumulating = IFROST(frostAddress()).accumulating();\\n        \\n        UserInfo storage user = userInfo[_user];\\n\\n        _stats[0] = weight * IFROST(frostAddress()).currentBaseRate();\\n        _stats[1] = lastReward;\\n        _stats[2] = totalStaked;\\n        _stats[3] = totalShares;\\n        _stats[4] = accFrostPerShare;\\n        _stats[5] = _getTokenPrice(frostAddress(), frostPoolAddress());\\n        _stats[6] = _getLpTokenPrice(frostPoolAddress());\\n\\n        _stats[7] = nextEpochFrostReward;\\n        _stats[8] = epochFrostReward;\\n        _stats[9] = epochFrostRewardPerDay;\\n        _stats[10] = startTime;\\n        _stats[11] = lastPayout; \\n        _stats[12] = payoutNumber();\\n        _stats[13] = unstakingFee;\\n\\n        _stats[14] = IERC20(frostPoolAddress()).balanceOf(_user);\\n        _stats[15] = IERC20(frostPoolAddress()).allowance(_user, address(this));\\n        _stats[16] = user.staked;\\n        _stats[17] = user.shares;\\n        _stats[18] = user.shares.mul(accFrostPerShare).div(1e12).sub(user.rewardDebt); // pending rewards\\n        _stats[19] = user.claimed;\\n    }\\n}\"},\"AvalancheBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { LiquidityPoolBase } from \\\"./LiquidityPoolBase.sol\\\";\\n\\nimport { IERC20 } from \\u0027./IERC20.sol\\u0027;\\nimport { SafeERC20 } from \\u0027./SafeERC20.sol\\u0027;\\nimport { SafeMath } from \\u0027./SafeMath.sol\\u0027;\\n\\nabstract contract AvalancheBase is LiquidityPoolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address addressRegistry) internal {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e= 0.4.22 \\u003c0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\"},\"ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 =\\u003e mapping(address =\\u003e uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027balanceOf(address,uint256)\\u0027)) == 0x00fdd58e\\n     *     bytes4(keccak256(\\u0027balanceOfBatch(address[],uint256[])\\u0027)) == 0x4e1273f4\\n     *     bytes4(keccak256(\\u0027setApprovalForAll(address,bool)\\u0027)) == 0xa22cb465\\n     *     bytes4(keccak256(\\u0027isApprovedForAll(address,address)\\u0027)) == 0xe985e9c5\\n     *     bytes4(keccak256(\\u0027safeTransferFrom(address,address,uint256,uint256,bytes)\\u0027)) == 0xf242432a\\n     *     bytes4(keccak256(\\u0027safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\u0027)) == 0x2eb2c2d6\\n     *\\n     *     =\\u003e 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256(\\u0027uri(uint256)\\u0027)) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i \\u003c accounts.length; ++i) {\\n            require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n            batchBalances[i] = _balances[ids[i]][accounts[i]];\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i \\u003c ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i \\u003c ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\n     */\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"},\"FROST.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IUniswapV2Factory } from \\u0027./IUniswapV2Factory.sol\\u0027;\\nimport { IUniswapV2Router02 } from \\u0027./IUniswapV2Router02.sol\\u0027;\\nimport { IFROST } from \\\"./IFROST.sol\\\";\\nimport { IAvalanche } from \\u0027./IAvalanche.sol\\u0027;\\nimport { FROSTBase } from \\\"./FROSTBase.sol\\\";\\n\\ncontract FROST is IFROST, FROSTBase {\\n    event EpochUpdated(address _address, uint256 _epoch, uint256 _phase);\\n\\n    uint256 public override constant MAX_SUPPLY = 21000 * 1e18; // max supply 21k\\n\\n    bool public override maxSupplyHit; // has max supply been reached\\n    uint256 public override transferFee; // FROST transfer fee, 1 = 0.1%. Default 1.5%\\n\\n    uint256 public override currentEpoch;\\n    uint256 public override currentPhase; // current phase; 0 = Accumulation ,1 = Distribution\\n    uint256[] public override epochMaxSupply; // max total supply for each epoch, running total\\n    uint256[] public override epochBaseRate; // base APR of Slope rewards\\n    \\n    // Mapping of whitelisted sender and recipient addresses that don\\u0027t pay the transfer fee. \\n    // Allows FROST token holders to whitelist future contracts\\n    mapping(address =\\u003e bool) public senderWhitelist;\\n    mapping(address =\\u003e bool) public recipientWhitelist;\\n\\n    modifier Accumulation {\\n        require(\\n            currentPhase == 0,\\n            \\\"FROST is not in Accumulation\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier MaxSupplyNotReached {\\n        require(!maxSupplyHit, \\\"Max FROST Supply has been reached\\\");\\n        _;\\n    }\\n\\n    modifier OnlyAuthorized {\\n        require(\\n            msg.sender == avalancheAddress()\\n            || msg.sender == lgeAddress()\\n            || msg.sender == slopesAddress(),\\n            \\\"Only LGE, Slopes, and Avalanche contracts can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address addressRegistry) \\n        public \\n        FROSTBase(addressRegistry, \\\"Frost Protocol\\\", \\\"FROST\\\") \\n    {\\n        transferFee = 15;\\n        _initializeEpochs();\\n    }\\n\\n    function _initializeEpochs() \\n        private \\n    {\\n        _setupEpoch(5250 * 1e18, 0); // 5.25k FROST for LGE\\n        _setupEpoch(13250 * 1e18, 800); // +8k FROST, 800%\\n        _setupEpoch(17250 * 1e18, 400); // +4k FROST, 400%\\n        _setupEpoch(19250 * 1e18, 200); // +2k FROST, 200%\\n        _setupEpoch(20250 * 1e18, 100); // +1k FROST, 100%\\n        _setupEpoch(20750 * 1e18, 50); // +500 FROST, 50%\\n        _setupEpoch(21000 * 1e18, 25); // +250 FROST, 25%\\n    }\\n\\n    function _setupEpoch(uint256 maxSupply, uint256 baseRate) \\n        private \\n    {\\n        epochMaxSupply.push(maxSupply);\\n        epochBaseRate.push(baseRate);\\n    }\\n\\n    function currentMaxSupply() \\n        external \\n        view\\n        override \\n        returns (uint256)\\n    {\\n        return epochMaxSupply[currentEpoch];\\n    }\\n\\n    function currentBaseRate() \\n        external \\n        view \\n        override\\n        returns (uint256)\\n    {\\n        return epochBaseRate[currentEpoch];\\n    }\\n\\n    function accumulating()\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return currentEpoch \\u003e 0 \\u0026\\u0026 currentEpoch \\u003c= 6\\n            \\u0026\\u0026 currentPhase == 0;\\n    }\\n\\n    function updateEpoch(uint256 _epoch, uint256 _phase)\\n        external\\n        override\\n        OnlyAuthorized\\n    {\\n        // require valid update calls\\n        if (currentPhase == 0) {\\n            require(\\n                _epoch == currentEpoch \\u0026\\u0026 _phase == 1,\\n                \\\"Invalid Epoch Phase Update Call\\\"\\n            );\\n        } else {\\n            // change this to _epoch == currentEpoch + 1 in prod\\n            require(\\n                _epoch \\u003e currentEpoch \\u0026\\u0026 _phase == 0,\\n                \\\"Invalid Epoch Update Call\\\"\\n            );\\n        }\\n\\n        currentEpoch = _epoch;\\n        currentPhase = _phase;\\n\\n        emit EpochUpdated(_msgSender(), _epoch, _phase);\\n    }\\n\\n    // Creates `_amount` FROST token to `_to`. \\n    // Can only be called by the LGE, Slopes, and Avalanche contracts\\n    //  when epoch and max supply numbers allow\\n    function mint(address _to, uint256 _amount)\\n        external\\n        override\\n        Accumulation\\n        MaxSupplyNotReached\\n        OnlyAuthorized\\n    {\\n        uint256 supply = totalSupply();\\n        uint256 epochSupply = epochMaxSupply[currentEpoch];\\n\\n        // update phase if epoch max supply is hit during this mint\\n        if (supply.add(_amount) \\u003e= epochSupply) {\\n            _amount = epochSupply.sub(supply);\\n            \\n            if (supply.add(_amount) \\u003e= MAX_SUPPLY) {\\n                maxSupplyHit = true;\\n            }\\n\\n            // activate gets called at every accumulation end to reset rewards\\n            IAvalanche(avalancheAddress()).activate();            \\n\\n            if (currentEpoch == 0) {\\n                currentEpoch += 1;\\n            } else {\\n                currentPhase += 1;\\n            }\\n            emit EpochUpdated(_msgSender(), currentEpoch, currentPhase);\\n        }\\n\\n        if (_amount \\u003e 0) {\\n            _mint(_to, _amount);\\n        }\\n    }\\n\\n    // Transfer override to support transfer fees that are sent to Avalanche\\n    function _transfer(\\n        address sender, \\n        address recipient, \\n        uint256 amount\\n    ) \\n        internal\\n        override\\n    {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 transferFeeAmount;\\n        uint256 tokensToTransfer;\\n        if (amount \\u003e 0) {\\n            address avalancheAddress = avalancheAddress();\\n\\n            // Send a fee to the Avalanche staking contract if this isn\\u0027t a whitelisted transfer\\n            if (_isWhitelistedTransfer(sender, recipient) != true) {\\n                transferFeeAmount = amount.mul(transferFee).div(1000);\\n                _balances[avalancheAddress] = _balances[avalancheAddress].add(transferFeeAmount);\\n                IAvalanche(avalancheAddress).addFrostReward(sender, transferFeeAmount);\\n                emit Transfer(sender, avalancheAddress, transferFeeAmount);\\n            }\\n            tokensToTransfer = amount.sub(transferFeeAmount);\\n            _balances[sender] = _balances[sender].sub(tokensToTransfer, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n            if (tokensToTransfer \\u003e 0) {\\n                _balances[recipient] = _balances[recipient].add(tokensToTransfer);\\n\\n                // If the Avalanche is the transfer recipient, add rewards to keep balances updated\\n                if (recipient == avalancheAddress) {\\n                    IAvalanche(avalancheAddress).addFrostReward(sender, tokensToTransfer);\\n                }\\n            }\\n\\n        }\\n        emit Transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    // Admin calls this at token deployment to setup FROST-LP LGE transfers\\n    function calculateUniswapPoolAddress() \\n        external\\n        view \\n        HasPatrol(\\\"ADMIN\\\")\\n        returns (address)\\n    {\\n        address uniswapRouter = uniswapRouterAddress();\\n        address wethAddress = wethAddress();\\n\\n        // Calculate the address the FROST-ETH Uniswap pool will exist at\\n        address factoryAddress = IUniswapV2Router02(uniswapRouter).factory();\\n        // return IUniswapV2Factory(factoryAddress).createPair(wethAddress, address(this));\\n\\n        // token0 must be strictly less than token1 by sort order to determine the correct address\\n        (address token0, address token1) = address(this) \\u003c wethAddress \\n            ? (address(this), wethAddress) \\n            : (wethAddress, address(this));\\n\\n        //uniswap address pre-calculation using create2\\n        return address(uint(keccak256(abi.encodePacked(\\n            hex\\u0027ff\\u0027,\\n            factoryAddress,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027\\n        ))));\\n    }\\n\\n    // Sets the FROST transfer fee that gets rewarded to Avalanche stakers. Can\\u0027t be higher than 5%.\\n    function setTransferFee(uint256 _transferFee) \\n        public\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_transferFee \\u003c= 50, \\\"over 5%\\\");\\n        transferFee = _transferFee;\\n    }\\n\\n    // Add an address to the sender or recipient transfer whitelist\\n    function addToTransferWhitelist(bool _addToSenderWhitelist, address _address) \\n        public\\n        override \\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        if (_addToSenderWhitelist == true) {\\n            senderWhitelist[_address] = true;\\n        } else {\\n            recipientWhitelist[_address] = true;\\n        }\\n    }\\n\\n    // Remove an address from the sender or recipient transfer whitelist\\n    function removeFromTransferWhitelist(bool _removeFromSenderWhitelist, address _address) \\n        public\\n        override\\n        HasPatrol(\\\"ADMIN\\\") \\n    {\\n        if (_removeFromSenderWhitelist == true) {\\n            senderWhitelist[_address] = false;\\n        } else  {\\n            recipientWhitelist[_address] = false;\\n        }\\n    }\\n\\n    // Internal function to determine if a FROST transfer is being sent or received by a whitelisted address\\n    function _isWhitelistedTransfer(\\n        address _sender, \\n        address _recipient\\n    ) \\n        internal \\n        view \\n        returns (bool) \\n    {\\n        // Ecosytem contracts should not pay transfer fees\\n        return _sender == avalancheAddress() || _recipient == avalancheAddress()\\n            || _sender == lgeAddress() || _recipient == lgeAddress()\\n            || _sender == slopesAddress() || _recipient == slopesAddress()\\n            || senderWhitelist[_sender] == true || recipientWhitelist[_recipient] == true;\\n    }\\n}\"},\"FROSTBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// import { ERC20 } from \\\"../utils/ERC20/ERC20.sol\\\";\\n\\nimport { FROSTToken } from \\\"./FROSTToken.sol\\\";\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\n\\nabstract contract FROSTBase is PatrolBase, FROSTToken {\\n    constructor(\\n        address addressRegistry,\\n        string memory name_, \\n        string memory symbol_\\n    ) \\n        public\\n        FROSTToken(name_, symbol_)\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"FROSTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// import { ERC20 } from \\\"../utils/ERC20/ERC20.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\nimport { IERC20 } from \\u0027./IERC20.sol\\u0027;\\nimport { Context } from \\\"./Context.sol\\\";\\n\\n// Standed ERC20 with internal _balances, virtual _transfer, and add\\u0027l helper funcs\\n// Modificiations made out of ecosystem necessity  \\nabstract contract FROSTToken is IERC20, Context {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) internal _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual;\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAccessControl {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\"},\"IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressRegistry {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event FrostUpdated(address indexed newAddress);\\n    event FrostPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n    \\n    function getAvalanche() external view returns (address);\\n    function setAvalanche(address _address) external;\\n\\n    function getLGE() external view returns (address);\\n    function setLGE(address _address) external;\\n\\n    function getLodge() external view returns (address);\\n    function setLodge(address _address) external;\\n\\n    function getLoyalty() external view returns (address);\\n    function setLoyalty(address _address) external;\\n\\n    function getFrost() external view returns (address);\\n    function setFrost(address _address) external;\\n\\n    function getFrostPool() external view returns (address);\\n    function setFrostPool(address _address) external;\\n\\n    function getSlopes() external view returns (address);\\n    function setSlopes(address _address) external;\\n\\n    function getSnowPatrol() external view returns (address);\\n    function setSnowPatrol(address _address) external;\\n\\n    function getTreasury() external view returns (address payable);\\n    function setTreasury(address _address) external;\\n\\n    function getUniswapRouter() external view returns (address);\\n    function setUniswapRouter(address _address) external;\\n\\n    function getVault() external view returns (address);\\n    function setVault(address _address) external;\\n\\n    function getWeth() external view returns (address);\\n    function setWeth(address _address) external;\\n}\"},\"IAvalanche.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAvalanche {\\n    event Activated(address indexed user);\\n    event Claim(address indexed user, uint256 frostAmount);    \\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event FrostRewardAdded(address indexed user, uint256 frostReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    function active() external view returns (bool);\\n    function activate() external;\\n\\n    function addFrostReward(address _from, uint256 _amount) external;\\n    // function addEthReward() external virtual payable;\\n    function deposit(uint256 _amount) external;\\n    function depositFor(address _from, address _user, uint256 _amount) external;\\n    function claim() external;\\n    function claimFor(address _user) external;\\n    function withdraw(uint256 _amount) external;\\n\\n    function payoutNumber() external view returns (uint256);\\n    function timeUntilNextPayout() external view returns (uint256); \\n    function rewardAtPayout(uint256 _payoutNumber) external view returns (uint256);\\n}\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\"},\"IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\"},\"IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address _token, \\n        uint256 _amount, \\n        uint256 _fee, \\n        bytes memory _params\\n    ) external;\\n\\n    // function executeOperation(\\n    //     address[] calldata _reserves,\\n    //     uint256[] calldata _amounts,\\n    //     uint256[] calldata _fees,\\n    //     bytes calldata params\\n    // ) external returns (bool);\\n}\"},\"IFROST.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\ninterface IFROST {\\n    event EpochUpdated(address _address, uint256 _epoch, uint256 _phase);\\n\\n    function MAX_SUPPLY() external view returns (uint256);\\n    function maxSupplyHit() external view returns (bool);\\n    function transferFee() external view returns (uint256);\\n    function currentEpoch() external view returns (uint256);\\n    function currentPhase() external view returns (uint256);\\n    function epochMaxSupply(uint _epoch) external view returns (uint256);\\n    function epochBaseRate(uint _epoch) external view returns (uint256);\\n\\n    function accumulating() external view returns (bool);\\n    function currentMaxSupply() external view returns (uint256);\\n    function currentBaseRate() external view returns (uint256);\\n    // function incrementEpoch() external;\\n    // function incrementPhase() external;\\n    \\n    function updateEpoch(uint256 _epoch, uint256 _phase) external;\\n    function mint(address _to, uint256 _amount) external;\\n    function setTransferFee(uint256 _transferFee) external;\\n    function addToTransferWhitelist(bool _addToSenderWhitelist, address _address) external;\\n    function removeFromTransferWhitelist(bool _removeFromSenderWhitelist, address _address) external;\\n}\"},\"ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILendingPool {\\n    event FlashLoanCompleted(\\n        address indexed _user,\\n        address indexed _receiver,\\n        address indexed _token,\\n        uint256 _amount,\\n        uint256 _totalFee\\n    );\\n    function flashLoan(\\n        address _receiver, \\n        address _token, \\n        uint256 _amount, \\n        bytes memory _params\\n    ) external;\\n\\n    function getReservesAvailable(address _token) external view returns (uint256);\\n    function getFeeForAmount(address _token, uint256 _amount) external view returns (uint256);\\n}\"},\"ILGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n\\ninterface ILGE {\\n    event LiquidityEventStarted(address _address);\\n    event LiquidityCapReached(address _address);\\n    event LiquidityEventCompleted(address _address, uint256 totalContributors, uint256 totalContributed);\\n    event UserContributed(address indexed _address, uint256 _amount);\\n    event UserClaimed(address indexed _address, uint256 _amount);\\n\\n    function active() external view returns (bool);\\n    function eventStartTimestamp() external view returns (uint256);\\n    function eventEndTimestamp() external view returns (uint256);\\n    function totalContributors() external view returns (uint256);\\n    function totalEthContributed() external view returns (uint256);\\n    function tokenDistributionRate() external view returns (uint256);\\n    function goldBoardsReserved() external view returns (uint256);\\n    function silverBoardsReserved() external view returns (uint256);\\n\\n    function activate() external;\\n    function contribute() external payable;\\n    function startEvent() external;\\n    function claim() external;\\n    function retrieveLeftovers() external;\\n\\n    function getContribution(address _address) external view returns (uint256 amount, uint256 board);\\n}\"},\"ILodge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILodge {\\n    event TokenCreated(address user, uint256 id, uint256 supply);\\n\\n    function items(uint256 _token) external view returns(uint256);\\n    function boost(uint256 _id) external view returns (uint256);\\n\\n    function setURI(string memory _newuri) external;\\n    function mint(address _account, uint256 _id, uint256 _amount, uint256 _boost) external;\\n}\"},\"ILoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILoyalty {\\n    event TrancheUpdated(uint256 _tranche, uint256 _points);\\n    event LoyaltyUpdated(address indexed _user, uint256 _tranche, uint256 _points);\\n    event BaseFeeUpdated(address indexed _user, uint256 _baseFee);\\n    event ProtocolFeeUpdated(address indexed _user, uint256 _protocolFee);\\n    event DiscountMultiplierUpdated(address indexed _user, uint256 _multiplier);\\n    event Deposit(address indexed _user, uint256 _id, uint256 _amount);\\n    event Withdraw(address indexed _user, uint256 _id, uint256 _amount);\\n    \\n    function staked(uint256 _id, address _address) external view returns (uint256);\\n    function whitelistedTokens(uint256 _id) external view returns (bool);\\n\\n    function getTotalShares(address _user, uint256 _amount) external view returns (uint256);\\n    function getTotalFee(address _user, uint256 _amount) external view returns (uint256);\\n    function getProtocolFee(uint256 _amount) external view returns (uint256);\\n    function getBoost(address _user) external view returns (uint256);\\n    function deposit(uint256 _id, uint256 _amount) external;\\n    function withdraw(uint256 _id, uint256 _amount) external;\\n    function whitelistToken(uint256 _id) external;\\n    function blacklistToken(uint256 _id) external;\\n    function updatePoints(address _user) external;\\n}\"},\"ISlopes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ISlopes {\\n    event Activated(address user);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 frostAmount, uint256 tokenAmount);\\n    event ClaimAll(address indexed user, uint256 frostAmount, uint256[] tokenAmounts);\\n    event Migrate(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    // event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event FrostPurchase(address indexed user, uint256 ethSpentOnFrost, uint256 frostBought);\\n\\n    function active() external view returns (bool);\\n    function frostSentToAvalanche() external view returns (uint256);\\n    function stakingFee() external view returns (uint256);\\n    function roundRobinFee() external view returns (uint256);\\n    function protocolFee() external view returns (uint256);\\n\\n    function activate() external;\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    // function addFrostReward(address _from, uint256 _amount) external virtual;\\n    // function addEthReward() external virtual payable;\\n    function claim(uint256 _pid) external;\\n    function claimAll() external;\\n    function claimAllFor(address _user) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function migrate() external;\\n    function poolLength() external view returns (uint256);\\n    function addPool(address _token, address _lpToken, bool _lpStaked, uint256 _weight) external;\\n    function setWeight(uint256 _pid, uint256 _weight) external;\\n}\\n\\n// interface ISlopes {\\n    \\n\\n//     function activate() external;\\n//     function poolLength() external view returns (uint256);\\n//     function massUpdatePools() external;\\n//     function updatePool(uint256 _pid) external;\\n//     function deposit(uint256 _pid, uint256 _amount) external;\\n// }\"},\"ISnowPatrol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"./AltitudeBase.sol\\\";\\n\\ninterface ISnowPatrol {\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n    function LGE_ROLE() external pure returns (bytes32);\\n    function FROST_ROLE() external pure returns (bytes32);\\n    function SLOPES_ROLE() external pure returns (bytes32);\\n    function LODGE_ROLE() external pure returns (bytes32);\\n    function setCoreRoles() external;\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"pragma solidity \\u003e=0.6.2;\\n\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IWETH {\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n    event Deposit(address indexed dst, uint wad);\\n    event Withdrawal(address indexed src, uint wad);\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n    function totalSupply() external view returns (uint);\\n    function approve(address guy, uint wad) external returns (bool);\\n    function transfer(address dst, uint wad) external returns (bool);\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n}\"},\"LendingPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"./SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\nimport { ReentrancyGuard } from \\\"./ReentrancyGuard.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./IFlashLoanReceiver.sol\\\";\\nimport { ILoyalty } from \\\"./ILoyalty.sol\\\";\\nimport { ILendingPool } from \\\"./ILendingPool.sol\\\";\\nimport { MultiPoolBase } from \\\"./MultiPoolBase.sol\\\";\\n\\ncontract LendingPoolBase is ILendingPool, MultiPoolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    mapping (address =\\u003e bool) lendingTokens; // Tokens active for borrowing\\n\\n    event FlashLoan(\\n        address indexed _receiver,\\n        address indexed _token,\\n        uint256 _amount,\\n        uint256 _totalFee\\n    );\\n\\n    modifier LendingActive(address _token) {\\n        require(lendingTokens[_token] == true, \\\"Flash Loans for this token are not active\\\");\\n        _;\\n    }\\n\\n    function flashLoan(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _params\\n    )\\n        public\\n        override\\n        nonReentrant\\n        LendingActive(_token)\\n        NonZeroAmount(_amount)\\n    {\\n        uint256 tokensAvailableBefore = _getReservesAvailable(_token);\\n        require(\\n            tokensAvailableBefore \\u003e= _amount,\\n            \\\"Not enough token available to complete transaction\\\"\\n        );\\n\\n        uint256 totalFee = ILoyalty(loyaltyAddress()).getTotalFee(tx.origin, _amount);\\n        \\n        require(\\n            totalFee \\u003e 0, \\n            \\\"Amount too small for flash loan\\\"\\n        );\\n\\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(_receiver);\\n        address payable userPayable = address(uint160(_receiver));\\n\\n        // transfer flash loan funds to user\\n        IERC20(_token).safeTransfer(userPayable, _amount);\\n        \\n        // execute arbitrary user code\\n        receiver.executeOperation(_token, _amount, totalFee, _params);\\n\\n        // Ensure token balances are equal + fees immediately after transfer.\\n        //  Since ETH reverts transactions that fail checks like below, we can\\n        //  ensure that funds are returned to the contract before end of transaction\\n        uint256 tokensAvailableAfter = _getReservesAvailable(_token);\\n        require(\\n            tokensAvailableAfter == tokensAvailableBefore.add(totalFee),\\n            \\\"Token balances are inconsistent. Transaction reverted\\\"\\n        );\\n\\n        poolInfo[tokenPools[_token]].accTokenPerShare = poolInfo[tokenPools[_token]]\\n            .accTokenPerShare.mul(totalFee.mul(1e12).div(poolInfo[tokenPools[_token]].totalStaked));\\n        ILoyalty(loyaltyAddress()).updatePoints(tx.origin);\\n\\n        emit FlashLoan(_receiver, _token, _amount, totalFee);\\n    }\\n\\n    function getReservesAvailable(address _token)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        if (!lendingTokens[_token]) {\\n            return 0;\\n        }\\n        return _getReservesAvailable(_token);\\n    }\\n\\n    function _getReservesAvailable(address _token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(_token).balanceOf(address(this));\\n    }\\n\\n    function getFeeForAmount(address _token, uint256 _amount)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        if (!lendingTokens[_token]) {\\n            return 0;\\n        }\\n        return ILoyalty(loyaltyAddress()).getTotalFee(tx.origin, _amount);\\n    }\\n\\n    function setLendingToken(address _token, bool _active)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _setLendingToken(_token, _active);\\n    }\\n\\n    function _setLendingToken(address _token, bool _active)\\n        internal\\n    {\\n        lendingTokens[_token] = _active;\\n    }\\n}\"},\"LGE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { IERC1155 } from \\\"./IERC1155.sol\\\";\\nimport { IERC1155Receiver } from \\\"./IERC1155Receiver.sol\\\";\\nimport { IUniswapV2Router02 } from \\u0027./IUniswapV2Router02.sol\\u0027;\\nimport { ILGE } from \\\"./ILGE.sol\\\";\\nimport { ILodge } from \\\"./ILodge.sol\\\";\\nimport { LGEBase } from \\\"./LGEBase.sol\\\";\\nimport { IFROST } from \\\"./IFROST.sol\\\";\\nimport { ISlopes } from \\\"./ISlopes.sol\\\";\\nimport \\\"./console.sol\\\";\\n\\ncontract LGE is ILGE, IERC1155Receiver, LGEBase {\\n    struct UserInfo {\\n        uint256 contributionAmount;\\n        uint256 snowboardReserved;\\n        uint256 lastEvent;\\n    }\\n\\n    event LiquidityEventStarted(address indexed _address);\\n    event LiquidityCapReached(address indexed _address);\\n    event LiquidityEventCompleted(address indexed _address, uint256 totalContributors, uint256 totalContributed);\\n    event UserContributed(address indexed _address, uint256 _amount);\\n    event UserClaimed(address indexed _address, uint256 _amount);\\n\\n    uint256 public constant MAXIMUM_LGE_DURATION = 4 days; // max of 5 days\\n    uint256 public constant MAXIMUM_ADDRESS_CONTRIBUTION = 15 * 1e18; // 15 ETH per address\\n    uint256 public constant NFT_ETH_CONTRIBUTION = 5 * 1e18; // minimum contribution to be eligible for NFT\\n    uint256 public constant MAXIMUM_ETH_CONTRIBUTION = 200 * 1e18; // 200 ETH maximum cap\\n    uint256 public constant MINIMUM_ETH_CONTRIBUTION = 1 * 1e17; // .1 eth min contribution amount\\n    uint256 public constant FROST_TO_MINT = 5250 * 1e18; // 5.25k FROST to mint \\n    uint256 public constant FROST_TO_DISTRIBUTE = 2625 * 1e18; // 2.625k FROST, half of minting total\\n\\n    bool internal started;\\n    bool public override active; // public variable for LGE event status\\n    \\n    uint256 public override eventStartTimestamp; // when the event started\\n    uint256 public override eventEndTimestamp; // when event will ended, computed at init, computed again if cap is reached\\n    uint256 public override totalContributors; // total # of unique addresses\\n    uint256 public override totalEthContributed; // total received\\n    uint256 public override tokenDistributionRate; // tokens distributed per address (totalContributed / # contributors)\\n    uint256 public override goldBoardsReserved;\\n    uint256 public override silverBoardsReserved;\\n    uint256 internal maxActivationTime;\\n    uint256[] internal activationTimes;\\n\\n    mapping (address =\\u003e UserInfo) public ethContributors;\\n\\n    // modifier to determine if the LGE \\n    modifier TimeLimitHasBeenReached {\\n        require(\\n            block.timestamp \\u003e eventEndTimestamp,\\n            \\\"Must have reached contribution cap or exceeded event time window\\\"\\n        );\\n        _;\\n    }\\n\\n    // for functions thats only happen before the LGE has been completed\\n    modifier EventNotActive {\\n        require(!active, \\\"LGE is not active\\\");\\n        _;\\n    }\\n\\n    modifier EventActive {\\n        require(active, \\\"LGE has been completed\\\");\\n        _;\\n    }\\n\\n    modifier OnlyOnce {\\n        require(!started, \\\"LGE can only be started once\\\");\\n        _;\\n    }\\n\\n    modifier OnlyContributionAmount(uint256 _amount) {\\n        require (\\n            _amount \\u003c= getMaximumAddressContribution()\\n            \\u0026\\u0026 totalEthContributed + _amount \\u003c= getMaximumTotalContribution(), \\n            \\\"Cannot contribute more than event ether caps\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyValidClaimer(address _address) {\\n        require(\\n            ethContributors[_address].contributionAmount \\u003e 0, \\n            \\\"No tokens to claim\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _address) \\n        public \\n        LGEBase(_address) \\n    {}\\n\\n    function startEvent()\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n        EventNotActive\\n        OnlyOnce\\n    {\\n        started = true;\\n        active = true;\\n        eventStartTimestamp = block.timestamp;\\n        eventEndTimestamp = eventStartTimestamp + getMaximumDuration();\\n\\n        activationTimes.push(block.timestamp.add(1 days));\\n        activationTimes.push(block.timestamp.add(2 days));\\n        activationTimes.push(block.timestamp.add(3 days));\\n        activationTimes.push(eventStartTimestamp + getMaximumDuration());\\n\\n        emit LiquidityEventStarted(msg.sender);\\n    }\\n\\n    function activate() \\n        external\\n        override\\n        TimeLimitHasBeenReached \\n        EventActive\\n    {\\n        address frostPoolAddress = frostPoolAddress();\\n        address frostAddress = frostAddress();\\n\\n        uint256 initialEthLiquidity = totalEthContributed.div(2);\\n\\n        tokenDistributionRate = FROST_TO_DISTRIBUTE.mul(1e18).div(totalEthContributed);\\n        console.log(\\\"Tokens to be distributed at rate of 1 ETH per %s FROST\\\", tokenDistributionRate);\\n        \\n        // Activate the slopes\\n        ISlopes(slopesAddress()).activate();\\n        \\n        // mint the tokens\\n        IFROST(frostAddress).mint(address(this), FROST_TO_MINT);\\n        console.log(\\\"Minted FROST Tokens: %s\\\", IERC20(frostAddress).balanceOf(address(this)));\\n\\n        // add liq to uniswap\\n        console.log(\\\"Adding liquidity on Uniswap\\\");\\n        uint256 lpTokensReceived = _addLiquidityETH(\\n            initialEthLiquidity,\\n            FROST_TO_DISTRIBUTE,\\n            frostAddress\\n        );\\n        console.log(\\\"Received FROST-ETH LP Tokens: %s\\\", IERC20(frostPoolAddress).balanceOf(address(this)));\\n\\n\\n        // Lock the LP tokens in the FROST contract\\n        // Move this to vault contract instead\\n        IERC20(frostPoolAddress).safeTransfer(vaultAddress(), lpTokensReceived);\\n\\n        // transfer dev funds\\n        address(uint160(treasuryAddress())).transfer(initialEthLiquidity);\\n\\n        // mark event completed\\n        active = false;\\n        emit LiquidityEventCompleted(msg.sender, totalContributors, totalEthContributed);\\n    }\\n\\n    function contribute() \\n        external \\n        override\\n        payable \\n    {\\n        _contribute(msg.sender, msg.value);\\n    }\\n\\n    receive() external payable { }\\n\\n    function _contribute(address _address, uint256 _amount)\\n        internal\\n        EventActive\\n        NonZeroAmount(_amount)\\n        OnlyContributionAmount(_amount)\\n    {\\n        if (ethContributors[_address].lastEvent \\u003e 0) {\\n            require(\\n                ethContributors[_address].contributionAmount + _amount \\u003c= getMaximumAddressContribution(),\\n                \\\"Cannot contribute more than address limit\\\"\\n            );\\n        }\\n\\n        if (block.timestamp \\u003e activationTimes[maxActivationTime]) {\\n            maxActivationTime++;\\n        }\\n\\n        ethContributors[_address].contributionAmount = ethContributors[_address].contributionAmount.add(_amount);\\n        ethContributors[_address].lastEvent = block.timestamp;\\n        \\n        // do nft availability checks\\n\\n        // if user has previously reserved a snowboard (5+ eth),\\n        // then maxes and there are still gold boards available,\\n        // swap the board out\\n        if (ethContributors[_address].contributionAmount == getMaximumAddressContribution()\\n            \\u0026\\u0026 ethContributors[_address].snowboardReserved == 2\\n            \\u0026\\u0026 ILodge(lodgeAddress()).items(0) \\u003e goldBoardsReserved) \\n        {\\n            silverBoardsReserved -= 1;\\n            goldBoardsReserved += 1;\\n            ethContributors[_address].snowboardReserved = 1;\\n        }   // else if gold \\n        else if (ILodge(lodgeAddress()).items(0) \\u003e goldBoardsReserved \\n            \\u0026\\u0026 ethContributors[_address].contributionAmount == getMaximumAddressContribution()) \\n        {\\n            ethContributors[_address].snowboardReserved = 1; // golden snowboard id + 1\\n            goldBoardsReserved += 1;\\n        } \\n        else if (ILodge(lodgeAddress()).items(1) \\u003e silverBoardsReserved\\n            \\u0026\\u0026 ethContributors[_address].contributionAmount \\u003e= getMinimumNFTContribution()) \\n        {\\n            ethContributors[_address].snowboardReserved = 2; // silver snowboard id + 1\\n            silverBoardsReserved += 1;\\n        }\\n\\n        totalEthContributed = totalEthContributed.add(_amount);\\n\\n        emit UserContributed(_address, _amount);\\n\\n        if (totalEthContributed == getMaximumTotalContribution()) {\\n            //... mark the countdown to LGE activation now, next 1PM EST can launch\\n            eventEndTimestamp = activationTimes[maxActivationTime];\\n            emit LiquidityCapReached(_address);\\n        }\\n    }\\n\\n    function getContribution(address _address)\\n        external\\n        override\\n        view\\n        returns (uint256 amount, uint256 board) \\n    {\\n        UserInfo storage user = ethContributors[_address];\\n        \\n        amount = user.contributionAmount;\\n        board = user.snowboardReserved;\\n    }\\n\\n    function claim() \\n        external \\n        override\\n    {\\n        _claim(msg.sender);\\n    }\\n\\n    function _claim(address _address) \\n        internal\\n        EventNotActive\\n        OnlyValidClaimer(_address)\\n    {\\n        uint256 claimableFrost = tokenDistributionRate.mul(ethContributors[_address].contributionAmount).div(1e18);\\n        if (claimableFrost \\u003e IERC20(frostAddress()).balanceOf(address(this))) {\\n            claimableFrost = IERC20(frostAddress()).balanceOf(address(this));\\n        }\\n\\n        ethContributors[_address].contributionAmount = 0;\\n        ethContributors[_address].lastEvent = block.timestamp;\\n\\n        // transfer token to address\\n        IERC20(frostAddress()).safeTransfer(_address, claimableFrost);\\n\\n        if (ethContributors[_address].snowboardReserved \\u003e 0) {\\n            uint256 id = ethContributors[_address].snowboardReserved - 1;\\n            ethContributors[_address].snowboardReserved = 0;\\n\\n            IERC1155(lodgeAddress()).safeTransferFrom(address(this), _address, id, 1, \\\"\\\");\\n        }\\n\\n        emit UserClaimed(_address, claimableFrost);\\n    }\\n\\n    function retrieveLeftovers()\\n        external\\n        override\\n        EventNotActive\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        if (ILodge(lodgeAddress()).items(0) \\u003e goldBoardsReserved) {\\n            uint256 goldenLeftovers = ILodge(lodgeAddress()).items(0) - goldBoardsReserved;\\n            IERC1155(lodgeAddress()).safeTransferFrom(address(this), _msgSender(), 0, goldenLeftovers, \\\"\\\");\\n        }\\n\\n        if (ILodge(lodgeAddress()).items(1) \\u003e silverBoardsReserved) {\\n            uint256 silverLeftovers = ILodge(lodgeAddress()).items(1) - silverBoardsReserved;\\n            IERC1155(lodgeAddress()).safeTransferFrom(address(this), _msgSender(), 0, silverLeftovers, \\\"\\\");\\n        }\\n\\n        if (address(this).balance \\u003e 0) {\\n            address(uint160(_msgSender())).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function getMaximumDuration() public virtual pure returns (uint256) {\\n        return MAXIMUM_LGE_DURATION;\\n    }\\n\\n    function getMaximumAddressContribution() public virtual pure returns (uint256) {\\n        return MAXIMUM_ADDRESS_CONTRIBUTION;\\n    }\\n\\n    function getMinimumNFTContribution() public virtual pure returns (uint256) {\\n        return NFT_ETH_CONTRIBUTION;\\n    }\\n\\n    function getMinimumContribution() public virtual pure returns (uint256) {\\n        return MINIMUM_ETH_CONTRIBUTION;\\n    }\\n\\n    function getMaximumTotalContribution() public virtual pure returns (uint256) {\\n        return MAXIMUM_ETH_CONTRIBUTION;\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-1155#erc-1155-token-receiver\\n    function supportsInterface(bytes4 interfaceId) \\n        external\\n        override\\n        view \\n        returns (bool)\\n    {\\n        return interfaceId == 0x01ffc9a7 \\n            || interfaceId == 0x4e2312e0; \\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n    }\\n\\n    function getLGEStats(address _user)\\n        external\\n        view\\n        returns (bool _active, uint256[] memory _stats)\\n    {\\n        _active = active;\\n\\n        _stats = new uint256[](10);\\n        _stats[0] = getMaximumTotalContribution();\\n        _stats[1] = getMaximumAddressContribution();\\n        _stats[2] = getMinimumNFTContribution();\\n        _stats[3] = getMinimumContribution();\\n        _stats[4] = goldBoardsReserved;\\n        _stats[5] = silverBoardsReserved;\\n        _stats[6] = totalEthContributed;\\n        _stats[7] = eventEndTimestamp;\\n        _stats[8] = ethContributors[_user].contributionAmount;\\n        _stats[9] = ethContributors[_user].snowboardReserved;\\n    }\\n}\"},\"LGEBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { UniswapBase } from \\\"./UniswapBase.sol\\\";\\n\\nabstract contract LGEBase is UniswapBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    constructor(address addressRegistry) internal {\\n        _setAddressRegistry(addressRegistry);\\n    }    \\n}\"},\"LiquidityPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { PoolBase } from \\\"./PoolBase.sol\\\";\\n\\ncontract LiquidityPoolBase is PoolBase {\\n    struct UserInfo {\\n        uint256 shares; // How many pool shares user owns, equal to staked tokens with bonuses applied\\n        uint256 staked; // How many FROST-ETH LP tokens the user has staked\\n        uint256 rewardDebt; // Reward debt. Works the same as in the Slopes contract\\n        uint256 claimed; // Tracks the amount of FROST claimed by the user\\n    }\\n\\n    mapping (address =\\u003e UserInfo) public userInfo; // Info of each user that stakes FROST-ETH LP tokens\\n\\n    modifier HasStakedBalance(address _address) {\\n        require(userInfo[_address].staked \\u003e 0, \\\"Must have staked balance greater than zero\\\");\\n        _;\\n    }\\n\\n    modifier HasWithdrawableBalance(address _address, uint256 _amount) {\\n        require(userInfo[_address].staked \\u003e= _amount, \\\"Cannot withdraw more tokens than staked balance\\\");\\n        _;\\n    }\\n}\"},\"Lodge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { ILodge } from \\\"./ILodge.sol\\\";\\nimport { LodgeBase } from \\\"./LodgeBase.sol\\\";\\nimport { LodgeToken } from \\\"./LodgeToken.sol\\\";\\n\\ncontract Lodge is ILodge, LodgeBase {\\n    event TokenCreated(address user, uint256 id, uint256 supply);\\n\\n    uint256 public constant MASK_FROST = 0;\\n    uint256 public constant GOGGLES_FROST = 1;\\n    uint256 public constant JACK_FROST = 2;\\n\\n    mapping(uint256 =\\u003e uint256) public override items; // total supply of each token\\n    mapping(uint256 =\\u003e uint256) public boosts;\\n\\n    constructor(address _addressRegistry) \\n        public \\n        LodgeBase(_addressRegistry, \\\"https://frostprotocol.com/items/{id}.json\\\")\\n    {\\n        _initializeSnowboards();\\n    }\\n\\n    // Base Altitude NFTs\\n    function _initializeSnowboards() internal virtual {\\n        // mainnet amounts\\n        mint(lgeAddress(), MASK_FROST, 5, 600);\\n        mint(lgeAddress(), GOGGLES_FROST, 10, 300);\\n        mint(treasuryAddress(), JACK_FROST, 20, 150);\\n    }\\n\\n    // Governed function to set URI in case of domain/api changes\\n    function setURI(string memory _newuri)\\n        public\\n        override(LodgeToken, ILodge)\\n    {\\n        _setURI(_newuri);       \\n    }\\n\\n    function boost(uint256 _id) \\n        external \\n        override\\n        view \\n        returns (uint256)\\n    {\\n        return boosts[_id];\\n    }\\n\\n    // Governed function to create a new NFT\\n    // Cannot mint any NFT more than once\\n    function mint(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _boost\\n    )\\n        public\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(items[_id] == 0, \\\"Cannot mint NFT more than once\\\");\\n\\n        _mint(_account, _id, _amount, \\\"\\\");\\n        items[_id] = _amount;\\n        boosts[_id] = _boost;\\n\\n        emit TokenCreated(_msgSender(), _id, _amount);\\n    }\\n\\n    function setBoost(uint256 _id, uint256 _boost)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        boosts[_id] = _boost;\\n    }\\n}\"},\"LodgeBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\nimport { LodgeToken } from \\\"./LodgeToken.sol\\\";\\n\\nabstract contract LodgeBase is PatrolBase, LodgeToken {\\n    constructor(\\n        address addressRegistry,\\n        string memory _newuri\\n    ) \\n        internal \\n        LodgeToken(_newuri)\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"LodgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { ERC1155 } from \\\"./ERC1155.sol\\\";\\n\\nabstract contract LodgeToken is ERC1155 {\\n    constructor(string memory _newuri) internal ERC1155(_newuri) {}\\n\\n    function setURI(string memory _newuri) external virtual;\\n\\n}\"},\"Loyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC1155 } from \\\"./IERC1155.sol\\\";\\nimport { IERC1155Receiver } from \\\"./IERC1155Receiver.sol\\\";\\nimport { ILoyalty } from \\\"./ILoyalty.sol\\\";\\nimport { ILodge } from \\\"./ILodge.sol\\\";\\nimport { ISlopes } from \\\"./ISlopes.sol\\\";\\nimport { IAvalanche } from \\\"./IAvalanche.sol\\\";\\nimport { LoyaltyBase } from \\\"./LoyaltyBase.sol\\\";\\n\\n// contract to manage all bonuses\\ncontract Loyalty is ILoyalty, IERC1155Receiver, LoyaltyBase {\\n    event TrancheUpdated(uint256 _tranche, uint256 _points);\\n    event LoyaltyUpdated(address indexed _user, uint256 _tranche, uint256 _points);\\n    event BaseFeeUpdated(address indexed _user, uint256 _baseFee);\\n    event ProtocolFeeUpdated(address indexed _user, uint256 _protocolFee);\\n    event DiscountMultiplierUpdated(address indexed _user, uint256 _multiplier);\\n    event Deposit(address indexed _user, uint256 _id, uint256 _amount);\\n    event Withdraw(address indexed _user, uint256 _id, uint256 _amount);\\n\\n    struct LoyaltyInfo {\\n        uint256 points;\\n        uint256 tranche;\\n        uint256 boost; // current boosts, 1 = 0.1%\\n        uint256 staked; // id+1 of staked nft\\n    }\\n\\n    uint256[] public tokenIds;\\n    uint256 public baseFee; // default 0.08% \\n    uint256 public protocolFee; // default 20% of 0.8%\\n    uint256 public discountMultiplier; // 0.01%\\n\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) public override staked;\\n    mapping(uint256 =\\u003e bool) public override whitelistedTokens;\\n    mapping (uint256 =\\u003e uint256) public loyaltyTranches; // Tranche level to points required\\n    mapping (address =\\u003e LoyaltyInfo) public userLoyalty; // Address to loyalty points accrued\\n\\n    modifier Whitelisted(uint256 _id) {\\n        require(whitelistedTokens[_id], \\\"This Lodge token cannot be staked\\\");\\n        _;\\n    }\\n\\n    modifier OnlyOneBoost(address _user) {\\n        require(\\n            userLoyalty[_user].boost == 0,\\n            \\\"Max one boost per account\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _address) \\n        public\\n        LoyaltyBase(_address)\\n    {\\n        tokenIds = new uint256[](0);\\n        baseFee = 80; // 0.08%\\n        protocolFee = 20000; // 20% of baseFee\\n        discountMultiplier = 10; // 0.01%\\n\\n        _initializeWhitelist();\\n        _initializeLoyaltyTranches();\\n    }\\n\\n    function _initializeWhitelist() internal {\\n        whitelistedTokens[0] = true;\\n        whitelistedTokens[1] = true;\\n        whitelistedTokens[2] = true;\\n\\n        tokenIds.push(0);\\n        tokenIds.push(1);\\n        tokenIds.push(2);\\n    }\\n\\n     // set the base loyalty tranches, performing more flash loans unlocks\\n     // greater discounts\\n    function _initializeLoyaltyTranches() internal {\\n        _setLoyaltyTranche(0, 0); // base loyalty, base fee\\n        _setLoyaltyTranche(1, 100); // level 1, 100 tx\\n        _setLoyaltyTranche(2, 500);  // level 2, 500 tx\\n        _setLoyaltyTranche(3, 1000); // level 3, 1k tx\\n        _setLoyaltyTranche(4, 5000); // level 4, 5k tx\\n        _setLoyaltyTranche(5, 10000); // level 5, 10k tx\\n        _setLoyaltyTranche(6, 50000); // level 6, 50k tx\\n        _setLoyaltyTranche(7, 100000); // level 7, 100k tx, initially 0.01% fee + boost\\n    }\\n\\n    function deposit(uint256 _id, uint256 _amount)\\n        external\\n        override\\n    {\\n        _deposit(_msgSender(), _id, _amount);\\n    }\\n\\n    function _deposit(address _address, uint256 _id, uint256 _amount) \\n        internal\\n        Whitelisted(_id)\\n        NonZeroAmount(_amount)\\n        OnlyOneBoost(_address)\\n    {\\n        IERC1155(lodgeAddress()).safeTransferFrom(_address, address(this), _id, _amount, \\\"\\\");\\n        staked[_id][_address] += _amount;\\n        userLoyalty[_address].boost = ILodge(lodgeAddress()).boost(_id);\\n        userLoyalty[_address].staked = _id + 1;\\n\\n        ISlopes(slopesAddress()).claimAllFor(_address);\\n        IAvalanche(avalancheAddress()).claimFor(_address);\\n\\n        emit Deposit(_address, _id, _amount);\\n    }\\n\\n    function withdraw(uint256 _id, uint256 _amount) \\n        external\\n        override\\n    {\\n        _withdraw(_msgSender(), _id, _amount);\\n    }\\n\\n    function _withdraw(address _address, uint256 _id, uint256 _amount) \\n        internal \\n    {\\n        require(\\n            staked[_id][_address] \\u003e= _amount,\\n            \\\"Staked balance not high enough to withdraw this amount\\\" \\n        );\\n        \\n        IERC1155(lodgeAddress()).safeTransferFrom(address(this), _address, _id, _amount, \\\"\\\");\\n        staked[_id][_address] -= _amount;\\n        userLoyalty[_address].boost = 0;\\n        userLoyalty[_address].staked = 0;\\n\\n        // claim all user rewards and update user pool shares to prevent abuse\\n        ISlopes(slopesAddress()).claimAllFor(_address);\\n        IAvalanche(avalancheAddress()).claimFor(_address);\\n\\n        emit Withdraw(_address, _id, _amount);\\n    }\\n\\n    function whitelistToken(uint256 _id)\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        whitelistedTokens[_id] = true;\\n        tokenIds.push(_id);\\n    }\\n\\n    function blacklistToken(uint256 _id)\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        whitelistedTokens[_id] = false;\\n    }\\n\\n    function getBoost(address _user)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return userLoyalty[_user].boost;\\n    }\\n\\n    // get the total shares a user will receive when staking a given token amount\\n    function getTotalShares(address _user, uint256 _amount)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        // 1 + [1 * (boost/1000)]\\n        return _amount.add(_amount.mul(userLoyalty[_user].boost).div(1000));\\n    }\\n\\n    // get the total fee amount that an address will pay on a given flash loan amount\\n    // get base fee for user tranche, then flat discount based on boost\\n    function getTotalFee(address _user, uint256 _amount) \\n        external \\n        override\\n        view \\n        returns (uint256)\\n    {\\n        uint256 feeMultiplier = baseFee.sub(discountMultiplier.mul(userLoyalty[_user].tranche));\\n        uint256 trancheFee = _amount.mul(feeMultiplier).div(100000);\\n        return trancheFee.sub(trancheFee.mul(userLoyalty[_user].boost).div(1000));\\n    }\\n\\n    // protocol fee added for future use\\n    function getProtocolFee(uint256 _amount)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _amount.mul(protocolFee).div(10000);\\n    }\\n\\n    // update user points and tranche if needed\\n    function updatePoints(address _address) \\n        external\\n        override\\n        OnlySlopes\\n    {\\n        userLoyalty[_address].points = userLoyalty[_address].points.add(1);\\n        if (userLoyalty[_address].points \\u003e loyaltyTranches[userLoyalty[_address].tranche.add(1)]) {\\n            userLoyalty[_address].tranche = userLoyalty[_address].tranche.add(1);\\n        }\\n    }\\n\\n    function updateTranche(address _address)\\n        public  \\n    {\\n        if (userLoyalty[_address].points \\u003e loyaltyTranches[userLoyalty[_address].tranche + 1]) {\\n            userLoyalty[_address].tranche = userLoyalty[_address].tranche + 1;\\n        } else {\\n            if (userLoyalty[_address].tranche == 0) {\\n                return;\\n            }\\n            if (userLoyalty[_address].points \\u003c loyaltyTranches[userLoyalty[_address].tranche]) {\\n                userLoyalty[_address].tranche = userLoyalty[_address].tranche - 1;\\n            }\\n        }\\n    }\\n\\n    function _getProtocolFee(uint256 _totalFee)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _totalFee.mul(protocolFee).div(100000);\\n    }\\n\\n    function setBaseFee(uint256 _newFee)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_newFee != baseFee, \\\"No change\\\");\\n        require(_newFee \\u003c= 90, \\\"Base Fee must remain below 0.09%\\\");\\n\\n        baseFee = _newFee;\\n        emit BaseFeeUpdated(msg.sender, _newFee);\\n    }\\n\\n    function setProtocolFee(\\n        uint256 _newFee\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_newFee != baseFee, \\\"No change\\\");\\n\\n        protocolFee = _newFee;\\n        emit ProtocolFeeUpdated(msg.sender, _newFee);\\n    }\\n\\n    function setLoyaltyTranche(\\n        uint256 _tranche, \\n        uint256 _points\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _setLoyaltyTranche(_tranche, _points);\\n    }\\n\\n    function _setLoyaltyTranche(\\n        uint256 _tranche, \\n        uint256 _points\\n    )\\n        internal\\n    {\\n        loyaltyTranches[_tranche] = _points;\\n        emit TrancheUpdated(_tranche, _points);\\n    }\\n\\n    function setDiscountMultiplier(uint256 _newMultiplier)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        discountMultiplier = _newMultiplier;\\n        emit DiscountMultiplierUpdated(msg.sender, _newMultiplier);\\n    }\\n\\n    function setLoyaltyPoints(\\n        address _address,\\n        uint256 _points\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        userLoyalty[_address].points = _points;\\n        updateTranche(_address);\\n        emit LoyaltyUpdated(_address, userLoyalty[_address].tranche, _points);\\n    }\\n\\n    function updateIds(uint256[] memory _ids) external HasPatrol(\\\"ADMIN\\\") {\\n        tokenIds = _ids;\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-1155#erc-1155-token-receiver\\n    function supportsInterface(bytes4 interfaceId) \\n        external\\n        override\\n        view \\n        returns (bool)\\n    {\\n        return interfaceId == 0x01ffc9a7 \\n            || interfaceId == 0x4e2312e0; \\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n    }\\n\\n    function getLoyaltyStats(address _user)\\n        external\\n        view\\n        returns (\\n            bool _active, \\n            bool _approved, \\n            uint256[] memory _balances,\\n            uint256[] memory _stats\\n        )\\n    {\\n        _active = ISlopes(slopesAddress()).active();\\n        _approved = IERC1155(lodgeAddress()).isApprovedForAll(_user, address(this));\\n        \\n        address[] memory users = new address[](tokenIds.length);\\n        for (uint i = 0; i \\u003c tokenIds.length; i++) {\\n            users[i] = _user;\\n        }\\n        \\n        _balances = IERC1155(lodgeAddress()).balanceOfBatch(users, tokenIds);\\n\\n        _stats = new uint256[](4);\\n        _stats[0] = userLoyalty[_user].points;\\n        _stats[1] = userLoyalty[_user].tranche;\\n        _stats[2] = userLoyalty[_user].staked;\\n        _stats[3] = userLoyalty[_user].boost;\\n\\n    }\\n}\"},\"LoyaltyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\n\\ncontract LoyaltyBase is PatrolBase {\\n    using SafeMath for uint256;\\n\\n    constructor(address addressRegistry) \\n        public\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"MultiPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { PoolBase } from \\\"./PoolBase.sol\\\";\\n\\ncontract MultiPoolBase is PoolBase {\\n\\n    // At any point in time, the amount of FROST and tokens\\n    // entitled to a user that is pending to be distributed is:\\n    //\\n    //   pending_frost_reward = (user.shares * pool.accFrostPerShare) - user.rewardDebt\\n    //   pending_token_rewards = (user.staked * pool.accTokenPerShare) - user.tokenRewardDebt\\n    //\\n    // Shares are a notional value of tokens staked, shares are given in a 1:1 ratio with tokens staked\\n    //  If you have any NFTs staked in the Lodge, you earn additional shares according to the boost of the NFT.\\n    //  FROST rewards are calculated using shares, but token rewards are based on actual staked amounts.\\n    //\\n    // On withdraws/deposits:\\n    //   1. The pool\\u0027s `accFrostPerShare`, `accTokenPerShare`, and `lastReward` gets updated.\\n    //   2. User receives the pending reward sent to his/her address.\\n    //   3. User\\u0027s `staked` amount gets updated.\\n    //   4. User\\u0027s `shares` amount gets updated.\\n    //   5. User\\u0027s `rewardDebt` gets updated.\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 staked; // How many LP tokens the user has provided.\\n        uint256 shares; // user shares of the pool, needed to correctly apply nft bonuses\\n        uint256 rewardDebt; // FROST Rewards. See explanation below.\\n        uint256 claimed; // Tracks the amount of FROST claimed by the user.\\n        uint256 tokenRewardDebt; // Mapping Token Address to Rewards accrued\\n        uint256 tokenClaimed; // Tracks the amount of wETH claimed by the user.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        bool active;\\n        address token; // Address of token contract\\n        address lpToken; // Address of LP token (UNI-V2)\\n        bool lpStaked; // boolean indicating whether the pool is lp tokens\\n        uint256 weight; // Weight for each pool. Determines how many FROST to distribute per block.\\n        uint256 lastReward; // Last block timestamp that rewards were distributed.\\n        uint256 totalStaked; // total actual amount of tokens staked\\n        uint256 totalShares; // Virtual total of tokens staked, nft stakers get add\\u0027l shares\\n        uint256 accFrostPerShare; // Accumulated FROST per share, times 1e12. See below.\\n        uint256 accTokenPerShare; // Accumulated ERC20 per share, times 1e12\\n    }\\n\\n    mapping (uint256 =\\u003e mapping (address =\\u003e UserInfo)) public userInfo; // Pool=\\u003eUser=\\u003eInfo Mapping of each user that stakes in each pool\\n    PoolInfo[] public poolInfo; // Info of each pool\\n\\n    mapping(address =\\u003e bool) public contractWhitelist; // Mapping of whitelisted contracts so that certain contracts like the Aegis pool can interact with this Accumulation contract\\n    mapping(address =\\u003e uint256) public tokenPools;\\n\\n    modifier HasStakedBalance(uint256 _pid, address _address) {\\n        require(\\n            userInfo[_pid][_address].staked \\u003e 0, \\n            \\\"Must have staked balance greater than zero\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyOriginOrAdminOrWhitelistedContract(address _address) {\\n        require(\\n            tx.origin == address(this)\\n            || hasPatrol(\\\"ADMIN\\\", _address)\\n            || contractWhitelist[_address],\\n            \\\"Only whitelisted contracts can call this function\\\"\\n        ); // Only allow whitelisted contracts to prevent attacks\\n        _;\\n    }\\n\\n    // Boosts limit\\n    function checkLimit(address _1155, bytes memory _boost)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n\\n    {\\n        (bool success, bytes memory returndata) = _1155.call(_boost);\\n        require(success, \\\"boost limit reached: failed\\\");\\n\\n    }\\n\\n    // Add a contract to the whitelist so that it can interact with Slopes\\n    function addToWhitelist(address _contractAddress) \\n        public \\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        contractWhitelist[_contractAddress] = true;\\n    }\\n\\n    // Remove a contract from the whitelist\\n    function removeFromWhitelist(address _contractAddress) \\n        public\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        contractWhitelist[_contractAddress] = false;\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"PatrolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"./AltitudeBase.sol\\\";\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { IAccessControl } from \\\"./IAccessControl.sol\\\";\\n\\ncontract PatrolBase is AltitudeBase {\\n    modifier HasPatrol(bytes memory _patrol) {\\n        require(\\n            IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), address(_msgSender())),\\n            \\\"Account does not have sufficient role to call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasPatrol(bytes memory _patrol, address _address)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), _address);\\n    }\\n}\"},\"PoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { IAvalanche } from \\\"./IAvalanche.sol\\\";\\nimport { IFROST } from \\\"./IFROST.sol\\\";\\nimport { ReentrancyGuard } from \\\"./ReentrancyGuard.sol\\\";\\nimport { UniswapBase } from \\\"./UniswapBase.sol\\\";\\n\\ncontract PoolBase is UniswapBase, ReentrancyGuard {\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 360 * 24 * 60 * 60; // std business yr, used to calculatee APR\\n\\n    // Internal function to safely transfer tokens in case there is a rounding error\\n    function _safeTokenTransfer(\\n        address _token,\\n        address _to, \\n        uint256 _amount\\n    ) \\n        internal\\n    {\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\n        if (_amount \\u003e tokenBalance) {\\n            IERC20(_token).safeTransfer(_to, tokenBalance);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    // shared function to calculate fixed apr frost rewards\\n    //  used in both avalanche and slopes\\n    function _calculatePendingRewards(\\n        uint256 _lastReward,\\n        uint256 _supply,\\n        uint256 _tokenPrice,\\n        uint256 _weight\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsElapsed = block.timestamp - _lastReward;\\n\\n        // get FROST uniswap price\\n        uint256 frostPrice = _getTokenPrice(frostAddress(), frostPoolAddress());\\n\\n        uint256 scaledTotalLiquidityValue = _supply * _tokenPrice; // total value pooled tokens\\n        uint256 fixedApr = _weight * IFROST(frostAddress()).currentBaseRate();\\n        uint256 yearlyRewards = ((fixedApr / 100) * scaledTotalLiquidityValue) / frostPrice; // instantaneous yearly frost payout\\n        uint256 rewardsPerSecond = yearlyRewards / SECONDS_PER_YEAR; // instantaneous frost rewards per second \\n        return secondsElapsed * rewardsPerSecond;\\n    }\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"Slopes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { ERC20 } from \\\"./ERC20.sol\\\";\\nimport { IFROST } from \\\"./IFROST.sol\\\";\\nimport { IAvalanche } from \\\"./IAvalanche.sol\\\";\\nimport { ISlopes } from \\\"./ISlopes.sol\\\";\\nimport { ILoyalty } from \\\"./ILoyalty.sol\\\";\\nimport { SlopesBase } from \\\"./SlopesBase.sol\\\"; \\n\\ncontract Slopes is ISlopes, SlopesBase {\\n    event Activated(address indexed user);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 frostAmount, uint256 tokenAmount);\\n    event ClaimAll(address indexed user, uint256 frostAmount, uint256[] tokenAmounts);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Migrate(address indexed user, uint256 amount);\\n    event FrostPurchase(address indexed user, uint256 ethSpentOnFrost, uint256 frostBought);\\n\\n    uint256 internal constant DEFAULT_WEIGHT = 1;\\n    \\n    bool internal avalancheActive;\\n    bool public override active;\\n    uint256 public override frostSentToAvalanche;\\n    uint256 public override stakingFee; // 1 = 0.1%, default 10%\\n    uint256 public override roundRobinFee; // default to 500, 50% of staking Fee\\n    uint256 public override protocolFee; // default to 200, 20% of roundRobinFee\\n    \\n    modifier PoolActive(uint256 _pid) {\\n        require(poolInfo[_pid].active, \\\"This Slope is inactive\\\");\\n        _;\\n    }\\n\\n    modifier AvalancheActive {\\n        require(IAvalanche(avalancheAddress()).active(), \\\"Slopes are not active\\\");\\n        _;\\n    }\\n\\n    modifier SlopesActive {\\n        require(active, \\\"Slopes are not active\\\");\\n        _;\\n    }\\n\\n    modifier SlopesNotActive {\\n        require(!active, \\\"Slopes are not active\\\");\\n        _;\\n    }\\n    \\n    constructor(address addressRegistry)\\n        public \\n        SlopesBase(addressRegistry) \\n    {\\n        stakingFee = 50; // 5% initial fee\\n        roundRobinFee = 500;\\n        protocolFee = 200;\\n    }\\n\\n    receive() external payable {}\\n\\n    function activate()\\n        external\\n        override\\n        OnlyLGE\\n        SlopesNotActive\\n    {\\n        active = true;\\n        _addInitialPools();\\n        emit Activated(_msgSender());\\n    }\\n\\n    // Internal function that adds all of the pools that will be available at launch\\n    // enables flash loan lending on active pools\\n    function _addInitialPools() internal {\\n        _addPool(\\n            frostAddress(),\\n            frostPoolAddress(),\\n            true\\n        ); // FROST-ETH LP\\n        \\n        _addPool(\\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\\n            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\\n            false\\n        ); // WETH\\n        _addPool(\\n            0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,\\n            0xBb2b8038a1640196FbE3e38816F3e67Cba72D940,\\n            false\\n        ); // WBTC\\n        _addPool(\\n            0xdAC17F958D2ee523a2206206994597C13D831ec7,\\n            0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852,\\n            false\\n        ); // USDT\\n        _addPool(\\n            0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,\\n            0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc,\\n            false\\n        ); // USDC\\n        _addPool(\\n            0x6B175474E89094C44Da98b954EedeAC495271d0F,\\n            0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11,\\n            false\\n        ); // DAI\\n\\n        _setLendingToken(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, true);\\n        _setLendingToken(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, true);\\n        _setLendingToken(0xdAC17F958D2ee523a2206206994597C13D831ec7, true);\\n        _setLendingToken(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, true);\\n        _setLendingToken(0x6B175474E89094C44Da98b954EedeAC495271d0F, true);\\n    }\\n\\n    // Internal function to add a new LP Token pool\\n    function _addPool(\\n        address _token,\\n        address _lpToken,\\n        bool _lpStaked\\n    ) \\n        internal\\n    {\\n        uint256 weight = DEFAULT_WEIGHT;\\n        if (_token == frostAddress()) {\\n            weight = weight * 5;\\n        }\\n\\n        uint256 lastReward = block.timestamp;\\n\\n        if (_lpStaked) {\\n            tokenPools[_lpToken] = poolInfo.length; \\n        } else {\\n            tokenPools[_token] = poolInfo.length;\\n        }\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                active: true,\\n                token: _token,\\n                lpToken: _lpToken,\\n                lpStaked: _lpStaked,\\n                weight: weight,\\n                lastReward: lastReward,\\n                totalShares: 0,\\n                totalStaked: 0,\\n                accFrostPerShare: 0,\\n                accTokenPerShare: 0\\n            })\\n        );\\n    }\\n\\n    function updatePool(uint256 _pid) \\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _updatePool(_pid);\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(uint256 _pid) \\n        internal\\n        SlopesActive\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address frostAddress = frostAddress();\\n\\n        if (block.timestamp \\u003c= pool.lastReward\\n            || (_pid == 0 \\u0026\\u0026 avalancheActive)) {\\n            return;\\n        }\\n\\n        if (pool.totalStaked == 0) {\\n            pool.lastReward = block.timestamp;\\n            return;\\n        }\\n\\n        // calculate frost rewards to mint for this epoch if accumulating,\\n        //  mint them to the contract for users to claim\\n        if (IFROST(frostAddress).accumulating()) {\\n            // Calculate the current FROST rewards for a specific pool\\n            //  using fixed APR formula and Uniswap price\\n            uint256 frostReward;\\n            uint256 tokenPrice;\\n            if (pool.lpStaked) {\\n                tokenPrice = _getLpTokenPrice(pool.lpToken);\\n                frostReward = _calculatePendingRewards(\\n                    pool.lastReward,\\n                    pool.totalShares,\\n                    tokenPrice,\\n                    pool.weight\\n                );\\n            } else {\\n                tokenPrice = _getTokenPrice(pool.token, pool.lpToken);\\n                uint256 adjuster = 18 - uint256(ERC20(pool.token).decimals());\\n                uint256 adjustedShares = pool.totalShares * (10**adjuster);\\n\\n                frostReward = _calculatePendingRewards(\\n                    pool.lastReward,\\n                    adjustedShares,\\n                    tokenPrice,\\n                    pool.weight\\n                );\\n            }\\n\\n            // if we hit the max supply here, ensure no overflow \\n            //  epoch will be incremented from the token     \\n            uint256 frostTotalSupply = IERC20(frostAddress).totalSupply();\\n            if (frostTotalSupply.add(frostReward) \\u003e= IFROST(frostAddress).currentMaxSupply()) {\\n                frostReward = IFROST(frostAddress).currentMaxSupply().sub(frostTotalSupply);\\n\\n                if (IFROST(frostAddress).currentEpoch() == 1) {\\n                    poolInfo[0].active = false;\\n                    avalancheActive = true;\\n                } \\n            }\\n\\n            if (frostReward \\u003e 0) {\\n                // IFROST(frostAddress).mint(address(this), frostReward + avalancheSeed);\\n                IFROST(frostAddress).mint(address(this), frostReward);\\n                pool.accFrostPerShare = pool.accFrostPerShare.add(frostReward.mul(1e12).div(pool.totalShares));\\n                pool.lastReward = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    // Internal view function to get the actual amount of tokens staked in the specified pool\\n    function _getPoolSupply(uint256 _pid) \\n        internal \\n        view \\n        returns (uint256 tokenSupply) \\n    {\\n        if (poolInfo[_pid].lpStaked) {\\n            tokenSupply = IERC20(poolInfo[_pid].lpToken).balanceOf(address(this));\\n        } else {\\n            tokenSupply = IERC20(poolInfo[_pid].token).balanceOf(address(this));  \\n        }\\n    }\\n\\n    // Deposits tokens in the specified pool to start earning the user FROST\\n    function deposit(uint256 _pid, uint256 _amount) \\n        external\\n        override\\n    {\\n        _deposit(_pid, msg.sender, _amount);\\n    }\\n    \\n    // internal deposit function, \\n    function _deposit(\\n        uint256 _pid, \\n        address _user, \\n        uint256 _amount\\n    ) \\n        internal\\n        NonZeroAmount(_amount)\\n        SlopesActive\\n        PoolActive(_pid)\\n    {\\n        // Accept deposit\\n        if (poolInfo[_pid].lpStaked) {\\n            IERC20(poolInfo[_pid].lpToken).safeTransferFrom(_user, address(this), _amount);\\n        } else {\\n            IERC20(poolInfo[_pid].token).safeTransferFrom(_user, address(this), _amount);\\n        }\\n\\n        _updatePool(_pid);\\n\\n        // Claim any pending FROST and Token Rewards\\n        _claim(_pid, _user);\\n\\n        \\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        \\n        // Calculate fees\\n        uint256 stakingFeeAmount = _amount.mul(stakingFee).div(1000);\\n        uint256 remainingUserAmount = _amount.sub(stakingFeeAmount);\\n\\n        //  get the user shares, virtual staked balance given by nft bonus\\n        //      1:1 token amount if no bonus\\n        uint256 userPoolShares = ILoyalty(loyaltyAddress()).getTotalShares(_user, remainingUserAmount);\\n        \\n        if (_pid == 0) {\\n            // The user is depositing to the FROST-ETH, send liquidity to vault\\n            _safeTokenTransfer(\\n                pool.lpToken,\\n                vaultAddress(),\\n                stakingFeeAmount\\n            );\\n        } else {\\n            uint256 roundRobinAmount = stakingFeeAmount.mul(roundRobinFee).div(1000);\\n            uint256 protocolAmount = roundRobinAmount.mul(protocolFee).div(1000);\\n\\n            // do the FROST buyback, route tx result directly to avalanche\\n            uint256 frostBought;\\n            if (pool.lpStaked) {\\n                uint256 ethReceived = address(this).balance;\\n                uint256 tokensReceived = IERC20(pool.token).balanceOf(address(this));\\n                _removeLiquidityETH(\\n                    stakingFeeAmount.sub(roundRobinAmount),\\n                    pool.lpToken,\\n                    pool.token\\n                );\\n                ethReceived = address(this).balance.sub(ethReceived); // update for rewards\\n                tokensReceived = IERC20(pool.token).balanceOf(address(this)).sub(tokensReceived); // update token rewards\\n                ethReceived = ethReceived.add(_swapExactTokensForETH(tokensReceived, pool.token));\\n                if (ethReceived \\u003e 0) {\\n                    frostBought = _swapExactETHForTokens(ethReceived, frostAddress());\\n                }\\n            } else {\\n                if (pool.token == wethAddress()) {\\n                    _unwrapETH(stakingFeeAmount.sub(roundRobinAmount));\\n                    frostBought = _swapExactETHForTokens(stakingFeeAmount.sub(roundRobinAmount), frostAddress());\\n                } else {\\n                    uint256 ethReceived = _swapExactTokensForETH(stakingFeeAmount.sub(roundRobinAmount), pool.token);\\n                    if (ethReceived \\u003e 0) {\\n                        frostBought = _swapExactETHForTokens(ethReceived, frostAddress());\\n                    }\\n                }\\n            }\\n            // emit event, \\n            if (frostBought \\u003e 0) {\\n                frostSentToAvalanche += frostBought;\\n                _safeTokenTransfer(\\n                    frostAddress(),\\n                    avalancheAddress(),\\n                    frostBought\\n                );\\n                emit FrostPurchase(msg.sender, _amount, frostBought);\\n            }\\n            \\n            // apply round robin fee\\n            uint256 poolSupply = _getPoolSupply(_pid);\\n            pool.accTokenPerShare = pool.accTokenPerShare.add(roundRobinAmount.sub(protocolAmount).mul(1e12).div(poolSupply));\\n\\n            if (protocolAmount \\u003e 0) {\\n                IERC20(pool.token).safeTransfer(treasuryAddress(), protocolAmount);\\n            }\\n        }\\n\\n        // Add tokens to user balance, update reward debts to reflect the deposit\\n        //   bonus rewards only apply to FROST, so use shares for frost debt and staked for token debt\\n        uint256 _currentRewardDebt = user.shares.mul(pool.accFrostPerShare).div(1e12).sub(user.rewardDebt);\\n        uint256 _currentTokenRewardDebt = user.staked.mul(pool.accTokenPerShare).div(1e12).sub(user.tokenRewardDebt);\\n\\n        user.staked = user.staked.add(remainingUserAmount);\\n        user.shares = user.shares.add(userPoolShares);\\n        pool.totalStaked = pool.totalStaked.add(remainingUserAmount);\\n        pool.totalShares = pool.totalShares.add(userPoolShares);\\n\\n        user.rewardDebt = user.shares.mul(pool.accFrostPerShare).div(1e12).sub(_currentRewardDebt);\\n        user.tokenRewardDebt = user.staked.mul(pool.accTokenPerShare).div(1e12).sub(_currentTokenRewardDebt);\\n\\n        emit Deposit(_user, _pid, _amount);\\n    }\\n\\n    // Claim all earned FROST and token rewards from a single pool.\\n    function claim(uint256 _pid) \\n        external\\n        override\\n    {\\n        _updatePool(_pid);\\n        _claim(_pid, msg.sender);\\n    }\\n\\n    \\n    // Internal function to claim earned FROST and tokens from slopes\\n    function _claim(uint256 _pid, address _user) \\n        internal\\n        SlopesActive\\n    {\\n        if (userInfo[_pid][_user].staked == 0) {\\n            return;\\n        }\\n        \\n        // calculate the pending frost rewards using virtual user shares\\n        uint256 userFrostPending = userInfo[_pid][_user].shares.mul(poolInfo[_pid].accFrostPerShare).div(1e12).sub(userInfo[_pid][_user].rewardDebt);\\n        if (userFrostPending \\u003e 0) {\\n            userInfo[_pid][_user].claimed = userInfo[_pid][_user].claimed.add(userFrostPending);\\n            userInfo[_pid][_user].rewardDebt = userInfo[_pid][_user].shares.mul(poolInfo[_pid].accFrostPerShare).div(1e12);\\n\\n            _safeTokenTransfer(\\n                frostAddress(),\\n                _user,\\n                userFrostPending\\n            );\\n        }\\n\\n        // calculate the pending token rewards, use actual user stake\\n        // rewards will be denoted in token decimals, not 1e18\\n        uint256 userTokenPending = userInfo[_pid][_user].staked.mul(poolInfo[_pid].accTokenPerShare).div(1e12).sub(userInfo[_pid][_user].tokenRewardDebt);\\n        if (userTokenPending \\u003e 0) {\\n            userInfo[_pid][_user].tokenClaimed = userInfo[_pid][_user].tokenClaimed.add(userTokenPending);\\n            userInfo[_pid][_user].tokenRewardDebt = userInfo[_pid][_user].staked.mul(poolInfo[_pid].accTokenPerShare).div(1e12);\\n\\n            if (poolInfo[_pid].lpStaked) {\\n                _safeTokenTransfer(\\n                    poolInfo[_pid].lpToken,\\n                    _user,\\n                    userTokenPending\\n                );\\n            } else {\\n                _safeTokenTransfer(\\n                    poolInfo[_pid].token,\\n                    _user,\\n                    userTokenPending\\n                );\\n            }\\n            \\n        }\\n\\n        if (userFrostPending \\u003e 0 || userTokenPending \\u003e 0) {\\n            emit Claim(_user, _pid, userFrostPending, userTokenPending);\\n        }\\n    }\\n\\n    // external function to claim all rewards\\n    function claimAll()\\n        external\\n        override\\n    {\\n        _claimAll(msg.sender);\\n    }\\n\\n    // loyalty contract calls this function to claim rewards for user\\n    //   before gaining NFT boosts to prevent retroactive/postmortem rewards\\n    function claimAllFor(address _user)\\n        external\\n        override\\n        OnlyLoyalty\\n    {\\n        _claimAll(_user);\\n    }\\n\\n    // Claim all earned FROST and Tokens from all pools,\\n    //   reset share value after claim\\n    function _claimAll(address _user) \\n        internal\\n        SlopesActive\\n    {\\n        uint256 totalPendingFrostAmount = 0;\\n        \\n        uint256 length = poolInfo.length;\\n        uint256[] memory amounts = new uint256[](length);\\n        for (uint256 pid = 0; pid \\u003c length; pid++) {\\n            if (userInfo[pid][_user].staked \\u003e 0) {\\n                _updatePool(pid);\\n\\n                UserInfo storage user = userInfo[pid][_user];\\n                PoolInfo storage pool = poolInfo[pid];\\n\\n                uint256 accFrostPerShare = pool.accFrostPerShare;\\n                uint256 pendingPoolFrostRewards = user.shares.mul(accFrostPerShare).div(1e12).sub(user.rewardDebt);\\n                user.claimed += pendingPoolFrostRewards;\\n                totalPendingFrostAmount = totalPendingFrostAmount.add(pendingPoolFrostRewards);\\n                user.rewardDebt = user.shares.mul(accFrostPerShare).div(1e12);\\n\\n                // update user shares to reset bonuses, only necessary in claimAll \\n                uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, user.staked);\\n                if (shares \\u003e user.shares) {\\n                    pool.totalShares = pool.totalShares.add(shares.sub(user.shares));\\n                } else if (shares \\u003c user.shares) {\\n                    pool.totalShares = pool.totalShares.sub(user.shares.sub(shares));\\n                }\\n                user.shares = shares;\\n\\n                // claim any token reward debt, use actual staked balance\\n                if (pid != 0) {\\n                    address tokenAddress = pool.token;\\n                    uint256 accTokenPerShare = pool.accTokenPerShare;\\n\\n                    // need to double check math on this for 1e6 tokens like USDC\\n                    uint256 pendingPoolTokenRewards = user.staked.mul(accTokenPerShare).div(1e12).sub(user.tokenRewardDebt);\\n                    user.tokenClaimed = user.tokenClaimed.add(pendingPoolTokenRewards);\\n                    // totalPendingWETHAmount = totalPendingWETHAmount.add(pendingPoolWETHRewards);\\n                    user.tokenRewardDebt = user.staked.mul(accTokenPerShare).div(1e12);\\n                    \\n                    // claim token rewards\\n                    if (pendingPoolTokenRewards \\u003e 0) {\\n                        _safeTokenTransfer(tokenAddress, _user, pendingPoolTokenRewards);\\n                        amounts[pid] = pendingPoolTokenRewards;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // claim FROST rewards\\n        if (totalPendingFrostAmount \\u003e 0) {\\n            _safeTokenTransfer(\\n                frostAddress(),\\n                _user,\\n                totalPendingFrostAmount\\n            );\\n        }\\n\\n        emit ClaimAll(_user, totalPendingFrostAmount, amounts);\\n    }\\n\\n    // Withdraw LP tokens and earned FROST from Accumulation. \\n    // Withdrawing won\\u0027t work until frostPoolActive == true\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external\\n        override\\n    {\\n        _withdraw(_pid, _amount, msg.sender);\\n    }\\n\\n    function _withdraw(uint256 _pid, uint256 _amount, address _user) \\n        internal\\n        SlopesActive\\n        NonZeroAmount(_amount)\\n        HasStakedBalance(_pid, _user)\\n    {\\n        _updatePool(_pid);\\n\\n        // Claim any pending FROST and Tokens\\n        _claim(_pid, _user);\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        PoolInfo memory pool = poolInfo[_pid];\\n\\n        uint256 shares = ILoyalty(loyaltyAddress()).getTotalShares(_user, _amount);\\n        pool.totalShares = pool.totalShares.sub(shares);\\n        user.shares = user.shares.sub(shares);\\n\\n        pool.totalStaked = pool.totalStaked.sub(_amount);\\n        user.staked = user.staked.sub(_amount);\\n        user.rewardDebt = user.shares.mul(pool.accFrostPerShare).div(1e12); // users frost debt by shares\\n        user.tokenRewardDebt = user.staked.mul(pool.accTokenPerShare).div(1e12); // taken in terms of tokens, not affected by boosts\\n\\n        if (poolInfo[_pid].lpStaked) {\\n            _safeTokenTransfer(pool.lpToken, _user, _amount);\\n        } else {\\n            _safeTokenTransfer(pool.token, _user, _amount);\\n        }\\n\\n        emit Withdraw(_user, _pid, _amount);\\n    }\\n\\n    // Convenience function to allow users to migrate all of their staked FROST-ETH LP tokens \\n    // from Accumulation to the Avalanche staking contract after the max supply is hit.\\n    function migrate() \\n        external\\n        override\\n        AvalancheActive\\n        HasStakedBalance(0, msg.sender)\\n    {\\n        _updatePool(0);\\n\\n        _claim(0, msg.sender);\\n\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        \\n        uint256 amountToMigrate = user.staked;\\n        address avalancheAddress = avalancheAddress();\\n\\n        pool.totalShares = pool.totalShares.sub(user.shares);\\n        pool.totalStaked = pool.totalStaked.sub(user.staked);\\n\\n        user.shares = 0;\\n        user.staked = 0;\\n        user.rewardDebt = 0;\\n\\n        IERC20(pool.lpToken).safeApprove(avalancheAddress, 0);\\n        IERC20(pool.lpToken).safeApprove(avalancheAddress, amountToMigrate);\\n        IAvalanche(avalancheAddress).depositFor(address(this), msg.sender, amountToMigrate);\\n\\n        emit Migrate(msg.sender, amountToMigrate);\\n    }\\n\\n    function poolLength() \\n        external\\n        override\\n        view \\n        returns (uint256)\\n    {\\n        return poolInfo.length;\\n    }\\n    \\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() \\n        external\\n        override\\n    {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid \\u003c length; pid++) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    // Add a new LP Token pool\\n    function addPool(\\n        address _token, \\n        address _lpToken, \\n        bool _lpStaked,\\n        uint256 _weight\\n    ) \\n        external\\n        override \\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _addPool(_token, _lpToken, _lpStaked);\\n\\n        if (_weight != DEFAULT_WEIGHT) {\\n            poolInfo[poolInfo.length-1].weight = _weight;\\n        } \\n    }\\n\\n    // Update the given pool\\u0027s APR\\n    function setWeight(uint256 _pid, uint256 _weight)\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _updatePool(_pid);\\n        poolInfo[_pid].weight = _weight;\\n    }\\n\\n    function setActive(uint256 _pid, bool _active)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _updatePool(_pid);\\n        poolInfo[_pid].active = _active;\\n    }\\n\\n    function getSlopesStats(address _user)\\n        external\\n        view\\n        returns (bool _active, bool _accumulating, uint[20][] memory _stats)\\n    {\\n        _active = active;\\n        _accumulating = IFROST(frostAddress()).accumulating();\\n        _stats = new uint[20][](poolInfo.length);\\n\\n        for (uint i = 0; i \\u003c poolInfo.length; i++) {\\n            _stats[i] = getPoolStats(_user, i);\\n        }\\n    }\\n\\n    function getPoolStats(address _user, uint256 _pid)\\n        public\\n        view\\n        returns (uint[20] memory _pool)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        _pool[0] = pool.active ? 1 : 0;\\n        _pool[1] = pool.weight * IFROST(frostAddress()).currentBaseRate();\\n        _pool[2] = pool.lastReward;\\n        _pool[3] = pool.totalShares;\\n        _pool[4] = pool.totalStaked;\\n        _pool[5] = pool.accFrostPerShare;\\n        _pool[6] = pool.accTokenPerShare;\\n        _pool[7] = _getTokenPrice(pool.token, pool.lpToken);\\n        _pool[8] = _getLpTokenPrice(pool.lpToken);\\n        _pool[9] = stakingFee;\\n        _pool[10] = IERC20(pool.token).balanceOf(_user);\\n        _pool[11] = IERC20(pool.token).allowance(_user, address(this));\\n        _pool[12] = IERC20(pool.lpToken).balanceOf(_user);\\n        _pool[13] = IERC20(pool.lpToken).allowance(_user, address(this));\\n        _pool[14] = user.staked;\\n        _pool[15] = user.shares;\\n        _pool[16] = user.shares.mul(pool.accFrostPerShare).div(1e12).sub(user.rewardDebt); // pending frost rewards\\n        _pool[17] = user.staked.mul(pool.accTokenPerShare).div(1e12).sub(user.tokenRewardDebt); // pending token rewards\\n        _pool[18] = user.claimed;\\n        _pool[19] = user.tokenClaimed;\\n    }\\n}\"},\"SlopesBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"./SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\nimport { LendingPoolBase } from \\\"./LendingPoolBase.sol\\\";\\n\\nabstract contract SlopesBase is LendingPoolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address addressRegistry) internal {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"SnowPatrol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { SnowPatrolBase } from \\\"./SnowPatrolBase.sol\\\";\\nimport { ISnowPatrol } from \\\"./ISnowPatrol.sol\\\";\\n\\ncontract SnowPatrol is ISnowPatrol, SnowPatrolBase {\\n    bytes32 public override constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public override constant LGE_ROLE = keccak256(\\\"LGE\\\");\\n    bytes32 public override constant FROST_ROLE = keccak256(\\\"FROST\\\");\\n    bytes32 public override constant SLOPES_ROLE = keccak256(\\\"SLOPES\\\");\\n    bytes32 public override constant LODGE_ROLE = keccak256(\\\"LODGE\\\");\\n\\n    constructor(address addressRegistry)\\n        public\\n        SnowPatrolBase(addressRegistry)\\n    {\\n        // make owner user the sole superuser\\n        _initializeRoles(msg.sender);\\n        _initializeAdmins(msg.sender);\\n    }\\n\\n    // inititalize all default roles, make the contract the superuser\\n    function _initializeRoles(address _deployer) private {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _deployer);\\n        _setupRole(ADMIN_ROLE, _deployer);\\n        _setupRole(LGE_ROLE, _deployer);\\n        _setupRole(FROST_ROLE, _deployer);\\n        _setupRole(SLOPES_ROLE, _deployer);\\n        _setupRole(LODGE_ROLE, _deployer);\\n    }\\n\\n     // grant admin role to dev addresses\\n    function _initializeAdmins(address _deployer) private {\\n        grantRole(ADMIN_ROLE, _deployer);\\n       \\n    }\\n\\n    function setCoreRoles() \\n        external\\n        override\\n    {\\n        require(\\n            hasRole(ADMIN_ROLE, msg.sender),\\n            \\\"Only Admins can update contract roles\\\"\\n        );\\n\\n        // if \\n    }\\n}\"},\"SnowPatrolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AccessControl } from \\\"./AccessControl.sol\\\";\\nimport { AddressBase } from \\\"./AddressBase.sol\\\";\\n\\nabstract contract SnowPatrolBase is AccessControl, AddressBase {\\n    constructor(address addressRegistry) internal {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"},\"UniswapBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { ERC20 } from \\u0027./ERC20.sol\\u0027;\\nimport { IERC20 } from \\u0027./IERC20.sol\\u0027;\\nimport { SafeERC20 } from \\u0027./SafeERC20.sol\\u0027;\\nimport { SafeMath } from \\u0027./SafeMath.sol\\u0027;\\nimport { IUniswapV2Pair } from \\u0027./IUniswapV2Pair.sol\\u0027;\\nimport { IUniswapV2Router02 } from \\u0027./IUniswapV2Router02.sol\\u0027;\\nimport { IAddressRegistry } from \\\"./IAddressRegistry.sol\\\";\\nimport { IWETH } from \\\"./IWETH.sol\\\";\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\n\\nabstract contract UniswapBase is PatrolBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public deadlineTime = 5 minutes;\\n\\n    function _swapExactTokensForETH(\\n        uint256 _amount,\\n        address _token\\n    ) \\n        internal\\n        NonZeroTokenBalance(_token)\\n        NonZeroAmount(_amount)\\n        returns (uint256)\\n    {\\n        require(\\n            IERC20(_token).balanceOf(address(this)) \\u003e= _amount,\\n            \\\"Not enough tokens to swap\\\"\\n        );\\n\\n        address[] memory poolPath = new address[](2);\\n        poolPath[0] = address(_token);\\n        poolPath[1] = wethAddress();\\n\\n        uint256 balanceBefore = address(this).balance;\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(_token).safeApprove(uniswapRouter, 0);\\n        IERC20(_token).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            _amount, \\n            0, \\n            poolPath, \\n            address(this), \\n            _getDeadline()\\n        );\\n        return address(this).balance.sub(balanceBefore);\\n    }\\n\\n    // swap eth for tokens, return amount of tokens bought\\n    function _swapExactETHForTokens(\\n        uint256 _amount,\\n        address _token\\n    ) \\n        internal\\n        NonZeroAmount(_amount)\\n        returns (uint256)\\n    {\\n        address[] memory frostPath = new address[](2);\\n        frostPath[0] = wethAddress();\\n        frostPath[1] = _token;\\n\\n        uint256 amountBefore = IERC20(_token).balanceOf(address(this));\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(wethAddress()).safeApprove(uniswapRouter, 0);\\n        IERC20(wethAddress()).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter)\\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _amount }(\\n                0, \\n                frostPath, \\n                address(this), \\n                _getDeadline()\\n            );\\n        return IERC20(_token).balanceOf(address(this)).sub(amountBefore);\\n    }\\n\\n    // swap exact tokens for tokens, always using weth as middle address\\n    function _swapExactTokensForTokens(\\n        uint256 _amount,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        internal\\n        NonZeroTokenBalance(_tokenIn)\\n        returns (uint256)\\n    {\\n        address[] memory frostPath = new address[](3);\\n        frostPath[0] = _tokenIn; \\n        frostPath[1] = wethAddress();\\n        frostPath[2] = _tokenOut;\\n\\n        uint256 amountBefore = IERC20(_tokenOut).balanceOf(address(this));\\n        address uniswapRouter = uniswapRouterAddress();\\n        IERC20(_tokenIn).safeApprove(uniswapRouter, 0);\\n        IERC20(_tokenIn).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            _amount,\\n            0, \\n            frostPath, \\n            address(this), \\n            _getDeadline()\\n        );\\n\\n        uint256 amountAfter = IERC20(_tokenOut).balanceOf(address(this));\\n        return amountAfter.sub(amountBefore);\\n    }\\n\\n    // add liquidity on uniswap with _ethAmount, _tokenAmount to _token\\n    // return # lpTokens received\\n    function _addLiquidityETH(\\n        uint256 _ethAmount,\\n        uint256 _tokenAmount,\\n        address _token\\n    )\\n        internal\\n        NonZeroAmount(_ethAmount)\\n        NonZeroAmount(_tokenAmount)\\n        returns (uint256)\\n    {\\n        address uniswapRouter = IAddressRegistry(_addressRegistry).getUniswapRouter();\\n\\n        IERC20(_token).safeApprove(uniswapRouter, 0);\\n        IERC20(_token).safeApprove(uniswapRouter, _tokenAmount);\\n        ( , , uint256 lpTokensReceived) = IUniswapV2Router02(uniswapRouter).addLiquidityETH{value: _ethAmount}(\\n            _token, \\n            _tokenAmount, \\n            0, \\n            0, \\n            address(this), \\n            _getDeadline()\\n        );\\n\\n        return lpTokensReceived;\\n    }\\n    \\n    // remove liquidity from _token with owned _amount LP token _lpToken\\n    function _removeLiquidityETH(\\n        uint256 _amount,\\n        address _lpToken,\\n        address _token\\n    ) \\n        internal\\n        NonZeroAmount(_amount)\\n    {\\n        address uniswapRouter = uniswapRouterAddress();\\n        \\n        IERC20(_lpToken).safeApprove(uniswapRouter, 0);\\n        IERC20(_lpToken).safeApprove(uniswapRouter, _amount);\\n        IUniswapV2Router02(uniswapRouter).removeLiquidityETHSupportingFeeOnTransferTokens(\\n            _token, \\n            _amount, \\n            0, \\n            0, \\n            address(this), \\n            _getDeadline()\\n        );\\n    }\\n\\n    function _unwrapETH(uint256 _amount)\\n        internal\\n        NonZeroAmount(_amount)\\n    {\\n        IWETH(wethAddress()).withdraw(_amount);\\n    }\\n\\n    // internal view function to view price of any token in ETH\\n    function _getTokenPrice(\\n        address _token,\\n        address _lpToken\\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_token == wethAddress()) {\\n            return 1e18;\\n        }\\n        \\n        uint256 tokenBalance = IERC20(_token).balanceOf(_lpToken);\\n        if (tokenBalance \\u003e 0) {\\n            uint256 wethBalance = IERC20(wethAddress()).balanceOf(_lpToken);\\n            uint256 adjuster = 36 - uint256(ERC20(_token).decimals()); // handle non-base 18 tokens\\n            uint256 tokensPerEth = tokenBalance.mul(10**adjuster).div(wethBalance);\\n            return uint256(1e36).div(tokensPerEth); // price in gwei of token\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _getLpTokenPrice(address _lpToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(wethAddress()).balanceOf(_lpToken).mul(2).mul(1e18).div(IERC20(_lpToken).totalSupply());\\n    }\\n\\n    function _getDeadline()\\n        internal\\n        view\\n        returns (uint256) \\n    {\\n        return block.timestamp + 5 minutes;\\n    }\\n}\"},\"UtilitiesBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { Context } from \\\"./Context.sol\\\";\\n\\nabstract contract UtilitiesBase is Context {\\n    modifier NonZeroAmount(uint256 _amount) {\\n        require(\\n            _amount \\u003e 0, \\n            \\\"Amount must be greater than zero\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroTokenBalance(address _address) {\\n        require(\\n            IERC20(_address).balanceOf(address(this)) \\u003e 0,\\n            \\\"No tokens to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroETHBalance(address _address) {\\n        require(\\n            address(this).balance \\u003e 0,\\n            \\\"No ETH to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyOrigin {\\n        require(\\n            tx.origin == address(this), \\n            \\\"Only origin contract can call this function\\\"\\n        );\\n        _;\\n    }\\n}\"},\"Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { VaultBase } from \\\"./VaultBase.sol\\\";\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"./SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\ncontract Vault is VaultBase {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event VaultWithdrawal(address _user, address _token, uint256 _amount);\\n\\n    mapping(uint256 =\\u003e bool) checkpointWithdrawn;\\n\\n    uint256 public lockEndTimestamp;\\n    uint256 public lockCheckpointOne;\\n    uint256 public lockCheckpointTwo;\\n    uint256 public lockCheckpointThree;\\n    uint256 public checkpointValue;\\n\\n    modifier TimeLocked {\\n        require(\\n            block.timestamp \\u003e= lockEndTimestamp,\\n            \\\"Vault timelock has not expired yet\\\"\\n        );\\n        _;\\n    }\\n\\n    receive() payable external {}\\n\\n    constructor(address _address)\\n        public\\n        VaultBase(_address)\\n    {\\n        lockEndTimestamp = block.timestamp + 120 days;\\n        lockCheckpointOne = block.timestamp + 30 days;\\n        lockCheckpointTwo = block.timestamp + 60 days;\\n        lockCheckpointThree = block.timestamp + 90 days;\\n    }\\n\\n    // called once after LGE\\n    function setCheckpointValues()\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(checkpointValue == 0, \\\"Checkpoint has already been set\\\");\\n        uint256 balance = IERC20(frostPoolAddress()).balanceOf(address(this));\\n        checkpointValue = balance.mul(30).div(100);\\n    }\\n\\n    function withdraw(\\n        address _token,\\n        uint256 _amount\\n    )\\n        external\\n        TimeLocked\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        if (address(this).balance \\u003e 0) {\\n            address(uint160(msg.sender)).transfer(address(this).balance);\\n        }\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n        emit VaultWithdrawal(msg.sender, _token, _amount);\\n    }\\n\\n    function checkpointWithdraw(uint256 _id)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        if (_id == 1) {\\n            require(block.timestamp \\u003e lockCheckpointOne, \\\"Too soon\\\");\\n        } else if ( _id == 2) {\\n            require(block.timestamp \\u003e lockCheckpointTwo, \\\"Too soon\\\");\\n        } else if (_id == 3) {\\n            require(block.timestamp \\u003e lockCheckpointThree, \\\"Too soon\\\");\\n        } else {\\n            return;\\n        }\\n\\n        IERC20(frostPoolAddress()).safeTransfer(msg.sender, checkpointValue);\\n    }\\n}\"},\"VaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\npragma solidity ^0.6.12;\\n\\nimport { PatrolBase } from \\\"./PatrolBase.sol\\\";\\n\\ncontract VaultBase is PatrolBase {\\n    constructor(address addressRegistry) \\n        public\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AvalancheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FrostPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FrostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LGEUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LodgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"LoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SlopesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SnowPatrolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UniswapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"WethUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvalanche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFrost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFrostPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLodge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoyalty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlopes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnowPatrol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAvalanche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFrost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFrostPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLodge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSlopes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSnowPatrol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AddressRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e6e9f4cbff3e5e85a1b47799f420649b41479c1c25f7ad77e75d818ee5cda793"}]}