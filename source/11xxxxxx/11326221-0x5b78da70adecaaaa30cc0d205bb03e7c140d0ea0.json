{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/impl/Data.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\ncontract Data {\r\n    address public proxy;\r\n    \r\n    struct Asset {\r\n\t\tuint256 typeid;\r\n        bytes32 name;\r\n        address tokenAddress;\r\n        string partnerIssuer;\r\n    }\r\n\r\n    mapping(uint256 => Asset) internal Assets;\r\n    mapping (uint256 => uint256) internal AssetIndex;\r\n\tuint256[] internal AssetIds;\r\n\r\n    constructor(address _proxy) public {\r\n        require(_proxy != address(0), \"zero address is not allowed\");\r\n        proxy = _proxy;\r\n    }\r\n\r\n    // 验证对model的操作是否来源于Proxy\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == proxy, \"Data: must be called by entry contract\");\r\n        _;\r\n    }\r\n\r\n    function _checkParam(uint256 _typeid, bytes32 _name, address _tokenAddress, string memory _partnerIssuer) internal view {\r\n\t\trequire(_typeid != uint256(0), \"Data: _typeid null is not allowed\");\r\n\t\trequire(_name != bytes32(0), \"Data: _name null is not allowed\");\r\n\t\trequire(_tokenAddress != address(0), \"Data: _tokenAddress null is not allowed\");\r\n\t\trequire(Address.isContract(_tokenAddress), \"_tokenAddress is a non-contract address\");\r\n\t\trequire(bytes(_partnerIssuer).length > 0, \"Data: _partnerIssuer null is not allowed\");\r\n\t}\r\n\r\n    function _insert(\r\n\t\tuint256 _typeid,\r\n        bytes32 _name,\r\n        address _tokenAddress,\r\n        string memory _partnerIssuer\r\n    ) internal {\r\n        _checkParam(_typeid, _name, _tokenAddress, _partnerIssuer);\r\n        require(\r\n            Assets[_typeid].typeid == uint256(0),\r\n            \"Data: current Asset exist\"\r\n        );\r\n        Asset memory a = Asset(_typeid, _name, _tokenAddress, _partnerIssuer);\r\n        Assets[_typeid] = a;\r\n        AssetIds.push(_typeid);\r\n\t\tAssetIndex[_typeid] = AssetIds.length;\r\n    }\r\n\r\n    function insert(\r\n        uint256 _typeid,\r\n\t\tbytes32 _name,\r\n\t\taddress _tokenAddress,\r\n\t\tstring calldata _partnerIssuer\r\n    ) external onlyAuthorized {\r\n        _insert(_typeid, _name, _tokenAddress, _partnerIssuer);\r\n    }\r\n\r\n    function _update(\r\n        uint256 _typeid,\r\n\t\tbytes32 _name,\r\n\t\taddress _tokenAddress,\r\n\t\tstring memory _partnerIssuer\r\n    ) internal {\r\n        require(\r\n            _typeid != uint256(0),\r\n            \"Data: _typeid 0 is not allowed\"\r\n        );\r\n        require(\r\n            Assets[_typeid].typeid != uint256(0),\r\n            \"Data: current Asset not exist\"\r\n        );\r\n\r\n        Asset memory a = Assets[_typeid];\r\n        if (_name != bytes32(0)) {\r\n            a.name = _name;\r\n        }\r\n        if (_tokenAddress != address(0)) {\r\n            a.tokenAddress = _tokenAddress;\r\n        }\r\n        if (bytes(_partnerIssuer).length > 0) {\r\n            a.partnerIssuer = _partnerIssuer;\r\n        }\r\n        Assets[_typeid] = a;\r\n    }\r\n\r\n    function update(\r\n        uint256 _typeid,\r\n\t\tbytes32 _name,\r\n\t\taddress _tokenAddress,\r\n\t\tstring calldata _partnerIssuer\r\n    ) external onlyAuthorized {\r\n\t\t_update(_typeid, _name, _tokenAddress, _partnerIssuer);\r\n    }\r\n\r\n    function _search(uint256 _typeid)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n\t\t\tbytes32,\r\n\t\t\taddress,\r\n\t\t\tstring memory\r\n        )\r\n    {\r\n        require(\r\n            _typeid != uint256(0),\r\n            \"Data: _typeid 0 is not allowed\"\r\n        );\r\n        require(\r\n            Assets[_typeid].typeid != uint256(0),\r\n            \"Data: current Asset not exist\"\r\n        );\r\n\r\n        Asset memory a = Assets[_typeid];\r\n        return (a.typeid, a.name, a.tokenAddress, a.partnerIssuer);\r\n    }\r\n\r\n    function search(uint256 _typeid)\r\n        external\r\n        view\r\n\t\tonlyAuthorized\r\n        returns (\r\n            uint256,\r\n\t\t\tbytes32,\r\n\t\t\taddress,\r\n\t\t\tstring memory\r\n        )\r\n    {\r\n        return _search(_typeid);\r\n    }\r\n\r\n    function _delete(uint256 _typeid) internal {\r\n\t\trequire(_typeid != uint256(0), \"Data: _typeid 0 is not allowed\");\r\n        require(Assets[_typeid].typeid != uint256(0), \"Data: current Asset not exist\");\r\n        uint256 _deleteIndex = AssetIndex[_typeid] - 1;\r\n\t\tuint256 _lastIndex = AssetIds.length - 1;\r\n        if(_deleteIndex != _lastIndex){\r\n\t\t\tAssetIds[_deleteIndex] = AssetIds[_lastIndex];\r\n\t\t\tAssetIndex[AssetIds[_lastIndex]] = _deleteIndex + 1;\r\n\t\t}\r\n\t\tAssetIds.pop();\r\n        delete Assets[_typeid];\r\n    }\r\n\r\n    function del(uint256 _typeid) external onlyAuthorized {\r\n        _delete(_typeid);\r\n    }\r\n\r\n    //return Array of assetId\r\n    function getAssetIds() external view onlyAuthorized returns (uint256[] memory){\r\n        uint256[] memory ret = AssetIds;\r\n        return ret;\r\n    }\r\n}\r\n\r\n// File: contracts/third/IToken.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IToken {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function getCallAddress() external view returns (address);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/impl/StorageStateful.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\ncontract StorageStateful {\r\n    Data public _storage;\r\n}\r\n\r\n// File: contracts/interfaces/ICustodian.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface ICustodian {\r\n    function lock(uint256 _typeid, address _from, uint256 _value, bytes32 _memo) external;\r\n    function unlock(uint256 _typeid, address _to, uint256 _value) external;\r\n    function add(uint256 _typeid, bytes32 _name, address _tokenAddress, string calldata _partnerIssuer) external;\r\n    function remove(uint256 _typeid) external;\r\n    function getAsset(uint256 _typeid) external view returns (uint256, bytes32, address, string memory);\r\n    function getAssetIds() external view returns (uint256[] memory assetIds);\r\n    function getLockedFunds(address _tokenAddress) external view returns (uint256);\r\n    event Locked(uint256 indexed typeid, address indexed from, uint256 value, bytes32 memo);\r\n    event UnLocked(uint256 indexed typeid, address indexed sender, uint256 value);\r\n    event AddedAsset(uint256 indexed typeid, bytes32 indexed name);\r\n    event RemovedAsset(uint256 indexed typeid);\r\n}\r\n\r\n// File: contracts/impl/Custodian.sol\r\n\r\npragma solidity ^0.5.16;\r\n\r\n\r\n\r\n\r\n\r\ncontract Custodian is StorageStateful, Ownable, ICustodian {\r\n    event Locked(uint256 indexed typeid, address indexed from, uint256 value, bytes32 memo);\r\n    event UnLocked(uint256 indexed typeid, address indexed sender, uint256 value);\r\n    event AddedAsset(uint256 indexed typeid, bytes32 indexed name);\r\n    event RemovedAsset(uint256 indexed typeid);\r\n\r\n    modifier onlyWhitelistedToken(uint256 _typeid) {\r\n        (uint256 typeid,,,) = _storage.search(_typeid);\r\n        require(typeid != uint256(0), \"Data: the token is prohibited\");\r\n        _;\r\n    }\r\n\r\n    function lock(uint256 _typeid, address _from, uint256 _value, bytes32 _memo) external onlyWhitelistedToken(_typeid) onlyOwner {\r\n        (,,address tokenAddress,) = _storage.search(_typeid);\r\n        IToken token = IToken(tokenAddress);\r\n        require(token.transferFrom(_from, address(this), _value), \"Token: transfer failed\");\r\n        emit Locked(_typeid, _from, _value, _memo);\r\n    }\r\n\r\n    function unlock(uint256 _typeid, address _to, uint256 _value) external onlyWhitelistedToken(_typeid) onlyOwner {\r\n        (,,address tokenAddress,) = _storage.search(_typeid);\r\n        IToken token = IToken(tokenAddress);\r\n        require(token.transfer(_to, _value), \"Token: transfer failed\");\r\n        emit UnLocked(_typeid, _to, _value);\r\n    }\r\n\r\n    function add(\r\n        uint256 _typeid,\r\n\t\tbytes32 _name,\r\n\t\taddress _tokenAddress,\r\n\t\tstring calldata _partnerIssuer\r\n    ) external onlyOwner {\r\n         _storage.insert(_typeid, _name, _tokenAddress, _partnerIssuer);\r\n        emit AddedAsset(_typeid, _name);\r\n    }\r\n\r\n    function remove(uint256 _typeid) external onlyOwner {\r\n        _storage.del(_typeid);\r\n        emit RemovedAsset(_typeid);\r\n    }\r\n\r\n    function getAsset(uint256 _typeid) external view returns (uint256, bytes32, address, string memory) {\r\n        (uint256 typeid, bytes32 name, address tokenAddress, string memory partnerIssuer) = _storage.search(_typeid);\r\n\t\treturn (typeid, name, tokenAddress, partnerIssuer);\r\n    }\r\n\r\n    function getAssetIds() external view returns (uint256[] memory assetIds) {\r\n        assetIds = _storage.getAssetIds();\r\n    }\r\n\r\n    function getLockedFunds(address _tokenAddress) external view returns (uint256) {\r\n        return IToken(_tokenAddress).balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"AddedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"memo\",\"type\":\"bytes32\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeid\",\"type\":\"uint256\"}],\"name\":\"RemovedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnLocked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_storage\",\"outputs\":[{\"internalType\":\"contract Data\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeid\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_partnerIssuer\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeid\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getLockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_memo\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeid\",\"type\":\"uint256\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Custodian","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"constantinople","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3a2613fe3d8760bd725595699ca9ba6815928f46652caad63d4ea9faecef5574"}]}