{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.8 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.3.0\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.3.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File contracts/interfaces/IGLY.sol\r\n\r\npragma solidity ^0.7.3;\r\n\r\ninterface IGLY is IERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n}\r\n\r\n// File contracts/Staking.sol\r\n\r\npragma solidity ^0.7.3;\r\n\r\ncontract Staking is Context {\r\n    using SafeMath for uint256;\r\n\r\n    struct StakingInfo {\r\n        uint256 amount;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardRate;\r\n    }\r\n\r\n    IGLY stakingToken;\r\n\r\n    uint256[] rewardRates = [75, 75, 75, 50, 50, 50, 35, 35, 35, 20, 20, 20, 7];\r\n    uint256 public stakingStart;\r\n\r\n    uint256 _totalStakes;\r\n    mapping(address => StakingInfo[]) internal stakes;\r\n\r\n    constructor(IGLY _stakingToken, uint256 _stakingStart) {\r\n        stakingToken = _stakingToken;\r\n        stakingStart = _stakingStart;\r\n    }\r\n\r\n    event Staked(address staker, uint256 amount);\r\n    event Unstaked(address staker, uint256 amount);\r\n    event ClaimedReward(address staker, uint256 amount);\r\n\r\n    function getStakingStart() public view returns (uint256) {\r\n        return stakingStart;\r\n    }\r\n\r\n    function totalStakes() public view returns (uint256) {\r\n        return _totalStakes;\r\n    }\r\n\r\n    function isStakeHolder(address _address) public view returns (bool) {\r\n        return stakes[_address].length > 0;\r\n    }\r\n\r\n    function totalStakeOf(address _stakeHolder) public view returns (uint256) {\r\n        uint256 _total = 0;\r\n        for (uint256 j = 0; j < stakes[_stakeHolder].length; j += 1) {\r\n            uint256 amount = stakes[_stakeHolder][j].amount;\r\n            _total = _total.add(amount);\r\n        }\r\n\r\n        return _total;\r\n    }\r\n\r\n    function getRewardRate(uint256 _updateTime)\r\n        public\r\n        view\r\n        returns (uint256 _rewardRate)\r\n    {\r\n        _rewardRate = _updateTime.sub(stakingStart).div(30 days);\r\n        if (_rewardRate > 13) _rewardRate = 12;\r\n    }\r\n\r\n    function stake(uint256 _amount) public {\r\n        require(stakingStart <= block.timestamp, \"Staking is not started\");\r\n        require(\r\n            stakingToken.transferFrom(_msgSender(), address(this), _amount),\r\n            \"Stake required!\"\r\n        );\r\n\r\n        uint256 lastUpdateTime = block.timestamp;\r\n\r\n        stakes[_msgSender()].push(\r\n            StakingInfo(_amount, lastUpdateTime, getRewardRate(lastUpdateTime))\r\n        );\r\n        _totalStakes = _totalStakes.add(_amount);\r\n        emit Staked(_msgSender(), _amount);\r\n    }\r\n\r\n    function unstake() public {\r\n        uint256 withdrawAmount = 0;\r\n        uint256 _staked = totalStakeOf(_msgSender());\r\n        uint256 _reward = rewardOf(_msgSender());\r\n\r\n        stakingToken.transfer(_msgSender(), _staked);\r\n        stakingToken.mint(_msgSender(), _reward);\r\n        _totalStakes = _totalStakes.sub(_staked);\r\n        delete stakes[_msgSender()];\r\n        emit Unstaked(_msgSender(), withdrawAmount);\r\n    }\r\n\r\n    function calculateReward(\r\n        uint256 _lastUpdateTime,\r\n        uint256 _rewardRate,\r\n        uint256 _amount\r\n    ) internal view returns (uint256) {\r\n        uint256 rewardAmount;\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 updateTime = _lastUpdateTime;\r\n        uint256 rate = _rewardRate;\r\n\r\n        uint256 mod =\r\n            updateTime.sub(stakingStart).mod(30 days).div(1 days).mul(1 days);\r\n\r\n        if (updateTime + 30 days - mod <= currentTime) {\r\n            rewardAmount = rewardAmount.add(\r\n                _amount\r\n                    .mul(rewardRates[rate])\r\n                    .mul(30 days - mod)\r\n                    .div(365 days)\r\n                    .div(100)\r\n            );\r\n\r\n            updateTime = updateTime + 30 days - mod;\r\n            if (rate < 12) rate = rate.add(1);\r\n        }\r\n\r\n        while (updateTime + 30 days <= currentTime) {\r\n            rewardAmount = rewardAmount.add(\r\n                _amount.mul(rewardRates[rate]).mul(30 days).div(365 days).div(\r\n                    100\r\n                )\r\n            );\r\n            updateTime = updateTime + 30 days;\r\n            if (rate < 12) rate = rate.add(1);\r\n        }\r\n\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice A method to allow a stakeholder to check his rewards.\r\n     * @param _stakeholder The stakeholder to check rewards for.\r\n     */\r\n    function rewardOf(address _stakeholder) public view returns (uint256) {\r\n        uint256 rewardAmount = 0;\r\n        for (uint256 j = 0; j < stakes[_stakeholder].length; j += 1) {\r\n            uint256 amount = stakes[_stakeholder][j].amount;\r\n            uint256 rate = stakes[_stakeholder][j].rewardRate;\r\n            uint256 reward =\r\n                calculateReward(\r\n                    stakes[_stakeholder][j].lastUpdateTime,\r\n                    rate,\r\n                    amount\r\n                );\r\n            rewardAmount = rewardAmount.add(reward);\r\n        }\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice A method to check if the holder can claim rewards\r\n     */\r\n    function isClaimable() public view returns (bool, uint256) {\r\n        uint256 reward = rewardOf(_msgSender());\r\n\r\n        return (reward > 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to allow a stakeholder to withdraw his rewards.\r\n     */\r\n    function claimReward() public {\r\n        address stakeholder = _msgSender();\r\n\r\n        uint256 rewardAmount = rewardOf(stakeholder);\r\n\r\n        require(rewardAmount > 0, \"Reward is empty!\");\r\n\r\n        stakingToken.mint(_msgSender(), rewardAmount);\r\n\r\n        for (uint256 j = 0; j < stakes[stakeholder].length; j += 1) {\r\n            uint256 currentTime = block.timestamp;\r\n            uint256 _lastUpdateTime =\r\n                currentTime -\r\n                    currentTime.sub(stakingStart).mod(30 days).div(1 days).mul(\r\n                        1 days\r\n                    );\r\n            stakes[stakeholder][j].lastUpdateTime = _lastUpdateTime;\r\n            stakes[stakeholder][j].rewardRate = getRewardRate(_lastUpdateTime);\r\n        }\r\n\r\n        emit ClaimedReward(_msgSender(), rewardAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IGLY\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingStart\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateTime\",\"type\":\"uint256\"}],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"name\":\"totalStakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000299948bc2ca54a5e814b19849327a6d9a0e7de1b000000000000000000000000000000000000000000000000000000006037cbc8","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://864d9e797c50b119ba586709066b6ca7d4ffc10c60fd9c16a7e2cec66b99d5b4"}]}