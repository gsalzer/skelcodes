{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ILPMining {\r\n    function add(address pool, uint256 index, uint256 allocP) external;\r\n    function set(uint256 pid, uint256 allocPoint) external;\r\n    function updateReferenceToken(uint256 pid, uint256 rIndex) external;\r\n    function batchSharePools() external;\r\n    function onTransferLiquidity(address from, address to, uint256 lpAmount) external;\r\n    function claimUserShares(uint pid, address user) external;\r\n    function claimLiquidityShares(address user, address[] calldata tokens, uint256[] calldata balances, uint256[] calldata weights, uint256 amount, bool _add) external;\r\n}\r\n\r\ncontract PriceOracle is Ownable {\r\n\r\n    struct PriceInfo {\r\n        uint8 decimal;\r\n        uint256 price;\r\n    }\r\n\r\n    // contract governors\r\n    mapping(address => bool) private governors;\r\n    modifier onlyGovernor{\r\n        require(governors[_msgSender()], \"PriceOracle: caller is not the governor\");\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) public tokenIn;\r\n    // tokens price\r\n    mapping(address => PriceInfo) public tokenPrice;\r\n\r\n    // event\r\n    event RequestTokenPrice(address token, uint256 oldPrice);\r\n    event RespondTokenPrice(address token, uint256 oldPrice, uint256 newPrice);\r\n\r\n    constructor() public{\r\n        governors[_msgSender()] = true;\r\n    }\r\n\r\n    // add governor\r\n    function addGovernor(address governor) onlyOwner external {\r\n        governors[governor] = true;\r\n    }\r\n\r\n    // remove governor\r\n    function removeGovernor(address governor) onlyOwner external {\r\n        governors[governor] = false;\r\n    }\r\n\r\n    // add token price info\r\n    function addTokenInfo(address token, uint8 _decimal, uint256 _price) onlyOwner public {\r\n        require(!tokenIn[token], \"PriceOracle: duplicate token info\");\r\n        tokenPrice[token] = PriceInfo({\r\n            decimal : _decimal,\r\n            price : _price\r\n            });\r\n        tokenIn[token] = true;\r\n    }\r\n\r\n    //\r\n    function requestTokenPrice(address token) external returns (uint8 decimal, uint256 price){\r\n        decimal = tokenPrice[token].decimal;\r\n        price = tokenPrice[token].price;\r\n        emit RequestTokenPrice(token, price);\r\n    }\r\n\r\n\r\n    function respondTokenPrice(address token, uint256 newPrice, ILPMining lpMine) onlyGovernor external {\r\n        require(tokenIn[token], \"PriceOracle: token not exist\");\r\n        uint256 oldPrice = tokenPrice[token].price;\r\n        tokenPrice[token].price = newPrice;\r\n        lpMine.batchSharePools();\r\n        emit RespondTokenPrice(token, oldPrice, newPrice);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"}],\"name\":\"RequestTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"RespondTokenPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"requestTokenPrice\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract ILPMining\",\"name\":\"lpMine\",\"type\":\"address\"}],\"name\":\"respondTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd9d3d211c1652172290fe3520e97ccf7055d14ef6e604b5affe63cd51f4a94f"}]}