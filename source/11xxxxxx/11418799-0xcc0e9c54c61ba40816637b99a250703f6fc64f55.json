{"status":"1","message":"OK","result":[{"SourceCode":"// File: localhost/contracts/interfaces/IWETH.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n// File: localhost/contracts/access/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: localhost/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: localhost/contracts/interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: localhost/contracts/utils/SafeERC20.sol\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File: browser/github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/XTrinity.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\nlibrary UniswapV2ExchangeLib {\r\n    //using Math for uint256;\r\n    using SafeMath for uint256;\r\n    //using UniversalERC20 for IERC20;\r\n    \r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getReturn(\r\n        IUniswapV2Exchange exchange,\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint amountIn\r\n    ) internal view returns (uint256 result, bool needSync, bool needSkim) {\r\n        uint256 reserveIn = fromToken.balanceOf(address(exchange));\r\n        uint256 reserveOut = destToken.balanceOf(address(exchange));\r\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\r\n        if (fromToken > destToken) {\r\n            (reserve0, reserve1) = (reserve1, reserve0);\r\n        }\r\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\r\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(min(reserveOut, reserve1));\r\n        uint256 denominator = min(reserveIn, reserve0).mul(1000).add(amountInWithFee);\r\n        result = (denominator == 0) ? 0 : numerator.div(denominator);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapV2Exchange pair);\r\n}\r\n\r\ninterface IUniswapV2Exchange {\r\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n}\r\n\r\ninterface IMooniswap {\r\n    function fee() external view returns (uint256);\r\n\r\n    function tokens(uint256 i) external view returns (IERC20);\r\n\r\n    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable returns(uint256 fairSupply);\r\n\r\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\r\n\r\n    function getBalanceForAddition(IERC20 token) external view returns(uint256);\r\n\r\n    function getBalanceForRemoval(IERC20 token) external view returns(uint256);\r\n\r\n    function getReturn(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    )\r\n        external\r\n        view\r\n        returns(uint256 returnAmount);\r\n\r\n    function swap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        address referral\r\n    )\r\n        external\r\n        payable\r\n        returns(uint256 returnAmount);\r\n}\r\n\r\ninterface IMooniswapRegistry {\r\n    function pools(IERC20 token1, IERC20 token2) external view returns(IMooniswap);\r\n    function isPool(address addr) external view returns(bool);\r\n}\r\n\r\ncontract XTrinity is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    using UniswapV2ExchangeLib for IUniswapV2Exchange;\r\n    \r\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\r\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 private constant WETH_ADDRESS = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    \r\n    address constant UNI_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address constant SUSHI_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\r\n    address constant MOONI_FACTORY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\r\n    \r\n    address constant BONUS_ADDRESS = 0x8c545be506a335e24145EdD6e01D2754296ff018;\r\n    IUniswapV2Factory constant internal uniV2 = IUniswapV2Factory(UNI_FACTORY);\r\n    IUniswapV2Factory constant internal sushi = IUniswapV2Factory(SUSHI_FACTORY);\r\n    IMooniswapRegistry constant internal mooni = IMooniswapRegistry(MOONI_FACTORY);\r\n    IWETH constant internal weth = IWETH(address(WETH_ADDRESS));\r\n    \r\n    //uint private constant fee = 3000000000000000;\r\n    //uint private constant FEE_DENOMINATOR = 1e18;\r\n    uint private constant PC_DENOMINATOR = 1e5;\r\n    address[] private exchanges = [UNI_FACTORY, SUSHI_FACTORY, MOONI_FACTORY];\r\n    uint private constant ex_count = 3;\r\n    \r\n    //IWETH(WETH_ADDRESS).deposit{value: msg.value}();\r\n    //IWETH(WETH_ADDRESS).withdraw(returnAmount);\r\n    //IERC20 private constant WETH_ADDRESS = IERC20(0xc778417E063141139Fce010982780140Aa0cD5Ab);\r\n    \r\n    \r\n    bool private initialized;\r\n    \r\n    function init() virtual public {\r\n        require(!initialized, \"Is already been initialized\");\r\n        _init();\r\n    }\r\n    \r\n    function _init() internal {\r\n        initialized = true;\r\n        //exchange = Exchange.ONESPLIT;\r\n        Ownable.initialize(); // Do not forget this call!\r\n    }    \r\n    \r\n    function reInit() virtual public onlyOwner {\r\n        _init();\r\n    }\r\n    \r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\r\n    }\r\n    \r\n    function isWETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(WETH_ADDRESS));\r\n    }\r\n    \r\n    /*\r\n    function _getReturn(uint256 amount, uint256 srcBalance, uint256 dstBalance) internal view returns(uint256) {\r\n        uint256 taxedAmount = amount.sub(amount.mul(fee).div(FEE_DENOMINATOR));\r\n        return taxedAmount.mul(dstBalance).div(srcBalance.add(taxedAmount));\r\n    }*/\r\n    \r\n    //Uni + Sushi\r\n    \r\n    /*\r\n    function getUniReserves(IUniswapV2Factory factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        IUniswapV2Exchange pair = uniFactory.getPair(_from, _to);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Exchange(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n    \r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    \r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }*/\r\n    \r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n    \r\n    function getReserves(IERC20 fromToken, IERC20 toToken, address factory) public view returns(uint reserveA, uint reserveB) {\r\n        if (factory != MOONI_FACTORY) {\r\n            //UNI\r\n            IUniswapV2Factory uniFactory = IUniswapV2Factory(factory);\r\n            IERC20 _from = isETH(fromToken) ? WETH_ADDRESS : fromToken;\r\n            IERC20 _to = isETH(toToken) ? WETH_ADDRESS : toToken;\r\n            \r\n            IUniswapV2Exchange pair = uniFactory.getPair(_from, _to);\r\n            \r\n            if (address(pair) != address(0)) {\r\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\r\n                \r\n                (address token0,) = sortTokens(address(fromToken), address(toToken));\r\n                (reserveA, reserveB) = address(fromToken) == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n                }\r\n        } else {\r\n            // MOONI\r\n            IERC20 _from = isWETH(fromToken) ? ZERO_ADDRESS : fromToken;\r\n            IERC20 _to = isWETH(toToken) ? ZERO_ADDRESS : toToken;\r\n        \r\n            IMooniswap pair = mooni.pools(_from, _to);\r\n        \r\n            if (address(pair) != address(0)) {\r\n                uint reserve0 = pair.getBalanceForAddition(_from);\r\n                uint reserve1 = pair.getBalanceForRemoval(_to);\r\n                (reserveA, reserveB) = (reserve0, reserve1);\r\n                }\r\n            }   \r\n        }\r\n        \r\n    /*\r\n    function getMooniReserves(IERC20 fromToken, IERC20 toToken) public view returns(uint256, uint256) {\r\n        uint256 fromBalance;\r\n        uint256 destBalance;\r\n        \r\n        //UNI\r\n        IERC20 _from = isWETH(fromToken) ? ZERO_ADDRESS : fromToken;\r\n        IERC20 _to = isWETH(toToken) ? ZERO_ADDRESS : toToken;\r\n        \r\n        IMooniswap pair = mooni.pools(_from, _to);\r\n        \r\n        if (address(pair) != address(0)) {\r\n            fromBalance = pair.getBalanceForAddition(_from);\r\n            destBalance = pair.getBalanceForRemoval(_to);\r\n        }\r\n        \r\n        return (fromBalance, destBalance);\r\n    }*/\r\n    \r\n    function getFullReserves (IERC20 fromToken, IERC20 toToken) public view returns \r\n    (uint fromTotal, uint destTotal, uint[ex_count] memory dist, uint[ex_count][2] memory res) {\r\n        uint fromBalance; //optional\r\n        uint destBalance; //optional\r\n        //uint mulReserve;\r\n        uint fullTotal;\r\n        \r\n        //uint [ex_count][2] memory res;\r\n        \r\n        for (uint i = 0; i < ex_count; i++) {\r\n            (uint balance0, uint balance1) = getReserves(fromToken, toToken, exchanges[i]);\r\n            fromBalance += balance0;\r\n            destBalance += balance1;\r\n            fullTotal += balance0.add(balance1);\r\n            (res[i][0], res[i][1]) = (balance0, balance1);\r\n        }\r\n        \r\n        //optional\r\n        (fromTotal, destTotal) = (fromBalance, destBalance);\r\n        \r\n        //uint fullTotal = fromTotal.add(destTotal);\r\n        //uint256[ex_count] memory dist;// = new uint256[](ex_count);\r\n        \r\n        for (uint i = 0; i < ex_count; i++) {\r\n            dist[i] = (res[i][0].add(res[i][1])).mul(PC_DENOMINATOR).div(fullTotal);\r\n        }\r\n        \r\n        //distribution = dist;\r\n        //reserves = res;\r\n    }\r\n    \r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    function quote(IERC20 fromToken, IERC20 toToken, uint amount, uint minPc) public view returns (uint returnAmount, uint[ex_count] memory swapAmounts) {\r\n        (,, uint[ex_count] memory distribution, uint[ex_count][2] memory reserves) \r\n        = getFullReserves (fromToken, toToken);\r\n        \r\n        uint lastNonZeroIndex = ex_count;\r\n        for (uint i = distribution.length-1; i >= 0; i--) {\r\n            if (distribution[i] > minPc) {\r\n                //parts = parts.add(distribution[i]);\r\n                lastNonZeroIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        uint remainingAmount = amount;\r\n        uint addDistribution;\r\n        \r\n        for (uint i = 0; i < distribution.length; i++) {\r\n            \r\n            if (distribution[i] <= minPc) {\r\n                addDistribution += distribution[i];\r\n                continue;\r\n            }\r\n            uint swapAmount = amount.mul(distribution[i].add(addDistribution.div(distribution.length-i))).div(PC_DENOMINATOR);\r\n            if (i == lastNonZeroIndex) {\r\n                swapAmount = remainingAmount;\r\n                swapAmounts[i] = swapAmount;\r\n            }\r\n            returnAmount += getAmountOut(swapAmount, reserves[i][0], reserves[i][1]);\r\n            remainingAmount -= swapAmount;\r\n        }\r\n    }\r\n    \r\n    function swap (IERC20 fromToken, IERC20 toToken, uint amount, uint minPc) external returns (uint returnAmount) {\r\n        //uint[ex_count] memory swapAmounts1;\r\n\r\n        bool changed = false;\r\n        (uint returnDirect, uint[ex_count] memory swapAmounts1) = quote(fromToken, toToken, amount, minPc);\r\n        if (toToken != WETH_ADDRESS) {\r\n            (uint returnAmountETH, uint[ex_count] memory swapAmounts2) = quote(fromToken, WETH_ADDRESS, amount, minPc);\r\n            (uint returnAmountVia, uint[ex_count] memory swapAmounts3) = quote(WETH_ADDRESS, toToken, returnAmountETH, minPc);\r\n            if (returnAmountVia > returnDirect) {\r\n                for (uint i = 0; i < swapAmounts2.length; i++) {\r\n                if (swapAmounts1[i] > 0) {\r\n                    if (exchanges[i] != MOONI_FACTORY) {\r\n                        _swapOnUniswapV2Internal(fromToken, WETH_ADDRESS, swapAmounts2[i]);\r\n                        } else {\r\n                        _swapOnMooniswap(fromToken, WETH_ADDRESS, swapAmounts2[i]);\r\n                        }\r\n                    }\r\n                }\r\n                for (uint i = 0; i < swapAmounts3.length; i++) {\r\n                if (swapAmounts1[i] > 0) {\r\n                    if (exchanges[i] != MOONI_FACTORY) {\r\n                        _swapOnUniswapV2Internal(WETH_ADDRESS, toToken, swapAmounts3[i]);\r\n                        } else {\r\n                        _swapOnMooniswap(WETH_ADDRESS, toToken, swapAmounts3[i]);\r\n                        }\r\n                    }\r\n                }    \r\n                changed = true;\r\n            }\r\n        } \r\n        \r\n        if (!changed) {\r\n            for (uint i = 0; i < swapAmounts1.length; i++) {\r\n            if (swapAmounts1[i] > 0) {\r\n                if (exchanges[i] != MOONI_FACTORY) {\r\n                    _swapOnUniswapV2Internal(fromToken, toToken, swapAmounts1[i]);\r\n                    } else {\r\n                    _swapOnMooniswap(fromToken, toToken, swapAmounts1[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        returnAmount = toToken.balanceOf(address(this));\r\n    }\r\n    \r\n    // to withdraw token from the contract\r\n    function transferTokenBack(address TokenAddress)\r\n        external\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        IERC20 Token = IERC20(TokenAddress);\r\n        uint balance = Token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            Token.safeTransfer(msg.sender, balance);\r\n        }\r\n\r\n        uint ETHbalance = address(this).balance;\r\n        if (ETHbalance > 0) {\r\n            msg.sender.transfer(ETHbalance);\r\n        }\r\n\r\n        return balance;\r\n    }\r\n    \r\n    function _swapOnMooniswap(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n         /*flags*/\r\n    ) internal {\r\n        IMooniswap mooniswap = mooni.pools(\r\n            isWETH(fromToken) ? ZERO_ADDRESS : fromToken,\r\n            isWETH(destToken) ? ZERO_ADDRESS : destToken\r\n        );\r\n        \r\n        if (isWETH(fromToken)) {\r\n            fromToken = ZERO_ADDRESS;\r\n            weth.withdraw(amount);\r\n        } else {\r\n            if (fromToken.allowance(address(this), address(mooniswap)) != uint256(-1)) {\r\n                fromToken.safeApprove(address(mooniswap), uint256(-1));\r\n            }\r\n        }\r\n        \r\n        mooniswap.swap{value: fromToken==ZERO_ADDRESS ? amount : 0}(fromToken,\r\n            isWETH(destToken) ? ZERO_ADDRESS : destToken,\r\n            amount,\r\n            0,\r\n            BONUS_ADDRESS\r\n        );\r\n        \r\n        if (isWETH(destToken)) {\r\n            weth.deposit{value: address(this).balance}();\r\n        }\r\n    }\r\n    \r\n    function _swapOnUniswapV2Internal(\r\n        IERC20 fromToken,\r\n        IERC20 destToken,\r\n        uint256 amount\r\n    ) internal returns(uint256 returnAmount) {\r\n        if (isETH(fromToken)) {\r\n            weth.deposit{value: amount}();\r\n            fromToken = WETH_ADDRESS;\r\n        }\r\n\r\n        //IERC20 fromTokenReal = isETH() ? weth : fromToken;\r\n        destToken = isETH(destToken) ? WETH_ADDRESS : destToken;\r\n        IUniswapV2Exchange exchange = uniV2.getPair(fromToken, destToken);\r\n        bool needSync;\r\n        bool needSkim;\r\n        (returnAmount, needSync, needSkim) = exchange.getReturn(fromToken, destToken, amount);\r\n        if (needSync) {\r\n            exchange.sync();\r\n        }\r\n        else if (needSkim) {\r\n            exchange.skim(BONUS_ADDRESS);\r\n        }\r\n\r\n        fromToken.safeTransfer(address(exchange), amount);\r\n        if (uint(address(fromToken)) < uint(address(destToken))) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (destToken == WETH_ADDRESS) {\r\n            weth.withdraw(WETH_ADDRESS.balanceOf(address(this)));\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"getFullReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"dist\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3][2]\",\"name\":\"res\",\"type\":\"uint256[3][2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPc\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"swapAmounts\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPc\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"transferTokenBack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XTrinity","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0227c97abffe61fc062dc693c96247395e92c312af85784d11318e06dbabf121"}]}