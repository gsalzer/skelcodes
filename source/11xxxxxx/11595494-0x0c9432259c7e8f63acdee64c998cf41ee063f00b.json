{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Token {\r\n    \r\n    uint8 public decimals;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\r\n}\r\n\r\ncontract BulkSend {\r\n    using SafeMath for uint256;\r\n    \r\n    address public owner;\r\n    uint public tokenSendFee; // in wei\r\n    uint public ethSendFee; // in wei\r\n\r\n    \r\n    constructor() public payable{\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    function bulkSendEth(address[] addresses, uint256[] amounts) public payable returns(bool success){\r\n        uint total = 0;\r\n        for(uint8 i = 0; i < amounts.length; i++){\r\n            total = total.add(amounts[i]);\r\n        }\r\n        \r\n        //ensure that the ethreum is enough to complete the transaction\r\n        uint requiredAmount = total.add(ethSendFee * 1 wei); //.add(total.div(100));\r\n        require(msg.value >= (requiredAmount * 1 wei));\r\n        \r\n        //transfer to each address\r\n        for (uint8 j = 0; j < addresses.length; j++) {\r\n            addresses[j].transfer(amounts[j] * 1 wei);\r\n        }\r\n        \r\n        //return change to the sender\r\n        if(msg.value * 1 wei > requiredAmount * 1 wei){\r\n            uint change = msg.value.sub(requiredAmount);\r\n            msg.sender.transfer(change * 1 wei);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getbalance(address addr) public constant returns (uint value){\r\n        return addr.balance;\r\n    }\r\n    \r\n    function deposit() payable public returns (bool){\r\n        return true;\r\n    }\r\n    \r\n    function withdrawEther(address addr, uint amount) public onlyOwner returns(bool success){\r\n        addr.transfer(amount * 1 wei);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawToken(Token tokenAddr, address _to, uint _amount) public onlyOwner returns(bool success){\r\n        tokenAddr.transfer(_to, _amount );\r\n        return true;\r\n    }\r\n    \r\n    function bulkSendToken(Token tokenAddr, address[] addresses, uint256[] amounts) public payable returns(bool success){\r\n        uint total = 0;\r\n        address multisendContractAddress = this;\r\n        for(uint8 i = 0; i < amounts.length; i++){\r\n            total = total.add(amounts[i]);\r\n        }\r\n        \r\n        require(msg.value * 1 wei >= tokenSendFee * 1 wei);\r\n        \r\n        // check if user has enough balance\r\n        require(total <= tokenAddr.allowance(msg.sender, multisendContractAddress));\r\n        \r\n        // transfer token to addresses\r\n        for (uint8 j = 0; j < addresses.length; j++) {\r\n            tokenAddr.transferFrom(msg.sender, addresses[j], amounts[j]);\r\n        }\r\n        // transfer change back to the sender\r\n        if(msg.value * 1 wei > (tokenSendFee * 1 wei)){\r\n            uint change = (msg.value).sub(tokenSendFee);\r\n            msg.sender.transfer(change * 1 wei);\r\n        }\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function setTokenFee(uint _tokenSendFee) public onlyOwner returns(bool success){\r\n        tokenSendFee = _tokenSendFee;\r\n        return true;\r\n    }\r\n    \r\n    function setEthFee(uint _ethSendFee) public onlyOwner returns(bool success){\r\n        ethSendFee = _ethSendFee;\r\n        return true;\r\n    }\r\n    \r\n    function destroy (address _to) public onlyOwner {\r\n        selfdestruct(_to);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkSendToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethSendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenSendFee\",\"type\":\"uint256\"}],\"name\":\"setTokenFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethSendFee\",\"type\":\"uint256\"}],\"name\":\"setEthFee\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getbalance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkSendEth\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSendFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"BulkSend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c6f21efd2fabb0b435ec3739aa72100ab36f0063bc3aa55f730166ef0efdbc98"}]}