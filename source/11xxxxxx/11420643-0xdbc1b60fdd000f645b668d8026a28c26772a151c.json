{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract TellorWrapper {\r\n    function balanceOf(address _user) external view returns (uint256);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    \r\n    function withdrawStake() external;\r\n    function getUintVar(bytes32 _data) public view returns (uint256);\r\n}\r\n\r\ncontract TellorC {\r\n    address private tellor = 0x0Ba45A8b5d5575935B8158a88C631E9F9C95a2e5;\r\n\r\n    bytes32 constant slotProgress = 0x6c505cb2db6644f57b42d87bd9407b0f66788b07d0617a2bc1356a0e69e66f9a; // keccak256(\"slotProgress\")\r\n    address private owner;\r\n    address private miner;\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function changeMiner(address _addr) external {\r\n        require(msg.sender == owner);\r\n        \r\n        miner = _addr;\r\n    }\r\n\r\n    function withdrawTrb(uint256 _amount) external {\r\n        require(msg.sender == owner);\r\n\r\n        TellorWrapper(tellor).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawEth(uint256 _amount) external {\r\n        require(msg.sender == owner);\r\n\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    function depositStake() external {\r\n        require(msg.sender == owner);\r\n\r\n        TellorC(tellor).depositStake();\r\n    }\r\n\r\n    function requestStakingWithdraw() external {\r\n        require(msg.sender == owner);\r\n\r\n        TellorC(tellor).requestStakingWithdraw();\r\n    }\r\n\r\n    // Use finalize() if possible\r\n    function withdrawStake() external {\r\n        require(msg.sender == owner);\r\n\r\n        TellorC(tellor).withdrawStake();\r\n    }\r\n\r\n    function finalize() external {\r\n        require(msg.sender == owner);\r\n\r\n        TellorWrapper(tellor).withdrawStake();\r\n        uint256 _balance = TellorWrapper(tellor).balanceOf(address(this));\r\n        TellorWrapper(tellor).transfer(msg.sender, _balance);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function submitMiningSolution(string calldata _nonce,uint256[5] calldata _requestId, uint256[5] calldata _value) external {\r\n        require(TellorWrapper(tellor).getUintVar(slotProgress) < 4 || gasleft() > 1000000, \"X\");\r\n        require(msg.sender == miner || msg.sender == owner, \"Unauthorized\");\r\n\r\n        TellorC(tellor).submitMiningSolution(_nonce, _requestId, _value);\r\n    }\r\n    \r\n    function() external {\r\n        require(msg.sender == address(0), \"Not allowed\"); // Dont allow actual calls, only views\r\n        \r\n        address addr = tellor;\r\n        bytes memory _calldata = msg.data;\r\n        assembly {\r\n            let result := call(not(0), addr, 0, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result\r\n                case 0 {\r\n                    revert(ptr, size)\r\n                }\r\n                default {\r\n                    return(ptr, size)\r\n                }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nonce\",\"type\":\"string\"},{\"internalType\":\"uint256[5]\",\"name\":\"_requestId\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_value\",\"type\":\"uint256[5]\"}],\"name\":\"submitMiningSolution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTrb\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TellorC","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://db21e1432422bed4452de1ec057aca180783c40c121cd0b846f0864b94c08ac1"}]}