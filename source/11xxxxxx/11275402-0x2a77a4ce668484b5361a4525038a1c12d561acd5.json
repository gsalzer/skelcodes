{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity \\u003e= 0.6.4;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n  function mint(address account, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"router.sol\":{\"content\":\"//////////////////////////////////////////////////\\n//SYNLEV ROUTER CONTRACT V 1.0.0\\n//////////////////////////\\n\\npragma solidity \\u003e= 0.6.4;\\n\\nimport \\u0027./IERC20.sol\\u0027;\\nimport \\u0027./vaultInterface.sol\\u0027;\\n\\ncontract router {\\n\\n  constructor() public { }\\n\\n  modifier ensure(uint deadline) {\\n    require(deadline \\u003e= block.timestamp, \\u0027SynLevRouter: EXPIRED\\u0027);\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  function buyBullTokens(\\n    address payable vault,\\n    uint256 minPrice,\\n    uint256 maxPrice,\\n    uint256 deadline\\n  ) public payable ensure(deadline) {\\n    vaultInterface ivault = vaultInterface(vault);\\n    address token = ivault.getBullToken();\\n    ivault.updatePrice();\\n    uint256 price = ivault.getPrice(token);\\n    require(price \\u003e= minPrice \\u0026\\u0026 price \\u003c= maxPrice, \\u0027SynLevRouter: TOKEN PRICE OUT OF RANGE\\u0027);\\n    vault.transfer(address(this).balance);\\n    ivault.tokenBuy(token, msg.sender);\\n  }\\n\\n  function sellBullTokens(\\n    address vault,\\n    uint256 amount,\\n    uint256 minPrice,\\n    uint256 maxPrice,\\n    uint256 deadline\\n  ) public ensure(deadline) {\\n    vaultInterface ivault = vaultInterface(vault);\\n    address token = ivault.getBullToken();\\n    ivault.updatePrice();\\n\\n    IERC20 itoken = IERC20(token);\\n    uint256 price = ivault.getPrice(token);\\n    require(price \\u003e= minPrice \\u0026\\u0026 price \\u003c= maxPrice, \\u0027SynLevRouter: TOKEN PRICE OUT OF RANGE\\u0027);\\n    require(itoken.transferFrom(msg.sender, vault, amount));\\n    ivault.tokenSell(token, msg.sender);\\n  }\\n\\n  function buyBearTokens(\\n    address payable vault,\\n    uint256 minPrice,\\n    uint256 maxPrice,\\n    uint256 deadline\\n  ) public payable ensure(deadline) {\\n    vaultInterface ivault = vaultInterface(vault);\\n    address token = ivault.getBearToken();\\n    ivault.updatePrice();\\n    uint256 price = ivault.getPrice(token);\\n    require(price \\u003e= minPrice \\u0026\\u0026 price \\u003c= maxPrice, \\u0027SynLevRouter: TOKEN PRICE OUT OF RANGE\\u0027);\\n    vault.transfer(address(this).balance);\\n    ivault.tokenBuy(token, msg.sender);\\n  }\\n\\n  function sellBearTokens(\\n    address vault,\\n    uint256 amount,\\n    uint256 minPrice,\\n    uint256 maxPrice,\\n    uint256 deadline\\n  ) public ensure(deadline) {\\n    vaultInterface ivault = vaultInterface(vault);\\n    address token = ivault.getBearToken();\\n    ivault.updatePrice();\\n    IERC20 itoken = IERC20(token);\\n    uint256 price = ivault.getPrice(token);\\n    require(price \\u003e= minPrice \\u0026\\u0026 price \\u003c= maxPrice, \\u0027SynLevRouter: TOKEN PRICE OUT OF RANGE\\u0027);\\n    require(itoken.transferFrom(msg.sender, vault, amount));\\n    ivault.tokenSell(token, msg.sender);\\n  }\\n\\n\\n\\n}\\n\"},\"vaultInterface.sol\":{\"content\":\"pragma solidity \\u003e= 0.6.6;\\n\\ninterface vaultInterface {\\n  function tokenBuy(address token, address account) external;\\n  function tokenSell(address token, address payable account) external;\\n  function addLiquidity(address account) external;\\n  function removeLiquidity(uint256 shares) external;\\n  function updatePrice() external;\\n\\n  function getActive() external view returns(bool);\\n  function getMultiplier() external view returns(uint256);\\n  function getBullToken() external view returns(address);\\n  function getBearToken() external view returns(address);\\n  function getLatestRoundId() external view returns(uint256);\\n  function getPrice(address token) external view returns(uint256);\\n  function getEquity(address token) external view returns(uint256);\\n  function getBuyFee() external view returns(uint256);\\n  function getSellFee() external view returns(uint256);\\n  function getTotalLiqShares() external view returns(uint256);\\n  function getLiqFees() external view returns(uint256);\\n  function getBalanceEquity() external view returns(uint256);\\n  function getLiqTokens(address token) external view returns(uint256);\\n  function getLiqEquity(address token) external view returns(uint256);\\n  function getUserShares(address account) external view returns(uint256);\\n\\n  function getTotalEquity() external view returns(uint256);\\n  function getTokenEquity(address token) external view returns(uint256);\\n  function getTotalLiqEquity() external view returns(uint256);\\n  function getDepositEquity() external view returns(uint256);\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyBearTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyBullTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellBearTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellBullTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"router","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f6b4adb3629909a4160deb77c31f44150fa0ad0bcf5b6a48b56b8312fc294539"}]}