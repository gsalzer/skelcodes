{"status":"1","message":"OK","result":[{"SourceCode":"{\"BurnableToken.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"ERC20Basic.sol\\\";\\n\\n/// @title BurnableToken\\ncontract BurnableToken is ERC20Basic {\\n    using SafeMath for uint256;\\n\\n    event Burn(address indexed burner, uint256 value);\\n\\n    function burn(uint256 _value) public returns (bool){\\n        address _who = msg.sender;\\n        require(_value \\u003c= balances[_who]);\\n\\n        balances[_who] = balances[_who].sub(_value);\\n        totalSupply_ = totalSupply_.sub(_value);\\n        emit Burn(_who, _value);\\n        emit Transfer(_who, address(0), _value);\\n\\n        return true;\\n    }\\n}\\n\"},\"CanReclaimToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"ERC20If.sol\\\";\\nimport \\\"OwnableIf.sol\\\";\\n\\n/// @title CanReclaimToken\\nabstract contract CanReclaimToken is OwnableIf {\\n\\n    function reclaimToken(ERC20If _token) external onlyOwner {\\n        uint256 balance = _token.balanceOf((address)(this));\\n        require(_token.transfer(_owner(), balance));\\n    }\\n\\n}\\n\\n\"},\"Claimable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"Ownable.sol\\\";\\n\\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\\n\\n/**\\n * @title Claimable\\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\\n * This allows the new owner to accept the transfer.\\n */\\ncontract Claimable is Ownable {\\n    address public pendingOwner;\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner, \\\"no permission\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) override public onlyOwner {\\n        pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(owner, pendingOwner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\\n\\n\"},\"ERC20Basic.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"ERC20If.sol\\\";\\nimport \\\"SafeMathLib.sol\\\";\\n\\n/// @title ERC20Basic\\ncontract ERC20Basic is ERC20If {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) internal balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowed;\\n\\n    uint256 internal totalSupply_;\\n\\n    function _notPaused() virtual internal view returns (bool){return false;}\\n\\n    function _notBlocked(address) virtual internal view returns (bool){return false;}\\n\\n    modifier notPaused() {\\n        require(_notPaused(), \\\"contract has been paused\\\");\\n        _;\\n    }\\n\\n    modifier notBlocked() {\\n        require(_notBlocked(msg.sender), \\\"sender has been blocked\\\");\\n        _;\\n    }\\n\\n    function totalSupply() override public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    function transfer(address _to, uint256 _value) override public notPaused notBlocked returns (bool) {\\n        require(_notBlocked(_to), \\\"to-address has been blocked\\\");\\n        require(_value \\u003c= balances[msg.sender], \\\"insufficient balance\\\");\\n        require(_to != address(0), \\\"invalid to-address\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function balanceOf(address _owner) override public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n    override public notPaused notBlocked\\n    returns (bool)\\n    {\\n        require(_notBlocked(_from), \\\"from-address has been blocked\\\");\\n        require(_notBlocked(_to), \\\"to-address has been blocked\\\");\\n        require(_value \\u003c= balances[_from], \\\"insufficient balance\\\");\\n        require(_to != address(0), \\\"invalid to-address\\\");\\n        if (_from == msg.sender){\\n            balances[_from] = balances[_from].sub(_value);\\n            balances[_to] = balances[_to].add(_value);\\n            return true;\\n        }\\n\\n        require(_value \\u003c= allowed[_from][msg.sender], \\\"value \\u003e allowed\\\");\\n\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value)\\n    override public notPaused notBlocked\\n    returns (bool) {\\n        require(_notBlocked(_spender), \\\"spender-address has been blocked\\\");\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function increaseApproval(\\n        address _spender,\\n        uint256 _addedValue\\n    )\\n    public notPaused notBlocked\\n    returns (bool)\\n    {\\n        require(_notBlocked(_spender), \\\"spender-address has been blocked\\\");\\n        allowed[msg.sender][_spender] = (\\n        allowed[msg.sender][_spender].add(_addedValue));\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(\\n        address _spender,\\n        uint _subtractedValue\\n    )\\n    public\\n    notPaused notBlocked\\n    returns (bool success)\\n    {\\n        require(_notBlocked(_spender), \\\"spender-address has been blocked\\\");\\n\\n        uint256 oldValue = allowed[msg.sender][_spender];\\n        if (_subtractedValue \\u003e= oldValue) {\\n            allowed[msg.sender][_spender] = 0;\\n        } else {\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    )\\n    override\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\"},\"ERC20If.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/// @title ERC20If\\nabstract contract ERC20If {\\n    function totalSupply() virtual public view returns (uint256);\\n\\n    function balanceOf(address _who) virtual public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) virtual public returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function allowance(address _owner, address _spender) virtual public view returns (uint256);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) virtual public returns (bool);\\n\\n    function approve(address _spender, uint256 _value) virtual public returns (bool);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n\"},\"MBTC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\nimport \\\"MToken.sol\\\";\\n\\n/// @title MBTC\\ncontract MBTC is MToken {\\n    constructor() MToken(\\\"Matrix BTC Token\\\", \\\"MBTC\\\", 8, (ERC20ControllerViewIf)(0)){}\\n}\\n\"},\"MemberMgrIf.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n//SPDX-License-Identifier: MIT\\n/// @title MemberMgrIf\\nabstract contract MemberMgrIf {\\n    function requireMerchant(address _who) virtual public view;\\n\\n    function requireCustodian(address _who) virtual public view;\\n}\\n\"},\"MintableERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"ERC20Basic.sol\\\";\\nimport \\\"OwnableIf.sol\\\";\\n\\n/// @title MintableERC20\\nabstract contract MintableERC20 is ERC20Basic, OwnableIf {\\n    using SafeMath for uint256;\\n\\n    event Mint(address indexed to, uint256 amount);\\n    event MintFinished(bool indexed finished);\\n\\n    bool public mintingFinished = false;\\n\\n    modifier canMint() {\\n        require(!mintingFinished, \\\"can\\u0027t mint\\\");\\n        _;\\n    }\\n\\n    modifier hasMintPermission() {\\n        require(msg.sender == _owner(), \\\"no permission...\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _amount\\n    )\\n    public\\n    hasMintPermission\\n    canMint\\n    notPaused\\n    returns (bool)\\n    {\\n        require(_notBlocked(_to), \\\"to-address has been blocked\\\");\\n        totalSupply_ = totalSupply_.add(_amount);\\n        balances[_to] = balances[_to].add(_amount);\\n        emit Mint(_to, _amount);\\n        emit Transfer(address(0), _to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to stop minting new tokens.\\n     * @return True if the operation was successful.\\n     */\\n    function finishMinting(bool finished)\\n    public\\n    onlyOwner\\n    returns (bool) {\\n        mintingFinished = finished;\\n        emit MintFinished(mintingFinished);\\n        return true;\\n    }\\n}\\n\"},\"MToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"MTokenControllerIf.sol\\\";\\nimport \\\"NamedERC20.sol\\\";\\nimport \\\"MintableERC20.sol\\\";\\nimport \\\"BurnableToken.sol\\\";\\nimport \\\"Claimable.sol\\\";\\nimport \\\"CanReclaimToken.sol\\\";\\n\\n/// @title MToken\\ncontract MToken is NamedERC20, Claimable, MintableERC20, BurnableToken, CanReclaimToken {\\n    using SafeMath for uint256;\\n\\n    ERC20ControllerViewIf public erc20Controller;\\n    constructor(string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        ERC20ControllerViewIf _erc20Controller\\n    ) NamedERC20(_name, _symbol, _decimals){\\n        erc20Controller = _erc20Controller;\\n    }\\n\\n    function hasController() view public returns (bool){\\n        return (address)(erc20Controller) != (address)(0);\\n    }\\n\\n    function _notPaused() override internal view returns (bool){\\n        if (hasController()) {\\n            return !erc20Controller.paused();\\n        }\\n        return true;\\n    }\\n\\n    function _notBlocked(address _who) override internal view returns (bool){\\n        if (hasController()) {\\n            return !erc20Controller.blocked(_who);\\n        }\\n        return true;\\n    }\\n\\n    function setController(ERC20ControllerViewIf newController) public onlyOwner {\\n        erc20Controller = newController;\\n    }\\n\\n    event BurnBlocked(address indexed burner, uint256 value);\\n\\n    function burnBlocked(address addrBlocked, uint256 amount) public onlyOwner returns (bool){\\n        address _who = addrBlocked;\\n        require(!_notBlocked(_who), \\\"addr not blocked\\\");\\n\\n        uint256 _value = amount;\\n        if (_value \\u003e balances[_who]) {\\n            _value = balances[_who];\\n        }\\n\\n        balances[_who] = balances[_who].sub(_value);\\n        totalSupply_ = totalSupply_.sub(_value);\\n        emit BurnBlocked(_who, _value);\\n        emit Transfer(_who, address(0), _value);\\n\\n        return true;\\n    }\\n\\n}\\n\"},\"MTokenControllerIf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"MemberMgrIf.sol\\\";\\nimport \\\"ERC20If.sol\\\";\\n/// @title ERC20ControllerViewIf\\nabstract contract ERC20ControllerViewIf {\\n    function blocked(address _who) virtual public view returns (bool);\\n\\n    function paused() virtual public view returns (bool);\\n}\\n\\n/// @title MTokenControllerIf\\nabstract contract MTokenControllerIf is MemberMgrIf, ERC20ControllerViewIf {\\n    function mint(address to, uint amount) virtual external returns (bool);\\n\\n    function burn(uint value) virtual external returns (bool);\\n\\n    function getMToken() virtual external returns (ERC20If);\\n}\\n\"},\"NamedERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/// @title NamedERC20\\ncontract NamedERC20 {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n\\nimport \\\"OwnableIf.sol\\\";\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable is OwnableIf {\\n    address public owner;\\n\\n    function _owner() view override public returns (address){\\n        return owner;\\n    }\\n\\n    //    event OwnershipRenounced(address indexed previousOwner);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    //    /**\\n    //     * @dev Throws if called by any account other than the owner.\\n    //     */\\n    //    modifier onlyOwner() {\\n    //        require(msg.sender == owner);\\n    //        _;\\n    //    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    //   function renounceOwnership() public onlyOwner {\\n    //     emit OwnershipRenounced(owner);\\n    //     owner = address(0);\\n    //   }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) virtual public onlyOwner {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address _newOwner) internal {\\n        require(_newOwner != address(0), \\\"invalid _newOwner\\\");\\n        emit OwnershipTransferred(owner, _newOwner);\\n        owner = _newOwner;\\n    }\\n}\\n\\n\\n\"},\"OwnableIf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract OwnableIf {\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"not owner......\\\");\\n        _;\\n    }\\n\\n    function _owner() view virtual public returns (address);\\n}\\n\"},\"SafeMathLib.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\npragma experimental SMTChecker;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrBlocked\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Controller\",\"outputs\":[{\"internalType\":\"contract ERC20ControllerViewIf\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20If\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20ControllerViewIf\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MBTC","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b95cbb625a24e38bec3a903743b247e34220dabd8ab973441e323e9da14acd0"}]}