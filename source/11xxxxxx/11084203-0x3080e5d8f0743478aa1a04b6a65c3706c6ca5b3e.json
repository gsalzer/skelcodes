{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.7;\r\n\r\nabstract contract AccountingEngineLike {\r\n    function debtAuctionHouse() virtual public returns (address);\r\n}\r\nabstract contract DebtAuctionHouseLike {\r\n    function AUCTION_HOUSE_TYPE() virtual public returns (bytes32);\r\n    function activeDebtAuctions() virtual public returns (uint256);\r\n}\r\nabstract contract ProtocolTokenAuthorityLike {\r\n    function setRoot(address) virtual public;\r\n    function setOwner(address) virtual public;\r\n    function addAuthorization(address) virtual public;\r\n    function removeAuthorization(address) virtual public;\r\n\r\n    function owner() virtual public view returns (address);\r\n    function root() virtual public view returns (address);\r\n}\r\n\r\ncontract GebPrintingPermissions {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebPrintingPermissions/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Structs ---\r\n    struct SystemRights {\r\n        // Whether this system is covered or not\r\n        bool    covered;\r\n        // Timestamp after which this system cannot have its printing rights taken away\r\n        uint256 revokeRightsDeadline;\r\n        // Timestamp after which the uncover process can end\r\n        uint256 uncoverCooldownEnd;\r\n        // Timestamp until which the added rights can be taken without waiting until uncoverCooldownEnd\r\n        uint256 withdrawAddedRightsDeadline;\r\n        // The previous address of the debt auction house\r\n        address previousDebtAuctionHouse;\r\n        // The current address of the debt auction house\r\n        address currentDebtAuctionHouse;\r\n    }\r\n\r\n    // Mapping of all the allowed systems\r\n    mapping(address => SystemRights) public allowedSystems;\r\n    // Whether an auction house is already used or not\r\n    mapping(address => uint256)      public usedAuctionHouses;\r\n\r\n    // Minimum amount of time that we need to wait until a system can have unlimited printing rights\r\n    uint256 public unrevokableRightsCooldown;\r\n    // Amount of time that needs to pass until the uncover period can end\r\n    uint256 public denyRightsCooldown;\r\n    // Amount of time during which rights can be withdrawn without waiting for denyRightsCooldown seconds\r\n    uint256 public addRightsCooldown;\r\n    // Amount of systems covered\r\n    uint256 public coveredSystems;\r\n\r\n    ProtocolTokenAuthorityLike public protocolTokenAuthority;\r\n\r\n    bytes32 public constant AUCTION_HOUSE_TYPE = bytes32(\"DEBT\");\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, uint data);\r\n    event GiveUpAuthorityRoot();\r\n    event GiveUpAuthorityOwnership();\r\n    event RevokeDebtAuctionHouses(address accountingEngine, address currentHouse, address previousHouse);\r\n    event CoverSystem(address accountingEngine, address debtAuctionHouse, uint256 coveredSystems, uint256 withdrawAddedRightsDeadline);\r\n    event StartUncoverSystem(address accountingEngine, address debtAuctionHouse, uint256 coveredSystems, uint256 revokeRightsDeadline, uint256 uncoverCooldownEnd, uint256 withdrawAddedRightsDeadline);\r\n    event AbandonUncoverSystem(address accountingEngine);\r\n    event EndUncoverSystem(address accountingEngine, address currentHouse, address previousHouse);\r\n    event UpdateCurrentDebtAuctionHouse(address accountingEngine, address currentHouse, address previousHouse);\r\n    event RemovePreviousDebtAuctionHouse(address accountingEngine, address currentHouse, address previousHouse);\r\n    event ProposeIndefinitePrintingPermissions(address accountingEngine, uint256 freezeDelay);\r\n\r\n    constructor(address protocolTokenAuthority_) public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        protocolTokenAuthority = ProtocolTokenAuthorityLike(protocolTokenAuthority_);\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n\r\n    // --- Math ---\r\n    function addition(uint x, uint y) internal pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x);\r\n    }\r\n    function subtract(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    // --- General Utils ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /**\r\n     * @notice Modify general uint params\r\n     * @param parameter The name of the parameter modified\r\n     * @param data New value for the parameter\r\n     */\r\n    function modifyParameters(bytes32 parameter, uint data) external isAuthorized {\r\n        if (parameter == \"unrevokableRightsCooldown\") unrevokableRightsCooldown = data;\r\n        else if (parameter == \"denyRightsCooldown\") denyRightsCooldown = data;\r\n        else if (parameter == \"addRightsCooldown\") addRightsCooldown = data;\r\n        else revert(\"GebPrintingPermissions/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n\r\n    // --- Token Authority Ownership ---\r\n    /**\r\n     * @notice Give up being a root inside the protocol token authority\r\n     */\r\n    function giveUpAuthorityRoot() external isAuthorized {\r\n        require(protocolTokenAuthority.root() == address(this), \"GebPrintingPermissions/not-root\");\r\n        protocolTokenAuthority.setRoot(address(0));\r\n        emit GiveUpAuthorityRoot();\r\n    }\r\n    /**\r\n     * @notice Give up being the owner inside the protocol token authority\r\n     */\r\n    function giveUpAuthorityOwnership() external isAuthorized {\r\n        require(\r\n          either(\r\n            protocolTokenAuthority.root() == address(this),\r\n            protocolTokenAuthority.owner() == address(this)\r\n          ), \"GebPrintingPermissions/not-root-or-owner\"\r\n        );\r\n        protocolTokenAuthority.setOwner(address(0));\r\n        emit GiveUpAuthorityOwnership();\r\n    }\r\n\r\n    // --- Permissions Utils ---\r\n    /**\r\n     * @notice Revoke permissions for both the current and the last debt auction house associated with an accounting engine\r\n     * @param accountingEngine The address of the accounting engine whose debt auction houses will no longer have printing permissions\r\n     */\r\n    function revokeDebtAuctionHouses(address accountingEngine) internal {\r\n        address currentHouse  = allowedSystems[accountingEngine].currentDebtAuctionHouse;\r\n        address previousHouse = allowedSystems[accountingEngine].previousDebtAuctionHouse;\r\n        delete allowedSystems[accountingEngine];\r\n        protocolTokenAuthority.removeAuthorization(currentHouse);\r\n        protocolTokenAuthority.removeAuthorization(previousHouse);\r\n        emit RevokeDebtAuctionHouses(accountingEngine, currentHouse, previousHouse);\r\n    }\r\n\r\n    // --- System Cover ---\r\n    /**\r\n     * @notice Cover a new system\r\n     * @param accountingEngine The address of the accounting engine being part of a new covered system\r\n     */\r\n    function coverSystem(address accountingEngine) external isAuthorized {\r\n        require(!allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-already-covered\");\r\n        address debtAuctionHouse = AccountingEngineLike(accountingEngine).debtAuctionHouse();\r\n        require(\r\n          keccak256(abi.encode(DebtAuctionHouseLike(debtAuctionHouse).AUCTION_HOUSE_TYPE())) ==\r\n          keccak256(abi.encode(AUCTION_HOUSE_TYPE)),\r\n          \"GebPrintingPermissions/not-a-debt-auction-house\"\r\n        );\r\n        require(usedAuctionHouses[debtAuctionHouse] == 0, \"GebPrintingPermissions/auction-house-already-used\");\r\n        usedAuctionHouses[debtAuctionHouse] = 1;\r\n        uint newWithdrawAddedRightsCooldown = addition(now, addRightsCooldown);\r\n        allowedSystems[accountingEngine] = SystemRights(\r\n          true,\r\n          uint256(-1),\r\n          0,\r\n          newWithdrawAddedRightsCooldown,\r\n          address(0),\r\n          debtAuctionHouse\r\n        );\r\n        coveredSystems = addition(coveredSystems, 1);\r\n        protocolTokenAuthority.addAuthorization(debtAuctionHouse);\r\n        emit CoverSystem(accountingEngine, debtAuctionHouse, coveredSystems, newWithdrawAddedRightsCooldown);\r\n    }\r\n    /**\r\n     * @notice Start to uncover a system\r\n     * @param accountingEngine The address of the accounting engine whose auction houses will start to be uncovered\r\n     */\r\n    function startUncoverSystem(address accountingEngine) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        require(allowedSystems[accountingEngine].uncoverCooldownEnd == 0, \"GebPrintingPermissions/system-not-being-uncovered\");\r\n        require(\r\n          DebtAuctionHouseLike(allowedSystems[accountingEngine].currentDebtAuctionHouse).activeDebtAuctions() == 0,\r\n          \"GebPrintingPermissions/ongoing-debt-auctions-current-house\"\r\n        );\r\n        if (allowedSystems[accountingEngine].previousDebtAuctionHouse != address(0)) {\r\n          require(\r\n            DebtAuctionHouseLike(allowedSystems[accountingEngine].previousDebtAuctionHouse).activeDebtAuctions() == 0,\r\n            \"GebPrintingPermissions/ongoing-debt-auctions-previous-house\"\r\n          );\r\n        }\r\n        require(\r\n          either(\r\n            coveredSystems > 1,\r\n            now <= allowedSystems[accountingEngine].withdrawAddedRightsDeadline\r\n          ),\r\n          \"GebPrintingPermissions/not-enough-systems-covered\"\r\n        );\r\n\r\n        if (now <= allowedSystems[accountingEngine].withdrawAddedRightsDeadline) {\r\n          coveredSystems = subtract(coveredSystems, 1);\r\n          usedAuctionHouses[allowedSystems[accountingEngine].previousDebtAuctionHouse] = 0;\r\n          usedAuctionHouses[allowedSystems[accountingEngine].currentDebtAuctionHouse] = 0;\r\n          revokeDebtAuctionHouses(accountingEngine);\r\n        } else {\r\n          require(allowedSystems[accountingEngine].revokeRightsDeadline >= now, \"GebPrintingPermissions/revoke-frozen\");\r\n          allowedSystems[accountingEngine].uncoverCooldownEnd = addition(now, denyRightsCooldown);\r\n        }\r\n        emit StartUncoverSystem(\r\n          accountingEngine,\r\n          allowedSystems[accountingEngine].currentDebtAuctionHouse,\r\n          coveredSystems,\r\n          allowedSystems[accountingEngine].revokeRightsDeadline,\r\n          allowedSystems[accountingEngine].uncoverCooldownEnd,\r\n          allowedSystems[accountingEngine].withdrawAddedRightsDeadline\r\n        );\r\n    }\r\n    /**\r\n     * @notice Abandon the uncover process for a system\r\n     * @param accountingEngine The address of the accounting engine whose auction houses should have been uncovered\r\n     */\r\n    function abandonUncoverSystem(address accountingEngine) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        require(allowedSystems[accountingEngine].uncoverCooldownEnd > 0, \"GebPrintingPermissions/system-not-being-uncovered\");\r\n        allowedSystems[accountingEngine].uncoverCooldownEnd = 0;\r\n        emit AbandonUncoverSystem(accountingEngine);\r\n    }\r\n    /**\r\n     * @notice Abandon the uncover process for a system\r\n     * @param accountingEngine The address of the accounting engine whose auction houses should have been uncovered\r\n     */\r\n    function endUncoverSystem(address accountingEngine) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        require(allowedSystems[accountingEngine].uncoverCooldownEnd > 0, \"GebPrintingPermissions/system-not-being-uncovered\");\r\n        require(allowedSystems[accountingEngine].uncoverCooldownEnd < now, \"GebPrintingPermissions/cooldown-not-passed\");\r\n        require(\r\n          DebtAuctionHouseLike(allowedSystems[accountingEngine].currentDebtAuctionHouse).activeDebtAuctions() == 0,\r\n          \"GebPrintingPermissions/ongoing-debt-auctions-current-house\"\r\n        );\r\n        if (allowedSystems[accountingEngine].previousDebtAuctionHouse != address(0)) {\r\n          require(\r\n            DebtAuctionHouseLike(allowedSystems[accountingEngine].previousDebtAuctionHouse).activeDebtAuctions() == 0,\r\n            \"GebPrintingPermissions/ongoing-debt-auctions-previous-house\"\r\n          );\r\n        }\r\n        require(\r\n          either(\r\n            coveredSystems > 1,\r\n            now <= allowedSystems[accountingEngine].withdrawAddedRightsDeadline\r\n          ),\r\n          \"GebPrintingPermissions/not-enough-systems-covered\"\r\n        );\r\n\r\n        usedAuctionHouses[allowedSystems[accountingEngine].previousDebtAuctionHouse] = 0;\r\n        usedAuctionHouses[allowedSystems[accountingEngine].currentDebtAuctionHouse]  = 0;\r\n\r\n        coveredSystems = subtract(coveredSystems, 1);\r\n        revokeDebtAuctionHouses(accountingEngine);\r\n\r\n        emit EndUncoverSystem(\r\n          accountingEngine,\r\n          allowedSystems[accountingEngine].currentDebtAuctionHouse,\r\n          allowedSystems[accountingEngine].previousDebtAuctionHouse\r\n        );\r\n\r\n        delete allowedSystems[accountingEngine];\r\n    }\r\n    /**\r\n     * @notice Update the current debt auction house associated with a system\r\n     * @param accountingEngine The address of the accounting engine associated with a covered system\r\n     */\r\n    function updateCurrentDebtAuctionHouse(address accountingEngine) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        address newHouse = AccountingEngineLike(accountingEngine).debtAuctionHouse();\r\n        require(newHouse != allowedSystems[accountingEngine].currentDebtAuctionHouse, \"GebPrintingPermissions/new-house-not-changed\");\r\n        require(\r\n          keccak256(abi.encode(DebtAuctionHouseLike(newHouse).AUCTION_HOUSE_TYPE())) ==\r\n          keccak256(abi.encode(AUCTION_HOUSE_TYPE)),\r\n          \"GebPrintingPermissions/new-house-not-a-debt-auction\"\r\n        );\r\n        require(allowedSystems[accountingEngine].previousDebtAuctionHouse == address(0), \"GebPrintingPermissions/previous-house-not-removed\");\r\n        require(usedAuctionHouses[newHouse] == 0, \"GebPrintingPermissions/auction-house-already-used\");\r\n        usedAuctionHouses[newHouse] = 1;\r\n        allowedSystems[accountingEngine].previousDebtAuctionHouse =\r\n          allowedSystems[accountingEngine].currentDebtAuctionHouse;\r\n        allowedSystems[accountingEngine].currentDebtAuctionHouse = newHouse;\r\n        protocolTokenAuthority.addAuthorization(newHouse);\r\n        emit UpdateCurrentDebtAuctionHouse(\r\n          accountingEngine,\r\n          allowedSystems[accountingEngine].currentDebtAuctionHouse,\r\n          allowedSystems[accountingEngine].previousDebtAuctionHouse\r\n        );\r\n    }\r\n    /**\r\n     * @notice Remove the previous, no longer used debt auction house from a covered system\r\n     * @param accountingEngine The address of the accounting engine associated with a covered system\r\n     */\r\n    function removePreviousDebtAuctionHouse(address accountingEngine) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        require(\r\n          allowedSystems[accountingEngine].previousDebtAuctionHouse != address(0),\r\n          \"GebPrintingPermissions/inexistent-previous-auction-house\"\r\n        );\r\n        require(\r\n          DebtAuctionHouseLike(allowedSystems[accountingEngine].previousDebtAuctionHouse).activeDebtAuctions() == 0,\r\n          \"GebPrintingPermissions/ongoing-debt-auctions-previous-house\"\r\n        );\r\n        address previousHouse = allowedSystems[accountingEngine].previousDebtAuctionHouse;\r\n        usedAuctionHouses[previousHouse] = 0;\r\n        allowedSystems[accountingEngine].previousDebtAuctionHouse = address(0);\r\n        protocolTokenAuthority.removeAuthorization(previousHouse);\r\n        emit RemovePreviousDebtAuctionHouse(\r\n          accountingEngine,\r\n          allowedSystems[accountingEngine].currentDebtAuctionHouse,\r\n          previousHouse\r\n        );\r\n    }\r\n    /**\r\n     * @notice Propose a time after which a currently covered system will no longer be under the threat of getting uncovered\r\n     * @param accountingEngine The address of the accounting engine associated with a covered system\r\n     * @param freezeDelay The amount of time (from this point onward) during which the system can still be uncovered but, once passed, the system has indefinite printing permissions\r\n     */\r\n    function proposeIndefinitePrintingPermissions(address accountingEngine, uint256 freezeDelay) external isAuthorized {\r\n        require(allowedSystems[accountingEngine].covered, \"GebPrintingPermissions/system-not-covered\");\r\n        require(both(freezeDelay >= unrevokableRightsCooldown, freezeDelay > 0), \"GebPrintingPermissions/low-delay\");\r\n        require(allowedSystems[accountingEngine].revokeRightsDeadline > addition(now, freezeDelay), \"GebPrintingPermissions/big-delay\");\r\n        allowedSystems[accountingEngine].revokeRightsDeadline = addition(now, freezeDelay);\r\n        emit ProposeIndefinitePrintingPermissions(accountingEngine, freezeDelay);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolTokenAuthority_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"AbandonUncoverSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtAuctionHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coveredSystems\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAddedRightsDeadline\",\"type\":\"uint256\"}],\"name\":\"CoverSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousHouse\",\"type\":\"address\"}],\"name\":\"EndUncoverSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GiveUpAuthorityOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GiveUpAuthorityRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDelay\",\"type\":\"uint256\"}],\"name\":\"ProposeIndefinitePrintingPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousHouse\",\"type\":\"address\"}],\"name\":\"RemovePreviousDebtAuctionHouse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousHouse\",\"type\":\"address\"}],\"name\":\"RevokeDebtAuctionHouses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtAuctionHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coveredSystems\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revokeRightsDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uncoverCooldownEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAddedRightsDeadline\",\"type\":\"uint256\"}],\"name\":\"StartUncoverSystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentHouse\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousHouse\",\"type\":\"address\"}],\"name\":\"UpdateCurrentDebtAuctionHouse\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_HOUSE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"abandonUncoverSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRightsCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSystems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"covered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"revokeRightsDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uncoverCooldownEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAddedRightsDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"previousDebtAuctionHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentDebtAuctionHouse\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"coverSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coveredSystems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denyRightsCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"endUncoverSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveUpAuthorityOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveUpAuthorityRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freezeDelay\",\"type\":\"uint256\"}],\"name\":\"proposeIndefinitePrintingPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenAuthority\",\"outputs\":[{\"internalType\":\"contract ProtocolTokenAuthorityLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"removePreviousDebtAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"startUncoverSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unrevokableRightsCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountingEngine\",\"type\":\"address\"}],\"name\":\"updateCurrentDebtAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedAuctionHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GebPrintingPermissions","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f7c66bd09425d45ef8a41e0cd91a82ae54f96eb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a61c0818cfb9d7aa7f9e6e2f47d4659acb423c3bf5774dabe7efc8632cd1de9"}]}