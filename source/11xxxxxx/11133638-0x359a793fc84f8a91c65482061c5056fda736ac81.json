{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n/**\r\nSc dev\r\nt.me/bolpol\r\n*/\r\n\r\n/**\r\n    @title ERC20 interface (short version)\r\n*/\r\ninterface ERC20 {\r\n    function balanceOf(address tokenOwner) external returns (uint balance);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n/**\r\n    @title Owned - ownership\r\n*/\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n/**\r\n    @title Airdropper - using for package token transfer\r\n*/\r\ncontract Airdropper is Owned {\r\n    ERC20 public token;\r\n    \r\n    event Airdropped(bool indexed ok);\r\n    event Destroyed(uint indexed time);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param tokenAddress Address of the token contract.\r\n     */\r\n    constructor(address tokenAddress) {\r\n        token = ERC20(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Airdrop.\r\n     * @ !important Before using, send needed token amount to this contract\r\n     */\r\n    function airdrop(address[] memory dests, uint[] memory values) public onlyOwner {\r\n        // This simple validation will catch most mistakes without consuming\r\n        // too much gas.\r\n        require(dests.length == values.length);\r\n\r\n        for (uint256 i = 0; i < dests.length; i++) {\r\n            token.transfer(dests[i], values[i]);\r\n        }\r\n        \r\n        emit Airdropped(true);\r\n    }\r\n\r\n    /**\r\n     * @dev Return all tokens back to owner, in case any were accidentally\r\n     *   transferred to this contract.\r\n     */\r\n    function returnTokens() public onlyOwner returns(bool) {\r\n        return token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Destroy this contract and recover any ether to the owner.\r\n     */\r\n    function destroy() public onlyOwner {\r\n        if(returnTokens()) {\r\n            emit Destroyed(block.timestamp);\r\n            selfdestruct(msg.sender);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dests\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Airdropper","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003e3cda3218212503883c79f6d2feef29e6bbb87d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8e39c09ff5731293a00cd5d9d75e0b43ac52fc50a56787c81fd495d7d83803a4"}]}