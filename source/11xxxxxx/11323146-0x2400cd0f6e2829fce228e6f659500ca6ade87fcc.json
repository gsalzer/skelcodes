{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ICoreFlashArb {\r\n      struct Strategy {\r\n        string strategyName;\r\n        bool[] token0Out; // An array saying if token 0 should be out in this step\r\n        address[] pairs; // Array of pair addresses\r\n        uint256[] feeOnTransfers; //Array of fee on transfers 1% = 10\r\n        bool cBTCSupport; // Should the algorithm check for cBTC and wrap/unwrap it\r\n                        // Note not checking saves gas\r\n        bool feeOff; // Allows for adding CORE strategies - where there is no fee on the executor\r\n    }\r\n  function executeStrategy ( uint256 strategyPID ) external;\r\n  function numberOfStrategies (  ) external view returns ( uint256 );\r\n  function strategyProfitInReturnToken ( uint256 strategyID ) external view returns ( uint256 profit );\r\n  function strategyInfo(uint256 strategyPID) external view returns (Strategy memory);\r\n  function mostProfitableStrategyInETH (  ) external view returns ( uint256 profit, uint256 strategyID );\r\n}\r\n\r\ninterface ILock3rV1Mini {\r\n    function isLocker(address) external returns (bool);\r\n    function worked(address locker) external;\r\n    function totalBonded() external view returns (uint);\r\n    function bonds(address locker, address credit) external view returns (uint);\r\n    function votes(address locker) external view returns (uint);\r\n    function isMinLocker(address locker, uint minBond, uint earned, uint age) external returns (bool);\r\n    function addCreditETH(address job) external payable;\r\n    function workedETH(address locker) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Lock3rCoreFlashArbitrage is Ownable{\r\n\r\n    modifier upkeep() {\r\n        require(LK3R.isLocker(msg.sender), \"::isLocker: locker is not registered\");\r\n        _;\r\n        LK3R.worked(msg.sender);\r\n    }\r\n\r\n    ILock3rV1Mini public LK3R;\r\n    ICoreFlashArb public CoreArb;\r\n    IERC20 public CoreToken;\r\n\r\n    //Init interfaces with addresses\r\n    constructor (address token,address corearb,address coretoken) public {\r\n        LK3R = ILock3rV1Mini(token);\r\n        CoreArb = ICoreFlashArb(corearb);\r\n        CoreToken = IERC20(coretoken);\r\n    }\r\n\r\n    //Helper functions for handling sending of reward token\r\n    function getTokenBalance(address tokenAddress) public view returns (uint256) {\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function sendERC20(address tokenAddress,address receiver) internal {\r\n        IERC20(tokenAddress).transfer(receiver, getTokenBalance(tokenAddress));\r\n    }\r\n\r\n    //Required cause coreflasharb contract doesnt make this easily retrievable\r\n    function getRewardToken(uint strat) public view returns (address) {\r\n        ICoreFlashArb.Strategy memory stratx = CoreArb.strategyInfo(strat);//Get full strat data\r\n        // Eg. Token 0 was out so profit token is token 1\r\n        return stratx.token0Out[0] ? IUniswapV2Pair(stratx.pairs[0]).token1() : IUniswapV2Pair(stratx.pairs[0]).token0();\r\n    }\r\n\r\n    //Set new contract address incase core devs change the flash arb contract\r\n    function setCoreArbAddress(address newContract) public onlyOwner {\r\n        CoreArb = ICoreFlashArb(newContract);\r\n    }\r\n\r\n    function workable() public view returns (bool) {\r\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\r\n            if(CoreArb.strategyProfitInReturnToken(i) > 0)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    function profitableCount() public view returns (uint){\r\n        uint count = 0;\r\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\r\n            if(CoreArb.strategyProfitInReturnToken(i) > 0)\r\n                count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    //Return profitable strats array and reward tokens\r\n    function profitableStratsWithTokens() public view returns (uint[] memory,address[] memory){\r\n        uint profitableCountL = profitableCount();\r\n        uint index = 0;\r\n\r\n        uint[] memory _profitable = new uint[](profitableCountL);\r\n        address[] memory _rewardToken = new address[](profitableCountL);\r\n\r\n        for(uint i=0;i<CoreArb.numberOfStrategies();i++){\r\n            if(CoreArb.strategyProfitInReturnToken(i) > 0){\r\n                _profitable[index] = i;\r\n                _rewardToken[index] = getRewardToken(i);\r\n                index++;\r\n            }\r\n\r\n        }\r\n        return (_profitable,_rewardToken);\r\n    }\r\n\r\n    function hasMostProfitableStrat() public view returns (bool) {\r\n        (uint256 profit, ) = CoreArb.mostProfitableStrategyInETH();\r\n        return profit > 0;\r\n    }\r\n\r\n    function getMostProfitableStrat() public view returns (uint){\r\n        //Get data from interface on profit and strat id\r\n        (, uint256 strategyID) = CoreArb.mostProfitableStrategyInETH();\r\n        return strategyID;\r\n    }\r\n\r\n    function getMostProfitableStratWithToken() public view returns (uint,address){\r\n        //Get data from interface on profit and strat id\r\n        (, uint256 strategyID) = CoreArb.mostProfitableStrategyInETH();\r\n        return (strategyID,getRewardToken(strategyID));\r\n    }\r\n\r\n    //Used to execute multiple profitable strategies,only use when there are multiple executable strats\r\n    function workBatch(uint[] memory profitable,address[] memory rewardTokens) public upkeep{\r\n        //No need to check for profitablility here as it wont execute if arb isnt profitable\r\n        for(uint i=0;i<profitable.length;i++){\r\n            CoreArb.executeStrategy(profitable[i]);\r\n            //Send strat reward to executor\r\n            sendERC20(rewardTokens[i],msg.sender);\r\n        }\r\n    }\r\n\r\n    //Execute single profitable strat\r\n    function work(uint strat,address rewardToken) public upkeep{\r\n        //No need to check for profitablility here as it wont execute if arb isnt profitable\r\n        CoreArb.executeStrategy(strat);\r\n        //Send strat reward to executor\r\n        sendERC20(rewardToken,msg.sender);\r\n    }\r\n\r\n    //Added to recover erc20 tokens\r\n    function recoverERC20(address token) public onlyOwner {\r\n        sendERC20(token,owner());\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"corearb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coretoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CoreArb\",\"outputs\":[{\"internalType\":\"contract ICoreFlashArb\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CoreToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LK3R\",\"outputs\":[{\"internalType\":\"contract ILock3rV1Mini\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostProfitableStrat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostProfitableStratWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strat\",\"type\":\"uint256\"}],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMostProfitableStrat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitableCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitableStratsWithTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"setCoreArbAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strat\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"profitable\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"workBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lock3rCoreFlashArbitrage","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e3f3869ddd41c23eff3630f58e5bfa584c770d67000000000000000000000000220564c9bd38aa1240c3507007970d9e30c0657d00000000000000000000000062359ed7505efc61ff1d56fef82158ccaffa23d7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e2f46909f17502217051671371f5194fa2719726c8907d4e2f4bdaaa75a99ab"}]}