{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface ITypes {\r\n  struct Call {\r\n    address to;\r\n    uint96 value;\r\n    bytes data;\r\n  }\r\n\r\n  struct CallReturn {\r\n    bool ok;\r\n    bytes returnData;\r\n  }\r\n}\r\n\r\ninterface IActionRegistry {\r\n\r\n  // events\r\n  event AddedSelector(address account, bytes4 selector);\r\n  event RemovedSelector(address account, bytes4 selector);\r\n  event AddedSpender(address account, address spender);\r\n  event RemovedSpender(address account, address spender);\r\n\r\n  struct AccountSelectors {\r\n    address account;\r\n    bytes4[] selectors;\r\n  }\r\n\r\n  struct AccountSpenders {\r\n    address account;\r\n    address[] spenders;\r\n  }\r\n\r\n  function isValidAction(ITypes.Call[] calldata calls) external view returns (bool valid);\r\n  function addSelector(address account, bytes4 selector) external;\r\n  function removeSelector(address account, bytes4 selector) external;\r\n  function addSpender(address account, address spender) external;\r\n  function removeSpender(address account, address spender) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n *\r\n * In order to transfer ownership, a recipient must be specified, at which point\r\n * the specified recipient can call `acceptOwnership` and take ownership.\r\n */\r\n\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() public {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"TwoStepOwnable: caller is not the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (`newOwner`) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \"TwoStepOwnable: new potential owner is the zero address.\"\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \"TwoStepOwnable: current owner must set caller as new potential owner.\"\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract ActionRegistry is IActionRegistry, TwoStepOwnable {\r\n\r\n  mapping(address => bytes4[]) internal _functionSelectors;\r\n  mapping(address => mapping(bytes4 => uint256)) public _functionSelectorIndices;\r\n\r\n  mapping(address => address[]) internal _accountSpenders;\r\n  mapping(address => mapping(address => uint256)) public _spenderIndices;\r\n\r\n  function isValidAction(\r\n    ITypes.Call[] calldata calls\r\n  ) external override view returns (bool valid) {\r\n    valid = true;\r\n    for (uint256 i = 0; i < calls.length; i++) {\r\n\r\n      valid = _validCall(calls[i].to, calls[i].data);\r\n\r\n      if (!valid) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _validCall(address to, bytes calldata callData) internal view returns (bool) {\r\n    if (callData.length < 4) {\r\n      return false;\r\n    }\r\n\r\n    bytes memory functionSelectorBytes = abi.encodePacked(callData[:4], bytes28(0));\r\n    bytes4 functionSelector = abi.decode(functionSelectorBytes, (bytes4));\r\n\r\n    uint256 functionSelectorIndex = _functionSelectorIndices[to][functionSelector];\r\n\r\n    if (functionSelectorIndex == 0) {\r\n      return false;\r\n    }\r\n\r\n    if (functionSelector == IERC20.approve.selector) {\r\n      bytes memory argumentBytes = abi.encodePacked(callData[4:], bytes28(0));\r\n\r\n      if (argumentBytes.length < 68) {\r\n        return false;\r\n      }\r\n\r\n      (address spender,) = abi.decode(argumentBytes, (address, uint256));\r\n      uint256 spenderIndex = _spenderIndices[to][spender];\r\n\r\n      if (spenderIndex == 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function getAccountSpenders(address account) public view returns (address[] memory spenders) {\r\n    spenders = _accountSpenders[account];\r\n  }\r\n\r\n  function getAccountSelectors(address account) public view returns (bytes4[] memory selectors) {\r\n    selectors = _functionSelectors[account];\r\n  }\r\n\r\n  function addSelector(address account, bytes4 selector) external override onlyOwner {\r\n    _addSelector(account, selector);\r\n  }\r\n\r\n  function removeSelector(address account, bytes4 selector) external override onlyOwner {\r\n    _removeSelector(account, selector);\r\n  }\r\n\r\n  function addSelectorsAndSpenders(\r\n    AccountSelectors[] memory accountSelectors,\r\n    AccountSpenders[] memory accountSpenders\r\n  ) public onlyOwner {\r\n    _addAccountSelectors(accountSelectors);\r\n    _addAccountSpenders(accountSpenders);\r\n  }\r\n\r\n  function _addAccountSelectors(AccountSelectors[] memory accountSelectors) public onlyOwner {\r\n    for (uint256 i = 0; i < accountSelectors.length; i++) {\r\n      for (uint256 j = 0; j < accountSelectors[i].selectors.length; j++) {\r\n        _addSelector(accountSelectors[i].account, accountSelectors[i].selectors[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _addAccountSpenders(AccountSpenders[] memory accountSpenders) public onlyOwner {\r\n    for (uint256 i = 0; i < accountSpenders.length; i++) {\r\n      for (uint256 j = 0; j < accountSpenders[i].spenders.length; j++) {\r\n        _addSpender(accountSpenders[i].account, accountSpenders[i].spenders[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function _addSelector(address account, bytes4 selector) internal {\r\n    require(\r\n      _functionSelectorIndices[account][selector] == 0,\r\n      \"Selector for the provided account already exists.\"\r\n    );\r\n\r\n    _functionSelectors[account].push(selector);\r\n    _functionSelectorIndices[account][selector] = _functionSelectors[account].length;\r\n\r\n    emit AddedSelector(account, selector);\r\n  }\r\n\r\n  function _removeSelector(address account, bytes4 selector) internal {\r\n    uint256 removedSelectorIndex = _functionSelectorIndices[account][selector];\r\n\r\n    require(\r\n      removedSelectorIndex != 0,\r\n      \"No selector found for the provided account.\"\r\n    );\r\n\r\n    // swap account to remove with the last one then pop from the array.\r\n    bytes4 lastSelector = _functionSelectors[account][_functionSelectors[account].length - 1];\r\n    _functionSelectors[account][removedSelectorIndex - 1] = lastSelector;\r\n    _functionSelectorIndices[account][lastSelector] = removedSelectorIndex;\r\n    _functionSelectors[account].pop();\r\n    delete _functionSelectorIndices[account][selector];\r\n\r\n    emit RemovedSelector(account, selector);\r\n  }\r\n\r\n  function addSpender(address account, address spender) external override onlyOwner {\r\n    _addSpender(account, spender);\r\n  }\r\n\r\n  function removeSpender(address account, address spender) external override onlyOwner {\r\n    _removeSpender(account, spender);\r\n  }\r\n\r\n  function _addSpender(address account, address spender) internal {\r\n    require(\r\n      _spenderIndices[account][spender] == 0,\r\n      \"Spender for the provided account already exists.\"\r\n    );\r\n\r\n    _accountSpenders[account].push(spender);\r\n    _spenderIndices[account][spender] = _accountSpenders[account].length;\r\n\r\n    emit AddedSpender(account, spender);\r\n  }\r\n\r\n  function _removeSpender(address account, address spender) internal {\r\n    uint256 removedSpenderIndex = _spenderIndices[account][spender];\r\n\r\n    require(\r\n      removedSpenderIndex != 0,\r\n      \"No spender found for the provided account.\"\r\n    );\r\n\r\n    // swap account to remove with the last one then pop from the array.\r\n    address lastSpender = _accountSpenders[account][_accountSpenders[account].length - 1];\r\n    _accountSpenders[account][removedSpenderIndex - 1] = lastSpender;\r\n    _spenderIndices[account][lastSpender] = removedSpenderIndex;\r\n    _accountSpenders[account].pop();\r\n    delete _spenderIndices[account][spender];\r\n\r\n    emit RemovedSpender(account, spender);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AddedSelector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"AddedSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"RemovedSelector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"RemovedSpender\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IActionRegistry.AccountSelectors[]\",\"name\":\"accountSelectors\",\"type\":\"tuple[]\"}],\"name\":\"_addAccountSelectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct IActionRegistry.AccountSpenders[]\",\"name\":\"accountSpenders\",\"type\":\"tuple[]\"}],\"name\":\"_addAccountSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"_functionSelectorIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_spenderIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"addSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IActionRegistry.AccountSelectors[]\",\"name\":\"accountSelectors\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct IActionRegistry.AccountSpenders[]\",\"name\":\"accountSpenders\",\"type\":\"tuple[]\"}],\"name\":\"addSelectorsAndSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSpenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITypes.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"isValidAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"removeSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ActionRegistry","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e864c79274c6e6fe5ed4dfedb72979ebfe826e51315772ba050171212772984c"}]}