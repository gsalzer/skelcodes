{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/maker/IMakerDAO.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(\r\n        address,\r\n        uint256,\r\n        address\r\n    ) external view returns (uint256);\r\n\r\n    function ilks(uint256) external view returns (bytes32);\r\n\r\n    function owns(uint256) external view returns (address);\r\n\r\n    function urns(uint256) external view returns (address);\r\n\r\n    function vat() external view returns (address);\r\n\r\n    function open(bytes32, address) external returns (uint256);\r\n\r\n    function give(uint256, address) external;\r\n\r\n    function cdpAllow(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function urnAllow(address, uint256) external;\r\n\r\n    function frob(\r\n        uint256,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function flux(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function move(\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function exit(\r\n        address,\r\n        uint256,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function quit(uint256, address) external;\r\n\r\n    function enter(address, uint256) external;\r\n\r\n    function shift(uint256, uint256) external;\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint256);\r\n\r\n    function ilks(bytes32)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function dai(address) external view returns (uint256);\r\n\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n\r\n    function frob(\r\n        bytes32,\r\n        address,\r\n        address,\r\n        address,\r\n        int256,\r\n        int256\r\n    ) external;\r\n\r\n    function hope(address) external;\r\n\r\n    function move(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function dec() external view returns (uint256);\r\n\r\n    function gem() external view returns (address);\r\n\r\n    function ilk() external view returns (bytes32);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external returns (VatLike);\r\n\r\n    function dai() external view returns (address);\r\n\r\n    function join(address, uint256) external payable;\r\n\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface JugLike {\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface SpotterLike {\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n}\r\n\r\n// File: contracts/interfaces/vesper/ICollateralManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICollateralManager {\r\n    function addGemJoin(address[] calldata gemJoins) external;\r\n\r\n    function mcdManager() external view returns (address);\r\n\r\n    function borrow(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function depositCollateral(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function getVaultBalance(uint256 vaultNum) external view returns (uint256 collateralLocked);\r\n\r\n    function getVaultDebt(uint256 vaultNum) external view returns (uint256 daiDebt);\r\n\r\n    function getVaultInfo(uint256 vaultNum)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function payback(uint256 vaultNum, uint256 amount) external;\r\n\r\n    function registerVault(uint256 vaultNum, bytes32 collateralType) external;\r\n\r\n    function vaultOwner(uint256 vaultNum) external returns (address owner);\r\n\r\n    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function withdrawCollateral(uint256 vaultNum, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/vesper/IController.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IController {\r\n    function aaveProvider() external view returns (address);\r\n\r\n    function aaveReferralCode() external view returns (uint16);\r\n\r\n    function feeCollector(address) external view returns (address);\r\n\r\n    function founderFee() external view returns (uint256);\r\n\r\n    function founderVault() external view returns (address);\r\n\r\n    function interestFee(address) external view returns (uint256);\r\n\r\n    function isPool(address) external view returns (bool);\r\n\r\n    function pools() external view returns (address);\r\n\r\n    function poolStrategy(address) external view returns (address);\r\n\r\n    function rebalanceFriction(address) external view returns (uint256);\r\n\r\n    function treasuryPool() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function withdrawFee(address) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/strategies/CollateralManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DSMath {\r\n    uint256 internal constant RAY = 10**27;\r\n    uint256 internal constant WAD = 10**18;\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"sub-overflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function toInt(uint256 x) internal pure returns (int256 y) {\r\n        y = int256(x);\r\n        require(y >= 0, \"int-overflow\");\r\n    }\r\n\r\n    function toRad(uint256 wad) internal pure returns (uint256 rad) {\r\n        rad = mul(wad, RAY);\r\n    }\r\n\r\n    /**\r\n     * @notice It will work only if _dec < 18\r\n     */\r\n    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10**(18 - _dec));\r\n    }\r\n}\r\n\r\ncontract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    mapping(uint256 => address) public override vaultOwner;\r\n    mapping(bytes32 => address) public mcdGemJoin;\r\n    mapping(uint256 => bytes32) public vaultType;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\r\n    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\r\n    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\r\n    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\r\n    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\r\n    IController public immutable controller;\r\n\r\n    modifier onlyVaultOwner(uint256 vaultNum) {\r\n        require(msg.sender == vaultOwner[vaultNum], \"Not a vault owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(msg.sender == address(controller), \"Not a controller\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _controller) public {\r\n        require(_controller != address(0), \"_controller is zero\");\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    /**\r\n     * @dev Add gemJoin adapter address from Maker in mapping\r\n     * @param gemJoins Array of gem join addresses\r\n     */\r\n    function addGemJoin(address[] calldata gemJoins) external override onlyController {\r\n        require(gemJoins.length != 0, \"No gemJoin address\");\r\n        for (uint256 i; i < gemJoins.length; i++) {\r\n            address gemJoin = gemJoins[i];\r\n            bytes32 ilk = GemJoinLike(gemJoin).ilk();\r\n            mcdGemJoin[ilk] = gemJoin;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Store vault info.\r\n     * @param vaultNum Vault number.\r\n     * @param collateralType Collateral type of vault.\r\n     */\r\n    function registerVault(uint256 vaultNum, bytes32 collateralType) external override {\r\n        require(msg.sender == ManagerLike(mcdManager).owns(vaultNum), \"Not a vault owner\");\r\n        vaultOwner[vaultNum] = msg.sender;\r\n        vaultType[vaultNum] = collateralType;\r\n    }\r\n\r\n    /**\r\n     * @dev Update MCD addresses.\r\n     */\r\n    function updateMCDAddresses(\r\n        address _mcdManager,\r\n        address _mcdDaiJoin,\r\n        address _mcdSpot,\r\n        address _mcdJug\r\n    ) external onlyController {\r\n        mcdManager = _mcdManager;\r\n        mcdDaiJoin = _mcdDaiJoin;\r\n        mcdSpot = _mcdSpot;\r\n        mcdJug = _mcdJug;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit ERC20 collateral.\r\n     * @param vaultNum Vault number.\r\n     * @param amount ERC20 amount to deposit.\r\n     */\r\n    function depositCollateral(uint256 vaultNum, uint256 amount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        onlyVaultOwner(vaultNum)\r\n    {\r\n        // Receives Gem amount, approve and joins it into the vat.\r\n        // Also convert amount to 18 decimal\r\n        amount = joinGem(mcdGemJoin[vaultType[vaultNum]], amount);\r\n\r\n        ManagerLike manager = ManagerLike(mcdManager);\r\n        // Locks Gem amount into the CDP\r\n        VatLike(manager.vat()).frob(\r\n            vaultType[vaultNum],\r\n            manager.urns(vaultNum),\r\n            address(this),\r\n            address(this),\r\n            toInt(amount),\r\n            0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collateral.\r\n     * @param vaultNum Vault number.\r\n     * @param amount Collateral amount to withdraw.\r\n     */\r\n    function withdrawCollateral(uint256 vaultNum, uint256 amount)\r\n        external\r\n        override\r\n        nonReentrant\r\n        onlyVaultOwner(vaultNum)\r\n    {\r\n        ManagerLike manager = ManagerLike(mcdManager);\r\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[vaultType[vaultNum]]);\r\n\r\n        uint256 amount18 = convertTo18(gemJoin.dec(), amount);\r\n\r\n        // Unlocks Gem amount18 from the CDP\r\n        manager.frob(vaultNum, -toInt(amount18), 0);\r\n\r\n        // Moves Gem amount18 from the CDP urn to this address\r\n        manager.flux(vaultNum, address(this), amount18);\r\n\r\n        // Exits Gem amount to this address as a token\r\n        gemJoin.exit(address(this), amount);\r\n\r\n        // Send Gem to pool's address\r\n        IERC20(gemJoin.gem()).safeTransfer(vaultOwner[vaultNum], amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Payback borrowed DAI.\r\n     * @param vaultNum Vault number.\r\n     * @param amount Dai amount to payback.\r\n     */\r\n    function payback(uint256 vaultNum, uint256 amount) external override onlyVaultOwner(vaultNum) {\r\n        ManagerLike manager = ManagerLike(mcdManager);\r\n        address urn = manager.urns(vaultNum);\r\n        address vat = manager.vat();\r\n        bytes32 ilk = vaultType[vaultNum];\r\n\r\n        // Calculate dai debt\r\n        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\r\n        require(_daiDebt >= amount, \"paying-excess-debt\");\r\n\r\n        // Approve and join dai in vat\r\n        joinDai(urn, amount);\r\n        manager.frob(vaultNum, 0, _getWipeAmount(ilk, urn, vat));\r\n    }\r\n\r\n    /**\r\n     * @dev Borrow DAI.\r\n     * @param vaultNum Vault number.\r\n     * @param amount Dai amount to borrow.\r\n     */\r\n    function borrow(uint256 vaultNum, uint256 amount) external override onlyVaultOwner(vaultNum) {\r\n        ManagerLike manager = ManagerLike(mcdManager);\r\n        address vat = manager.vat();\r\n\r\n        // Generates debt in the CDP\r\n        manager.frob(vaultNum, 0, _getBorrowAmount(vat, manager.urns(vaultNum), vaultNum, amount));\r\n        // Moves the DAI amount (balance in the vat in rad) to pool's address\r\n        manager.move(vaultNum, address(this), toRad(amount));\r\n        // Allows adapter to access to pool's DAI balance in the vat\r\n        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\r\n            VatLike(vat).hope(mcdDaiJoin);\r\n        }\r\n        // Exits DAI as a token to user's address\r\n        DaiJoinLike(mcdDaiJoin).exit(msg.sender, amount);\r\n    }\r\n\r\n    /// @dev sweep given ERC20 token to treasury pool\r\n    function sweepErc20(address fromToken) external {\r\n        uint256 amount = IERC20(fromToken).balanceOf(address(this));\r\n        address treasuryPool = controller.treasuryPool();\r\n        IERC20(fromToken).safeTransfer(treasuryPool, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get current dai debt of vault.\r\n     * @param vaultNum Vault number.\r\n     */\r\n    function getVaultDebt(uint256 vaultNum) external view override returns (uint256 daiDebt) {\r\n        address urn = ManagerLike(mcdManager).urns(vaultNum);\r\n        address vat = ManagerLike(mcdManager).vat();\r\n        bytes32 ilk = vaultType[vaultNum];\r\n\r\n        daiDebt = _getVaultDebt(ilk, urn, vat);\r\n    }\r\n\r\n    /**\r\n     * @dev Get current collateral balance of vault.\r\n     * @param vaultNum Vault number.\r\n     */\r\n    function getVaultBalance(uint256 vaultNum)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 collateralLocked)\r\n    {\r\n        address vat = ManagerLike(mcdManager).vat();\r\n        address urn = ManagerLike(mcdManager).urns(vaultNum);\r\n        (collateralLocked, ) = VatLike(vat).urns(vaultType[vaultNum], urn);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate state based on withdraw amount.\r\n     * @param vaultNum Vault number.\r\n     * @param amount Collateral amount to withraw.\r\n     */\r\n    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        )\r\n    {\r\n        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(\r\n            vaultNum\r\n        );\r\n\r\n        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[vaultType[vaultNum]]);\r\n        uint256 amount18 = convertTo18(gemJoin.dec(), amount);\r\n        require(amount18 <= collateralLocked, \"insufficient collateral locked\");\r\n        collateralLocked = sub(collateralLocked, amount18);\r\n        collateralRatio = getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\r\n    }\r\n\r\n    /**\r\n     * @dev Get vault info\r\n     * @param vaultNum Vault number.\r\n     */\r\n    function getVaultInfo(uint256 vaultNum)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        )\r\n    {\r\n        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(vaultNum);\r\n        collateralRatio = getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\r\n    }\r\n\r\n    function joinDai(address urn, uint256 amount) internal {\r\n        DaiJoinLike daiJoin = DaiJoinLike(mcdDaiJoin);\r\n        // Transfer Dai from strategy or pool to here\r\n        IERC20(DAI).transferFrom(msg.sender, address(this), amount);\r\n        // Approves adapter to move dai.\r\n        IERC20(DAI).approve(mcdDaiJoin, amount);\r\n        // Joins DAI into the vat\r\n        daiJoin.join(urn, amount);\r\n    }\r\n\r\n    function joinGem(address adapter, uint256 amount) internal returns (uint256) {\r\n        GemJoinLike gemJoin = GemJoinLike(adapter);\r\n\r\n        IERC20 token = IERC20(gemJoin.gem());\r\n        // Transfer token from strategy or pool to here\r\n        token.safeTransferFrom(msg.sender, address(this), amount);\r\n        // Approves adapter to take the Gem amount\r\n        token.safeApprove(adapter, amount);\r\n        // Joins Gem collateral into the vat\r\n        gemJoin.join(address(this), amount);\r\n        // Convert amount to 18 decimal\r\n        return convertTo18(gemJoin.dec(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get borrow dai amount.\r\n     */\r\n    function _getBorrowAmount(\r\n        address vat,\r\n        address urn,\r\n        uint256 vaultNum,\r\n        uint256 wad\r\n    ) internal returns (int256 amount) {\r\n        // Updates stability fee rate\r\n        uint256 rate = JugLike(mcdJug).drip(vaultType[vaultNum]);\r\n\r\n        // Gets DAI balance of the urn in the vat\r\n        uint256 dai = VatLike(vat).dai(urn);\r\n\r\n        // If there was already enough DAI in the vat balance, just exits it without adding more debt\r\n        if (dai < mul(wad, RAY)) {\r\n            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\r\n            amount = toInt(sub(mul(wad, RAY), dai) / rate);\r\n            // This is neeeded due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\r\n            amount = mul(uint256(amount), rate) < mul(wad, RAY) ? amount + 1 : amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get collateral ratio\r\n     */\r\n    function getCollateralRatio(\r\n        uint256 collateralLocked,\r\n        uint256 collateralRate,\r\n        uint256 daiDebt\r\n    ) internal pure returns (uint256) {\r\n        if (collateralLocked == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (daiDebt == 0) {\r\n            return MAX_UINT_VALUE;\r\n        }\r\n\r\n        require(collateralRate != 0, \"Collateral rate is zero\");\r\n        return wdiv(wmul(collateralLocked, collateralRate), daiDebt);\r\n    }\r\n\r\n    /**\r\n     * @dev Get Vault Debt Amount.\r\n     */\r\n    function _getVaultDebt(\r\n        bytes32 ilk,\r\n        address urn,\r\n        address vat\r\n    ) internal view returns (uint256 wad) {\r\n        // Get normalised debt [wad]\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\r\n        // Get stable coin rate [ray]\r\n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\r\n        // Get balance from vat [rad]\r\n        uint256 dai = VatLike(vat).dai(urn);\r\n\r\n        wad = _getVaultDebt(art, rate, dai);\r\n    }\r\n\r\n    function _getVaultDebt(\r\n        uint256 art,\r\n        uint256 rate,\r\n        uint256 dai\r\n    ) internal pure returns (uint256 wad) {\r\n        if (dai < mul(art, rate)) {\r\n            uint256 rad = sub(mul(art, rate), dai);\r\n            wad = rad / RAY;\r\n            wad = mul(wad, RAY) < rad ? wad + 1 : wad;\r\n        } else {\r\n            wad = 0;\r\n        }\r\n    }\r\n\r\n    function _getVaultInfo(uint256 vaultNum)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 collateralUsdRate,\r\n            uint256 daiDebt,\r\n            uint256 minimumDebt\r\n        )\r\n    {\r\n        address urn = ManagerLike(mcdManager).urns(vaultNum);\r\n        address vat = ManagerLike(mcdManager).vat();\r\n        bytes32 ilk = vaultType[vaultNum];\r\n\r\n        // Get minimum liquidation ratio [ray]\r\n        (, uint256 mat) = SpotterLike(mcdSpot).ilks(ilk);\r\n\r\n        // Get collateral locked and normalised debt [wad] [wad]\r\n        (uint256 ink, uint256 art) = VatLike(vat).urns(ilk, urn);\r\n        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\r\n        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(vat).ilks(ilk);\r\n        // Get balance from vat [rad]\r\n\r\n        collateralLocked = ink;\r\n        daiDebt = _getVaultDebt(art, rate, VatLike(vat).dai(urn));\r\n        minimumDebt = dust / RAY;\r\n        // Calculate collateral rate in 18 decimals\r\n        collateralUsdRate = rmul(mat, spot) / 10**9;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Payback amount.\r\n     * @notice We need to fetch latest art, rate and dai to calcualte payback amount.\r\n     */\r\n    function _getWipeAmount(\r\n        bytes32 ilk,\r\n        address urn,\r\n        address vat\r\n    ) internal view returns (int256 amount) {\r\n        // Get normalize debt, rate and dai balance from Vat\r\n        (, uint256 art) = VatLike(vat).urns(ilk, urn);\r\n        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\r\n        uint256 dai = VatLike(vat).dai(urn);\r\n\r\n        // Uses the whole dai balance in the vat to reduce the debt\r\n        amount = toInt(dai / rate);\r\n        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\r\n        amount = uint256(amount) <= art ? -amount : -toInt(art);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"gemJoins\",\"type\":\"address[]\"}],\"name\":\"addGemJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"}],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdDaiJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mcdGemJoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdJug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdSpot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"}],\"name\":\"registerVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mcdManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdDaiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdSpot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mcdJug\",\"type\":\"address\"}],\"name\":\"updateMCDAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"whatWouldWithdrawDo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralUsdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CollateralManager","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f8ea0ee6818c6cf798a1b208139f6b56563f6067","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://217b4dbbca346d638cedf2c26b7a0fc1be766055beac909862a0a83b4ebe7f0d"}]}