{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/root/oe_test/contracts/Exchange.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./libs/LibUnitConverter.sol\\\";\\nimport \\\"./libs/LibValidator.sol\\\";\\nimport \\\"./libs/MarginalFunctionality.sol\\\";\\nimport \\\"./OrionVault.sol\\\";\\n/**\\n * @title Exchange\\n * @dev Exchange contract for the Orion Protocol\\n * @author @wafflemakr\\n */\\n\\n/*\\n\\n  Overflow safety:\\n  We do not use SafeMath and control overflows by\\n  not accepting large ints on input.\\n\\n  Balances inside contract are stored as int192.\\n\\n  Allowed input amounts are int112 or uint112: it is enough for all\\n  practically used tokens: for instance if decimal unit is 1e18, int112\\n  allow to encode up to 2.5e15 decimal units.\\n  That way adding/subtracting any amount from balances won't overflow, since\\n  minimum number of operations to reach max int is practically infinite: ~1e24.\\n\\n  Allowed prices are uint64. Note, that price is represented as\\n  price per 1e8 tokens. That means that amount*price always fit uint256,\\n  while amount*price/1e8 not only fit int192, but also can be added, subtracted\\n  without overflow checks: number of malicion operations to overflow ~1e13.\\n*/\\ncontract Exchange is OrionVault, ReentrancyGuard {\\n\\n    using LibValidator for LibValidator.Order;\\n    using SafeERC20 for IERC20;\\n\\n    // EVENTS\\n    event NewAssetTransaction(\\n        address indexed user,\\n        address indexed assetAddress,\\n        bool isDeposit,\\n        uint112 amount,\\n        uint64 timestamp\\n    );\\n\\n    event NewTrade(\\n        address indexed buyer,\\n        address indexed seller,\\n        address baseAsset,\\n        address quoteAsset,\\n        uint64 filledPrice,\\n        uint192 filledAmount,\\n        uint192 amountQuote\\n    );\\n\\n    // MAIN FUNCTIONS\\n\\n    function initialize() public payable initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n    }\\n\\n    function setBasicParams(address orionToken, address priceOracleAddress, address allowedMatcher) public onlyOwner {\\n      _orionToken = IERC20(orionToken);\\n      _oracleAddress = priceOracleAddress;\\n      _allowedMatcher = allowedMatcher;\\n    }\\n\\n    function updateMarginalSettings(address[] memory _collateralAssets,\\n                                    uint8 _stakeRisk,\\n                                    uint8 _liquidationPremium,\\n                                    uint64 _priceOverdue,\\n                                    uint64 _positionOverdue) public onlyOwner {\\n      collateralAssets = _collateralAssets;\\n      stakeRisk = _stakeRisk;\\n      liquidationPremium = _liquidationPremium;\\n      priceOverdue = _priceOverdue;\\n      positionOverdue = _positionOverdue;\\n    }\\n\\n    function updateAssetRisks(address[] memory assets, uint8[] memory risks) public onlyOwner {\\n        for(uint16 i; i< assets.length; i++)\\n         assetRisks[assets[i]] = risks[i];\\n    }\\n\\n    /**\\n     * @dev Deposit ERC20 tokens to the exchange contract\\n     * @dev User needs to approve token contract first\\n     * @param amount asset amount to deposit in its base unit\\n     */\\n    function depositAsset(address assetAddress, uint112 amount) external {\\n        //require(asset.transferFrom(msg.sender, address(this), uint256(amount)), \\\"E6\\\");\\n        IERC20(assetAddress).safeTransferFrom(msg.sender, address(this), uint256(amount));\\n        generalDeposit(assetAddress,amount);\\n    }\\n\\n    /**\\n     * @notice Deposit ETH to the exchange contract\\n     * @dev deposit event will be emitted with the amount in decimal format (10^8)\\n     * @dev balance will be stored in decimal format too\\n     */\\n    function deposit() external payable {\\n        generalDeposit(address(0), uint112(msg.value));\\n    }\\n\\n    function generalDeposit(address assetAddress, uint112 amount) internal {\\n        address user = msg.sender;\\n        bool wasLiability = assetBalances[user][assetAddress]<0;\\n        int112 safeAmountDecimal = LibUnitConverter.baseUnitToDecimal(\\n            assetAddress,\\n            amount\\n        );\\n        assetBalances[user][assetAddress] += safeAmountDecimal;\\n        if(amount>0)\\n          emit NewAssetTransaction(user, assetAddress, true, uint112(safeAmountDecimal), uint64(block.timestamp));\\n        if(wasLiability)\\n          MarginalFunctionality.updateLiability(user, assetAddress, liabilities, uint112(safeAmountDecimal), assetBalances[user][assetAddress]);\\n\\n    }\\n    /**\\n     * @dev Withdrawal of remaining funds from the contract back to the address\\n     * @param assetAddress address of the asset to withdraw\\n     * @param amount asset amount to withdraw in its base unit\\n     */\\n    function withdraw(address assetAddress, uint112 amount)\\n        external\\n        nonReentrant\\n    {\\n        int112 safeAmountDecimal = LibUnitConverter.baseUnitToDecimal(\\n            assetAddress,\\n            amount\\n        );\\n\\n        address user = msg.sender;\\n\\n        assetBalances[user][assetAddress] -= safeAmountDecimal;\\n        \\n        require(assetBalances[user][assetAddress]>=0 && checkPosition(user), \\\"E1w\\\"); //TODO\\n\\n        uint256 _amount = uint256(amount);\\n        if(assetAddress == address(0)) {\\n          (bool success, ) = user.call{value:_amount}(\\\"\\\");\\n          require(success, \\\"E6w\\\");\\n        } else {\\n          IERC20(assetAddress).safeTransfer(user, _amount);\\n        }\\n\\n\\n        emit NewAssetTransaction(user, assetAddress, false, uint112(safeAmountDecimal), uint64(block.timestamp));\\n    }\\n\\n\\n    /**\\n     * @dev Get asset balance for a specific address\\n     * @param assetAddress address of the asset to query\\n     * @param user user address to query\\n     */\\n    function getBalance(address assetAddress, address user)\\n        public\\n        view\\n        returns (int192 assetBalance)\\n    {\\n        return assetBalances[user][assetAddress];\\n    }\\n\\n\\n    /**\\n     * @dev Batch query of asset balances for a user\\n     * @param assetsAddresses array of addresses of teh assets to query\\n     * @param user user address to query\\n     */\\n    function getBalances(address[] memory assetsAddresses, address user)\\n        public\\n        view\\n        returns (int192[] memory)\\n    {\\n        int192[] memory balances = new int192[](assetsAddresses.length);\\n        for (uint16 i; i < assetsAddresses.length; i++) {\\n            balances[i] = assetBalances[user][assetsAddresses[i]];\\n        }\\n        return balances;\\n    }\\n\\n    function getLiabilities(address user)\\n        public\\n        view\\n        returns (MarginalFunctionality.Liability[] memory liabilitiesArray)\\n    {\\n        return liabilities[user];\\n    }\\n    \\n\\n    function getCollateralAssets() public view returns (address[] memory) {\\n        return collateralAssets;\\n    }\\n\\n    /**\\n     * @dev get hash for an order\\n     */\\n    function getOrderHash(LibValidator.Order memory order) public pure returns (bytes32){\\n      return order.getTypeValueHash();\\n    }\\n\\n\\n    /**\\n     * @dev get trades for a specific order\\n     */\\n    function getFilledAmounts(bytes32 orderHash, LibValidator.Order memory order)\\n        public\\n        view\\n        returns (int192 totalFilled, int192 totalFeesPaid)\\n    {\\n        totalFilled = int192(filledAmounts[orderHash]); //It is safe to convert here: filledAmounts is result of ui112 additions\\n        totalFeesPaid = int192(uint256(order.matcherFee)*uint112(totalFilled)/order.amount); //matcherFee is u64; safe multiplication here\\n    }\\n\\n\\n    /**\\n     * @notice Settle a trade with two orders, filled price and amount\\n     * @dev 2 orders are submitted, it is necessary to match them:\\n        check conditions in orders for compliance filledPrice, filledAmountbuyOrderHash\\n        change balances on the contract respectively with buyer, seller, matcbuyOrderHashher\\n     * @param buyOrder structure of buy side orderbuyOrderHash\\n     * @param sellOrder structure of sell side order\\n     * @param filledPrice price at which the order was settled\\n     * @param filledAmount amount settled between orders\\n     */\\n    function fillOrders(\\n        LibValidator.Order memory buyOrder,\\n        LibValidator.Order memory sellOrder,\\n        uint64 filledPrice,\\n        uint112 filledAmount\\n    ) public nonReentrant {\\n        // --- VARIABLES --- //\\n        // Amount of quote asset\\n        uint256 _amountQuote = uint256(filledAmount)*filledPrice/(10**8);\\n        require(_amountQuote<2**112-1, \\\"E12G\\\");\\n        uint112 amountQuote = uint112(_amountQuote);\\n\\n        // Order Hashes\\n        bytes32 buyOrderHash = buyOrder.getTypeValueHash();\\n        bytes32 sellOrderHash = sellOrder.getTypeValueHash();\\n\\n        // --- VALIDATIONS --- //\\n\\n        // Validate signatures using eth typed sign V1\\n        require(\\n            LibValidator.checkOrdersInfo(\\n                buyOrder,\\n                sellOrder,\\n                msg.sender,\\n                filledAmount,\\n                filledPrice,\\n                block.timestamp,\\n                _allowedMatcher\\n            ),\\n            \\\"E3G\\\"\\n        );\\n\\n\\n        // --- UPDATES --- //\\n\\n        //updateFilledAmount\\n        filledAmounts[buyOrderHash] += filledAmount; //it is safe to add ui112 to each other to get i192\\n        filledAmounts[sellOrderHash] += filledAmount;\\n        require(filledAmounts[buyOrderHash] <= buyOrder.amount, \\\"E12B\\\");\\n        require(filledAmounts[sellOrderHash] <= sellOrder.amount, \\\"E12S\\\");\\n\\n\\n        // Update User's balances\\n        updateOrderBalance(buyOrder, filledAmount, amountQuote, true);\\n        updateOrderBalance(sellOrder, filledAmount, amountQuote, false);\\n        require(checkPosition(buyOrder.senderAddress), \\\"Incorrect margin position for buyer\\\");\\n        require(checkPosition(sellOrder.senderAddress), \\\"Incorrect margin position for seller\\\");\\n\\n\\n        emit NewTrade(\\n            buyOrder.senderAddress,\\n            sellOrder.senderAddress,\\n            buyOrder.baseAsset,\\n            buyOrder.quoteAsset,\\n            filledPrice,\\n            filledAmount,\\n            amountQuote\\n        );\\n    }\\n\\n    function validateOrder(LibValidator.Order memory order)\\n        public\\n        pure\\n        returns (bool isValid)\\n    {\\n        isValid = LibValidator.validateV3(order);\\n    }\\n\\n    /**\\n     *  @notice update user balances and send matcher fee\\n     *  @param isBuyer boolean, indicating true if the update is for buyer, false for seller\\n     */\\n    function updateOrderBalance(\\n        LibValidator.Order memory order,\\n        uint112 filledAmount,\\n        uint112 amountQuote,\\n        bool isBuyer\\n    ) internal {\\n        address user = order.senderAddress;\\n\\n        // matcherFee: u64, filledAmount u128 => matcherFee*filledAmount fit u256\\n        // result matcherFee fit u64\\n        order.matcherFee = uint64(uint256(order.matcherFee)*filledAmount/order.amount); //rewrite in memory only\\n        if(!isBuyer)\\n          (filledAmount, amountQuote) = (amountQuote, filledAmount);\\n\\n        bool feeAssetInLiabilities  = assetBalances[user][order.matcherFeeAsset]<0;\\n        (address firstAsset, address secondAsset) = isBuyer?\\n                                                     (order.quoteAsset, order.baseAsset):\\n                                                     (order.baseAsset, order.quoteAsset);\\n        int192 firstBalance = assetBalances[user][firstAsset];\\n        int192 secondBalance = assetBalances[user][secondAsset];\\n        int192 temp; // this variable will be used for temporary variable storage (optimization purpose)\\n        bool firstInLiabilities = firstBalance<0;\\n        bool secondInLiabilities  = secondBalance<0;\\n\\n        temp = assetBalances[user][firstAsset] - amountQuote;\\n        assetBalances[user][firstAsset] = temp;\\n        assetBalances[user][secondAsset] += filledAmount;\\n        if(!firstInLiabilities && (temp<0)){\\n          setLiability(user, firstAsset, temp);\\n        }\\n        if(secondInLiabilities && (assetBalances[user][secondAsset]>=0)) {\\n          MarginalFunctionality.removeLiability(user, secondAsset, liabilities);\\n        }\\n\\n        // User pay for fees\\n        temp = assetBalances[user][order.matcherFeeAsset] - order.matcherFee;\\n        assetBalances[user][order.matcherFeeAsset] = temp;\\n        if(!feeAssetInLiabilities && (temp<0)) {\\n            setLiability(user, order.matcherFeeAsset, temp);\\n        }\\n        assetBalances[order.matcherAddress][order.matcherFeeAsset] += order.matcherFee;\\n        //generalTransfer(order.matcherFeeAsset, order.matcherAddress, order.matcherFee, true);\\n        //IERC20(order.matcherFeeAsset).safeTransfer(order.matcherAddress, uint256(order.matcherFee)); //TODO not transfer, but add to balance\\n    }\\n\\n    /**\\n     * @notice users can cancel an order\\n     * @dev write an orderHash in the contract so that such an order cannot be filled (executed)\\n     */\\n    /* Unused for now\\n    function cancelOrder(LibValidator.Order memory order) public {\\n        require(order.validateV3(), \\\"E2\\\");\\n        require(msg.sender == order.senderAddress, \\\"Not owner\\\");\\n\\n        bytes32 orderHash = order.getTypeValueHash();\\n\\n        require(!isOrderCancelled(orderHash), \\\"E4\\\");\\n\\n        (\\n            int192 totalFilled, //uint totalFeesPaid\\n\\n        ) = getFilledAmounts(orderHash);\\n\\n        if (totalFilled > 0)\\n            orderStatus[orderHash] = Status.PARTIALLY_CANCELLED;\\n        else orderStatus[orderHash] = Status.CANCELLED;\\n\\n        emit OrderUpdate(orderHash, msg.sender, orderStatus[orderHash]);\\n\\n        assert(\\n            orderStatus[orderHash] == Status.PARTIALLY_CANCELLED ||\\n                orderStatus[orderHash] == Status.CANCELLED\\n        );\\n    }\\n    */\\n\\n    function checkPosition(address user) public view returns (bool) {\\n        if(liabilities[user].length == 0)\\n          return true;\\n        return calcPosition(user).state == MarginalFunctionality.PositionState.POSITIVE;\\n    }\\n\\n    function getConstants(address user)\\n             internal\\n             view\\n             returns (MarginalFunctionality.UsedConstants memory) {\\n       return MarginalFunctionality.UsedConstants(user,\\n                                                  _oracleAddress,\\n                                                  address(this),\\n                                                  address(_orionToken),\\n                                                  positionOverdue,\\n                                                  priceOverdue,\\n                                                  stakeRisk,\\n                                                  liquidationPremium);\\n    }\\n\\n    function calcPosition(address user) public view returns (MarginalFunctionality.Position memory) {\\n        MarginalFunctionality.UsedConstants memory constants =\\n          getConstants(user);\\n        return MarginalFunctionality.calcPosition(collateralAssets,\\n                                           liabilities,\\n                                           assetBalances,\\n                                           assetRisks,\\n                                           constants);\\n\\n    }\\n\\n    function partiallyLiquidate(address broker, address redeemedAsset, uint112 amount) public {\\n        MarginalFunctionality.UsedConstants memory constants =\\n          getConstants(broker);\\n        MarginalFunctionality.partiallyLiquidate(collateralAssets,\\n                                           liabilities,\\n                                           assetBalances,\\n                                           assetRisks,\\n                                           constants,\\n                                           redeemedAsset,\\n                                           amount);\\n    }\\n\\n    function setLiability(address user, address asset, int192 balance) internal {\\n        liabilities[user].push(\\n          MarginalFunctionality.Liability({\\n                                             asset: asset,\\n                                             timestamp: uint64(block.timestamp),\\n                                             outstandingAmount: uint192(-balance)})\\n        );\\n    }\\n\\n    /**\\n     *  @dev  revert on fallback function\\n     */\\n    fallback() external {\\n        revert(\\\"E6\\\");\\n    }\\n\\n    /* Error Codes\\n\\n        E1: Insufficient Balance, flavor S - stake\\n        E2: Invalid Signature, flavor B,S - buyer, seller\\n        E3: Invalid Order Info, flavor G - general, M - wrong matcher, M2 unauthorized matcher, As - asset mismatch, AmB/AmS - amount mismatch (buyer,seller), PrB/PrS - price mismatch(buyer,seller), D - direction mismatch,\\n        E4: Order expired, flavor B,S - buyer,seller\\n        E5: Contract not active,\\n        E6: Transfer error\\n        E7: Incorrect state prior to liquidation\\n        E8: Liquidator doesn't satisfy requirements\\n        E9: Data for liquidation handling is outdated\\n        E10: Incorrect state after liquidation\\n        E11: Amount overflow\\n        E12: Incorrect filled amount, flavor G,B,S: general(overflow), buyer order overflow, seller order overflow\\n        E14: Authorization error, sfs - seizeFromStake\\n    */\\n\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/ExchangeStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libs/MarginalFunctionality.sol\\\";\\n\\n\\ncontract ExchangeStorage {\\n\\n    //order -> filledAmount\\n    mapping(bytes32 => uint192) public filledAmounts;\\n\\n\\n    // Get user balance by address and asset address\\n    mapping(address => mapping(address => int192)) internal assetBalances;\\n    // List of assets with negative balance for each user\\n    mapping(address => MarginalFunctionality.Liability[]) public liabilities;\\n    // List of assets which can be used as collateral and risk coefficients for them\\n    address[] internal collateralAssets;\\n    mapping(address => uint8) public assetRisks;\\n    // Risk coefficient for locked ORN\\n    uint8 public stakeRisk;\\n    // Liquidation premium\\n    uint8 public liquidationPremium;\\n    // Delays after which price and position become outdated\\n    uint64 public priceOverdue;\\n    uint64 public positionOverdue;\\n\\n    IERC20 _orionToken;\\n    address _oracleAddress;\\n    address _allowedMatcher;\\n\\n\\n}\\n\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/OrionVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./ExchangeStorage.sol\\\";\\n\\nabstract contract OrionVault is ExchangeStorage, OwnableUpgradeSafe {\\n\\n    enum StakePhase{ NOTSTAKED, LOCKED, RELEASING, READYTORELEASE, FROZEN }\\n\\n\\n    struct Stake {\\n      uint64 amount; // 100m ORN in circulation fits uint64\\n      StakePhase phase;\\n      uint64 lastActionTimestamp;\\n    }\\n\\n    uint64 constant releasingDuration = 3600*24;\\n    mapping(address => Stake) private stakingData;\\n\\n\\n\\n    function getStake(address user) public view returns (Stake memory){\\n        Stake memory stake = stakingData[user];\\n        if(stake.phase == StakePhase.RELEASING && (block.timestamp - stake.lastActionTimestamp) > releasingDuration) {\\n          stake.phase = StakePhase.READYTORELEASE;\\n        }\\n        return stake;\\n    }\\n\\n    function getStakeBalance(address user) public view returns (uint256) {\\n        return getStake(user).amount;\\n    }\\n\\n    function getStakePhase(address user) public view returns (StakePhase) {\\n        return getStake(user).phase;\\n    }\\n\\n    function getLockedStakeBalance(address user) public view returns (uint256) {\\n      Stake memory stake = getStake(user);\\n      if(stake.phase == StakePhase.LOCKED || stake.phase == StakePhase.FROZEN)\\n        return stake.amount;\\n      return 0;\\n    }\\n\\n\\n\\n    function postponeStakeRelease(address user) external onlyOwner{\\n        Stake storage stake = stakingData[user];\\n        stake.phase = StakePhase.FROZEN;\\n    }\\n\\n    function allowStakeRelease(address user) external onlyOwner {\\n        Stake storage stake = stakingData[user];\\n        stake.phase = StakePhase.READYTORELEASE;\\n    }\\n\\n\\n\\n    function requestReleaseStake() public {\\n        address user = _msgSender();\\n        Stake memory current = getStake(user);\\n        require(liabilities[user].length == 0, \\\"Can not release stake: user has liabilities\\\");\\n        if(current.phase == StakePhase.READYTORELEASE) {\\n          Stake storage stake = stakingData[_msgSender()];\\n          assetBalances[user][address(_orionToken)] += stake.amount;\\n          stake.amount = 0;\\n          stake.phase = StakePhase.NOTSTAKED;\\n        } else if (current.phase == StakePhase.LOCKED) {\\n          Stake storage stake = stakingData[_msgSender()];\\n          stake.phase = StakePhase.RELEASING;\\n          stake.lastActionTimestamp = uint64(block.timestamp);\\n        } else {\\n          revert(\\\"Can not release funds from this phase\\\");\\n        }\\n    }\\n\\n    function lockStake(uint64 amount) public {\\n        address user = _msgSender();\\n        require(assetBalances[user][address(_orionToken)]>amount, \\\"E1S\\\");\\n        Stake storage stake = stakingData[user];\\n\\n        assetBalances[user][address(_orionToken)] -= amount;\\n        stake.amount += amount;\\n        \\n        if(stake.phase != StakePhase.FROZEN) {\\n          stake.phase = StakePhase.LOCKED; //what is frozen should stay frozen\\n        }\\n        stake.lastActionTimestamp = uint64(block.timestamp);\\n    }\\n\\n    function seizeFromStake(address user, address receiver, uint64 amount) public {\\n        require(msg.sender == address(this), \\\"E14\\\");\\n        Stake storage stake = stakingData[user];\\n        require(stake.amount >= amount, \\\"UX\\\"); //TODO\\n        stake.amount -= amount;\\n        assetBalances[receiver][address(_orionToken)] += amount;\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/OrionVaultInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\ncontract OrionVaultInterface {\\n  function getLockedStakeBalance(address user) public view returns (uint64) {\\n  }\\n  function seizeFromStake(address user, address receiver, uint64 amount) external {\\n  }\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/PriceOracleInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\ncontract PriceOracleInterface {\\n    struct PriceDataOut {\\n        uint64 price;\\n        uint64 timestamp;\\n    }\\n    mapping(address => PriceDataOut) public assetPrices;\\n    function givePrices(address[] calldata assetAddresses) external view returns (PriceDataOut[] memory) {\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/libs/LibUnitConverter.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n\\nlibrary LibUnitConverter {\\n\\n    using SafeMath for uint;\\n\\n    /**\\n        @notice convert asset amount from8 decimals (10^8) to its base unit\\n     */\\n    function decimalToBaseUnit(address assetAddress, uint amount) public view returns(int112){\\n        uint256 result;\\n\\n        if(assetAddress == address(0)){\\n            result =  amount.mul(1 ether).div(10**8); // 18 decimals\\n        } else {\\n\\n          ERC20 asset = ERC20(assetAddress);\\n          uint decimals = asset.decimals();\\n\\n          result = amount.mul(10**decimals).div(10**8);\\n        }\\n        \\n        require(result<uint112(-1), \\\"LibUnitConverter: Too big value\\\");\\n        return int112(result);\\n    }\\n\\n    /**\\n        @notice convert asset amount from its base unit to 8 decimals (10^8)\\n     */\\n    function baseUnitToDecimal(address assetAddress, uint amount) public view returns(int112){\\n        uint256 result;\\n\\n        if(assetAddress == address(0)){\\n            result = amount.mul(10**8).div(1 ether);\\n        } else {\\n\\n            ERC20 asset = ERC20(assetAddress);\\n            uint decimals = asset.decimals();\\n\\n            return uint64(amount.mul(10**8).div(10**decimals));\\n        }\\n        require(result<uint112(-1), \\\"LibUnitConverter: Too big value\\\");\\n        return int112(result);\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/libs/LibValidator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary LibValidator {\\n    using SafeMath for uint256;\\n    using SafeMath for uint64;\\n\\n    string public constant DOMAIN_NAME = \\\"Orion Exchange\\\";\\n    string public constant DOMAIN_VERSION = \\\"1\\\";\\n    uint256 public constant CHAIN_ID = 1;\\n    bytes32\\n        public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\n\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public constant ORDER_TYPEHASH = keccak256(\\n        abi.encodePacked(\\n            \\\"Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)\\\"\\n        )\\n    );\\n\\n    bytes32 public constant DOMAIN_SEPARATOR = keccak256(\\n        abi.encode(\\n            EIP712_DOMAIN_TYPEHASH,\\n            keccak256(bytes(DOMAIN_NAME)),\\n            keccak256(bytes(DOMAIN_VERSION)),\\n            CHAIN_ID,\\n            DOMAIN_SALT\\n        )\\n    );\\n\\n    struct Order {\\n        address senderAddress;\\n        address matcherAddress;\\n        address baseAsset;\\n        address quoteAsset;\\n        address matcherFeeAsset;\\n        uint64 amount;\\n        uint64 price;\\n        uint64 matcherFee;\\n        uint64 nonce;\\n        uint64 expiration;\\n        uint8 buySide; // buy or sell\\n        bytes signature;\\n    }\\n\\n    function validateV3(Order memory order) public pure returns (bool) {\\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                getTypeValueHash(order)\\n            )\\n        );\\n\\n        if (order.signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        bytes memory signature = order.signature;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        return ecrecover(digest, v, r, s) == order.senderAddress;\\n    }\\n\\n    function getTypeValueHash(Order memory _order)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 orderTypeHash = ORDER_TYPEHASH;\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    orderTypeHash,\\n                    _order.senderAddress,\\n                    _order.matcherAddress,\\n                    _order.baseAsset,\\n                    _order.quoteAsset,\\n                    _order.matcherFeeAsset,\\n                    _order.amount,\\n                    _order.price,\\n                    _order.matcherFee,\\n                    _order.nonce,\\n                    _order.expiration,\\n                    _order.buySide\\n                )\\n            );\\n    }\\n\\n    function checkOrdersInfo(\\n        Order memory buyOrder,\\n        Order memory sellOrder,\\n        address sender,\\n        uint256 filledAmount,\\n        uint256 filledPrice,\\n        uint256 currentTime,\\n        address allowedMatcher\\n    ) public pure returns (bool success) {\\n        require(validateV3(buyOrder), \\\"E2B\\\");\\n        require(validateV3(sellOrder), \\\"E2S\\\");\\n\\n        // Same matcher address\\n        require(\\n            buyOrder.matcherAddress == sender &&\\n                sellOrder.matcherAddress == sender,\\n            \\\"E3M\\\"\\n        );\\n\\n        if(allowedMatcher != address(0)) {\\n          require(buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n        }\\n\\n\\n        // Check matching assets\\n        require(\\n            buyOrder.baseAsset == sellOrder.baseAsset &&\\n                buyOrder.quoteAsset == sellOrder.quoteAsset,\\n            \\\"E3As\\\"\\n        );\\n\\n        // Check order amounts\\n        require(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n        require(filledAmount <= sellOrder.amount, \\\"E3AmS\\\");\\n\\n        // Check Price values\\n        require(filledPrice <= buyOrder.price, \\\"E3\\\");\\n        require(filledPrice >= sellOrder.price, \\\"E3\\\");\\n\\n        // Check Expiration Time. Convert to seconds first\\n        require(buyOrder.expiration.div(1000) >= currentTime, \\\"E4B\\\");\\n        require(sellOrder.expiration.div(1000) >= currentTime, \\\"E4S\\\");\\n\\n        require( buyOrder.buySide==1 && sellOrder.buySide==0, \\\"E3D\\\");\\n        success = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/libs/MarginalFunctionality.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../PriceOracleInterface.sol\\\";\\nimport \\\"../OrionVaultInterface.sol\\\";\\n\\n\\nlibrary MarginalFunctionality {\\n\\n    struct Liability {\\n        address asset;\\n        uint64 timestamp;\\n        uint192 outstandingAmount;\\n    }\\n\\n    enum PositionState {\\n        POSITIVE,\\n        NEGATIVE, // weighted position below 0\\n        OVERDUE,  // liability is not returned for too long\\n        NOPRICE,  // some assets has no price or expired\\n        INCORRECT // some of the basic requirements are not met:\\n                  // too many liabilities, no locked stake, etc\\n    }\\n    struct Position {\\n        PositionState state;\\n        int256 weightedPosition;\\n        int256 totalPosition;\\n        int256 totalLiabilities;\\n    }\\n\\n    function uint8Percent(int192 _a, uint8 b) internal pure returns (int192) {\\n        int a = int256(_a);\\n        int d = 255;\\n        int192 c = int192((a>65536) ? (a/d)*b : a*b/d );\\n\\n        return c;\\n    }\\n\\n    struct UsedConstants {\\n      address user;\\n      address _oracleAddress;\\n      address _orionVaultContractAddress;\\n      address _orionTokenAddress;\\n      uint64 positionOverdue;\\n      uint64 priceOverdue;\\n      uint8 stakeRisk;\\n      uint8 liquidationPremium;\\n    }\\n\\n    function calcAssets(address[] storage collateralAssets,\\n                        mapping(address => mapping(address => int192)) storage assetBalances,\\n                        mapping(address => uint8) storage assetRisks,\\n                        UsedConstants memory constants)\\n             internal view returns\\n        (bool outdated, int192 weightedPosition, int192 totalPosition) {\\n        for(uint8 i = 0; i < collateralAssets.length; i++) {\\n          address asset = collateralAssets[i];\\n          if(assetBalances[constants.user][asset]<0)\\n              continue; // will be calculated in calcLiabilities\\n          (uint64 price, uint64 timestamp) = (1e8, 0xfffffff000000000);\\n\\n          if(asset != constants._orionTokenAddress) {\\n            (price, timestamp) = PriceOracleInterface(constants._oracleAddress).assetPrices(asset);//TODO givePrices\\n          }\\n\\n          // balance: i192, price u64 => balance*price fits i256\\n          // since generally balance <= N*maxInt112 (where N is number operations with it),\\n          // assetValue <= N*maxInt112*maxUInt64/1e8.\\n          // That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n          int192 assetValue = int192(int256(assetBalances[constants.user][asset])*price/1e8);\\n          // Overflows logic holds here as well, except that N is the number of\\n          // operations for all assets\\n          if(assetValue>0) {\\n            weightedPosition += uint8Percent(assetValue, assetRisks[asset]);\\n            totalPosition += assetValue;\\n            // if assetValue == 0  ignore outdated price\\n            outdated = outdated ||\\n                            ((timestamp + constants.priceOverdue) < block.timestamp);\\n          }\\n        }\\n        return (outdated, weightedPosition, totalPosition);\\n    }\\n\\n    function calcLiabilities(mapping(address => Liability[]) storage liabilities,\\n                             mapping(address => mapping(address => int192)) storage assetBalances,\\n                             UsedConstants memory constants\\n                             )\\n             internal view returns\\n        (bool outdated, bool overdue, int192 weightedPosition, int192 totalPosition) {\\n        for(uint8 i = 0; i < liabilities[constants.user].length; i++) {\\n          Liability storage liability = liabilities[constants.user][i];\\n          (uint64 price, uint64 timestamp) = PriceOracleInterface(constants._oracleAddress).assetPrices(liability.asset);//TODO givePrices\\n          // balance: i192, price u64 => balance*price fits i256\\n          // since generally balance <= N*maxInt112 (where N is number operations with it),\\n          // assetValue <= N*maxInt112*maxUInt64/1e8.\\n          // That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n          int192 liabilityValue = int192(\\n                                         int256(assetBalances[constants.user][liability.asset])\\n                                         *price/1e8\\n                                        );\\n          weightedPosition += liabilityValue; //already negative since balance is negative\\n          totalPosition += liabilityValue;\\n          overdue = overdue || ((liability.timestamp + constants.positionOverdue) < block.timestamp);\\n          outdated = outdated ||\\n                          ((timestamp + constants.priceOverdue) < block.timestamp);\\n        }\\n\\n        return (outdated, overdue, weightedPosition, totalPosition);\\n    }\\n\\n    function calcPosition(\\n                        address[] storage collateralAssets,\\n                        mapping(address => Liability[]) storage liabilities,\\n                        mapping(address => mapping(address => int192)) storage assetBalances,\\n                        mapping(address => uint8) storage assetRisks,\\n                        UsedConstants memory constants\\n                        )\\n             public view returns (Position memory) {\\n        (bool outdatedPrice, int192 weightedPosition, int192 totalPosition) =\\n          calcAssets(collateralAssets,\\n                     assetBalances,\\n                     assetRisks,\\n                     constants);\\n        (bool _outdatedPrice, bool overdue, int192 _weightedPosition, int192 _totalPosition) =\\n           calcLiabilities(liabilities,\\n                           assetBalances,\\n                           constants\\n                           );\\n        uint64 lockedAmount = OrionVaultInterface(constants._orionVaultContractAddress)\\n                                  .getLockedStakeBalance(constants.user);\\n        int192 weightedStake = uint8Percent(int192(lockedAmount), constants.stakeRisk);\\n        weightedPosition += weightedStake;\\n        totalPosition += lockedAmount;\\n\\n        weightedPosition += _weightedPosition;\\n        totalPosition += _totalPosition;\\n        outdatedPrice = outdatedPrice || _outdatedPrice;\\n        bool incorrect = (liabilities[constants.user].length > 3) ||\\n                         ((liabilities[constants.user].length>0) && (lockedAmount==0));\\n        Position memory result;\\n        if(_totalPosition<0) {\\n          result.totalLiabilities = _totalPosition;\\n        }\\n        if(weightedPosition<0) {\\n          result.state = PositionState.NEGATIVE;\\n        }\\n        if(outdatedPrice) {\\n          result.state = PositionState.NOPRICE;\\n        }\\n        if(overdue) {\\n          result.state = PositionState.OVERDUE;\\n        }\\n        if(incorrect) {\\n          result.state = PositionState.INCORRECT;\\n        }\\n        result.weightedPosition = weightedPosition;\\n        result.totalPosition = totalPosition;\\n        return result;\\n    }\\n\\n    function removeLiability(address user,\\n                             address asset,\\n                             mapping(address => Liability[]) storage liabilities)\\n        public      {\\n        bool shift = false;\\n        uint8 i;\\n        for(; i<liabilities[user].length-1; i++) {\\n          if(liabilities[user][i].asset == asset) {\\n            shift = true;\\n          }\\n          if(shift)\\n            liabilities[user][i] = liabilities[user][i+1];\\n        }\\n        if(liabilities[user][i].asset == asset) {\\n            shift = true;\\n        }\\n        if(shift)\\n          liabilities[user].pop();\\n    }\\n\\n    function updateLiability(address user,\\n                             address asset,\\n                             mapping(address => Liability[]) storage liabilities,\\n                             uint112 depositAmount,\\n                             int192 currentBalance)\\n        public      {\\n        uint8 i;\\n        for(; i<liabilities[user].length-1; i++) {\\n            if(liabilities[user][i].asset == asset)\\n              break;\\n          }\\n        Liability storage liability = liabilities[user][i];\\n        if(depositAmount>=liability.outstandingAmount) {\\n          if(currentBalance>=0) {\\n            removeLiability(user,asset,liabilities);\\n          }\\n          else {\\n            liability.outstandingAmount = uint192(-currentBalance);\\n            liability.timestamp = uint64(block.timestamp);\\n          }\\n        } else {\\n            liability.outstandingAmount -= depositAmount;\\n        }\\n    }\\n\\n    function partiallyLiquidate(address[] storage collateralAssets,\\n                                mapping(address => Liability[]) storage liabilities,\\n                                mapping(address => mapping(address => int192)) storage assetBalances,\\n                                mapping(address => uint8) storage assetRisks,\\n                                UsedConstants memory constants,\\n                                address redeemedAsset,\\n                                uint112 amount) public {\\n        //Note: constants.user - is broker who will be liquidated\\n        Position memory initialPosition = calcPosition(collateralAssets,\\n                                           liabilities,\\n                                           assetBalances,\\n                                           assetRisks,\\n                                           constants);\\n        require(initialPosition.state == PositionState.NEGATIVE ||\\n                initialPosition.state == PositionState.OVERDUE  , \\\"E7\\\");\\n        address liquidator = msg.sender;\\n        require(assetBalances[liquidator][redeemedAsset]>=amount,\\\"E8\\\");\\n        assetBalances[liquidator][redeemedAsset] -= amount;\\n        assetBalances[constants.user][redeemedAsset] += amount;\\n        (uint64 price, uint64 timestamp) = PriceOracleInterface(constants._oracleAddress).assetPrices(redeemedAsset);\\n        require((timestamp + constants.priceOverdue) > block.timestamp, \\\"E9\\\"); //Price is outdated\\n\\n        int64 orionAmount = reimburseLiquidator(amount, price, liquidator, assetBalances, constants);\\n        assetBalances[liquidator][constants._orionTokenAddress] += orionAmount;\\n        Position memory finalPosition = calcPosition(collateralAssets,\\n                                           liabilities,\\n                                           assetBalances,\\n                                           assetRisks,\\n                                           constants);\\n        require( int(finalPosition.state)<3 && //POSITIVE,NEGATIVE or OVERDUE\\n                 (finalPosition.weightedPosition>initialPosition.weightedPosition),\\n                 \\\"E10\\\");//Incorrect state position after liquidation\\n       if(finalPosition.state == PositionState.POSITIVE)\\n         require (finalPosition.weightedPosition<10e8,\\\"Can not liquidate to very positive state\\\");\\n\\n    }\\n\\n    function reimburseLiquidator(\\n                       uint112 amount,\\n                       uint64 price,\\n                       address liquidator,\\n                       mapping(address => mapping(address => int192)) storage assetBalances,\\n                       UsedConstants memory constants)\\n             internal\\n             returns (int64 orionAmount) {\\n        int192 _orionAmount = int192(int256(amount)*price/1e8);\\n        _orionAmount += uint8Percent(_orionAmount,constants.liquidationPremium); //Liquidation premium\\n        require(_orionAmount == int64(_orionAmount), \\\"E11\\\");\\n        orionAmount = int64(_orionAmount);\\n        // There is only 100m Orion tokens, fits i64\\n        int64 onBalanceOrion = int64(assetBalances[constants.user][constants._orionTokenAddress]);\\n        (int64 fromBalance, int64 fromStake) = (onBalanceOrion>orionAmount)?\\n                                                 (orionAmount, 0) :\\n                                                 (onBalanceOrion>0)?\\n                                                   (onBalanceOrion, orionAmount-onBalanceOrion) :\\n                                                   (0, orionAmount);\\n\\n        if(fromBalance>0) {\\n          assetBalances[constants.user][constants._orionTokenAddress] -= int192(fromBalance);\\n        }\\n        if(fromStake>0) {\\n          OrionVaultInterface(constants._orionVaultContractAddress).seizeFromStake(constants.user, liquidator, uint64(orionAmount));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/utils/Context.sol\": {\r\n      \"content\": \"/**\\nCopied from @openzeppelin/contracts-ethereum-package to update pragma statements\\n */\\n\\npragma solidity ^0.7.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/utils/Initializable.sol\": {\r\n      \"content\": \"/**\\nCopied from @openzeppelin/contracts-ethereum-package to update pragma statements\\n */\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"/**\\nCopied from @openzeppelin/contracts-ethereum-package to update pragma statements\\n */\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/root/oe_test/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ncontract ReentrancyGuard {\\n\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!getStorageBool(REENTRANCY_MUTEX_POSITION), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        setStorageBool(REENTRANCY_MUTEX_POSITION,true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        setStorageBool(REENTRANCY_MUTEX_POSITION, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"LibValidator\": \"0x7f59672c6D909D97013853AE936ED1e3652c6024\",\r\n        \"LibUnitConverter\": \"0xAb98C77a164C94d7DfB32D2766F6d8cCb84Ab344\",\r\n        \"MarginalFunctionality\": \"0xdd3B36b5d8d63da10deA1dEE649aF86B085Bd3bB\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"NewAssetTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"filledAmount\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amountQuote\",\"type\":\"uint192\"}],\"name\":\"NewTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowStakeRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetRisks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MarginalFunctionality.PositionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"weightedPosition\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalPosition\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalLiabilities\",\"type\":\"int256\"}],\"internalType\":\"struct MarginalFunctionality.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"depositAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"filledAmount\",\"type\":\"uint112\"}],\"name\":\"fillOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filledAmounts\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"assetBalance\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"int192[]\",\"name\":\"\",\"type\":\"int192[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getFilledAmounts\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"totalFilled\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"totalFeesPaid\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiabilities\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"outstandingAmount\",\"type\":\"uint192\"}],\"internalType\":\"struct MarginalFunctionality.Liability[]\",\"name\":\"liabilitiesArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockedStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getOrderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"enum OrionVault.StakePhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"lastActionTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct OrionVault.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakePhase\",\"outputs\":[{\"internalType\":\"enum OrionVault.StakePhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liabilities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"outstandingAmount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPremium\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"lockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemedAsset\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"partiallyLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionOverdue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"postponeStakeRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOverdue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestReleaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"seizeFromStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedMatcher\",\"type\":\"address\"}],\"name\":\"setBasicParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRisk\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"risks\",\"type\":\"uint8[]\"}],\"name\":\"updateAssetRisks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_stakeRisk\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidationPremium\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_priceOverdue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_positionOverdue\",\"type\":\"uint64\"}],\"name\":\"updateMarginalSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"validateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}