{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply =  0;\r\n    \r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n \r\n \r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        require(value <= _balances[account]);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract OLACOIN is ERC20, Ownable, ERC20Detailed {\r\n    \r\n\taddress teamWallet = 0x86bD0BF7dfbc76289e5ffA54cC2510C98010227B;\r\n    address serviceWallet = 0x30e6C204a8851fa6588Baa6563C5293A9c47d735;\r\n    address partnerWallet = 0x693d5b141F6a4dc06e85F36dde4f7bdf6Cb83D0B;\r\n    address bountyWallet = 0x1807505942C9fA6A628367E309472A1Abc021634;\r\n        \r\n    struct LockItem {\r\n        uint256  releaseDate;\r\n        uint256  amount;\r\n    }\r\n    \r\n    mapping (address => LockItem[]) public lockList;\r\n    mapping (uint => uint) public quarterMap;\r\n    \r\n\tconstructor() public ERC20Detailed(\"OLACOIN\", \"OLA\", 6) {  \r\n\t        \r\n        quarterMap[1]=1609459200;//=Fri, 01 Jan 2021 00:00:00 GMT\r\n        quarterMap[2]=1617235200;//=Thu, 01 Apr 2021 00:00:00 GMT\r\n        quarterMap[3]=1625097600;//=Thu, 01 Jul 2021 00:00:00 GMT\r\n        quarterMap[4]=1633046400;//=Fri, 01 Oct 2021 00:00:00 GMT\r\n        quarterMap[5]=1640995200;//=Sat, 01 Jan 2022 00:00:00 GMT\r\n        quarterMap[6]=1648771200;//=Fri, 01 Apr 2022 00:00:00 GMT\r\n        quarterMap[7]=1656633600;//=Fri, 01 Jul 2022 00:00:00 GMT\r\n        quarterMap[8]=1664582400;//=Sat, 01 Oct 2022 00:00:00 GMT\r\n        quarterMap[9]=1672531200;//=Sun, 01 Jan 2023 00:00:00 GMT\r\n        quarterMap[10]=1680307200;//=Sat, 01 Apr 2023 00:00:00 GMT\r\n        quarterMap[11]=1688169600;//=Sat, 01 Jul 2023 00:00:00 GMT\r\n        quarterMap[12]=1696118400;//=Sun, 01 Oct 2023 00:00:00 GMT\r\n        quarterMap[13]=1704067200;//=Mon, 01 Jan 2024 00:00:00 GMT\r\n        quarterMap[14]=1711929600;//=Mon, 01 Apr 2024 00:00:00 GMT\r\n        quarterMap[15]=1719792000;//=Mon, 01 Jul 2024 00:00:00 GMT\r\n        quarterMap[16]=1727740800;//=Tue, 01 Oct 2024 00:00:00 GMT\r\n        quarterMap[17]=1735689600;//=Wed, 01 Jan 2025 00:00:00 GMT\r\n        quarterMap[18]=1743465600;//=Tue, 01 Apr 2025 00:00:00 GMT\r\n        quarterMap[19]=1751328000;//=Tue, 01 Jul 2025 00:00:00 GMT\r\n        quarterMap[20]=1759276800;//=Wed, 01 Oct 2025 00:00:00 GMT\r\n        quarterMap[21]=1767225600;//=Thu, 01 Jan 2026 00:00:00 GMT\r\n        quarterMap[22]=1775001600;//=Wed, 01 Apr 2026 00:00:00 GMT\r\n        quarterMap[23]=1782864000;//=Wed, 01 Jul 2026 00:00:00 GMT\r\n        quarterMap[24]=1790812800;//=Thu, 01 Oct 2026 00:00:00 GMT\r\n        quarterMap[25]=1798761600;//=Fri, 01 Jan 2027 00:00:00 GMT\r\n        quarterMap[26]=1806537600;//=Thu, 01 Apr 2027 00:00:00 GMT\r\n        quarterMap[27]=1814400000;//=Thu, 01 Jul 2027 00:00:00 GMT\r\n        quarterMap[28]=1822348800;//=Fri, 01 Oct 2027 00:00:00 GMT\r\n        quarterMap[29]=1830297600;//=Sat, 01 Jan 2028 00:00:00 GMT\r\n        quarterMap[30]=1838160000;//=Sat, 01 Apr 2028 00:00:00 GMT\r\n        quarterMap[31]=1846022400;//=Sat, 01 Jul 2028 00:00:00 GMT\r\n        quarterMap[32]=1853971200;//=Sun, 01 Oct 2028 00:00:00 GMT\r\n        quarterMap[33]=1861920000;//=Mon, 01 Jan 2029 00:00:00 GMT\r\n        quarterMap[34]=1869696000;//=Sun, 01 Apr 2029 00:00:00 GMT\r\n        quarterMap[35]=1877558400;//=Sun, 01 Jul 2029 00:00:00 GMT\r\n        quarterMap[36]=1885507200;//=Mon, 01 Oct 2029 00:00:00 GMT\r\n        quarterMap[37]=1893456000;//=Tue, 01 Jan 2030 00:00:00 GMT\r\n        quarterMap[38]=1901232000;//=Mon, 01 Apr 2030 00:00:00 GMT\r\n        quarterMap[39]=1909094400;//=Mon, 01 Jul 2030 00:00:00 GMT\r\n        \r\n        _mint(owner(), 100000000000000000); // total supply fixed at 100 billion coins\r\n        \r\n        ERC20.transfer(teamWallet, 750000000000000);\r\n        ERC20.transfer(partnerWallet, 750000000000000);\r\n        ERC20.transfer(serviceWallet, 2000000000000000);\r\n        ERC20.transfer(serviceWallet, 2000000000000000);\r\n\r\n        \r\n        for(uint i = 1; i<= 11;i++) {\r\n            transferAndLock(teamWallet,   750000000000000 , quarterMap[i]);\r\n            transferAndLock(partnerWallet,   750000000000000 , quarterMap[i]);\r\n        }\r\n        \r\n        for(uint i = 1; i<= 39;i++) {\r\n            transferAndLock(serviceWallet,   2000000000000000 , quarterMap[i]);\r\n        }\r\n        \r\n    }\r\n\t\r\n\t\r\n     /**\r\n     * @dev transfer of token to another address.\r\n     * always require the sender has enough balance\r\n     * @return the bool true if success. \r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n     \r\n\tfunction transfer(address _receiver, uint256 _amount) public returns (bool success) {\r\n\t    require(_receiver != address(0)); \r\n\t    require(_amount <= getAvailableBalance(msg.sender));\r\n        return ERC20.transfer(_receiver, _amount);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev transfer of token on behalf of the owner to another address. \r\n     * always require the owner has enough balance and the sender is allowed to transfer the given amount\r\n     * @return the bool true if success. \r\n     * @param _from The address to transfer from.\r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to be transferred.\r\n     */\r\n    function transferFrom(address _from, address _receiver, uint256 _amount) public returns (bool) {\r\n        require(_from != address(0));\r\n        require(_receiver != address(0));\r\n        require(_amount <= allowance(_from, msg.sender));\r\n        require(_amount <= getAvailableBalance(_from));\r\n        return ERC20.transferFrom(_from, _receiver, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer from contract owner to a given address a given amount and lock this fund until a given time\r\n     * @return the bool true if success.\r\n     * @param _receiver The address to transfer to.\r\n     * @param _amount The amount to transfer.\r\n     * @param _releaseDate The date to release token.\r\n     */\r\n\tfunction transferAndLock(address _receiver, uint256 _amount, uint256 _releaseDate) internal onlyOwner returns (bool success) {\r\n        ERC20._transfer(owner(),_receiver,_amount);\r\n    \tLockItem memory item = LockItem({amount:_amount, releaseDate:_releaseDate});\r\n\t\tlockList[_receiver].push(item);\r\n        return true;\r\n\t}\r\n\t\r\n    /**\r\n     * @return the total amount of locked funds of a given address.\r\n     * @param lockedAddress The address to check.\r\n     */\r\n\tfunction getLockedAmount(address lockedAddress) public view returns(uint256 _amount) {\r\n\t    uint256 lockedAmount =0;\r\n\t    for(uint256 j = 0; j<lockList[lockedAddress].length; j++) {\r\n\t        if(now < lockList[lockedAddress][j].releaseDate) {\r\n\t            uint256 temp = lockList[lockedAddress][j].amount;\r\n\t            lockedAmount += temp;\r\n\t        }\r\n\t    }\r\n\t    return lockedAmount;\r\n\t}\r\n\t\r\n\t/**\r\n     * @return the total amount of locked funds of a given address.\r\n     * @param lockedAddress The address to check.\r\n     */\r\n\tfunction getAvailableBalance(address lockedAddress) public view returns(uint256 _amount) {\r\n\t    uint256 bal = balanceOf(lockedAddress);\r\n\t    uint256 locked = getLockedAmount(lockedAddress);\r\n\t    return bal.sub(locked);\r\n\t}\r\n    \r\n    /**\r\n     * @dev function that burns an amount of the token of a given account.\r\n     * @param _amount The amount that will be burnt.\r\n     */\r\n    function burn(uint256 _amount) public {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n    \r\n    function () payable external {   \r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lockedAddress\",\"type\":\"address\"}],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lockedAddress\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quarterMap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockList\",\"outputs\":[{\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"OLACOIN","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9e27774b9391b98ae194919190435213bc88515f0be0bd5b9d76283d6286706d"}]}