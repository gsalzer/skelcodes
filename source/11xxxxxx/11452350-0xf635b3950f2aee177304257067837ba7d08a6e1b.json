{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAccessControl {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAddressRegistry {\\n    event AvalancheUpdated(address indexed newAddress);\\n    event LGEUpdated(address indexed newAddress);\\n    event LodgeUpdated(address indexed newAddress);\\n    event LoyaltyUpdated(address indexed newAddress);\\n    event PwdrUpdated(address indexed newAddress);\\n    event PwdrPoolUpdated(address indexed newAddress);\\n    event SlopesUpdated(address indexed newAddress);\\n    event SnowPatrolUpdated(address indexed newAddress);\\n    event TreasuryUpdated(address indexed newAddress);\\n    event UniswapRouterUpdated(address indexed newAddress);\\n    event VaultUpdated(address indexed newAddress);\\n    event WethUpdated(address indexed newAddress);\\n    \\n    function getAvalanche() external view returns (address);\\n    function setAvalanche(address _address) external;\\n\\n    function getLGE() external view returns (address);\\n    function setLGE(address _address) external;\\n\\n    function getLodge() external view returns (address);\\n    function setLodge(address _address) external;\\n\\n    function getLoyalty() external view returns (address);\\n    function setLoyalty(address _address) external;\\n\\n    function getPwdr() external view returns (address);\\n    function setPwdr(address _address) external;\\n\\n    function getPwdrPool() external view returns (address);\\n    function setPwdrPool(address _address) external;\\n\\n    function getSlopes() external view returns (address);\\n    function setSlopes(address _address) external;\\n\\n    function getSnowPatrol() external view returns (address);\\n    function setSnowPatrol(address _address) external;\\n\\n    function getTreasury() external view returns (address payable);\\n    function setTreasury(address _address) external;\\n\\n    function getUniswapRouter() external view returns (address);\\n    function setUniswapRouter(address _address) external;\\n\\n    function getVault() external view returns (address);\\n    function setVault(address _address) external;\\n\\n    function getWeth() external view returns (address);\\n    function setWeth(address _address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAvalanche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface IAvalanche {\\n    event Activated(address indexed user);\\n    event Claim(address indexed user, uint256 pwdrAmount);    \\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event PwdrRewardAdded(address indexed user, uint256 pwdrReward);\\n    event EthRewardAdded(address indexed user, uint256 ethReward);\\n\\n    function active() external view returns (bool);\\n    function activate() external;\\n\\n    function addPwdrReward(address _from, uint256 _amount) external;\\n    // function addEthReward() external virtual payable;\\n    function deposit(uint256 _amount) external;\\n    function depositFor(address _from, address _user, uint256 _amount) external;\\n    function claim() external;\\n    function claimFor(address _user) external;\\n    function withdraw(uint256 _amount) external;\\n\\n    function payoutNumber() external view returns (uint256);\\n    function timeUntilNextPayout() external view returns (uint256); \\n    function rewardAtPayout(uint256 _payoutNumber) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILodge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILodge {\\n    event TokenCreated(address user, uint256 id, uint256 supply);\\n\\n    function items(uint256 _token) external view returns(uint256);\\n    function boost(uint256 _id) external view returns (uint256);\\n\\n    function setURI(string memory _newuri) external;\\n    function mint(address _account, uint256 _id, uint256 _amount, uint256 _boost) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ILoyalty {\\n    event TrancheUpdated(uint256 _tranche, uint256 _points);\\n    event LoyaltyUpdated(address indexed _user, uint256 _tranche, uint256 _points);\\n    event BaseFeeUpdated(address indexed _user, uint256 _baseFee);\\n    event ProtocolFeeUpdated(address indexed _user, uint256 _protocolFee);\\n    event DiscountMultiplierUpdated(address indexed _user, uint256 _multiplier);\\n    event Deposit(address indexed _user, uint256 _id, uint256 _amount);\\n    event Withdraw(address indexed _user, uint256 _id, uint256 _amount);\\n    \\n    function staked(uint256 _id, address _address) external view returns (uint256);\\n    function whitelistedTokens(uint256 _id) external view returns (bool);\\n\\n    function getTotalShares(address _user, uint256 _amount) external view returns (uint256);\\n    function getTotalFee(address _user, uint256 _amount) external view returns (uint256);\\n    function getProtocolFee(uint256 _amount) external view returns (uint256);\\n    function getBoost(address _user) external view returns (uint256);\\n    function deposit(uint256 _id, uint256 _amount) external;\\n    function withdraw(uint256 _id, uint256 _amount) external;\\n    function whitelistToken(uint256 _id) external;\\n    function blacklistToken(uint256 _id) external;\\n    function updatePoints(address _user) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISlopes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\ninterface ISlopes {\\n    event Activated(address user);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, uint256 pwdrAmount, uint256 tokenAmount);\\n    event ClaimAll(address indexed user, uint256 pwdrAmount, uint256[] tokenAmounts);\\n    event Migrate(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    // event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event PwdrPurchase(address indexed user, uint256 ethSpentOnPwdr, uint256 pwdrBought);\\n\\n    function active() external view returns (bool);\\n    function pwdrSentToAvalanche() external view returns (uint256);\\n    function stakingFee() external view returns (uint256);\\n    function roundRobinFee() external view returns (uint256);\\n    function protocolFee() external view returns (uint256);\\n\\n    function activate() external;\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    // function addPwdrReward(address _from, uint256 _amount) external virtual;\\n    // function addEthReward() external virtual payable;\\n    function claim(uint256 _pid) external;\\n    function claimAll() external;\\n    function claimAllFor(address _user) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function migrate() external;\\n    function poolLength() external view returns (uint256);\\n    function addPool(address _token, address _lpToken, bool _lpStaked, uint256 _weight) external;\\n    function setWeight(uint256 _pid, uint256 _weight) external;\\n}\\n\\n// interface ISlopes {\\n    \\n\\n//     function activate() external;\\n//     function poolLength() external view returns (uint256);\\n//     function massUpdatePools() external;\\n//     function updatePool(uint256 _pid) external;\\n//     function deposit(uint256 _pid, uint256 _amount) external;\\n// }\"\r\n    },\r\n    \"contracts/interfaces/ISnowPatrol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"../utils/AltitudeBase.sol\\\";\\n\\ninterface ISnowPatrol {\\n    function ADMIN_ROLE() external pure returns (bytes32);\\n    function LGE_ROLE() external pure returns (bytes32);\\n    function PWDR_ROLE() external pure returns (bytes32);\\n    function SLOPES_ROLE() external pure returns (bytes32);\\n    function setCoreRoles() external;\\n}\"\r\n    },\r\n    \"contracts/loyalty/Loyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport { ILoyalty } from \\\"../interfaces/ILoyalty.sol\\\";\\nimport { ILodge } from \\\"../interfaces/ILodge.sol\\\";\\nimport { ISlopes } from \\\"../interfaces/ISlopes.sol\\\";\\nimport { IAvalanche } from \\\"../interfaces/IAvalanche.sol\\\";\\nimport { LoyaltyBase } from \\\"./LoyaltyBase.sol\\\";\\n\\n// contract to manage all bonuses\\ncontract Loyalty is ILoyalty, IERC1155Receiver, LoyaltyBase {\\n    event TrancheUpdated(uint256 _tranche, uint256 _points);\\n    event LoyaltyUpdated(address indexed _user, uint256 _tranche, uint256 _points);\\n    event BaseFeeUpdated(address indexed _user, uint256 _baseFee);\\n    event ProtocolFeeUpdated(address indexed _user, uint256 _protocolFee);\\n    event DiscountMultiplierUpdated(address indexed _user, uint256 _multiplier);\\n    event Deposit(address indexed _user, uint256 _id, uint256 _amount);\\n    event Withdraw(address indexed _user, uint256 _id, uint256 _amount);\\n\\n    struct LoyaltyInfo {\\n        uint256 points;\\n        uint256 tranche;\\n        uint256 boost; // current boosts, 1 = 0.1%\\n        uint256 staked; // id+1 of staked nft\\n    }\\n\\n    uint256 public baseFee; // default 0.08% \\n    uint256 public protocolFee; // default 20% of 0.8%\\n    uint256 public discountMultiplier; // 0.01%\\n\\n    mapping(uint256 => mapping(address => uint256)) public override staked;\\n    mapping(uint256 => bool) public override whitelistedTokens;\\n    mapping (uint256 => uint256) public loyaltyTranches; // Tranche level to points required\\n    mapping (address => LoyaltyInfo) public userLoyalty; // Address to loyalty points accrued\\n\\n    modifier Whitelisted(uint256 _id) {\\n        require(whitelistedTokens[_id], \\\"This Lodge token cannot be staked\\\");\\n        _;\\n    }\\n\\n    modifier OnlyOneBoost(address _user) {\\n        require(\\n            userLoyalty[_user].boost == 0,\\n            \\\"Max one boost per account\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _address) \\n        public\\n        LoyaltyBase(_address)\\n    {\\n        // whitelist the initial lodge tokens\\n        whitelistedTokens[0] = true;\\n        whitelistedTokens[1] = true;\\n        whitelistedTokens[2] = true;\\n\\n        baseFee = 80; // 0.08%\\n        protocolFee = 20000; // 20% of baseFee\\n        discountMultiplier = 10; // 0.01%\\n\\n        _initializeLoyaltyTranches();\\n    }\\n\\n     // set the base loyalty tranches, performing more flash loans unlocks\\n     // greater discounts\\n    function _initializeLoyaltyTranches() internal {\\n        _setLoyaltyTranche(0, 0); // base loyalty, base fee\\n        _setLoyaltyTranche(1, 100); // level 1, 100 tx\\n        _setLoyaltyTranche(2, 500);  // level 2, 500 tx\\n        _setLoyaltyTranche(3, 1000); // level 3, 1k tx\\n        _setLoyaltyTranche(4, 5000); // level 4, 5k tx\\n        _setLoyaltyTranche(5, 10000); // level 5, 10k tx\\n        _setLoyaltyTranche(6, 50000); // level 6, 50k tx\\n        _setLoyaltyTranche(7, 100000); // level 7, 100k tx, initially 0.01% fee + boost\\n    }\\n\\n    function setLoyaltyTranche(\\n        uint256 _tranche, \\n        uint256 _points\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        _setLoyaltyTranche(_tranche, _points);\\n    }\\n\\n    function _setLoyaltyTranche(\\n        uint256 _tranche, \\n        uint256 _points\\n    )\\n        internal\\n    {\\n        loyaltyTranches[_tranche] = _points;\\n        emit TrancheUpdated(_tranche, _points);\\n    }\\n\\n    function deposit(uint256 _id, uint256 _amount)\\n        external\\n        override\\n    {\\n        _deposit(_msgSender(), _id, _amount);\\n    }\\n\\n    function _deposit(address _address, uint256 _id, uint256 _amount) \\n        internal\\n        Whitelisted(_id)\\n        NonZeroAmount(_amount)\\n        OnlyOneBoost(_address)\\n    {\\n        IERC1155(lodgeAddress()).safeTransferFrom(_address, address(this), _id, _amount, \\\"\\\");\\n        staked[_id][_address] += _amount;\\n        userLoyalty[_address].boost = ILodge(lodgeAddress()).boost(_id);\\n        userLoyalty[_address].staked = _id + 1;\\n\\n        ISlopes(slopesAddress()).claimAllFor(_address);\\n        IAvalanche(avalancheAddress()).claimFor(_address);\\n\\n        emit Deposit(_address, _id, _amount);\\n    }\\n\\n    function withdraw(uint256 _id, uint256 _amount) \\n        external\\n        override\\n    {\\n        _withdraw(_msgSender(), _id, _amount);\\n    }\\n\\n    function _withdraw(address _address, uint256 _id, uint256 _amount) \\n        internal \\n    {\\n        require(\\n            staked[_id][_address] >= _amount,\\n            \\\"Staked balance not high enough to withdraw this amount\\\" \\n        );\\n        \\n        IERC1155(lodgeAddress()).safeTransferFrom(address(this), _address, _id, _amount, \\\"\\\");\\n        staked[_id][_address] -= _amount;\\n        userLoyalty[_address].boost = 0;\\n        userLoyalty[_address].staked = 0;\\n\\n        // claim all user rewards and update user pool shares to prevent abuse\\n        ISlopes(slopesAddress()).claimAllFor(_address);\\n        IAvalanche(avalancheAddress()).claimFor(_address);\\n\\n        emit Withdraw(_address, _id, _amount);\\n    }\\n\\n    function whitelistToken(uint256 _id)\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        whitelistedTokens[_id] = true;\\n    }\\n\\n    function blacklistToken(uint256 _id)\\n        external\\n        override\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        whitelistedTokens[_id] = false;\\n    }\\n\\n    function getBoost(address _user)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return userLoyalty[_user].boost;\\n    }\\n\\n    // get the total shares a user will receive when staking a given token amount\\n    function getTotalShares(address _user, uint256 _amount)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _amount.add(_amount.mul(userLoyalty[_user].boost).div(1000));\\n    }\\n\\n    // get the total fee amount that an address will pay on a given flash loan amount\\n    // get base fee for user tranche, then flat discount based on boost\\n    function getTotalFee(address _user, uint256 _amount) \\n        external \\n        override\\n        view \\n        returns (uint256)\\n    {\\n        uint256 trancheFee = baseFee - (discountMultiplier * userLoyalty[_user].tranche);\\n        return _amount.mul(trancheFee).div(10000).mul(1000 - userLoyalty[_user].boost).div(1000);\\n    }\\n\\n    function getProtocolFee(uint256 _amount)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _amount.mul(protocolFee).div(10000);\\n    }\\n\\n    // update user points and tranche if needed\\n    function updatePoints(address _address) \\n        external\\n        override\\n        OnlySlopes\\n    {\\n        userLoyalty[_address].points = userLoyalty[_address].points.add(1);\\n        if (userLoyalty[_address].points > loyaltyTranches[userLoyalty[_address].tranche.add(1)]) {\\n            userLoyalty[_address].tranche = userLoyalty[_address].tranche.add(1);\\n        }\\n    }\\n\\n    function updateTranche(address _address)\\n        public  \\n    {\\n        if (userLoyalty[_address].points > loyaltyTranches[userLoyalty[_address].tranche + 1]) {\\n            userLoyalty[_address].tranche = userLoyalty[_address].tranche + 1;\\n        } else {\\n            if (userLoyalty[_address].tranche == 0) {\\n                return;\\n            }\\n            if (userLoyalty[_address].points < loyaltyTranches[userLoyalty[_address].tranche]) {\\n                userLoyalty[_address].tranche = userLoyalty[_address].tranche - 1;\\n            }\\n        }\\n    }\\n\\n    function _getProtocolFee(uint256 _totalFee)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _totalFee.mul(protocolFee).div(100000);\\n    }\\n\\n    function setBaseFee(uint256 _newFee)\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_newFee != baseFee, \\\"No change\\\");\\n        require(_newFee <= 90, \\\"Base Fee must remain below 0.09%\\\");\\n\\n        baseFee = _newFee;\\n        emit BaseFeeUpdated(msg.sender, _newFee);\\n    }\\n\\n    function setProtocolFee(\\n        uint256 _newFee\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        require(_newFee != baseFee, \\\"No change\\\");\\n\\n        protocolFee = _newFee;\\n        emit ProtocolFeeUpdated(msg.sender, _newFee);\\n    }\\n\\n    function setDiscountMultiplier(\\n        uint256 _newMultiplier\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        discountMultiplier = _newMultiplier;\\n        emit DiscountMultiplierUpdated(msg.sender, _newMultiplier);\\n    }\\n\\n    function setLoyaltyPoint(\\n        address _address,\\n        uint256 _points\\n    )\\n        external\\n        HasPatrol(\\\"ADMIN\\\")\\n    {\\n        userLoyalty[_address].points = _points;\\n        updateTranche(_address);\\n        emit LoyaltyUpdated(_address, userLoyalty[_address].tranche, _points);\\n    }\\n\\n    // https://eips.ethereum.org/EIPS/eip-1155#erc-1155-token-receiver\\n    function supportsInterface(bytes4 interfaceId) \\n        external\\n        override\\n        view \\n        returns (bool)\\n    {\\n        return interfaceId == 0x01ffc9a7 \\n            || interfaceId == 0x4e2312e0; \\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"));\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        returns(bytes4)\\n    {\\n        return bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"));\\n    }\\n\\n    function getLoyaltyStats(address _user)\\n        external\\n        view\\n        returns (uint256[] memory _stats)\\n    {\\n        _stats = new uint256[](4);\\n\\n        _stats[0] = userLoyalty[_user].points;\\n        _stats[1] = userLoyalty[_user].tranche;\\n        _stats[2] = userLoyalty[_user].staked;\\n        _stats[3] = userLoyalty[_user].boost;\\n    }\\n}\"\r\n    },\r\n    \"contracts/loyalty/LoyaltyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { PatrolBase } from \\\"../utils/PatrolBase.sol\\\";\\n\\ncontract LoyaltyBase is PatrolBase {\\n    using SafeMath for uint256;\\n\\n    constructor(address addressRegistry) \\n        public\\n    {\\n        _setAddressRegistry(addressRegistry);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/AddressBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { UtilitiesBase } from \\\"./UtilitiesBase.sol\\\";\\n\\nabstract contract AddressBase is UtilitiesBase {\\n    address internal _addressRegistry;\\n\\n    function _setAddressRegistry(address _address)\\n        internal\\n    {\\n        _addressRegistry = _address;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/AltitudeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { ISnowPatrol } from \\\"../interfaces/ISnowPatrol.sol\\\";\\nimport { AddressBase } from \\\"./AddressBase.sol\\\";\\n\\nabstract contract AltitudeBase is AddressBase {\\n    modifier OnlyLGE {\\n        require(\\n            _msgSender() == lgeAddress(), \\n            \\\"Only the LGE contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyLoyalty {\\n        require(\\n            _msgSender() == loyaltyAddress(), \\n            \\\"Only the Loyalty contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyPWDR {\\n        require(\\n            _msgSender() == pwdrAddress(),\\n            \\\"Only PWDR Contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlySlopes {\\n        require(\\n            _msgSender() == slopesAddress(), \\n            \\\"Only the Slopes contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function avalancheAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getAvalanche();\\n    }\\n\\n    function lgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLGE();\\n    }\\n\\n    function lodgeAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLodge();\\n    }\\n\\n    function loyaltyAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getLoyalty();\\n    }\\n\\n    function pwdrAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdr();\\n    }\\n\\n    function pwdrPoolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getPwdrPool();\\n    }\\n\\n    function slopesAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSlopes();\\n    }\\n\\n    function snowPatrolAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getSnowPatrol();\\n    }\\n\\n    function treasuryAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getTreasury();\\n    }\\n\\n    function uniswapRouterAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getUniswapRouter();\\n    }\\n\\n    function vaultAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getVault();\\n    }\\n\\n    function wethAddress() internal view returns (address) {\\n        return IAddressRegistry(_addressRegistry).getWeth();\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/PatrolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { AltitudeBase } from \\\"./AltitudeBase.sol\\\";\\nimport { IAddressRegistry } from \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport { IAccessControl } from \\\"../interfaces/IAccessControl.sol\\\";\\n\\ncontract PatrolBase is AltitudeBase {\\n    modifier HasPatrol(bytes memory _patrol) {\\n        require(\\n            IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), address(_msgSender())),\\n            \\\"Account does not have sufficient role to call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function hasPatrol(bytes memory _patrol, address _address)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return IAccessControl(snowPatrolAddress()).hasRole(keccak256(_patrol), _address);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/UtilitiesBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nabstract contract UtilitiesBase is Context {\\n    modifier NonZeroAmount(uint256 _amount) {\\n        require(\\n            _amount > 0, \\n            \\\"Amount must be greater than zero\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroTokenBalance(address _address) {\\n        require(\\n            IERC20(_address).balanceOf(address(this)) > 0,\\n            \\\"No tokens to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier NonZeroETHBalance(address _address) {\\n        require(\\n            address(this).balance > 0,\\n            \\\"No ETH to transfer\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier OnlyOrigin {\\n        require(\\n            tx.origin == address(this), \\n            \\\"Only origin contract can call this function\\\"\\n        );\\n        _;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"BaseFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"DiscountMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"LoyaltyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"TrancheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"blacklistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLoyaltyStats\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stats\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loyaltyTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setDiscountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"setLoyaltyPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"setLoyaltyTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updatePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Loyalty","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000001ec4a8b60191230c4c6b4db79e321441b63bd143","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}