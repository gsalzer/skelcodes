{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\fixed-inflation\\FixedInflationData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct FixedInflationEntryConfiguration {\r\n    bool add;\r\n    bool remove;\r\n    FixedInflationEntry data;\r\n}\r\n\r\nstruct FixedInflationEntry {\r\n    uint256 lastBlock;\r\n    bytes32 id;\r\n    string name;\r\n    uint256 blockInterval;\r\n    uint256 callerRewardPercentage;\r\n}\r\n\r\nstruct FixedInflationOperation {\r\n\r\n    address inputTokenAddress;\r\n    uint256 inputTokenAmount;\r\n    bool inputTokenAmountIsPercentage;\r\n    bool inputTokenAmountIsByMint;\r\n\r\n    address ammPlugin;\r\n    address[] liquidityPoolAddresses;\r\n    address[] swapPath;\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n\r\n    address[] receivers;\r\n    uint256[] receiversPercentages;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflationExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflationExtension {\r\n\r\n    function init(address host) external;\r\n\r\n    function setHost(address host) external;\r\n\r\n    function data() external view returns(address fixedInflationContract, address host);\r\n\r\n    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) external;\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\util\\DFOHub.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IDoubleProxy {\r\n    function proxy() external view returns (address);\r\n}\r\n\r\ninterface IMVDProxy {\r\n    function getMVDFunctionalitiesManagerAddress() external view returns(address);\r\n    function getMVDWalletAddress() external view returns (address);\r\n    function getStateHolderAddress() external view returns(address);\r\n    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\r\n}\r\n\r\ninterface IMVDFunctionalitiesManager {\r\n    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\r\n    function isAuthorizedFunctionality(address functionality) external view returns(bool);\r\n}\r\n\r\ninterface IStateHolder {\r\n    function getUint256(string calldata name) external view returns(uint256);\r\n    function getAddress(string calldata name) external view returns(address);\r\n    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\IFixedInflation.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface IFixedInflation {\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) external;\r\n}\r\n\r\n// File: contracts\\fixed-inflation\\DFOBasedFixedInflationExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\ncontract DFOBasedFixedInflationExtension is IFixedInflationExtension {\r\n\r\n    string private constant FUNCTIONALITY_NAME = \"manageFixedInflation\";\r\n\r\n    address private _host;\r\n\r\n    address private _fixedInflationContract;\r\n\r\n    modifier fixedInflationOnly() {\r\n        require(_fixedInflationContract == msg.sender, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier hostOnly() {\r\n        require(_isFromDFO(msg.sender), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function init(address doubleProxyAddress) override public {\r\n        require(_host == address(0), \"Already init\");\r\n        require(doubleProxyAddress != address(0), \"blank host\");\r\n        _host = doubleProxyAddress;\r\n        _fixedInflationContract = msg.sender;\r\n    }\r\n\r\n    function data() view public override returns(address fixedInflationContract, address host) {\r\n        return(_fixedInflationContract, _host);\r\n    }\r\n\r\n    function setHost(address host) public virtual override hostOnly {\r\n        _host = host;\r\n    }\r\n\r\n    function receiveTokens(address[] memory tokenAddresses, uint256[] memory transferAmounts, uint256[] memory amountsToMint) public override fixedInflationOnly {\r\n        IMVDProxy(IDoubleProxy(_host).proxy()).submit(FUNCTIONALITY_NAME, abi.encode(address(0), 0, tokenAddresses, transferAmounts, amountsToMint, _fixedInflationContract));\r\n    }\r\n\r\n    function setEntries(FixedInflationEntryConfiguration[] memory newEntries, FixedInflationOperation[][] memory operationSets) public override hostOnly {\r\n        IFixedInflation(_fixedInflationContract).setEntries(newEntries, operationSets);\r\n    }\r\n\r\n    function _getFunctionalityAddress() private view returns(address functionalityAddress) {\r\n        (functionalityAddress,,,,) = IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_host).proxy()).getMVDFunctionalitiesManagerAddress()).getFunctionalityData(FUNCTIONALITY_NAME);\r\n    }\r\n\r\n    function _getDFOWallet() private view returns(address) {\r\n        return IMVDProxy(IDoubleProxy(_host).proxy()).getMVDWalletAddress();\r\n    }\r\n\r\n    function _isFromDFO(address sender) private view returns(bool) {\r\n        return IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_host).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fixedInflationContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"doubleProxyAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"transferAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToMint\",\"type\":\"uint256[]\"}],\"name\":\"receiveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedInflationEntry\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct FixedInflationEntryConfiguration[]\",\"name\":\"newEntries\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"inputTokenAmountIsByMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"liquidityPoolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enterInETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exitInETH\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiversPercentages\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FixedInflationOperation[][]\",\"name\":\"operationSets\",\"type\":\"tuple[][]\"}],\"name\":\"setEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DFOBasedFixedInflationExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3fcebed0cd3493d0da436df59f6c606836a5ee6f3636f55c83e7a09df98fa1d4"}]}