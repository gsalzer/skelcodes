{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address _payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface PoolInterface {\r\n    function swapExactAmountIn(address, address, uint, address, uint, uint) external returns (uint, uint);\r\n    function swapExactAmountOut(address, address, uint, address, uint, uint) external returns (uint, uint);\r\n    function calcInGivenOut(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function calcOutGivenIn(uint, uint, uint, uint, uint, uint) external pure returns (uint);\r\n    function getDenormalizedWeight(address) external view returns (uint);\r\n    function getBalance(address) external view returns (uint);\r\n    function getSwapFee() external view returns (uint);\r\n}\r\n\r\ninterface TokenInterface {\r\n    function balanceOf(address) external view returns (uint);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface RegistryInterface {\r\n    function getBestPoolsWithLimit(address, address, uint) external view returns (address[] memory);\r\n}\r\n\r\ncontract ExchangeProxy is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Pool {\r\n        address pool;\r\n        uint    tokenBalanceIn;\r\n        uint    tokenWeightIn;\r\n        uint    tokenBalanceOut;\r\n        uint    tokenWeightOut;\r\n        uint    swapFee;\r\n        uint    effectiveLiquidity;\r\n    }\r\n\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint    swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint    limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint    maxPrice;\r\n    }\r\n\r\n    TokenInterface weth;\r\n    RegistryInterface registry;\r\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    uint private constant BONE = 10**18;\r\n\r\n    constructor(address _weth) public {\r\n        weth = TokenInterface(_weth);\r\n    }\r\n\r\n    function setRegistry(address _registry) external onlyOwner {\r\n        registry = RegistryInterface(_registry);\r\n    }\r\n\r\n    function batchSwapExactIn(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n    public payable\r\n    returns (uint totalAmountOut)\r\n    {\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                safeApprove(SwapTokenIn, swap.pool, 0);\r\n            }\r\n            safeApprove(SwapTokenIn, swap.pool, swap.swapAmount);\r\n\r\n            (uint tokenAmountOut,) = pool.swapExactAmountIn(\r\n                msg.sender,\r\n                swap.tokenIn,\r\n                swap.swapAmount,\r\n                swap.tokenOut,\r\n                swap.limitReturnAmount,\r\n                swap.maxPrice\r\n            );\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n    }\r\n\r\n    function batchSwapExactOut(\r\n        Swap[] memory swaps,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n    public payable\r\n    returns (uint totalAmountIn)\r\n    {\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swaps.length; i++) {\r\n            Swap memory swap = swaps[i];\r\n            TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n            PoolInterface pool = PoolInterface(swap.pool);\r\n\r\n            if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                safeApprove(SwapTokenIn, swap.pool, 0);\r\n            }\r\n            safeApprove(SwapTokenIn, swap.pool, swap.limitReturnAmount);\r\n\r\n            (uint tokenAmountIn,) = pool.swapExactAmountOut(\r\n                msg.sender,\r\n                swap.tokenIn,\r\n                swap.limitReturnAmount,\r\n                swap.tokenOut,\r\n                swap.swapAmount,\r\n                swap.maxPrice\r\n            );\r\n            totalAmountIn = tokenAmountIn.add(totalAmountIn);\r\n        }\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint totalAmountIn,\r\n        uint minTotalAmountOut\r\n    )\r\n    public payable\r\n    returns (uint totalAmountOut)\r\n    {\r\n\r\n        transferFromAll(tokenIn, totalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountOut;\r\n            for (uint k = 0; k < swapSequences[i].length; k++) {\r\n                Swap memory swap = swapSequences[i][k];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n                if (k == 1) {\r\n                    // Makes sure that on the second swap the output of the first was used\r\n                    // so there is not intermediate token leftover\r\n                    swap.swapAmount = tokenAmountOut;\r\n                }\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    safeApprove(SwapTokenIn, swap.pool, 0);\r\n                }\r\n                safeApprove(SwapTokenIn, swap.pool, swap.swapAmount);\r\n\r\n                (tokenAmountOut,) = pool.swapExactAmountIn(\r\n                    msg.sender,\r\n                    swap.tokenIn,\r\n                    swap.swapAmount,\r\n                    swap.tokenOut,\r\n                    swap.limitReturnAmount,\r\n                    swap.maxPrice\r\n                );\r\n            }\r\n            // This takes the amountOut of the last swap\r\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\r\n        }\r\n\r\n        require(totalAmountOut >= minTotalAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        transferAll(tokenOut, totalAmountOut);\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        TokenInterface tokenIn,\r\n        TokenInterface tokenOut,\r\n        uint maxTotalAmountIn\r\n    )\r\n    public payable\r\n    returns (uint totalAmountIn)\r\n    {\r\n\r\n        transferFromAll(tokenIn, maxTotalAmountIn);\r\n\r\n        for (uint i = 0; i < swapSequences.length; i++) {\r\n            uint tokenAmountInFirstSwap;\r\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\r\n            if (swapSequences[i].length == 1) {\r\n                Swap memory swap = swapSequences[i][0];\r\n                TokenInterface SwapTokenIn = TokenInterface(swap.tokenIn);\r\n\r\n                PoolInterface pool = PoolInterface(swap.pool);\r\n                if (SwapTokenIn.allowance(address(this), swap.pool) > 0) {\r\n                    safeApprove(SwapTokenIn, swap.pool, 0);\r\n                }\r\n                safeApprove(SwapTokenIn, swap.pool, swap.limitReturnAmount);\r\n\r\n                (tokenAmountInFirstSwap,) = pool.swapExactAmountOut(\r\n                    msg.sender,\r\n                    swap.tokenIn,\r\n                    swap.limitReturnAmount,\r\n                    swap.tokenOut,\r\n                    swap.swapAmount,\r\n                    swap.maxPrice\r\n                );\r\n            } else {\r\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\r\n                // of token C. But first we need to buy B with A so we can then buy C with B\r\n                // To get the exact amount of C we then first need to calculate how much B we'll need:\r\n                uint intermediateTokenAmount; // This would be token B as described above\r\n                Swap memory secondSwap = swapSequences[i][1];\r\n                PoolInterface poolSecondSwap = PoolInterface(secondSwap.pool);\r\n                intermediateTokenAmount = poolSecondSwap.calcInGivenOut(\r\n                    poolSecondSwap.getBalance(secondSwap.tokenIn),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenIn),\r\n                    poolSecondSwap.getBalance(secondSwap.tokenOut),\r\n                    poolSecondSwap.getDenormalizedWeight(secondSwap.tokenOut),\r\n                    secondSwap.swapAmount,\r\n                    poolSecondSwap.getSwapFee()\r\n                );\r\n\r\n                //// Buy intermediateTokenAmount of token B with A in the first pool\r\n                Swap memory firstSwap = swapSequences[i][0];\r\n                TokenInterface FirstSwapTokenIn = TokenInterface(firstSwap.tokenIn);\r\n                PoolInterface poolFirstSwap = PoolInterface(firstSwap.pool);\r\n                if (FirstSwapTokenIn.allowance(address(this), firstSwap.pool) < uint(-1)) {\r\n                    safeApprove(FirstSwapTokenIn, firstSwap.pool, uint(-1));\r\n                }\r\n\r\n                (tokenAmountInFirstSwap,) = poolFirstSwap.swapExactAmountOut(\r\n                    msg.sender,\r\n                    firstSwap.tokenIn,\r\n                    firstSwap.limitReturnAmount,\r\n                    firstSwap.tokenOut,\r\n                    intermediateTokenAmount, // This is the amount of token B we need\r\n                    firstSwap.maxPrice\r\n                );\r\n\r\n                //// Buy the final amount of token C desired\r\n                TokenInterface SecondSwapTokenIn = TokenInterface(secondSwap.tokenIn);\r\n                if (SecondSwapTokenIn.allowance(address(this), secondSwap.pool) < uint(-1)) {\r\n                    safeApprove(SecondSwapTokenIn, secondSwap.pool, uint(-1));\r\n                }\r\n\r\n                poolSecondSwap.swapExactAmountOut(\r\n                    msg.sender,\r\n                    secondSwap.tokenIn,\r\n                    secondSwap.limitReturnAmount,\r\n                    secondSwap.tokenOut,\r\n                    secondSwap.swapAmount,\r\n                    secondSwap.maxPrice\r\n                );\r\n            }\r\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\r\n        }\r\n\r\n        require(totalAmountIn <= maxTotalAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        transferAll(tokenOut, getBalance(tokenOut));\r\n        transferAll(tokenIn, getBalance(tokenIn));\r\n\r\n    }\r\n\r\n\r\n    function transferFromAll(TokenInterface token, uint amount) internal returns(bool) {\r\n        if (isETH(token)) {\r\n            weth.deposit.value(msg.value)();\r\n        } else {\r\n//            require(token.transferFrom(msg.sender, address(this), amount), \"ERR_TRANSFER_FAILED\");\r\n            safeTransferFrom(token, msg.sender, address(this), amount);\r\n        }\r\n    }\r\n\r\n    function getBalance(TokenInterface token) internal view returns (uint) {\r\n        if (isETH(token)) {\r\n            return weth.balanceOf(address(this));\r\n        } else {\r\n            return token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function transferAll(TokenInterface token, uint amount) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (isETH(token)) {\r\n            weth.withdraw(amount);\r\n            (bool xfer,) = msg.sender.call.value(amount)(\"\");\r\n            require(xfer, \"ERR_ETH_FAILED\");\r\n        } else {\r\n//            require(token.transfer(msg.sender, amount), \"ERR_TRANSFER_FAILED\");\r\n            safeTransfer(token, msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function isETH(TokenInterface token) internal pure returns(bool) {\r\n        return (address(token) == ETH_ADDRESS);\r\n    }\r\n\r\n    function safeTransfer(TokenInterface token, address to , uint256 amount) internal {\r\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\r\n        bytes memory returndata = functionCall(address(token), data, \"low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(TokenInterface token, address from, address to , uint256 amount) internal {\r\n        bytes memory data = abi.encodeWithSelector(token.transferFrom.selector, from, to, amount);\r\n        bytes memory returndata = functionCall(address(token), data, \"low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"not succeed\");\r\n        }\r\n    }\r\n\r\n    function safeApprove(TokenInterface token, address to , uint256 amount) internal {\r\n        bytes memory data = abi.encodeWithSelector(token.approve.selector, to, amount);\r\n        bytes memory returndata = functionCall(address(token), data, \"low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"not succeed\");\r\n        }\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.call(data);// value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract TokenInterface\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeProxy","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a6ee93db4cdccb96d15b37dd5ce6a031a1074838557471b04c039ac8e03c7b40"}]}