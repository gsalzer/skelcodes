{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    constructor () internal {}\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IUniswapV2Factory {\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n}\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract FSERandom is Ownable {\r\n    mapping(address => bool) private _modules;\r\n    IUniswapV2Factory private _uniswapV2Factory;\r\n    address[] private _uniswapPools;\r\n    bytes32 private _randNumber;\r\n\r\n    modifier onlyModule() {\r\n        require(_modules[_msgSender()], \"Illegal caller!\");\r\n        _;\r\n    }\r\n\r\n    constructor (address __uniswapV2Factory, address[] memory __uniswapPools)\r\n    public {\r\n        _genRandomNumber(gasleft());\r\n        setUniswapV2Factory(__uniswapV2Factory);\r\n        setUniswapPools(__uniswapPools);\r\n    }\r\n\r\n    function setUniswapV2Factory(address __uniswapV2Factory)\r\n    public onlyOwner {\r\n        _uniswapV2Factory = IUniswapV2Factory(__uniswapV2Factory);\r\n    }\r\n\r\n    function setUniswapPools(address[] memory __uniswapPools)\r\n    public onlyOwner {\r\n        _uniswapPools = __uniswapPools;\r\n    }\r\n\r\n    function setModule(address _moduleAddress, bool _running)\r\n    public onlyOwner {\r\n        _modules[_moduleAddress] = _running;\r\n    }\r\n\r\n    function _genRandomNumber(uint256 _seed)\r\n    internal\r\n    returns (bytes32 _rand){\r\n        _randNumber = keccak256(\r\n            abi.encodePacked(\r\n                _randNumber,\r\n                _seed,\r\n                gasleft(),\r\n                block.number,\r\n                blockhash(block.number - 1),\r\n                block.coinbase,\r\n                block.difficulty,\r\n                block.gaslimit,\r\n                block.timestamp));\r\n        return _randNumber;\r\n    }\r\n\r\n    function _genRandByUniswapV2Pair(address _uniswapV2Pair)\r\n    internal\r\n    returns (bytes32 _rand){\r\n        IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\r\n        (uint256 reserve0, uint256 reserve1, uint256 blockTimestampLast) = uniswapV2Pair.getReserves();\r\n        uint256 totalSupply = uniswapV2Pair.totalSupply();\r\n        uint256 price0CumulativeLast = uniswapV2Pair.price0CumulativeLast();\r\n        uint256 price1CumulativeLast = uniswapV2Pair.price1CumulativeLast();\r\n        uint256 kLast = uniswapV2Pair.kLast();\r\n        return _genRandomNumber(uint256(keccak256(abi.encodePacked(\r\n                _uniswapV2Pair,\r\n                reserve0,\r\n                reserve1,\r\n                blockTimestampLast,\r\n                totalSupply,\r\n                price0CumulativeLast,\r\n                price1CumulativeLast,\r\n                kLast))));\r\n    }\r\n\r\n    function genRandom(uint256 seed)\r\n    public onlyModule\r\n    returns (bytes32 _rand){\r\n        require(_uniswapPools.length > 3, \"Not enought pool size!\");\r\n        require(_uniswapV2Factory.allPairsLength() > 3, \"Not enought pool size!\");\r\n        uint256 randTimes = uint256(_genRandomNumber(gasleft())) % 3 + 1;\r\n        uint256 memPoolSize = _uniswapPools.length;\r\n        uint256 randPos;\r\n        for (uint i = 0; i < randTimes; i++) {\r\n            randPos = uint256(_genRandomNumber(gasleft() + i)) % memPoolSize;\r\n            _genRandByUniswapV2Pair(_uniswapPools[randPos]);\r\n        }\r\n        randTimes = uint256(_genRandomNumber(gasleft())) % 3 + 1;\r\n        memPoolSize = _uniswapV2Factory.allPairsLength();\r\n        for (uint i = 0; i < randTimes; i++) {\r\n            randPos = uint256(_genRandomNumber(gasleft() + i)) % memPoolSize;\r\n            _genRandByUniswapV2Pair(_uniswapV2Factory.allPairs(randPos));\r\n        }\r\n        return keccak256(abi.encodePacked(_randNumber, gasleft(), seed));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__uniswapV2Factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"__uniswapPools\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"genRandom\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rand\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_running\",\"type\":\"bool\"}],\"name\":\"setModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"__uniswapPools\",\"type\":\"address[]\"}],\"name\":\"setUniswapPools\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"__uniswapV2Factory\",\"type\":\"address\"}],\"name\":\"setUniswapV2Factory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FSERandom","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc0000000000000000000000000d4a11d5eeaac28ec3f61d100daf4d40471f1852000000000000000000000000a478c2975ab1ea89e8196811f51a7b7ade33eb11000000000000000000000000d3d2e2692501a5c9ca623199d38826e513033a170000000000000000000000003041cbd36888becc7bbcbc0045e3b1f144466f5f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5d1ccb924a2513b46244c018015120d720e33c9a8042b71a8e8d9afb2aaeb004"}]}