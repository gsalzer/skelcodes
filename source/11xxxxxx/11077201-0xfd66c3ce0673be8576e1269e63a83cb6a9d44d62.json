{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Conflict Resolution Interface\r\n * @dev interface to contract used for conflict resolution. Only needed if server or\r\n * user stops responding during game session. For documentation consult implementation\r\n * contract.\r\n * @author dicether\r\n */\r\ninterface ConflictResolutionInterface {\r\n    function minHouseStake(uint activeGames) external view returns(uint);\r\n\r\n    function maxBalance() external view returns(int);\r\n\r\n    function conflictEndFine() external pure returns(int);\r\n\r\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) external view returns(bool);\r\n\r\n    function endGameConflict(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n\r\n    function serverForceGameEnd(\r\n        uint8 gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed,\r\n        uint _endInitiatedTime\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n\r\n    function userForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n}\r\n\r\n/**\r\n * @title Math utils\r\n * @author dicether\r\n */\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the absolute value of _val.\r\n     * @param _val value\r\n     * @return The absolute value of _val.\r\n     */\r\n    function abs(int _val) internal pure returns(uint) {\r\n        if (_val < 0) {\r\n            return uint(-_val);\r\n        } else {\r\n            return uint(_val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate maximum.\r\n     */\r\n    function max(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 >= _val2 ? _val1 : _val2;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate minimum.\r\n     */\r\n    function min(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 <= _val2 ? _val1 : _val2;\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    /**\r\n     * Cast unsigned a to signed a.\r\n     */\r\n    function castToInt(uint a) internal pure returns(int) {\r\n        assert(a < (1 << 255));\r\n        return int(a);\r\n    }\r\n\r\n    /**\r\n     * Cast signed a to unsigned a.\r\n     */\r\n    function castToUint(int a) internal pure returns(uint) {\r\n        assert(a >= 0);\r\n        return uint(a);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error.\r\n * From zeppelin-solidity\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, throws on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers, truncating the quotient.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // Overflow only happens when the smallest negative int is multiplied by -1.\r\n        int256 INT256_MIN = int256((uint256(1) << 255));\r\n        assert(a != INT256_MIN || b != - 1);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, throws on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        assert((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, throws on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        assert((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface GameInterface {\r\n    function maxBet(uint _num, uint _bankRoll) external view returns(uint);\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _num) external view returns(uint);\r\n\r\n    function userProfit(uint _num, uint _betValue, uint _resultNum) external view returns(int);\r\n\r\n    function maxUserProfit(uint _num, uint _betValue) external view returns(int);\r\n}\r\n\r\ncontract Games {\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    mapping (uint => GameInterface) public games;\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param gameContracts addresses of different game implementations.\r\n     */\r\n    constructor(address[] memory gameContracts) public {\r\n        for (uint i = 0; i < gameContracts.length; i++) {\r\n            // set first GameInterface to 0 0 => start with i + 1\r\n            games[i + 1] = GameInterface(gameContracts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max allowed bet for a specific game.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number.\r\n     * @param _bankRoll bank roll size.\r\n     * @return max allowed bet.\r\n     */\r\n    function maxBet(uint8 _gameType, uint _num, uint _bankRoll) public view returns(uint) {\r\n        uint maxBetVal = getGameImplementation(_gameType).maxBet(_num, _bankRoll);\r\n        return maxBetVal.add(5e14).div(1e15).mul(1e15); // round to multiple of 0.001 Ether\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the result of the bet.\r\n     * @param _gameType game identifier.\r\n     * @param _serverSeed server seed.\r\n     * @param _userSeed user seed.\r\n     * @param _num game specific bet number.\r\n     * @return result number.\r\n     */\r\n    function resultNumber(uint8 _gameType, bytes32 _serverSeed, bytes32 _userSeed, uint _num) public view returns(uint) {\r\n        return getGameImplementation(_gameType).resultNumber(_serverSeed, _userSeed, _num);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the user profit for the bet.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number.\r\n     * @param _betValue bet value.\r\n     * @param _resultNum bet result.\r\n     * @return user profit.\r\n     */\r\n    function userProfit(uint8 _gameType, uint _num, uint _betValue, uint _resultNum) public view returns(int) {\r\n        uint betValue = _betValue / 1e9; // convert to gwei\r\n\r\n        int res = getGameImplementation(_gameType).userProfit(_num, betValue, _resultNum);\r\n\r\n        return res.mul(1e9); // convert to wei\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the maximal posible user profit for the given bet.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number e.g. 0 or 1 for RollADice.\r\n     * @param _betValue bet value.\r\n     * @return max user profit.\r\n     */\r\n    function maxUserProfit(uint8 _gameType, uint _num, uint _betValue) public view returns(int) {\r\n        uint betValue = _betValue / 1e9; // convert to gwei\r\n\r\n        int res = getGameImplementation(_gameType).maxUserProfit(_num, betValue);\r\n\r\n        return res.mul(1e9); // convert to wei\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the game implementation contract for the given game type.\r\n     * @param _gameType game identifier.\r\n     * @return game implementation contract.\r\n     */\r\n    function getGameImplementation(uint8 _gameType) private view returns(GameInterface) {\r\n        require(games[_gameType] != GameInterface(0), \"Invalid game type\");\r\n        return games[_gameType];\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @title Owned\r\n * @dev Basic contract for authorization control.\r\n * @author dicether\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event LogOwnerShipTransferInitiated(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Modifier, which throws if called by other account than owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract creator as initial owner\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        pendingOwner = _newOwner;\r\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev PendingOwner can accept ownership.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n        emit LogOwnerShipTransferred(owner, pendingOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Conflict Resolution\r\n * @dev Contract used for conflict resolution. Only needed if server or\r\n * user stops responding during game session.\r\n * @author dicether\r\n */\r\ncontract ConflictResolution is ConflictResolutionInterface, Games, Ownable {\r\n    using SafeCast for int;\r\n    using SafeCast for uint;\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    uint public constant SERVER_TIMEOUT = 6 hours;\r\n    uint public constant USER_TIMEOUT = 6 hours;\r\n\r\n    uint public constant MIN_BET_VALUE = 1e13; /// min 0.00001 ether bet\r\n    uint public MIN_BANKROLL = 40e18; // 40e18\r\n\r\n    int public constant NOT_ENDED_FINE = 1e15; /// 0.001 ether\r\n\r\n    int public constant CONFLICT_END_FINE = 1e15; /// 0.001 ether\r\n\r\n    modifier onlyValidBet(uint8 _gameType, uint _betNum, uint _betValue) {\r\n        require(isValidBet(_gameType, _betNum, _betValue), \"inv bet\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidBalance(int _balance, uint _gameStake) {\r\n        require(-_gameStake.castToInt() <= _balance && _balance <= int(MIN_BANKROLL / 2), \"inv balance\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param games the games specific contracts.\r\n     */\r\n    constructor(address[] memory games) Games(games) public {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * @return Conflict end fine.\r\n     */\r\n    function conflictEndFine() public pure returns(int) {\r\n        return CONFLICT_END_FINE;\r\n    }\r\n\r\n    /**\r\n     * @return Max balance.\r\n     */\r\n    function maxBalance() public view returns(int) {\r\n        return int(MIN_BANKROLL / 2);\r\n    }\r\n\r\n    /**\r\n     * Calculate minimum needed house stake.\r\n     */\r\n    function minHouseStake(uint activeGames) public view returns(uint) {\r\n        return  MathUtil.min(activeGames, 1) * (MIN_BANKROLL / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if bet is valid.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Number of bet.\r\n     * @param _betValue Value of bet.\r\n     * @return True if bet is valid false otherwise.\r\n     */\r\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) public view returns(bool) {\r\n        bool validMinBetValue = MIN_BET_VALUE <= _betValue;\r\n        bool validMaxBetValue = _betValue <= Games.maxBet(_gameType, _betNum, MIN_BANKROLL);\r\n        return validMinBetValue && validMaxBetValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculates game result and returns new balance.\r\n     * @param _gameType Type of game.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverSeed Server's seed of current round.\r\n     * @param _userSeed User's seed of current round.\r\n     * @return New game session balance.\r\n     */\r\n    function endGameConflict(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        public\r\n        view\r\n        onlyValidBet(_gameType, _betNum, _betValue)\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_serverSeed != 0 && _userSeed != 0, \"inv seeds\");\r\n\r\n        int newBalance =  processBet(_gameType, _betNum, _betValue, _balance, _serverSeed, _userSeed);\r\n\r\n        // user need to pay a fee when conflict ended.\r\n        // this ensures a malicious, rich user can not just generate game sessions and then wait\r\n        // for us to end the game session and then confirm the session status, so\r\n        // we would have to pay a high gas fee without profit.\r\n        newBalance = newBalance.sub(CONFLICT_END_FINE);\r\n\r\n        // do not allow balance below user stake\r\n        int stake = _stake.castToInt();\r\n        if (newBalance < -stake) {\r\n            newBalance = -stake;\r\n        }\r\n\r\n        return newBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Force end of game if user does not respond. Only possible after a time period.\r\n     * to give the user a chance to respond.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Bet value.\r\n     * @param _balance Current balance.\r\n     * @param _stake User stake.\r\n     * @param _endInitiatedTime Time server initiated end.\r\n     * @return New game session balance.\r\n     */\r\n    function serverForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_endInitiatedTime + SERVER_TIMEOUT <= block.timestamp, \"too low timeout\");\r\n        require((_gameType == 0 && _betNum == 0 && _betValue == 0 && _balance == 0)\r\n                || isValidBet(_gameType, _betNum, _betValue), \"inv bet\");\r\n\r\n\r\n        // if no bet was placed (cancelActiveGame) set new balance to 0\r\n        int newBalance = 0;\r\n\r\n        // a bet was placed calculate new balance\r\n        if (_gameType != 0) {\r\n            newBalance = processBet(_gameType, _betNum, _betValue, _balance, _serverSeed, _userSeed);\r\n        }\r\n\r\n        // penalize user as he didn't end game\r\n        newBalance = newBalance.sub(NOT_ENDED_FINE);\r\n\r\n        // do not allow balance below user stake\r\n        int stake = _stake.castToInt();\r\n        if (newBalance < -stake) {\r\n            newBalance = -stake;\r\n        }\r\n\r\n        return newBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Force end of game if server does not respond. Only possible after a time period\r\n     * to give the server a chance to respond.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _endInitiatedTime Time server initiated end.\r\n     * @return New game session balance.\r\n     */\r\n    function userForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint  _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_endInitiatedTime + USER_TIMEOUT <= block.timestamp, \"too low timeout\");\r\n        require((_gameType == 0 && _betNum == 0 && _betValue == 0 && _balance == 0)\r\n                || isValidBet(_gameType, _betNum, _betValue), \"inv bet\");\r\n\r\n        int profit = 0;\r\n        if (_gameType == 0 && _betNum == 0 && _betValue == 0 && _balance == 0) {\r\n            // user cancelled game without playing\r\n            profit = 0;\r\n        } else {\r\n            profit = Games.maxUserProfit(_gameType, _betNum, _betValue);\r\n        }\r\n\r\n        // penalize server as it didn't end game\r\n        profit = profit.add(NOT_ENDED_FINE);\r\n\r\n        return _balance.add(profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate new balance after executing bet.\r\n     * @param _gameType game type.\r\n     * @param _betNum Bet Number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverSeed Server's seed\r\n     * @param _userSeed User's seed\r\n     * return new balance.\r\n     */\r\n    function processBet(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        public\r\n        view\r\n        returns (int)\r\n    {\r\n        uint resNum = Games.resultNumber(_gameType, _serverSeed, _userSeed, _betNum);\r\n        int profit = Games.userProfit(_gameType, _betNum, _betValue, resNum);\r\n        return _balance.add(profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Set Min Bankro\r\n     * @param _minBankRoll new min bank roll.\r\n     */\r\n    function setMinBankRoll(uint _minBankRoll) public onlyOwner {\r\n        MIN_BANKROLL = _minBankRoll;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"games\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONFLICT_END_FINE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BANKROLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_BET_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_ENDED_FINE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVER_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USER_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conflictEndFine\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_betNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_userSeed\",\"type\":\"bytes32\"}],\"name\":\"endGameConflict\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"contract GameInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_betNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"}],\"name\":\"isValidBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bankRoll\",\"type\":\"uint256\"}],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"}],\"name\":\"maxUserProfit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeGames\",\"type\":\"uint256\"}],\"name\":\"minHouseStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_betNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_userSeed\",\"type\":\"bytes32\"}],\"name\":\"processBet\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_userSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"resultNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_betNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_serverSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_userSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_endInitiatedTime\",\"type\":\"uint256\"}],\"name\":\"serverForceGameEnd\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBankRoll\",\"type\":\"uint256\"}],\"name\":\"setMinBankRoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_betNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endInitiatedTime\",\"type\":\"uint256\"}],\"name\":\"userForceGameEnd\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_gameType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resultNum\",\"type\":\"uint256\"}],\"name\":\"userProfit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConflictResolution","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000171a206863d9c8bb902da6148b1285ca94f8fc440000000000000000000000004811b57fbc884b96dbbb4d92b590df2132ec0910","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bbbc13c5493b049023803ee7ee02a29893db203266c37895e2862ea20c92aa48"}]}