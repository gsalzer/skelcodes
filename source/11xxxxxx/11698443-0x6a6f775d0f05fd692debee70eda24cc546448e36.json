{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract IDSProxy {\r\n    function authority() public virtual returns (address);\r\n}\r\n\r\nabstract contract IDSGuard {\r\n    function canCall(address src_, address dst_, bytes4 sig) public view virtual returns (bool);\r\n}\r\n\r\ncontract IMcdSubscribers {\r\n    \r\n     struct CdpHolder {\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        address owner;\r\n        uint cdpId;\r\n        bool boostEnabled;\r\n        bool nextPriceEnabled;\r\n    }\r\n    \r\n    function getSubscribers() public view virtual returns (CdpHolder[] memory) {}\r\n}\r\n\r\n\r\ncontract AuthView is IMcdSubscribers {\r\n    \r\n    \r\n    function hasAuth(address _proxy, address _authContract) public returns (bool) {\r\n        address authAddr = IDSProxy(_proxy).authority();\r\n        \r\n        if (authAddr == address(0)) return false;\r\n        \r\n        return IDSGuard(authAddr).canCall(_authContract, _proxy, bytes4(keccak256(\"execute(address,bytes)\")));\r\n    }\r\n    \r\n    function checkMcdSubscribersAuth(address _subscriptionAddr, address _authContract) public returns (bool[] memory) {\r\n        CdpHolder[] memory cdps = IMcdSubscribers(_subscriptionAddr).getSubscribers();\r\n        \r\n        bool[] memory approvals = new bool[](cdps.length);\r\n        \r\n        for(uint i = 0; i < cdps.length; ++i) {\r\n            approvals[i] = hasAuth(cdps[i].owner, _authContract);\r\n        }\r\n        \r\n        return approvals;\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authContract\",\"type\":\"address\"}],\"name\":\"checkMcdSubscribersAuth\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdpId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nextPriceEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct IMcdSubscribers.CdpHolder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authContract\",\"type\":\"address\"}],\"name\":\"hasAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AuthView","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://93a76ebc1aa9e049d7f1a79402abfd425fb8204259c4687619a14d3ec2c1e95d"}]}