{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\amm-aggregator\\common\\AMMData.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nstruct LiquidityPoolData {\r\n    address liquidityPoolAddress;\r\n    uint256 amount;\r\n    address tokenAddress;\r\n    bool amountIsLiquidityPool;\r\n    bool involvingETH;\r\n    address receiver;\r\n}\r\n\r\nstruct SwapData {\r\n    bool enterInETH;\r\n    bool exitInETH;\r\n    address[] liquidityPoolAddresses;\r\n    address[] path;\r\n    address inputToken;\r\n    uint256 amount;\r\n    address receiver;\r\n}\r\n\r\n// File: contracts\\liquidity-mining\\LiquidityMiningData.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\n\r\nstruct LiquidityMiningSetupConfiguration {\r\n    bool add;\r\n    uint256 index;\r\n    LiquidityMiningSetup data;\r\n}\r\n\r\n// liquidity mining setup struct\r\nstruct LiquidityMiningSetup {\r\n    address ammPlugin; // amm plugin address used for this setup (eg. uniswap amm plugin address).\r\n    uint256 objectId; // items object id for the liquidity pool token.\r\n    address liquidityPoolTokenAddress; // address of the liquidity pool token\r\n    address mainTokenAddress; // eg. buidl address.\r\n    uint256 startBlock; // liquidity mining setup start block (used only if free is false).\r\n    uint256 endBlock; // liquidity mining setup end block (used only if free is false).\r\n    uint256 rewardPerBlock; // liquidity mining setup reward per single block.\r\n    uint256 currentRewardPerBlock; // liquidity mining setup current reward per single block.\r\n    uint256 totalSupply; // current liquidity added in this setup (used only if free is true).\r\n    uint256 lastBlockUpdate; // number of the block where an update was triggered.\r\n    uint256 maximumLiquidity; // maximum liquidity stakeable in the contract (used only if free is false).\r\n    uint256 currentStakedLiquidity; // currently staked liquidity (used only if free is false).\r\n    bool free; // if the setup is a free liquidity mining setup or a locked one.\r\n    uint256 renewTimes; // if the locked setup is renewable or if it's one time (used only if free is false).\r\n    uint256 penaltyFee; // fee paid when the user exits a still active locked liquidity mining setup (used only if free is false).\r\n    bool involvingETH; // if the setup involves ETH or not.\r\n}\r\n\r\n// position struct\r\nstruct LiquidityMiningPosition {\r\n    address uniqueOwner; // address representing the extension address, address(0) if objectId is populated.\r\n    uint256 setupIndex; // the setup index.\r\n    uint256 setupStartBlock; // liquidity mining setup start block (used only if free is false).\r\n    uint256 setupEndBlock; // liquidity mining setup end block (used only if free is false).\r\n    bool free; // if the setup is a free liquidity mining setup or a locked one.\r\n    // LiquidityPoolData liquidityPoolData; // amm liquidity pool data.\r\n    uint256 liquidityPoolTokenAmount;\r\n    uint256 reward; // position reward.\r\n    uint256 lockedRewardPerBlock; // position locked reward per block.\r\n    uint256 creationBlock; // block when this position was created.\r\n}\r\n\r\n// stake data struct\r\nstruct LiquidityMiningPositionRequest {\r\n    uint256 setupIndex; // index of the chosen setup.\r\n    uint256 amount; // amount of main token.\r\n    bool amountIsLiquidityPool; //true if user wants to directly share the liquidity pool token amount, false to add liquidity to AMM\r\n    address positionOwner; // position extension or address(0) [msg.sender].\r\n}\r\n\r\n// File: contracts\\liquidity-mining\\ILiquidityMiningExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\npragma abicoder v2;\r\n\r\n\r\ninterface ILiquidityMiningExtension {\r\n\r\n    function init(bool byMint, address host) external;\r\n\r\n    function setHost(address host) external;\r\n\r\n    function data() external view returns(address liquidityMiningContract, bool byMint, address host, address rewardTokenAddress);\r\n\r\n    function transferTo(uint256 amount, address recipient) external;\r\n    function backToYou(uint256 amount) external payable;\r\n\r\n    function setLiquidityMiningSetups(LiquidityMiningSetupConfiguration[] memory liquidityMiningSetups, bool clearPinned, bool setPinned, uint256 pinnedIndex) external;\r\n}\r\n\r\n// File: contracts\\liquidity-mining\\ILiquidityMining.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\ninterface ILiquidityMining {\r\n\r\n    function _rewardTokenAddress() external view returns(address);\r\n    function setups() external view returns (LiquidityMiningSetup[] memory);\r\n    function setLiquidityMiningSetups(LiquidityMiningSetupConfiguration[] memory liquidityMiningSetups, bool clearPinned, bool setPinned, uint256 pinnedIndex) external;\r\n    \r\n}\r\n\r\n// File: contracts\\liquidity-mining\\util\\IERC20.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function safeApprove(address spender, uint256 amount) external;\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\liquidity-mining\\util\\IERC20Mintable.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IERC20Mintable {\r\n    function mint(address wallet, uint256 amount) external returns (bool);\r\n    function burn(address wallet, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts\\liquidity-mining\\LiquidityMiningExtension.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity ^0.7.6;\r\n//pragma abicoder v2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LiquidityMiningExtension is ILiquidityMiningExtension {\r\n\r\n    // wallet who has control on the extension\r\n    address internal _host;\r\n\r\n    // mapping that contains all the liquidity mining contract linked to this extension\r\n    address internal _liquidityMiningContract;\r\n\r\n    // the reward token address linked to this liquidity mining contract\r\n    address internal _rewardTokenAddress;\r\n\r\n    // whether the token is by mint or by reserve\r\n    bool internal _byMint;\r\n\r\n    /** MODIFIERS */\r\n\r\n    /** @dev liquidityMiningOnly modifier used to check for unauthorized transfers. */\r\n    modifier liquidityMiningOnly() {\r\n        require(msg.sender == _liquidityMiningContract, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** @dev hostOnly modifier used to check for unauthorized edits. */\r\n    modifier hostOnly() {\r\n        require(msg.sender == _host, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /** PUBLIC METHODS */\r\n\r\n    receive() external payable {\r\n        require(_liquidityMiningContract != address(0) && _rewardTokenAddress == address(0), \"ETH not allowed\");\r\n    }\r\n\r\n    function init(bool byMint, address host) public virtual override {\r\n        require(_liquidityMiningContract == address(0), \"Already init\");\r\n        _rewardTokenAddress = ILiquidityMining(_liquidityMiningContract = msg.sender)._rewardTokenAddress();\r\n        _byMint = byMint;\r\n        _host = host;\r\n    }\r\n\r\n    function setHost(address host) public virtual override hostOnly {\r\n        _host = host;\r\n    }\r\n\r\n    function data() view public virtual override returns(address liquidityMiningContract, bool byMint, address host, address rewardTokenAddress) {\r\n        return (_liquidityMiningContract, _byMint, _host, _rewardTokenAddress);\r\n    }\r\n\r\n    /** @dev transfers the input amount to the caller liquidity mining contract.\r\n      * @param amount amount of erc20 to transfer or mint.\r\n     */\r\n    function transferTo(uint256 amount, address recipient) public virtual override liquidityMiningOnly {\r\n        if(_rewardTokenAddress != address(0)) {\r\n            return _byMint ? _mintAndTransfer(_rewardTokenAddress, recipient, amount) : _safeTransfer(_rewardTokenAddress, recipient, amount);\r\n        }\r\n        payable(recipient).transfer(amount);\r\n    }\r\n\r\n    /** @dev transfers the input amount from the caller liquidity mining contract to the extension.\r\n      * @param amount amount of erc20 to transfer back or burn.\r\n     */\r\n    function backToYou(uint256 amount) payable public virtual override liquidityMiningOnly {\r\n        if(_rewardTokenAddress != address(0)) {\r\n            _safeTransferFrom(_rewardTokenAddress, msg.sender, address(this), amount);\r\n            if(_byMint) {\r\n                _burn(_rewardTokenAddress, amount);\r\n            }\r\n        } else {\r\n            require(msg.value == amount, \"invalid sent amount\");\r\n        }\r\n    }\r\n\r\n    /** @dev this function calls the liquidity mining contract with the given address and sets the given liquidity mining setups.\r\n      * @param liquidityMiningSetups array containing all the liquidity mining setups.\r\n      * @param setPinned if we're updating the pinned setup or not.\r\n      * @param pinnedIndex new pinned setup index.\r\n     */\r\n    function setLiquidityMiningSetups(LiquidityMiningSetupConfiguration[] memory liquidityMiningSetups, bool clearPinned, bool setPinned, uint256 pinnedIndex) public virtual override hostOnly {\r\n        ILiquidityMining(_liquidityMiningContract).setLiquidityMiningSetups(liquidityMiningSetups, clearPinned, setPinned, pinnedIndex);\r\n    }\r\n\r\n    /** INTERNAL METHODS */\r\n\r\n    function _mintAndTransfer(address erc20TokenAddress, address recipient, uint256 value) internal virtual {\r\n        IERC20Mintable(erc20TokenAddress).mint(recipient, value);\r\n    }\r\n\r\n    function _burn(address erc20TokenAddress, uint256 value) internal virtual {\r\n        IERC20Mintable(erc20TokenAddress).burn(msg.sender, value);\r\n    }\r\n\r\n    /** @dev function used to safely approve ERC20 transfers.\r\n      * @param erc20TokenAddress address of the token to approve.\r\n      * @param to receiver of the approval.\r\n      * @param value amount to approve for.\r\n     */\r\n    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    /** @dev function used to safe transfer ERC20 tokens.\r\n      * @param erc20TokenAddress address of the token to transfer.\r\n      * @param to receiver of the tokens.\r\n      * @param value amount of tokens to transfer.\r\n     */\r\n    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    /** @dev this function safely transfers the given ERC20 value from an address to another.\r\n      * @param erc20TokenAddress erc20 token address.\r\n      * @param from address from.\r\n      * @param to address to.\r\n      * @param value amount to transfer.\r\n     */\r\n    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal virtual {\r\n        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n\r\n    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\r\n        assembly {\r\n            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\r\n            let size := returndatasize()\r\n            returnData := mload(0x40)\r\n            mstore(returnData, size)\r\n            let returnDataPayloadStart := add(returnData, 0x20)\r\n            returndatacopy(returnDataPayloadStart, 0, size)\r\n            mstore(0x40, add(returnDataPayloadStart, size))\r\n            switch result case 0 {revert(returnDataPayloadStart, size)}\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"backToYou\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMiningContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"byMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ammPlugin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidityPoolTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStakedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"free\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"renewTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"involvingETH\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityMiningSetup\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct LiquidityMiningSetupConfiguration[]\",\"name\":\"liquidityMiningSetups\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"clearPinned\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"setPinned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pinnedIndex\",\"type\":\"uint256\"}],\"name\":\"setLiquidityMiningSetups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LiquidityMiningExtension","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://62515fbc8a493e2a7943b37a807b85c9e79e8511fcdc9ca90929f96bf54955ac"}]}