{"status":"1","message":"OK","result":[{"SourceCode":"interface IVoteProxy {\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _voter) external view returns (uint256);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function userInfo(uint256, address)\r\n    external\r\n    view\r\n    returns (uint256, uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Pair is IERC20 {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract YaxUniVoteProxy is IVoteProxy {\r\n    // ETH/YAX token\r\n    IUniswapV2Pair public constant yaxEthUniswapV2Pair = IUniswapV2Pair(\r\n        0x1107B6081231d7F256269aD014bF92E041cb08df\r\n    );\r\n    // YAX token\r\n    IERC20 public constant yax = IERC20(\r\n        0xb1dC9124c395c1e97773ab855d66E879f053A289\r\n    );\r\n\r\n    // YaxisChef contract\r\n    IMasterChef public constant chef = IMasterChef(\r\n        0xC330E7e73717cd13fb6bA068Ee871584Cf8A194F\r\n    );\r\n\r\n    // Using 9 decimals as we're square rooting the votes\r\n    function decimals() public override virtual pure returns (uint8) {\r\n        return uint8(9);\r\n    }\r\n\r\n    function totalSupply() public override virtual view returns (uint256) {\r\n        (uint256 _yaxAmount,,) = yaxEthUniswapV2Pair.getReserves();\r\n        return sqrt(yax.totalSupply()) + sqrt((2 * _yaxAmount * yaxEthUniswapV2Pair.balanceOf(address(chef))) / yaxEthUniswapV2Pair.totalSupply());\r\n    }\r\n\r\n    function balanceOf(address _voter) public override virtual view returns (uint256) {\r\n        (uint256 _stakeAmount,) = chef.userInfo(6, _voter);\r\n        (uint256 _yaxAmount,,) = yaxEthUniswapV2Pair.getReserves();\r\n        return sqrt(yax.balanceOf(_voter)) + sqrt((2 * _yaxAmount * _stakeAmount) / yaxEthUniswapV2Pair.totalSupply());\r\n    }\r\n\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBalancerPool is IERC20 {\r\n    function getBalance(address token)\r\n    external view\r\n    returns (uint);\r\n\r\n    function getNormalizedWeight(address token)\r\n    external view\r\n    returns (uint);\r\n\r\n    function getTotalDenormalizedWeight()\r\n    external view\r\n    returns (uint);\r\n\r\n}\r\n\r\ncontract YaxUniBalVoteProxy is YaxUniVoteProxy {\r\n\r\n    IBalancerPool public constant yaxBalancerPool = IBalancerPool(\r\n        0x7134263ef1e6a04f1A49AA03F8b939b97dbcba62\r\n    );\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        uint _yaxAmount = yaxBalancerPool.getBalance(address(yax));\r\n        return  super.totalSupply() + sqrt(( _yaxAmount * yaxBalancerPool.balanceOf(address(chef))) / yaxBalancerPool.totalSupply());\r\n    }\r\n\r\n    function balanceOf(address _voter) public override view returns (uint256) {\r\n        (uint256 _stakeAmount,) = chef.userInfo(9, _voter);\r\n        uint _yaxAmount = yaxBalancerPool.getBalance(address(yax));\r\n        return super.balanceOf(_voter) + sqrt(( _yaxAmount * _stakeAmount) / yaxBalancerPool.totalSupply());\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yax\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxBalancerPool\",\"outputs\":[{\"internalType\":\"contract IBalancerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yaxEthUniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YaxUniBalVoteProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7431071edb09915dfa5ef5cf35985be8444c7246793ae18cdf38ecaf84163a1c"}]}