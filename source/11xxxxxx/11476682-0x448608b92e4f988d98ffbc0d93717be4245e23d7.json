{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/packages/oz/upgradeability/Initializable.sol\r\n\r\n/**\r\n * SPDX-License-Identifier: UNLICENSED\r\n */\r\npragma solidity =0.6.10;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/packages/oz/upgradeability/ContextUpgradeSafe.sol\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/packages/oz/upgradeability/OwnableUpgradeSafe.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init(address _sender) internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained(_sender);\r\n    }\r\n\r\n    function __Ownable_init_unchained(address _sender) internal initializer {\r\n        _owner = _sender;\r\n        emit OwnershipTransferred(address(0), _sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/packages/oz/upgradeability/ReentrancyGuardUpgradeSafe.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeSafe is Initializable {\r\n    bool private _notEntered;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/packages/oz/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/MarginVault.sol\r\n\r\n\r\n/**\r\n * @title MarginVault\r\n * @author Opyn Team\r\n * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\r\n * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\r\n */\r\nlibrary MarginVault {\r\n    using SafeMath for uint256;\r\n\r\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\r\n    struct Vault {\r\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\r\n        address[] shortOtokens;\r\n        // addresses of oTokens a user has bought and deposited in this vault\r\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\r\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\r\n        address[] longOtokens;\r\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\r\n        address[] collateralAssets;\r\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\r\n        uint256[] shortAmounts;\r\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\r\n        uint256[] longAmounts;\r\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\r\n        uint256[] collateralAmounts;\r\n    }\r\n\r\n    /**\r\n     * @dev increase the short oToken balance in a vault when a new oToken is minted\r\n     * @param _vault vault to add or increase the short position in\r\n     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\r\n     * @param _amount number of _shortOtoken being minted from the user's vault\r\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\r\n     */\r\n    function addShort(\r\n        Vault storage _vault,\r\n        address _shortOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"MarginVault: invalid short otoken amount\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\r\n            _vault.shortOtokens.push(_shortOtoken);\r\n            _vault.shortAmounts.push(_amount);\r\n        } else {\r\n            require(\r\n                (_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length),\r\n                \"MarginVault: invalid short otoken index\"\r\n            );\r\n            require(\r\n                (_vault.shortOtokens[_index] == _shortOtoken) || (_vault.shortOtokens[_index] == address(0)),\r\n                \"MarginVault: short otoken address mismatch\"\r\n            );\r\n\r\n            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\r\n            _vault.shortOtokens[_index] = _shortOtoken;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the short oToken balance in a vault when an oToken is burned\r\n     * @param _vault vault to decrease short position in\r\n     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\r\n     * @param _amount number of _shortOtoken being reduced in the user's vault\r\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\r\n     */\r\n    function removeShort(\r\n        Vault storage _vault,\r\n        address _shortOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed short oToken exists in the vault at the specified index\r\n        require(_index < _vault.shortOtokens.length, \"MarginVault: invalid short otoken index\");\r\n        require(_vault.shortOtokens[_index] == _shortOtoken, \"MarginVault: short otoken address mismatch\");\r\n\r\n        _vault.shortAmounts[_index] = _vault.shortAmounts[_index].sub(_amount);\r\n\r\n        if (_vault.shortAmounts[_index] == 0) {\r\n            delete _vault.shortOtokens[_index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev increase the long oToken balance in a vault when an oToken is deposited\r\n     * @param _vault vault to add a long position to\r\n     * @param _longOtoken address of the _longOtoken being added to the user's vault\r\n     * @param _amount number of _longOtoken the protocol is adding to the user's vault\r\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\r\n     */\r\n    function addLong(\r\n        Vault storage _vault,\r\n        address _longOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"MarginVault: invalid long otoken amount\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\r\n            _vault.longOtokens.push(_longOtoken);\r\n            _vault.longAmounts.push(_amount);\r\n        } else {\r\n            require(\r\n                (_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length),\r\n                \"MarginVault: invalid long otoken index\"\r\n            );\r\n            require(\r\n                (_vault.longOtokens[_index] == _longOtoken) || (_vault.longOtokens[_index] == address(0)),\r\n                \"MarginVault: long otoken address mismatch\"\r\n            );\r\n\r\n            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\r\n            _vault.longOtokens[_index] = _longOtoken;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\r\n     * @param _vault vault to remove a long position from\r\n     * @param _longOtoken address of the _longOtoken being removed from the user's vault\r\n     * @param _amount number of _longOtoken the protocol is removing from the user's vault\r\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\r\n     */\r\n    function removeLong(\r\n        Vault storage _vault,\r\n        address _longOtoken,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed long oToken exists in the vault at the specified index\r\n        require(_index < _vault.longOtokens.length, \"MarginVault: invalid long otoken index\");\r\n        require(_vault.longOtokens[_index] == _longOtoken, \"MarginVault: long otoken address mismatch\");\r\n\r\n        _vault.longAmounts[_index] = _vault.longAmounts[_index].sub(_amount);\r\n\r\n        if (_vault.longAmounts[_index] == 0) {\r\n            delete _vault.longOtokens[_index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev increase the collateral balance in a vault\r\n     * @param _vault vault to add collateral to\r\n     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\r\n     * @param _amount number of _collateralAsset being added to the user's vault\r\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\r\n     */\r\n    function addCollateral(\r\n        Vault storage _vault,\r\n        address _collateralAsset,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        require(_amount > 0, \"MarginVault: invalid collateral amount\");\r\n\r\n        // valid indexes in any array are between 0 and array.length - 1.\r\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\r\n        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\r\n            _vault.collateralAssets.push(_collateralAsset);\r\n            _vault.collateralAmounts.push(_amount);\r\n        } else {\r\n            require(\r\n                (_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length),\r\n                \"MarginVault: invalid collateral token index\"\r\n            );\r\n            require(\r\n                (_vault.collateralAssets[_index] == _collateralAsset) ||\r\n                    (_vault.collateralAssets[_index] == address(0)),\r\n                \"MarginVault: collateral token address mismatch\"\r\n            );\r\n\r\n            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\r\n            _vault.collateralAssets[_index] = _collateralAsset;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the collateral balance in a vault\r\n     * @param _vault vault to remove collateral from\r\n     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\r\n     * @param _amount number of _collateralAsset being removed from the user's vault\r\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\r\n     */\r\n    function removeCollateral(\r\n        Vault storage _vault,\r\n        address _collateralAsset,\r\n        uint256 _amount,\r\n        uint256 _index\r\n    ) external {\r\n        // check that the removed collateral exists in the vault at the specified index\r\n        require(_index < _vault.collateralAssets.length, \"MarginVault: invalid collateral asset index\");\r\n        require(_vault.collateralAssets[_index] == _collateralAsset, \"MarginVault: collateral token address mismatch\");\r\n\r\n        _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].sub(_amount);\r\n\r\n        if (_vault.collateralAmounts[_index] == 0) {\r\n            delete _vault.collateralAssets[_index];\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/Actions.sol\r\n\r\n/**\r\n * @title Actions\r\n * @author Opyn Team\r\n * @notice A library that provides a ActionArgs struct, sub types of Action structs, and functions to parse ActionArgs into specific Actions.\r\n */\r\nlibrary Actions {\r\n    // possible actions that can be performed\r\n    enum ActionType {\r\n        OpenVault,\r\n        MintShortOption,\r\n        BurnShortOption,\r\n        DepositLongOption,\r\n        WithdrawLongOption,\r\n        DepositCollateral,\r\n        WithdrawCollateral,\r\n        SettleVault,\r\n        Redeem,\r\n        Call\r\n    }\r\n\r\n    struct ActionArgs {\r\n        // type of action that is being performed on the system\r\n        ActionType actionType;\r\n        // address of the account owner\r\n        address owner;\r\n        // address which we move assets from or to (depending on the action type)\r\n        address secondAddress;\r\n        // asset that is to be transfered\r\n        address asset;\r\n        // index of the vault that is to be modified (if any)\r\n        uint256 vaultId;\r\n        // amount of asset that is to be transfered\r\n        uint256 amount;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // any other data that needs to be passed in for arbitrary function calls\r\n        bytes data;\r\n    }\r\n\r\n    struct MintArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // index of the vault from which the asset will be minted\r\n        uint256 vaultId;\r\n        // address to which we transfer the minted oTokens\r\n        address to;\r\n        // oToken that is to be minted\r\n        address otoken;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // amount of oTokens that is to be minted\r\n        uint256 amount;\r\n    }\r\n\r\n    struct BurnArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // index of the vault from which the oToken will be burned\r\n        uint256 vaultId;\r\n        // address from which we transfer the oTokens\r\n        address from;\r\n        // oToken that is to be burned\r\n        address otoken;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // amount of oTokens that is to be burned\r\n        uint256 amount;\r\n    }\r\n\r\n    struct OpenVaultArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // vault id to create\r\n        uint256 vaultId;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // index of the vault to which the asset will be added\r\n        uint256 vaultId;\r\n        // address from which we transfer the asset\r\n        address from;\r\n        // asset that is to be deposited\r\n        address asset;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // amount of asset that is to be deposited\r\n        uint256 amount;\r\n    }\r\n\r\n    struct RedeemArgs {\r\n        // address to which we pay out the oToken proceeds\r\n        address receiver;\r\n        // oToken that is to be redeemed\r\n        address otoken;\r\n        // amount of oTokens that is to be redeemed\r\n        uint256 amount;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // index of the vault from which the asset will be withdrawn\r\n        uint256 vaultId;\r\n        // address to which we transfer the asset\r\n        address to;\r\n        // asset that is to be withdrawn\r\n        address asset;\r\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\r\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\r\n        uint256 index;\r\n        // amount of asset that is to be withdrawn\r\n        uint256 amount;\r\n    }\r\n\r\n    struct SettleVaultArgs {\r\n        // address of the account owner\r\n        address owner;\r\n        // index of the vault to which is to be settled\r\n        uint256 vaultId;\r\n        // address to which we transfer the remaining collateral\r\n        address to;\r\n    }\r\n\r\n    struct CallArgs {\r\n        // address of the callee contract\r\n        address callee;\r\n        // data field for external calls\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for an open vault action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a open vault action\r\n     */\r\n    function _parseOpenVaultArgs(ActionArgs memory _args) internal pure returns (OpenVaultArgs memory) {\r\n        require(_args.actionType == ActionType.OpenVault, \"Actions: can only parse arguments for open vault actions\");\r\n        require(_args.owner != address(0), \"Actions: cannot open vault for an invalid account\");\r\n\r\n        return OpenVaultArgs({owner: _args.owner, vaultId: _args.vaultId});\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a mint action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a mint action\r\n     */\r\n    function _parseMintArgs(ActionArgs memory _args) internal pure returns (MintArgs memory) {\r\n        require(_args.actionType == ActionType.MintShortOption, \"Actions: can only parse arguments for mint actions\");\r\n        require(_args.owner != address(0), \"Actions: cannot mint from an invalid account\");\r\n\r\n        return\r\n            MintArgs({\r\n                owner: _args.owner,\r\n                vaultId: _args.vaultId,\r\n                to: _args.secondAddress,\r\n                otoken: _args.asset,\r\n                index: _args.index,\r\n                amount: _args.amount\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a burn action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a burn action\r\n     */\r\n    function _parseBurnArgs(ActionArgs memory _args) internal pure returns (BurnArgs memory) {\r\n        require(_args.actionType == ActionType.BurnShortOption, \"Actions: can only parse arguments for burn actions\");\r\n        require(_args.owner != address(0), \"Actions: cannot burn from an invalid account\");\r\n\r\n        return\r\n            BurnArgs({\r\n                owner: _args.owner,\r\n                vaultId: _args.vaultId,\r\n                from: _args.secondAddress,\r\n                otoken: _args.asset,\r\n                index: _args.index,\r\n                amount: _args.amount\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a deposit action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a deposit action\r\n     */\r\n    function _parseDepositArgs(ActionArgs memory _args) internal pure returns (DepositArgs memory) {\r\n        require(\r\n            (_args.actionType == ActionType.DepositLongOption) || (_args.actionType == ActionType.DepositCollateral),\r\n            \"Actions: can only parse arguments for deposit actions\"\r\n        );\r\n        require(_args.owner != address(0), \"Actions: cannot deposit to an invalid account\");\r\n\r\n        return\r\n            DepositArgs({\r\n                owner: _args.owner,\r\n                vaultId: _args.vaultId,\r\n                from: _args.secondAddress,\r\n                asset: _args.asset,\r\n                index: _args.index,\r\n                amount: _args.amount\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a withdraw action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a withdraw action\r\n     */\r\n    function _parseWithdrawArgs(ActionArgs memory _args) internal pure returns (WithdrawArgs memory) {\r\n        require(\r\n            (_args.actionType == ActionType.WithdrawLongOption) || (_args.actionType == ActionType.WithdrawCollateral),\r\n            \"Actions: can only parse arguments for withdraw actions\"\r\n        );\r\n        require(_args.owner != address(0), \"Actions: cannot withdraw from an invalid account\");\r\n        require(_args.secondAddress != address(0), \"Actions: cannot withdraw to an invalid account\");\r\n\r\n        return\r\n            WithdrawArgs({\r\n                owner: _args.owner,\r\n                vaultId: _args.vaultId,\r\n                to: _args.secondAddress,\r\n                asset: _args.asset,\r\n                index: _args.index,\r\n                amount: _args.amount\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for an redeem action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a redeem action\r\n     */\r\n    function _parseRedeemArgs(ActionArgs memory _args) internal pure returns (RedeemArgs memory) {\r\n        require(_args.actionType == ActionType.Redeem, \"Actions: can only parse arguments for redeem actions\");\r\n        require(_args.secondAddress != address(0), \"Actions: cannot redeem to an invalid account\");\r\n\r\n        return RedeemArgs({receiver: _args.secondAddress, otoken: _args.asset, amount: _args.amount});\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a settle vault action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a settle vault action\r\n     */\r\n    function _parseSettleVaultArgs(ActionArgs memory _args) internal pure returns (SettleVaultArgs memory) {\r\n        require(\r\n            _args.actionType == ActionType.SettleVault,\r\n            \"Actions: can only parse arguments for settle vault actions\"\r\n        );\r\n        require(_args.owner != address(0), \"Actions: cannot settle vault for an invalid account\");\r\n        require(_args.secondAddress != address(0), \"Actions: cannot withdraw payout to an invalid account\");\r\n\r\n        return SettleVaultArgs({owner: _args.owner, vaultId: _args.vaultId, to: _args.secondAddress});\r\n    }\r\n\r\n    /**\r\n     * @notice parses the passed in action arguments to get the arguments for a call action\r\n     * @param _args general action arguments structure\r\n     * @return arguments for a call action\r\n     */\r\n    function _parseCallArgs(ActionArgs memory _args) internal pure returns (CallArgs memory) {\r\n        require(_args.actionType == ActionType.Call, \"Actions: can only parse arguments for call actions\");\r\n        require(_args.secondAddress != address(0), \"Actions: target address cannot be address(0)\");\r\n\r\n        return CallArgs({callee: _args.secondAddress, data: _args.data});\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/AddressBookInterface.sol\r\n\r\ninterface AddressBookInterface {\r\n    /* Getters */\r\n\r\n    function getOtokenImpl() external view returns (address);\r\n\r\n    function getOtokenFactory() external view returns (address);\r\n\r\n    function getWhitelist() external view returns (address);\r\n\r\n    function getController() external view returns (address);\r\n\r\n    function getOracle() external view returns (address);\r\n\r\n    function getMarginPool() external view returns (address);\r\n\r\n    function getMarginCalculator() external view returns (address);\r\n\r\n    function getLiquidationManager() external view returns (address);\r\n\r\n    function getAddress(bytes32 _id) external view returns (address);\r\n\r\n    /* Setters */\r\n\r\n    function setOtokenImpl(address _otokenImpl) external;\r\n\r\n    function setOtokenFactory(address _factory) external;\r\n\r\n    function setOracleImpl(address _otokenImpl) external;\r\n\r\n    function setWhitelist(address _whitelist) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function setMarginPool(address _marginPool) external;\r\n\r\n    function setMarginCalculator(address _calculator) external;\r\n\r\n    function setLiquidationManager(address _liquidationManager) external;\r\n\r\n    function setAddress(bytes32 _id, address _newImpl) external;\r\n}\r\n\r\n// File: contracts/interfaces/OtokenInterface.sol\r\n\r\ninterface OtokenInterface {\r\n    function addressBook() external view returns (address);\r\n\r\n    function underlyingAsset() external view returns (address);\r\n\r\n    function strikeAsset() external view returns (address);\r\n\r\n    function collateralAsset() external view returns (address);\r\n\r\n    function strikePrice() external view returns (uint256);\r\n\r\n    function expiryTimestamp() external view returns (uint256);\r\n\r\n    function isPut() external view returns (bool);\r\n\r\n    function init(\r\n        address _addressBook,\r\n        address _underlyingAsset,\r\n        address _strikeAsset,\r\n        address _collateralAsset,\r\n        uint256 _strikePrice,\r\n        uint256 _expiry,\r\n        bool _isPut\r\n    ) external;\r\n\r\n    function mintOtoken(address account, uint256 amount) external;\r\n\r\n    function burnOtoken(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/MarginCalculatorInterface.sol\r\n\r\n\r\ninterface MarginCalculatorInterface {\r\n    function addressBook() external view returns (address);\r\n\r\n    function getExpiredPayoutRate(address _otoken) external view returns (uint256);\r\n\r\n    function getExcessCollateral(MarginVault.Vault calldata _vault)\r\n        external\r\n        view\r\n        returns (uint256 netValue, bool isExcess);\r\n}\r\n\r\n// File: contracts/interfaces/OracleInterface.sol\r\n\r\ninterface OracleInterface {\r\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\r\n\r\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\r\n\r\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\r\n\r\n    function getDisputer() external view returns (address);\r\n\r\n    function getPricer(address _asset) external view returns (address);\r\n\r\n    function getPrice(address _asset) external view returns (uint256);\r\n\r\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\r\n\r\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\r\n\r\n    // Non-view function\r\n\r\n    function setAssetPricer(address _asset, address _pricer) external;\r\n\r\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\r\n\r\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\r\n\r\n    function setExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function disputeExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external;\r\n\r\n    function setDisputer(address _disputer) external;\r\n}\r\n\r\n// File: contracts/interfaces/WhitelistInterface.sol\r\n\r\ninterface WhitelistInterface {\r\n    /* View functions */\r\n\r\n    function addressBook() external view returns (address);\r\n\r\n    function isWhitelistedProduct(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) external view returns (bool);\r\n\r\n    function isWhitelistedCollateral(address _collateral) external view returns (bool);\r\n\r\n    function isWhitelistedOtoken(address _otoken) external view returns (bool);\r\n\r\n    function isWhitelistedCallee(address _callee) external view returns (bool);\r\n\r\n    /* Admin / factory only functions */\r\n    function whitelistProduct(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) external;\r\n\r\n    function blacklistProduct(\r\n        address _underlying,\r\n        address _strike,\r\n        address _collateral,\r\n        bool _isPut\r\n    ) external;\r\n\r\n    function whitelistCollateral(address _collateral) external;\r\n\r\n    function blacklistCollateral(address _collateral) external;\r\n\r\n    function whitelistOtoken(address _otoken) external;\r\n\r\n    function blacklistOtoken(address _otoken) external;\r\n\r\n    function whitelistCallee(address _callee) external;\r\n\r\n    function blacklistCallee(address _callee) external;\r\n}\r\n\r\n// File: contracts/interfaces/MarginPoolInterface.sol\r\n\r\ninterface MarginPoolInterface {\r\n    /* Getters */\r\n    function addressBook() external view returns (address);\r\n\r\n    function farmer() external view returns (address);\r\n\r\n    function getStoredBalance(address _asset) external view returns (uint256);\r\n\r\n    /* Admin-only functions */\r\n    function setFarmer(address _farmer) external;\r\n\r\n    function farm(\r\n        address _asset,\r\n        address _receiver,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    /* Controller-only functions */\r\n    function transferToPool(\r\n        address _asset,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function transferToUser(\r\n        address _asset,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function batchTransferToPool(\r\n        address[] calldata _asset,\r\n        address[] calldata _user,\r\n        uint256[] calldata _amount\r\n    ) external;\r\n\r\n    function batchTransferToUser(\r\n        address[] calldata _asset,\r\n        address[] calldata _user,\r\n        uint256[] calldata _amount\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/CalleeInterface.sol\r\n\r\n/**\r\n * @dev Contract interface that can be called from Controller as a call action.\r\n */\r\ninterface CalleeInterface {\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     * @param _sender The msg.sender to Controller\r\n     * @param _data Arbitrary data given by the sender\r\n     */\r\n    function callFunction(address payable _sender, bytes memory _data) external;\r\n}\r\n\r\n// File: contracts/Controller.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Controller\r\n * @author Opyn Team\r\n * @notice Contract that controls the Gamma Protocol and the interaction of all sub contracts\r\n */\r\ncontract Controller is Initializable, OwnableUpgradeSafe, ReentrancyGuardUpgradeSafe {\r\n    using MarginVault for MarginVault.Vault;\r\n    using SafeMath for uint256;\r\n\r\n    AddressBookInterface public addressbook;\r\n    WhitelistInterface public whitelist;\r\n    OracleInterface public oracle;\r\n    MarginCalculatorInterface public calculator;\r\n    MarginPoolInterface public pool;\r\n\r\n    ///@dev scale used in MarginCalculator\r\n    uint256 internal constant BASE = 8;\r\n\r\n    /// @notice address that has permission to partially pause the system, where system functionality is paused\r\n    /// except redeem and settleVault\r\n    address public partialPauser;\r\n\r\n    /// @notice address that has permission to fully pause the system, where all system functionality is paused\r\n    address public fullPauser;\r\n\r\n    /// @notice True if all system functionality is paused other than redeem and settle vault\r\n    bool public systemPartiallyPaused;\r\n\r\n    /// @notice True if all system functionality is paused\r\n    bool public systemFullyPaused;\r\n\r\n    /// @notice True if a call action can only be executed to a whitelisted callee\r\n    bool public callRestricted;\r\n\r\n    /// @dev mapping between an owner address and the number of owner address vaults\r\n    mapping(address => uint256) internal accountVaultCounter;\r\n    /// @dev mapping between an owner address and a specific vault using a vault id\r\n    mapping(address => mapping(uint256 => MarginVault.Vault)) internal vaults;\r\n    /// @dev mapping between an account owner and their approved or unapproved account operators\r\n    mapping(address => mapping(address => bool)) internal operators;\r\n\r\n    /// @notice emits an event when an account operator is updated for a specific account owner\r\n    event AccountOperatorUpdated(address indexed accountOwner, address indexed operator, bool isSet);\r\n    /// @notice emits an event when a new vault is opened\r\n    event VaultOpened(address indexed accountOwner, uint256 vaultId);\r\n    /// @notice emits an event when a long oToken is deposited into a vault\r\n    event LongOtokenDeposited(\r\n        address indexed otoken,\r\n        address indexed accountOwner,\r\n        address indexed from,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when a long oToken is withdrawn from a vault\r\n    event LongOtokenWithdrawed(\r\n        address indexed otoken,\r\n        address indexed AccountOwner,\r\n        address indexed to,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when a collateral asset is deposited into a vault\r\n    event CollateralAssetDeposited(\r\n        address indexed asset,\r\n        address indexed accountOwner,\r\n        address indexed from,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when a collateral asset is withdrawn from a vault\r\n    event CollateralAssetWithdrawed(\r\n        address indexed asset,\r\n        address indexed AccountOwner,\r\n        address indexed to,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when a short oToken is minted from a vault\r\n    event ShortOtokenMinted(\r\n        address indexed otoken,\r\n        address indexed AccountOwner,\r\n        address indexed to,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when a short oToken is burned\r\n    event ShortOtokenBurned(\r\n        address indexed otoken,\r\n        address indexed AccountOwner,\r\n        address indexed from,\r\n        uint256 vaultId,\r\n        uint256 amount\r\n    );\r\n    /// @notice emits an event when an oToken is redeemed\r\n    event Redeem(\r\n        address indexed otoken,\r\n        address indexed redeemer,\r\n        address indexed receiver,\r\n        address collateralAsset,\r\n        uint256 otokenBurned,\r\n        uint256 payout\r\n    );\r\n    /// @notice emits an event when a vault is settled\r\n    event VaultSettled(\r\n        address indexed AccountOwner,\r\n        address indexed to,\r\n        address indexed otoken,\r\n        uint256 vaultId,\r\n        uint256 payout\r\n    );\r\n    /// @notice emits an event when a call action is executed\r\n    event CallExecuted(address indexed from, address indexed to, bytes data);\r\n    /// @notice emits an event when the fullPauser address changes\r\n    event FullPauserUpdated(address indexed oldFullPauser, address indexed newFullPauser);\r\n    /// @notice emits an event when the partialPauser address changes\r\n    event PartialPauserUpdated(address indexed oldPartialPauser, address indexed newPartialPauser);\r\n    /// @notice emits an event when the system partial paused status changes\r\n    event SystemPartiallyPaused(bool isPaused);\r\n    /// @notice emits an event when the system fully paused status changes\r\n    event SystemFullyPaused(bool isPaused);\r\n    /// @notice emits an event when the call action restriction changes\r\n    event CallRestricted(bool isRestricted);\r\n\r\n    /**\r\n     * @notice modifier to check if the system is not partially paused, where only redeem and settleVault is allowed\r\n     */\r\n    modifier notPartiallyPaused {\r\n        _isNotPartiallyPaused();\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice modifier to check if the system is not fully paused, where no functionality is allowed\r\n     */\r\n    modifier notFullyPaused {\r\n        _isNotFullyPaused();\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice modifier to check if sender is the fullPauser address\r\n     */\r\n    modifier onlyFullPauser {\r\n        require(msg.sender == fullPauser, \"Controller: sender is not fullPauser\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice modifier to check if the sender is the partialPauser address\r\n     */\r\n    modifier onlyPartialPauser {\r\n        require(msg.sender == partialPauser, \"Controller: sender is not partialPauser\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice modifier to check if the sender is the account owner or an approved account operator\r\n     * @param _sender sender address\r\n     * @param _accountOwner account owner address\r\n     */\r\n    modifier onlyAuthorized(address _sender, address _accountOwner) {\r\n        _isAuthorized(_sender, _accountOwner);\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice modifier to check if the called address is a whitelisted callee address\r\n     * @param _callee called address\r\n     */\r\n    modifier onlyWhitelistedCallee(address _callee) {\r\n        if (callRestricted) {\r\n            require(_isCalleeWhitelisted(_callee), \"Controller: callee is not a whitelisted address\");\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev check if the system is not in a partiallyPaused state\r\n     */\r\n    function _isNotPartiallyPaused() internal view {\r\n        require(!systemPartiallyPaused, \"Controller: system is partially paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev check if the system is not in an fullyPaused state\r\n     */\r\n    function _isNotFullyPaused() internal view {\r\n        require(!systemFullyPaused, \"Controller: system is fully paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev check if the sender is an authorized operator\r\n     * @param _sender msg.sender\r\n     * @param _accountOwner owner of a vault\r\n     */\r\n    function _isAuthorized(address _sender, address _accountOwner) internal view {\r\n        require(\r\n            (_sender == _accountOwner) || (operators[_accountOwner][_sender]),\r\n            \"Controller: msg.sender is not authorized to run action\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice initalize the deployed contract\r\n     * @param _addressBook addressbook module\r\n     * @param _owner account owner address\r\n     */\r\n    function initialize(address _addressBook, address _owner) external initializer {\r\n        require(_addressBook != address(0), \"Controller: invalid addressbook address\");\r\n        require(_owner != address(0), \"Controller: invalid owner address\");\r\n\r\n        __Ownable_init(_owner);\r\n        __ReentrancyGuard_init_unchained();\r\n\r\n        addressbook = AddressBookInterface(_addressBook);\r\n        _refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n     * @notice allows the partialPauser to toggle the systemPartiallyPaused variable and partially pause or partially unpause the system\r\n     * @dev can only be called by the partialPauser\r\n     * @param _partiallyPaused new boolean value to set systemPartiallyPaused to\r\n     */\r\n    function setSystemPartiallyPaused(bool _partiallyPaused) external onlyPartialPauser {\r\n        require(systemPartiallyPaused != _partiallyPaused, \"Controller: invalid input\");\r\n\r\n        systemPartiallyPaused = _partiallyPaused;\r\n\r\n        emit SystemPartiallyPaused(systemPartiallyPaused);\r\n    }\r\n\r\n    /**\r\n     * @notice allows the fullPauser to toggle the systemFullyPaused variable and fully pause or fully unpause the system\r\n     * @dev can only be called by the fullPauser\r\n     * @param _fullyPaused new boolean value to set systemFullyPaused to\r\n     */\r\n    function setSystemFullyPaused(bool _fullyPaused) external onlyFullPauser {\r\n        require(systemFullyPaused != _fullyPaused, \"Controller: invalid input\");\r\n\r\n        systemFullyPaused = _fullyPaused;\r\n\r\n        emit SystemFullyPaused(systemFullyPaused);\r\n    }\r\n\r\n    /**\r\n     * @notice allows the owner to set the fullPauser address\r\n     * @dev can only be called by the owner\r\n     * @param _fullPauser new fullPauser address\r\n     */\r\n    function setFullPauser(address _fullPauser) external onlyOwner {\r\n        require(_fullPauser != address(0), \"Controller: fullPauser cannot be set to address zero\");\r\n        require(fullPauser != _fullPauser, \"Controller: invalid input\");\r\n\r\n        emit FullPauserUpdated(fullPauser, _fullPauser);\r\n\r\n        fullPauser = _fullPauser;\r\n    }\r\n\r\n    /**\r\n     * @notice allows the owner to set the partialPauser address\r\n     * @dev can only be called by the owner\r\n     * @param _partialPauser new partialPauser address\r\n     */\r\n    function setPartialPauser(address _partialPauser) external onlyOwner {\r\n        require(_partialPauser != address(0), \"Controller: partialPauser cannot be set to address zero\");\r\n        require(partialPauser != _partialPauser, \"Controller: invalid input\");\r\n\r\n        emit PartialPauserUpdated(partialPauser, _partialPauser);\r\n\r\n        partialPauser = _partialPauser;\r\n    }\r\n\r\n    /**\r\n     * @notice allows the owner to toggle the restriction on whitelisted call actions and only allow whitelisted\r\n     * call addresses or allow any arbitrary call addresses\r\n     * @dev can only be called by the owner\r\n     * @param _isRestricted new call restriction state\r\n     */\r\n    function setCallRestriction(bool _isRestricted) external onlyOwner {\r\n        require(callRestricted != _isRestricted, \"Controller: invalid input\");\r\n\r\n        callRestricted = _isRestricted;\r\n\r\n        emit CallRestricted(callRestricted);\r\n    }\r\n\r\n    /**\r\n     * @notice allows a user to give or revoke privileges to an operator which can act on their behalf on their vaults\r\n     * @dev can only be updated by the vault owner\r\n     * @param _operator operator that the sender wants to give privileges to or revoke them from\r\n     * @param _isOperator new boolean value that expresses if the sender is giving or revoking privileges for _operator\r\n     */\r\n    function setOperator(address _operator, bool _isOperator) external {\r\n        require(operators[msg.sender][_operator] != _isOperator, \"Controller: invalid input\");\r\n\r\n        operators[msg.sender][_operator] = _isOperator;\r\n\r\n        emit AccountOperatorUpdated(msg.sender, _operator, _isOperator);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the configuration of the controller. can only be called by the owner\r\n     */\r\n    function refreshConfiguration() external onlyOwner {\r\n        _refreshConfigInternal();\r\n    }\r\n\r\n    /**\r\n     * @notice execute a number of actions on specific vaults\r\n     * @dev can only be called when the system is not fully paused\r\n     * @param _actions array of actions arguments\r\n     */\r\n    function operate(Actions.ActionArgs[] memory _actions) external nonReentrant notFullyPaused {\r\n        (bool vaultUpdated, address vaultOwner, uint256 vaultId) = _runActions(_actions);\r\n        if (vaultUpdated) _verifyFinalState(vaultOwner, vaultId);\r\n    }\r\n\r\n    /**\r\n     * @notice check if a specific address is an operator for an owner account\r\n     * @param _owner account owner address\r\n     * @param _operator account operator address\r\n     * @return True if the _operator is an approved operator for the _owner account\r\n     */\r\n    function isOperator(address _owner, address _operator) external view returns (bool) {\r\n        return operators[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @notice returns the current controller configuration\r\n     * @return whitelist, the address of the whitelist module\r\n     * @return oracle, the address of the oracle module\r\n     * @return calculator, the address of the calculator module\r\n     * @return pool, the address of the pool module\r\n     */\r\n    function getConfiguration()\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        return (address(whitelist), address(oracle), address(calculator), address(pool));\r\n    }\r\n\r\n    /**\r\n     * @notice return a vault's proceeds pre or post expiry, the amount of collateral that can be removed from a vault\r\n     * @param _owner account owner of the vault\r\n     * @param _vaultId vaultId to return balances for\r\n     * @return amount of collateral that can be taken out\r\n     */\r\n    function getProceed(address _owner, uint256 _vaultId) external view returns (uint256) {\r\n        MarginVault.Vault memory vault = getVault(_owner, _vaultId);\r\n\r\n        (uint256 netValue, ) = calculator.getExcessCollateral(vault);\r\n        return netValue;\r\n    }\r\n\r\n    /**\r\n     * @notice get an oToken's payout/cash value after expiry, in the collateral asset\r\n     * @param _otoken oToken address\r\n     * @param _amount amount of the oToken to calculate the payout for, always represented in 1e8\r\n     * @return amount of collateral to pay out\r\n     */\r\n    function getPayout(address _otoken, uint256 _amount) public view returns (uint256) {\r\n        uint256 rate = calculator.getExpiredPayoutRate(_otoken);\r\n        return rate.mul(_amount).div(10**BASE);\r\n    }\r\n\r\n    /**\r\n     * @dev return if an expired oToken contract’s settlement price has been finalized\r\n     * @param _otoken address of the oToken\r\n     * @return True if the oToken has expired AND all oracle prices at the expiry timestamp have been finalized, False if not\r\n     */\r\n    function isSettlementAllowed(address _otoken) public view returns (bool) {\r\n        OtokenInterface otoken = OtokenInterface(_otoken);\r\n\r\n        address underlying = otoken.underlyingAsset();\r\n        address strike = otoken.strikeAsset();\r\n        address collateral = otoken.collateralAsset();\r\n\r\n        uint256 expiry = otoken.expiryTimestamp();\r\n\r\n        bool isUnderlyingFinalized = oracle.isDisputePeriodOver(underlying, expiry);\r\n        bool isStrikeFinalized = oracle.isDisputePeriodOver(strike, expiry);\r\n        bool isCollateralFinalized = oracle.isDisputePeriodOver(collateral, expiry);\r\n\r\n        return isUnderlyingFinalized && isStrikeFinalized && isCollateralFinalized;\r\n    }\r\n\r\n    /**\r\n     * @notice get the number of vaults for a specified account owner\r\n     * @param _accountOwner account owner address\r\n     * @return number of vaults\r\n     */\r\n    function getAccountVaultCounter(address _accountOwner) external view returns (uint256) {\r\n        return accountVaultCounter[_accountOwner];\r\n    }\r\n\r\n    /**\r\n     * @notice check if an oToken has expired\r\n     * @param _otoken oToken address\r\n     * @return True if the otoken has expired, False if not\r\n     */\r\n    function hasExpired(address _otoken) external view returns (bool) {\r\n        uint256 otokenExpiryTimestamp = OtokenInterface(_otoken).expiryTimestamp();\r\n\r\n        return now >= otokenExpiryTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice return a specific vault\r\n     * @param _owner account owner\r\n     * @param _vaultId vault id of vault to return\r\n     * @return Vault struct that corresponds to the _vaultId of _owner\r\n     */\r\n    function getVault(address _owner, uint256 _vaultId) public view returns (MarginVault.Vault memory) {\r\n        return vaults[_owner][_vaultId];\r\n    }\r\n\r\n    /**\r\n     * @notice execute a variety of actions\r\n     * @dev for each action in the action array, execute the corresponding action, only one vault can be modified\r\n     * for all actions except SettleVault, Redeem, and Call\r\n     * @param _actions array of type Actions.ActionArgs[], which expresses which actions the user wants to execute\r\n     * @return vaultUpdated, indicates if a vault has changed\r\n     * @return owner, the vault owner if a vault has changed\r\n     * @return vaultId, the vault Id if a vault has changed\r\n     */\r\n    function _runActions(Actions.ActionArgs[] memory _actions)\r\n        internal\r\n        returns (\r\n            bool,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        address vaultOwner;\r\n        uint256 vaultId;\r\n        bool vaultUpdated;\r\n\r\n        for (uint256 i = 0; i < _actions.length; i++) {\r\n            Actions.ActionArgs memory action = _actions[i];\r\n            Actions.ActionType actionType = action.actionType;\r\n\r\n            if (\r\n                (actionType != Actions.ActionType.SettleVault) &&\r\n                (actionType != Actions.ActionType.Redeem) &&\r\n                (actionType != Actions.ActionType.Call)\r\n            ) {\r\n                // check if this action is manipulating the same vault as all other actions, if a vault has already been updated\r\n                if (vaultUpdated) {\r\n                    require(vaultOwner == action.owner, \"Controller: can not run actions for different owners\");\r\n                    require(vaultId == action.vaultId, \"Controller: can not run actions on different vaults\");\r\n                }\r\n                vaultUpdated = true;\r\n                vaultId = action.vaultId;\r\n                vaultOwner = action.owner;\r\n            }\r\n\r\n            if (actionType == Actions.ActionType.OpenVault) {\r\n                _openVault(Actions._parseOpenVaultArgs(action));\r\n            } else if (actionType == Actions.ActionType.DepositLongOption) {\r\n                _depositLong(Actions._parseDepositArgs(action));\r\n            } else if (actionType == Actions.ActionType.WithdrawLongOption) {\r\n                _withdrawLong(Actions._parseWithdrawArgs(action));\r\n            } else if (actionType == Actions.ActionType.DepositCollateral) {\r\n                _depositCollateral(Actions._parseDepositArgs(action));\r\n            } else if (actionType == Actions.ActionType.WithdrawCollateral) {\r\n                _withdrawCollateral(Actions._parseWithdrawArgs(action));\r\n            } else if (actionType == Actions.ActionType.MintShortOption) {\r\n                _mintOtoken(Actions._parseMintArgs(action));\r\n            } else if (actionType == Actions.ActionType.BurnShortOption) {\r\n                _burnOtoken(Actions._parseBurnArgs(action));\r\n            } else if (actionType == Actions.ActionType.Redeem) {\r\n                _redeem(Actions._parseRedeemArgs(action));\r\n            } else if (actionType == Actions.ActionType.SettleVault) {\r\n                _settleVault(Actions._parseSettleVaultArgs(action));\r\n            } else if (actionType == Actions.ActionType.Call) {\r\n                _call(Actions._parseCallArgs(action));\r\n            }\r\n        }\r\n\r\n        return (vaultUpdated, vaultOwner, vaultId);\r\n    }\r\n\r\n    /**\r\n     * @notice verify the vault final state after executing all actions\r\n     * @param _owner account owner address\r\n     * @param _vaultId vault id of the final vault\r\n     */\r\n    function _verifyFinalState(address _owner, uint256 _vaultId) internal view {\r\n        MarginVault.Vault memory _vault = getVault(_owner, _vaultId);\r\n        (, bool isValidVault) = calculator.getExcessCollateral(_vault);\r\n\r\n        require(isValidVault, \"Controller: invalid final vault state\");\r\n    }\r\n\r\n    /**\r\n     * @notice open a new vault inside an account\r\n     * @dev only the account owner or operator can open a vault, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args OpenVaultArgs structure\r\n     */\r\n    function _openVault(Actions.OpenVaultArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        accountVaultCounter[_args.owner] = accountVaultCounter[_args.owner].add(1);\r\n\r\n        require(\r\n            _args.vaultId == accountVaultCounter[_args.owner],\r\n            \"Controller: can not run actions on inexistent vault\"\r\n        );\r\n\r\n        emit VaultOpened(_args.owner, accountVaultCounter[_args.owner]);\r\n    }\r\n\r\n    /**\r\n     * @notice deposit a long oToken into a vault\r\n     * @dev only the account owner or operator can deposit a long oToken, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args DepositArgs structure\r\n     */\r\n    function _depositLong(Actions.DepositArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n        require(\r\n            (_args.from == msg.sender) || (_args.from == _args.owner),\r\n            \"Controller: cannot deposit long otoken from this address\"\r\n        );\r\n\r\n        require(\r\n            whitelist.isWhitelistedOtoken(_args.asset),\r\n            \"Controller: otoken is not whitelisted to be used as collateral\"\r\n        );\r\n\r\n        OtokenInterface otoken = OtokenInterface(_args.asset);\r\n\r\n        require(now < otoken.expiryTimestamp(), \"Controller: otoken used as collateral is already expired\");\r\n\r\n        vaults[_args.owner][_args.vaultId].addLong(_args.asset, _args.amount, _args.index);\r\n\r\n        pool.transferToPool(_args.asset, _args.from, _args.amount);\r\n\r\n        emit LongOtokenDeposited(_args.asset, _args.owner, _args.from, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw a long oToken from a vault\r\n     * @dev only the account owner or operator can withdraw a long oToken, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args WithdrawArgs structure\r\n     */\r\n    function _withdrawLong(Actions.WithdrawArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n\r\n        OtokenInterface otoken = OtokenInterface(_args.asset);\r\n\r\n        require(now < otoken.expiryTimestamp(), \"Controller: can not withdraw an expired otoken\");\r\n\r\n        vaults[_args.owner][_args.vaultId].removeLong(_args.asset, _args.amount, _args.index);\r\n\r\n        pool.transferToUser(_args.asset, _args.to, _args.amount);\r\n\r\n        emit LongOtokenWithdrawed(_args.asset, _args.owner, _args.to, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice deposit a collateral asset into a vault\r\n     * @dev only the account owner or operator can deposit collateral, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args DepositArgs structure\r\n     */\r\n    function _depositCollateral(Actions.DepositArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n        require(\r\n            (_args.from == msg.sender) || (_args.from == _args.owner),\r\n            \"Controller: cannot deposit collateral from this address\"\r\n        );\r\n\r\n        require(\r\n            whitelist.isWhitelistedCollateral(_args.asset),\r\n            \"Controller: asset is not whitelisted to be used as collateral\"\r\n        );\r\n\r\n        vaults[_args.owner][_args.vaultId].addCollateral(_args.asset, _args.amount, _args.index);\r\n\r\n        pool.transferToPool(_args.asset, _args.from, _args.amount);\r\n\r\n        emit CollateralAssetDeposited(_args.asset, _args.owner, _args.from, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw a collateral asset from a vault\r\n     * @dev only the account owner or operator can withdraw collateral, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args WithdrawArgs structure\r\n     */\r\n    function _withdrawCollateral(Actions.WithdrawArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n\r\n        MarginVault.Vault memory vault = getVault(_args.owner, _args.vaultId);\r\n        if (_isNotEmpty(vault.shortOtokens)) {\r\n            OtokenInterface otoken = OtokenInterface(vault.shortOtokens[0]);\r\n\r\n            require(\r\n                now < otoken.expiryTimestamp(),\r\n                \"Controller: can not withdraw collateral from a vault with an expired short otoken\"\r\n            );\r\n        }\r\n\r\n        vaults[_args.owner][_args.vaultId].removeCollateral(_args.asset, _args.amount, _args.index);\r\n\r\n        pool.transferToUser(_args.asset, _args.to, _args.amount);\r\n\r\n        emit CollateralAssetWithdrawed(_args.asset, _args.owner, _args.to, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice mint short oTokens from a vault which creates an obligation that is recorded in the vault\r\n     * @dev only the account owner or operator can mint an oToken, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args MintArgs structure\r\n     */\r\n    function _mintOtoken(Actions.MintArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n\r\n        require(whitelist.isWhitelistedOtoken(_args.otoken), \"Controller: otoken is not whitelisted to be minted\");\r\n\r\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\r\n\r\n        require(now < otoken.expiryTimestamp(), \"Controller: can not mint expired otoken\");\r\n\r\n        vaults[_args.owner][_args.vaultId].addShort(_args.otoken, _args.amount, _args.index);\r\n\r\n        otoken.mintOtoken(_args.to, _args.amount);\r\n\r\n        emit ShortOtokenMinted(_args.otoken, _args.owner, _args.to, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice burn oTokens to reduce or remove the minted oToken obligation recorded in a vault\r\n     * @dev only the account owner or operator can burn an oToken, cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args MintArgs structure\r\n     */\r\n    function _burnOtoken(Actions.BurnArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyAuthorized(msg.sender, _args.owner)\r\n    {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n        require((_args.from == msg.sender) || (_args.from == _args.owner), \"Controller: cannot burn from this address\");\r\n\r\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\r\n\r\n        require(now < otoken.expiryTimestamp(), \"Controller: can not burn expired otoken\");\r\n\r\n        vaults[_args.owner][_args.vaultId].removeShort(_args.otoken, _args.amount, _args.index);\r\n\r\n        otoken.burnOtoken(_args.from, _args.amount);\r\n\r\n        emit ShortOtokenBurned(_args.otoken, _args.owner, _args.from, _args.vaultId, _args.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice redeem an oToken after expiry, receiving the payout of the oToken in the collateral asset\r\n     * @dev cannot be called when system is fullyPaused\r\n     * @param _args RedeemArgs structure\r\n     */\r\n    function _redeem(Actions.RedeemArgs memory _args) internal {\r\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\r\n\r\n        require(whitelist.isWhitelistedOtoken(_args.otoken), \"Controller: otoken is not whitelisted to be redeemed\");\r\n\r\n        require(now >= otoken.expiryTimestamp(), \"Controller: can not redeem un-expired otoken\");\r\n\r\n        require(isSettlementAllowed(_args.otoken), \"Controller: asset prices not finalized yet\");\r\n\r\n        uint256 payout = getPayout(_args.otoken, _args.amount);\r\n\r\n        otoken.burnOtoken(msg.sender, _args.amount);\r\n\r\n        pool.transferToUser(otoken.collateralAsset(), _args.receiver, payout);\r\n\r\n        emit Redeem(_args.otoken, msg.sender, _args.receiver, otoken.collateralAsset(), _args.amount, payout);\r\n    }\r\n\r\n    /**\r\n     * @notice settle a vault after expiry, removing the net proceeds/collateral after both long and short oToken payouts have settled\r\n     * @dev deletes a vault of vaultId after net proceeds/collateral is removed, cannot be called when system is fullyPaused\r\n     * @param _args SettleVaultArgs structure\r\n     */\r\n    function _settleVault(Actions.SettleVaultArgs memory _args) internal onlyAuthorized(msg.sender, _args.owner) {\r\n        require(_checkVaultId(_args.owner, _args.vaultId), \"Controller: invalid vault id\");\r\n\r\n        MarginVault.Vault memory vault = getVault(_args.owner, _args.vaultId);\r\n\r\n        require(\r\n            _isNotEmpty(vault.shortOtokens) || _isNotEmpty(vault.longOtokens),\r\n            \"Controller: Can't settle vault with no otoken\"\r\n        );\r\n\r\n        OtokenInterface otoken = _isNotEmpty(vault.shortOtokens)\r\n            ? OtokenInterface(vault.shortOtokens[0])\r\n            : OtokenInterface(vault.longOtokens[0]);\r\n\r\n        require(now >= otoken.expiryTimestamp(), \"Controller: can not settle vault with un-expired otoken\");\r\n        require(isSettlementAllowed(address(otoken)), \"Controller: asset prices not finalized yet\");\r\n\r\n        (uint256 payout, ) = calculator.getExcessCollateral(vault);\r\n\r\n        if (_isNotEmpty(vault.longOtokens)) {\r\n            OtokenInterface longOtoken = OtokenInterface(vault.longOtokens[0]);\r\n\r\n            longOtoken.burnOtoken(address(pool), vault.longAmounts[0]);\r\n        }\r\n\r\n        delete vaults[_args.owner][_args.vaultId];\r\n\r\n        pool.transferToUser(otoken.collateralAsset(), _args.to, payout);\r\n\r\n        emit VaultSettled(_args.owner, _args.to, address(otoken), _args.vaultId, payout);\r\n    }\r\n\r\n    /**\r\n     * @notice execute arbitrary calls\r\n     * @dev cannot be called when system is partiallyPaused or fullyPaused\r\n     * @param _args Call action\r\n     */\r\n    function _call(Actions.CallArgs memory _args)\r\n        internal\r\n        notPartiallyPaused\r\n        onlyWhitelistedCallee(_args.callee)\r\n        returns (uint256)\r\n    {\r\n        CalleeInterface(_args.callee).callFunction(msg.sender, _args.data);\r\n\r\n        emit CallExecuted(msg.sender, _args.callee, _args.data);\r\n    }\r\n\r\n    /**\r\n     * @notice check if a vault id is valid for a given account owner address\r\n     * @param _accountOwner account owner address\r\n     * @param _vaultId vault id to check\r\n     * @return True if the _vaultId is valid, False if not\r\n     */\r\n    function _checkVaultId(address _accountOwner, uint256 _vaultId) internal view returns (bool) {\r\n        return ((_vaultId > 0) && (_vaultId <= accountVaultCounter[_accountOwner]));\r\n    }\r\n\r\n    function _isNotEmpty(address[] memory _array) internal pure returns (bool) {\r\n        return (_array.length > 0) && (_array[0] != address(0));\r\n    }\r\n\r\n    /**\r\n     * @notice return if a callee address is whitelisted or not\r\n     * @param _callee callee address\r\n     * @return True if callee address is whitelisted, False if not\r\n     */\r\n    function _isCalleeWhitelisted(address _callee) internal view returns (bool) {\r\n        return whitelist.isWhitelistedCallee(_callee);\r\n    }\r\n\r\n    /**\r\n     * @dev updates the internal configuration of the controller\r\n     */\r\n    function _refreshConfigInternal() internal {\r\n        whitelist = WhitelistInterface(addressbook.getWhitelist());\r\n        oracle = OracleInterface(addressbook.getOracle());\r\n        calculator = MarginCalculatorInterface(addressbook.getMarginCalculator());\r\n        pool = MarginPoolInterface(addressbook.getMarginPool());\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AccountOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRestricted\",\"type\":\"bool\"}],\"name\":\"CallRestricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFullPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFullPauser\",\"type\":\"address\"}],\"name\":\"FullPauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongOtokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongOtokenWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPartialPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPartialPauser\",\"type\":\"address\"}],\"name\":\"PartialPauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortOtokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortOtokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SystemFullyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SystemPartiallyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"VaultOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"VaultSettled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressbook\",\"outputs\":[{\"internalType\":\"contract AddressBookInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculator\",\"outputs\":[{\"internalType\":\"contract MarginCalculatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountOwner\",\"type\":\"address\"}],\"name\":\"getAccountVaultCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getProceed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"hasExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"isSettlementAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Actions.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Actions.ActionArgs[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"operate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract MarginPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRestricted\",\"type\":\"bool\"}],\"name\":\"setCallRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fullPauser\",\"type\":\"address\"}],\"name\":\"setFullPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partialPauser\",\"type\":\"address\"}],\"name\":\"setPartialPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_fullyPaused\",\"type\":\"bool\"}],\"name\":\"setSystemFullyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_partiallyPaused\",\"type\":\"bool\"}],\"name\":\"setSystemPartiallyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemFullyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemPartiallyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract WhitelistInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"MarginVault:003991b685820b491552fa1f52e79ec7e1cc7e86","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ccef37ba53709685f18efa8c0e9fdb21d362060cf24a80693e8ffc012a748f8"}]}