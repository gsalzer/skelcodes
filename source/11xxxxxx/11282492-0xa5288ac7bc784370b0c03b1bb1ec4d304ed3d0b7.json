{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oven/OvenFactoryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Oven.sol\\\";\\n\\ncontract OvenFactoryContract is Ownable {\\n    event OvenCreated(\\n        address Oven,\\n        address Controller,\\n        address Pie,\\n        address Recipe\\n    );\\n\\n    address[] public ovens;\\n    mapping(address => bool) public isOven;\\n    address public defaultController;\\n\\n    function setDefaultController(address _controller) external onlyOwner {\\n        defaultController = _controller;\\n    }\\n\\n    function CreateEmptyOven() external {\\n        CreateOven(address(0), address(0));\\n    }\\n\\n    function CreateOven(address _pie, address _recipe) public {\\n        require(defaultController != address(0), \\\"CONTROLLER_NOT_SET\\\");\\n\\n        Oven oven = new Oven(address(this), _pie, _recipe);\\n        ovens.push(address(oven));\\n        isOven[address(oven)] = true;\\n\\n        oven.setCap(uint256(-1));\\n        oven.setController(defaultController);\\n        emit OvenCreated(address(oven), defaultController, _pie, _recipe);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oven/Oven.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/PieRecipe.sol\\\";\\n\\ncontract Oven {\\n    using SafeMath for uint256;\\n\\n    event Deposit(address user, uint256 amount);\\n    event WithdrawETH(address user, uint256 amount, address receiver);\\n    event WithdrawOuput(address user, uint256 amount, address receiver);\\n    event Bake(address user, uint256 amount, uint256 price);\\n\\n    mapping(address => uint256) public ethBalanceOf;\\n    mapping(address => uint256) public outputBalanceOf;\\n    address public controller;\\n    IERC20 public pie;\\n    PieRecipe public recipe;\\n    uint256 public cap;\\n\\n    constructor(\\n        address _controller,\\n        address _pie,\\n        address _recipe\\n    ) public {\\n        controller = _controller;\\n        pie = IERC20(_pie);\\n        recipe = PieRecipe(_recipe);\\n    }\\n\\n    modifier ovenIsReady {\\n        require(address(pie) != address(0), \\\"PIE_NOT_SET\\\");\\n        require(address(recipe) != address(0), \\\"RECIPE_NOT_SET\\\");\\n        _;\\n    }\\n\\n    modifier controllerOnly {\\n        require(msg.sender == controller, \\\"NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // _maxprice should be equal to the sum of _receivers.\\n    // this variable is needed because in the time between calling this function\\n    // and execution, the _receiver amounts can differ.\\n    function bake(\\n        address[] calldata _receivers,\\n        uint256 _outputAmount,\\n        uint256 _maxPrice\\n    ) public ovenIsReady controllerOnly {\\n        uint256 realPrice = recipe.calcToPie(address(pie), _outputAmount);\\n        require(realPrice <= _maxPrice, \\\"PRICE_ERROR\\\");\\n\\n        uint256 totalInputAmount = 0;\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            // This logic aims to execute the following logic\\n            // E.g. 5 eth is needed to mint the outputAmount\\n            // User 1: 2 eth (100% used)\\n            // User 2: 2 eth (100% used)\\n            // User 3: 2 eth (50% used)\\n            // User 4: 2 eth (0% used)\\n\\n            uint256 userAmount = ethBalanceOf[_receivers[i]];\\n            if (totalInputAmount == realPrice) {\\n                break;\\n            } else if (totalInputAmount.add(userAmount) <= realPrice) {\\n                totalInputAmount = totalInputAmount.add(userAmount);\\n            } else {\\n                userAmount = realPrice.sub(totalInputAmount);\\n                // e.g. totalInputAmount = realPrice\\n                totalInputAmount = totalInputAmount.add(userAmount);\\n            }\\n\\n            ethBalanceOf[_receivers[i]] = ethBalanceOf[_receivers[i]].sub(\\n                userAmount\\n            );\\n\\n            uint256 userBakeAmount = _outputAmount.mul(userAmount).div(\\n                realPrice\\n            );\\n            outputBalanceOf[_receivers[i]] = outputBalanceOf[_receivers[i]].add(\\n                userBakeAmount\\n            );\\n\\n            emit Bake(_receivers[i], userBakeAmount, userAmount);\\n        }\\n        // Provided balances are too low.\\n        require(totalInputAmount == realPrice, \\\"INSUFFICIENT_FUNDS\\\");\\n        recipe.toPie{value: realPrice}(address(pie), _outputAmount);\\n    }\\n\\n    function deposit() public payable ovenIsReady {\\n        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(msg.value);\\n        require(address(this).balance <= cap, \\\"MAX_CAP\\\");\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    receive() external payable {\\n        deposit();\\n    }\\n\\n    function withdrawAll(address payable _receiver) external ovenIsReady {\\n        withdrawAllETH(_receiver);\\n        withdrawOutput(_receiver);\\n    }\\n\\n    function withdrawAllETH(address payable _receiver) public ovenIsReady {\\n        withdrawETH(ethBalanceOf[msg.sender], _receiver);\\n    }\\n\\n    function withdrawETH(uint256 _amount, address payable _receiver)\\n        public\\n        ovenIsReady\\n    {\\n        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_amount);\\n        _receiver.transfer(_amount);\\n        emit WithdrawETH(msg.sender, _amount, _receiver);\\n    }\\n\\n    function withdrawOutput(address _receiver) public ovenIsReady {\\n        uint256 _amount = outputBalanceOf[msg.sender];\\n        outputBalanceOf[msg.sender] = 0;\\n        pie.transfer(_receiver, _amount);\\n        emit WithdrawOuput(msg.sender, _amount, _receiver);\\n    }\\n\\n    function setCap(uint256 _cap) external controllerOnly {\\n        cap = _cap;\\n    }\\n\\n    function setController(address _controller) external controllerOnly {\\n        controller = _controller;\\n    }\\n\\n    function setPie(address _pie) public controllerOnly {\\n        // Only able to change pie from address(0) to an actual address\\n        // Otherwise old outputBalances can conflict with a new pie\\n        require(address(pie) == address(0), \\\"PIE_ALREADY_SET\\\");\\n        pie = IERC20(_pie);\\n    }\\n\\n    function setRecipe(address _recipe) public controllerOnly {\\n        // Only able to change pie from address(0) to an actual address\\n        // Otherwise old outputBalances can conflict with a new pie\\n        require(address(recipe) == address(0), \\\"RECIPE_ALREADY_SET\\\");\\n        recipe = PieRecipe(_recipe);\\n    }\\n\\n    function setPieAndRecipe(address _pie, address _recipe) external {\\n        setPie(_pie);\\n        setRecipe(_recipe);\\n    }\\n\\n    function getCap() external view returns (uint256) {\\n        return cap;\\n    }\\n\\n    function saveToken(address _token) external {\\n        require(_token != address(pie), \\\"INVALID_TOKEN\\\");\\n\\n        IERC20 token = IERC20(_token);\\n\\n        token.transfer(\\n            address(0x4efD8CEad66bb0fA64C8d53eBE65f31663199C6d),\\n            token.balanceOf(address(this))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/PieRecipe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\ninterface PieRecipe {\\n    function toPie(address _pie, uint256 _poolAmount) external payable;\\n\\n    function calcToPie(address _pie, uint256 _poolAmount)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Oven\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pie\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Recipe\",\"type\":\"address\"}],\"name\":\"OvenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CreateEmptyOven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pie\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipe\",\"type\":\"address\"}],\"name\":\"CreateOven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOven\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ovens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setDefaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OvenFactoryContract","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}