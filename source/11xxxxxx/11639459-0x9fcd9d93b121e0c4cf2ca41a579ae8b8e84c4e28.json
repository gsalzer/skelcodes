{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"pragma solidity \\u003e= 0.6.4;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n  function mint(address account, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Owned is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"uniV2Staking.sol\":{\"content\":\"pragma solidity \\u003e= 0.6.4;\\n\\nimport \\u0027./ownable.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./IERC20.sol\\u0027;\\n\\ninterface synStakingInterface {\\n  // Stakes SYN\\n  function stake(uint256 amount) external;\\n  // Unstakes SYN\\n  function unstake(uint256 amount) external;\\n  // Claims any ETH owed to msg.sender for staking SYN\\n  function claimReward() external;\\n  // Emergency removes staked SYN\\n  function emergencyRemove(uint256 amount) external;\\n}\\n\\ncontract uniV2Staking is Owned {\\n  using SafeMath for uint256;\\n\\n  struct userStakeStruct {\\n    uint256 uniV2Tokens;\\n    uint256 fpuEntered;\\n  }\\n\\n  IERC20 public synToken;\\n  IERC20 public uniV2Token;\\n  synStakingInterface public synStaking;\\n\\n  mapping(address =\\u003e userStakeStruct) public userStake;\\n  // Map of original SYN owner -\\u003e amount of SYN they\\u0027ve staked via this contract\\n  mapping(address =\\u003e uint) public stakedSyn;\\n\\n\\n  // Total amount of UniV2Tokens staked\\n  uint256 public uniV2TotalStaked;\\n  // Amount of fees per UniV2Token currently staked\\n  uint256 public fpuTotal;\\n  // Total fees this contract has earned that can be given to UniV2Token stakers\\n  uint256 public feesTotal;\\n\\n  event feesIn(\\n    uint256 ethIn,\\n    uint256 fpuTotal,\\n    uint256 feesTotal\\n  );\\n  event userStakeEvent(\\n    address account,\\n    uint256 amount\\n  );\\n  event userUnStakeEvent(\\n    address account,\\n    uint256 amount\\n  );\\n  event userClaimEvent(\\n    address account,\\n    uint256 ethOut\\n  );\\n  event newSynStaking(\\n    address oldSynStaking,\\n    address newSynStaking\\n  );\\n\\n  constructor() public {\\n    synToken = IERC20(0x1695936d6a953df699C38CA21c2140d497C08BD9);\\n    // SYN-ETH pair https://info.uniswap.org/pair/0xdf27a38946a1ace50601ef4e10f07a9cc90d7231\\n    uniV2Token = IERC20(0xdF27A38946a1AcE50601Ef4e10f07A9CC90d7231);\\n    // Syn Staking impl\\n    setSynStaking(0xf21c4F3a748F38A0B244f649d19FdcC55678F576);\\n  }\\n\\n  // Allow this contract to receive ETH\\n  receive() external payable {}\\n\\n  // Stake uniV2Tokens\\n  function stake(uint256 amount) external {\\n    require(uniV2Token.transferFrom(msg.sender, address(this), amount));\\n    claimReward();\\n    userStake[msg.sender].uniV2Tokens = userStake[msg.sender].uniV2Tokens.add(amount);\\n    userStake[msg.sender].fpuEntered = fpuTotal;\\n    uniV2TotalStaked = uniV2TotalStaked.add(amount);\\n    emit userStakeEvent(msg.sender, amount);\\n  }\\n\\n  // Unstake uniV2Tokens\\n  function unstake(uint256 amount) external {\\n    require(userStake[msg.sender].uniV2Tokens \\u003e= amount);\\n    claimReward();\\n    userStake[msg.sender].uniV2Tokens = userStake[msg.sender].uniV2Tokens.sub(amount);\\n    uniV2TotalStaked = uniV2TotalStaked.sub(amount);\\n    uniV2Token.transfer(msg.sender, amount);\\n    emit userUnStakeEvent(msg.sender, amount);\\n  }\\n\\n  // Claims msg.sender\\u0027s reward for staking uniV2Tokens\\n  function claimReward() public {\\n    // Claim earned ETH from SYN staking. This also forwards fees into synStaking\\n    synStaking.claimReward();\\n    // Update state to deal w/ earned ETH we just claimed\\n    updateTotals();\\n    // Give sender their owed ETH\\n    if(userStake[msg.sender].uniV2Tokens \\u003e 0) {\\n        uint256 ethOut = userStake[msg.sender].uniV2Tokens \\u003e= uniV2TotalStaked ?\\n                feesTotal : getUserRewards(msg.sender);\\n        userStake[msg.sender].fpuEntered = fpuTotal;\\n        feesTotal = feesTotal.sub(ethOut);\\n        msg.sender.transfer(ethOut);\\n        emit userClaimEvent(msg.sender, ethOut);\\n    }\\n  }\\n\\n  function updateTotals() public {\\n    uint256 ethIn = address(this).balance.sub(feesTotal);\\n    if(ethIn \\u003e 0 \\u0026\\u0026 uniV2TotalStaked != 0) {\\n        uint256 addFpu = ethIn.mul(10**18).div(uniV2TotalStaked);\\n        fpuTotal = fpuTotal.add(addFpu);\\n        feesTotal = feesTotal.add(addFpu.mul(uniV2TotalStaked).div(10**18));\\n        emit feesIn(ethIn, fpuTotal, feesTotal);\\n    }\\n  }\\n\\n  // Emergency removal of staked uniV2Tokens\\n  function emergencyRemove(uint256 amount) public {\\n    require(userStake[msg.sender].uniV2Tokens \\u003e= amount);\\n    userStake[msg.sender].uniV2Tokens = userStake[msg.sender].uniV2Tokens.sub(amount);\\n    uniV2TotalStaked = uniV2TotalStaked.sub(amount);\\n    uniV2Token.transfer(msg.sender, amount);\\n  }\\n\\n  function getUserRewards(address account) public view returns(uint256) {\\n      return(fpuTotal.sub(userStake[account].fpuEntered)\\n                .mul(userStake[account].uniV2Tokens).div(10**18));\\n  }\\n\\n  // ---- Fns to add/remove SYN to stake via this contract ----\\n\\n  // Note `stakeSyn` and `unstakeSyn` can result in ETH rewards being given to this\\n  // contract as a result of the `synStaking.(un)stake` call. This is okay because calls\\n  // to `stake`, `unstake`, and `claimReward` in this contract call `updateTotals`,\\n  // which will calculate ethIn based off any new eth balance this contract has\\n  // before it performs anything important\\n\\n  // Stake SYN via this contract, giving all earned fees to this contract\\n  function stakeSyn(uint amount) external {\\n    uint synBalanceBefore = synToken.balanceOf(address(this));\\n    // Transfer the SYN into this contract first\\n    require(synToken.transferFrom(msg.sender, address(this), amount));\\n    // To cover the case of someone accidentally sending SYN directly to this contract.\\n    // It\\u0027ll get staked and owned by whoever calls stakeSyn first\\n    uint synAmountToStake = synToken.balanceOf(address(this)).sub(synBalanceBefore);\\n    // Now allow synStaking to transfer our synAmountToStake SYN into synStaking\\n    synToken.approve(address(synStaking), synAmountToStake);\\n    // Stake it\\n    synStaking.stake(synAmountToStake);\\n    // Record that sender has staked syn via this contract\\n    stakedSyn[msg.sender] = stakedSyn[msg.sender].add(synAmountToStake);\\n  }\\n\\n  // Unstake SYN that has been staked via this contract, giving all earned fees to this contract\\n  function unstakeSyn(uint amount) external {\\n    // Prevent someone from unstaking more SYN than they have staked via this contract\\n    require(amount \\u003c= stakedSyn[msg.sender]);\\n    // Unstake it\\n    synStaking.unstake(amount);\\n    // Record that sender has unstaked syn via this contract\\n    stakedSyn[msg.sender] = stakedSyn[msg.sender].sub(amount);\\n    // Transfer the syn that was unstaked from this contract to the sender\\n    require(synToken.transfer(msg.sender, amount));\\n  }\\n\\n  function emergencyRemoveSyn(uint amount) external {\\n    // Prevent someone from emergency removing more syn than they have staked via this contract\\n    require(amount \\u003c= stakedSyn[msg.sender]);\\n    // Record that sender has unstaked syn via this contract\\n    stakedSyn[msg.sender] = stakedSyn[msg.sender].sub(amount);\\n    // Emergency remove that syn\\n    synStaking.emergencyRemove(amount);\\n    // Transfer the syn that was removed from this contract to the sender\\n    require(synToken.transferFrom(address(this), msg.sender, amount));\\n  }\\n\\n  // ---- Owner only ----\\n\\n  function setSynStaking(address _synStaking) public onlyOwner() {\\n    address oldSynStaking = address(synStaking);\\n    synStaking = synStakingInterface(_synStaking);\\n    emit newSynStaking(\\n      oldSynStaking,\\n      _synStaking\\n    );\\n  }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fpuTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesTotal\",\"type\":\"uint256\"}],\"name\":\"feesIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSynStaking\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSynStaking\",\"type\":\"address\"}],\"name\":\"newSynStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"}],\"name\":\"userClaimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userStakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userUnStakeEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRemoveSyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fpuTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_synStaking\",\"type\":\"address\"}],\"name\":\"setSynStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedSyn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synStaking\",\"outputs\":[{\"internalType\":\"contract synStakingInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2TotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeSyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTotals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uniV2Tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpuEntered\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"uniV2Staking","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cdbb73e5ec884c884be9571753fa4932474f49e46bbbe6d2d5ab0a57c409f923"}]}