{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: contracts/helpers/interface/IWhitelist.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title IWhitelist\n * @notice Interface for Whitelist contract\n */\ncontract IWhitelist {\n    function isWhitelisted(address _account) external view returns (bool);\n    function toggleWhitelist(address _account, bool _toggled) external;\n}\n\n// File: contracts/role/interface/IBaseOperators.sol\n\n/**\n * @title IBaseOperators\n * @notice Interface for BaseOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ninterface IBaseOperators {\n    function isOperator(address _account) external view returns (bool);\n    function isAdmin(address _account) external view returns (bool);\n    function isSystem(address _account) external view returns (bool);\n    function isRelay(address _account) external view returns (bool);\n    function isMultisig(address _contract) external view returns (bool);\n\n    function confirmFor(address _address) external;\n\n    function addOperator(address _account) external;\n    function removeOperator(address _account) external;\n    function addAdmin(address _account) external;\n    function removeAdmin(address _account) external;\n    function addSystem(address _account) external;\n    function removeSystem(address _account) external;\n    function addRelay(address _account) external;\n    function removeRelay(address _account) external;\n\n    function addOperatorAndAdmin(address _account) external;\n    function removeOperatorAndAdmin(address _account) external;\n}\n\n// File: contracts/helpers/Initializable.sol\n\npragma solidity 0.5.12;\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Initializable: Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  function isInitialized() public view returns (bool) {\n    return initialized;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: contracts/role/base/Operatorable.sol\n\n/**\n * @title Operatorable\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\n *       contracts.\n */\n\npragma solidity 0.5.12;\n\n\n\ncontract Operatorable is Initializable {\n    IBaseOperators internal operatorsInst;\n    address private operatorsPending;\n\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\n\n    /**\n     * @dev Reverts if sender does not have operator role associated.\n     */\n    modifier onlyOperator() {\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin role associated.\n     */\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have system role associated.\n     */\n    modifier onlySystem() {\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have multisig privileges.\n     */\n    modifier onlyMultisig() {\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have admin or system role associated.\n     */\n    modifier onlyAdminOrSystem() {\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have operator or system role associated.\n     */\n    modifier onlyOperatorOrSystem() {\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the relay role associated.\n     */\n\tmodifier onlyRelay() {\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or operator role associated.\n     */\n\tmodifier onlyOperatorOrRelay() {\n        require(isOperator(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have relay or admin role associated.\n     */\n\tmodifier onlyAdminOrRelay() {\n        require(isAdmin(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the admin role nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\n     */\n\tmodifier onlyOperatorOrSystemOrRelay() {\n        require(isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender), \"Operatorable: caller does not have the operator role nor system nor relay\");\n        _;\n    }\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\n     *       confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function initialize(address _baseOperators) public initializer {\n        _setOperatorsContract(_baseOperators);\n    }\n\n    /**\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\n     *       broken and control of the contract can be lost in such case\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        operatorsPending = _baseOperators;\n        emit OperatorsContractPending(msg.sender, _baseOperators);\n    }\n\n    /**\n     * @dev The function should be called from new operators contract by admin to ensure that operatorsPending address\n     *       is the real contract address.\n     */\n    function confirmOperatorsContract() public {\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\n        _setOperatorsContract(operatorsPending);\n    }\n\n    /**\n     * @return The address of the BaseOperators contract.\n     */\n    function getOperatorsContract() public view returns(address) {\n        return address(operatorsInst);\n    }\n\n    /**\n     * @return The pending address of the BaseOperators contract.\n     */\n    function getOperatorsPending() public view returns(address) {\n        return operatorsPending;\n    }\n\n    /**\n     * @return If '_account' has operator privileges.\n     */\n    function isOperator(address _account) public view returns (bool) {\n        return operatorsInst.isOperator(_account);\n    }\n\n    /**\n     * @return If '_account' has admin privileges.\n     */\n    function isAdmin(address _account) public view returns (bool) {\n        return operatorsInst.isAdmin(_account);\n    }\n\n    /**\n     * @return If '_account' has system privileges.\n     */\n    function isSystem(address _account) public view returns (bool) {\n        return operatorsInst.isSystem(_account);\n    }\n\n    /**\n     * @return If '_account' has relay privileges.\n     */\n    function isRelay(address _account) public view returns (bool) {\n        return operatorsInst.isRelay(_account);\n    }\n\n    /**\n     * @return If '_contract' has multisig privileges.\n     */\n    function isMultisig(address _contract) public view returns (bool) {\n        return operatorsInst.isMultisig(_contract);\n    }\n\n    /**\n     * @return If '_account' has admin or system privileges.\n     */\n    function isAdminOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /**\n     * @return If '_account' has operator or system privileges.\n     */\n    function isOperatorOrSystem(address _account) public view returns (bool) {\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _setOperatorsContract(address _baseOperators) internal {\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\n        operatorsInst = IBaseOperators(_baseOperators);\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\n    }\n}\n\n// File: contracts/role/interface/IRaiseOperators.sol\n\n/**\n * @title IRaiseOperators\n * @notice Interface for RaiseOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract IRaiseOperators {\n    function isInvestor(address _account) external view returns (bool);\n    function isIssuer(address _account) external view returns (bool);\n    function addInvestor(address _account) external;\n    function removeInvestor(address _account) external;\n    function addIssuer(address _account) external;\n    function removeIssuer(address _account) external;\n}\n\n// File: contracts/role/interface/ITraderOperators.sol\n\n/**\n * @title ITraderOperators\n * @notice Interface for TraderOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract ITraderOperators {\n    function isTrader(address _account) external view returns (bool);\n    function addTrader(address _account) external;\n    function removeTrader(address _account) external;\n}\n\n// File: contracts/role/interface/IBlockerOperators.sol\n\n/**\n * @title IBlockerOperators\n * @notice Interface for BlockerOperators contract\n */\n\npragma solidity 0.5.12;\n\n\ncontract IBlockerOperators {\n    function isBlocker(address _account) external view returns (bool);\n    function addBlocker(address _account) external;\n    function removeBlocker(address _account) external;\n}\n\n// File: contracts/routers/OnboardRouter.sol\n\n/**\n * @title OnboardRouter\n * @author Connor Howe <Connor.howe@sygnum.com>\n * @dev OnboardRouter contract, that allows one individual transaction to onboard a particular subset of users onto\n *      the Sygnum platform, instead of having to initiate X amount of transactions.\n */\n\npragma solidity 0.5.12;\n\n\n\n\n\n\n\n\ncontract OnboardRouter is Operatorable {\n\n    IWhitelist internal whitelistInst;\n    IRaiseOperators internal raiseOperatorsInst;\n    ITraderOperators internal traderOperatorsInst;\n    IBlockerOperators internal blockerOperatorsInst;\n\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\n    event BaseOperatorsContractChanged(address indexed caller, address indexed baseOperatorsAddress);\n    event RaiseOperatorsContractChanged(address indexed caller, address indexed raiseOperatorsAddress);\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\n    event BlockerOperatorsContractChanged(address indexed caller, address indexed blockerOperatorsAddress);\n\n    /**\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\n     *       confirmation through the operators contract.\n     * @param _baseOperators BaseOperators contract address.\n     * @param _raiseOperators RaiseOperators contract address.\n     * @param _traderOperators TraderOperators contract address.\n     * @param _blockerOperators BlockerOperators contract address.\n     */\n    function initialize(address _whitelist, address _baseOperators, address _raiseOperators, address _traderOperators, address _blockerOperators) public initializer {\n        _setWhitelistContract(_whitelist);\n        _setBaseOperatorsContract(_baseOperators);\n        _setRaiseOperatorsContract(_raiseOperators);\n        _setTraderOperatorsContract(_traderOperators);\n        _setBlockerOperatorsContract(_blockerOperators);\n    }\n\n    /**\n     * @dev Admin can give '_account' address system privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given system privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function onboardSystem(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.addSystem(_account);\n    }\n\n    /**\n     * @dev Admin can revoke '_account' address system privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be revoked system privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function deboardSystem(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.removeSystem(_account);\n    }\n\n\n    /**\n     * @dev Admin can give '_account' address super admin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given super admin privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function onboardSuperAdmin(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.addOperatorAndAdmin(_account);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can revoke '_account' address super admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be revoked super admin privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function deboardSuperAdmin(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.removeOperatorAndAdmin(_account);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Operator or System can give '_account' address investor privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given investor privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function onboardInvestor(address _account, address _whitelist) public onlyOperatorOrSystem {\n        _toggleWhitelist(_account, _whitelist, true);\n        raiseOperatorsInst.addInvestor(_account);\n    }\n\n    /**\n     * @dev Operator or System can revoke '_account' address investor privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be revoked investor privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function deboardInvestor(address _account, address _whitelist) public onlyOperatorOrSystem {\n        _toggleWhitelist(_account, _whitelist, false);\n        raiseOperatorsInst.removeInvestor(_account);\n    }\n\n    /**\n     * @dev Admin can give '_account' address trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function onboardTrader(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can revoke '_account' address trader privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be revoked trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function deboardTrader(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Admin can give '_account' address blocker privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given blocker privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function onboardBlocker(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        blockerOperatorsInst.addBlocker(_account);\n    }\n\n    /**\n     * @dev Admin can revoke '_account' address blocker privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be revoked blocker privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function deboardBlocker(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        blockerOperatorsInst.removeBlocker(_account);\n    }\n\n    /**\n     * @dev Admin can change admin '_account' address to only trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeAdminToTrader(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.removeAdmin(_account);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change admin '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeAdminToSuperAdmin(address _account, address _whitelist) public onlyAdmin {\n        require(isAdmin(_account), \"OnboardRouter: selected account does not have admin privileges\");\n\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.addOperator(_account);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change operator '_account' address to trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeOperatorToTrader(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.removeOperator(_account);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change operator '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeOperatorToSuperAdmin(address _account, address _whitelist) public onlyAdmin {\n        require(isOperator(_account), \"OnboardRouter: selected account does not have operator privileges\");\n\n        _toggleWhitelist(_account, _whitelist, true);\n        operatorsInst.addAdmin(_account);\n        traderOperatorsInst.addTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change trader '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeTraderToAdmin(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.addAdmin(_account);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change trader '_account' address to operator privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeTraderToOperator(address _account, address _whitelist) public onlyAdmin {\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.addOperator(_account);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change superadmin '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeSuperAdminToAdmin(address _account, address _whitelist) public onlyAdmin {\n        require(isAdmin(_account), 'OnboardRouter: account is not admin');\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.removeOperator(_account);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Admin can change superadmin '_account' address to operator privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.\n     * @param _account address that should be given trader privileges.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeSuperAdminToOperator(address _account, address _whitelist) public onlyAdmin {\n        require(isAdmin(_account), 'OnboardRouter: account is not admin');\n        _toggleWhitelist(_account, _whitelist, false);\n        operatorsInst.removeAdmin(_account);\n        traderOperatorsInst.removeTrader(_account);\n    }\n\n    /**\n     * @dev Change address of Whitelist contract.\n     * @param _whitelist Whitelist contract address.\n     */\n    function changeWhitelistContract(address _whitelist) public onlyAdmin {\n        _setWhitelistContract(_whitelist);\n    }\n\n    /**\n     * @dev Change address of BaseOperators contract.\n     * @param _baseOperators BaseOperators contract address.\n     */\n    function changeBaseOperatorsContract(address _baseOperators) public onlyAdmin {\n        _setBaseOperatorsContract(_baseOperators);\n    }\n\n    /**\n     * @dev Change address of RaiseOperators contract.\n     * @param _raiseOperators RaiseOperators contract address.\n     */\n    function changeRaiseOperatorsContract(address _raiseOperators) public onlyAdmin {\n        _setRaiseOperatorsContract(_raiseOperators);\n    }\n\n    /**\n     * @dev Change address of TraderOperators contract.\n     * @param _traderOperators TraderOperators contract address.\n     */\n    function changeTraderOperatorsContract(address _traderOperators) public onlyAdmin {\n        _setTraderOperatorsContract(_traderOperators);\n    }\n\n    /**\n     * @dev Change address of BlockerOperators contract.\n     * @param _blockerOperators BlockerOperators contract address.\n     */\n    function changeBlockerOperatorsContract(address _blockerOperators) public onlyAdmin {\n        _setBlockerOperatorsContract(_blockerOperators);\n    }\n\n    /**\n     * @return Stored address of the Whitelist contract.\n     */\n    function getWhitelistContract() public view returns(address) {\n        return address(whitelistInst);\n    }\n\n    /**\n     * @return Stored address of the BaseOperators contract.\n     */\n    function getBaseOperatorsContract() public view returns(address) {\n        return address(operatorsInst);\n    }\n\n    /**\n     * @return Stored address of the RaiseOperators contract.\n     */\n    function getRaiseOperatorsContract() public view returns(address) {\n        return address(raiseOperatorsInst);\n    }\n\n    /**\n     * @return Stored address of the TraderOperators contract.\n     */\n    function getTraderOperatorsContract() public view returns(address) {\n        return address(traderOperatorsInst);\n    }\n\n    /**\n     * @return Stored address of the BlockerOperators contract.\n     */\n    function getBlockerOperatorsContract() public view returns(address) {\n        return address(blockerOperatorsInst);\n    }\n\n    /** INTERNAL FUNCTIONS */\n    function _toggleWhitelist(address _account, address _whitelist, bool _toggle) internal {\n        whitelistInst.toggleWhitelist(_account, _toggle);\n        if(_whitelist != address(0)){\n            _toggleSecondaryWhitelist(_account, _whitelist, _toggle); // non-default\n        }\n    }\n\n    function _toggleSecondaryWhitelist(address _account, address _whitelist, bool _toggle) internal {\n        IWhitelist(_whitelist).toggleWhitelist(_account, _toggle);\n    }\n\n    function _setWhitelistContract(address _whitelist) internal {\n        require(_whitelist != address(0), \"OnboardRouter: address of new whitelist contract cannot be zero\");\n        whitelistInst = IWhitelist(_whitelist);\n        emit WhitelistContractChanged(msg.sender, _whitelist);\n    }\n\n    function _setBaseOperatorsContract(address _baseOperators) internal {\n        require(_baseOperators != address(0), \"OnboardRouter: address of new baseOperators contract cannot be zero\");\n        operatorsInst = IBaseOperators(_baseOperators);\n        emit BaseOperatorsContractChanged(msg.sender, _baseOperators);\n    }\n\n    function _setRaiseOperatorsContract(address _raiseOperators) internal {\n        require(_raiseOperators != address(0), \"OnboardRouter: address of new raiseOperators contract cannot be zero\");\n        raiseOperatorsInst = IRaiseOperators(_raiseOperators);\n        emit RaiseOperatorsContractChanged(msg.sender, _raiseOperators);\n    }\n\n    function _setTraderOperatorsContract(address _traderOperators) internal {\n        require(_traderOperators != address(0), \"OnboardRouter: address of new traderOperators contract cannot be zero\");\n        traderOperatorsInst = ITraderOperators(_traderOperators);\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\n    }\n\n    function _setBlockerOperatorsContract(address _blockerOperators) internal {\n        require(_blockerOperators != address(0), \"OnboardRouter: address of new blockerOperators contract cannot be zero\");\n        blockerOperatorsInst = IBlockerOperators(_blockerOperators);\n        emit BlockerOperatorsContractChanged(msg.sender, _blockerOperators);\n    }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"BaseOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blockerOperatorsAddress\",\"type\":\"address\"}],\"name\":\"BlockerOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"raiseOperatorsAddress\",\"type\":\"address\"}],\"name\":\"RaiseOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"WhitelistContractChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdminToSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeAdminToTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"changeBaseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"changeBlockerOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeOperatorToSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeOperatorToTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"}],\"name\":\"changeRaiseOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeSuperAdminToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeSuperAdminToOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"changeTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeTraderToAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeTraderToOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"changeWhitelistContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardBlocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"deboardTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBaseOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockerOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRaiseOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelistContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_raiseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockerOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardBlocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardSuperAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardSystem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"onboardTrader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OnboardRouter","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}