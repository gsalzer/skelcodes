{"status":"1","message":"OK","result":[{"SourceCode":"/*  _______________________________________________________________\r\n                      PRESALE DETAILS |\r\n\r\n    1. Presale Start    : 1614171600 [FEB 24, 2021] [1 PM UTC]\r\n    2. Presale End      : 1614344400 [FEB 26, 2021] [1 PM UTC]  \r\n    3. Base Price       : 1 ETH = 1000 APEAPE                  \r\n    4. Max Purchase     : 3 ETH                                \r\n    5. HARD CAP         : 60 ETH                               \r\n    _______________________________________________________________\r\n                    | APE APE DETAILS |\r\n\r\n    1. Total Supply       : 100K                                |\r\n    2. APEAPE Unlock Time : 1614430800 [FEB 27, 2021] [1PM UTC] | *\r\n    3. Burn               : 1%                                  | \r\n    4. Total Supply       : 100K                                |\r\n    5. Last20 Tx Fee      : 1%                                  |\r\n    6. Reward Collector   : 3% from last 7 days token transfers | \r\n    _______________________________________________________________\r\n    \r\n    -Codezeros Developers\r\n    -https://www.codezeros.com/\r\n    _______________________________________________________________\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract BasicToken is IERC20, Context, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public _totalSupply;\r\n    mapping(address => uint256) balances_;\r\n    mapping(address => uint256) ethBalances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 public unlockDuration = 72 hours;                               // ----| Lock transfers for non-owner |------\r\n\r\n    uint256 public startTime = 1614171600;                                  // ------| Deploy Timestamp |--------\r\n    uint256 public rewardDispatchStartTime = startTime.add(unlockDuration); // ------| Start after 72 hours |--------\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balances_[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function checkInvestedETH(address who) public view returns (uint256) {\r\n        return ethBalances[who];\r\n    }\r\n}\r\n\r\nabstract contract StandardToken is BasicToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public lastTwentyTxReward = 0;               //----| Stores 1 % form last 20 transactions|-----\r\n    uint256 public tokensToBurn;                         //------| Burns 1 % token on each transfer |------\r\n    uint256 public StakingContractFee = 0;\r\n    uint256 public transferCounter = 0;\r\n\r\n    address public stakingContract;\r\n    address public rewardCollector;\r\n\r\n    uint256 public realStakingContractFee;               \r\n\r\n    function setupContract(address _stakingContract, address _rewardCollector) public onlyOwner {\r\n       \r\n        require(stakingContract == address(0),\"Staking Contract is already set\");\r\n        require(rewardCollector == address(0),\"Reward Collector Contract is already set\");\r\n\r\n        stakingContract = _stakingContract;\r\n        rewardCollector = _rewardCollector;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        \r\n        if (msg.sender == stakingContract ||  msg.sender == rewardCollector || msg.sender == owner()) {\r\n                                        \r\n            _transferSpecial(msg.sender, recipient, amount);\r\n\r\n        } else {\r\n\r\n            _transfer(msg.sender, recipient, amount);\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n\r\n        if (msg.sender == stakingContract ||  msg.sender == rewardCollector || msg.sender == owner()) {\r\n\r\n            _transferSpecial(sender, recipient, amount);\r\n\r\n        } else {\r\n          \r\n            _transfer(sender, recipient, amount);\r\n        }\r\n\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function findOnePercent(uint256 amount) internal pure returns (uint256) {\r\n        return amount.mul(10).div(1000);\r\n    }\r\n\r\n    function findThreePercent(uint256 amount) internal pure returns (uint256) {\r\n        return amount.mul(30).div(1000);\r\n    }\r\n\r\n    function findFivePercent(uint256 amount) internal pure returns (uint256) {\r\n        return amount.mul(50).div(1000);\r\n    }\r\n\r\n    function _transferSpecial(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            sender != address(0),\r\n            \"ERC20 Special: transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"ERC20 Special: transfer to the zero address\"\r\n        );\r\n\r\n        balances_[sender] = balances_[sender].sub(\r\n            amount,\r\n            \"ERC20 Special: transfer amount exceeds balance\"\r\n        );\r\n        balances_[recipient] = balances_[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(stakingContract != address(0), \"Staking contract is not set\");\r\n        require(rewardCollector != address(0), \"RewardCollector contract is not set\");\r\n\r\n        require(\r\n            block.timestamp >= startTime.add(unlockDuration), \"Tokens not unlocked yet\");\r\n\r\n\r\n        tokensToBurn = findOnePercent(amount);                               //---| 1% ===> Burn |-----------------\r\n        lastTwentyTxReward = lastTwentyTxReward + findOnePercent(amount);    //---| 1% ===> Last20Tx Collection|---\r\n        StakingContractFee = StakingContractFee + findThreePercent(amount);  //---| 3% ===> Reward Collector |-----\r\n\r\n        uint256 tokensToTransfer = amount.sub(findFivePercent(amount), \"overflow\");        //---| Net Amount Received |----------\r\n\r\n        _totalSupply = _totalSupply.sub(tokensToBurn);                       //---| Remove from Total Supply |-----\r\n\r\n        balances_[sender] = balances_[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        balances_[recipient] = balances_[recipient].add(tokensToTransfer);\r\n\r\n        transferCounter = transferCounter + 1;\r\n\r\n        if (transferCounter == 20) {\r\n            \r\n            balances_[sender] = balances_[sender].add(lastTwentyTxReward); //---| Rewards last 20 Transactions |-----\r\n            transferCounter = 0;\r\n\r\n            emit Transfer(address(0), sender, lastTwentyTxReward);\r\n            lastTwentyTxReward = 0;\r\n        }\r\n\r\n        if (block.timestamp > rewardDispatchStartTime.add(7 days)) {   //-|Transfer rewards to RewardCollector every 7 days |--\r\n            balances_[rewardCollector] = balances_[rewardCollector].add(\r\n                StakingContractFee\r\n            );\r\n\r\n            realStakingContractFee = StakingContractFee;\r\n            StakingContractFee = 0;\r\n            rewardDispatchStartTime = block.timestamp;\r\n\r\n            emit Transfer(\r\n                address(this),\r\n                rewardCollector,\r\n                realStakingContractFee\r\n            );\r\n        }\r\n\r\n        emit Transfer(sender, recipient, tokensToTransfer);\r\n        emit Transfer(sender, address(0), tokensToBurn);\r\n    }\r\n    \r\n}\r\n\r\ncontract Configurable {\r\n    uint256 public cap = 60000 * 10**18;                 //---------| Tokens for Presale |---------\r\n    uint256 public basePrice = 1000 * 10**18;            //-----| 1 ETH = 1000 Tokens |---------\r\n    uint256 public tokensSold;\r\n    uint256 public tokenReserve = 100000 * 10**18;       //-----------| Total Supply = 100 K |------\r\n    uint256 public remainingTokens;\r\n}\r\n\r\ncontract PreSaleToken is StandardToken, Configurable { \r\n    using SafeMath for uint256;\r\n    enum Phases {none, start, end}\r\n    Phases public currentPhase;\r\n\r\n    constructor() {\r\n       \r\n        currentPhase = Phases.none;\r\n        balances_[owner()] = balances_[owner()].add(tokenReserve);\r\n        _totalSupply = _totalSupply.add(tokenReserve);\r\n        remainingTokens = cap;\r\n        emit Transfer(address(this), owner(), tokenReserve);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(\r\n            currentPhase == Phases.start,\r\n            \"The presale has not started yet\"\r\n        );\r\n        require(remainingTokens > 0, \"Presale token limit reached\");\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(basePrice).div(1 ether);\r\n    \r\n        ethBalances[msg.sender] = ethBalances[msg.sender].add(weiAmount); // Track each user investments\r\n        ethBalances[address(this)] = ethBalances[address(this)].add(weiAmount); // Track this contract's funds\r\n\r\n        require(\r\n            ethBalances[msg.sender] <= 3e18,\r\n            \"You are exceeding max 3 ETH of purchase\"\r\n        );\r\n        require(\r\n            ethBalances[address(this)] <= 60e18,\r\n            \"Sorry! target amount of 60 ETH has been achieved\"\r\n        );\r\n\r\n        if (tokensSold.add(tokens) > cap) {\r\n            revert(\"Exceeding limit of presale tokens\");\r\n        }\r\n\r\n        tokensSold = tokensSold.add(tokens); // counting tokens sold\r\n        remainingTokens = cap.sub(tokensSold);\r\n\r\n        balances_[owner()] = balances_[owner()].sub(\r\n            tokens,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        balances_[msg.sender] = balances_[msg.sender].add(tokens);\r\n\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function startPresale() public onlyOwner {\r\n        require(currentPhase != Phases.end, \"The coin offering has ended\");\r\n        currentPhase = Phases.start;\r\n    }\r\n\r\n    function endPresale() public onlyOwner {\r\n        require(currentPhase != Phases.end, \"The presale has ended\");\r\n        currentPhase = Phases.end;\r\n    }\r\n\r\n}\r\n\r\ncontract Presale is PreSaleToken {\r\n    string public name = \"ApeApe Finance\";\r\n    string public symbol = \"APEAPE\";\r\n    uint32 public decimals = 18;\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StakingContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"checkInvestedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum PreSaleToken.Phases\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTwentyTxReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realStakingContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDispatchStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardCollector\",\"type\":\"address\"}],\"name\":\"setupContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Presale","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17a8f1c7f3d227b185ead2d8a7b7c6e16933b39233c037c3c142ee3e275ade36"}]}