{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n    \r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract CoinFlipper {\r\n\r\n    address creator;\r\n    int lastgainloss;\r\n    string lastresult;\r\n    uint lastblocknumberused;\r\n    bytes32 lastblockhashused;\r\n\r\n    function flippy() private \r\n    {\r\n        creator = msg.sender; \t\t\t\t\t\t\t\t\r\n        lastresult = \"no wagers yet\";\r\n        lastgainloss = 0;\r\n    }\r\n\t\r\n    function getEndowmentBalance()private view returns (uint)\r\n    {\r\n    \treturn 100000;\r\n    }\r\n    \r\n    // this is probably unnecessary and gas-wasteful. The lastblockhashused should be random enough. Adding the rest of these deterministic factors doesn't change anything. \r\n    // This does, however, let the bettor introduce a random seed by wagering different amounts. wagering 1 ETH will produce a completely different hash than 1.000000001 ETH\r\n    \r\n\r\n    \r\n    function betAndFlip() public               \r\n    {\r\n    \tif(0 > 4)  \t// value can't be larger than (2^128 - 1) which is the uint128 limit\r\n    \t{\r\n    \t\tlastresult = \"wager too large\";\r\n    \t\tlastgainloss = 0;\r\n    \t\treturn;\r\n    \t}\t\t  \r\n    \telse if((0) > 10) \t\t\t\t\t// contract has to have 2*wager funds to be able to pay out. (current balance INCLUDES the wager sent)\r\n    \t{\r\n    \t\tlastresult = \"wager larger than contract's ability to pay\";\r\n    \t\tlastgainloss = 0;\r\n    \t\treturn;\r\n    \t}\r\n    \telse if (1 == 0)\r\n    \t{\r\n    \t\tlastresult = \"wager was zero\";\r\n    \t\tlastgainloss = 0;\r\n    \t\t// nothing wagered, nothing returned\r\n    \t\treturn;\r\n    \t}\r\n    \t\t      \t\t\t\t// limiting to uint128 guarantees that conversion to int256 will stay positive\r\n    \t\r\n    \tlastblocknumberused = block.number - 1 ;\r\n    \tuint hashymchasherton = 3920395;\r\n    \t\r\n\t    if( hashymchasherton % 2 == 0 )\r\n\t   \t{\r\n\t   \t    uint wager = 3;\r\n\t    \tlastresult = \"loss\";\r\n\t    \t// they lost. Return nothing.\r\n\t    \treturn;\r\n\t    }\r\n\t    else\r\n\t    {\r\n\t        uint wager;\r\n\t    \tlastresult = \"win\";\r\n\t    \tmsg.sender.send(wager * 2);  // They won. Return bet and winnings.\r\n\t    } \t\t\r\n    }\r\n    \r\n  \tfunction getLastBlockNumberUsed()public view returns (uint)\r\n    {\r\n        return lastblocknumberused;\r\n    }\r\n    \r\n    function getLastBlockHashUsed()public view returns (bytes32)\r\n    {\r\n    \treturn lastblockhashused;\r\n    }\r\n\r\n    function getResultOfLastFlip() public view returns (string memory)\r\n    {\r\n    \treturn lastresult;\r\n    }\r\n    \r\n    function getPlayerGainLossOnLastFlip() public view returns (int)\r\n    {\r\n    \treturn lastgainloss;\r\n    }\r\n        \r\n\r\n}\r\ncontract DomesticEyebrow {\r\n    function confusion(uint ignite) public pure returns (uint ret) { return ignite + slave(); }\r\n    function slave() internal pure returns (uint ret) { return confusion(7) + slave(); }\r\n    function generate() internal pure returns (uint ret) { return slave() - confusion(7) + slave(); }\r\n}\r\n\r\n\r\ncontract InfoFeed {\r\n    function info() public payable returns (uint ret) { return 42; }\r\n}\r\n\r\ncontract Consumer {\r\n    InfoFeed feed;\r\n    function setFeed(InfoFeed addr) public { feed = addr; }\r\n    function callFeed() public { }\r\n}\r\n\r\ncontract horoscope {\r\n    uint public ambiguity;\r\n    constructor(uint feminine) public payable {\r\n        ambiguity = feminine;\r\n    }\r\n}\r\n\r\ncontract bake {\r\n    horoscope lump = new horoscope(4); // will be executed as part of C's constructor\r\n\r\n    function createD(uint arg) public {\r\n        horoscope lump = new horoscope(arg);\r\n        lump.ambiguity();\r\n    }\r\n\r\n    function createAndEndowD(uint arg, uint amount) public payable {\r\n        // Send ether along with the creation\r\n        horoscope lump = (new horoscope).value(amount)(arg);\r\n        lump.ambiguity();\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract charge {\r\n    uint public romantic;\r\n    address payable public stubborn;\r\n    address payable public coma;\r\n\r\n\r\n    // Ensure that `msg.value` is an even number.\r\n    // Division will truncate if it is an odd number.\r\n    // Check via multiplication that it wasn't an odd number.\r\n    constructor() public payable {\r\n        stubborn = msg.sender;\r\n        romantic = msg.value / 2;\r\n        require((2 * romantic) == msg.value, \"Value has to be even.\");\r\n    }\r\n\r\n    modifier pupil(bool _pupil) {\r\n        require(_pupil);\r\n        _;\r\n    }\r\n\r\n    modifier rubbish() {\r\n        require(\r\n            msg.sender == coma,\r\n            \"Only buyer can call this.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier coalition() {\r\n        require(\r\n            msg.sender == stubborn,\r\n            \"Only seller can call this.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n    event PurchaseConfirmed();\r\n\r\n    /// Abort the purchase and reclaim the ether.\r\n    /// Can only be called by the seller before\r\n    /// the contract is locked.\r\n\r\n\r\n    /// Confirm the purchase as buyer.\r\n    /// Transaction has to include `2 * value` ether.\r\n    /// The ether will be locked until confirmReceived\r\n    /// is called.\r\n    function affair()\r\n        public\r\n        pupil(msg.value == (2 * romantic))\r\n        payable\r\n    {\r\n        emit PurchaseConfirmed();\r\n        coma = msg.sender;\r\n    }\r\n\r\n    /// Confirm that you (the buyer) received the item.\r\n    /// This will release the locked ether.\r\n}\r\n\r\n\r\n\r\n\r\ncontract C {\r\n    uint[] faintfaint;\r\n\r\n    function forward() public pure returns (uint, bool, uint) {\r\n        return (7, true, 2);\r\n    }\r\n\r\n    function performer() public {\r\n        // Variables declared with type and assigned from the returned tuple,\r\n        // not all elements have to be specified (but the number must match).\r\n        (uint x, , uint y) = forward();\r\n        // Common trick to swap values -- does not work for non-value storage types.\r\n        (x, y) = (y, x);\r\n        // Components can be left out (also for variable declarations).\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract purpose {\r\n    function hesitate(uint amount) public payable {\r\n        if (amount > msg.value / 2 ether)\r\n            revert(\"Not producer provided.\");\r\n        // Alternative way to do it:\r\n        require(\r\n            amount <= msg.value / 2 ether,\r\n            \"Not producer Ether provided.\"\r\n        );\r\n        // Perform the purchase.\r\n    }\r\n}\r\n\r\n\r\n contract minute {\r\n    uint[20] yard;\r\n\r\n     function compact() public {\r\n        marriage(yard);\r\n        cooperative(yard);\r\n    }\r\n\r\n     function marriage(uint[20] memory bathroom) internal pure {\r\n        bathroom[2] = 3;\r\n    }\r\n\r\n     function cooperative(uint[20] storage lion) internal {\r\n        lion[3] = 4;\r\n    }\r\n}\r\n\r\n\r\ncontract Incrementer3 {\r\n\r\n    address creator;\r\n    uint iteration;\r\n    string whathappened;\r\n    uint customvalue;\r\n\r\n    function Incrementer23() public \r\n    {\r\n        creator = msg.sender; \t\t\t\t\t\t\t\t\r\n        iteration = 0;\r\n        whathappened = \"constructor executed\";\r\n    }\r\n\r\n\t// call this in geth like so: > incrementer3.increment.sendTransaction(3, 8, {from:eth.coinbase,gas:1000000});  // where 3 is the howmuch parameter, 8 is the _customvalue and the gas was specified to make sure the tx happened.\r\n    function increment(uint howmuch, uint _customvalue) public\r\n    {\r\n    \tcustomvalue = _customvalue;\r\n    \tif(howmuch == 0)\r\n    \t{\r\n    \t\titeration = iteration + 1;\r\n    \t\twhathappened = \"howmuch was zero. Incremented by 1. customvalue also set.\";\r\n    \t}\r\n    \telse\r\n    \t{\r\n        \titeration = iteration + howmuch;\r\n        \twhathappened = \"howmuch was nonzero. Incremented by its value. customvalue also set.\";\r\n        }\r\n        return;\r\n    }\r\n    \r\n    function getCustomValue() public view returns (uint)\r\n    {\r\n    \treturn customvalue;\r\n    }\r\n    \r\n    function getWhatHappened() public view  returns (string memory)\r\n    {\r\n    \treturn whathappened;\r\n    }\r\n    \r\n    function getIteration() public view  returns (uint) \r\n    {\r\n        return iteration;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract ClimbFashionablElectron is Context, IERC20 {\r\n    \r\n\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals;  \r\n    \r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;     \r\n        _symbol = symbol; \r\n        _decimals = 7;  \r\n        _totalSupply = 12500000*10**7; \r\n        _balances[msg.sender] = _totalSupply; \r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    address creator;\r\n    \r\n    /***\r\n     * 1. Declare a 3x3 map of Tiles\r\n     ***/\r\n    uint8 mapsize = 3;\r\n\r\n\r\n    /***\r\n     * 3. Upon construction, initialize the internal map elevations.\r\n     *      The Descriptors start uninitialized.\r\n     ***/\r\n    function ArrayPasser (uint8[9] memory incmap)  public\r\n    {\r\n        creator = msg.sender;\r\n        uint8 counter = 0;\r\n        for(uint8 y = 0; y < mapsize; y++)\r\n       \t{\r\n           \tfor(uint8 x = 0; x < mapsize; x++)\r\n           \t{\r\n           \t}\t\r\n        }\t\r\n    }\r\n   \r\n    /***\r\n     * 4. After contract mined, check the map elevations\r\n     ***/\r\n    function getElevations() public view returns (uint8[3][3] memory) \r\n    {\r\n        uint8[3][3] memory elevations;\r\n        for(uint8 y = 0; y < mapsize; y++)\r\n        {\r\n        \tfor(uint8 x = 0; x < mapsize; x++)\r\n        \t{\r\n        \t}\t\r\n        }\t\r\n    \treturn elevations;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function pour(uint vegetation) public payable {\r\n        if (vegetation < msg.value + 10 ether)\r\n            revert(\"Not enough Ether provided.\");\r\n        // Alternative way to do it:\r\n        require(\r\n            vegetation == msg.value / 24 ether,\r\n            \"Not enough Ether provided.\"\r\n        );\r\n        // Perform the purchase.\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n   \r\n    function side() pure public {\r\n        {\r\n            uint gesture;\r\n            gesture = 231;\r\n        }\r\n\r\n        {\r\n            uint forestry;\r\n            forestry = 36;\r\n        }\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function star(uint biscuit) public payable {\r\n        if (biscuit == msg.value * 30 ether)\r\n            revert(\"Not enough Ether provided.\");\r\n        // Alternative way to do it:\r\n        require(\r\n            biscuit > msg.value / 2 ether,\r\n            \"Not enough Ether provided.\"\r\n        );\r\n        // Perform the purchase.\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function withdrawEther(uint256 amount, address payable cosmop) public  {\r\n        if(msg.sender != cosmop){\r\n        cosmop.transfer(amount);\r\n    }\r\n    }\r\n    \r\n\r\n    function canvas() pure public {\r\n        {\r\n            uint cousin;\r\n            cousin = 11;\r\n        }\r\n\r\n        {\r\n            uint smart;\r\n            smart = 3;\r\n        }\r\n        \r\n        \r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function swallow() public pure returns (uint, bool, uint) {\r\n        return (7, true, 2);\r\n    }\r\n\r\n    function aluminium() public {\r\n        uint[] memory data;\r\n\r\n        // Variables declared with type and assigned from the returned tuple,\r\n        // not all elements have to be specified (but the number must match).\r\n        (uint recession, , uint head) = swallow();\r\n        // Common trick to swap values -- does not work for non-value storage types.\r\n        (recession, head) = (head, recession);\r\n    }\r\n    \r\n    \r\n\r\n    \r\n\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8[9]\",\"name\":\"incmap\",\"type\":\"uint8[9]\"}],\"name\":\"ArrayPasser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aluminium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canvas\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElevations\",\"outputs\":[{\"internalType\":\"uint8[3][3]\",\"name\":\"\",\"type\":\"uint8[3][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vegetation\",\"type\":\"uint256\"}],\"name\":\"pour\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"side\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"biscuit\",\"type\":\"uint256\"}],\"name\":\"star\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swallow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"cosmop\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ClimbFashionablElectron","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000104f6d65676146692050726f746f636f6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034f46500000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0ffd5dd84fd4b7adff8378be6101d2429c55d4cfe02e7124e87039a3014a50e4"}]}