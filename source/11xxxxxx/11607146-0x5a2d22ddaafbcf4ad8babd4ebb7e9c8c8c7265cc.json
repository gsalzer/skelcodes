{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\IReferrerBook.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferrerBook {\r\n    function getReferrer(address addr) external view returns(address);\r\n    function getLevelDiffedReferrers(address addr) external view returns (address[2] memory);\r\n}\r\n\r\n// File: contracts\\ReferrerBook.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract ReferrerBook is IReferrerBook, Ownable {\r\n    address public root;\r\n\r\n    struct UserInfo {\r\n        address referrer;\r\n        uint256 level;\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n\r\n    address public levelSetter;\r\n\r\n    address constant ZERO_ADDRESS = address(0);\r\n    uint256 public constant MAX_LEVEL = 2;\r\n\r\n    event ReferrerSetted(address indexed user, address indexed referrer, uint256 timestampSec);\r\n    event UserLevelSetted(address indexed user, uint256 level, uint256 timestampSec);\r\n\r\n    modifier onlyLevelSetter() {\r\n        require(msg.sender == levelSetter, 'Only node setter');\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        levelSetter = msg.sender;\r\n\r\n        root = msg.sender;\r\n        users[root] = UserInfo(address(this), 0);\r\n        emit ReferrerSetted(root, address(this), now);\r\n    }\r\n\r\n    function setReferrer(address addr) external {\r\n        require(addr != ZERO_ADDRESS, 'referrer == 0');\r\n        require(users[addr].referrer != ZERO_ADDRESS, 'referrer not in the list');\r\n        require(users[msg.sender].referrer == ZERO_ADDRESS, 'referrer already exists');\r\n        require(addr != msg.sender, 'referrer cannot be one self');\r\n\r\n        users[msg.sender] = UserInfo(addr, 0);\r\n\r\n        emit ReferrerSetted(msg.sender, addr, now);\r\n    }\r\n\r\n    function getReferrer(address addr) external view override returns (address) {\r\n        return users[addr].referrer;\r\n    }\r\n\r\n    function setLevelSetter(address addr) external onlyOwner {\r\n        levelSetter = addr;\r\n    }\r\n\r\n    function setUserLevel(address addr, uint256 level) external onlyLevelSetter {\r\n        require(addr != ZERO_ADDRESS, 'addr == 0');\r\n        require(users[addr].referrer != ZERO_ADDRESS, 'addr not in the list');\r\n        require(level <= MAX_LEVEL, 'level exceed');\r\n\r\n        users[addr].level = level;\r\n\r\n        emit UserLevelSetted(addr, level, now);\r\n    }\r\n\r\n    function getLevel(address addr) external view returns (uint256) {\r\n        return users[addr].level;\r\n    }\r\n\r\n    function getLevelDiffedReferrers(address addr) external view override returns (address[MAX_LEVEL] memory refs) {\r\n        UserInfo memory info = users[addr];\r\n        uint256 maxLevel = info.level;\r\n        address ref = info.referrer;\r\n\r\n        uint256 loopCount = 0; //avoiding out of gas\r\n        while (maxLevel < MAX_LEVEL && ref != ZERO_ADDRESS && loopCount++ < 100) {\r\n            info = users[ref];\r\n            uint256 level = info.level;\r\n            if (level > maxLevel) {\r\n                refs[level - 1] = ref;\r\n                maxLevel = level;\r\n            }\r\n            ref = info.referrer;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"}],\"name\":\"ReferrerSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampSec\",\"type\":\"uint256\"}],\"name\":\"UserLevelSetted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLevelDiffedReferrers\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"refs\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLevelSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ReferrerBook","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68eca155a85eed634ea3ab7737ff0a25f85cd476fdc9f8077b3f8b6f621da849"}]}