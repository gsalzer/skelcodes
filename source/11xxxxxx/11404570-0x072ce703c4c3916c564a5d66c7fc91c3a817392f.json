{"status":"1","message":"OK","result":[{"SourceCode":"{\"Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\"},\"FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity \\u003e=0.4.0;\\n\\nimport \\u0027./FullMath.sol\\u0027;\\nimport \\u0027./Babylonian.sol\\u0027;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) \\u003c\\u003c RESOLUTION;\\n    uint256 private constant Q224 = Q112 \\u003c\\u003c RESOLUTION;\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) \\u003c\\u003c RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) \\u003c\\u003c RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x \\u003e\\u003e RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x \\u003e\\u003e RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\u0027FixedPoint: MUL_OVERFLOW\\u0027);\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint144 z = decode144(mul(self, uint256(y \\u003c 0 ? -y : y)));\\n        return y \\u003c 0 ? -int256(z) : z;\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x \\u003e\\u003e RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x \\u0026 LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x \\u003e\\u003e RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x \\u0026 LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper \\u003c= uint112(-1), \\u0027FixedPoint: MULUQ_OVERFLOW_UPPER\\u0027);\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper \\u003c\\u003c RESOLUTION) + uppers_lowero + uppero_lowers + (lower \\u003e\\u003e RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum \\u003c= uint224(-1), \\u0027FixedPoint: MULUQ_OVERFLOW_SUM\\u0027);\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x \\u003e 0, \\u0027FixedPoint: DIV_BY_ZERO_DIVUQ\\u0027);\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x \\u003c= uint144(-1)) {\\n            uint256 value = (uint256(self._x) \\u003c\\u003c RESOLUTION) / other._x;\\n            require(value \\u003c= uint224(-1), \\u0027FixedPoint: DIVUQ_OVERFLOW\\u0027);\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result \\u003c= uint224(-1), \\u0027FixedPoint: DIVUQ_OVERFLOW\\u0027);\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // lossy\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator \\u003e 0, \\u0027FixedPoint: DIV_BY_ZERO_FRACTION\\u0027);\\n        return uq112x112((uint224(numerator) \\u003c\\u003c RESOLUTION) / denominator);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x \\u003e 1, \\u0027FixedPoint: DIV_BY_ZERO_RECIPROCAL_OR_OVERFLOW\\u0027);\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy to 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) \\u003c\\u003c 32) \\u003c\\u003c 40));\\n    }\\n}\\n\"},\"FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity \\u003e=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm \\u003c l) h -= 1;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 z\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        require(h \\u003c z);\\n        uint256 mm = mulmod(x, y, z);\\n        if (mm \\u003e l) h -= 1;\\n        l -= mm;\\n        uint256 pow2 = z \\u0026 -z;\\n        z /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        r *= 2 - z * r;\\n        return l * r;\\n    }\\n}\\n\"},\"IChainLink.sol\":{\"content\":\"pragma solidity \\u003e=0.6.0;\\n\\ninterface IChainLinkInterface {\\n\\n    function latestAnswer() external view returns (int256);\\n    function decimals() external view returns (uint8);\\n\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.6.6;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"},\"ITokenOracleDemo.sol\":{\"content\":\"pragma solidity ^0.6.6;\\n\\ninterface ITokenOracleDemo {\\n\\n    event UpdatePairCount(uint32 blockTimestamp, uint oldLength, uint newLength, uint count);\\n    event UpdatePairPriceLatest(address indexed pair, uint token0Price, uint token1Price, uint32 blockTimestamp);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function getPairInfoLength() external view returns (uint);\\n    function updatePairs() external;\\n    function updatePairPriceAll() external;\\n    function updatePairPriceSingle(address pair) external returns (bool);\\n    function getPairToken(uint index) external view returns (address pair, address token0, address token1);\\n    function getPairTokenDecimals(uint index) external view returns (uint8 token0Decimals, uint8 token1Decimals);\\n    function getPairTokenPriceCumulativeLast(uint index) external view returns (uint price0CumulativeLast, uint price1CumulativeLast);\\n    function getPairPrice(address token0, address token1) external view returns (uint);\\n    function getPairPriceByIndex(uint index) external view returns (address pair, string memory token0Symbol, string memory token1Symbol, uint token0Price, uint token1Price, uint blockTimestamp);\\n    function getPairPriceBySymbol(string calldata token0, string calldata token1) external view returns (address pair, uint token0Price, uint token1Price, uint blockTimestamp);\\n    function getPairPriceByAddress(address pair) external view returns (string memory token0Symbol, string memory token1Symbol, uint token0Price, uint token1Price, uint blockTimestamp);\\n    function getPairUpdatePriceTime(address token0, address token1) external view returns (uint);\\n\\n    function getTokenLength() external view returns (uint);\\n    function getTokenPriceUSD(address) external view returns (uint);\\n    function getTokenPriceByIndex(uint index) external view returns (address token, string memory symbol, uint price, uint blockTimestamp);\\n    function getTokenPriceByAddress(address token) external view returns (string memory symbol, uint price, uint blockTimestamp);\\n    function getTokenPriceBySymbol(string calldata symbol) external view returns (address token, uint price, uint blockTimestamp);    \\n    function getTokenPriceUpdateTime(address) external view returns (uint);\\n\\n}\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.6;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"TokenOracleDemo.sol\":{\"content\":\"pragma solidity ^0.6.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IChainLink.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\nimport \\\"./UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./UniswapV2Library.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ITokenOracleDemo.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract TokenOracleDemo is ITokenOracleDemo {\\n    using SafeMath for uint;\\n    using FixedPoint for *;\\n\\n    //  token的价格的小数位是10位\\n    uint8 public override constant decimals = 10;\\n\\n    //  更新pair时，每次最多更新30个，处理速度慢\\n    uint8 public constant maxUpdatePairCount = 10;\\n\\n    //  从ChainLink里获取ETH-USD的价格，小数位是8位\\n    IChainLinkInterface public constant ChainLinkETHUSD = IChainLinkInterface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n    \\n    //  uniswapV2Factory合约的主链地址\\n    IUniswapV2Factory public constant uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n    \\n    //  WETH的主链合约地址\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    //  交易对的信息\\n    //  没有保存token的name，\\n    //  原因：如果保存了token的name、symbol，那么结构里会有4个string，会报错：stack too deep等\\n    //  下一版再优化，token的信息单独作为一个struct，交易对struct里包含2个token的信息\\n    struct PairInfo {\\n        IUniswapV2Pair pair;\\n        address token0;\\n        address token1;\\n        string token0Symbol;\\n        string token1Symbol;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n        uint price0CumulativeLast;\\n        uint price1CumulativeLast;\\n        uint32 blockTimestampLast;\\n        uint token0Price;\\n        uint token1Price;\\n    }\\n    PairInfo[] public pairInfo;\\n\\n    //  token价格的数据\\n    struct tokenPrice {\\n        address token;\\n        string symbol;\\n        uint price;\\n        uint blockTimestamp;\\n    }\\n    tokenPrice[] public tokenPriceData;\\n    mapping (address =\\u003e uint) public tokenPriceMap;\\n\\n    constructor() public {\\n        //  添加ETH的价格数据\\n        tokenPrice storage price = tokenPriceData.push();\\n        price.token = WETH;\\n        price.symbol = \\\"WETH\\\";\\n        price.price = uint(ChainLinkETHUSD.latestAnswer()).mul(uint(10)**decimals).div(uint(10)**ChainLinkETHUSD.decimals());\\n        price.blockTimestamp = block.timestamp;\\n        tokenPriceMap[WETH] = 0;\\n\\n        //  解析uniswap交易对，默认先解析10个\\n        for(uint i = 0; i \\u003c 10; i++){\\n            IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Factory.allPairs(i));\\n            PairInfo storage _pairInfo = pairInfo.push();\\n            _pairInfo.pair = pair;\\n            _pairInfo.token0 = pair.token0();\\n            _pairInfo.token1 = pair.token1();\\n            _pairInfo.token0Symbol = IERC20(pair.token0()).symbol();\\n            _pairInfo.token1Symbol = IERC20(pair.token1()).symbol();\\n            _pairInfo.token0Decimals = IERC20(pair.token0()).decimals();\\n            _pairInfo.token1Decimals = IERC20(pair.token1()).decimals();\\n            _pairInfo.price0CumulativeLast = pair.price0CumulativeLast();\\n            _pairInfo.price1CumulativeLast = pair.price1CumulativeLast();\\n            uint112 reserve0;\\n            uint112 reserve1;\\n            (reserve0, reserve1, _pairInfo.blockTimestampLast) = pair.getReserves();\\n        }\\n    }\\n\\n    //  获取交易对的数量\\n    function getPairInfoLength() external override view returns (uint) {\\n        return pairInfo.length;\\n    }\\n\\n    //  检查并更新新的交易队，每次最多更新30个，速度慢，\\n    //  外部调用函数需要多次调用这个函数，完成交易对的更新\\n    function updatePairs() external override {\\n        uint oldLength = pairInfo.length;\\n        uint newLength = uniswapV2Factory.allPairsLength();\\n        if (oldLength == newLength)\\n            return;\\n\\n        uint count = newLength.sub(oldLength) \\u003e maxUpdatePairCount ? maxUpdatePairCount : newLength.sub(oldLength);\\n        for(uint i = 0; i \\u003c count; i++){\\n            IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Factory.allPairs(oldLength + i));\\n            PairInfo storage _pairInfo = pairInfo.push();\\n            _pairInfo.pair = pair;\\n            _pairInfo.token0 = pair.token0();\\n            _pairInfo.token1 = pair.token1();\\n            _pairInfo.token0Symbol = IERC20(pair.token0()).symbol();\\n            _pairInfo.token1Symbol = IERC20(pair.token1()).symbol();\\n            _pairInfo.token0Decimals = IERC20(pair.token0()).decimals();\\n            _pairInfo.token1Decimals = IERC20(pair.token1()).decimals();\\n            _pairInfo.price0CumulativeLast = pair.price0CumulativeLast();\\n            _pairInfo.price1CumulativeLast = pair.price1CumulativeLast();\\n            uint112 reserve0;\\n            uint112 reserve1;\\n            (reserve0, reserve1, _pairInfo.blockTimestampLast) = pair.getReserves();\\n        }\\n\\n        emit UpdatePairCount(UniswapV2OracleLibrary.currentBlockTimestamp(), oldLength, newLength, count);\\n    }\\n\\n    //  更新所有的交易对的价格\\n    function updatePairPriceAll () external override {\\n        for(uint i = 0; i \\u003c pairInfo.length; i++){\\n            updatePairPriceLatest(address(pairInfo[i].pair), i);\\n        }\\n        updateTokenPriceUSD();\\n    }\\n\\n    //  更新单个交易对的token价格数据\\n    function updatePairPriceSingle(address pair) external override returns (bool) {\\n\\n        bool bUpdate = false;\\n        for(uint i = 0; i \\u003c pairInfo.length; i++){\\n            if (address(pairInfo[i].pair) == pair) {\\n                bUpdate = updatePairPriceLatest(pair, i);\\n                updateTokenPriceUSD();\\n                break;\\n            }\\n        }\\n        return bUpdate;\\n    }\\n\\n    //  获取pair的两个token的地址\\n    function getPairToken(uint index) external override view returns (address pair, address token0, address token1) {\\n        require(index \\u003c pairInfo.length, \\\"TokenOracle: index is out of range\\\");\\n        return (address(pairInfo[index].pair), pairInfo[index].token0, pairInfo[index].token1);\\n    }\\n\\n    //  获取pair的两个token的小数位\\n    function getPairTokenDecimals(uint index) external override view returns (uint8 token0Decimals, uint8 token1Decimals) {\\n        require(index \\u003c pairInfo.length, \\\"TokenOracle: index is out of range\\\");\\n        return (pairInfo[index].token0Decimals, pairInfo[index].token1Decimals);\\n    }\\n\\n    //  获取交易对的历史累计价格\\n    function getPairTokenPriceCumulativeLast(uint index) external override view returns (uint price0CumulativeLast, uint price1CumulativeLast) {\\n        require(index \\u003c pairInfo.length, \\\"TokenOracle: index is out of range\\\");\\n        return (pairInfo[index].price0CumulativeLast, pairInfo[index].price1CumulativeLast);\\n    }\\n\\n    //  获取交易对的价格，通过2个token地址\\n    function getPairPrice(address token0, address token1) external override view returns (uint) {\\n        for(uint i = 0; i \\u003c pairInfo.length; i++) {\\n            if((pairInfo[i].token0 == token0) \\u0026\\u0026 (pairInfo[i].token1 == token1)){\\n                return pairInfo[i].token0Price;\\n            }\\n            if((pairInfo[i].token0 == token1) \\u0026\\u0026 (pairInfo[i].token1 == token0)){\\n                return pairInfo[i].token1Price;\\n            }\\n        }           \\n    }\\n\\n    //  获取pair的两个token的兑换比例，10位小数位，按数组索引查找\\n    function getPairPriceByIndex(uint index) external override view returns (address pair, string memory token0Symbol, string memory token1Symbol, uint token0Price, uint token1Price, uint blockTimestamp) {\\n        require(index \\u003c pairInfo.length, \\\"TokenOracle: index is out of range\\\");\\n        return (address(pairInfo[index].pair), pairInfo[index].token0Symbol, pairInfo[index].token1Symbol, pairInfo[index].token0Price, pairInfo[index].token1Price, pairInfo[index].blockTimestampLast);\\n    }\\n\\n    //  按交易对的token的symbol查找\\n    function getPairPriceBySymbol(string calldata token0Symbol, string calldata token1Symbol) external override view returns (address pair, uint token0Price, uint token1Price, uint blockTimestamp) {\\n        for (uint i = 0; i \\u003c pairInfo.length; i++) {\\n            if ((keccak256(abi.encodePacked(pairInfo[i].token0Symbol)) == keccak256(abi.encodePacked(token0Symbol))) \\u0026\\u0026\\n                (keccak256(abi.encodePacked(pairInfo[i].token1Symbol)) == keccak256(abi.encodePacked(token1Symbol)))) {\\n                    return (address(pairInfo[i].pair), pairInfo[i].token0Price, pairInfo[i].token1Price, pairInfo[i].blockTimestampLast);\\n            }\\n        }        \\n    }\\n\\n    //  按pair地址查找\\n    function getPairPriceByAddress(address pair) external override view returns (string memory token0Symbol, string memory token1Symbol, uint token0Price, uint token1Price, uint blockTimestamp) {\\n        for (uint i = 0; i \\u003c pairInfo.length; i++) {\\n            if (address(pairInfo[i].pair) == pair) {\\n                return (pairInfo[i].token0Symbol, pairInfo[i].token1Symbol, pairInfo[i].token0Price, pairInfo[i].token1Price, pairInfo[i].blockTimestampLast);\\n            } \\n        }        \\n    }\\n\\n    //  获取交易对的数据更新时间\\n    function getPairUpdatePriceTime(address token0, address token1) external override view returns (uint){\\n        for(uint i = 0; i \\u003c pairInfo.length; i++) {\\n            if(((pairInfo[i].token0 == token0) \\u0026\\u0026 (pairInfo[i].token1 == token1)) ||\\n                ((pairInfo[i].token0 == token1) \\u0026\\u0026 (pairInfo[i].token1 == token0))){\\n                return pairInfo[i].blockTimestampLast;\\n            }\\n        }           \\n    }\\n\\n    //  获取有价格的token的数量\\n    function getTokenLength() external override view returns (uint) {\\n        return tokenPriceData.length;\\n    }\\n\\n    //  获取token的价格\\n    function getTokenPriceUSD(address token) external override view returns (uint){\\n        if (token == WETH) {\\n            return tokenPriceData[tokenPriceMap[WETH]].price;\\n        } else {\\n            if (tokenPriceMap[token] == 0) {\\n                return 0;\\n            } else {\\n                return tokenPriceData[tokenPriceMap[token]].price;                \\n            }\\n        }\\n        return 0;\\n    }\\n\\n    //  获取token的价格\\n    function getTokenPriceByIndex(uint index) external override view returns (address token, string memory symbol, uint price, uint blockTimestamp){\\n        require(index \\u003c tokenPriceData.length, \\\"TokenOracle: index is out of range\\\");\\n        return (tokenPriceData[index].token, tokenPriceData[index].symbol, tokenPriceData[index].price, tokenPriceData[index].blockTimestamp);    \\n    }\\n\\n    //  获取token的价格\\n    function getTokenPriceByAddress(address token) external override view returns (string memory symbol, uint price, uint blockTimestamp) {\\n        for (uint i = 0; i \\u003c tokenPriceData.length; i++) {\\n            if (address(tokenPriceData[i].token) == token) {\\n                return (tokenPriceData[i].symbol, tokenPriceData[i].price, tokenPriceData[i].blockTimestamp);\\n            } \\n        }            \\n    }\\n\\n    //  获取token的价格\\n    function getTokenPriceBySymbol(string calldata symbol) external override view returns (address token, uint price, uint blockTimestamp) {\\n        for (uint i = 0; i \\u003c tokenPriceData.length; i++) {\\n            if (keccak256(abi.encodePacked(tokenPriceData[i].symbol)) == keccak256(abi.encodePacked(symbol))) {\\n                return (tokenPriceData[i].token, tokenPriceData[i].price, tokenPriceData[i].blockTimestamp);\\n            } \\n        }            \\n    }\\n\\n    //  获取token价格的更新时间\\n    function getTokenPriceUpdateTime(address token) external override view returns (uint){\\n        if (token == WETH) {\\n            return tokenPriceData[tokenPriceMap[WETH]].blockTimestamp;\\n        } else {\\n            if (tokenPriceMap[token] == 0) {\\n                return 0;\\n            } else {\\n                return tokenPriceData[tokenPriceMap[token]].blockTimestamp;                \\n            }\\n        }\\n        return 0;\\n    }\\n\\n    //  更新交易对的最新的交易的价格\\n    function updatePairPriceLatest(address pair, uint i) internal returns (bool) {\\n\\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\\n            UniswapV2OracleLibrary.currentCumulativePrices(pair);\\n        uint32 timeElapsed = blockTimestamp - pairInfo[i].blockTimestampLast; // overflow is desired\\n        if (timeElapsed == 0) {\\n            return false;\\n        }\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        FixedPoint.uq112x112 memory price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - pairInfo[i].price0CumulativeLast) / timeElapsed));\\n        FixedPoint.uq112x112 memory price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - pairInfo[i].price1CumulativeLast) / timeElapsed));\\n        \\n        pairInfo[i].price0CumulativeLast = price0Cumulative;\\n        pairInfo[i].price1CumulativeLast = price1Cumulative;\\n        pairInfo[i].blockTimestampLast = blockTimestamp;\\n\\n        //  priceAverage * 分子的token的Decimals / 分母的token的Decimals * 本合约的10位小数\\n        pairInfo[i].token0Price = uint(price0Average.mul(uint(10)**pairInfo[i].token0Decimals).decode144()).mul(uint(10)**decimals).div(uint(10)**pairInfo[i].token1Decimals);\\n        pairInfo[i].token1Price = uint(price1Average.mul(uint(10)**pairInfo[i].token1Decimals).decode144()).mul(uint(10)**decimals).div(uint(10)**pairInfo[i].token0Decimals);\\n\\n        emit UpdatePairPriceLatest(pair, pairInfo[i].token0Price, pairInfo[i].token1Price, UniswapV2OracleLibrary.currentBlockTimestamp());\\n\\n        return true;\\n    }\\n\\n    // 新建token的价格数据\\n    function newTokenPriceData(uint index) internal {\\n        if ((tokenPriceMap[pairInfo[index].token0] == 0) \\u0026\\u0026 (pairInfo[index].token0 != WETH)){\\n            tokenPrice storage price = tokenPriceData.push();\\n            price.token = pairInfo[index].token0;\\n            price.symbol = pairInfo[index].token0Symbol;\\n            price.price = 0;\\n            price.blockTimestamp = 0;\\n            tokenPriceMap[pairInfo[index].token0] = tokenPriceData.length - 1;\\n        } \\n        if ((tokenPriceMap[pairInfo[index].token1] == 0) \\u0026\\u0026 (pairInfo[index].token1 != WETH)) {\\n            tokenPrice storage price = tokenPriceData.push();\\n            price.token = pairInfo[index].token1;\\n            price.symbol = pairInfo[index].token1Symbol;\\n            price.price = 0;\\n            price.blockTimestamp = 0;\\n            tokenPriceMap[pairInfo[index].token1] = tokenPriceData.length - 1;\\n        }         \\n    }\\n\\n    //  计算token的usd价格\\n    //  pair里的token0、token1，没有与其他token的交易对，无法计算这2个token美元价格\\n    function updateTokenPriceUSD() internal {\\n        // 把ChainLink的ETH的价格的8位小数转为10位小数\\n        uint ethPrice = uint(ChainLinkETHUSD.latestAnswer()).mul(uint(10)**decimals).div(uint(10)**ChainLinkETHUSD.decimals());\\n        tokenPriceData[tokenPriceMap[WETH]].price = ethPrice;\\n        tokenPriceData[tokenPriceMap[WETH]].blockTimestamp = block.timestamp;\\n\\n        //  处理所有的ETH交易对，计算另外一个token的价格\\n        for(uint i = 0; i \\u003c pairInfo.length; i++){\\n            newTokenPriceData(i);\\n            if(pairInfo[i].token0 == WETH) {\\n                if(pairInfo[i].blockTimestampLast \\u003e tokenPriceData[tokenPriceMap[pairInfo[i].token1]].blockTimestamp){\\n                    tokenPriceData[tokenPriceMap[pairInfo[i].token1]].price = pairInfo[i].token1Price.mul(ethPrice).div(uint(10)**decimals);\\n                    tokenPriceData[tokenPriceMap[pairInfo[i].token1]].blockTimestamp = pairInfo[i].blockTimestampLast;\\n                }\\n            }    \\n            if(pairInfo[i].token1 == WETH) {\\n                if(pairInfo[i].blockTimestampLast \\u003e tokenPriceData[tokenPriceMap[pairInfo[i].token0]].blockTimestamp){\\n                    tokenPriceData[tokenPriceMap[pairInfo[i].token0]].price = pairInfo[i].token0Price.mul(ethPrice).div(uint(10)**decimals);\\n                    tokenPriceData[tokenPriceMap[pairInfo[i].token0]].blockTimestamp = pairInfo[i].blockTimestampLast;\\n                }\\n            }    \\n        }\\n\\n        //  处理交易对里没有ETH的交易对，根据tokenA的价格，计算tokenB的价格，\\n        //  遍历5次，如果5级路由还无法确定某个token的价格，那么就不计算了\\n        for (uint m = 0; m \\u003c 5; m++) {\\n            for(uint i = 0; i \\u003c pairInfo.length; i++){\\n                if((pairInfo[i].token0 == WETH) || (pairInfo[i].token1 == WETH)) {\\n                    continue;\\n                }\\n                newTokenPriceData(i);\\n                if(tokenPriceData[tokenPriceMap[pairInfo[i].token1]].price != 0) {\\n                    if(pairInfo[i].blockTimestampLast \\u003e tokenPriceData[tokenPriceMap[pairInfo[i].token0]].blockTimestamp){\\n                        tokenPriceData[tokenPriceMap[pairInfo[i].token0]].price = pairInfo[i].token0Price.mul(tokenPriceData[tokenPriceMap[pairInfo[i].token1]].price).div(uint(10)**decimals);\\n                        tokenPriceData[tokenPriceMap[pairInfo[i].token0]].blockTimestamp = pairInfo[i].blockTimestampLast;\\n                    }\\n                }\\n                if(tokenPriceData[tokenPriceMap[pairInfo[i].token0]].price != 0) {\\n                    if(pairInfo[i].blockTimestampLast \\u003e tokenPriceData[tokenPriceMap[pairInfo[i].token1]].blockTimestamp){\\n                        tokenPriceData[tokenPriceMap[pairInfo[i].token1]].price = pairInfo[i].token1Price.mul(tokenPriceData[tokenPriceMap[pairInfo[i].token0]].price).div(uint(10)**decimals);\\n                        tokenPriceData[tokenPriceMap[pairInfo[i].token1]].blockTimestamp = pairInfo[i].blockTimestampLast;\\n                    }\\n                }\\n            }            \\n        }\\n    }\\n\\n}\\n\"},\"UniswapV2Library.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\u0027UniswapV2Library: IDENTICAL_ADDRESSES\\u0027);\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\u0027UniswapV2Library: ZERO_ADDRESS\\u0027);\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex\\u0027ff\\u0027,\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex\\u002796e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\u0027 // init code hash\\n            ))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_AMOUNT\\u0027);\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027UniswapV2Library: INSUFFICIENT_LIQUIDITY\\u0027);\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i \\u003c path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length \\u003e= 2, \\u0027UniswapV2Library: INVALID_PATH\\u0027);\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"},\"UniswapV2OracleLibrary.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\n\\nimport \\u0027./IUniswapV2Pair.sol\\u0027;\\nimport \\u0027./FixedPoint.sol\\u0027;\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"UpdatePairCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatePairPriceLatest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ChainLinkETHUSD\",\"outputs\":[{\"internalType\":\"contract IChainLinkInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairInfoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPairPriceByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairPriceByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"}],\"name\":\"getPairPriceBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"token0Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"token1Decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairTokenPriceCumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairUpdatePriceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPriceByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenPriceBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPriceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPriceUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdatePairCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairInfo\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"token0Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"token1Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"token0Price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPriceData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePairPriceAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"updatePairPriceSingle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenOracleDemo","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1197f9d0ebdbe2d8677d2ca1da0c442f265f02ef1bb4b5774cd28f767585485d"}]}