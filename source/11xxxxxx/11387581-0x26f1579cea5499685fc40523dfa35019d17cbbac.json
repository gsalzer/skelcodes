{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.4;\r\n\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner || tx.origin == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IPriceConsumerV3DaiWei {\r\n    function getLatestPrice() external view returns (int);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n      external\r\n      payable\r\n      returns (uint[] memory amounts);\r\n      \r\n    function WETH() external returns (address); \r\n    \r\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract NexenPlatform is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    enum RequestState {None, LenderCreated, BorrowerCreated, Cancelled, Matched, Closed, Expired, Disabled}\r\n    \r\n    IERC20 nexenToken;\r\n    IERC20 daiToken = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); \r\n    IPriceConsumerV3DaiWei priceConsumer;\r\n    IUniswapV2Router02 uniswapRouter;\r\n    \r\n    bool public paused = false;\r\n    bool public genesisPhase = true;\r\n    uint256 public amountToReward = 1000 * 10 ** 18;\r\n    uint public lenderFee = 1; //1%\r\n    uint public borrowerFee = 1; //1%\r\n    \r\n    mapping(address => uint256) public depositedDAIByAddress;\r\n    mapping(address => uint256) public depositedWEIByAddress;\r\n\r\n    struct Request {\r\n        // Internal fields\r\n        RequestState state;\r\n        address payable borrower;\r\n        address payable lender;\r\n        // Fields for both parties\r\n        uint256 daiAmount;\r\n        uint256 durationInDays;\r\n        uint256 expireIfNotMatchedOn;\r\n        // Fields for borrower\r\n        uint256 ltv;\r\n        uint256 weiAmount;\r\n        uint256 daiVsWeiCurrentPrice;\r\n        // Fields after matching\r\n        uint256 lendingFinishesOn;\r\n    }\r\n    \r\n    event OpenRequest(uint256 requestId, address indexed borrower, address indexed lender, uint256 daiAmount, uint256 durationInDays, uint256 expireIfNotMatchedOn, uint256 ltv, uint256 weiAmount, uint256 ethVsDaiCurrentPrice, uint256 lendingFinishesOn, RequestState state);\r\n    event UpdateRequest(uint256 requestId, address indexed borrower, address indexed lender, RequestState state);\r\n    event CollateralSold(uint256 requestId, uint256 totalCollateral, uint256 totalSold, uint256 totalDAIBought);\r\n\r\n    uint256 public daiFees;\r\n    uint256 public ethFees;\r\n    \r\n    mapping (uint256 => Request) public requests;\r\n    \r\n    receive() external payable {\r\n        depositETH();\r\n    }\r\n\r\n    constructor(IERC20 _nexenToken, IPriceConsumerV3DaiWei _priceConsumer, IUniswapV2Router02 _uniswapRouter) {\r\n        nexenToken = _nexenToken;\r\n        priceConsumer = _priceConsumer;\r\n        uniswapRouter = _uniswapRouter;\r\n    }\r\n    \r\n    //Calculates the amount of WEI that is needed as a collateral for this amount of DAI and the chosen LTV\r\n    function calculateWeiAmount(uint256 _daiAmount, uint256 _ltv, uint256 _daiVsWeiCurrentPrice) public pure returns (uint256) {\r\n        //I calculate the collateral in DAI, then I change it to WEI and I remove the decimals from the token\r\n        return _daiAmount.mul(100).div(_ltv).mul(_daiVsWeiCurrentPrice).div(1e18);\r\n    }\r\n    \r\n    function depositETH() public payable {\r\n        require(msg.value > 10000000000000000, 'Minimum is 0.01 ETH');\r\n        depositedWEIByAddress[msg.sender] += msg.value;\r\n    }\r\n\r\n    function depositDAI(uint256 _amount) public {\r\n        require(IERC20(daiToken).transferFrom(msg.sender, address(this), _amount), \"Couldn't take the DAI from the sender\");\r\n        depositedDAIByAddress[msg.sender] += _amount;\r\n    }\r\n    \r\n    function _setGenesisPhase(bool _genesisPhase, uint256 _amountToReward) public onlyOwner {\r\n        genesisPhase = _genesisPhase;\r\n        amountToReward = _amountToReward;\r\n    }\r\n    \r\n    function _setPaused(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n    \r\n    function calculateCollateral(uint256 daiAmount, uint256 ltv) public view returns (uint256) {\r\n        //Gets the current price in WEI for 1 DAI\r\n        uint256 daiVsWeiCurrentPrice = uint256(priceConsumer.getLatestPrice());\r\n        //Gets the collateral needed in WEI\r\n        uint256 weiAmount = calculateWeiAmount(daiAmount, ltv, daiVsWeiCurrentPrice);\r\n        return weiAmount;\r\n    }\r\n    \r\n    function createRequest(bool lend, uint256 daiAmount, uint256 durationInDays, uint256 expireIfNotMatchedOn, uint256 ltv) public {\r\n        require(daiAmount >= 100 * 10 ** 18, \"Minimum amount is 100 DAI\");\r\n        require(expireIfNotMatchedOn > block.timestamp, \"Invalid expiration date\");\r\n        require(!paused, \"The contract is paused\");\r\n\r\n        Request memory r;\r\n        (r.daiAmount, r.durationInDays, r.expireIfNotMatchedOn) = (daiAmount, durationInDays, expireIfNotMatchedOn);\r\n        \r\n        if (lend) {\r\n            r.lender = msg.sender;\r\n            r.state = RequestState.LenderCreated;\r\n            \r\n            require(depositedDAIByAddress[msg.sender] >= r.daiAmount, \"Not enough DAI deposited\");\r\n            depositedDAIByAddress[msg.sender] -= r.daiAmount;\r\n        } else {\r\n            require(ltv == 20 || ltv == 40 || ltv == 60, 'Invalid ltv');\r\n            \r\n            r.borrower = msg.sender;\r\n            r.state = RequestState.BorrowerCreated;\r\n            r.ltv = ltv;\r\n            r.daiVsWeiCurrentPrice = uint256(priceConsumer.getLatestPrice());\r\n            r.weiAmount = calculateWeiAmount(daiAmount, ltv, r.daiVsWeiCurrentPrice);\r\n            require(depositedWEIByAddress[msg.sender] > r.weiAmount, \"Not enough ETH deposited\");\r\n            depositedWEIByAddress[msg.sender] -= r.weiAmount;\r\n        }\r\n\r\n        uint256 requestId = uint256(keccak256(abi.encodePacked(r.borrower, r.lender, r.daiAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv)));\r\n        \r\n        require(requests[requestId].state == RequestState.None, 'Request already exists');\r\n        \r\n        requests[requestId] = r;\r\n\r\n        emit OpenRequest(requestId, r.borrower, r.lender, r.daiAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv, r.weiAmount, r.daiVsWeiCurrentPrice, r.lendingFinishesOn, r.state);\r\n    }\r\n    \r\n    function matchRequestAsLender(uint256 requestId) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.BorrowerCreated, 'Invalid request');\r\n        require(r.expireIfNotMatchedOn > block.timestamp, 'Request expired');\r\n\r\n        r.lender = msg.sender;\r\n        r.lendingFinishesOn = getExpirationAfter(r.durationInDays);\r\n        r.state = RequestState.Matched;\r\n        \r\n        require(depositedDAIByAddress[msg.sender] >= r.daiAmount, \"Not enough DAI deposited\");\r\n        depositedDAIByAddress[msg.sender] = depositedDAIByAddress[msg.sender].sub(r.daiAmount);\r\n        depositedDAIByAddress[r.borrower] = depositedDAIByAddress[r.borrower].add(r.daiAmount);\r\n        \r\n        if (genesisPhase) {\r\n            require(nexenToken.transfer(msg.sender, amountToReward), 'Could not transfer tokens');\r\n            require(nexenToken.transfer(r.borrower, amountToReward), 'Could not transfer tokens');\r\n        }\r\n        \r\n        emit UpdateRequest(requestId, r.borrower, r.lender, r.state);\r\n    }\r\n    \r\n    function getLatestDaiVsWeiPrice() public view returns (uint256) {\r\n        return uint256(priceConsumer.getLatestPrice());\r\n    }\r\n    \r\n    function matchRequestAsBorrower(uint256 requestId, uint256 ltv) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.LenderCreated, 'Invalid request');\r\n        require(r.expireIfNotMatchedOn > block.timestamp, 'Request expired');\r\n\r\n        r.borrower = msg.sender;\r\n        r.lendingFinishesOn = getExpirationAfter(r.durationInDays);\r\n        r.state = RequestState.Matched;\r\n        \r\n        r.ltv = ltv;\r\n        r.daiVsWeiCurrentPrice = uint256(priceConsumer.getLatestPrice());\r\n        \r\n        r.weiAmount = calculateWeiAmount(r.daiAmount, r.ltv, r.daiVsWeiCurrentPrice);\r\n\r\n        require(depositedWEIByAddress[msg.sender] > r.weiAmount, \"Not enough WEI\");\r\n\r\n        depositedWEIByAddress[msg.sender] = depositedWEIByAddress[msg.sender].sub(r.weiAmount);\r\n        depositedDAIByAddress[r.borrower] = depositedDAIByAddress[r.borrower].add(r.daiAmount);\r\n\r\n        if (genesisPhase) {\r\n            require(nexenToken.transfer(msg.sender, amountToReward), 'Could not transfer tokens');\r\n            require(nexenToken.transfer(r.lender, amountToReward), 'Could not transfer tokens');\r\n        }\r\n\r\n        emit UpdateRequest(requestId, r.borrower, r.lender, r.state);\r\n    }\r\n    \r\n    function cancelRequest(uint256 requestId) public {\r\n        Request storage r = requests[requestId];\r\n        require(r.state == RequestState.BorrowerCreated || r.state == RequestState.LenderCreated);\r\n        \r\n        r.state = RequestState.Cancelled;\r\n\r\n        if (msg.sender == r.borrower) {\r\n            depositedWEIByAddress[msg.sender] += r.weiAmount;\r\n        } else if (msg.sender == r.lender) {\r\n            depositedDAIByAddress[msg.sender] += r.daiAmount;\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        emit UpdateRequest(requestId, r.borrower, r.lender, r.state);\r\n    }\r\n    \r\n    function finishRequest(uint256 _requestId) public {\r\n        Request storage r = requests[_requestId];\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        \r\n        require(msg.sender == r.borrower, 'Only borrower can call this');\r\n\r\n        r.state = RequestState.Closed;\r\n        \r\n        uint256 daiToTransfer = getInterest(r.ltv, r.daiAmount).add(r.daiAmount);\r\n        \r\n        require(depositedDAIByAddress[r.borrower] >= daiToTransfer, \"Not enough DAI deposited\");\r\n\r\n        uint256 totalLenderFee = computeLenderFee(r.daiAmount);\r\n        uint256 totalBorrowerFee = computeBorrowerFee(r.weiAmount);\r\n        daiFees = daiFees.add(totalLenderFee);\r\n        ethFees = ethFees.add(totalBorrowerFee);\r\n        \r\n        depositedDAIByAddress[r.lender] += daiToTransfer.sub(totalLenderFee);\r\n        depositedDAIByAddress[r.borrower] -= daiToTransfer;\r\n        depositedWEIByAddress[r.borrower] += r.weiAmount.sub(totalBorrowerFee);\r\n        \r\n        emit UpdateRequest(_requestId, r.borrower, r.lender, r.state);\r\n    }\r\n    \r\n    function canBurnCollateral(uint256 requestId, uint256 daiVsWeiCurrentPrice) public view returns (bool) {\r\n        Request memory r = requests[requestId];\r\n        \r\n        uint256 howMuchEthTheUserCanGet = r.daiAmount.mul(daiVsWeiCurrentPrice).div(1e18);\r\n        uint256 eigthyPercentOfCollateral = r.weiAmount.mul(8).div(10);\r\n        \r\n        return howMuchEthTheUserCanGet > eigthyPercentOfCollateral;\r\n    }\r\n    \r\n    function expireNonFullfiledRequest(uint256 _requestId) public {\r\n        Request storage r = requests[_requestId];\r\n\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        require(msg.sender == r.lender, \"Only lender can call this\");\r\n        require(block.timestamp > r.lendingFinishesOn, \"Request not finished yet\");\r\n        \r\n        r.state = RequestState.Expired;\r\n        \r\n        burnCollateral(_requestId, r);\r\n    }\r\n    \r\n    function _expireRequest(uint256 _requestId) public onlyOwner {\r\n        Request storage r = requests[_requestId];\r\n\r\n        require(r.state == RequestState.Matched, \"State needs to be Matched\");\r\n        uint256 daiVsWeiCurrentPrice = uint256(priceConsumer.getLatestPrice());\r\n        require(canBurnCollateral(_requestId, daiVsWeiCurrentPrice), \"We cannot burn the collateral\");\r\n        \r\n        r.state = RequestState.Disabled;\r\n\r\n        burnCollateral(_requestId, r);\r\n    }\r\n    \r\n    function burnCollateral(uint256 _requestId, Request storage r) internal {\r\n        //Minimum that we should get according to Chainlink\r\n        //r.weiAmount.div(daiVsWeiCurrentPrice);\r\n\r\n        //But we will use as minimum the amount we need to return to the Borrower\r\n        uint256 daiToTransfer = getInterest(r.ltv, r.daiAmount).add(r.daiAmount);\r\n        \r\n        uint256[] memory amounts = sellCollateralInUniswap(daiToTransfer, r.weiAmount);\r\n        //amounts[0] represents how much ETH was actually sold        \r\n        uint256 dust = r.weiAmount.sub(amounts[0]);\r\n        \r\n        uint256 totalLenderFee = computeLenderFee(r.daiAmount);\r\n        uint256 totalBorrowerFee = computeBorrowerFee(r.weiAmount);\r\n\r\n        if (totalBorrowerFee > dust) {\r\n            totalBorrowerFee = dust;\r\n        }\r\n\r\n        daiFees = daiFees.add(totalLenderFee);\r\n        ethFees = ethFees.add(totalBorrowerFee);\r\n        \r\n        depositedWEIByAddress[r.borrower] += dust.sub(totalBorrowerFee);\r\n        depositedDAIByAddress[r.lender] += daiToTransfer.sub(totalLenderFee);\r\n        \r\n        emit CollateralSold(_requestId, r.weiAmount, amounts[0], daiToTransfer);\r\n        emit UpdateRequest(_requestId, r.borrower, r.lender, r.state);\r\n    }\r\n    \r\n    function sellCollateralInUniswap(uint256 daiToTransfer, uint256 weiAmount) internal returns (uint256[] memory)  {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = address(daiToken);\r\n        return uniswapRouter.swapETHForExactTokens{value:weiAmount}(daiToTransfer, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function getInterest(uint256 _ltv, uint256 _daiAmount) public pure returns (uint256) {\r\n        if (_ltv == 20) {\r\n            return _daiAmount.mul(4).div(100);\r\n        } else if (_ltv == 40) {\r\n            return _daiAmount.mul(6).div(100);\r\n        } else if (_ltv == 60) {\r\n            return _daiAmount.mul(8).div(100);\r\n        }\r\n        revert();\r\n    }\r\n\r\n    function _withdrawDaiFees(uint256 _amount) public onlyOwner {\r\n        require(daiFees >= _amount, \"Invalid number\");\r\n        daiFees -= _amount;\r\n        require(daiToken.transfer(msg.sender, _amount), \"Transfer failed\");\r\n    }\r\n\r\n    function _withdrawEthFees(uint256 _amount) public onlyOwner {\r\n        require(ethFees >= _amount, \"Invalid number\");\r\n        ethFees -= _amount;\r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawDai(uint256 _amount) public {\r\n        require(depositedDAIByAddress[msg.sender] >= _amount);\r\n        depositedDAIByAddress[msg.sender] = depositedDAIByAddress[msg.sender].sub(_amount);\r\n        require(daiToken.transfer(msg.sender, _amount));\r\n    }\r\n    \r\n    function withdrawEth(uint256 _amount) public {\r\n        require(depositedWEIByAddress[msg.sender] >= _amount);\r\n        depositedWEIByAddress[msg.sender] = depositedWEIByAddress[msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n    \r\n    function computeLenderFee(uint256 _value) public view returns (uint256) {\r\n        return _value.mul(lenderFee).div(100); \r\n    }\r\n\r\n    function computeBorrowerFee(uint256 _value) public view returns (uint256) {\r\n        return _value.mul(borrowerFee).div(100); \r\n    }\r\n    \r\n    function getExpirationAfter(uint256 amountOfDays) public view returns (uint256) {\r\n        return block.timestamp.add(amountOfDays.mul(1 days));\r\n    }\r\n    \r\n    function requestInfo(uint256 requestId) public view  returns (uint256 _tradeId, RequestState _state, address _borrower, address _lender, uint256 _daiAmount, uint256 _durationInDays, uint256 _expireIfNotMatchedOn, uint256 _ltv, uint256 _weiAmount, uint256 _daiVsWeiCurrentPrice, uint256 _lendingFinishesOn) {\r\n        Request storage r = requests[requestId];\r\n        return (requestId, r.state, r.borrower, r.lender, r.daiAmount, r.durationInDays, r.expireIfNotMatchedOn, r.ltv, r.weiAmount, r.daiVsWeiCurrentPrice, r.lendingFinishesOn);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_nexenToken\",\"type\":\"address\"},{\"internalType\":\"contract IPriceConsumerV3DaiWei\",\"name\":\"_priceConsumer\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDAIBought\",\"type\":\"uint256\"}],\"name\":\"CollateralSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethVsDaiCurrentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingFinishesOn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"OpenRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"_expireRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_genesisPhase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountToReward\",\"type\":\"uint256\"}],\"name\":\"_setGenesisPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"_setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawDaiFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawEthFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"calculateCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"calculateWeiAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"}],\"name\":\"canBurnCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"computeBorrowerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"computeLenderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"lend\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedDAIByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedWEIByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"expireNonFullfiledRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"finishRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfDays\",\"type\":\"uint256\"}],\"name\":\"getExpirationAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"}],\"name\":\"getInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDaiVsWeiPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"matchRequestAsBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"matchRequestAsLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeId\",\"type\":\"uint256\"},{\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"_state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daiVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lendingFinishesOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"enum NexenPlatform.RequestState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireIfNotMatchedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daiVsWeiCurrentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingFinishesOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NexenPlatform","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000df22899b261253c246369aab7f6ab05c743456300000000000000000000000005df3a84a40670bbad448ce60c946bd332467a1680000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://40a28f43919707e94aeef22b01508102e55cd81b57af0aef14c887fda05d4336"}]}