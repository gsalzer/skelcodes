{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface CHMToken {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract CryptoChromstacking is Ownable{\r\n    using SafeMath for uint256;\r\n    uint public totalcollectedfee;\r\n    uint public poollimit; \r\n    uint public rewardlimit;\r\n    uint public totalreward;\r\n    uint public totalStaked;\r\n    uint public totalrefregreward;\r\n    uint public totalStakers; \r\n    uint public totalrefdepositreward;\r\n    uint public entryid=0;\r\n    uint public startTime;\r\n    uint public endTime;\r\n    uint public registrationFeeWithReferrer;\r\n    uint public registrationFeeWithoutReferrer;\r\n   \r\n    CHMToken public chmToken;\r\n    \r\n    constructor(address owner,\r\n    uint _poollimit,\r\n    uint _rewardlimit,\r\n    uint _registrationFeeWithoutReferrer,\r\n    uint _registrationFeeWithReferrer,\r\n    uint _startTime,\r\n    uint _endTime,\r\n    CHMToken _chmToken) public {\r\n      owner = owner;\r\n      poollimit=_poollimit;\r\n      rewardlimit =_rewardlimit;\r\n      registrationFeeWithoutReferrer=_registrationFeeWithoutReferrer;\r\n      registrationFeeWithReferrer=_registrationFeeWithReferrer;\r\n      startTime=_startTime;\r\n      endTime=_endTime;\r\n      chmToken=_chmToken;\r\n      \r\n    }\r\n    \r\n    struct Transaction {\r\n      uint amount;\r\n      uint id;\r\n      uint date;\r\n      uint256 afterreward;\r\n   }\r\n   \r\n    mapping (address => Transaction[]) private stakeentries;\r\n    mapping(address => uint) public stakeValue;\r\n    mapping(address => uint) public accountReferrals;\r\n    mapping(address => int) public stakereward;\r\n    mapping(address => bool) public stakerIsRegistered;\r\n\r\n    modifier whenStakingActive {\r\n        require(startTime != 0 && now > startTime && now < endTime, \"Staking not yet started.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCHMToken {\r\n        require(msg.sender == address(chmToken), \"Can only be called by chmToken contract.\");\r\n        _;\r\n    }\r\n    event referalbouns(address user, uint amount);\r\n    event OnDistribute(address sender, uint amountSent,uint date);\r\n    event OnStake(address user, uint amount,uint date);\r\n    event OnUnstake(address user, uint amount, uint reward);\r\n  function()external { revert();  }\r\n\r\n    function registerAndStake(uint amount) public {\r\n        registerAndStake(amount, address(0x0));\r\n    }\r\n    function isActive() public view returns (bool){\r\n        return startTime != 0 && now > startTime && now < endTime;\r\n    } \r\n    function registerAndStake(uint amount, address referrer) public whenStakingActive {\r\n        require(!stakerIsRegistered[msg.sender], \"Staker must not be registered\");\r\n        require(poollimit>=totalStaked+amount, \"No supply\");\r\n        require(totalreward+amount.mul(3).div(10) <= rewardlimit,\"rewardlimit reached\");\r\n        require(chmToken.balanceOf(msg.sender) >= amount,\"Must have enough balance to stake amount\");\r\n        uint finalAmount;\r\n        if(address(0x0) == referrer) {\r\n           require(amount >= registrationFeeWithoutReferrer, \"Must send at least enough token to pay registration fee.\");\r\n           totalcollectedfee = totalcollectedfee.add(registrationFeeWithoutReferrer);\r\n            require(\r\n            chmToken.transferFrom(msg.sender, address(this), registrationFeeWithoutReferrer.mul(1e18)),\r\n            \"Distribution failed due to failed transfer.\"\r\n            );\r\n            emit OnDistribute(msg.sender, registrationFeeWithoutReferrer, now);\r\n            finalAmount = amount.sub(registrationFeeWithoutReferrer);\r\n        } else {\r\n            require(amount >= registrationFeeWithReferrer, \"Must send at least enough token to pay registration fee.\");\r\n            finalAmount = amount.sub(registrationFeeWithReferrer);\r\n            uint256 payout = finalAmount.mul(25).div(1000);\r\n            uint256 bouns = uint256(uintToInt(payout));\r\n            totalrefdepositreward =totalrefdepositreward.add(bouns);\r\n            totalrefregreward =totalrefregreward.add(registrationFeeWithReferrer);\r\n            totalreward = totalreward+ uint256(uintToInt(payout));\r\n            require(chmToken.transferFrom(msg.sender,referrer, registrationFeeWithReferrer.mul(1e18)), \r\n            \"Stake failed due to failed referral transfer.\");\r\n            require(chmToken.transfer(referrer, bouns.mul(1e18)), \" Contract low balance .\");\r\n            emit referalbouns(referrer,bouns);\r\n            accountReferrals[referrer] = accountReferrals[referrer].add(1);\r\n         }\r\n        stakerIsRegistered[msg.sender] = true;\r\n        stake(finalAmount);\r\n    }\r\n\r\n    function stake(uint amount) public whenStakingActive {\r\n        require(stakerIsRegistered[msg.sender] == true, \"Must be registered to stake.\");\r\n        require(totalreward+amount.mul(3).div(10) <= rewardlimit,\"rewardlimit reached\");\r\n        require(chmToken.balanceOf(msg.sender) >= amount, \"Cannot stake more token than you hold unstaked.\");\r\n        require(amount >= 1, \"Must unstake at least one token.\");\r\n        require(chmToken.transferFrom(msg.sender, address(this), amount.mul(1e18)), \"Stake failed due to failed transfer.\");\r\n        if (stakeValue[msg.sender] == 0) totalStakers = totalStakers.add(1);\r\n        totalStaked = totalStaked.add(amount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].add(amount);\r\n        uint256 payout = amount.mul(3).div(10);\r\n        totalreward = totalreward+ uint256(uintToInt(payout));\r\n        uint256 afterreward = amount.add(uint256(uintToInt(payout)));\r\n        stakereward[msg.sender] = stakereward[msg.sender] +uintToInt(payout);\r\n        stakeentries[msg.sender].push(Transaction(\r\n        { \r\n        amount:amount,\r\n        date:now,\r\n        id:entryid++,\r\n        afterreward:afterreward\r\n        }));\r\n        emit OnStake(msg.sender, amount,now);\r\n    }\r\n\r\n    function unstake(uint index,uint id) external  {\r\n        uint amount = stakeentries[msg.sender][index].amount;\r\n        uint tid = stakeentries[msg.sender][index].id;\r\n        uint date = stakeentries[msg.sender][index].date;\r\n        uint256 earnings= stakeentries[msg.sender][index].afterreward;\r\n        require(now > (date + 30 days),\"Cannot unstake now \");\r\n        require(amount >= 1, \"Must unstake at least one token.\");\r\n        require(tid >= id, \"Different tid check index\");\r\n       \r\n        require(chmToken.transfer(msg.sender,earnings.mul(1e18) ), \"Unstake failed due to failed transfer.\");\r\n        if (stakeValue[msg.sender] == amount) totalStakers = totalStakers.sub(1);\r\n        totalStaked = totalStaked.sub(amount);\r\n        stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount);\r\n    \r\n        uint256 length = stakeentries[msg.sender].length;\r\n        stakeentries[msg.sender][index]= stakeentries[msg.sender][length-1];\r\n        delete stakeentries[msg.sender][length-1];\r\n        stakeentries[msg.sender].length--;\r\n        emit OnUnstake(msg.sender, amount, earnings);\r\n    }\r\n\r\n    function getTransactions(address sender) public view returns ( \r\n      uint [] memory amount,\r\n      uint [] memory date,\r\n      uint[] memory id,\r\n      uint256[] memory afterreward\r\n      )\r\n    {\r\n        uint256 length = stakeentries[sender].length;\r\n        amount = new uint[](length);\r\n        date = new uint[](length);\r\n        id = new uint[](length);\r\n        afterreward = new uint256[](length);\r\n        for(uint256 i = 0; i < length; i++){\r\n            Transaction memory transaction=stakeentries[sender][i];\r\n            amount[i] = transaction.amount;\r\n            date[i] = transaction.date;\r\n            id[i] = transaction.id;\r\n            afterreward[i]= transaction.afterreward;\r\n        }\r\n         return (\r\n            amount,\r\n            date,\r\n            id,\r\n            afterreward\r\n        );\r\n    }\r\n    \r\n    function uintToInt(uint val) internal pure returns (int) {\r\n        if (val >= uint(-1).div(2)) {\r\n            require(false, \"Overflow. Cannot convert uint to int.\");\r\n        } else {\r\n            return int(val);\r\n        }\r\n    }\r\n\r\n    function setRegistrationFees(uint valueWithReferrer, uint valueWithoutReferrer) external onlyOwner {\r\n        registrationFeeWithReferrer = valueWithReferrer;\r\n        registrationFeeWithoutReferrer = valueWithoutReferrer;\r\n    }\r\n    \r\n    function setStartEndTime(uint _startTime,uint _endTime) external onlyOwner {\r\n        startTime = _startTime;\r\n        endTime= _endTime;\r\n    }\r\n    \r\n    function getcontractBalance() public view returns (uint bal){\r\n        return chmToken.balanceOf(address(this));\r\n    }\r\n    \r\n    function transferTokens(address to,uint amount) external onlyOwner {\r\n        require( amount<=chmToken.balanceOf(address(this)),\"low balance\");\r\n        chmToken.transfer(to,amount.mul(1e18) );\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poollimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardlimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationFeeWithoutReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationFeeWithReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"contract CHMToken\",\"name\":\"_chmToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"OnDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"OnUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"referalbouns\",\"type\":\"event\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chmToken\",\"outputs\":[{\"internalType\":\"contract CHMToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"entryid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"date\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"afterreward\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getcontractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poollimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerAndStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerAndStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFeeWithReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFeeWithoutReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueWithReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueWithoutReferrer\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setStartEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerIsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakereward\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalcollectedfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalrefdepositreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalrefregreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalreward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoChromstacking","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ee42317ce9153a1603264cf2cdd689a0bb78d5af000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000084595161401484a00000000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000005fbb8f28000000000000000000000000000000000000000000000000000000005fe31c28000000000000000000000000538a151dd910c1d1227719bd400d6c4f99ea06d0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8313d11414e5e1043ba36cdab7d87e369a0fdaeb65dd84b4f788edf5171926b6"}]}