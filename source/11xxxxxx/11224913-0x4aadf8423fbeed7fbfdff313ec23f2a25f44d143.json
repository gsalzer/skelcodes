{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Keep3r/IKeep3rV1Mini.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\ninterface IKeep3rV1Mini {\\n    function isKeeper(address) external returns (bool);\\n    function worked(address keeper) external;\\n    function totalBonded() external view returns (uint);\\n    function bonds(address keeper, address credit) external view returns (uint);\\n    function votes(address keeper) external view returns (uint);\\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool);\\n    function addCreditETH(address job) external payable;\\n    function workedETH(address keeper) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Sushiswap/ISushiswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ISushiswapV2Factory {\\n    function allPairsLength() external view returns (uint);\\n    function allPairs(uint) external view returns (address pair);\\n}\\n\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Sushiswap/ISushiswapV2Maker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\ninterface ISushiswapV2Maker {\\n    function convert(address token0, address token1) external;\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/interfaces/Sushiswap/ISushiswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\ninterface ISushiswapV2Pair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function balanceOf(address account) external view returns (uint);\\n}\"\r\n    },\r\n    \"/Users/akshaycm/Documents/relay3r.network/contracts/jobs/SushiswapV2Keep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport '../interfaces/Keep3r/IKeep3rV1Mini.sol';\\nimport '../interfaces/Sushiswap/ISushiswapV2Factory.sol';\\nimport '../interfaces/Sushiswap/ISushiswapV2Maker.sol';\\nimport '../interfaces/Sushiswap/ISushiswapV2Pair.sol';\\n\\ncontract SushiswapV2Keep3r {\\n\\n    modifier upkeep() {\\n        require(KP3R.isKeeper(msg.sender), \\\"SushiswapV2Keep3r::isKeeper: keeper is not registered\\\");\\n        _;\\n        KP3R.worked(msg.sender);\\n    }\\n\\n    IKeep3rV1Mini public KP3R;\\n    ISushiswapV2Factory public constant SV2F = ISushiswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n    ISushiswapV2Maker public constant SV2M = ISushiswapV2Maker(0x6684977bBED67e101BB80Fc07fCcfba655c0a64F);\\n\\n    constructor(address keepertoken) public {\\n        KP3R = IKeep3rV1Mini(keepertoken);\\n    }\\n\\n    function count() public view returns (uint) {\\n        uint _count = 0;\\n        for (uint i = 0; i < SV2F.allPairsLength(); i++) {\\n            if (haveBalance(SV2F.allPairs(i))) {\\n                _count++;\\n            }\\n        }\\n        return _count;\\n    }\\n\\n    function workable() public view returns (bool) {\\n        return count() > 0;\\n    }\\n\\n    function workableAll(uint _count) external view returns (address[] memory) {\\n        return (workable(_count, 0, SV2F.allPairsLength()));\\n    }\\n\\n    function workable(uint _count, uint start, uint end) public view returns (address[] memory) {\\n        address[] memory _workable = new address[](_count);\\n        uint index = 0;\\n        for (uint i = start; i < end; i++) {\\n            if (haveBalance(SV2F.allPairs(i))) {\\n                _workable[index] = SV2F.allPairs(i);\\n                index++;\\n            }\\n        }\\n        return _workable;\\n    }\\n\\n    function haveBalance(address pair) public view returns (bool) {\\n        return ISushiswapV2Pair(pair).balanceOf(address(SV2M)) > 0;\\n    }\\n\\n    function batch(ISushiswapV2Pair[] calldata pair) external {\\n        bool _worked = true;\\n        for (uint i = 0; i < pair.length; i++) {\\n            if (haveBalance(address(pair[i]))) {\\n                (bool success, bytes memory message) = address(SV2M).delegatecall(abi.encodeWithSignature(\\\"convert(address,address)\\\", pair[i].token0(), pair[i].token1()));\\n                require(success, string(abi.encodePacked(\\\"SushiswapV2Keep3r::convert: failed [\\\", message, \\\"]\\\")));\\n            } else {\\n                _worked = false;\\n            }\\n        }\\n        require(_worked, \\\"SushiswapV2Keep3r::batch: job(s) failed\\\");\\n    }\\n\\n    function work() external upkeep{\\n        require(workable(),\\\"No pairs to convert\\\");\\n        // iterate and add convert all pairs with balance\\n        for (uint i = 0; i < SV2F.allPairsLength(); i++) {\\n            if (haveBalance(SV2F.allPairs(i))) {\\n                //Do work\\n                (bool success, bytes memory message) = address(SV2M).delegatecall(abi.encodeWithSignature(\\\"convert(address,address)\\\", ISushiswapV2Pair(SV2F.allPairs(i)).token0(), ISushiswapV2Pair(SV2F.allPairs(i)).token1()));\\n                require(success,  string(abi.encodePacked(\\\"SushiswapV2Keep3r::convert: failed [\\\", message, \\\"]\\\")));\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keepertoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Mini\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SV2F\",\"outputs\":[{\"internalType\":\"contract ISushiswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SV2M\",\"outputs\":[{\"internalType\":\"contract ISushiswapV2Maker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISushiswapV2Pair[]\",\"name\":\"pair\",\"type\":\"address[]\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"haveBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"workableAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SushiswapV2Keep3r","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f771733a465441437ecf64ff410e261516c7c5f3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}