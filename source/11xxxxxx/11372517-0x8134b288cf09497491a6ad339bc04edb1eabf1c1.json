{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface StakeUIHelperI {\r\n  struct AssetUIData {\r\n    uint256 stakeTokenTotalSupply;\r\n    uint256 stakeCooldownSeconds;\r\n    uint256 stakeUnstakeWindow;\r\n    uint128 distributionPerSecond;\r\n    uint256 stakeTokenUserBalance;\r\n    uint256 underlyingTokenUserBalance;\r\n    uint256 userCooldown;\r\n    uint256 userIncentivesToClaim;\r\n    uint256 userPermitNonce;\r\n  }\r\n\r\n  function getStkAaveData(address user) external view returns (AssetUIData memory);\r\n\r\n  function getStkBptData(address user) external view returns (AssetUIData memory);\r\n\r\n  function getUserUIData(address user)\r\n    external\r\n    view\r\n    returns (AssetUIData memory, AssetUIData memory);\r\n}\r\n\r\ninterface IStakedToken {\r\n  struct AssetData {\r\n    uint128 emissionPerSecond;\r\n    uint128 lastUpdateTimestamp;\r\n    uint256 index;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n  function UNSTAKE_WINDOW() external view returns (uint256);\r\n\r\n  function assets(address asset) external view returns (AssetData memory);\r\n\r\n  function balanceOf(address user) external view returns (uint256);\r\n\r\n  function getTotalRewardsBalance(address user) external view returns (uint256);\r\n\r\n  function stakersCooldowns(address user) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20WithNonce is IERC20 {\r\n  function _nonces(address user) external view returns (uint256);\r\n}\r\n\r\ncontract StakeUIHelper is StakeUIHelperI {\r\n  address immutable AAVE;\r\n  IStakedToken immutable STAKED_AAVE;\r\n\r\n  address immutable BPT;\r\n  IStakedToken immutable STAKED_BPT;\r\n\r\n  constructor(\r\n    address aave,\r\n    IStakedToken stkAave,\r\n    address bpt,\r\n    IStakedToken stkBpt\r\n  ) public {\r\n    AAVE = aave;\r\n    STAKED_AAVE = stkAave;\r\n    BPT = bpt;\r\n    STAKED_BPT = stkBpt;\r\n  }\r\n\r\n  function _getStakedAssetData(\r\n    IStakedToken stakeToken,\r\n    address underlyingToken,\r\n    address user,\r\n    bool isNonceAvailable\r\n  ) internal view returns (AssetUIData memory) {\r\n    AssetUIData memory data;\r\n\r\n    data.stakeTokenTotalSupply = stakeToken.totalSupply();\r\n    data.stakeCooldownSeconds = stakeToken.COOLDOWN_SECONDS();\r\n    data.stakeUnstakeWindow = stakeToken.UNSTAKE_WINDOW();\r\n    data.distributionPerSecond = stakeToken.assets(address(STAKED_AAVE)).emissionPerSecond;\r\n\r\n    if (user != address(0)) {\r\n      data.underlyingTokenUserBalance = IERC20(underlyingToken).balanceOf(user);\r\n      data.stakeTokenUserBalance = stakeToken.balanceOf(user);\r\n      data.userIncentivesToClaim = stakeToken.getTotalRewardsBalance(user);\r\n      data.userCooldown = stakeToken.stakersCooldowns(user);\r\n      data.userPermitNonce = isNonceAvailable ? IERC20WithNonce(underlyingToken)._nonces(user) : 0;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  function getStkAaveData(address user) public override view returns (AssetUIData memory) {\r\n    return _getStakedAssetData(STAKED_AAVE, AAVE, user, true);\r\n  }\r\n\r\n  function getStkBptData(address user) public override view returns (AssetUIData memory) {\r\n    return _getStakedAssetData(STAKED_BPT, BPT, user, false);\r\n  }\r\n\r\n  function getUserUIData(address user)\r\n    external\r\n    override\r\n    view\r\n    returns (AssetUIData memory, AssetUIData memory)\r\n  {\r\n    return (getStkAaveData(user), getStkBptData(user));\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aave\",\"type\":\"address\"},{\"internalType\":\"contract IStakedToken\",\"name\":\"stkAave\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bpt\",\"type\":\"address\"},{\"internalType\":\"contract IStakedToken\",\"name\":\"stkBpt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStkAaveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"distributionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakeTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncentivesToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPermitNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeUIHelperI.AssetUIData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStkBptData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"distributionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakeTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncentivesToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPermitNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeUIHelperI.AssetUIData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserUIData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"distributionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakeTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncentivesToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPermitNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeUIHelperI.AssetUIData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"distributionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"stakeTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenUserBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncentivesToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userPermitNonce\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeUIHelperI.AssetUIData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakeUIHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae90000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3fec2195ed130673932d0609bc49fcf4109364cfd44a0a3394f59f197f6eb396"}]}