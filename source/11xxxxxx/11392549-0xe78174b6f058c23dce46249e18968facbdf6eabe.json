{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\n\ncontract IStructuredStorage {\n\n    function setProxyLogicContractAndDeployer(address _proxyLogicContract, address _deployer) external;\n    function setProxyLogicContract(address _proxyLogicContract) external;\n\n    // *** Getter Methods ***\n    function getUint(bytes32 _key) external view returns(uint);\n    function getString(bytes32 _key) external view returns(string);\n    function getAddress(bytes32 _key) external view returns(address);\n    function getBytes(bytes32 _key) external view returns(bytes);\n    function getBool(bytes32 _key) external view returns(bool);\n    function getInt(bytes32 _key) external view returns(int);\n    function getBytes32(bytes32 _key) external view returns(bytes32);\n\n    // *** Getter Methods For Arrays ***\n    function getBytes32Array(bytes32 _key) external view returns (bytes32[]);\n    function getAddressArray(bytes32 _key) external view returns (address[]);\n    function getUintArray(bytes32 _key) external view returns (uint[]);\n    function getIntArray(bytes32 _key) external view returns (int[]);\n    function getBoolArray(bytes32 _key) external view returns (bool[]);\n\n    // *** Setter Methods ***\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string _value) external;\n    function setAddress(bytes32 _key, address _value) external;\n    function setBytes(bytes32 _key, bytes _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // *** Setter Methods For Arrays ***\n    function setBytes32Array(bytes32 _key, bytes32[] _value) external;\n    function setAddressArray(bytes32 _key, address[] _value) external;\n    function setUintArray(bytes32 _key, uint[] _value) external;\n    function setIntArray(bytes32 _key, int[] _value) external;\n    function setBoolArray(bytes32 _key, bool[] _value) external;\n\n    // *** Delete Methods ***\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteAddress(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n}\n\ncontract ITwoKeyAdmin {\n    function getDefaultIntegratorFeePercent() public view returns (uint);\n    function getDefaultNetworkTaxPercent() public view returns (uint);\n    function getTwoKeyRewardsReleaseDate() external view returns(uint);\n    function updateReceivedTokensAsModerator(uint amountOfTokens) public;\n    function updateReceivedTokensAsModeratorPPC(uint amountOfTokens, address campaignPlasma) public;\n    function addFeesCollectedInCurrency(string currency, uint amount) public payable;\n\n    function updateTokensReceivedFromDistributionFees(uint amountOfTokens) public;\n}\n\ncontract ITwoKeyCampaignValidator {\n    function isCampaignValidated(address campaign) public view returns (bool);\n    function validateAcquisitionCampaign(address campaign, string nonSingletonHash) public;\n    function validateDonationCampaign(address campaign, address donationConversionHandler, address donationLogicHandler, string nonSingletonHash) public;\n    function validateCPCCampaign(address campaign, string nonSingletonHash) public;\n}\n\ncontract ITwoKeyFeeManager {\n    function payDebtWhenConvertingOrWithdrawingProceeds(address _plasmaAddress, uint _debtPaying) public payable;\n    function getDebtForUser(address _userPlasma) public view returns (uint);\n    function payDebtWithDAI(address _plasmaAddress, uint _totalDebt, uint _debtPaid) public;\n    function payDebtWith2Key(address _beneficiaryPublic, address _plasmaAddress, uint _amountOf2keyForRewards) public;\n    function payDebtWith2KeyV2(\n        address _beneficiaryPublic,\n        address _plasmaAddress,\n        uint _amountOf2keyForRewards,\n        address _twoKeyEconomy,\n        address _twoKeyAdmin\n    ) public;\n    function setRegistrationFeeForUser(address _plasmaAddress, uint _registrationFee) public;\n    function addDebtForUser(address _plasmaAddress, uint _debtAmount, string _debtType) public;\n    function withdrawEtherCollected() public returns (uint);\n    function withdraw2KEYCollected() public returns (uint);\n    function withdrawDAICollected(address _dai) public returns (uint);\n}\n\ncontract ITwoKeyMaintainersRegistry {\n    function checkIsAddressMaintainer(address _sender) public view returns (bool);\n    function checkIsAddressCoreDev(address _sender) public view returns (bool);\n\n    function addMaintainers(address [] _maintainers) public;\n    function addCoreDevs(address [] _coreDevs) public;\n    function removeMaintainers(address [] _maintainers) public;\n    function removeCoreDevs(address [] _coreDevs) public;\n}\n\ncontract ITwoKeyReg {\n    function addTwoKeyEventSource(address _twoKeyEventSource) public;\n    function changeTwoKeyEventSource(address _twoKeyEventSource) public;\n    function addWhereContractor(address _userAddress, address _contractAddress) public;\n    function addWhereModerator(address _userAddress, address _contractAddress) public;\n    function addWhereReferrer(address _userAddress, address _contractAddress) public;\n    function addWhereConverter(address _userAddress, address _contractAddress) public;\n    function getContractsWhereUserIsContractor(address _userAddress) public view returns (address[]);\n    function getContractsWhereUserIsModerator(address _userAddress) public view returns (address[]);\n    function getContractsWhereUserIsRefferer(address _userAddress) public view returns (address[]);\n    function getContractsWhereUserIsConverter(address _userAddress) public view returns (address[]);\n    function getTwoKeyEventSourceAddress() public view returns (address);\n    function addName(string _name, address _sender, string _fullName, string _email, bytes signature) public;\n    function addNameByUser(string _name) public;\n    function getName2Owner(string _name) public view returns (address);\n    function getOwner2Name(address _sender) public view returns (string);\n    function getPlasmaToEthereum(address plasma) public view returns (address);\n    function getEthereumToPlasma(address ethereum) public view returns (address);\n    function checkIfTwoKeyMaintainerExists(address _maintainer) public view returns (bool);\n    function getUserData(address _user) external view returns (bytes);\n}\n\ncontract ITwoKeySingletoneRegistryFetchAddress {\n    function getContractProxyAddress(string _contractName) public view returns (address);\n    function getNonUpgradableContractAddress(string contractName) public view returns (address);\n    function getLatestCampaignApprovedVersion(string campaignType) public view returns (string);\n}\n\ninterface ITwoKeySingletonesRegistry {\n\n    /**\n    * @dev This event will be emitted every time a new proxy is created\n    * @param proxy representing the address of the proxy created\n    */\n    event ProxyCreated(address proxy);\n\n\n    /**\n    * @dev This event will be emitted every time a new implementation is registered\n    * @param version representing the version name of the registered implementation\n    * @param implementation representing the address of the registered implementation\n    * @param contractName is the name of the contract we added new version\n    */\n    event VersionAdded(string version, address implementation, string contractName);\n\n    /**\n    * @dev Registers a new version with its implementation address\n    * @param version representing the version name of the new implementation to be registered\n    * @param implementation representing the address of the new implementation to be registered\n    */\n    function addVersion(string _contractName, string version, address implementation) public;\n\n    /**\n    * @dev Tells the address of the implementation for a given version\n    * @param _contractName is the name of the contract we're querying\n    * @param version to query the implementation of\n    * @return address of the implementation registered for the given version\n    */\n    function getVersion(string _contractName, string version) public view returns (address);\n}\n\ncontract ITwoKeyEventSourceStorage is IStructuredStorage {\n\n}\n\ncontract ITwoKeySingletonUtils {\n\n    address public TWO_KEY_SINGLETON_REGISTRY;\n\n    // Modifier to restrict method calls only to maintainers\n    modifier onlyMaintainer {\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(\"TwoKeyMaintainersRegistry\");\n        require(ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).checkIsAddressMaintainer(msg.sender));\n        _;\n    }\n\n    /**\n     * @notice Function to get any singleton contract proxy address from TwoKeySingletonRegistry contract\n     * @param contractName is the name of the contract we're looking for\n     */\n    function getAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getContractProxyAddress(contractName);\n    }\n\n    function getNonUpgradableContractAddressFromTwoKeySingletonRegistry(\n        string contractName\n    )\n    internal\n    view\n    returns (address)\n    {\n        return ITwoKeySingletoneRegistryFetchAddress(TWO_KEY_SINGLETON_REGISTRY)\n            .getNonUpgradableContractAddress(contractName);\n    }\n}\n\ncontract UpgradeabilityStorage {\n    // Versions registry\n    ITwoKeySingletonesRegistry internal registry;\n\n    // Address of the current implementation\n    address internal _implementation;\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() public view returns (address) {\n        return _implementation;\n    }\n}\n\ncontract Upgradeable is UpgradeabilityStorage {\n    /**\n     * @dev Validates the caller is the versions registry.\n     * @param sender representing the address deploying the initial behavior of the contract\n     */\n    function initialize(address sender) public payable {\n        require(msg.sender == address(registry));\n    }\n}\n\ncontract TwoKeyEventSource is Upgradeable, ITwoKeySingletonUtils {\n\n    bool initialized;\n\n    ITwoKeyEventSourceStorage public PROXY_STORAGE_CONTRACT;\n\n\n    string constant _twoKeyCampaignValidator = \"TwoKeyCampaignValidator\";\n    string constant _twoKeyFactory = \"TwoKeyFactory\";\n    string constant _twoKeyRegistry = \"TwoKeyRegistry\";\n    string constant _twoKeyAdmin = \"TwoKeyAdmin\";\n    string constant _twoKeyExchangeRateContract = \"TwoKeyExchangeRateContract\";\n    string constant _twoKeyMaintainersRegistry = \"TwoKeyMaintainersRegistry\";\n    string constant _deepFreezeTokenPool = \"TwoKeyDeepFreezeTokenPool\";\n\n    /**\n     * Modifier which will allow only completely verified and validated contracts to call some functions\n     */\n    modifier onlyAllowedContracts {\n        address twoKeyCampaignValidator = getAddressFromTwoKeySingletonRegistry(_twoKeyCampaignValidator);\n        require(ITwoKeyCampaignValidator(twoKeyCampaignValidator).isCampaignValidated(msg.sender) == true);\n        _;\n    }\n\n    /**\n     * Modifier which will allow only TwoKeyCampaignValidator to make some calls\n     */\n    modifier onlyTwoKeyCampaignValidator {\n        address twoKeyCampaignValidator = getAddressFromTwoKeySingletonRegistry(_twoKeyCampaignValidator);\n        require(msg.sender == twoKeyCampaignValidator);\n        _;\n    }\n\n    /**\n     * @notice Function to set initial params in the contract\n     * @param _twoKeySingletonesRegistry is the address of TWO_KEY_SINGLETON_REGISTRY contract\n     * @param _proxyStorage is the address of proxy of storage contract\n     */\n    function setInitialParams(\n        address _twoKeySingletonesRegistry,\n        address _proxyStorage\n    )\n    external\n    {\n        require(initialized == false);\n\n        TWO_KEY_SINGLETON_REGISTRY = _twoKeySingletonesRegistry;\n        PROXY_STORAGE_CONTRACT = ITwoKeyEventSourceStorage(_proxyStorage);\n\n        initialized = true;\n    }\n\n    /**\n     * Events which will be emitted during use of system\n     * All events are emitted from this contract\n     * Every event is monitored in GraphQL\n     */\n\n    event Created(\n        address _campaign,\n        address _owner,\n        address _moderator\n    );\n\n    event Joined(\n        address _campaign,\n        address _from,\n        address _to\n    );\n\n    event Converted(\n        address _campaign,\n        address _converter,\n        uint256 _amount\n    );\n\n    event ConvertedAcquisition(\n        address _campaign,\n        address _converterPlasma,\n        uint256 _baseTokens,\n        uint256 _bonusTokens,\n        uint256 _conversionAmount,\n        bool _isFiatConversion,\n        uint _conversionId\n    );\n\n    event ConvertedDonation(\n        address _campaign,\n        address _converterPlasma,\n        uint _conversionAmount,\n        uint _conversionId\n    );\n\n    event Rewarded(\n        address _campaign,\n        address _to,\n        uint256 _amount\n    );\n\n    event Cancelled(\n        address _campaign,\n        address _converter,\n        uint256 _indexOrAmount\n    );\n\n    event Rejected(\n        address _campaign,\n        address _converter\n    );\n\n    event UpdatedPublicMetaHash(\n        uint timestamp,\n        string value\n    );\n\n    event UpdatedData(\n        uint timestamp,\n        uint value,\n        string action\n    );\n\n    event ReceivedEther(\n        address _sender,\n        uint value\n    );\n\n    event AcquisitionCampaignCreated(\n        address proxyLogicHandler,\n        address proxyConversionHandler,\n        address proxyAcquisitionCampaign,\n        address proxyPurchasesHandler,\n        address contractor\n    );\n\n    event DonationCampaignCreated(\n        address proxyDonationCampaign,\n        address proxyDonationConversionHandler,\n        address proxyDonationLogicHandler,\n        address contractor\n    );\n\n    event CPCCampaignCreated(\n        address proxyCPCCampaign,\n        address contractor //Contractor public address\n    );\n\n    event PriceUpdated(\n        bytes32 _currency,\n        uint newRate,\n        uint _timestamp,\n        address _updater\n    );\n\n    event UserRegistered(\n        string _handle,\n        address _address\n    );\n\n    event Executed(\n        address campaignAddress,\n        address converterPlasmaAddress,\n        uint conversionId,\n        uint tokens\n    );\n\n    event TokenWithdrawnFromPurchasesHandler(\n        address campaignAddress,\n        uint conversionID,\n        uint tokensAmountWithdrawn\n    );\n\n    event Debt (\n        address plasmaAddress,\n        uint weiAmount,\n        bool addition, //If true means debt increasing otherwise it means that event emitted when user paid part of the debt\n        string currency\n    );\n\n    event ReceivedTokensAsModerator(\n        address campaignAddress,\n        uint amountOfTokens\n    );\n\n    event ReceivedTokensDeepFreezeTokenPool(\n        address campaignAddress,\n        uint amountOfTokens\n    );\n\n    event HandleChanged(\n        address userPlasmaAddress,\n        string newHandle\n    );\n\n    event DaiReleased(\n        address contractSenderAddress,\n        uint amountOfDAI\n    );\n\n    event RebalancedRatesEvent (\n        uint priceAtBeginning,\n        uint priceAtRebalancingTime,\n        uint ratio,\n        uint amountOfTokensTransferedInAction,\n        string actionPerformedWithUpgradableExchange\n    );\n\n    event EndedBudgetCampaign (\n        address campaignPlasmaAddress,\n        uint contractorLeftover,\n        uint moderatorEarningsDistributed\n    );\n\n    event RebalancedRewards(\n        uint cycleId,\n        uint amountOfTokens,\n        string action\n    );\n\n    event UserWithdrawnNetworkEarnings(\n        address user,\n        uint amountOfTokens\n    );\n\n    /**\n     * @notice Function to emit created event every time campaign is created\n     * @param _campaign is the address of the deployed campaign\n     * @param _owner is the contractor address of the campaign\n     * @param _moderator is the address of the moderator in campaign\n     * @dev this function updates values in TwoKeyRegistry contract\n     */\n    function created(\n        address _campaign,\n        address _owner,\n        address _moderator\n    )\n    external\n    onlyTwoKeyCampaignValidator\n    {\n        emit Created(_campaign, _owner, _moderator);\n    }\n\n    /**\n     * @notice Function to emit created event every time someone has joined to campaign\n     * @param _campaign is the address of the deployed campaign\n     * @param _from is the address of the referrer\n     * @param _to is the address of person who has joined\n     * @dev this function updates values in TwoKeyRegistry contract\n     */\n    function joined(\n        address _campaign,\n        address _from,\n        address _to\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Joined(_campaign, _from, _to);\n    }\n\n    /**\n     * @notice Function to emit converted event\n     * @param _campaign is the address of main campaign contract\n     * @param _converter is the address of converter during the conversion\n     * @param _conversionAmount is conversion amount\n     */\n    function converted(\n        address _campaign,\n        address _converter,\n        uint256 _conversionAmount\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Converted(_campaign, _converter, _conversionAmount);\n    }\n\n    function rejected(\n        address _campaign,\n        address _converter\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Rejected(_campaign, _converter);\n    }\n\n\n    /**\n     * @notice Function to emit event every time conversion gets executed\n     * @param _campaignAddress is the main campaign contract address\n     * @param _converterPlasmaAddress is the address of converter plasma\n     * @param _conversionId is the ID of conversion, unique per campaign\n     */\n    function executed(\n        address _campaignAddress,\n        address _converterPlasmaAddress,\n        uint _conversionId,\n        uint tokens\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Executed(_campaignAddress, _converterPlasmaAddress, _conversionId, tokens);\n    }\n\n\n    /**\n     * @notice Function to emit created event every time conversion happened under AcquisitionCampaign\n     * @param _campaign is the address of the deployed campaign\n     * @param _converterPlasma is the converter address\n     * @param _baseTokens is the amount of tokens bought\n     * @param _bonusTokens is the amount of bonus tokens received\n     * @param _conversionAmount is the amount of conversion\n     * @param _isFiatConversion is flag representing if conversion is either FIAT or ETHER\n     * @param _conversionId is the id of conversion\n     * @dev this function updates values in TwoKeyRegistry contract\n     */\n    function convertedAcquisition(\n        address _campaign,\n        address _converterPlasma,\n        uint256 _baseTokens,\n        uint256 _bonusTokens,\n        uint256 _conversionAmount,\n        bool _isFiatConversion,\n        uint _conversionId\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit ConvertedAcquisition(\n            _campaign,\n            _converterPlasma,\n            _baseTokens,\n            _bonusTokens,\n            _conversionAmount,\n            _isFiatConversion,\n            _conversionId\n        );\n    }\n\n\n\n    /**\n     * @notice Function to emit created event every time conversion happened under DonationCampaign\n     * @param _campaign is the address of main campaign contract\n     * @param _converterPlasma is the address of the converter\n     * @param _conversionAmount is the amount of conversion\n     * @param _conversionId is the id of conversion\n     */\n    function convertedDonation(\n        address _campaign,\n        address _converterPlasma,\n        uint256 _conversionAmount,\n        uint256 _conversionId\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit ConvertedDonation(\n            _campaign,\n            _converterPlasma,\n            _conversionAmount,\n            _conversionId\n        );\n    }\n\n    /**\n     * @notice Function to emit created event every time bounty is distributed between influencers\n     * @param _campaign is the address of the deployed campaign\n     * @param _to is the reward receiver\n     * @param _amount is the reward amount\n     */\n    function rewarded(\n        address _campaign,\n        address _to,\n        uint256 _amount\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Rewarded(_campaign, _to, _amount);\n    }\n\n    /**\n     * @notice Function to emit created event every time campaign is cancelled\n     * @param _campaign is the address of the cancelled campaign\n     * @param _converter is the address of the converter\n     * @param _indexOrAmount is the amount of campaign\n     */\n    function cancelled(\n        address  _campaign,\n        address _converter,\n        uint256 _indexOrAmount\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit Cancelled(_campaign, _converter, _indexOrAmount);\n    }\n\n    /**\n     * @notice Function to emit event every time someone starts new Acquisition campaign\n     * @param proxyLogicHandler is the address of TwoKeyAcquisitionLogicHandler proxy deployed by TwoKeyFactory\n     * @param proxyConversionHandler is the address of TwoKeyConversionHandler proxy deployed by TwoKeyFactory\n     * @param proxyAcquisitionCampaign is the address of TwoKeyAcquisitionCampaign proxy deployed by TwoKeyFactory\n     * @param proxyPurchasesHandler is the address of TwoKeyPurchasesHandler proxy deployed by TwoKeyFactory\n     */\n    function acquisitionCampaignCreated(\n        address proxyLogicHandler,\n        address proxyConversionHandler,\n        address proxyAcquisitionCampaign,\n        address proxyPurchasesHandler,\n        address contractor\n    )\n    external\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_twoKeyFactory));\n        emit AcquisitionCampaignCreated(\n            proxyLogicHandler,\n            proxyConversionHandler,\n            proxyAcquisitionCampaign,\n            proxyPurchasesHandler,\n            contractor\n        );\n    }\n\n    /**\n     * @notice Function to emit event every time someone starts new Donation campaign\n     * @param proxyDonationCampaign is the address of TwoKeyDonationCampaign proxy deployed by TwoKeyFactory\n     * @param proxyDonationConversionHandler is the address of TwoKeyDonationConversionHandler proxy deployed by TwoKeyFactory\n     * @param proxyDonationLogicHandler is the address of TwoKeyDonationLogicHandler proxy deployed by TwoKeyFactory\n     */\n    function donationCampaignCreated(\n        address proxyDonationCampaign,\n        address proxyDonationConversionHandler,\n        address proxyDonationLogicHandler,\n        address contractor\n    )\n    external\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_twoKeyFactory));\n        emit DonationCampaignCreated(\n            proxyDonationCampaign,\n            proxyDonationConversionHandler,\n            proxyDonationLogicHandler,\n            contractor\n        );\n    }\n\n\n    /**\n     * @notice Function to emit event every time someone starts new CPC campaign\n     * @param proxyCPC is the proxy address of CPC campaign\n     * @param contractor is the PUBLIC address of campaign contractor\n     */\n    function cpcCampaignCreated(\n        address proxyCPC,\n        address contractor\n    )\n    external\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_twoKeyFactory));\n        emit CPCCampaignCreated(\n            proxyCPC,\n            contractor\n        );\n    }\n\n    /**\n     * @notice Function which will emit event PriceUpdated every time that happens under TwoKeyExchangeRateContract\n     * @param _currency is the hexed string of currency name\n     * @param _newRate is the new rate\n     * @param _timestamp is the time of updating\n     * @param _updater is the maintainer address which performed this call\n     */\n    function priceUpdated(\n        bytes32 _currency,\n        uint _newRate,\n        uint _timestamp,\n        address _updater\n    )\n    external\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_twoKeyExchangeRateContract));\n        emit PriceUpdated(_currency, _newRate, _timestamp, _updater);\n    }\n\n    /**\n     * @notice Function to emit event every time user is registered\n     * @param _handle is the handle of the user\n     * @param _address is the address of the user\n     */\n    function userRegistered(\n        string _handle,\n        address _address,\n        uint _registrationFee\n    )\n    external\n    {\n        require(isAddressMaintainer(msg.sender) == true);\n        ITwoKeyFeeManager(getAddressFromTwoKeySingletonRegistry(\"TwoKeyFeeManager\")).setRegistrationFeeForUser(_address, _registrationFee);\n        emit UserRegistered(_handle, _address);\n        emit Debt(_address, _registrationFee, true, \"ETH\");\n    }\n\n    function addAdditionalDebtForUser(\n        address _plasmaAddress,\n        uint _debtAmount,\n        string _debtType\n    )\n    public\n    {\n        require(isAddressMaintainer(msg.sender) == true);\n        ITwoKeyFeeManager(getAddressFromTwoKeySingletonRegistry(\"TwoKeyFeeManager\")).addDebtForUser(_plasmaAddress, _debtAmount, _debtType);\n        emit Debt(_plasmaAddress, _debtAmount, true, \"ETH\");\n    }\n\n    /**\n     * @notice Function which will emit every time some debt is increased or paid\n     * @param _plasmaAddress is the address of the user we are increasing/decreasing debt for\n     * @param _amount is the amount of ETH he paid/increased\n     * @param _isAddition is stating either debt increased or paid\n     */\n    function emitDebtEvent(\n        address _plasmaAddress,\n        uint _amount,\n        bool _isAddition,\n        string _currency\n    )\n    external\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyFeeManager\"));\n        emit Debt(\n            _plasmaAddress,\n            _amount,\n            _isAddition,\n            _currency\n        );\n    }\n\n    /**\n     * @notice Function which will be called by TwoKeyAdmin every time it receives 2KEY tokens\n     * as a moderator on TwoKeyCampaigns\n     * @param _campaignAddress is the address of the campaign sending tokens\n     * @param _amountOfTokens is the amount of tokens sent\n     */\n    function emitReceivedTokensAsModerator(\n        address _campaignAddress,\n        uint _amountOfTokens\n    )\n    public\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin));\n        emit ReceivedTokensAsModerator(\n            _campaignAddress,\n            _amountOfTokens\n        );\n    }\n\n    /**\n     * @notice Function which will be called by TwoKeyDeepFreezeTokenPool every time it receives 2KEY tokens\n     * from moderator rewards on the conversion event\n     * @param _campaignAddress is the address of the campaign sending tokens\n     * @param _amountOfTokens is the amount of tokens sent\n     */\n    function emitReceivedTokensToDeepFreezeTokenPool(\n        address _campaignAddress,\n        uint _amountOfTokens\n    )\n    public\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(_deepFreezeTokenPool));\n        emit ReceivedTokensDeepFreezeTokenPool(\n            _campaignAddress,\n            _amountOfTokens\n        );\n    }\n\n\n    /**\n     * @notice Function which will emit an event every time somebody performs\n     * withdraw of bought tokens in AcquisitionCampaign contracts\n     * @param _campaignAddress is the address of main campaign contract\n     * @param _conversionID is the unique ID of conversion inside one campaign\n     * @param _tokensAmountWithdrawn is the amount of tokens user withdrawn\n     */\n    function tokensWithdrawnFromPurchasesHandler(\n        address _campaignAddress,\n        uint _conversionID,\n        uint _tokensAmountWithdrawn\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit TokenWithdrawnFromPurchasesHandler(_campaignAddress, _conversionID, _tokensAmountWithdrawn);\n    }\n\n\n    function emitRebalancedRatesEvent(\n        uint priceAtBeginning,\n        uint priceAtRebalancingTime,\n        uint ratio,\n        uint amountOfTokensTransferedInAction,\n        string actionPerformedWithUpgradableExchange\n    )\n    external\n    onlyAllowedContracts\n    {\n        emit RebalancedRatesEvent(\n            priceAtBeginning,\n            priceAtRebalancingTime,\n            ratio,\n            amountOfTokensTransferedInAction,\n            actionPerformedWithUpgradableExchange\n        );\n    }\n\n    function emitHandleChangedEvent(\n        address _userPlasmaAddress,\n        string _newHandle\n    )\n    public\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyRegistry\"));\n\n        emit HandleChanged(\n            _userPlasmaAddress,\n            _newHandle\n        );\n    }\n\n\n    /**\n     * @notice          Function to emit an event whenever DAI is released as an income\n     *\n     * @param           _campaignContractAddress is campaign contract address\n     * @param           _amountOfDAI is the amount of DAI being released\n     */\n    function emitDAIReleasedAsIncome(\n        address _campaignContractAddress,\n        uint _amountOfDAI\n    )\n    public\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyUpgradableExchange\"));\n\n        emit DaiReleased(\n            _campaignContractAddress,\n            _amountOfDAI\n        );\n    }\n\n    function emitEndedBudgetCampaign(\n        address campaignPlasmaAddress,\n        uint contractorLeftover,\n        uint moderatorEarningsDistributed\n    )\n    public\n    {\n        require (msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyBudgetCampaignsPaymentsHandler\"));\n\n        emit EndedBudgetCampaign(\n            campaignPlasmaAddress,\n            contractorLeftover,\n            moderatorEarningsDistributed\n        );\n    }\n\n\n    function emitRebalancedRewards(\n        uint cycleId,\n        uint difference,\n        string action\n    )\n    public\n    {\n        require (msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyBudgetCampaignsPaymentsHandler\"));\n\n        emit RebalancedRewards(\n            cycleId,\n            difference,\n            action\n        );\n    }\n\n\n    /**\n     * @notice          Function which will emit event that user have withdrawn network earnings\n     * @param           user is the address of the user\n     * @param           amountOfTokens is the amount of tokens user withdrawn as network earnings\n     */\n    function emitUserWithdrawnNetworkEarnings(\n        address user,\n        uint amountOfTokens\n    )\n    public\n    {\n        require(msg.sender == getAddressFromTwoKeySingletonRegistry(\"TwoKeyParticipationMiningPool\"));\n\n        emit UserWithdrawnNetworkEarnings(\n            user,\n            amountOfTokens\n        );\n    }\n\n\n    /**\n     * @notice Function to check adequate plasma address for submitted eth address\n     * @param me is the ethereum address we request corresponding plasma address for\n     */\n    function plasmaOf(\n        address me\n    )\n    public\n    view\n    returns (address)\n    {\n        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry(_twoKeyRegistry);\n        address plasma = ITwoKeyReg(twoKeyRegistry).getEthereumToPlasma(me);\n        if (plasma != address(0)) {\n            return plasma;\n        }\n        return me;\n    }\n\n    /**\n     * @notice Function to determine ethereum address of plasma address\n     * @param me is the plasma address of the user\n     * @return ethereum address\n     */\n    function ethereumOf(\n        address me\n    )\n    public\n    view\n    returns (address)\n    {\n        address twoKeyRegistry = getAddressFromTwoKeySingletonRegistry(_twoKeyRegistry);\n        address ethereum = ITwoKeyReg(twoKeyRegistry).getPlasmaToEthereum(me);\n        if (ethereum != address(0)) {\n            return ethereum;\n        }\n        return me;\n    }\n\n    /**\n     * @notice Address to check if an address is maintainer in TwoKeyMaintainersRegistry\n     * @param _maintainer is the address we're checking this for\n     */\n    function isAddressMaintainer(\n        address _maintainer\n    )\n    public\n    view\n    returns (bool)\n    {\n        address twoKeyMaintainersRegistry = getAddressFromTwoKeySingletonRegistry(_twoKeyMaintainersRegistry);\n        bool _isMaintainer = ITwoKeyMaintainersRegistry(twoKeyMaintainersRegistry).checkIsAddressMaintainer(_maintainer);\n        return _isMaintainer;\n    }\n\n    /**\n     * @notice In default TwoKeyAdmin will be moderator and his fee percentage per conversion is predefined\n     */\n    function getTwoKeyDefaultIntegratorFeeFromAdmin()\n    public\n    view\n    returns (uint)\n    {\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin);\n        uint integratorFeePercentage = ITwoKeyAdmin(twoKeyAdmin).getDefaultIntegratorFeePercent();\n        return integratorFeePercentage;\n    }\n\n    /**\n     * @notice Function to get default network tax percentage\n     */\n    function getTwoKeyDefaultNetworkTaxPercent()\n    public\n    view\n    returns (uint)\n    {\n        address twoKeyAdmin = getAddressFromTwoKeySingletonRegistry(_twoKeyAdmin);\n        uint networkTaxPercent = ITwoKeyAdmin(twoKeyAdmin).getDefaultNetworkTaxPercent();\n        return networkTaxPercent;\n    }\n}\n\n","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_twoKeySingletonesRegistry\",\"type\":\"address\"},{\"name\":\"_proxyStorage\",\"type\":\"address\"}],\"name\":\"setInitialParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"emitReceivedTokensAsModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"emitUserWithdrawnNetworkEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"me\",\"type\":\"address\"}],\"name\":\"ethereumOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROXY_STORAGE_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_converter\",\"type\":\"address\"},{\"name\":\"_conversionAmount\",\"type\":\"uint256\"}],\"name\":\"converted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"me\",\"type\":\"address\"}],\"name\":\"plasmaOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"created\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxyDonationCampaign\",\"type\":\"address\"},{\"name\":\"proxyDonationConversionHandler\",\"type\":\"address\"},{\"name\":\"proxyDonationLogicHandler\",\"type\":\"address\"},{\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"donationCampaignCreated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxyLogicHandler\",\"type\":\"address\"},{\"name\":\"proxyConversionHandler\",\"type\":\"address\"},{\"name\":\"proxyAcquisitionCampaign\",\"type\":\"address\"},{\"name\":\"proxyPurchasesHandler\",\"type\":\"address\"},{\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"acquisitionCampaignCreated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignContractAddress\",\"type\":\"address\"},{\"name\":\"_amountOfDAI\",\"type\":\"uint256\"}],\"name\":\"emitDAIReleasedAsIncome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"isAddressMaintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTwoKeyDefaultIntegratorFeeFromAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plasmaAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_isAddition\",\"type\":\"bool\"},{\"name\":\"_currency\",\"type\":\"string\"}],\"name\":\"emitDebtEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_converterPlasma\",\"type\":\"address\"},{\"name\":\"_conversionAmount\",\"type\":\"uint256\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"}],\"name\":\"convertedDonation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTwoKeyDefaultNetworkTaxPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proxyCPC\",\"type\":\"address\"},{\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"cpcCampaignCreated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"campaignPlasmaAddress\",\"type\":\"address\"},{\"name\":\"contractorLeftover\",\"type\":\"uint256\"},{\"name\":\"moderatorEarningsDistributed\",\"type\":\"uint256\"}],\"name\":\"emitEndedBudgetCampaign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"emitReceivedTokensToDeepFreezeTokenPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TWO_KEY_SINGLETON_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"joined\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plasmaAddress\",\"type\":\"address\"},{\"name\":\"_debtAmount\",\"type\":\"uint256\"},{\"name\":\"_debtType\",\"type\":\"string\"}],\"name\":\"addAdditionalDebtForUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"name\":\"_conversionID\",\"type\":\"uint256\"},{\"name\":\"_tokensAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"tokensWithdrawnFromPurchasesHandler\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userPlasmaAddress\",\"type\":\"address\"},{\"name\":\"_newHandle\",\"type\":\"string\"}],\"name\":\"emitHandleChangedEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"name\":\"_converterPlasmaAddress\",\"type\":\"address\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"executed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewarded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"priceAtBeginning\",\"type\":\"uint256\"},{\"name\":\"priceAtRebalancingTime\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"amountOfTokensTransferedInAction\",\"type\":\"uint256\"},{\"name\":\"actionPerformedWithUpgradableExchange\",\"type\":\"string\"}],\"name\":\"emitRebalancedRatesEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_converter\",\"type\":\"address\"},{\"name\":\"_indexOrAmount\",\"type\":\"uint256\"}],\"name\":\"cancelled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"rejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cycleId\",\"type\":\"uint256\"},{\"name\":\"difference\",\"type\":\"uint256\"},{\"name\":\"action\",\"type\":\"string\"}],\"name\":\"emitRebalancedRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_campaign\",\"type\":\"address\"},{\"name\":\"_converterPlasma\",\"type\":\"address\"},{\"name\":\"_baseTokens\",\"type\":\"uint256\"},{\"name\":\"_bonusTokens\",\"type\":\"uint256\"},{\"name\":\"_conversionAmount\",\"type\":\"uint256\"},{\"name\":\"_isFiatConversion\",\"type\":\"bool\"},{\"name\":\"_conversionId\",\"type\":\"uint256\"}],\"name\":\"convertedAcquisition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_registrationFee\",\"type\":\"uint256\"}],\"name\":\"userRegistered\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_currency\",\"type\":\"bytes32\"},{\"name\":\"_newRate\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"priceUpdated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_converter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_converterPlasma\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_baseTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bonusTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_conversionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isFiatConversion\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_conversionId\",\"type\":\"uint256\"}],\"name\":\"ConvertedAcquisition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_converterPlasma\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_conversionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_conversionId\",\"type\":\"uint256\"}],\"name\":\"ConvertedDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_converter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_indexOrAmount\",\"type\":\"uint256\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_campaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"}],\"name\":\"UpdatedPublicMetaHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"string\"}],\"name\":\"UpdatedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyLogicHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyConversionHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyAcquisitionCampaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyPurchasesHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"AcquisitionCampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyDonationCampaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyDonationConversionHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proxyDonationLogicHandler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"DonationCampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxyCPCCampaign\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"}],\"name\":\"CPCCampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_handle\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"converterPlasmaAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"conversionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"conversionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensAmountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawnFromPurchasesHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"plasmaAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addition\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"currency\",\"type\":\"string\"}],\"name\":\"Debt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokensAsModerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokensDeepFreezeTokenPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userPlasmaAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newHandle\",\"type\":\"string\"}],\"name\":\"HandleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractSenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfDAI\",\"type\":\"uint256\"}],\"name\":\"DaiReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"priceAtBeginning\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceAtRebalancingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountOfTokensTransferedInAction\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"actionPerformedWithUpgradableExchange\",\"type\":\"string\"}],\"name\":\"RebalancedRatesEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"campaignPlasmaAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractorLeftover\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"moderatorEarningsDistributed\",\"type\":\"uint256\"}],\"name\":\"EndedBudgetCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cycleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"string\"}],\"name\":\"RebalancedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawnNetworkEarnings\",\"type\":\"event\"}]","ContractName":"TwoKeyEventSource","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}