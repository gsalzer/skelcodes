{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.26;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract ETH_2_0_DepositContract {\r\n    \r\n     // all ETH get burned to this address\r\n     address public burnAddress = 0x0000000000000000000000000000000000000000;\r\n     \r\n     // owner, mainly just for the lpp announcements and has no other rights\r\n     address public owner = msg.sender;\r\n     \r\n     // mapping of all ETH 2.0 balances\r\n     mapping(address => uint256) public burns;\r\n     \r\n     // Finalization date\r\n     uint256 public endDate = block.timestamp + (64*24*60*60); // 64 days\r\n     \r\n     // Lpp Announcement via log event\r\n     struct AnnouncementStruct {\r\n         address accountLpp;\r\n     }\r\n     event Announcement(AnnouncementStruct);\r\n     \r\n     function() external payable {\r\n         deposit();\r\n     }\r\n     \r\n     // deposit eth for eth 2.0\r\n     function deposit() public payable {\r\n\r\n         // record amount of ETH 2.0 token\r\n         if( block.timestamp < endDate)\r\n            burns[msg.sender] = msg.value;\r\n         \r\n         // burn all ether after endDate to unrecoverable 0x0000.. address\r\n         else\r\n            burnAddress.transfer(address(this).balance);\r\n     }\r\n     \r\n       // an option to burn prematurely\r\n     function burnBalance() external {\r\n         \r\n         require(msg.sender == owner);\r\n         burnAddress.transfer(address(this).balance);\r\n         \r\n     }\r\n     \r\n     // lpp broadcasts via log events\r\n     function log(address lpp) external {\r\n         \r\n         require(msg.sender == owner);\r\n         AnnouncementStruct s;\r\n         s.accountLpp = lpp;\r\n         emit Announcement(s);\r\n         \r\n     }\r\n     \r\n   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lpp\",\"type\":\"address\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"name\":\"accountLpp\",\"type\":\"address\"}],\"indexed\":false,\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"Announcement\",\"type\":\"event\"}]","ContractName":"ETH_2_0_DepositContract","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a47eecef0308179f307709a004bd37ab5f58dec7feb540983144630c3134f2d5"}]}