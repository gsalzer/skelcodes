{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0.\r\n */\r\n\r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract IERC20 {\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _who) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return divCeil(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\r\n    */\r\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b != 0, errorMessage);\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = ((a - 1) / b) + 1;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing loan sets\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\r\n *\r\n */\r\nlibrary EnumerableBytes32Set {\r\n\r\n    struct Bytes32Set {\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) index;\r\n        bytes32[] values;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an address value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return addBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     * Returns false if the value was already in the set.\r\n     */\r\n    function addBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (!contains(set, value)){\r\n            set.index[value] = set.values.push(value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes an address value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return removeBytes32(set, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     * Returns false if the value was not present in the set.\r\n     */\r\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        if (contains(set, value)){\r\n            uint256 toDeleteIndex = set.index[value] - 1;\r\n            uint256 lastIndex = set.values.length - 1;\r\n\r\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set.values[lastIndex];\r\n\r\n                // Move the last value to the index where the deleted value is\r\n                set.values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            }\r\n\r\n            // Delete the index entry for the deleted value\r\n            delete set.index[value];\r\n\r\n            // Delete the old entry for the moved value\r\n            set.values.pop();\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function containsAddress(Bytes32Set storage set, address addrvalue)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 value;\r\n        assembly {\r\n            value := addrvalue\r\n        }\r\n        return set.index[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an array with all values in the set. O(N).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     * WARNING: This function may run out of gas on large sets: use {length} and\r\n     * {get} instead in these cases.\r\n     */\r\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory output)\r\n    {\r\n        uint256 end = start + count;\r\n        require(end >= start, \"addition overflow\");\r\n        end = set.values.length < end ? set.values.length : end;\r\n        if (end == 0 || start >= end) {\r\n            return output;\r\n        }\r\n\r\n        output = new bytes32[](end-start);\r\n        for (uint256 i = start; i < end; i++) {\r\n            output[i-start] = set.values[i];\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements on the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return set.values.length;\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function get(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set.values[index];\r\n    }\r\n\r\n   /** @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function getAddress(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        bytes32 value = set.values[index];\r\n        address addrvalue;\r\n        assembly {\r\n            addrvalue := value\r\n        }\r\n        return addrvalue;\r\n    }\r\n}\r\n\r\ncontract StakingUpgradeable is Ownable {\r\n    address public implementation;\r\n}\r\n\r\ncontract StakingState is StakingUpgradeable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\r\n\r\n    uint256 public constant initialCirculatingSupply = 1030000000e18 - 889389933e18;\r\n    address internal constant ZERO_ADDRESS = address(0);\r\n\r\n    bool public isPaused;\r\n\r\n    address public fundsWallet;\r\n\r\n    mapping(address => uint256) internal _totalSupplyPerToken;                      // token => value\r\n    mapping(address => mapping(address => uint256)) internal _balancesPerToken;     // token => account => value\r\n\r\n    mapping(address => address) public delegate;                                    // user => delegate\r\n    mapping(address => mapping(address => uint256)) public delegatedPerToken;       // token => user => value\r\n\r\n    uint256 public bzrxPerTokenStored;\r\n    mapping(address => uint256) public bzrxRewardsPerTokenPaid;                     // user => value\r\n    mapping(address => uint256) public bzrxRewards;                                 // user => value\r\n    mapping(address => uint256) public bzrxVesting;                                 // user => value\r\n\r\n    uint256 public stableCoinPerTokenStored;\r\n    mapping(address => uint256) public stableCoinRewardsPerTokenPaid;               // user => value\r\n    mapping(address => uint256) public stableCoinRewards;                           // user => value\r\n    mapping(address => uint256) public stableCoinVesting;                           // user => value\r\n\r\n    uint256 public vBZRXWeightStored;\r\n    uint256 public iBZRXWeightStored;\r\n    uint256 public LPTokenWeightStored;\r\n\r\n    EnumerableBytes32Set.Bytes32Set internal _delegatedSet;\r\n\r\n    uint256 public lastRewardsAddTime;\r\n\r\n    mapping(address => uint256) internal _vestingLastSync;\r\n\r\n    mapping(address => address[]) public swapPaths;\r\n    mapping(address => uint256) public stakingRewards;\r\n    uint256 public rewardPercent = 50e18;\r\n    uint256 public maxUniswapDisagreement = 3e18;\r\n    uint256 public maxCurveDisagreement = 3e18;\r\n    uint256 public callerRewardDivisor = 100;\r\n\r\n    address[] public currentFeeTokens;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline)\r\n        external\r\n        returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\ninterface ICurve3Pool {\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount)\r\n        external;\r\n\r\n    function get_virtual_price()\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IBZxPartial {\r\n    enum FeeClaimType {\r\n        All,\r\n        Lending,\r\n        Trading,\r\n        Borrowing\r\n    }\r\n    \r\n    function withdrawFees(\r\n        address[] calldata tokens,\r\n        address receiver,\r\n        FeeClaimType feeType)\r\n        external\r\n        returns (uint256[] memory amounts);\r\n\r\n    function queryFees(\r\n        address[] calldata tokens,\r\n        FeeClaimType feeType)\r\n        external\r\n        view\r\n        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\r\n\r\n    function priceFeeds()\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ncontract StakingConstants {\r\n\r\n    address public constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\r\n    address public constant vBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\r\n    address public constant iBZRX = 0x18240BD9C07fA6156Ce3F3f61921cC82b2619157;\r\n    address public constant LPToken = 0xe26A220a341EAca116bDa64cF9D5638A935ae629;\r\n    IERC20 public constant curve3Crv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\r\n\r\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    IUniswapV2Router public constant uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    ICurve3Pool public constant curve3pool = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\r\n    IBZxPartial public constant bZx = IBZxPartial(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\r\n\r\n    uint256 public constant cliffDuration =                15768000; // 86400 * 365 * 0.5\r\n    uint256 public constant vestingDuration =              126144000; // 86400 * 365 * 4\r\n    uint256 internal constant vestingDurationAfterCliff =  110376000; // 86400 * 365 * 3.5\r\n    uint256 internal constant vestingStartTimestamp =      1594648800; // start_time\r\n    uint256 internal constant vestingCliffTimestamp =      vestingStartTimestamp + cliffDuration;\r\n    uint256 internal constant vestingEndTimestamp =        vestingStartTimestamp + vestingDuration;\r\n    uint256 internal constant _startingVBZRXBalance =      889389933e18; // 889,389,933 BZRX\r\n\r\n    uint256 public constant BZRXWeightStored = 1e18;\r\n\r\n    struct DelegatedTokens {\r\n        address user;\r\n        uint256 BZRX;\r\n        uint256 vBZRX;\r\n        uint256 iBZRX;\r\n        uint256 LPToken;\r\n        uint256 totalVotes;\r\n    }\r\n\r\n    event Stake(\r\n        address indexed user,\r\n        address indexed token,\r\n        address indexed delegate,\r\n        uint256 amount\r\n    );\r\n\r\n    event Unstake(\r\n        address indexed user,\r\n        address indexed token,\r\n        address indexed delegate,\r\n        uint256 amount\r\n    );\r\n\r\n    event AddRewards(\r\n        address indexed sender,\r\n        uint256 bzrxAmount,\r\n        uint256 stableCoinAmount\r\n    );\r\n\r\n    event Claim(\r\n        address indexed user,\r\n        uint256 bzrxAmount,\r\n        uint256 stableCoinAmount\r\n    );\r\n\r\n    event ChangeDelegate(\r\n        address indexed user,\r\n        address indexed oldDelegate,\r\n        address indexed newDelegate\r\n    );\r\n\r\n    event WithdrawFees(\r\n        address indexed sender\r\n    );\r\n\r\n    event ConvertFees(\r\n        address indexed sender,\r\n        uint256 bzrxOutput,\r\n        uint256 stableCoinOutput\r\n    );\r\n\r\n    event DistributeFees(\r\n        address indexed sender,\r\n        uint256 bzrxRewards,\r\n        uint256 stableCoinRewards\r\n    );\r\n}\r\n\r\ncontract IVestingToken is IERC20 {\r\n    function claim()\r\n        external;\r\n\r\n    function vestedBalanceOf(\r\n        address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function claimedBalanceOf(\r\n        address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalVested()\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface ILoanPool {\r\n    function tokenPrice()\r\n        external\r\n        view\r\n        returns (uint256 price);\r\n\r\n    function borrowInterestRate()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalAssetSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function assetBalanceOf(\r\n        address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ncontract StakingV1t is StakingState, StakingConstants {\r\n\r\n    modifier checkPause() {\r\n        require(!isPaused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    function stake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values)\r\n        external\r\n        checkPause\r\n        updateRewards(msg.sender)\r\n    {\r\n        require(tokens.length == values.length, \"count mismatch\");\r\n\r\n        address currentDelegate = delegate[msg.sender];\r\n        if (currentDelegate == address(0)) {\r\n            currentDelegate = msg.sender;\r\n            delegate[msg.sender] = currentDelegate;\r\n            _delegatedSet.addAddress(msg.sender);\r\n        }\r\n\r\n        address token;\r\n        uint256 stakeAmount;\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            token = tokens[i];\r\n            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken, \"invalid token\");\r\n\r\n            stakeAmount = values[i];\r\n            if (stakeAmount == 0) {\r\n                continue;\r\n            }\r\n\r\n            _balancesPerToken[token][msg.sender] = _balancesPerToken[token][msg.sender].add(stakeAmount);\r\n            _totalSupplyPerToken[token] = _totalSupplyPerToken[token].add(stakeAmount);\r\n\r\n            delegatedPerToken[currentDelegate][token] = delegatedPerToken[currentDelegate][token]\r\n                .add(stakeAmount);\r\n\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), stakeAmount);\r\n\r\n            emit Stake(\r\n                msg.sender,\r\n                token,\r\n                currentDelegate,\r\n                stakeAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function unstake(\r\n        address[] memory tokens,\r\n        uint256[] memory values)\r\n        public\r\n        checkPause\r\n        updateRewards(msg.sender)\r\n    {\r\n        require(tokens.length == values.length, \"count mismatch\");\r\n\r\n        address currentDelegate = delegate[msg.sender];\r\n\r\n        address token;\r\n        uint256 unstakeAmount;\r\n        uint256 stakedAmount;\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            token = tokens[i];\r\n            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken, \"invalid token\");\r\n\r\n            unstakeAmount = values[i];\r\n            stakedAmount = _balancesPerToken[token][msg.sender];\r\n            if (unstakeAmount == 0 || stakedAmount == 0) {\r\n                continue;\r\n            }\r\n            if (unstakeAmount > stakedAmount) {\r\n                unstakeAmount = stakedAmount;\r\n            }\r\n\r\n            _balancesPerToken[token][msg.sender] = stakedAmount - unstakeAmount; // will not overflow\r\n            _totalSupplyPerToken[token] = _totalSupplyPerToken[token] - unstakeAmount; // will not overflow\r\n\r\n            delegatedPerToken[currentDelegate][token] = delegatedPerToken[currentDelegate][token]\r\n                .sub(unstakeAmount);\r\n\r\n            IERC20(token).safeTransfer(msg.sender, unstakeAmount);\r\n\r\n            emit Unstake(\r\n                msg.sender,\r\n                token,\r\n                currentDelegate,\r\n                unstakeAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claim()\r\n        external\r\n        checkPause\r\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\r\n    {\r\n        return _claim(false);\r\n    }\r\n\r\n    function claimAndRestake()\r\n        external\r\n        checkPause\r\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\r\n    {\r\n        return _claim(true);\r\n    }\r\n\r\n    function _claim(\r\n        bool restake)\r\n        internal\r\n        updateRewards(msg.sender)\r\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\r\n    {\r\n        (bzrxRewardsEarned, stableCoinRewardsEarned,,) = _earned(\r\n            msg.sender,\r\n            0,\r\n            0,\r\n            0 // vesting BZRX already handled in updateRewards\r\n        );\r\n\r\n        if (bzrxRewardsEarned != 0) {\r\n            bzrxRewards[msg.sender] = 0;\r\n            if (restake) {\r\n                _restakeBZRX(\r\n                    msg.sender,\r\n                    bzrxRewardsEarned\r\n                );\r\n            } else {\r\n                IERC20(BZRX).transfer(msg.sender, bzrxRewardsEarned);\r\n            }\r\n        }\r\n        if (stableCoinRewardsEarned != 0) {\r\n            stableCoinRewards[msg.sender] = 0;\r\n            curve3Crv.transfer(msg.sender, stableCoinRewardsEarned);\r\n        }\r\n\r\n        emit Claim(\r\n            msg.sender,\r\n            bzrxRewardsEarned,\r\n            stableCoinRewardsEarned\r\n        );\r\n    }\r\n\r\n    function _restakeBZRX(\r\n        address account,\r\n        uint256 amount)\r\n        internal\r\n    {\r\n        address currentDelegate = delegate[account];\r\n        _balancesPerToken[BZRX][account] = _balancesPerToken[BZRX][account]\r\n            .add(amount);\r\n\r\n        _totalSupplyPerToken[BZRX] = _totalSupplyPerToken[BZRX]\r\n            .add(amount);\r\n\r\n        delegatedPerToken[currentDelegate][BZRX] = delegatedPerToken[currentDelegate][BZRX]\r\n            .add(amount);\r\n\r\n        emit Stake(\r\n            account,\r\n            BZRX,\r\n            currentDelegate,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function exit()\r\n        public\r\n        // unstake() does a checkPause\r\n    {\r\n        address[] memory tokens = new address[](4);\r\n        uint256[] memory values = new uint256[](4);\r\n        tokens[0] = iBZRX;\r\n        tokens[1] = LPToken;\r\n        tokens[2] = vBZRX;\r\n        tokens[3] = BZRX;\r\n        values[0] = uint256(-1);\r\n        values[1] = uint256(-1);\r\n        values[2] = uint256(-1);\r\n        values[3] = uint256(-1);\r\n        \r\n        unstake(tokens, values);\r\n        _claim(false);\r\n    }\r\n\r\n    modifier updateRewards(address account) {\r\n        uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];\r\n        (bzrxRewards[account], stableCoinRewards[account],,) = _earned(\r\n            account,\r\n            0,\r\n            0,\r\n            vBZRXBalance\r\n        );\r\n        _vestingLastSync[account] = block.timestamp;\r\n\r\n        if (vBZRXBalance != 0) {\r\n            // make sure claim is up to date\r\n            IVestingToken(vBZRX).claim();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function earned(\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting)\r\n    {\r\n        (bzrxRewardsEarned, stableCoinRewardsEarned,,) = _earned(\r\n            account,\r\n            0,\r\n            0,\r\n            _balancesPerToken[vBZRX][account]\r\n        );\r\n    }\r\n\r\n    function _earned(\r\n        address account,\r\n        uint256 _bzrxPerToken,\r\n        uint256 _stableCoinPerToken,\r\n        uint256 _vBZRXBalance)\r\n        internal\r\n        view\r\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting)\r\n    {\r\n        bzrxRewardsEarned = bzrxRewards[account];\r\n        stableCoinRewardsEarned = stableCoinRewards[account];\r\n\r\n        // add vested fees to rewards balances\r\n        uint256 rewardsVested;\r\n        uint256 _lastVestingSync = _vestingLastSync[account];\r\n\r\n        if (_lastVestingSync != block.timestamp) {\r\n            if (_vBZRXBalance != 0) {\r\n                // add vested BZRX to rewards balance\r\n                rewardsVested = _vestedBalance(\r\n                    _vBZRXBalance,\r\n                    _lastVestingSync,\r\n                    block.timestamp\r\n                );\r\n                bzrxRewardsEarned += rewardsVested;\r\n            }\r\n        }\r\n    }\r\n\r\n    // note: anyone can contribute rewards to the contract\r\n    function addDirectRewards(\r\n        address[] calldata accounts,\r\n        uint256[] calldata bzrxAmounts,\r\n        uint256[] calldata stableCoinAmounts)\r\n        external\r\n        checkPause\r\n        returns (uint256 bzrxTotal, uint256 stableCoinTotal)\r\n    {\r\n        require(accounts.length == bzrxAmounts.length && accounts.length == stableCoinAmounts.length, \"count mismatch\");\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            bzrxRewards[accounts[i]] = bzrxRewards[accounts[i]].add(bzrxAmounts[i]);\r\n            bzrxTotal = bzrxTotal.add(bzrxAmounts[i]);\r\n            stableCoinRewards[accounts[i]] = stableCoinRewards[accounts[i]].add(stableCoinAmounts[i]);\r\n            stableCoinTotal = stableCoinTotal.add(stableCoinAmounts[i]);\r\n        }\r\n        if (bzrxTotal != 0) {\r\n            IERC20(BZRX).transferFrom(msg.sender, address(this), bzrxTotal);\r\n        }\r\n        if (stableCoinTotal != 0) {\r\n            curve3Crv.transferFrom(msg.sender, address(this), stableCoinTotal);\r\n        }\r\n    }\r\n\r\n    function balanceOfByAsset(\r\n        address token,\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        balance = _balancesPerToken[token][account];\r\n    }\r\n\r\n    function balanceOfByAssets(\r\n        address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 bzrxBalance,\r\n            uint256 iBZRXBalance,\r\n            uint256 vBZRXBalance,\r\n            uint256 LPTokenBalance\r\n        )\r\n    {\r\n        return (\r\n            balanceOfByAsset(BZRX, account),\r\n            balanceOfByAsset(iBZRX, account),\r\n            balanceOfByAsset(vBZRX, account),\r\n            balanceOfByAsset(LPToken, account)\r\n        );\r\n    }\r\n\r\n    function balanceOfStored(\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256 vestedBalance, uint256 vestingBalance)\r\n    {\r\n        vestingBalance = _balancesPerToken[vBZRX][account]\r\n                .mul(vBZRXWeightStored)\r\n                .div(1e18);\r\n\r\n        vestedBalance = _balancesPerToken[BZRX][account];\r\n\r\n        vestedBalance = _balancesPerToken[iBZRX][account]\r\n            .mul(iBZRXWeightStored)\r\n            .div(1e18)\r\n            .add(vestedBalance);\r\n\r\n        vestedBalance = _balancesPerToken[LPToken][account]\r\n            .mul(LPTokenWeightStored)\r\n            .div(1e18)\r\n            .add(vestedBalance);\r\n    }\r\n\r\n    function delegateBalanceOf(\r\n        address account)\r\n        public\r\n        view\r\n        returns (uint256 totalVotes)\r\n    {\r\n        uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];\r\n        if (vBZRXBalance != 0) {\r\n            // staked vBZRX counts has 1/2 a vote, that's prorated based on total vested\r\n            totalVotes = vBZRXBalance\r\n                .mul(_startingVBZRXBalance -\r\n                    _vestedBalance( // overflow not possible\r\n                        _startingVBZRXBalance,\r\n                        0,\r\n                        block.timestamp\r\n                    )\r\n                ).div(_startingVBZRXBalance) / 2;\r\n\r\n            // user is attributed a staked balance of vested BZRX, from their last update to the present\r\n            totalVotes = _vestedBalance(\r\n                vBZRXBalance,\r\n                _vestingLastSync[account],\r\n                block.timestamp\r\n            ).add(totalVotes);\r\n        }\r\n\r\n        totalVotes = _balancesPerToken[BZRX][account]\r\n            .add(bzrxRewards[account]) // unclaimed BZRX rewards count as votes\r\n            .add(totalVotes);\r\n\r\n        totalVotes = _balancesPerToken[iBZRX][account]\r\n            .mul(ILoanPool(iBZRX).tokenPrice())\r\n            .div(1e18)\r\n            .add(totalVotes);\r\n\r\n        // LPToken votes are measured based on amount of underlying BZRX staked\r\n        totalVotes = IERC20(BZRX).balanceOf(LPToken)\r\n            .mul(_balancesPerToken[LPToken][account])\r\n            .div(IERC20(LPToken).totalSupply())\r\n            .add(totalVotes);\r\n    }\r\n\r\n    function totalSupplyByAsset(\r\n        address token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _totalSupplyPerToken[token];\r\n    }\r\n\r\n    function totalSupplyStored()\r\n        public\r\n        view\r\n        returns (uint256 supply)\r\n    {\r\n        supply = _totalSupplyPerToken[vBZRX]\r\n            .mul(vBZRXWeightStored)\r\n            .div(1e18);\r\n\r\n        supply = _totalSupplyPerToken[BZRX]\r\n            .add(supply);\r\n\r\n        supply = _totalSupplyPerToken[iBZRX]\r\n            .mul(iBZRXWeightStored)\r\n            .div(1e18)\r\n            .add(supply);\r\n\r\n        supply = _totalSupplyPerToken[LPToken]\r\n            .mul(LPTokenWeightStored)\r\n            .div(1e18)\r\n            .add(supply);\r\n    }\r\n\r\n    function _vestedBalance(\r\n        uint256 tokenBalance,\r\n        uint256 lastUpdate,\r\n        uint256 vestingTimeNow)\r\n        internal\r\n        view\r\n        returns (uint256 vested)\r\n    {\r\n        vestingTimeNow = vestingTimeNow.min256(block.timestamp);\r\n        if (vestingTimeNow > lastUpdate) {\r\n            if (vestingTimeNow <= vestingCliffTimestamp ||\r\n                lastUpdate >= vestingEndTimestamp) {\r\n                // time cannot be before vesting starts\r\n                // OR all vested token has already been claimed\r\n                return 0;\r\n            }\r\n            if (lastUpdate < vestingCliffTimestamp) {\r\n                // vesting starts at the cliff timestamp\r\n                lastUpdate = vestingCliffTimestamp;\r\n            }\r\n            if (vestingTimeNow > vestingEndTimestamp) {\r\n                // vesting ends at the end timestamp\r\n                vestingTimeNow = vestingEndTimestamp;\r\n            }\r\n\r\n            uint256 timeSinceClaim = vestingTimeNow.sub(lastUpdate);\r\n            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0\r\n        }\r\n    }\r\n\r\n\r\n    // OnlyOwner functions\r\n\r\n    function pause()\r\n        external\r\n        onlyOwner\r\n    {\r\n        isPaused = true;\r\n    }\r\n\r\n    function unPause()\r\n        external\r\n        onlyOwner\r\n    {\r\n        isPaused = false;\r\n    }\r\n\r\n    function setFundsWallet(\r\n        address _fundsWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        fundsWallet = _fundsWallet;\r\n    }\r\n\r\n    function setFeeTokens(\r\n        address[] calldata tokens)\r\n        external\r\n        onlyOwner\r\n    {\r\n        currentFeeTokens = tokens;\r\n    }\r\n\r\n    // path should start with the asset to swap and end with BZRX\r\n    // only one path allowed per asset\r\n    // ex: asset -> WETH -> BZRX\r\n    function setPaths(\r\n        address[][] calldata paths)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address[] memory path;\r\n        for (uint256 i = 0; i < paths.length; i++) {\r\n            path = paths[i];\r\n            require(path.length >= 2 &&\r\n                path[0] != path[path.length - 1] &&\r\n                path[path.length - 1] == BZRX,\r\n                \"invalid path\"\r\n            );\r\n            \r\n            // check that the path exists\r\n            uint256[] memory amountsOut = uniswapRouter.getAmountsOut(1e10, path);\r\n            require(amountsOut[amountsOut.length - 1] != 0, \"path does not exist\");\r\n            \r\n            swapPaths[path[0]] = path;\r\n            setUniswapApproval(IERC20(path[0]));\r\n        }\r\n    }\r\n\r\n    function setUniswapApproval(\r\n        IERC20 asset)\r\n        public\r\n        onlyOwner\r\n    {\r\n        asset.safeApprove(address(uniswapRouter), 0);\r\n        asset.safeApprove(address(uniswapRouter), uint256(-1));\r\n    }\r\n\r\n    function setCurveApproval()\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(DAI).safeApprove(address(curve3pool), 0);\r\n        IERC20(DAI).safeApprove(address(curve3pool), uint256(-1));\r\n        IERC20(USDC).safeApprove(address(curve3pool), 0);\r\n        IERC20(USDC).safeApprove(address(curve3pool), uint256(-1));\r\n        IERC20(USDT).safeApprove(address(curve3pool), 0);\r\n        IERC20(USDT).safeApprove(address(curve3pool), uint256(-1));\r\n    }\r\n\r\n    function setRewardPercent(\r\n        uint256 _rewardPercent)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_rewardPercent <= 1e20, \"value too high\");\r\n        rewardPercent = _rewardPercent;\r\n    }\r\n\r\n    function setMaxUniswapDisagreement(\r\n        uint256 _maxUniswapDisagreement)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_maxUniswapDisagreement != 0, \"invalid param\");\r\n        maxUniswapDisagreement = _maxUniswapDisagreement;\r\n    }\r\n\r\n    function setMaxCurveDisagreement(\r\n        uint256 _maxCurveDisagreement)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_maxCurveDisagreement != 0, \"invalid param\");\r\n        maxCurveDisagreement = _maxCurveDisagreement;\r\n    }\r\n\r\n    function setCallerRewardDivisor(\r\n        uint256 _callerRewardDivisor)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_callerRewardDivisor != 0, \"invalid param\");\r\n        callerRewardDivisor = _callerRewardDivisor;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"ChangeDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinOutput\",\"type\":\"uint256\"}],\"name\":\"ConvertFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinRewards\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPTokenWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bzrxAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableCoinAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addDirectRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZx\",\"outputs\":[{\"internalType\":\"contract IBZxPartial\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iBZRXBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBZRXBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPTokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callerRewardDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAndRestake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentFeeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3Crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3pool\",\"outputs\":[{\"internalType\":\"contract ICurve3Pool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegateBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegatedPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsVesting\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iBZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardsAddTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCurveDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUniswapDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callerRewardDivisor\",\"type\":\"uint256\"}],\"name\":\"setCallerRewardDivisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCurveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"setFeeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundsWallet\",\"type\":\"address\"}],\"name\":\"setFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCurveDisagreement\",\"type\":\"uint256\"}],\"name\":\"setMaxCurveDisagreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUniswapDisagreement\",\"type\":\"uint256\"}],\"name\":\"setMaxUniswapDisagreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"}],\"name\":\"setPaths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPercent\",\"type\":\"uint256\"}],\"name\":\"setRewardPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"setUniswapApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableCoinPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupplyByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingV1t","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8a0611862869b6bb10a104c77839bc0c052d82b2cadf98af51c9ceafd15de18a"}]}