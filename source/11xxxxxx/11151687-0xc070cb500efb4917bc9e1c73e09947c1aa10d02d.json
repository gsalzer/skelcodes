{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract Context {\r\n    constructor () internal {}\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Governor is Context {\r\n    address private _guardian;\r\n\r\n    event GovernorTransferred(address indexed previousGuardian, address indexed newGuardian);\r\n\r\n    constructor () internal {\r\n        _guardian = _msgSender();\r\n        emit GovernorTransferred(address(0), _guardian);\r\n    }\r\n\r\n    function governor() public view returns (address) {\r\n        return _guardian;\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(isGovernor(), \"Caller is not the governor!\");\r\n        _;\r\n    }\r\n\r\n    function isGovernor() public view returns (bool) {\r\n        return _msgSender() == _guardian;\r\n    }\r\n\r\n    function transferGovernor(address newGovernor) public onlyGovernor {\r\n        _transferGovernor(newGovernor);\r\n    }\r\n\r\n    function _transferGovernor(address newGovernor) internal {\r\n        require(newGovernor != address(0), \"New governor is the zero address!\");\r\n        emit GovernorTransferred(_guardian, newGovernor);\r\n        _guardian = newGovernor;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\npragma solidity ^0.5.5;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success,) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.16;\r\n\r\ninterface IUniswapV2Router02 {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\npragma solidity ^0.5.16;\r\n\r\ncontract FairStockEquity is Ownable, Governor {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct businessModule {\r\n        address moduleAddress;\r\n        uint256 running;\r\n        uint256 mintRatio;\r\n    }\r\n\r\n    mapping(address => businessModule) public modulePool;\r\n\r\n    IERC20[3] public tokens;\r\n\r\n    uint256 public startTime;\r\n    uint256 constant public stockIssueLimit = 10000 * (10 ** 18);\r\n    uint256 public stockIssueRemain = stockIssueLimit;\r\n    uint256 constant public tokenLockRatio = 5000;\r\n    uint256 constant public tokenMainRatio = 10;\r\n    mapping(address => uint256) public stockShares;\r\n    uint256 public balanceMainSH = 0;\r\n    uint256 public balanceLockSH = 0;\r\n\r\n    mapping(address => bool) public depositTokens;\r\n    mapping(address => mapping(address => uint256)) public depositPool;\r\n\r\n    uint256 public profitPercentMT;\r\n    uint256 public balanceMainMT = 0;\r\n    uint256 public mintDegree;\r\n\r\n    uint256 public profitPercentPJ;\r\n    uint256 public balanceMainPJ = 0;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router02;\r\n    address public dataSource;\r\n    uint256 public gasFeeForCallback;\r\n\r\n    event eSetToken(address tokenAddress, bool running);\r\n    event eSetUniswapV2Router02(address previousUniswapV2Router02, address newUniswapV2Router02);\r\n    event eSetDataSource(address previousDataSource, address newDataSource);\r\n    event eSetProfitPercentMT(uint256 previousProfitPercentMT, uint256 newProfitPercentMT);\r\n    event eSetProfitPercentPJ(uint256 previousProfitPercentTeam, uint256 newProfitPercentTeam);\r\n    event eSetMintDegree(uint256 previousMintDegree, uint256 newMintDegree);\r\n    event eSetModule(address previousModuleAddress, address newModuleAddress,\r\n        uint256 previousModuleRunning, uint256 newModuleRunning,\r\n        uint256 previousMintRatio, uint256 newMintRatio);\r\n\r\n    event eInvest(address indexed user, uint256 stockAmount, uint256 timestamp);\r\n    event eReduce(address indexed user, uint256 stockAmount, uint256 timestamp);\r\n    event eBusiness(address indexed module, address indexed user,\r\n        uint256 payAmount, uint256 bonusAmount, uint256 mintShare, uint256 profitMT, uint256 timestamp);\r\n    event eDepositLPT(address indexed user, address token, uint256 lptAmount, uint256 timestamp);\r\n    event eWithdrawLPT(address indexed user, address token, uint256 lptAmount, uint256 timestamp);\r\n    event eWithdrawMT(address indexed user, uint256 gasForCallback, uint256 timestamp);\r\n    event eWithdrawCallback(address indexed user, uint256 indexed tx, uint256 amount, uint256 timestamp);\r\n    event eSwap(uint256 amountIn, uint256 timestamp);\r\n\r\n    constructor (address _mainToken, address _lockToken, address _stockToken,\r\n        address _uniswapV2Router02, address _dataSource, uint256 _startTime) public {\r\n\r\n        tokens = [IERC20(_mainToken),\r\n        IERC20(_lockToken),\r\n        IERC20(_stockToken)];\r\n\r\n        setUniswapV2Router02(_uniswapV2Router02);\r\n        setDataSource(_dataSource);\r\n\r\n        setGasFeeForCallback(10 ** 16);\r\n        setMintDegree(10000);\r\n        setProfitPercentMT(5000);\r\n        setProfitPercentPJ(500);\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    modifier onlyDataSource() {\r\n        require(_msgSender() == dataSource, \"NOT DataSource!\");\r\n        _;\r\n    }\r\n\r\n    modifier checkStart(){\r\n        require(block.timestamp > startTime, \"not start\");\r\n        _;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime)\r\n    public onlyOwner {\r\n        require(_startTime > startTime, \"wrong time!\");\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function setLPT(address _tokenAddress, bool _running)\r\n    public onlyOwner {\r\n        depositTokens[_tokenAddress] = _running;\r\n        emit eSetToken(_tokenAddress, _running);\r\n    }\r\n\r\n    function setGasFeeForCallback(uint256 _gasFeeForCallback)\r\n    public onlyOwner {\r\n        gasFeeForCallback = _gasFeeForCallback;\r\n    }\r\n\r\n    function setUniswapV2Router02(address _newUniswapV2Router02)\r\n    public onlyOwner {\r\n        emit eSetUniswapV2Router02(address(uniswapV2Router02), _newUniswapV2Router02);\r\n        uniswapV2Router02 = IUniswapV2Router02(_newUniswapV2Router02);\r\n    }\r\n\r\n    function setDataSource(address _newDataSource)\r\n    public onlyOwner {\r\n        emit eSetDataSource(dataSource, _newDataSource);\r\n        dataSource = _newDataSource;\r\n    }\r\n\r\n    function setModule(address moduleAddress, uint256 moduleRunning, uint256 mintRatio)\r\n    public onlyOwner {\r\n        emit eSetModule(modulePool[moduleAddress].moduleAddress, moduleAddress,\r\n            modulePool[moduleAddress].running, moduleRunning,\r\n            modulePool[moduleAddress].mintRatio, mintRatio);\r\n        modulePool[moduleAddress] = businessModule(moduleAddress, moduleRunning, mintRatio);\r\n    }\r\n\r\n    function setMintDegree(uint256 _mintDegree)\r\n    public onlyOwner {\r\n        emit eSetMintDegree(mintDegree, _mintDegree);\r\n        mintDegree = _mintDegree;\r\n    }\r\n\r\n    function setProfitPercentMT(uint256 _profitPercent)\r\n    public onlyGovernor {\r\n        emit eSetProfitPercentMT(profitPercentMT, _profitPercent);\r\n        profitPercentMT = _profitPercent;\r\n    }\r\n\r\n    function setProfitPercentPJ(uint256 _profitPercent)\r\n    public onlyGovernor {\r\n        emit eSetProfitPercentPJ(profitPercentPJ, _profitPercent);\r\n        profitPercentPJ = _profitPercent;\r\n    }\r\n\r\n    function getCostAmount(uint256 stockAmount)\r\n    public view\r\n    returns (uint256 _mainTokenAmount, uint256 _lockTokenAmount, uint256 _stockTokenAmount){\r\n        uint256 stockTotalSupply = stockIssueLimit.sub(stockIssueRemain);\r\n        if (stockTotalSupply > 0) {\r\n            return (\r\n            stockAmount.mul(balanceMainSH).div(stockTotalSupply),\r\n            _getLockAmount(stockAmount),\r\n            stockAmount.mul(tokens[2].balanceOf(address(this))).div(stockTotalSupply));\r\n        }\r\n        return (\r\n        stockAmount.mul(tokenMainRatio),\r\n        _getLockAmount(stockAmount),\r\n        0);\r\n    }\r\n\r\n    function _getLockAmount(uint256 stockAmount)\r\n    internal pure\r\n    returns (uint256 _lockTokenAmount){\r\n        return stockAmount.mul(tokenLockRatio);\r\n    }\r\n\r\n    function _getMintShareAmount(uint256 _availableAmount, uint256 _mintRatio)\r\n    internal view returns (uint256 _mintShare){\r\n        return _availableAmount.mul(_mintRatio).mul(mintDegree).div(1000000);\r\n    }\r\n\r\n    function invest(uint256 stockAmount)\r\n    public checkStart {\r\n        require(stockAmount > 0, \"Cannot invest 0\");\r\n        require(stockIssueRemain >= stockAmount, \"Have no enough stock!\");\r\n        (uint256 _mainTokenAmount,uint256 _lockTokenAmount,uint256 _stockTokenAmount) = getCostAmount(stockAmount);\r\n\r\n        stockIssueRemain = stockIssueRemain.sub(stockAmount);\r\n\r\n        balanceMainSH = balanceMainSH.add(_mainTokenAmount);\r\n        balanceLockSH = balanceLockSH.add(_lockTokenAmount);\r\n\r\n        tokens[0].safeTransferFrom(_msgSender(), address(this), _mainTokenAmount);\r\n        tokens[1].safeTransferFrom(_msgSender(), address(this), _lockTokenAmount);\r\n        if (_stockTokenAmount > 0) {\r\n            tokens[2].safeTransferFrom(_msgSender(), address(this), _stockTokenAmount);\r\n        }\r\n\r\n        stockShares[_msgSender()] = stockShares[_msgSender()].add(stockAmount);\r\n\r\n        emit eInvest(_msgSender(), stockAmount, block.timestamp);\r\n    }\r\n\r\n    function reduceShare(uint256 stockAmount)\r\n    public checkStart {\r\n        require(stockAmount > 0, \"Cannot reduce 0\");\r\n        require(stockShares[_msgSender()] >= stockAmount, \"You have no enough stock!\");\r\n\r\n        (uint256 mainTokeAmount, uint256 lockTokenAmount,uint256 stockTokenAmount) = getCostAmount(stockAmount);\r\n\r\n        stockShares[_msgSender()] = stockShares[_msgSender()].sub(stockAmount);\r\n        stockIssueRemain = stockIssueRemain.add(stockAmount);\r\n        balanceMainSH = balanceMainSH.sub(mainTokeAmount);\r\n        balanceLockSH = balanceLockSH.sub(lockTokenAmount);\r\n\r\n        tokens[0].safeTransfer(_msgSender(), mainTokeAmount);\r\n        tokens[1].safeTransfer(_msgSender(), lockTokenAmount);\r\n        if (stockTokenAmount > 0) {\r\n            tokens[2].safeTransfer(_msgSender(), stockTokenAmount);\r\n        }\r\n\r\n        emit eReduce(_msgSender(), stockAmount, block.timestamp);\r\n    }\r\n\r\n    function business(address user, uint256 payAmount, uint256 availableAmount, uint256 bonusAmount)\r\n    public checkStart {\r\n        require(payAmount > 0, \"Illegal payAmount!\");\r\n        businessModule memory module = modulePool[_msgSender()];\r\n        require(module.moduleAddress != address(0), \"Illegal module!\");\r\n        require(module.running == 1, \"Module is not running!\");\r\n\r\n        tokens[0].safeTransferFrom(_msgSender(), address(this), payAmount);\r\n\r\n        uint256 profitSum = payAmount.mul(module.mintRatio).div(100);\r\n        uint256 profitMT = 0;\r\n        uint256 profitPJ = 0;\r\n        profitMT = profitSum.mul(profitPercentMT).div(10000);\r\n        profitPJ = profitSum.mul(profitPercentPJ).div(10000);\r\n\r\n        require(balanceMainSH.add(payAmount) >= profitMT.add(profitPJ).add(bonusAmount), \"Insufficient Balance!\");\r\n\r\n        balanceMainMT = balanceMainMT.add(profitMT);\r\n        balanceMainPJ = balanceMainPJ.add(profitPJ);\r\n        balanceMainSH = balanceMainSH.add(payAmount).sub(profitMT).sub(profitPJ).sub(bonusAmount);\r\n\r\n        uint256 mintShareAmount = _getMintShareAmount(availableAmount, module.mintRatio);\r\n\r\n        if (bonusAmount > 0) {\r\n            tokens[0].safeTransfer(user, bonusAmount);\r\n        }\r\n        if (mintShareAmount > 0) {\r\n            tokens[2].mint(user, mintShareAmount);\r\n        }\r\n        emit eBusiness(_msgSender(), user, payAmount, bonusAmount, mintShareAmount, profitMT, block.timestamp);\r\n    }\r\n\r\n    function depositLPT(address _token, uint256 _lptAmount)\r\n    public checkStart {\r\n        require(depositTokens[_token], \"illegal token\");\r\n        require(_lptAmount > 0, \"Cannot deposit 0\");\r\n        IERC20(_token).safeTransferFrom(_msgSender(), address(this), _lptAmount);\r\n        depositPool[_msgSender()][_token] = depositPool[_msgSender()][_token].add(_lptAmount);\r\n        emit eDepositLPT(_msgSender(), _token, _lptAmount, block.timestamp);\r\n    }\r\n\r\n    function withdrawLPT(address _token, uint256 _lptAmount)\r\n    public checkStart {\r\n        require(_lptAmount > 0, \"Cannot withdraw 0\");\r\n        require(depositPool[_msgSender()][_token] >= _lptAmount, \"Insufficient Balance!\");\r\n        depositPool[_msgSender()][_token] = depositPool[_msgSender()][_token].sub(_lptAmount);\r\n        IERC20(_token).safeTransfer(_msgSender(), _lptAmount);\r\n        emit eWithdrawLPT(_msgSender(), _token, _lptAmount, block.timestamp);\r\n    }\r\n\r\n    function withdrawMT()\r\n    public payable checkStart {\r\n        require(msg.value >= gasFeeForCallback, \"Insufficient gas fee!\");\r\n        Address.toPayable(dataSource).transfer(msg.value);\r\n        emit eWithdrawMT(_msgSender(), msg.value, block.timestamp);\r\n    }\r\n\r\n    function withdrawPJ()\r\n    public onlyOwner checkStart {\r\n        require(balanceMainPJ > 0, \"Insufficient Balance!\");\r\n        uint256 amount = balanceMainPJ;\r\n        balanceMainPJ = 0;\r\n        tokens[0].safeTransfer(_msgSender(), amount);\r\n    }\r\n\r\n    function withdrawCallback(address _user, uint256 _tx, uint256 _amount)\r\n    public onlyDataSource checkStart {\r\n        require(_amount > 0, \"Cannot withdraw 0\");\r\n        require(balanceMainMT >= _amount, \"Insufficient Balance!\");\r\n        balanceMainMT = balanceMainMT.sub(_amount);\r\n        tokens[0].safeTransfer(_user, _amount);\r\n        emit eWithdrawCallback(_user, _tx, _amount, block.timestamp);\r\n    }\r\n\r\n    function swapMainToStock(\r\n        uint256 amountIn,\r\n        uint256 amountOutReduce,\r\n        uint256 deadline)\r\n    public onlyDataSource checkStart {\r\n        require(balanceMainSH > stockIssueLimit &&\r\n            amountIn <= balanceMainSH.sub(stockIssueLimit),\r\n            \"Insufficient Balance!\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(tokens[0]);\r\n        path[1] = address(tokens[2]);\r\n\r\n        uint[] memory amounts = uniswapV2Router02.getAmountsOut(amountIn, path);\r\n        tokens[0].approve(address(uniswapV2Router02), amountIn);\r\n        balanceMainSH = balanceMainSH.sub(amountIn);\r\n\r\n        uniswapV2Router02.swapExactTokensForTokens(\r\n            amountIn, amounts[1].mul(amountOutReduce).div(100),\r\n            path, address(this), deadline);\r\n        emit eSwap(amountIn, block.timestamp);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router02\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dataSource\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGuardian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GovernorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eDepositLPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eReduce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousDataSource\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDataSource\",\"type\":\"address\"}],\"name\":\"eSetDataSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintDegree\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintDegree\",\"type\":\"uint256\"}],\"name\":\"eSetMintDegree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousModuleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModuleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousModuleRunning\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newModuleRunning\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMintRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintRatio\",\"type\":\"uint256\"}],\"name\":\"eSetModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousProfitPercentMT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProfitPercentMT\",\"type\":\"uint256\"}],\"name\":\"eSetProfitPercentMT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousProfitPercentTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProfitPercentTeam\",\"type\":\"uint256\"}],\"name\":\"eSetProfitPercentPJ\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"}],\"name\":\"eSetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousUniswapV2Router02\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUniswapV2Router02\",\"type\":\"address\"}],\"name\":\"eSetUniswapV2Router02\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eWithdrawCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lptAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eWithdrawLPT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasForCallback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"eWithdrawMT\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceLockSH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceMainMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceMainPJ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceMainSH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"business\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lptAmount\",\"type\":\"uint256\"}],\"name\":\"depositLPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasFeeForCallback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"}],\"name\":\"getCostAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mainTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stockTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modulePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"running\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitPercentMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitPercentPJ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stockAmount\",\"type\":\"uint256\"}],\"name\":\"reduceShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDataSource\",\"type\":\"address\"}],\"name\":\"setDataSource\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFeeForCallback\",\"type\":\"uint256\"}],\"name\":\"setGasFeeForCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_running\",\"type\":\"bool\"}],\"name\":\"setLPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintDegree\",\"type\":\"uint256\"}],\"name\":\"setMintDegree\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moduleRunning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"}],\"name\":\"setModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"}],\"name\":\"setProfitPercentMT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitPercent\",\"type\":\"uint256\"}],\"name\":\"setProfitPercentPJ\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUniswapV2Router02\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router02\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stockIssueLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stockIssueRemain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stockShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutReduce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapMainToStock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLockRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMainRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapV2Router02\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lptAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPJ\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FairStockEquity","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009b20dabcec77f6289113e61893f7beefaeb1990a000000000000000000000000ed761a603235b3af7e8936875798d69d339a49b10000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000ea6ab840b8c26ddb831b07c5e27e524d8a4768b8000000000000000000000000000000000000000000000000000000005fa002d0","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8a8fcba329f4b1415423405baab606c1ffa4bca69427d1924dcd5a4a0ce7220f"}]}