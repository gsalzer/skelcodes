{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function mint(address reciever, uint value) public returns(bool);\r\n}\r\n\r\ncontract DAPPM {\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n        \r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        mapping(uint8 => bool) activeX30Levels;\r\n        \r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n        mapping(uint8 => X30) x30Matrix;\r\n    }\r\n    \r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    \r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n    \r\n    struct X30 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        address[] thirdLevelReferrals;\r\n        address[] fourthLevelReferrals;\r\n        uint availReInvestBalance;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public constant LAST_LEVEL = 15;\r\n    ERC20 Token;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint8 => uint) public levelPrice;\r\n    mapping(uint => uint) public levelTokens;\r\n    using SafeMath for uint256;\r\n\r\n    uint public lastUserId = 2;\r\n    uint public tokenPerEth = 400 * (10 **18); // 400 Tokens per Eth Decimal - 18\r\n    uint public adminFee = 10 ether;\r\n    uint public tokenDistLimit = 25000;\r\n    address public owner;\r\n    address public commissionAddress;\r\n    bool public lockStatus;\r\n\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId, uint time);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level, uint time);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint time);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place, uint time);\r\n    event MissedEthReceive(address indexed receiver, address indexed _from, uint8 matrix, uint8 level, uint time);\r\n    event RecievedEth(address indexed receiver, address indexed _from, uint8 matrix, uint8 level, uint amount, uint time);\r\n    event SentExtraEthDividends(address indexed from, address indexed receiver, uint8 matrix, uint8 level,  uint amount, uint time);\r\n    event RecievedAdminCommission(address indexed _from, uint commissionAmount, uint8 matrix, uint8 level, uint time); \r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    } \r\n    \r\n    modifier isLock() {\r\n        require(lockStatus == false, \"Contract Locked\");\r\n        _;\r\n    } \r\n    \r\n    \r\n    constructor(address ownerAddress, address _token, address _commissionAddress) public {\r\n        levelPrice[1] = 0.09 ether;\r\n        levelTokens[1] = (tokenPerEth * levelPrice[1])/ 1 ether;\r\n        \r\n        for (uint8 i = 2; i <= LAST_LEVEL; i++) {\r\n            levelPrice[i] = levelPrice[i-1] * 2;\r\n            levelTokens[i] = (tokenPerEth * levelPrice[i])/ 1 ether;\r\n        }\r\n        \r\n        owner = ownerAddress;\r\n        Token = ERC20(_token);\r\n        commissionAddress = _commissionAddress;\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeX3Levels[i] = true;\r\n            users[ownerAddress].activeX6Levels[i] = true;\r\n            users[ownerAddress].activeX30Levels[i] = true;\r\n        }\r\n        \r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n  \r\n    function registrationExt(address referrerAddress) external isLock payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function buyNewLevel(uint8 matrix, uint8 level) external isLock payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(matrix == 1 || matrix == 2 || matrix == 3, \"invalid matrix\");\r\n        require(msg.value == levelPrice[level], \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(!users[msg.sender].activeX3Levels[level], \"level already activated\");\r\n\r\n            if (users[msg.sender].x3Matrix[level-1].blocked) {\r\n                users[msg.sender].x3Matrix[level-1].blocked = false;\r\n            }\r\n    \r\n            address freeX3Referrer = findFreeX3Referrer(msg.sender, level);\r\n            users[msg.sender].x3Matrix[level].currentReferrer = freeX3Referrer;\r\n            users[msg.sender].activeX3Levels[level] = true;\r\n            updateX3Referrer(msg.sender, freeX3Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX3Referrer, 1, level, now);\r\n\r\n        } \r\n        else if(matrix == 2) {\r\n            require(!users[msg.sender].activeX6Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x6Matrix[level-1].blocked) {\r\n                users[msg.sender].x6Matrix[level-1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(msg.sender, level);\r\n            \r\n            users[msg.sender].activeX6Levels[level] = true;\r\n            updateX6Referrer(msg.sender, freeX6Referrer, level);\r\n            \r\n            emit Upgrade(msg.sender, freeX6Referrer, 2, level, now);\r\n        } \r\n        else {\r\n            \r\n            require(!users[msg.sender].activeX30Levels[level], \"level already activated\"); \r\n\r\n            if (users[msg.sender].x30Matrix[level-1].blocked) {\r\n                users[msg.sender].x30Matrix[level-1].blocked = false;\r\n            }\r\n            \r\n            address ref = users[msg.sender].referrer;\r\n            address freeX30Referrer = findFreeX30Referrer(ref, level);\r\n            users[msg.sender].activeX30Levels[level] = true;\r\n            updateX30Referrer(msg.sender, freeX30Referrer, level);\r\n            emit Upgrade(msg.sender, freeX30Referrer, 3, level, now);\r\n            \r\n        }\r\n        \r\n    }    \r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == levelPrice[1] * 3 , \"insufficient balance\"); // Price of X3, X4 and X30 \r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeX3Levels[1] = true; \r\n        users[userAddress].activeX6Levels[1] = true;\r\n        users[userAddress].activeX30Levels[1] = true;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n        updateX30Referrer(userAddress, referrerAddress, 1);\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id, now);\r\n    }\r\n    \r\n    function updateX3Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 1, level, uint8(users[referrerAddress].x3Matrix[level].referrals.length), now);\r\n            return sendEthDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n        \r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3, now);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (!users[referrerAddress].activeX3Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        //create new one by recursion\r\n        if (referrerAddress != owner) {\r\n            //check referrer active level\r\n            address freeReferrerAddress = findFreeX3Referrer(referrerAddress, level);\r\n            if (users[referrerAddress].x3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].x3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 1, level, now);\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendEthDividends(owner, userAddress, 1, level);\r\n            users[owner].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(owner, address(0), userAddress, 1, level, now);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        require(users[referrerAddress].activeX6Levels[level], \"500. Referrer level is inactive\");\r\n        \r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length < 2) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].x6Matrix[level].firstLevelReferrals.length), now);\r\n            \r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == owner) {\r\n                return sendEthDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n            \r\n            address ref = users[referrerAddress].x6Matrix[level].currentReferrer;            \r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress); \r\n            \r\n            uint len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n            \r\n            if ((len == 2) && \r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress)) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }  else if ((len == 1 || len == 2) &&\r\n                    users[ref].x6Matrix[level].firstLevelReferrals[0] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4, now);\r\n                }\r\n            } else if (len == 2 && users[ref].x6Matrix[level].firstLevelReferrals[1] == referrerAddress) {\r\n                if (users[referrerAddress].x6Matrix[level].firstLevelReferrals.length == 1) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5, now);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6, now);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if ((users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart)) {\r\n\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == \r\n                users[referrerAddress].x6Matrix[level].closedPart) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n            }\r\n        }\r\n\r\n        if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        } else if (users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] == userAddress) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n        }\r\n        \r\n        if (users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length <= \r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n        \r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(address userAddress, address referrerAddress, uint8 level, bool x2) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[0], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 2 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]].x6Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, users[referrerAddress].x6Matrix[level].firstLevelReferrals[1], 2, level, uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length), now);\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, 4 + uint8(users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]].x6Matrix[level].firstLevelReferrals.length), now);\r\n            //set current level\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n    \r\n    function updateX6ReferrerSecondLevel(address userAddress, address referrerAddress, uint8 level) private {\r\n        if (users[referrerAddress].x6Matrix[level].secondLevelReferrals.length < 4) {\r\n            return sendEthDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n        \r\n        address[] memory x6 = users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].firstLevelReferrals;\r\n        \r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress ||\r\n                x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[users[referrerAddress].x6Matrix[level].currentReferrer].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n        \r\n        users[referrerAddress].x6Matrix[level].firstLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (!users[referrerAddress].activeX6Levels[level+1] && level != LAST_LEVEL) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n        \r\n        if (referrerAddress != owner) {\r\n            address freeReferrerAddress = findFreeX6Referrer(referrerAddress, level);\r\n\r\n            emit Reinvest(referrerAddress, freeReferrerAddress, userAddress, 2, level, now);\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(owner, address(0), userAddress, 2, level, now);\r\n            sendEthDividends(owner, userAddress, 2, level);\r\n        }\r\n    }\r\n    \r\n    function updateX30Referrer(address userAddress, address referrerAddress, uint8 level) private {\r\n        \r\n        address firstLine;\r\n        address secondLine;\r\n        address thirdLine;\r\n        address fourthLine;\r\n        \r\n        if(users[referrerAddress].x30Matrix[level].firstLevelReferrals.length < 2) {\r\n            firstLine = _findX30Referrer(1,level,referrerAddress);\r\n            secondLine = users[firstLine].x30Matrix[level].currentReferrer;\r\n            thirdLine = users[secondLine].x30Matrix[level].currentReferrer;\r\n            fourthLine = users[thirdLine].x30Matrix[level].currentReferrer;\r\n        }\r\n        \r\n        else if(users[referrerAddress].x30Matrix[level].secondLevelReferrals.length < 4) {\r\n            firstLine = _findX30Referrer(2, level, referrerAddress);\r\n            secondLine = users[firstLine].x30Matrix[level].currentReferrer;\r\n            thirdLine = users[secondLine].x30Matrix[level].currentReferrer;\r\n            fourthLine = users[thirdLine].x30Matrix[level].currentReferrer;\r\n        }\r\n        \r\n        else if(users[referrerAddress].x30Matrix[level].thirdLevelReferrals.length < 8) {\r\n            firstLine = _findX30Referrer(3, level, referrerAddress);\r\n            secondLine = users[firstLine].x30Matrix[level].currentReferrer;\r\n            thirdLine = users[secondLine].x30Matrix[level].currentReferrer;\r\n            fourthLine = users[thirdLine].x30Matrix[level].currentReferrer;\r\n        }\r\n        \r\n        else if(users[referrerAddress].x30Matrix[level].fourthLevelReferrals.length < 16) {\r\n            firstLine = _findX30Referrer(4, level, referrerAddress);\r\n            secondLine = users[firstLine].x30Matrix[level].currentReferrer;\r\n            thirdLine = users[secondLine].x30Matrix[level].currentReferrer;\r\n            fourthLine = users[thirdLine].x30Matrix[level].currentReferrer;\r\n        }\r\n        \r\n        if(firstLine != address(0)) {\r\n            users[firstLine].x30Matrix[level].firstLevelReferrals.push(userAddress);\r\n            users[userAddress].x30Matrix[level].currentReferrer = firstLine;\r\n            emit NewUserPlace(userAddress, firstLine, 3, level, uint8(users[firstLine].x30Matrix[level].firstLevelReferrals.length), now);\r\n        }\r\n            \r\n        if(secondLine != address(0)) {\r\n            users[secondLine].x30Matrix[level].secondLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, secondLine, 3, level, uint8(users[secondLine].x30Matrix[level].secondLevelReferrals.length + 2), now);\r\n        }\r\n            \r\n        \r\n        if(thirdLine != address(0)) {\r\n            users[thirdLine].x30Matrix[level].thirdLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, thirdLine, 3, level, uint8(users[thirdLine].x30Matrix[level].thirdLevelReferrals.length + 6), now);\r\n        }\r\n            \r\n        if(fourthLine != address(0)) {\r\n            users[fourthLine].x30Matrix[level].fourthLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, fourthLine, 3, level, uint8(users[fourthLine].x30Matrix[level].fourthLevelReferrals.length + 14), now);\r\n        }\r\n            \r\n        \r\n        if(users[fourthLine].x30Matrix[level].fourthLevelReferrals.length <= 14) {\r\n            \r\n            _payForX30(1, userAddress, level, levelPrice[level]);\r\n            \r\n        }\r\n        \r\n        else if(users[fourthLine].x30Matrix[level].fourthLevelReferrals.length == 15 ||\r\n            users[fourthLine].x30Matrix[level].fourthLevelReferrals.length == 16) { \r\n                \r\n            _payForX30(2, userAddress, level, levelPrice[level]);\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    function _findX30Referrer(uint _flag,uint8 _level,  address _refAddress) internal returns(address) {\r\n        \r\n        if(_flag == 1) {\r\n            \r\n            if(users[_refAddress].x30Matrix[_level].firstLevelReferrals.length < 2) {\r\n                _refAddress = findFreeX30Referrer(_refAddress,_level);\r\n                return _refAddress;\r\n            }\r\n               \r\n        }\r\n        \r\n        else if(_flag == 2) { \r\n            if(users[_refAddress].x30Matrix[_level].firstLevelReferrals.length == 2) {\r\n            \r\n                address[] memory referrals = new address[](2);\r\n                referrals[0] = users[_refAddress].x30Matrix[_level].firstLevelReferrals[0];\r\n                referrals[1] = users[_refAddress].x30Matrix[_level].firstLevelReferrals[1];\r\n                \r\n                for(uint8 r=0; r<2; r++) {\r\n                    if(users[referrals[r]].x30Matrix[_level].firstLevelReferrals.length < 2) \r\n                        return (referrals[r]);\r\n                }\r\n            }\r\n        }\r\n        \r\n        else if(_flag == 3) { \r\n            if(users[_refAddress].x30Matrix[_level].firstLevelReferrals.length == 2 && \r\n                users[_refAddress].x30Matrix[_level].secondLevelReferrals.length == 4) {\r\n            \r\n                address[] memory referrals = new address[](4);\r\n                referrals[0] = users[_refAddress].x30Matrix[_level].secondLevelReferrals[0];\r\n                referrals[1] = users[_refAddress].x30Matrix[_level].secondLevelReferrals[1];\r\n                referrals[2] = users[_refAddress].x30Matrix[_level].secondLevelReferrals[2];\r\n                referrals[3] = users[_refAddress].x30Matrix[_level].secondLevelReferrals[3];\r\n                \r\n                for(uint8 r=0; r<4; r++) {\r\n                    if(users[referrals[r]].x30Matrix[_level].firstLevelReferrals.length < 2) \r\n                        return (referrals[r]);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        else if(_flag == 4) { \r\n            if(users[_refAddress].x30Matrix[_level].firstLevelReferrals.length == 2 && \r\n                users[_refAddress].x30Matrix[_level].secondLevelReferrals.length == 4 && \r\n                users[_refAddress].x30Matrix[_level].thirdLevelReferrals.length == 8) {\r\n            \r\n                address[] memory referrals = new address[](8);\r\n                referrals[0] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[0];\r\n                referrals[1] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[1];\r\n                referrals[2] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[2];\r\n                referrals[3] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[3];\r\n                referrals[4] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[4];\r\n                referrals[5] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[5];\r\n                referrals[6] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[6];\r\n                referrals[7] = users[_refAddress].x30Matrix[_level].thirdLevelReferrals[7];\r\n                \r\n                for(uint8 r=0; r<8; r++) {\r\n                    if(users[referrals[r]].x30Matrix[_level].firstLevelReferrals.length < 2) \r\n                        return (referrals[r]);\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n    }  \r\n    \r\n    function _paymentX30(address _referrerAddress, address _userAddress, uint8 _level, uint _share, uint _adminFee) internal {\r\n        \r\n         (address receiver1, bool isExtraDividends1) = findEthReceiver(_referrerAddress, _userAddress, 3, _level);\r\n        \r\n        \r\n        if(receiver1 == address(0)) \r\n            receiver1 = owner;\r\n         \r\n        require(address(uint160(receiver1)).send(_share) && address(uint160(commissionAddress)).send(_adminFee), \"Transaction Failure  1\");\r\n        emit RecievedAdminCommission(_userAddress, _adminFee, 3, _level, now);\r\n        \r\n        if (isExtraDividends1) {\r\n            emit SentExtraEthDividends(_userAddress, receiver1, 3, _level, _share, now);\r\n        }\r\n        \r\n        else \r\n            emit RecievedEth(_userAddress, receiver1, 3, _level, _share, now);\r\n        \r\n        \r\n    }\r\n    \r\n    function _payForX30(uint _flag, address _userAddress, uint8 _level, uint _amount) internal {\r\n        address[4] memory ref; \r\n        \r\n        ref[3] = users[_userAddress].x30Matrix[_level].currentReferrer;\r\n        ref[2] = users[ref[3]].x30Matrix[_level].currentReferrer;\r\n        ref[1] = users[ref[2]].x30Matrix[_level].currentReferrer;\r\n        ref[0] = users[ref[1]].x30Matrix[_level].currentReferrer;\r\n        \r\n        uint share;\r\n        uint adminFees;\r\n        uint balFees; \r\n        \r\n        share = (_amount.mul(20 ether)).div(100 ether);\r\n        adminFees = (share.mul( adminFee)).div(100 ether);\r\n        balFees =  (share.sub(adminFees));\r\n        \r\n       _paymentX30(ref[2], _userAddress, _level, balFees , adminFees);\r\n        \r\n        \r\n        share = (_amount.mul(30 ether)).div(100 ether);\r\n        adminFees = (share.mul( adminFee)).div(100 ether);\r\n        balFees =  (share.sub(adminFees));\r\n        \r\n        _paymentX30(ref[1], _userAddress, _level,  balFees , adminFees);\r\n        \r\n\r\n        if(_flag == 1) {\r\n           \r\n            share = (_amount.mul(50 ether)).div(100 ether);\r\n            adminFees = (share.mul( adminFee)).div(100 ether);\r\n            balFees =  (share.sub(adminFees));\r\n                \r\n            _paymentX30(ref[0], _userAddress, _level, balFees, adminFees);\r\n            \r\n        }\r\n        \r\n        \r\n        if(_flag == 2) {\r\n            \r\n            uint share4 = (_amount.mul(50 ether)).div(100 ether);\r\n            \r\n            if(ref[0] == address(0)) \r\n                ref[0] = owner;\r\n                \r\n                \r\n            users[ref[0]].x30Matrix[_level].availReInvestBalance = users[ref[0]].x30Matrix[_level].availReInvestBalance.add(share4);\r\n            \r\n            \r\n            if(ref[0] == owner) {\r\n                 require(address(uint160(ref[0])).send(share4), \"Transaction Failure  1\");\r\n                 emit RecievedEth(_userAddress, ref[0], 3, _level, share4, now);\r\n            }\r\n                \r\n                    \r\n            if(users[ref[0]].x30Matrix[_level].availReInvestBalance == levelPrice[_level]) {\r\n                    \r\n                if(ref[0] != owner){\r\n                    \r\n                    address reInvestRef = users[ref[0]].x30Matrix[_level].currentReferrer;\r\n                    \r\n                    updateX30Referrer(ref[0],findFreeX30Referrer(reInvestRef, _level),_level);\r\n                }\r\n                    \r\n                users[ref[0]].x30Matrix[_level].reinvestCount  = users[ref[0]].x30Matrix[_level].reinvestCount.add(1);\r\n                \r\n                users[ref[0]].x30Matrix[_level].availReInvestBalance  = 0;\r\n                \r\n                emit Reinvest(ref[0], users[ref[0]].x30Matrix[_level].currentReferrer, _userAddress, 3, _level, now);\r\n                \r\n                users[ref[0]].x30Matrix[_level].firstLevelReferrals = new address[](0);\r\n                users[ref[0]].x30Matrix[_level].secondLevelReferrals = new address[](0);\r\n                users[ref[0]].x30Matrix[_level].thirdLevelReferrals = new address[](0);\r\n                users[ref[0]].x30Matrix[_level].fourthLevelReferrals = new address[](0);\r\n                \r\n                if(users[ref[0]].activeX30Levels[_level+1] == false) {\r\n                    users[ref[0]].x30Matrix[_level].blocked = true;\r\n                }\r\n            \r\n            }\r\n            \r\n        }\r\n        \r\n        if(lastUserId < tokenDistLimit)\r\n            require(Token.mint(msg.sender,levelTokens[_level]), \"Token Transaction Failure  2\");\r\n        \r\n        \r\n    }\r\n    \r\n    function findFreeX3Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            \r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findFreeX30Referrer(address referrerAddress, uint8 level) public view returns(address) {\r\n        while (true) {\r\n            if (users[referrerAddress].activeX30Levels[level]) {\r\n                return referrerAddress;\r\n            }\r\n            \r\n            referrerAddress = users[referrerAddress].referrer;\r\n        }\r\n    }\r\n        \r\n    function usersActiveX3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n    \r\n    function updateLevelPrice(uint8 level, uint price) public returns(bool) {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        levelPrice[level] = price;\r\n        return true;\r\n    }\r\n    \r\n    function updateTokenLimit(uint _IDLimit) public returns(bool) {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        tokenDistLimit = _IDLimit;\r\n        return true;\r\n    }\r\n    \r\n    function updateTokenPerEth(uint _tokenPerEth) public returns(bool) { // input with decimal (**18)\r\n         require(msg.sender == owner, \"Only Owner\");\r\n         tokenPerEth = _tokenPerEth;\r\n         return true;\r\n    }\r\n    \r\n    function updateFeePercentage(uint _fee) public returns(bool) { // input with decimal (**18)\r\n         require(msg.sender == owner, \"Only Owner\");\r\n         adminFee = _fee;\r\n         return true;\r\n    }\r\n    \r\n    function updateLevelTokenPrice(uint8 level, uint price) public returns(bool) {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        levelTokens[level] = price;\r\n        return true;\r\n    }\r\n    \r\n    function updateCommissionAddress(address _commissionAddress) public returns(bool) {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        commissionAddress = _commissionAddress;\r\n        return true;\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n    \r\n     function usersActiveX30Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX30Levels[level];\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory,bool) {\r\n        return (users[userAddress].x3Matrix[level].currentReferrer,\r\n                users[userAddress].x3Matrix[level].referrals,\r\n                users[userAddress].x3Matrix[level].blocked);\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, bool, address) {\r\n        return (users[userAddress].x6Matrix[level].currentReferrer,\r\n                users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x6Matrix[level].blocked,\r\n                users[userAddress].x6Matrix[level].closedPart);\r\n    }\r\n    \r\n    function usersX30Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, address[] memory, address[] memory, address[] memory, bool) {\r\n        return (users[userAddress].x30Matrix[level].currentReferrer,\r\n                users[userAddress].x30Matrix[level].firstLevelReferrals,\r\n                users[userAddress].x30Matrix[level].secondLevelReferrals,\r\n                users[userAddress].x30Matrix[level].thirdLevelReferrals,\r\n                users[userAddress].x30Matrix[level].fourthLevelReferrals,\r\n                users[userAddress].x30Matrix[level].blocked);\r\n    }\r\n    \r\n    function reinvestcount(address userAddress,uint8 matrix,uint8 level)public view returns(uint){\r\n        if(matrix == 1)\r\n            return users[userAddress].x3Matrix[level].reinvestCount;\r\n        else if(matrix == 2)\r\n          return users[userAddress].x6Matrix[level].reinvestCount;\r\n        else if(matrix == 3)\r\n           return users[userAddress].x30Matrix[level].reinvestCount;\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 matrix, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n        else if(matrix == 2) {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level,  now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            while (true) {\r\n                if (users[receiver].x30Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 3, level, now);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x30Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    } \r\n\r\n\tfunction failSafe(address payable _toUser, uint _amount) onlyOwner external returns (bool) {\r\n       \t\t require(_toUser != address(0), \"Invalid Address\");\r\n       \t\t require(address(this).balance >= _amount, \"Insufficient balance\");\r\n       \t \t(_toUser).transfer(_amount);\r\n        \treturn true;\r\n   \t } \r\n   \r\n\tfunction contractLock(bool _lockStatus) onlyOwner external returns (bool) {\r\n     \t lockStatus = _lockStatus;\r\n    \treturn true;\r\n\t} \r\n\t\r\n    function sendEthDividends(address userAddress, address _from, uint8 matrix, uint8 level) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(userAddress, _from, matrix, level);\r\n        \r\n        uint adminFees = (levelPrice[level].mul(adminFee)).div(100 ether);\r\n        uint balFee = levelPrice[level].sub(adminFees);\r\n        \r\n        require(address(uint160(receiver)).send(balFee) && address(uint160(commissionAddress)).send(adminFees), \"Transaction Failure 0\");\r\n        emit RecievedAdminCommission(userAddress, adminFee, matrix, level, now);\r\n        \r\n        if(lastUserId < tokenDistLimit) \r\n            require(Token.mint(msg.sender, levelTokens[level]), \"Token Transaction Failure 1\");\r\n        \r\n        \r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level, balFee, now);\r\n        }\r\n        \r\n        else {\r\n            emit RecievedEth(_from, receiver, matrix, level, balFee, now);\r\n        }\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecievedAdminCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RecievedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"contractLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX30Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX6Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"reinvestcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDistLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commissionAddress\",\"type\":\"address\"}],\"name\":\"updateCommissionAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateLevelPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateLevelTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_IDLimit\",\"type\":\"uint256\"}],\"name\":\"updateTokenLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokenPerEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX30Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX30Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DAPPM","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a900e0d0c7aa31b4e29e78fed6dfd0e33e70442000000000000000000000000c69cba66a140b9eccc48c9878f11af02d99e66aa00000000000000000000000094e90fb435edb87bbe41d595b832a06d506f25d2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1ff0e805c56e68f0f8751de7b695ecb0049c6e0463ab60ee2ef6c506b235376f"}]}