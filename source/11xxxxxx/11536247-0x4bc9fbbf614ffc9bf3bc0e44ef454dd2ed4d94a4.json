{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\ninterface ICoxContract {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function registerPresale(address account,address _referral) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\n\r\nlibrary BasisPoints {\r\n    using SafeMath for uint;\r\n\r\n    uint constant private BASIS_POINTS = 10000;\r\n\r\n    function mulBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        return amt.mul(bp).div(BASIS_POINTS);\r\n    }\r\n\r\n    function divBP(uint amt, uint bp) internal pure returns (uint) {\r\n        require(bp > 0, \"Cannot divide by zero.\");\r\n        if (amt == 0) return 0;\r\n        return amt.mul(BASIS_POINTS).div(bp);\r\n    }\r\n\r\n    function addBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.add(mulBP(amt, bp));\r\n    }\r\n\r\n    function subBP(uint amt, uint bp) internal pure returns (uint) {\r\n        if (amt == 0) return 0;\r\n        if (bp == 0) return amt;\r\n        return amt.sub(mulBP(amt, bp));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract CoxPresale is ReentrancyGuard {\r\n    using BasisPoints for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maxBuyPerAddress;\r\n    uint256 public minBuyPerAddress;\r\n\r\n    uint256 public redeemBP;\r\n    uint256 public redeemInterval;\r\n\r\n    struct Member {\r\n        uint256 deposited;\r\n        uint256 coxEarned;\r\n        uint256 coxClaimed;\r\n        uint256 refunded;\r\n        uint256 referralCount;\r\n        uint256 referralBonus;\r\n        address referral;\r\n    }\r\n\r\n    struct Board {\r\n        uint256 totalDepositors;\r\n        uint256 totalDeposited;\r\n        uint256 totalPresaleToken;\r\n        uint256 totalCoxEarned;\r\n        uint256 totalClaimed;\r\n        address owner;\r\n    }\r\n\r\n    mapping(address => Member) private _members;\r\n    Board private _board;\r\n\r\n    uint256 private softCap;\r\n    uint256 private hardCap;\r\n\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    address payable private excess;\r\n\r\n    bool pauseDeposit;\r\n    bool private canRedeem;\r\n    bool private isRefunding;\r\n\r\n    ICoxContract private token;\r\n    IUniswapV2Router01 private uniswapRouter;\r\n\r\n    bool public hasSentToUniswap;\r\n\r\n    modifier whenPresaleActive {\r\n        require(isStarted(), \"Presale not yet started.\");\r\n        require(!_isPresaleEnded(), \"Presale has ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPresaleFinished {\r\n        require(isStarted(), \"Presale not yet started.\");\r\n        require(_isPresaleEnded(), \"Presale has not yet ended.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _board.owner, \"Can only be called by the owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused {\r\n        require(pauseDeposit == false, \"presale is paused\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        uint256 _maxBuyPerAddress,\r\n        uint256 _redeemBP,\r\n        uint256 _redeemInterval,\r\n        uint256 _minBuyPerAddress,\r\n        address owner,\r\n        address payable _excess,\r\n        uint256 totalPresaleToken,\r\n        ICoxContract _token\r\n    ) external initializer {\r\n        ReentrancyGuard.initialize();\r\n        excess = _excess;\r\n        token = _token;\r\n        maxBuyPerAddress = _maxBuyPerAddress;\r\n        minBuyPerAddress = _minBuyPerAddress;\r\n        redeemBP = _redeemBP;\r\n        redeemInterval = _redeemInterval;\r\n        uniswapRouter = IUniswapV2Router01(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _board.totalPresaleToken = totalPresaleToken;\r\n        _board.owner = owner;\r\n    }\r\n\r\n    function deposit() external payable whenNotPaused {\r\n        deposit(address(0x0));\r\n    }\r\n\r\n    function sendToUniswap(uint256 _uniswapTokens, uint256 _uniswapEth)\r\n        external\r\n        whenPresaleFinished\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(!hasSentToUniswap, \"Has already sent to Uniswap.\");\r\n        require(_isPresaleEnded(), \"presale must have ended\");\r\n\r\n        endTime = now;\r\n        hasSentToUniswap = true;\r\n        uint256 uniswapTokens = _uniswapTokens;\r\n        uint256 uniswapEth = _uniswapEth;\r\n        token.approve(address(uniswapRouter), uniswapTokens);\r\n        uniswapRouter.addLiquidityETH.value(uniswapEth)(\r\n            address(token),\r\n            uniswapTokens,\r\n            uniswapTokens,\r\n            uniswapEth,\r\n            _board.owner,\r\n            now\r\n        );\r\n    }\r\n\r\n    function releaseEthToAddress(address payable receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n        whenNotPaused\r\n    {\r\n        require(\r\n            hasSentToUniswap || _isPresaleEnded(),\r\n            \"Has not yet sent to Uniswap.\"\r\n        );\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    function releaseTokenToAddress(address receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            hasSentToUniswap || _isPresaleEnded(),\r\n            \"Has not yet sent to Uniswap.\"\r\n        );\r\n        token.transfer(receiver, amount);\r\n    }\r\n\r\n    function emergencyEthWithdrawl()\r\n        external\r\n        whenPresaleFinished\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(\r\n            hasSentToUniswap || _isPresaleEnded(),\r\n            \"Has not yet sent to Uniswap.\"\r\n        );\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function setDepositPause(bool val) external onlyOwner {\r\n        pauseDeposit = val;\r\n    }\r\n\r\n    function redeem() external whenPresaleFinished {\r\n        require(canRedeem, \"Must have sent to Uniswap before any redeems.\");\r\n        uint256 claimable = calculateReedemable(msg.sender);\r\n        _members[msg.sender].coxClaimed = _members[msg.sender].coxClaimed.add(\r\n            claimable\r\n        );\r\n        _board.totalClaimed = _board.totalClaimed.add(claimable);\r\n        token.transfer(msg.sender, claimable);\r\n    }\r\n\r\n    function deposit(address payable referrer)\r\n        public\r\n        payable\r\n        whenPresaleActive\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        require(!pauseDeposit, \"Deposits are paused.\");\r\n        require(\r\n            msg.value >= minBuyPerAddress,\r\n            \"Deposit must be greater than min buy\"\r\n        );\r\n        require(\r\n            _members[msg.sender].deposited.add(msg.value) <= maxBuyPerAddress,\r\n            \"Deposit exceeds max buy per address\"\r\n        );\r\n\r\n        if (_members[msg.sender].deposited == 0)\r\n            _board.totalDepositors = _board.totalDepositors.add(1);\r\n\r\n        (uint256 tokenPerEth, uint256 referralBP) = calculateRatePerEth();\r\n        uint256 depositVal = msg.value.subBP(referralBP);\r\n        uint256 tokensToIssue = msg.value.mul(tokenPerEth);\r\n\r\n        _members[msg.sender].deposited = _members[msg.sender].deposited.add(\r\n            msg.value\r\n        );\r\n        _board.totalDeposited = _board.totalDeposited.add(depositVal);\r\n\r\n        _board.totalCoxEarned = _board.totalCoxEarned.add(tokensToIssue);\r\n\r\n        _members[msg.sender].coxEarned = _members[msg.sender].coxEarned.add(\r\n            tokensToIssue\r\n        );\r\n\r\n        if (referrer != address(0x0) && referrer != msg.sender) {\r\n            uint256 referralValue = msg.value.sub(depositVal);\r\n            _members[referrer].referralBonus = _members[referrer]\r\n                .referralBonus\r\n                .add(referralValue);\r\n            _members[referrer].referralCount = _members[referrer]\r\n                .referralCount\r\n                .add(1);\r\n            referrer.transfer(referralValue);\r\n\r\n            // register referral on token\r\n            token.registerPresale(msg.sender, referrer);\r\n        } else excess.transfer(msg.value.sub(depositVal));\r\n    }\r\n\r\n    function calculateReedemable(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (endTime == 0) return 0;\r\n        uint256 earnedCox = _members[account].coxEarned;\r\n        uint256 claimedCox = _members[msg.sender].coxClaimed;\r\n        uint256 cycles = now.sub(endTime).div(redeemInterval).add(1);\r\n        uint256 totalRedeemable = earnedCox.mulBP(redeemBP).mul(cycles);\r\n        uint256 claimable;\r\n        if (totalRedeemable >= earnedCox) {\r\n            claimable = earnedCox.sub(claimedCox);\r\n        } else {\r\n            claimable = totalRedeemable.sub(claimedCox);\r\n        }\r\n        return claimable;\r\n    }\r\n\r\n    function calculateRatePerEth() public view returns (uint256, uint256) {\r\n        if (_board.totalDeposited <= 1500 ether) {\r\n            return (9000, 1000);\r\n        } else if (\r\n            _board.totalDeposited > 1500 ether &&\r\n            _board.totalDeposited <= 4500 ether\r\n        ) {\r\n            return (8000, 800);\r\n        } else if (\r\n            _board.totalDeposited > 4500 ether &&\r\n            _board.totalDeposited <= 7500 ether\r\n        ) {\r\n            return (7500, 700);\r\n        } else if (\r\n            _board.totalDeposited > 7500 ether &&\r\n            _board.totalDeposited <= 10500 ether\r\n        ) {\r\n            return (7000, 600);\r\n        } else if (\r\n            _board.totalDeposited > 10500 ether &&\r\n            _board.totalDeposited <= 13500 ether\r\n        ) {\r\n            return (6500, 500);\r\n        } else {\r\n            return (6000, 400);\r\n        }\r\n    }\r\n\r\n    function isStarted() public view returns (bool) {\r\n        return (startTime != 0 && now > startTime);\r\n    }\r\n\r\n    function _isPresaleEnded() public view returns (bool) {\r\n        if (hasSentToUniswap) return true;\r\n        return ((address(this).balance >= hardCap && hardCap != 0) ||\r\n            (isStarted() && (now > endTime && endTime != 0)));\r\n    }\r\n\r\n    function setStartTime(uint256 time) external onlyOwner {\r\n        startTime = time;\r\n    }\r\n\r\n    function setEndTime(uint256 time) external onlyOwner {\r\n        endTime = time;\r\n    }\r\n\r\n    function updateSoftCap(uint256 value) external onlyOwner {\r\n        softCap = value.mul(1e18);\r\n    }\r\n\r\n    function vsc() public view returns (uint256) {\r\n        return softCap;\r\n    }\r\n\r\n    function updatehardCap(uint256 value) external onlyOwner {\r\n        hardCap = value.mul(1e18);\r\n    }\r\n\r\n    function viewhardCap() public view returns (uint256) {\r\n        return hardCap;\r\n    }\r\n\r\n    function updateTotalPresaleToken(uint256 value) external virtual returns (uint256) {\r\n        _board.totalPresaleToken = value;\r\n        return _board.totalPresaleToken;\r\n    }\r\n\r\n    function setCanRedeem(bool value)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        canRedeem = value;\r\n        return canRedeem;\r\n    }\r\n\r\n    function viewCanRedeem() public view onlyOwner returns (bool) {\r\n        return canRedeem;\r\n    }\r\n\r\n    function viewMember(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 deposited,\r\n            uint256 tokenEarned,\r\n            uint256 tokenClaimed,\r\n            uint256 referralCount,\r\n            uint256 referralBonus,\r\n            address referrer\r\n        )\r\n    {\r\n        return (\r\n            _members[account].deposited,\r\n            _members[account].coxEarned,\r\n            _members[account].coxClaimed,\r\n            _members[account].referralCount,\r\n            _members[account].referralBonus,\r\n            _members[account].referral\r\n        );\r\n    }\r\n\r\n    function ViewBoard()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalDeposited,\r\n            uint256 totalDepositors,\r\n            uint256 totalPresaleToken,\r\n            uint256 totalCoxEarned,\r\n            uint256 totalClaimed\r\n        )\r\n    {\r\n        return (\r\n            _board.totalDeposited,\r\n            _board.totalDepositors,\r\n            _board.totalPresaleToken,\r\n            _board.totalCoxEarned,\r\n            _board.totalClaimed\r\n        );\r\n    }\r\n\r\n    function setIsRefunding(uint value) external virtual onlyOwner returns (bool) {\r\n       if(value == 1) isRefunding = true;\r\n       else isRefunding = false;\r\n       return isRefunding;\r\n    }\r\n\r\n    function viewIsRefunding() public view returns (bool) {\r\n       return isRefunding;\r\n    }\r\n\r\n    function getRefund(address payable account) external virtual {\r\n        require(isRefunding, \"refund is not activate.\");\r\n        uint refundAmt = getRefundable(account);\r\n        require(refundAmt > 0, \"you have nothing to refund\");\r\n        _members[account].refunded = _members[account].refunded.add(refundAmt);\r\n        account.transfer(refundAmt);\r\n    }\r\n\r\n    function getRefundable(address account) public view returns (uint256) {\r\n        if (!isRefunding) return 0;\r\n        return _members[account].deposited.subBP(1000);\r\n    }\r\n    \r\n    function changeOwner(address _owner) external virtual onlyOwner returns (address){\r\n        require(_owner != address(0x0),\"address cannot be 0x0\");\r\n        _board.owner = _owner;\r\n        return _board.owner;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"ViewBoard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDepositors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPresaleToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCoxEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRatePerEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateReedemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyEthWithdrawl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRefundable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSentToUniswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuyPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_excess\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPresaleToken\",\"type\":\"uint256\"},{\"internalType\":\"contract ICoxContract\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseEthToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseTokenToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uniswapTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniswapEth\",\"type\":\"uint256\"}],\"name\":\"sendToUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCanRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setIsRefunding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSoftCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTotalPresaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updatehardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCanRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewIsRefunding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewhardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CoxPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1096706227f23773cc9314426151f3e9664c887978dfd8ea7ff00480bd0aecfd"}]}