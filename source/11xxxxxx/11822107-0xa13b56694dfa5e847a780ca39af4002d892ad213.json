{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\modules\\SafeMath.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'SafeMath: addition overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'SafeMath: substraction underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Ownable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\modules\\Managerable.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract Managerable is Ownable {\r\n\r\n    address private _managerAddress;\r\n    /**\r\n     * @dev modifier, Only manager can be granted exclusive access to specific functions. \r\n     *\r\n     */\r\n    modifier onlyManager() {\r\n        require(_managerAddress == msg.sender,\"Managerable: caller is not the Manager\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev set manager by owner. \r\n     *\r\n     */\r\n    function setManager(address managerAddress)\r\n    public\r\n    onlyOwner\r\n    {\r\n        _managerAddress = managerAddress;\r\n    }\r\n    /**\r\n     * @dev get manager address. \r\n     *\r\n     */\r\n    function getManager()public view returns (address) {\r\n        return _managerAddress;\r\n    }\r\n}\r\n\r\n// File: contracts\\FNXMinePool\\IFNXMinePool.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface IFNXMinePool {\r\n    function transferMinerCoin(address account,address recieptor,uint256 amount)external;\r\n    function mintMinerCoin(address account,uint256 amount) external;\r\n    function burnMinerCoin(address account,uint256 amount) external;\r\n    function addMinerBalance(address account,uint256 amount) external;\r\n}\r\ncontract ImportFNXMinePool is Ownable{\r\n    IFNXMinePool internal _FnxMinePool;\r\n    function getFNXMinePoolAddress() public view returns(address){\r\n        return address(_FnxMinePool);\r\n    }\r\n    function setFNXMinePoolAddress(address fnxMinePool)public onlyOwner{\r\n        _FnxMinePool = IFNXMinePool(fnxMinePool);\r\n    }\r\n}\r\n\r\n// File: contracts\\ERC20\\Erc20Data.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\ncontract Erc20Data is Ownable{\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    \r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n    \r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\modules\\timeLimitation.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract timeLimitation is Ownable {\r\n    \r\n    /**\r\n     * @dev FPT has burn time limit. When user's balance is moved in som coins, he will wait `timeLimited` to burn FPT. \r\n     * latestTransferIn is user's latest time when his balance is moved in.\r\n     */\r\n    mapping(uint256=>uint256) internal itemTimeMap;\r\n    uint256 internal limitation = 1 hours;\r\n    /**\r\n     * @dev set time limitation, only owner can invoke. \r\n     * @param _limitation new time limitation.\r\n     */ \r\n    function setTimeLimitation(uint256 _limitation) public onlyOwner {\r\n        limitation = _limitation;\r\n    }\r\n    function setItemTimeLimitation(uint256 item) internal{\r\n        itemTimeMap[item] = now;\r\n    }\r\n    function getTimeLimitation() public view returns (uint256){\r\n        return limitation;\r\n    }\r\n    /**\r\n     * @dev Retrieve user's start time for burning. \r\n     * @param item item key.\r\n     */ \r\n    function getItemTimeLimitation(uint256 item) public view returns (uint256){\r\n        return itemTimeMap[item]+limitation;\r\n    }\r\n    modifier OutLimitation(uint256 item) {\r\n        require(itemTimeMap[item]+limitation<now,\"Time limitation is not expired!\");\r\n        _;\r\n    }    \r\n}\r\n\r\n// File: contracts\\FPTCoin\\FPTData.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\ncontract FPTData is Erc20Data,ImportFNXMinePool,Managerable,timeLimitation{\r\n    /**\r\n    * @dev lock mechanism is used when user redeem collateral and left collateral is insufficient.\r\n    * _totalLockedWorth stores total locked worth, priced in USD.\r\n    * lockedBalances stores user's locked FPTCoin.\r\n    * lockedTotalWorth stores user's locked worth, priced in USD. For locked FPTCoin's net worth is constant when It was locked.\r\n    */\r\n    uint256 internal _totalLockedWorth;\r\n    mapping (address => uint256) internal lockedBalances;\r\n    mapping (address => uint256) internal lockedTotalWorth;\r\n    /**\r\n     * @dev Emitted when `owner` locked  `amount` FPT, which net worth is  `worth` in USD. \r\n     */\r\n    event AddLocked(address indexed owner, uint256 amount,uint256 worth);\r\n    /**\r\n     * @dev Emitted when `owner` burned locked  `amount` FPT, which net worth is  `worth` in USD. \r\n     */\r\n    event BurnLocked(address indexed owner, uint256 amount,uint256 worth);\r\n\r\n}\r\n\r\n// File: contracts\\FPTCoin\\SharedCoin.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract SharedCoin is FPTData  {\r\n    using SafeMath for uint256;\r\n    function initialize() onlyOwner public{\r\n        _totalSupply = 0;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n    public\r\n    returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n/*\r\n    function burn(uint256 amount) public onlyOwner returns (bool){\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n    function mint(address account,uint256 amount) public onlyOwner returns (bool){\r\n        _mint(account,amount);\r\n        return true;\r\n    }\r\n    */\r\n    /**\r\n     * @dev add `recipient`'s balance to iterable mapping balances.\r\n     */\r\n    function _addBalance(address recipient, uint256 amount) internal {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balances[recipient] = balances[recipient].add(amount);\r\n    }\r\n    /**\r\n     * @dev add `recipient`'s balance to iterable mapping balances.\r\n     */\r\n    function _subBalance(address recipient, uint256 amount) internal {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        balances[recipient] = balances[recipient].sub(amount);\r\n    }\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _subBalance(sender,amount);\r\n        _addBalance(recipient,amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _addBalance(account,amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a {Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _subBalance(account,amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\FPTCoin\\FPTCoin.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title FPTCoin is finnexus collateral Pool token, implement ERC20 interface.\r\n * @dev ERC20 token. Its inside value is collatral pool net worth.\r\n *\r\n */\r\ncontract FPTCoin is SharedCoin {\r\n    using SafeMath for uint256;\r\n    mapping (address => bool) internal timeLimitWhiteList;\r\n    constructor (address minePoolAddr,string memory tokenName)public{\r\n        initialize();\r\n        //_FnxMinePool = IFNXMinePool(minePoolAddr);\r\n        name = tokenName;\r\n        symbol = tokenName;\r\n    }\r\n    /**\r\n     * @dev constructor function. set FNX minePool contract address. \r\n     */ \r\n    function initialize() onlyOwner public{\r\n        SharedCoin.initialize();\r\n    }\r\n    function update() onlyOwner public{\r\n        timeLimitWhiteList[0xf1FF936B72499382983a8fBa9985C41cB80BE17D] = true;\r\n    }\r\n    /**\r\n     * @dev Retrieve user's start time for burning. \r\n     * @param user user's account.\r\n     */ \r\n    function getUserBurnTimeLimite(address user) public view returns (uint256){\r\n        return getItemTimeLimitation(uint256(user));\r\n    }\r\n    /**\r\n     * @dev Retrieve total locked worth. \r\n     */ \r\n    function getTotalLockedWorth() public view returns (uint256) {\r\n        return _totalLockedWorth;\r\n    }\r\n    /**\r\n     * @dev Retrieve user's locked balance. \r\n     * @param account user's account.\r\n     */ \r\n    function lockedBalanceOf(address account) public view returns (uint256) {\r\n        return lockedBalances[account];\r\n    }\r\n    /**\r\n     * @dev Retrieve user's locked net worth. \r\n     * @param account user's account.\r\n     */ \r\n    function lockedWorthOf(address account) public view returns (uint256) {\r\n        return lockedTotalWorth[account];\r\n    }\r\n    /**\r\n     * @dev Retrieve user's locked balance and locked net worth. \r\n     * @param account user's account.\r\n     */ \r\n    function getLockedBalance(address account) public view returns (uint256,uint256) {\r\n        return (lockedBalances[account],lockedTotalWorth[account]);\r\n    }\r\n    /**\r\n     * @dev Interface to manager FNX mine pool contract, add miner balance when user has bought some options. \r\n     * @param account user's account.\r\n     * @param amount user's pay for buying options, priced in USD.\r\n     */ \r\n    function addMinerBalance(address account,uint256 amount) public onlyOwner{\r\n        if (amount == 0){\r\n            timeLimitWhiteList[account] = false;\r\n        }else{\r\n            timeLimitWhiteList[account] = true;\r\n        }\r\n        //_FnxMinePool.addMinerBalance(account,amount);\r\n    }\r\n    function setTransferTimeLimitation(address from,address recipient) internal {\r\n        if (!timeLimitWhiteList[from]){\r\n            setItemTimeLimitation(uint256(recipient));\r\n        }\r\n    }\r\n    /**\r\n     * dev Burn user's locked balance, when user redeem collateral. \r\n     * param account user's account.\r\n     * param amount amount of burned FPT.\r\n \r\n    function burnLocked(address account, uint256 amount) public onlyManager{\r\n        require(latestTransferIn[account]+timeLimited<now,\"FPT coin locked time is not expired!\");\r\n        uint256 lockedAmount = lockedBalances[account];\r\n        require(amount<=lockedAmount,\"burnLocked: balance is insufficient\");\r\n        if(lockedAmount>0){\r\n            uint256 lockedWorth = lockedTotalWorth[account];\r\n            if (amount == lockedAmount){\r\n                _subLockBalance(account,lockedAmount,lockedWorth);\r\n            }else{\r\n                uint256 burnWorth = amount*lockedWorth/lockedAmount;\r\n                _subLockBalance(account,amount,burnWorth);\r\n            }\r\n        }\r\n    }\r\n     */\r\n    /**\r\n     * @dev Move user's FPT to locked balance, when user redeem collateral. \r\n     * @param account user's account.\r\n     * @param amount amount of locked FPT.\r\n     * @param lockedWorth net worth of locked FPT.\r\n     */ \r\n    function addlockBalance(address account, uint256 amount,uint256 lockedWorth)public onlyManager {\r\n        burn(account,amount);\r\n        _addLockBalance(account,amount,lockedWorth);\r\n    }\r\n    /**\r\n     * @dev Move user's FPT to 'recipient' balance, a interface in ERC20. \r\n     * @param recipient recipient's account.\r\n     * @param amount amount of FPT.\r\n     */ \r\n    function transfer(address recipient, uint256 amount)public returns (bool){\r\n        //require(address(_FnxMinePool) != address(0),\"FnxMinePool is not set\");\r\n        //_FnxMinePool.transferMinerCoin(msg.sender,recipient,amount);\r\n        setTransferTimeLimitation(msg.sender,recipient);\r\n        return SharedCoin.transfer(recipient,amount);\r\n    }\r\n    /**\r\n     * @dev Move sender's FPT to 'recipient' balance, a interface in ERC20. \r\n     * @param sender sender's account.\r\n     * @param recipient recipient's account.\r\n     * @param amount amount of FPT.\r\n     */ \r\n    function transferFrom(address sender, address recipient, uint256 amount)public returns (bool){\r\n        //require(address(_FnxMinePool) != address(0),\"FnxMinePool is not set\");\r\n        //_FnxMinePool.transferMinerCoin(sender,recipient,amount);\r\n        setTransferTimeLimitation(sender,recipient);\r\n        return SharedCoin.transferFrom(sender,recipient,amount);\r\n    }\r\n    /**\r\n     * @dev burn user's FPT when user redeem FPTCoin. \r\n     * @param account user's account.\r\n     * @param amount amount of FPT.\r\n     */ \r\n    function burn(address account, uint256 amount) public onlyManager OutLimitation(uint256(account)) {\r\n        //require(address(_FnxMinePool) != address(0),\"FnxMinePool is not set\");\r\n        //_FnxMinePool.burnMinerCoin(account,amount);\r\n        SharedCoin._burn(account,amount);\r\n    }\r\n    /**\r\n     * @dev mint user's FPT when user add collateral. \r\n     * @param account user's account.\r\n     * @param amount amount of FPT.\r\n     */ \r\n    function mint(address account, uint256 amount) public onlyManager {\r\n        //require(address(_FnxMinePool) != address(0),\"FnxMinePool is not set\");\r\n        //_FnxMinePool.mintMinerCoin(account,amount);\r\n        setTransferTimeLimitation(address(0),account);\r\n        SharedCoin._mint(account,amount);\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, add user's locked balance. \r\n     * @param account user's account.\r\n     * @param amount amount of FPT.\r\n     * @param lockedWorth net worth of FPT.\r\n     */ \r\n    function _addLockBalance(address account, uint256 amount,uint256 lockedWorth)internal {\r\n        lockedBalances[account]= lockedBalances[account].add(amount);\r\n        lockedTotalWorth[account]= lockedTotalWorth[account].add(lockedWorth);\r\n        _totalLockedWorth = _totalLockedWorth.add(lockedWorth);\r\n        emit AddLocked(account, amount,lockedWorth);\r\n    }\r\n    /**\r\n     * @dev An auxiliary function, deduct user's locked balance. \r\n     * @param account user's account.\r\n     * @param amount amount of FPT.\r\n     * @param lockedWorth net worth of FPT.\r\n     */ \r\n    function _subLockBalance(address account,uint256 amount,uint256 lockedWorth)internal {\r\n        lockedBalances[account]= lockedBalances[account].sub(amount);\r\n        lockedTotalWorth[account]= lockedTotalWorth[account].sub(lockedWorth);\r\n        _totalLockedWorth = _totalLockedWorth.sub(lockedWorth);\r\n        emit BurnLocked(account, amount,lockedWorth);\r\n    }\r\n    /**\r\n     * @dev An interface of redeem locked FPT, when user redeem collateral, only manager contract can invoke. \r\n     * @param account user's account.\r\n     * @param tokenAmount amount of FPT.\r\n     * @param leftCollateral left available collateral in collateral pool, priced in USD.\r\n     */ \r\n    function redeemLockedCollateral(address account,uint256 tokenAmount,uint256 leftCollateral)public onlyManager OutLimitation(uint256(account)) returns (uint256,uint256){\r\n        if (leftCollateral == 0){\r\n            return(0,0);\r\n        }\r\n        uint256 lockedAmount = lockedBalances[account];\r\n        uint256 lockedWorth = lockedTotalWorth[account];\r\n        if (lockedAmount == 0 || lockedWorth == 0){\r\n            return (0,0);\r\n        }\r\n        uint256 redeemWorth = 0;\r\n        uint256 lockedBurn = 0;\r\n        uint256 lockedPrice = lockedWorth/lockedAmount;\r\n        if (lockedAmount >= tokenAmount){\r\n            lockedBurn = tokenAmount;\r\n            redeemWorth = tokenAmount*lockedPrice;\r\n        }else{\r\n            lockedBurn = lockedAmount;\r\n            redeemWorth = lockedWorth;\r\n        }\r\n        if (redeemWorth > leftCollateral) {\r\n            lockedBurn = leftCollateral/lockedPrice;\r\n            redeemWorth = lockedBurn*lockedPrice;\r\n        }\r\n        if (lockedBurn > 0){\r\n            _subLockBalance(account,lockedBurn,redeemWorth);\r\n            return (lockedBurn,redeemWorth);\r\n        }\r\n        return (0,0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minePoolAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"AddLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"worth\",\"type\":\"uint256\"}],\"name\":\"BurnLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMinerBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedWorth\",\"type\":\"uint256\"}],\"name\":\"addlockBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFNXMinePoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"getItemTimeLimitation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLimitation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalLockedWorth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBurnTimeLimite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedWorthOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftCollateral\",\"type\":\"uint256\"}],\"name\":\"redeemLockedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"fnxMinePool\",\"type\":\"address\"}],\"name\":\"setFNXMinePoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitation\",\"type\":\"uint256\"}],\"name\":\"setTimeLimitation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FPTCoin","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000011c23650bcba425a521b8aa02e206e6af780c6c8000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000054650542d41000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b394586102d099ddcec78d9047e7e63956fd74e34f73a42c1677999b413205b8"}]}