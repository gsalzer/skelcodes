{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.17;\r\n//Zep\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\ncontract BAFIGasDrop {\r\n\r\n\r\n//receivers\r\n    mapping(address => bool) public receivers;\r\n// token balances\r\n    mapping ( address => uint256 ) public balances;\r\n\t//amount per receiver (with decimals)\r\n\tuint256 amountToClaim = 1000000000000000000;\r\n\tuint256 public totalSent = 0;\r\n\t\r\n\taddress  _owner;\r\n\taddress  whoSent;\r\n\tuint256 dappBalance;\r\n\r\n//debugging breakpoints, quick and easy \r\n    uint public brpt = 0;\r\n    uint public brpt1 = 0;\r\n\r\n    IERC20 currentToken ;\r\n\r\n\r\n//modifiers\t\r\n\tmodifier onlyOwner() {\r\n      require(msg.sender == _owner);\r\n      _;\r\n  }\r\n    /// Create new - constructor\r\n     function  BAFIGasDrop() public {\r\n\t\t_owner = msg.sender;\r\n\t\tdappBalance = 0;\r\n    }\r\n\r\n//address of token contract, not token sender!    \r\n\taddress currentTokenAddress = 0xad808e7a446f14a109dafce7dd2fe7ae7ff86b20;\r\n\r\n\r\n    //deposit\r\n      function deposit(uint tokens) public onlyOwner {\r\n\r\n\r\n    // add the deposited tokens into existing balance \r\n    balances[msg.sender]+= tokens;\r\n\r\n    // transfer the tokens from the sender to this contract\r\n    IERC20(currentTokenAddress).transferFrom(msg.sender, address(this), tokens);\r\n    whoSent = msg.sender;\r\n    \r\n  }\r\n\r\nfunction hasReceived(address received)  internal  view returns(bool)\r\n{\r\n    bool result = false;\r\n    if(receivers[received] == true)\r\n        result = true;\r\n    \r\n    return result;\r\n}\r\n\r\nuint256 temp = 0;\r\n /// claim gas drop amount (only once per address)\r\n    function claimGasDrop() public returns(bool) {\r\n\r\n\r\n\r\n\t\t//have they already receivered?\r\n        if(receivers[msg.sender] != true)\r\n\t    {\r\n\r\n    \t    //brpt = 1;\r\n    \t\tif(amountToClaim <= balances[whoSent])\r\n    \t\t{\r\n    \t\t    //brpt = 2; \r\n    \t\t    balances[whoSent] -= amountToClaim;\r\n    \t\t\t//brpt = 3;\r\n    \t\t\tIERC20(currentTokenAddress).transfer(msg.sender, amountToClaim);\r\n    \t\t\t\r\n    \t\t\treceivers[msg.sender] = true;\r\n    \t\t\ttotalSent += amountToClaim;\r\n    \t\t\t\r\n    \t\t\t//brpt = 4;\r\n    \t\t\t\r\n    \t\t\t\r\n    \t\t}\r\n\r\n\t    }\r\n\t\t\r\n\r\n\t   \r\n    }\r\n\r\n\r\n //which currentToken is used here?\r\n  function setCurrentToken(address currentTokenContract) external onlyOwner {\r\n        currentTokenAddress = currentTokenContract;\r\n        currentToken = IERC20(currentTokenContract);\r\n        dappBalance = currentToken.balanceOf(address(this));\r\n      \r\n  }\r\n\r\n\r\n\r\n //set amount per gas claim (amount each address will receive)\r\n  function setGasClaim(uint256 amount) external onlyOwner {\r\n    \r\n      amountToClaim = amount;\r\n      \r\n  }\r\n//get amount per gas claim (amount each address will receive)\r\n  function getGasClaimAmount()  public view returns (uint256)  {\r\n    \r\n      return amountToClaim;\r\n      \r\n  }\r\n  \r\n  \r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"brpt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGasClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasClaimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brpt1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"currentTokenContract\",\"type\":\"address\"}],\"name\":\"setCurrentToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGasDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BAFIGasDrop","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d2ee3022bd193a92d13f8fcccdb676ac22c68610b6eb53aa7cdffb84cc3e0983"}]}