{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function want(address) external view returns (address);\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(address, uint) external;\r\n    function maxAcceptAmount(address) external view returns (uint256);\r\n    function earn(address, uint) external;\r\n\r\n    function getStrategyCount(address _vault) external view returns(uint256);\r\n    function depositAvailable(address _vault) external view returns(bool);\r\n    function harvestAllStrategies(address _vault) external;\r\n    function harvestStrategy(address _vault, address _strategy) external;\r\n}\r\n\r\ninterface ITokenInterface is IERC20 {\r\n    /** VALUE, YFV, vUSD, vETH has minters **/\r\n    function minters(address account) external view returns (bool);\r\n    function mint(address _to, uint _amount) external;\r\n\r\n    /** YFV <-> VALUE **/\r\n    function deposit(uint _amount) external;\r\n    function withdraw(uint _amount) external;\r\n    function cap() external returns (uint);\r\n    function yfvLockedBalance() external returns (uint);\r\n}\r\n\r\ninterface IYFVReferral {\r\n    function setReferrer(address farmer, address referrer) external;\r\n    function getReferrer(address farmer) external view returns (address);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint valueToken) external returns (uint freed);\r\n}\r\n\r\ncontract ValueGovernanceVault is ERC20 {\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 _flag) {\r\n        if ((_flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint gasStart = gasleft();\r\n            _;\r\n            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    ITokenInterface public yfvToken; // stake and wrap to VALUE\r\n    ITokenInterface public valueToken; // stake and reward token\r\n    ITokenInterface public vUSD; // reward token\r\n    ITokenInterface public vETH; // reward token\r\n\r\n    uint public fundCap = 9500; // use up to 95% of fund (to keep small withdrawals cheap)\r\n    uint public constant FUND_CAP_DENOMINATOR = 10000;\r\n\r\n    uint public earnLowerlimit;\r\n\r\n    address public governance;\r\n    address public controller;\r\n    address public rewardReferral;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint amount;\r\n        uint valueRewardDebt;\r\n        uint vusdRewardDebt;\r\n        uint lastStakeTime;\r\n        uint accumulatedStakingPower; // will accumulate every time user harvest\r\n\r\n        uint lockedAmount;\r\n        uint lockedDays; // 7 days -> 150 days (5 months)\r\n        uint boostedExtra; // times 1e12 (285200000000 -> +28.52%). See below.\r\n        uint unlockedTime;\r\n    }\r\n\r\n    uint maxLockedDays = 150;\r\n\r\n    uint lastRewardBlock;  // Last block number that reward distribution occurs.\r\n    uint accValuePerShare; // Accumulated VALUEs per share, times 1e12. See below.\r\n    uint accVusdPerShare; // Accumulated vUSD per share, times 1e12. See below.\r\n\r\n    uint public valuePerBlock; // 0.2 VALUE/block at start\r\n    uint public vusdPerBlock; // 5 vUSD/block at start\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    uint public totalDepositCap;\r\n\r\n    uint public constant vETH_REWARD_FRACTION_RATE = 1000;\r\n    uint public minStakingAmount = 0 ether;\r\n    uint public unstakingFrozenTime = 40 hours;\r\n    // ** unlockWithdrawFee = 1.92%: stakers will need to pay 1.92% (sent to insurance fund) of amount they want to withdraw if the coin still frozen\r\n    uint public unlockWithdrawFee = 192; // per ten thousand (eg. 15 -> 0.15%)\r\n    address public valueInsuranceFund = 0xb7b2Ea8A1198368f950834875047aA7294A2bDAa; // set to Governance Multisig at start\r\n\r\n    event Deposit(address indexed user, uint amount);\r\n    event Withdraw(address indexed user, uint amount);\r\n    event RewardPaid(address indexed user, uint reward);\r\n    event CommissionPaid(address indexed user, uint reward);\r\n    event Locked(address indexed user, uint amount, uint _days);\r\n    event EmergencyWithdraw(address indexed user, uint amount);\r\n\r\n    constructor (ITokenInterface _yfvToken,\r\n        ITokenInterface _valueToken,\r\n        ITokenInterface _vUSD,\r\n        ITokenInterface _vETH,\r\n        uint _valuePerBlock,\r\n        uint _vusdPerBlock,\r\n        uint _startBlock) public ERC20(\"GovVault:ValueLiquidity\", \"gvVALUE\") {\r\n        yfvToken = _yfvToken;\r\n        valueToken = _valueToken;\r\n        vUSD = _vUSD;\r\n        vETH = _vETH;\r\n        valuePerBlock = _valuePerBlock;\r\n        vusdPerBlock = _vusdPerBlock;\r\n        lastRewardBlock = _startBlock;\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function balance() public view returns (uint) {\r\n        uint bal = valueToken.balanceOf(address(this));\r\n        if (controller != address(0)) bal = bal.add(IController(controller).balanceOf(address(valueToken)));\r\n        return bal;\r\n    }\r\n\r\n    function setFundCap(uint _fundCap) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        fundCap = _fundCap;\r\n    }\r\n\r\n    function setTotalDepositCap(uint _totalDepositCap) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        totalDepositCap = _totalDepositCap;\r\n    }\r\n\r\n    function setGovernance(address _governance) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setController(address _controller) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setRewardReferral(address _rewardReferral) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        rewardReferral = _rewardReferral;\r\n    }\r\n\r\n    function setEarnLowerlimit(uint _earnLowerlimit) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        earnLowerlimit = _earnLowerlimit;\r\n    }\r\n\r\n    function setMaxLockedDays(uint _maxLockedDays) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        maxLockedDays = _maxLockedDays;\r\n    }\r\n\r\n    function setValuePerBlock(uint _valuePerBlock) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_valuePerBlock <= 10 ether, \"Too big _valuePerBlock\"); // <= 10 VALUE\r\n        updateReward();\r\n        valuePerBlock = _valuePerBlock;\r\n    }\r\n\r\n    function setVusdPerBlock(uint _vusdPerBlock) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_vusdPerBlock <= 200 * (10 ** 9), \"Too big _vusdPerBlock\"); // <= 200 vUSD\r\n        updateReward();\r\n        vusdPerBlock = _vusdPerBlock;\r\n    }\r\n\r\n    function setMinStakingAmount(uint _minStakingAmount) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        minStakingAmount = _minStakingAmount;\r\n    }\r\n\r\n    function setUnstakingFrozenTime(uint _unstakingFrozenTime) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        unstakingFrozenTime = _unstakingFrozenTime;\r\n    }\r\n\r\n    function setUnlockWithdrawFee(uint _unlockWithdrawFee) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(_unlockWithdrawFee <= 1000, \"Dont be too greedy\"); // <= 10%\r\n        unlockWithdrawFee = _unlockWithdrawFee;\r\n    }\r\n\r\n    function setValueInsuranceFund(address _valueInsuranceFund) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        valueInsuranceFund = _valueInsuranceFund;\r\n    }\r\n\r\n    // To upgrade vUSD contract (v1 is still experimental, we may need vUSDv2 with rebase() function working soon - then governance will call this upgrade)\r\n    function upgradeVUSDContract(address _vUSDContract) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vUSD = ITokenInterface(_vUSDContract);\r\n    }\r\n\r\n    // To upgrade vETH contract (v1 is still experimental, we may need vETHv2 with rebase() function working soon - then governance will call this upgrade)\r\n    function upgradeVETHContract(address _vETHContract) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vETH = ITokenInterface(_vETHContract);\r\n    }\r\n\r\n    // Custom logic in here for how much the vault allows to be borrowed\r\n    // Sets minimum required on-hand to keep small withdrawals cheap\r\n    function available() public view returns (uint) {\r\n        return valueToken.balanceOf(address(this)).mul(fundCap).div(FUND_CAP_DENOMINATOR);\r\n    }\r\n\r\n    function earn(uint8 _flag) public discountCHI(_flag) {\r\n        if (controller != address(0)) {\r\n            uint _amount = available();\r\n            uint _accepted = IController(controller).maxAcceptAmount(address(valueToken));\r\n            if (_amount > _accepted) _amount = _accepted;\r\n            if (_amount > 0) {\r\n                yfvToken.transfer(controller, _amount);\r\n                IController(controller).earn(address(yfvToken), _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRewardAndDepositAll(uint8 _flag) external discountCHI(_flag) {\r\n        unstake(0, 0x0);\r\n        depositAll(address(0), 0x0);\r\n    }\r\n\r\n    function depositAll(address _referrer, uint8 _flag) public discountCHI(_flag) {\r\n        deposit(valueToken.balanceOf(msg.sender), _referrer, 0x0);\r\n    }\r\n\r\n    function deposit(uint _amount, address _referrer, uint8 _flag) public discountCHI(_flag) {\r\n        uint _pool = balance();\r\n        uint _before = valueToken.balanceOf(address(this));\r\n        valueToken.transferFrom(msg.sender, address(this), _amount);\r\n        uint _after = valueToken.balanceOf(address(this));\r\n        require(totalDepositCap == 0 || _after <= totalDepositCap, \">totalDepositCap\");\r\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n        uint _shares = _deposit(address(this), _pool, _amount);\r\n        _stakeShares(msg.sender, _shares, _referrer);\r\n    }\r\n\r\n    function depositYFV(uint _amount, address _referrer, uint8 _flag) public discountCHI(_flag) {\r\n        uint _pool = balance();\r\n        yfvToken.transferFrom(msg.sender, address(this), _amount);\r\n        uint _before = valueToken.balanceOf(address(this));\r\n        yfvToken.approve(address(valueToken), 0);\r\n        yfvToken.approve(address(valueToken), _amount);\r\n        valueToken.deposit(_amount);\r\n        uint _after = valueToken.balanceOf(address(this));\r\n        require(totalDepositCap == 0 || _after <= totalDepositCap, \">totalDepositCap\");\r\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n        uint _shares = _deposit(address(this), _pool, _amount);\r\n        _stakeShares(msg.sender, _shares, _referrer);\r\n    }\r\n\r\n    function buyShares(uint _amount, uint8 _flag) public discountCHI(_flag) {\r\n        uint _pool = balance();\r\n        uint _before = valueToken.balanceOf(address(this));\r\n        valueToken.transferFrom(msg.sender, address(this), _amount);\r\n        uint _after = valueToken.balanceOf(address(this));\r\n        require(totalDepositCap == 0 || _after <= totalDepositCap, \">totalDepositCap\");\r\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\r\n        _deposit(msg.sender, _pool, _amount);\r\n    }\r\n\r\n    function depositShares(uint _shares, address _referrer, uint8 _flag) public discountCHI(_flag) {\r\n        require(totalDepositCap == 0 || balance().add(_shares) <= totalDepositCap, \">totalDepositCap\");\r\n        uint _before = balanceOf(address(this));\r\n        IERC20(address(this)).transferFrom(msg.sender, address(this), _shares);\r\n        uint _after = balanceOf(address(this));\r\n        _shares = _after.sub(_before); // Additional check for deflationary tokens\r\n        _stakeShares(msg.sender, _shares, _referrer);\r\n    }\r\n\r\n    function lockShares(uint _locked, uint _days, uint8 _flag) external discountCHI(_flag) {\r\n        require(_days >= 7 && _days <= maxLockedDays, \"_days out-of-range\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if (user.unlockedTime < block.timestamp) {\r\n            user.lockedAmount = 0;\r\n        } else {\r\n            require(_days >= user.lockedDays, \"Extra days should not less than current locked days\");\r\n        }\r\n        user.lockedAmount = user.lockedAmount.add(_locked);\r\n        require(user.lockedAmount <= user.amount, \"lockedAmount > amount\");\r\n        user.unlockedTime = block.timestamp.add(_days * 86400);\r\n        // (%) = 5 + (lockedDays - 7) * 0.15\r\n        user.boostedExtra = 50000000000 + (_days - 7) * 1500000000;\r\n        emit Locked(msg.sender, user.lockedAmount, _days);\r\n    }\r\n\r\n    function _deposit(address _mintTo, uint _pool, uint _amount) internal returns (uint _shares) {\r\n        _shares = 0;\r\n        if (totalSupply() == 0) {\r\n            _shares = _amount;\r\n        } else {\r\n            _shares = (_amount.mul(totalSupply())).div(_pool);\r\n        }\r\n        if (_shares > 0) {\r\n            if (valueToken.balanceOf(address(this)) > earnLowerlimit) {\r\n                earn(0x0);\r\n            }\r\n            _mint(_mintTo, _shares);\r\n        }\r\n    }\r\n\r\n    function _stakeShares(address _account, uint _shares, address _referrer) internal {\r\n        UserInfo storage user = userInfo[_account];\r\n        require(minStakingAmount == 0 || user.amount.add(_shares) >= minStakingAmount, \"<minStakingAmount\");\r\n        updateReward();\r\n        _getReward();\r\n        user.amount = user.amount.add(_shares);\r\n        if (user.lockedAmount > 0 && user.unlockedTime < block.timestamp) {\r\n            user.lockedAmount = 0;\r\n        }\r\n        user.valueRewardDebt = user.amount.mul(accValuePerShare).div(1e12);\r\n        user.vusdRewardDebt = user.amount.mul(accVusdPerShare).div(1e12);\r\n        user.lastStakeTime = block.timestamp;\r\n        emit Deposit(_account, _shares);\r\n        if (rewardReferral != address(0) && _account != address(0)) {\r\n            IYFVReferral(rewardReferral).setReferrer(_account, _referrer);\r\n        }\r\n    }\r\n\r\n    function unfrozenStakeTime(address _account) public view returns (uint) {\r\n        return userInfo[_account].lastStakeTime + unstakingFrozenTime;\r\n    }\r\n\r\n    // View function to see pending VALUEs on frontend.\r\n    function pendingValue(address _account) public view returns (uint _pending) {\r\n        UserInfo storage user = userInfo[_account];\r\n        uint _accValuePerShare = accValuePerShare;\r\n        uint lpSupply = balanceOf(address(this));\r\n        if (block.number > lastRewardBlock && lpSupply != 0) {\r\n            uint numBlocks = block.number.sub(lastRewardBlock);\r\n            _accValuePerShare = accValuePerShare.add(numBlocks.mul(valuePerBlock).mul(1e12).div(lpSupply));\r\n        }\r\n        _pending = user.amount.mul(_accValuePerShare).div(1e12).sub(user.valueRewardDebt);\r\n        if (user.lockedAmount > 0 && user.unlockedTime >= block.timestamp) {\r\n            uint _bonus = _pending.mul(user.lockedAmount.mul(user.boostedExtra).div(1e12)).div(user.amount);\r\n            uint _ceilingBonus = _pending.mul(33).div(100); // 33%\r\n            if (_bonus > _ceilingBonus) _bonus = _ceilingBonus; // Additional check to avoid insanely high bonus!\r\n            _pending = _pending.add(_bonus);\r\n        }\r\n    }\r\n\r\n    // View function to see pending vUSDs on frontend.\r\n    function pendingVusd(address _account) public view returns (uint) {\r\n        UserInfo storage user = userInfo[_account];\r\n        uint _accVusdPerShare = accVusdPerShare;\r\n        uint lpSupply = balanceOf(address(this));\r\n        if (block.number > lastRewardBlock && lpSupply != 0) {\r\n            uint numBlocks = block.number.sub(lastRewardBlock);\r\n            _accVusdPerShare = accVusdPerShare.add(numBlocks.mul(vusdPerBlock).mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(_accVusdPerShare).div(1e12).sub(user.vusdRewardDebt);\r\n    }\r\n\r\n    // View function to see pending vETHs on frontend.\r\n    function pendingVeth(address _account) public view returns (uint) {\r\n        return pendingVusd(_account).div(vETH_REWARD_FRACTION_RATE);\r\n    }\r\n\r\n    function stakingPower(address _account) public view returns (uint) {\r\n        return userInfo[_account].accumulatedStakingPower.add(pendingValue(_account));\r\n    }\r\n\r\n    function updateReward() public {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint lpSupply = balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint _numBlocks = block.number.sub(lastRewardBlock);\r\n        accValuePerShare = accValuePerShare.add(_numBlocks.mul(valuePerBlock).mul(1e12).div(lpSupply));\r\n        accVusdPerShare = accVusdPerShare.add(_numBlocks.mul(vusdPerBlock).mul(1e12).div(lpSupply));\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    function _getReward() internal {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint _pendingValue = user.amount.mul(accValuePerShare).div(1e12).sub(user.valueRewardDebt);\r\n        if (_pendingValue > 0) {\r\n            if (user.lockedAmount > 0) {\r\n                if (user.unlockedTime < block.timestamp) {\r\n                    user.lockedAmount = 0;\r\n                } else {\r\n                    uint _bonus = _pendingValue.mul(user.lockedAmount.mul(user.boostedExtra).div(1e12)).div(user.amount);\r\n                    uint _ceilingBonus = _pendingValue.mul(33).div(100); // 33%\r\n                    if (_bonus > _ceilingBonus) _bonus = _ceilingBonus; // Additional check to avoid insanely high bonus!\r\n                    _pendingValue = _pendingValue.add(_bonus);\r\n                }\r\n            }\r\n            user.accumulatedStakingPower = user.accumulatedStakingPower.add(_pendingValue);\r\n            uint actualPaid = _pendingValue.mul(99).div(100); // 99%\r\n            uint commission = _pendingValue - actualPaid; // 1%\r\n            safeValueMint(msg.sender, actualPaid);\r\n            address _referrer = address(0);\r\n            if (rewardReferral != address(0)) {\r\n                _referrer = IYFVReferral(rewardReferral).getReferrer(msg.sender);\r\n            }\r\n            if (_referrer != address(0)) { // send commission to referrer\r\n                safeValueMint(_referrer, commission);\r\n                CommissionPaid(_referrer, commission);\r\n            } else { // send commission to valueInsuranceFund\r\n                safeValueMint(valueInsuranceFund, commission);\r\n                CommissionPaid(valueInsuranceFund, commission);\r\n            }\r\n        }\r\n        uint _pendingVusd = user.amount.mul(accVusdPerShare).div(1e12).sub(user.vusdRewardDebt);\r\n        if (_pendingVusd > 0) {\r\n            safeVusdMint(msg.sender, _pendingVusd);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(uint8 _flag) public discountCHI(_flag) {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint _amount = user.amount;\r\n        if (user.lockedAmount > 0) {\r\n            if (user.unlockedTime < block.timestamp) {\r\n                user.lockedAmount = 0;\r\n            } else {\r\n                _amount = user.amount.sub(user.lockedAmount);\r\n            }\r\n        }\r\n        unstake(_amount, 0x0);\r\n        withdraw(balanceOf(msg.sender), 0x0);\r\n    }\r\n\r\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\r\n    function harvest(address reserve, uint amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(reserve != address(valueToken), \"token\");\r\n        ITokenInterface(reserve).transfer(controller, amount);\r\n    }\r\n\r\n    function unstake(uint _amount, uint8 _flag) public discountCHI(_flag) returns (uint _actualWithdraw) {\r\n        updateReward();\r\n        _getReward();\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        _actualWithdraw = _amount;\r\n        if (_amount > 0) {\r\n            require(user.amount >= _amount, \"stakedBal < _amount\");\r\n            if (user.lockedAmount > 0) {\r\n                if (user.unlockedTime < block.timestamp) {\r\n                    user.lockedAmount = 0;\r\n                } else {\r\n                    require(user.amount.sub(user.lockedAmount) >= _amount, \"stakedBal-locked < _amount\");\r\n                }\r\n            }\r\n            user.amount = user.amount.sub(_amount);\r\n\r\n            if (block.timestamp < user.lastStakeTime.add(unstakingFrozenTime)) {\r\n                // if coin is still frozen and governance does not allow stakers to unstake before timer ends\r\n                if (unlockWithdrawFee == 0 || valueInsuranceFund == address(0)) revert(\"Coin is still frozen\");\r\n\r\n                // otherwise withdrawFee will be calculated based on the rate\r\n                uint _withdrawFee = _amount.mul(unlockWithdrawFee).div(10000);\r\n                uint r = _amount.sub(_withdrawFee);\r\n                if (_amount > r) {\r\n                    _withdrawFee = _amount.sub(r);\r\n                    _actualWithdraw = r;\r\n                    IERC20(address(this)).transfer(valueInsuranceFund, _withdrawFee);\r\n                    emit RewardPaid(valueInsuranceFund, _withdrawFee);\r\n                }\r\n            }\r\n\r\n            IERC20(address(this)).transfer(msg.sender, _actualWithdraw);\r\n        }\r\n        user.valueRewardDebt = user.amount.mul(accValuePerShare).div(1e12);\r\n        user.vusdRewardDebt = user.amount.mul(accVusdPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    // No rebalance implementation for lower fees and faster swaps\r\n    function withdraw(uint _shares, uint8 _flag) public discountCHI(_flag) {\r\n        uint _userBal = balanceOf(msg.sender);\r\n        if (_shares > _userBal) {\r\n            uint _need = _shares.sub(_userBal);\r\n            require(_need <= userInfo[msg.sender].amount, \"_userBal+staked < _shares\");\r\n            uint _actualWithdraw = unstake(_need, 0x0);\r\n            _shares = _userBal.add(_actualWithdraw); // may be less than expected due to unlockWithdrawFee\r\n        }\r\n        uint r = (balance().mul(_shares)).div(totalSupply());\r\n        _burn(msg.sender, _shares);\r\n\r\n        // Check balance\r\n        uint b = valueToken.balanceOf(address(this));\r\n        if (b < r) {\r\n            uint _withdraw = r.sub(b);\r\n            if (controller != address(0)) {\r\n                IController(controller).withdraw(address(valueToken), _withdraw);\r\n            }\r\n            uint _after = valueToken.balanceOf(address(this));\r\n            uint _diff = _after.sub(b);\r\n            if (_diff < _withdraw) {\r\n                r = b.add(_diff);\r\n            }\r\n        }\r\n\r\n        valueToken.transfer(msg.sender, r);\r\n    }\r\n\r\n    function getPricePerFullShare() public view returns (uint) {\r\n        return balance().mul(1e18).div(totalSupply());\r\n    }\r\n\r\n    function getStrategyCount() external view returns (uint) {\r\n        return (controller != address(0)) ? IController(controller).getStrategyCount(address(this)) : 0;\r\n    }\r\n\r\n    function depositAvailable() external view returns (bool) {\r\n        return (controller != address(0)) ? IController(controller).depositAvailable(address(this)) : false;\r\n    }\r\n\r\n    function harvestAllStrategies(uint8 _flag) public discountCHI(_flag) {\r\n        if (controller != address(0)) {\r\n            IController(controller).harvestAllStrategies(address(this));\r\n        }\r\n    }\r\n\r\n    function harvestStrategy(address _strategy, uint8 _flag) public discountCHI(_flag) {\r\n        if (controller != address(0)) {\r\n            IController(controller).harvestStrategy(address(this), _strategy);\r\n        }\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if (user.lockedAmount > 0 && user.unlockedTime < block.timestamp) {\r\n            user.lockedAmount = 0;\r\n        }\r\n        uint _amount = user.amount.sub(user.lockedAmount);\r\n        user.amount = user.amount.sub(_amount);\r\n        user.valueRewardDebt = 0;\r\n        user.vusdRewardDebt = 0;\r\n        IERC20(address(this)).transfer(address(msg.sender), _amount);\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n    }\r\n\r\n    // Safe valueToken mint, ensure it is never over cap and we are the current owner.\r\n    function safeValueMint(address _to, uint _amount) internal {\r\n        if (valueToken.minters(address(this)) && _to != address(0)) {\r\n            uint totalSupply = valueToken.totalSupply();\r\n            uint realCap = valueToken.cap().add(valueToken.yfvLockedBalance());\r\n            if (totalSupply.add(_amount) > realCap) {\r\n                valueToken.mint(_to, realCap.sub(totalSupply));\r\n            } else {\r\n                valueToken.mint(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Safe vUSD mint, ensure we are the current owner.\r\n    // vETH will be minted together with fixed rate.\r\n    function safeVusdMint(address _to, uint _amount) internal {\r\n        if (vUSD.minters(address(this)) && _to != address(0)) {\r\n            vUSD.mint(_to, _amount);\r\n        }\r\n        if (vETH.minters(address(this)) && _to != address(0)) {\r\n            vETH.mint(_to, _amount.div(vETH_REWARD_FRACTION_RATE));\r\n        }\r\n    }\r\n\r\n    // This is for governance in some emergency circumstances to release lock immediately for an account\r\n    function governanceResetLocked(address _account) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        UserInfo storage user = userInfo[_account];\r\n        user.lockedAmount = 0;\r\n        user.lockedDays = 0;\r\n        user.boostedExtra = 0;\r\n        user.unlockedTime = 0;\r\n    }\r\n\r\n    // This function allows governance to take unsupported tokens out of the contract, since this pool exists longer than the others.\r\n    // This is in an effort to make someone whole, should they seriously mess up.\r\n    // There is no guarantee governance will vote to return these.\r\n    // It also allows for removal of airdropped tokens.\r\n    function governanceRecoverUnsupported(IERC20 _token, uint _amount, address _to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(address(_token) != address(valueToken) || balance().sub(_amount) >= totalSupply(), \"cant withdraw VALUE more than gvVALUE supply\");\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"_yfvToken\",\"type\":\"address\"},{\"internalType\":\"contract ITokenInterface\",\"name\":\"_valueToken\",\"type\":\"address\"},{\"internalType\":\"contract ITokenInterface\",\"name\":\"_vUSD\",\"type\":\"address\"},{\"internalType\":\"contract ITokenInterface\",\"name\":\"_vETH\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valuePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vusdPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUND_CAP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"buyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"depositShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"depositYFV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnLowerlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"getRewardAndDepositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"governanceResetLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestAllStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"lockShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingVeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingVusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earnLowerlimit\",\"type\":\"uint256\"}],\"name\":\"setEarnLowerlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundCap\",\"type\":\"uint256\"}],\"name\":\"setFundCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockedDays\",\"type\":\"uint256\"}],\"name\":\"setMaxLockedDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardReferral\",\"type\":\"address\"}],\"name\":\"setRewardReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalDepositCap\",\"type\":\"uint256\"}],\"name\":\"setTotalDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setUnlockWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingFrozenTime\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFrozenTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valueInsuranceFund\",\"type\":\"address\"}],\"name\":\"setValueInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valuePerBlock\",\"type\":\"uint256\"}],\"name\":\"setValuePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vusdPerBlock\",\"type\":\"uint256\"}],\"name\":\"setVusdPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unfrozenStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFrozenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vETHContract\",\"type\":\"address\"}],\"name\":\"upgradeVETHContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vUSDContract\",\"type\":\"address\"}],\"name\":\"upgradeVUSDContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vusdRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedStakingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedExtra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH\",\"outputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH_REWARD_FRACTION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vUSD\",\"outputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueInsuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valuePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueToken\",\"outputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vusdPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yfvToken\",\"outputs\":[{\"internalType\":\"contract ITokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ValueGovernanceVault","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000045f24baeef268bb6d63aee5129015d69702bcdfa00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c0000000000000000000000001b8e12f839bd4e73a47addf76cf7f0097d74c14c00000000000000000000000076a034e76aa835363056dd418611e4f81870f16e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000000a84620","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9797026fd36d6f0a381c1205701584f927af1e82c2c53664bd7004d84447ee6b"}]}