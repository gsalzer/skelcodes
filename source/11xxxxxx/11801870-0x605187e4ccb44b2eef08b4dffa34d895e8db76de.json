{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n\r\n    modifier onlyOneBlock() {\r\n        require(!checkSameOriginReentranted(), \"ContractGuard: one block, one function\");\r\n        require(!checkSameSenderReentranted(), \"ContractGuard: one block, one function\");\r\n\r\n        _;\r\n\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n\r\ninterface IEpochController {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function nextEpochLength() external view returns (uint256);\r\n\r\n    function nextEpochAllocatedReward(address _pool) external view returns (uint256);\r\n}\r\n\r\ninterface ITreasury is IEpochController {\r\n    function dollarPriceOne() external view returns (uint256);\r\n\r\n    function dollarPriceCeiling() external view returns (uint256);\r\n}\r\n\r\ninterface IDollar {\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IOracle {\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function updateCumulative() external;\r\n\r\n    function update() external;\r\n\r\n    function consult(address _token, uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function consultDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _dollarPrice);\r\n\r\n    function twap(uint256 _amountIn) external view returns (uint144 _amountOut);\r\n\r\n    function twapDollarPrice(address _sideToken, uint256 _amountIn) external view returns (uint256 _amountOut);\r\n}\r\n\r\ninterface IBondMarket {\r\n    function bondSupply() external view returns (uint256);\r\n\r\n    function isDebtPhase() external view returns (bool);\r\n\r\n    function epoch() external view returns (uint256);\r\n\r\n    function nextEpochPoint() external view returns (uint256);\r\n\r\n    function nextEpochLength() external view returns (uint256);\r\n\r\n    function issueNewBond(uint256 _issuedBond) external;\r\n\r\n    function buyCoupons(uint256 _amount, uint256 _targetPrice) external;\r\n\r\n    function redeemCoupons(\r\n        uint256 _epoch,\r\n        uint256 _amount,\r\n        uint256 _targetPrice\r\n    ) external;\r\n}\r\n\r\ninterface IStakePoolEpochReward {\r\n    function allocateReward(uint256 _amount) external;\r\n}\r\n\r\ncontract Treasury is ContractGuard, ITreasury {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // governance\r\n    address public operator;\r\n    address public strategist;\r\n\r\n    // flags\r\n    bool public initialized = false;\r\n\r\n    // epoch\r\n    uint256 public baseEpochPeriod;\r\n    uint256 public lastEpochTime;\r\n    uint256 private _epoch = 0;\r\n\r\n    // core components\r\n    address public dollar;\r\n    address public dollarOracle;\r\n    address public bondMarket;\r\n    address public reserveFund;\r\n    address public lpPool; // vUSD-WETH 80/20\r\n    address public stakePool; // vUSD-WETH 98/2\r\n    address public liquidityIncentiveFund;\r\n\r\n    // expansion distribution percents\r\n    uint256 public expansionPercentReserveFund;\r\n    uint256 public expansionPercentLpPool;\r\n    uint256 public expansionPercentStakePool;\r\n    uint256 public expansionPercentLiquidityIncentiveFund;\r\n    uint256 public expansionPercentDebtPhaseReserveFund;\r\n    uint256 public expansionPercentDebtPhaseLpPool;\r\n    uint256 public expansionPercentDebtPhaseStakePool;\r\n    uint256 public expansionPercentDebtPhaseLiquidityIncentiveFund;\r\n\r\n    // price\r\n    uint256 public override dollarPriceOne;\r\n    uint256 public override dollarPriceCeiling;\r\n    address public sideToken; // WETH\r\n\r\n    uint256 public maxSupplyExpansionRate;\r\n\r\n    uint256 public bootstrapEpochs;\r\n    uint256 public bootstrapDollarPrice;\r\n\r\n    uint256 public allocateSeigniorageSalary;\r\n\r\n    /* =================== Events =================== */\r\n\r\n    event Initialized(address indexed executor, uint256 at);\r\n    event SeigniorageFunded(\r\n        uint256 timestamp,\r\n        uint256 reserveFundAmt,\r\n        uint256 lpPoolAmt,\r\n        uint256 stakePoolAmt,\r\n        uint256 liquidityIncentiveFundAmt,\r\n        uint256 bondMarketFundAmt\r\n    );\r\n\r\n    /* =================== Modifier =================== */\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"Treasury: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(strategist == msg.sender || operator == msg.sender, \"Treasury: caller is not a strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier checkEpoch {\r\n        uint256 _nextEpochPoint = nextEpochPoint();\r\n        require(now >= _nextEpochPoint, \"Treasury: not opened yet\");\r\n        _;\r\n        lastEpochTime = _nextEpochPoint;\r\n        _epoch = _epoch.add(1);\r\n    }\r\n\r\n    modifier notInitialized {\r\n        require(!initialized, \"Treasury: already initialized\");\r\n        _;\r\n    }\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    // flags\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // epoch\r\n    function epoch() public view override returns (uint256) {\r\n        return _epoch;\r\n    }\r\n\r\n    function nextEpochPoint() public view override returns (uint256) {\r\n        return lastEpochTime.add(nextEpochLength());\r\n    }\r\n\r\n    function nextEpochLength() public view override returns (uint256 _length) {\r\n        if (_epoch <= bootstrapEpochs) {\r\n            // 14 first epochs with 12h long\r\n            _length = 12 hours;\r\n        } else {\r\n            uint256 dollarPrice = getDollarPrice();\r\n            if (dollarPrice > dollarPriceOne.mul(2))\r\n                dollarPrice = dollarPriceOne.mul(2); // in expansion: round(10h * min(TWAP, 2))\r\n            else if (dollarPrice < dollarPriceOne.div(2)) dollarPrice = dollarPriceOne.div(2); // in contraction: round(10h * max(TWAP, 0.5))\r\n            _length = dollarPrice.mul(baseEpochPeriod).div(dollarPriceOne);\r\n            _length = _length.div(3600).mul(3600);\r\n        }\r\n    }\r\n\r\n    // oracle\r\n    function getDollarPrice() public view returns (uint256 _dollarPrice) {\r\n        if (dollarOracle == address(0)) {\r\n            return dollarPriceOne;\r\n        }\r\n        try IOracle(dollarOracle).consultDollarPrice(sideToken, 1e18) returns (uint256 price) {\r\n            return price;\r\n        } catch {\r\n            revert(\"Treasury: failed to consult dollar price from the oracle\");\r\n        }\r\n    }\r\n\r\n    // oracle\r\n    function getDollarUpdatedPrice() public view returns (uint256 _dollarPrice) {\r\n        if (dollarOracle == address(0)) {\r\n            return dollarPriceOne;\r\n        }\r\n        try IOracle(dollarOracle).twapDollarPrice(sideToken, 1e18) returns (uint256 price) {\r\n            return price;\r\n        } catch {\r\n            revert(\"Treasury: failed to get TWAP dollar price from the oracle\");\r\n        }\r\n    }\r\n\r\n    function isDebtPhase() public view returns (bool) {\r\n        return (bondMarket == address(0)) ? false : IBondMarket(bondMarket).isDebtPhase();\r\n    }\r\n\r\n    /* ========== GOVERNANCE ========== */\r\n\r\n    function initialize(\r\n        address _dollar,\r\n        address _sideToken,\r\n        address _reserveFund,\r\n        address _lpPool,\r\n        address _stakePool,\r\n        address _liquidityIncentiveFund,\r\n        uint256 _baseEpochPeriod,\r\n        uint256 _startTime\r\n    ) public notInitialized {\r\n        dollar = _dollar;\r\n        sideToken = _sideToken;\r\n        reserveFund = _reserveFund;\r\n        lpPool = _lpPool;\r\n        stakePool = _stakePool;\r\n        liquidityIncentiveFund = _liquidityIncentiveFund;\r\n        baseEpochPeriod = _baseEpochPeriod; // 10 hours\r\n        lastEpochTime = _startTime.sub(12 hours);\r\n\r\n        expansionPercentReserveFund = 500; // 5% goes to reserveFund\r\n        expansionPercentLpPool = 3500; // 35% goes to lpPool (vUSD-WETH 80/20)\r\n        expansionPercentStakePool = 5000; // 50% goes to lpPool (vUSD-WETH 98/2)\r\n        expansionPercentLiquidityIncentiveFund = 1000; // 10% goes to liquidityIncentiveFund\r\n\r\n        // In Debt Phase\r\n        expansionPercentDebtPhaseReserveFund = 500; // 5% goes to reserveFund\r\n        expansionPercentDebtPhaseLpPool = 1500; // 15% goes to lpPool (vUSD-WETH 80/20)\r\n        expansionPercentDebtPhaseStakePool = 1000; // 10% goes to lpPool (vUSD-WETH 98/2)\r\n        expansionPercentDebtPhaseLiquidityIncentiveFund = 500; // 5% goes to liquidityIncentiveFund\r\n\r\n        dollarPriceOne = 10**18;\r\n        dollarPriceCeiling = dollarPriceOne.mul(101).div(100);\r\n\r\n        maxSupplyExpansionRate = 2e16; // Upto 2% supply for expansion\r\n\r\n        bootstrapEpochs = 14;\r\n        bootstrapDollarPrice = dollarPriceOne.mul(120).div(100);\r\n\r\n        allocateSeigniorageSalary = 10 ether;\r\n\r\n        initialized = true;\r\n        operator = msg.sender;\r\n        emit Initialized(msg.sender, block.number);\r\n    }\r\n\r\n    function setOperator(address _operator) external onlyOperator {\r\n        operator = _operator;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external onlyOperator {\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setBaseEpochPeriod(uint256 _baseEpochPeriod) external onlyOperator {\r\n        require(_baseEpochPeriod >= 30 minutes && _baseEpochPeriod <= 48 hours, \"out of range\");\r\n        baseEpochPeriod = _baseEpochPeriod;\r\n    }\r\n\r\n    function setDollarOracle(address _dollarOracle) external onlyOperator {\r\n        dollarOracle = _dollarOracle;\r\n    }\r\n\r\n    function setBondMarket(address _bondMarket) external onlyOperator {\r\n        bondMarket = _bondMarket;\r\n    }\r\n\r\n    function setReserveFund(address _reserveFund) external onlyOperator {\r\n        reserveFund = _reserveFund;\r\n    }\r\n\r\n    function setLpPool(address _lpPool) external onlyOperator {\r\n        lpPool = _lpPool;\r\n    }\r\n\r\n    function setStakePool(address _stakePool) external onlyOperator {\r\n        stakePool = _stakePool;\r\n    }\r\n\r\n    function setLiquidityIncentiveFund(address _liquidityIncentiveFund) external onlyOperator {\r\n        liquidityIncentiveFund = _liquidityIncentiveFund;\r\n    }\r\n\r\n    function setExpansionPercents(\r\n        uint256 _expansionPercentReserveFund,\r\n        uint256 _expansionPercentLpPool,\r\n        uint256 _expansionPercentStakePool,\r\n        uint256 _expansionPercentLiquidityIncentiveFund\r\n    ) external onlyOperator {\r\n        require(\r\n            _expansionPercentReserveFund.add(_expansionPercentLpPool).add(_expansionPercentStakePool).add(_expansionPercentLiquidityIncentiveFund) == 10000,\r\n            \"!100%\"\r\n        );\r\n        expansionPercentReserveFund = _expansionPercentReserveFund;\r\n        expansionPercentLpPool = _expansionPercentLpPool;\r\n        expansionPercentStakePool = _expansionPercentStakePool;\r\n        expansionPercentLiquidityIncentiveFund = _expansionPercentLiquidityIncentiveFund;\r\n    }\r\n\r\n    function setExpansionPercentsDebtPhase(\r\n        uint256 _expansionPercentDebtPhaseReserveFund,\r\n        uint256 _expansionPercentDebtPhaseLpPool,\r\n        uint256 _expansionPercentDebtPhaseStakePool,\r\n        uint256 _expansionPercentDebtPhaseLiquidityIncentiveFund\r\n    ) external onlyOperator {\r\n        require(\r\n            _expansionPercentDebtPhaseReserveFund.add(_expansionPercentDebtPhaseLpPool).add(_expansionPercentDebtPhaseStakePool).add(\r\n                _expansionPercentDebtPhaseLiquidityIncentiveFund\r\n            ) <= 5000,\r\n            \"over 50%\"\r\n        );\r\n        expansionPercentDebtPhaseReserveFund = _expansionPercentDebtPhaseReserveFund;\r\n        expansionPercentDebtPhaseLpPool = _expansionPercentDebtPhaseLpPool;\r\n        expansionPercentDebtPhaseStakePool = _expansionPercentDebtPhaseStakePool;\r\n        expansionPercentDebtPhaseLiquidityIncentiveFund = _expansionPercentDebtPhaseLiquidityIncentiveFund;\r\n    }\r\n\r\n    function setDollarPriceCeiling(uint256 _dollarPriceCeiling) external onlyOperator {\r\n        require(_dollarPriceCeiling >= dollarPriceOne && _dollarPriceCeiling <= dollarPriceOne.mul(120).div(100), \"out of range\"); // [$1.0, $1.2]\r\n        dollarPriceCeiling = _dollarPriceCeiling;\r\n    }\r\n\r\n    function setMaxSupplyExpansionRate(uint256 _maxSupplyExpansionRate) external onlyOperator {\r\n        require(_maxSupplyExpansionRate >= 10 && _maxSupplyExpansionRate <= 1500, \"out of range\"); // [0.1%, 15%]\r\n        maxSupplyExpansionRate = _maxSupplyExpansionRate;\r\n    }\r\n\r\n    function setBootstrapEpochs(uint256 _bootstrapEpochs) external onlyOperator {\r\n        require(_bootstrapEpochs <= 60, \"_bootstrapEpochs: out of range\"); // <= 1 month\r\n        bootstrapEpochs = _bootstrapEpochs;\r\n    }\r\n\r\n    function setAllocateSeigniorageSalary(uint256 _allocateSeigniorageSalary) external onlyOperator {\r\n        require(_allocateSeigniorageSalary <= 100 ether, \"Treasury: dont pay too much\");\r\n        allocateSeigniorageSalary = _allocateSeigniorageSalary;\r\n    }\r\n\r\n    function governanceRecoverUnsupported(\r\n        IERC20 _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) external onlyOperator {\r\n        // do not allow to drain core tokens\r\n        require(address(_token) != address(dollar), \"dollar\");\r\n        _token.safeTransfer(_to, _amount);\r\n    }\r\n\r\n    /* ========== MUTABLE FUNCTIONS ========== */\r\n\r\n    function _updateDollarPrice() internal {\r\n        try IOracle(dollarOracle).update() {} catch {}\r\n    }\r\n\r\n    function _updateDollarPriceCumulative() internal {\r\n        try IOracle(dollarOracle).updateCumulative() {} catch {}\r\n    }\r\n\r\n    function nextEpochAllocatedReward(address _pool) external view override returns (uint256 _allocatedReward) {\r\n        uint256 dollarPrice = (_epoch <= bootstrapEpochs) ? bootstrapDollarPrice : getDollarPrice();\r\n        uint256 _dollarSupply = IERC20(dollar).totalSupply();\r\n        uint256 _supplyExpansion = 0;\r\n        if (dollarPrice >= dollarPriceCeiling) {\r\n            uint256 _percentage = dollarPrice.sub(dollarPriceOne);\r\n            if (_percentage > maxSupplyExpansionRate) {\r\n                _percentage = maxSupplyExpansionRate;\r\n            }\r\n            _supplyExpansion = _dollarSupply.mul(_percentage).div(1e18);\r\n        }\r\n        bool _debtPhase = isDebtPhase();\r\n        if (_pool == reserveFund) {\r\n            _allocatedReward = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseReserveFund : expansionPercentReserveFund).div(10000);\r\n        } else if (_pool == lpPool) {\r\n            uint256 _lpPoolExtraAmt = IERC20(dollar).balanceOf(address(this)); // 5% of the burned vUSD via BondMarket\r\n            _allocatedReward = _lpPoolExtraAmt.add(_supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLpPool : expansionPercentLpPool).div(10000));\r\n        } else if (_pool == stakePool) {\r\n            _allocatedReward = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseStakePool : expansionPercentStakePool).div(10000);\r\n        } else if (_pool == liquidityIncentiveFund) {\r\n            _allocatedReward = _supplyExpansion\r\n                .mul((_debtPhase) ? expansionPercentDebtPhaseLiquidityIncentiveFund : expansionPercentLiquidityIncentiveFund)\r\n                .div(10000);\r\n        }\r\n    }\r\n\r\n    function _allocateReward(address _pool, uint256 _amount) internal {\r\n        if (_amount > 0) {\r\n            IERC20(dollar).safeApprove(_pool, 0);\r\n            IERC20(dollar).safeApprove(_pool, _amount);\r\n            IStakePoolEpochReward(_pool).allocateReward(_amount);\r\n        }\r\n    }\r\n\r\n    function _mintedNewDollars(uint256 _supplyExpansion, bool _debtPhase) internal {\r\n        uint256 _reserveFundAmt = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseReserveFund : expansionPercentReserveFund).div(10000);\r\n        uint256 _lpPoolExtraAmt = IERC20(dollar).balanceOf(address(this)); // 5% of the burned vUSD via BondMarket\r\n        uint256 _lpPoolAmt = _lpPoolExtraAmt.add(_supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLpPool : expansionPercentLpPool).div(10000));\r\n        uint256 _stakePoolAmt = _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseStakePool : expansionPercentStakePool).div(10000);\r\n        uint256 _liquidityIncentiveFundAmt =\r\n            _supplyExpansion.mul((_debtPhase) ? expansionPercentDebtPhaseLiquidityIncentiveFund : expansionPercentLiquidityIncentiveFund).div(10000);\r\n        IDollar(dollar).mint(address(this), _supplyExpansion);\r\n        IERC20(dollar).safeTransfer(reserveFund, _reserveFundAmt);\r\n        _allocateReward(lpPool, _lpPoolAmt);\r\n        _allocateReward(stakePool, _stakePoolAmt);\r\n        IERC20(dollar).safeTransfer(liquidityIncentiveFund, _liquidityIncentiveFundAmt);\r\n        uint256 _bondMarketFundAmt = 0;\r\n        if (_debtPhase) {\r\n            _bondMarketFundAmt = IERC20(dollar).balanceOf(address(this));\r\n            IERC20(dollar).safeTransfer(bondMarket, _bondMarketFundAmt);\r\n        }\r\n        emit SeigniorageFunded(block.timestamp, _reserveFundAmt, _lpPoolAmt, _stakePoolAmt, _liquidityIncentiveFundAmt, _bondMarketFundAmt);\r\n    }\r\n\r\n    function allocateSeigniorage(uint256 _rate) external onlyOneBlock checkEpoch onlyStrategist {\r\n        _updateDollarPrice();\r\n        uint256 dollarPrice = (_epoch <= bootstrapEpochs) ? bootstrapDollarPrice : getDollarPrice();\r\n        uint256 _dollarSupply = IERC20(dollar).totalSupply();\r\n        if (dollarPrice >= dollarPriceCeiling) {\r\n            uint256 _percentage = dollarPrice.sub(dollarPriceOne);\r\n            require(_rate <= _percentage, \"Treasury: over expansion rate\");\r\n            require(_rate <= maxSupplyExpansionRate, \"Treasury: over maxSupplyExpansionRate\");\r\n            uint256 _supplyExpansion = _dollarSupply.mul(_rate).div(1e18);\r\n            _mintedNewDollars(_supplyExpansion, isDebtPhase());\r\n        } else if (dollarPrice < dollarPriceOne) {\r\n            require(_rate <= 2e17, \"Treasury: issued new bonds is over 20%\");\r\n            uint256 _issuedBond = _dollarSupply.mul(_rate).div(1e18);\r\n            IBondMarket(bondMarket).issueNewBond(_issuedBond);\r\n            _allocateReward(lpPool, IERC20(dollar).balanceOf(address(this))); // 5% of the burned vUSD via BondMarket\r\n        }\r\n        if (allocateSeigniorageSalary > 0) {\r\n            IDollar(dollar).mint(address(msg.sender), allocateSeigniorageSalary);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveFundAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpPoolAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoolAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIncentiveFundAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondMarketFundAmt\",\"type\":\"uint256\"}],\"name\":\"SeigniorageFunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorageSalary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseEpochPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bootstrapEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dollarPriceOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentDebtPhaseLiquidityIncentiveFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentDebtPhaseLpPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentDebtPhaseReserveFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentDebtPhaseStakePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentLiquidityIncentiveFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentLpPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentReserveFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expansionPercentStakePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDollarPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDollarUpdatedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityIncentiveFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseEpochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDebtPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIncentiveFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyExpansionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"nextEpochAllocatedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocateSeigniorageSalary\",\"type\":\"uint256\"}],\"name\":\"setAllocateSeigniorageSalary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseEpochPeriod\",\"type\":\"uint256\"}],\"name\":\"setBaseEpochPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondMarket\",\"type\":\"address\"}],\"name\":\"setBondMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bootstrapEpochs\",\"type\":\"uint256\"}],\"name\":\"setBootstrapEpochs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dollarOracle\",\"type\":\"address\"}],\"name\":\"setDollarOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollarPriceCeiling\",\"type\":\"uint256\"}],\"name\":\"setDollarPriceCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expansionPercentReserveFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentLpPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentStakePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentLiquidityIncentiveFund\",\"type\":\"uint256\"}],\"name\":\"setExpansionPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expansionPercentDebtPhaseReserveFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentDebtPhaseLpPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentDebtPhaseStakePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expansionPercentDebtPhaseLiquidityIncentiveFund\",\"type\":\"uint256\"}],\"name\":\"setExpansionPercentsDebtPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityIncentiveFund\",\"type\":\"address\"}],\"name\":\"setLiquidityIncentiveFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"}],\"name\":\"setLpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupplyExpansionRate\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyExpansionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveFund\",\"type\":\"address\"}],\"name\":\"setReserveFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakePool\",\"type\":\"address\"}],\"name\":\"setStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Treasury","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59a4bc14a70d0a28298faebb1216a597bfcaabb354844c353a4fc30167a27472"}]}