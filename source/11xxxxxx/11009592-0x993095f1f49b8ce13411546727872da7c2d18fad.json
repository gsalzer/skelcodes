{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n**  \r\n**  ________/\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_        \r\n**   _____/\\\\\\////////__\\/\\\\\\///////////__\\/////\\\\\\///__       \r\n**    ___/\\\\\\/___________\\/\\\\\\_________________\\/\\\\\\_____      \r\n**     __/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\_________\\/\\\\\\_____     \r\n**      _\\/\\\\\\_____________\\/\\\\\\///////__________\\/\\\\\\_____    \r\n**       _\\//\\\\\\____________\\/\\\\\\_________________\\/\\\\\\_____   \r\n**        __\\///\\\\\\__________\\/\\\\\\_________________\\/\\\\\\_____  \r\n**         ____\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\_ \r\n**          _______\\/////////__\\///______________\\///////////__\r\n**  \r\n**  \r\n**          colibri.finance (CFI) presale contract\r\n**          Part of a deflationary, dual token model\r\n**          See colibri.finance for more information\r\n**          \r\n**          NOTE: The functional presale code is at the bottom!\r\n*/\r\n\r\npragma solidity ^0.5.1;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract CFI is ERC20Detailed {\r\n\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    // setup token\r\n    string constant tokenName = \"colibri.finance\";\r\n    string constant tokenSymbol = \"CFI\";\r\n    uint8  constant tokenDecimals = 18;\r\n    // total supply 50,000\r\n    uint256 _totalSupply = 50000000000000000000000;\r\n    // set percentage with 2 decimals precision, so we get 100/100000\r\n    uint256 public basePercent = 100;\r\n\r\n    constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n        _mint(msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n    }\r\n\r\n    function estimateOnePercent(uint256 value) public view returns (uint256)  {\r\n    uint256 roundValue = value.ceil(basePercent);\r\n    uint256 onePercent = roundValue.mul(basePercent).div(10000);\r\n    return onePercent;\r\n    }\r\n\r\n    // transfer with burn mechanism\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 tokensToBurn = estimateOnePercent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[from]);\r\n    \r\n    // address frm = from;\r\n    // address sender = msg.sender;\r\n    \r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToBurn = estimateOnePercent(value);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n\r\n    return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// Presale code\r\n\r\ncontract PresaleCFI {\r\n    using SafeMath for uint256;\r\n    \r\n    address payable private _cfiFundAddress;\r\n    address private _cfiContractAddress;\r\n    uint256 public weiRemaining;\r\n    uint256 public tokensPerEth;\r\n    uint256 public tokensRemaining;\r\n    address public owner;\r\n    bool public presaleOpened;\r\n    \r\n    event Purchase(address indexed from, uint256 value);\r\n    \r\n    constructor(address cfiContractAddress) public {\r\n        owner = msg.sender;\r\n        _cfiFundAddress = 0x1f10185335FEDd2D6FB1219452769f58eaa032Fa;\r\n        _cfiContractAddress = cfiContractAddress;\r\n        \r\n        // 200 ETH total\r\n        weiRemaining = 200000000000000000000;\r\n        // 200 CFI per ETH\r\n        tokensPerEth = 200;\r\n        \r\n        tokensRemaining = weiRemaining.mul(tokensPerEth);\r\n\r\n        // presale only open after we call it\r\n        presaleOpened = false;\r\n    }\r\n    \r\n    // fallback executes the purchase process\r\n    function() external payable {\r\n        _purchaseTokens(msg.sender);\r\n    }\r\n\r\n    function openPresale() external {\r\n        require(msg.sender == owner, \"Only CFI owner can open the presale.\");\r\n        presaleOpened = true;\r\n    }\r\n    \r\n    function _purchaseTokens(address payable _toAddress) internal{\r\n        require(presaleOpened, \"Presale not yet opened!\");\r\n        \r\n        // set wei amount to fill for the last purchase\r\n        uint256 weiAmount = weiRemaining < msg.value ? weiRemaining : msg.value;\r\n        \r\n        // send ether to CFI fund\r\n        _cfiFundAddress.transfer(weiAmount);\r\n        \r\n        // buy tokens\r\n        uint256 tokenAmount = weiAmount.mul(tokensPerEth);\r\n        releaseCFI(_toAddress, tokenAmount);\r\n        \r\n        // update remaining\r\n        weiRemaining = weiRemaining.sub(weiAmount);\r\n        tokensRemaining = tokensRemaining.sub(tokenAmount);\r\n        \r\n        // refund excess if filled\r\n        uint256 refund = msg.value.sub(weiAmount);\r\n        if (refund > 0) {\r\n            _toAddress.transfer(refund);\r\n        }\r\n\r\n        // emit event\r\n        emit Purchase(_cfiContractAddress, tokensRemaining);\r\n    }\r\n    \r\n    function releaseCFI(address receiver, uint256 amount) internal {\r\n        require(amount <= tokensRemaining);\r\n        \r\n        CFI cfi = CFI(_cfiContractAddress);\r\n        cfi.transferFrom(_cfiFundAddress, receiver, amount);\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleOpened\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cfiContractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"}]","ContractName":"PresaleCFI","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000026e3fa6491d26094b94cd9833c76191c04f2f282","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://0b8a2bbdd170af3d08e935fbe356d65b5916979d414b2d09a316108085a0b577"}]}